void sub_1B7C63DB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void **a6)
{
  uint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  void *v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unint64_t v38;
  void *v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(a1, a2, a3, a4, a6);
  v11 = *a4;
  v12 = *a6;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v12, "indexOfObject:", v13);
  v15 = *a6;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v11);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v15, "indexOfObject:", v16);

  if (v14 < v17)
  {
    v18 = *a4;
    *a4 = *a5;
    *a5 = v18;
    v19 = *a3;
    v20 = *a6;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a4);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v20, "indexOfObject:", v21);
    v23 = *a6;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v19);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v23, "indexOfObject:", v24);

    if (v22 < v25)
    {
      v26 = *a3;
      *a3 = *a4;
      *a4 = v26;
      v27 = *a2;
      v28 = *a6;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a3);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(v28, "indexOfObject:", v29);
      v31 = *a6;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v27);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v31, "indexOfObject:", v32);

      if (v30 < v33)
      {
        v34 = *a2;
        *a2 = *a3;
        *a3 = v34;
        v35 = *a1;
        v36 = *a6;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a2);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = objc_msgSend(v36, "indexOfObject:", v37);
        v39 = *a6;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v35);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = objc_msgSend(v39, "indexOfObject:", v40);

        if (v38 < v41)
        {
          v42 = *a1;
          *a1 = *a2;
          *a2 = v42;
        }
      }
    }
  }
}

void sub_1B7C640D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, void **a4)
{
  uint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  unint64_t v31;
  void *v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unint64_t v38;
  void *v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;

  v8 = *a1;
  v9 = *a4;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v9, "indexOfObject:", v10);
  v12 = *a4;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v8);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v12, "indexOfObject:", v13);

  v15 = *a2;
  v16 = *a4;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 >= v14)
  {
    v23 = objc_msgSend(v16, "indexOfObject:", v17);
    v24 = *a4;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v15);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v24, "indexOfObject:", v25);

    if (v23 < v26)
    {
      v27 = *a2;
      *a2 = *a3;
      *a3 = v27;
      v28 = *a1;
      v29 = *a4;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a2);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend(v29, "indexOfObject:", v30);
      v32 = *a4;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v28);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend(v32, "indexOfObject:", v33);

      if (v31 < v34)
      {
        v35 = *a1;
        *a1 = *a2;
        *a2 = v35;
      }
    }
  }
  else
  {
    v18 = objc_msgSend(v16, "indexOfObject:", v17);
    v19 = *a4;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v15);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v19, "indexOfObject:", v20);

    v22 = *a1;
    if (v18 >= v21)
    {
      *a1 = *a2;
      *a2 = v22;
      v36 = *a4;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a3);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend(v36, "indexOfObject:", v37);
      v39 = *a4;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v22);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend(v39, "indexOfObject:", v40);

      if (v38 < v41)
      {
        v42 = *a2;
        *a2 = *a3;
        *a3 = v42;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v22;
    }
  }
}

void sub_1B7C64398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(uint64_t *a1, uint64_t *a2, void **a3)
{
  uint64_t *v4;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  void *v31;
  void *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;

  v4 = a2;
  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a1;
      v9 = *a3;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(a2 - 1));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v9, "indexOfObject:", v10);
      v12 = *a3;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v12, "indexOfObject:", v13);

      if (v11 < v14)
      {
        v15 = *a1;
        *a1 = *(v4 - 1);
        *(v4 - 1) = v15;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v16 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(a1, a1 + 1, a1 + 2, a3);
      v17 = a1 + 3;
      if (a1 + 3 == v4)
        return 1;
      v18 = 0;
      v37 = 0;
      v35 = v4;
      break;
  }
  while (1)
  {
    v19 = *v16;
    v20 = *a3;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *v17);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v20, "indexOfObject:", v21);
    v23 = *a3;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v19);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v23, "indexOfObject:", v24);

    if (v22 < v25)
    {
      v26 = *v17;
      v36 = v18;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18 + 24) = *(uint64_t *)((char *)a1 + v18 + 16);
        if (v18 == -16)
          break;
        v27 = *(uint64_t *)((char *)a1 + v18 + 8);
        v28 = *a3;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v26);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v28, "indexOfObject:", v29);
        v31 = *a3;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v27);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend(v31, "indexOfObject:", v32);

        v18 -= 8;
        if (v30 >= v33)
        {
          v34 = (uint64_t *)((char *)a1 + v18 + 24);
          goto LABEL_13;
        }
      }
      v34 = a1;
LABEL_13:
      *v34 = v26;
      ++v37;
      v4 = v35;
      v18 = v36;
      if (v37 == 8)
        return v17 + 1 == v35;
    }
    v16 = v17;
    v18 += 8;
    if (++v17 == v4)
      return 1;
  }
}

void sub_1B7C64698(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void **a5)
{
  uint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  void *v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(a1, a2, a3, a5);
  v10 = *a3;
  v11 = *a5;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v11, "indexOfObject:", v12);
  v14 = *a5;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v10);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v14, "indexOfObject:", v15);

  if (v13 < v16)
  {
    v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    v18 = *a2;
    v19 = *a5;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a3);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v19, "indexOfObject:", v20);
    v22 = *a5;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v18);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v22, "indexOfObject:", v23);

    if (v21 < v24)
    {
      v25 = *a2;
      *a2 = *a3;
      *a3 = v25;
      v26 = *a1;
      v27 = *a5;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *a2);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = objc_msgSend(v27, "indexOfObject:", v28);
      v30 = *a5;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v26);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v30, "indexOfObject:", v31);

      if (v29 < v32)
      {
        v33 = *a1;
        *a1 = *a2;
        *a2 = v33;
      }
    }
  }
}

void sub_1B7C64888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D045A8;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_WORD *)(a1 + 640) = 1;
  *(_BYTE *)(a1 + 642) = 0;
  *(_BYTE *)(a1 + 644) = 0;
  *(_QWORD *)(a1 + 648) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  return a1;
}

uint64_t _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;

  v11 = a2;
  v12 = a5;
  v13 = a6;
  *(_QWORD *)a1 = off_1E6D04688;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = objc_msgSend(v11, "copy");
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = objc_msgSend(v12, "copy");
  objc_initWeak((id *)(a1 + 48), v13);

  return a1;
}

void sub_1B7C64A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id *v5;

  objc_destroyWeak(v5);
  _Unwind_Resume(a1);
}

void _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation(_HDStatisticsCollectionCalculatorImplementation *this)
{
  objc_destroyWeak((id *)this + 6);

  objc_destroyWeak((id *)this + 1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D045A8;
  v2 = *(void **)(a1 + 672);
  if (v2)
  {
    *(_QWORD *)(a1 + 680) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 608);
  if (v3)
  {
    *(_QWORD *)(a1 + 616) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 640) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

}

void sub_1B7C64B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 648) = v4;
    v3 = v5;
  }

}

void sub_1B7C64B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 82, a2);
  v7 = a2;
  v4 = a1[82];
  v5 = a1[79];
  a1[79] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[79]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 272) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7C64D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[61];

  if (*(_BYTE *)(a1 + 640))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7C64DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 642))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 641))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 643))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 680);
    v18 = *(_QWORD *)(a1 + 688);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 672);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 680);
      v33 = *(char **)(a1 + 672);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 672);
      }
      *(_QWORD *)(a1 + 672) = v28;
      *(_QWORD *)(a1 + 680) = v21;
      *(_QWORD *)(a1 + 688) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 680) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7C65020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 642))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 642) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 641))
    goto LABEL_5;
  v9 = *(void **)(a1 + 664);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_198);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 664);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 664);
  *(_QWORD *)(a1 + 664) = 0;

  *(_BYTE *)(a1 + 641) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 672);
    *(_QWORD *)(a1 + 688) = 0;
    *(_QWORD *)(a1 + 680) = 0;
    *(_QWORD *)(a1 + 672) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 672);
      v37 = *(__int128 **)(a1 + 680);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 680);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 680) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 672);
  v39 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 616) != *(_QWORD *)(a1 + 608))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 616) != *(_QWORD *)(a1 + 608));
  }
  *(_BYTE *)(a1 + 642) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 644))
    {
      *(_BYTE *)(a1 + 644) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 642) = 0;
LABEL_83:

  return v7;
}

void sub_1B7C65718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 642) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 643) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 642))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 642))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 664);
    *(_QWORD *)(a1 + 664) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 641) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 641))
  {
    v8 = *(void **)(a1 + 664);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 664);
      *(_QWORD *)(a1 + 664) = v9;

      v8 = *(void **)(a1 + 664);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7C65A14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 640) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 640) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7C65B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 640) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 640), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(int **)(a1 + 400);
  if (v9 != (int *)(a1 + 408))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, v9 + 10);
      v10 = *((_QWORD *)v9 + 4);
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (int *)*((_QWORD *)v9 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(int **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (int *)*((_QWORD *)v9 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (int *)(a1 + 408));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 608);
  for (k = *(int8x16_t **)(a1 + 616); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7C65ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD **i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **j;
  uint64_t **v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t k;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  id v61;
  _QWORD *v62;
  uint64_t v63;
  id v64;
  __n128 v65;
  void *v66[2];
  __int128 v67;
  int8x16_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  int8x16_t v73;
  uint64_t v74;
  uint64_t v75[4];
  void *__p;
  char *v77;
  unint64_t v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _QWORD v85[10];
  uint64_t **v86;
  uint64_t *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  int v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  __int128 v98;
  int v99;
  __int128 v100;
  __int128 v101;
  int v102;
  void (**v103)(statistics::StatisticsEngine *__hidden);
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  _BYTE v110[32];
  unint64_t v111;
  int v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int16 v124;

  v61 = a2;
  *(_BYTE *)(a1 + 640) = objc_msgSend(v61, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v61;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v65.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v66 = 0u;
  v67 = 0u;
  v111 = 0;
  v64 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v110, (const unsigned __int8 *)objc_msgSend(v64, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v111));
  v63 = a1;
  v103 = &off_1E6D09A88;
  v104 = 0;
  v108 = 0;
  v106 = 0;
  v107 = 0;
  v109 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v103, (PB::Reader *)v110);
  v65.n128_u64[0] = v105;
  if (v104)
  {
    v72 = 0;
    memset(v75, 0, sizeof(v75));
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    LOWORD(v84) = 0;
    memset(v85, 0, 74);
    v88 = 0;
    v79 = 0;
    __p = 0;
    v78 = 0;
    v77 = 0;
    v87 = 0;
    v86 = &v87;
    v89 = 0u;
    v90 = 0u;
    v91 = 1065353216;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    v95 = 0;
    v96 = 1065353216;
    v97 = 0u;
    v98 = 0u;
    v99 = 1065353216;
    v100 = 0u;
    v101 = 0u;
    v102 = 1065353216;
    v68 = vextq_s8(*(int8x16_t *)(v104 + 8), *(int8x16_t *)(v104 + 8), 8uLL);
    v4 = *(_QWORD *)(v104 + 72);
    v69 = *(_QWORD *)(v104 + 64);
    v70 = *(_BYTE *)(v104 + 185);
    v71 = *(_BYTE *)(v104 + 186);
    v73 = vextq_s8(*(int8x16_t *)(v104 + 24), *(int8x16_t *)(v104 + 24), 8uLL);
    v74 = v4;
    v5 = *(_QWORD *)(v104 + 80);
    v6 = *(_QWORD *)(v104 + 88);
    v62 = (_QWORD *)v104;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v78)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v78 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v78 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v77;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v77 = (char *)(v19 + 6);
          v78 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v77 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = (_QWORD *)v62[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v112, v23);
      v79 = v112;
      v84 = v117;
      v82 = v115;
      v83 = v116;
      v80 = v113;
      v81 = v114;
      v85[0] = v118;
      if (v85[1])
      {
        v85[2] = v85[1];
        operator delete((void *)v85[1]);
      }
      *(_OWORD *)&v85[1] = v119;
      v85[3] = v120;
      v120 = 0;
      v119 = 0uLL;
      v85[4] = v121;
      *(_OWORD *)&v85[5] = v122;
      *(_OWORD *)&v85[7] = v123;
      LOWORD(v85[9]) = v124;
    }
    v24 = (_QWORD **)v62[17];
    for (i = (_QWORD **)v62[18]; v24 != i; ++v24)
    {
      v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v112, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v87;
      for (j = &v87; ; v28 = *j)
      {
        v30 = j;
        if (!v28)
          break;
        while (1)
        {
          j = (uint64_t **)v28;
          v31 = v28[4];
          if (v31 > v27)
            break;
          if (v31 >= v27)
          {
            v32 = (char *)j;
            goto LABEL_37;
          }
          v28 = j[1];
          if (!v28)
          {
            v30 = j + 1;
            goto LABEL_34;
          }
        }
      }
LABEL_34:
      v32 = (char *)operator new(0xC8uLL);
      *((_QWORD *)v32 + 4) = v27;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 56) = 0u;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      *(_OWORD *)(v32 + 104) = 0u;
      *(_OWORD *)(v32 + 120) = 0u;
      *(_OWORD *)(v32 + 136) = 0u;
      *(_OWORD *)(v32 + 152) = 0u;
      *(_OWORD *)(v32 + 168) = 0u;
      *(_OWORD *)(v32 + 184) = 0u;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = j;
      *v30 = (uint64_t *)v32;
      v33 = (uint64_t *)v32;
      if (*v86)
      {
        v86 = (uint64_t **)*v86;
        v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v87, v33);
      ++v88;
LABEL_37:
      v34 = (void *)*((_QWORD *)v32 + 16);
      *((_DWORD *)v32 + 10) = v112;
      v35 = v114;
      *((_OWORD *)v32 + 3) = v113;
      v36 = v117;
      v38 = v115;
      v37 = v116;
      *((_OWORD *)v32 + 4) = v35;
      *((_OWORD *)v32 + 5) = v38;
      *((_OWORD *)v32 + 6) = v37;
      *((_QWORD *)v32 + 14) = v36;
      *((_QWORD *)v32 + 15) = v118;
      if (v34)
      {
        *((_QWORD *)v32 + 17) = v34;
        operator delete(v34);
        *((_QWORD *)v32 + 16) = 0;
        *((_QWORD *)v32 + 17) = 0;
        *((_QWORD *)v32 + 18) = 0;
      }
      *((_OWORD *)v32 + 8) = v119;
      *((_QWORD *)v32 + 18) = v120;
      v120 = 0;
      v119 = 0uLL;
      *((_QWORD *)v32 + 19) = v121;
      v39 = v123;
      *((_OWORD *)v32 + 10) = v122;
      *((_OWORD *)v32 + 11) = v39;
      *((_WORD *)v32 + 96) = v124;
    }
    v40 = v62[5];
    for (k = v62[6]; v40 != k; v40 += 8)
    {
      v43 = *(double *)(*(_QWORD *)v40 + 8);
      v42 = *(double *)(*(_QWORD *)v40 + 16);
      if (v43 >= v42)
        v44 = *(double *)(*(_QWORD *)v40 + 16);
      else
        v44 = *(double *)(*(_QWORD *)v40 + 8);
      if (v42 < v43)
        v42 = *(double *)(*(_QWORD *)v40 + 8);
      HKIntervalMask<double>::_insertInterval(v75, v44, v42);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::operator=((uint64_t)&v65.n128_i64[1], (uint64_t)&v68);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v68);
  }
  v45 = v106;
  v46 = v107;
  if (v106 != v107)
  {
    v47 = (char *)v66[1];
    do
    {
      v48 = *(_QWORD *)(*(_QWORD *)v45 + 24);
      v49 = *(_QWORD *)(*(_QWORD *)v45 + 32);
      v50 = *(_QWORD *)(*(_QWORD *)v45 + 8);
      v51 = *(_QWORD *)(*(_QWORD *)v45 + 16);
      if ((unint64_t)v47 >= (unint64_t)v67)
      {
        v52 = (char *)v66[0];
        v53 = 0xCCCCCCCCCCCCCCCDLL * ((v47 - (char *)v66[0]) >> 3);
        v54 = v53 + 1;
        if (v53 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v67 - (unint64_t)v66[0]) >> 3) > v54)
          v54 = 0x999999999999999ALL * ((uint64_t)(v67 - (unint64_t)v66[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v67 - (unint64_t)v66[0]) >> 3) >= 0x333333333333333)
          v55 = 0x666666666666666;
        else
          v55 = v54;
        if (v55)
        {
          v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
          v47 = (char *)v66[1];
          v52 = (char *)v66[0];
        }
        else
        {
          v56 = 0;
        }
        v57 = v55 + 40 * v53;
        *(_QWORD *)v57 = v49;
        *(_QWORD *)(v57 + 8) = v48;
        *(_QWORD *)(v57 + 16) = v50;
        *(_QWORD *)(v57 + 24) = v51;
        *(_WORD *)(v57 + 32) = 1;
        v58 = (char *)v57;
        if (v47 != v52)
        {
          do
          {
            v59 = *(_OWORD *)(v47 - 40);
            v60 = *(_OWORD *)(v47 - 24);
            *((_WORD *)v58 - 4) = *((_WORD *)v47 - 4);
            *(_OWORD *)(v58 - 24) = v60;
            *(_OWORD *)(v58 - 40) = v59;
            v58 -= 40;
            v47 -= 40;
          }
          while (v47 != v52);
          v52 = (char *)v66[0];
        }
        v47 = (char *)(v57 + 40);
        v66[0] = v58;
        v66[1] = (void *)(v57 + 40);
        *(_QWORD *)&v67 = v55 + 40 * v56;
        if (v52)
          operator delete(v52);
      }
      else
      {
        *(_QWORD *)v47 = v49;
        *((_QWORD *)v47 + 1) = v48;
        *((_QWORD *)v47 + 2) = v50;
        *((_QWORD *)v47 + 3) = v51;
        *((_WORD *)v47 + 16) = 1;
        v47 += 40;
      }
      v66[1] = v47;
      v45 += 8;
    }
    while (v45 != v46);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v103);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(v63 + 112), &v65);
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v65.n128_i64[1]);

}

void sub_1B7C666A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x410]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3C0]);
  v10 = (void *)STACK[0x3A8];
  if (STACK[0x3A8])
  {
    STACK[0x3B0] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x380]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy((_QWORD *)STACK[0x370]);
  v11 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v11;
    operator delete(v11);
  }
  v12 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v12;
    operator delete(v12);
  }
  objc_destroyWeak((id *)&STACK[0x2A8]);
  v13 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v13;
    operator delete(v13);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x440]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 258) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 496);
  if (v2)
  {
    *(_QWORD *)(a1 + 504) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 448);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 408);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 368);
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 304);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 288));
  v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(_QWORD *)(a1 + 216) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__deallocate_node(*(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__deallocate_node(id *a1)
{
  id *v1;
  id *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (id *)*v1;

      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__deallocate_node(*(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__deallocate_node(id *a1)
{
  id *v1;
  id *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (id *)*v1;

      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    v2 = (void *)a1[16];
    if (v2)
    {
      a1[17] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[488];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[424];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 656));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 640) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7C66D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 62), a2 + 31);
  v4 = a2[32].n128_u64[1];
  a2[32].n128_u64[1] = 0;
  v5 = (void *)a1[65];
  a1[65] = v4;

  return a1;
}

char *std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::tuple<long long,HKSample * {__strong}>>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v12 = *(_OWORD *)(a2 + 144);
  v13 = *(_OWORD *)(a2 + 160);
  v14 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v14;
  *(_OWORD *)(a1 + 144) = v12;
  v15 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = v15;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 208), *(const void **)(a2 + 208), *(_QWORD *)(a2 + 216), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 4);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  v16 = *(_OWORD *)(a2 + 256);
  v17 = *(_QWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v16;
  v18 = (_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 272) = v17;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  v19 = *(_QWORD **)(a2 + 280);
  if (v19 != (_QWORD *)(a2 + 288))
  {
    v20 = 0;
    v21 = (_QWORD *)(a1 + 288);
    while (1)
    {
      v22 = (_QWORD *)(a1 + 288);
      if (v21 == v18)
        goto LABEL_12;
      v23 = v20;
      v24 = (_QWORD *)(a1 + 288);
      if (v20)
      {
        do
        {
          v22 = v23;
          v23 = (_QWORD *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v24[2];
          v25 = *v22 == (_QWORD)v24;
          v24 = v22;
        }
        while (v25);
      }
      v26 = v19[4];
      if (v22[4] < v26)
      {
LABEL_12:
        if (v20)
          v27 = (uint64_t **)v22;
        else
          v27 = (uint64_t **)(a1 + 288);
        if (v20)
          v28 = (uint64_t **)(v22 + 1);
        else
          v28 = (uint64_t **)(a1 + 288);
        if (!*v28)
        {
LABEL_28:
          v31 = operator new(0xC8uLL);
          v31[4] = v19[4];
          *((_DWORD *)v31 + 10) = *((_DWORD *)v19 + 10);
          *((_OWORD *)v31 + 3) = *((_OWORD *)v19 + 3);
          v32 = *((_OWORD *)v19 + 4);
          v33 = *((_OWORD *)v19 + 5);
          v34 = *((_OWORD *)v19 + 6);
          v31[14] = v19[14];
          *((_OWORD *)v31 + 5) = v33;
          *((_OWORD *)v31 + 6) = v34;
          *((_OWORD *)v31 + 4) = v32;
          v35 = v19[15];
          v31[16] = 0;
          v31[15] = v35;
          v31[17] = 0;
          v31[18] = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v31 + 16, (const void *)v19[16], v19[17], (uint64_t)(v19[17] - v19[16]) >> 4);
          v31[19] = v19[19];
          v36 = *((_OWORD *)v19 + 10);
          v37 = *((_OWORD *)v19 + 11);
          v31[24] = v19[24];
          *((_OWORD *)v31 + 10) = v36;
          *((_OWORD *)v31 + 11) = v37;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 280), (uint64_t)v27, v28, v31);
        }
      }
      else
      {
        v28 = (uint64_t **)(a1 + 288);
        v27 = (uint64_t **)(a1 + 288);
        if (!v20)
          goto LABEL_28;
        v29 = v20;
        while (1)
        {
          while (1)
          {
            v27 = (uint64_t **)v29;
            v30 = v29[4];
            if (v30 <= v26)
              break;
            v29 = *v27;
            v28 = v27;
            if (!*v27)
              goto LABEL_28;
          }
          if (v30 >= v26)
            break;
          v29 = v27[1];
          if (!v29)
          {
            v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      v38 = (_QWORD *)v19[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v19[2];
          v25 = *v39 == (_QWORD)v19;
          v19 = v39;
        }
        while (!v25);
      }
      if (v39 == (_QWORD *)(a2 + 288))
        break;
      v20 = (_QWORD *)*v18;
      v21 = *(_QWORD **)(a1 + 280);
      v19 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 304, a2 + 304);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 344), *(const void **)(a2 + 344), *(_QWORD *)(a2 + 352), (uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 368, a2 + 368);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 408, a2 + 408);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 448, a2 + 448);
  return a1;
}

void sub_1B7C67238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v12 + 352) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(*v13);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 216) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a1);
}

uint64_t std::unordered_set<long long>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1, i[2], i[2]);
  return a1;
}

void sub_1B7C673B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1B7C675B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1B7C67644(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<long long,long long>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = v5[2];
      if (v7)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v2 = v5[2];
          if (v7 <= v8)
            v2 = v8 % v7;
        }
        else
        {
          v2 = (v7 - 1) & v8;
        }
        v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          for (i = (_QWORD *)*v10; i; i = (_QWORD *)*i)
          {
            v12 = i[1];
            if (v12 == v8)
            {
              if (i[2] == v8)
                goto LABEL_41;
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v7)
                  v12 %= v7;
              }
              else
              {
                v12 &= v7 - 1;
              }
              if (v12 != v2)
                break;
            }
          }
        }
      }
      v13 = operator new(0x20uLL);
      *v13 = 0;
      v13[1] = v8;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v5 + 1);
      v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v15 = *(float *)(a1 + 32);
      if (!v7 || (float)(v15 * (float)v7) < v14)
      {
        v16 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v16 = 1;
        v17 = v16 | (2 * v7);
        v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18)
          v19 = v18;
        else
          v19 = v17;
        std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, v19);
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v8)
            v2 = v8 % v7;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v7 - 1) & v8;
        }
      }
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v21)
      {
        *v13 = *v21;
      }
      else
      {
        *v13 = *v6;
        *v6 = v13;
        *(_QWORD *)(v20 + 8 * v2) = v6;
        if (!*v13)
          goto LABEL_40;
        v22 = *(_QWORD *)(*v13 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v22 >= v7)
            v22 %= v7;
        }
        else
        {
          v22 &= v7 - 1;
        }
        v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
      }
      *v21 = v13;
LABEL_40:
      ++*(_QWORD *)(a1 + 24);
LABEL_41:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1B7C67890(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t **v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t ***v12;
  uint64_t **i;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(uint64_t ***)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = objc_msgSend(v5[2], "hash");
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7;
          if (v7 >= v9)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v12 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = (uint64_t **)*i)
          {
            v14 = (unint64_t)i[1];
            if (v14 == v8)
            {
              if ((std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>::operator()[abi:ne180100](i[2], v5[2]) & 1) != 0)goto LABEL_41;
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = operator new(0x20uLL);
      *v15 = 0;
      v15[1] = v8;
      v16 = v5[2];
      v17 = v5[3];
      v15[2] = v16;
      v15[3] = v17;
      v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v19 = *(float *)(a1 + 32);
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v20 = 1;
        v21 = v20 | (2 * v9);
        v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22)
          v23 = v22;
        else
          v23 = v21;
        std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, v23);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
      }
      v24 = *(_QWORD *)a1;
      v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v25)
      {
        *v15 = *v25;
      }
      else
      {
        *v15 = *v6;
        *v6 = v15;
        *(_QWORD *)(v24 + 8 * v2) = v6;
        if (!*v15)
          goto LABEL_40;
        v26 = *(_QWORD *)(*v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9)
            v26 %= v9;
        }
        else
        {
          v26 &= v9 - 1;
        }
        v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
      }
      *v25 = v15;
LABEL_40:
      ++*(_QWORD *)(a1 + 24);
LABEL_41:
      v5 = (uint64_t **)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1B7C67AF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>::operator()[abi:ne180100](void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 == v4)
  {
    v6 = 1;
  }
  else if (v4)
  {
    v6 = objc_msgSend(v3, "isEqualToString:", v4);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1B7C67B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},long long>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::unordered_map<long long,NSString * {__strong}>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = v5[2];
      v8 = (void *)v5[3];
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          v2 = v5[2];
          if (v9 <= v7)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v11)
        {
          for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
          {
            v13 = i[1];
            if (v13 == v7)
            {
              if (i[2] == v7)
                goto LABEL_41;
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v9)
                  v13 %= v9;
              }
              else
              {
                v13 &= v9 - 1;
              }
              if (v13 != v2)
                break;
            }
          }
        }
      }
      v14 = operator new(0x20uLL);
      *v14 = 0;
      v14[1] = v7;
      v14[2] = v7;
      v14[3] = v8;
      v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v16 = *(float *)(a1 + 32);
      if (!v9 || (float)(v16 * (float)v9) < v15)
      {
        v17 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v17 = 1;
        v18 = v17 | (2 * v9);
        v19 = vcvtps_u32_f32(v15 / v16);
        if (v18 <= v19)
          v20 = v19;
        else
          v20 = v18;
        std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, v20);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v9 <= v7)
            v2 = v7 % v9;
          else
            v2 = v7;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
      }
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v22)
      {
        *v14 = *v22;
      }
      else
      {
        *v14 = *v6;
        *v6 = v14;
        *(_QWORD *)(v21 + 8 * v2) = v6;
        if (!*v14)
          goto LABEL_40;
        v23 = *(_QWORD *)(*v14 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v23 >= v9)
            v23 %= v9;
        }
        else
        {
          v23 &= v9 - 1;
        }
        v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
      }
      *v22 = v14;
LABEL_40:
      ++*(_QWORD *)(a1 + 24);
LABEL_41:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1B7C67E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,NSString * {__strong}>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 144);
  v11 = *(_OWORD *)(a2 + 160);
  v12 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 208, (__n128 *)(a2 + 208));
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  v13 = *(_OWORD *)(a2 + 240);
  v14 = *(_OWORD *)(a2 + 256);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v13;
  *(_OWORD *)(a1 + 256) = v14;
  v15 = a1 + 288;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  v16 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 288) = v16;
  v17 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v17;
  if (v17)
  {
    *(_QWORD *)(v16 + 16) = v15;
    *(_QWORD *)(a2 + 280) = a2 + 288;
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 296) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 280) = v15;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 344, (__n128 *)(a2 + 344));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 448, (uint64_t *)(a2 + 448));
  return a1;
}

__n128 std::vector<HKRawInterval<double>>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v8 = *a2;
  *a2 = 0;
  v9 = *(void **)a1;
  *(_QWORD *)a1 = v8;
  if (v9)
    operator delete(v9);
  v12 = a2[2];
  v11 = a2 + 2;
  v10 = v12;
  v13 = *(v11 - 1);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  v14 = v11[1];
  *(_QWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    v15 = *(_QWORD *)(v10 + 8);
    v16 = *(_QWORD *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v15 %= v16;
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
    *v11 = 0;
    v11[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__deallocate_node(*(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__deallocate_node(*(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

double HKIntervalMask<double>::firstDifference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double *v8;
  double result;
  double v10;

  v4 = a2 - a1;
  if (a2 == a1)
  {
    v6 = (a4 - a3) >> 4;
LABEL_11:
    if (v4 >= v6)
      return 1.79769313e308;
    else
      return *(double *)(a3 + 16 * v4);
  }
  else
  {
    v5 = 0;
    v4 >>= 4;
    v6 = (a4 - a3) >> 4;
    if ((unint64_t)v4 <= 1)
      v4 = 1;
    v7 = a1 + 8;
    v8 = (double *)(a3 + 8);
    while (1)
    {
      if (v6 == v5)
        return *(double *)(a1 + 16 * v6);
      result = *(double *)(v7 - 8);
      v10 = *(v8 - 1);
      if (result != v10)
        break;
      result = *v8;
      if (*(double *)v7 != *v8)
      {
        if (result >= *(double *)v7)
          return *(double *)v7;
        return result;
      }
      ++v5;
      v7 += 16;
      v8 += 2;
      if (v4 == v5)
        goto LABEL_11;
    }
    if (v10 < result)
      return *(v8 - 1);
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  double v3;
  id v4;
  double *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  __n128 v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  __n128 v35;
  id v36;
  id v37;
  uint64_t **v38;
  uint64_t *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  void *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  double *v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  id v75;
  id v76;
  id v77;
  uint64_t **i;
  uint64_t *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  double v84;
  double v85;
  void *v86;
  void *v87;
  void *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  int v98;
  void *v99;
  void *v100;
  int v101;
  id v103;
  id v104;
  uint64_t v105;
  id v107;
  id v108;
  _BYTE v109[16];
  uint64_t **v110;
  void *__p;
  void *v112;
  _QWORD v113[3];
  _QWORD *v114;
  _QWORD v115[3];
  _QWORD *v116;
  _QWORD v117[3];
  _QWORD *v118;
  _BYTE v119[24];
  _BYTE *v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = a2 + 5;
  if (v3 != -1.79769313e308)
    v5 = a2;
  v6 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  v105 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v6, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(v105 + 344);
      v16 = *(uint64_t **)(v105 + 352);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v20 = (void *)objc_msgSend(v14, "copy");
      objc_msgSend(v12, "_setSources:", v20);

    }
  }

  v113[0] = &off_1E6D04860;
  v114 = v113;
  v21 = v12;
  v22 = (uint64_t)v114;
  if (!v114)
    goto LABEL_22;
  if (v114 != v113)
  {
    v22 = (*(uint64_t (**)(void))(*v114 + 16))();
LABEL_22:
    v118 = (_QWORD *)v22;
    goto LABEL_24;
  }
  v118 = v117;
  (*(void (**)(uint64_t, _QWORD *))(v113[0] + 24))((uint64_t)v113, v117);
LABEL_24:
  v120 = 0;
  v23 = operator new(0x28uLL);
  *v23 = &off_1E6D04740;
  v24 = v23 + 1;
  v25 = (uint64_t)v118;
  if (!v118)
  {
LABEL_27:
    v23[4] = v25;
    goto LABEL_29;
  }
  if (v118 != v117)
  {
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v118 + 16))(v118, v24);
    goto LABEL_27;
  }
  v23[4] = v24;
  (*(void (**)(_QWORD *))(v117[0] + 24))(v117);
LABEL_29:
  v120 = v23;
  v107 = v21;
  v26 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v109, v105);
  if (!v120)
    std::__throw_bad_function_call[abi:ne180100]();
  v29 = (*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v120 + 48))(v120, v109, v28);
  v30 = *(double **)(v29 + 8);
  v31 = 0.0;
  while (v30 != *(double **)(v29 + 16))
  {
    v33 = *v30;
    v32 = v30[1];
    v30 += 2;
    v31 = v31 + v32 - v33;
  }
  objc_msgSend(v26, "quantityWithUnit:doubleValue:", v27, v31 + *(double *)(v29 + 32));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v107, "setDuration:", v34);

  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }

  v35 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v109, v105);
  if (!v120)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v107, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v120 + 48))(v120, v109, v35));
  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v36 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v37 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v109, v105);
    v38 = v110;
    if (v110)
    {
      v9 = (id)0x1E0CB3000;
      do
      {
        v39 = v38[2];
        v40 = (void *)MEMORY[0x1E0CB6A28];
        objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v120)
          std::__throw_bad_function_call[abi:ne180100]();
        v42 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v120 + 48))(v120, (uint64_t *)v38 + 3);
        v43 = *(double **)(v42 + 8);
        v44 = 0.0;
        while (v43 != *(double **)(v42 + 16))
        {
          v46 = *v43;
          v45 = v43[1];
          v43 += 2;
          v44 = v44 + v45 - v46;
        }
        objc_msgSend(v40, "quantityWithUnit:doubleValue:", v41, v44 + *(double *)(v42 + 32));
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "setObject:forKeyedSubscript:", v47, v39);

        if (!v120)
          std::__throw_bad_function_call[abi:ne180100]();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v120 + 48))(v120, (uint64_t *)v38 + 3));
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "setObject:forKeyedSubscript:", v48, v39);

        v38 = (uint64_t **)*v38;
      }
      while (v38);
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v109);
    objc_msgSend(v107, "setDurationBySource:", v36);
    objc_msgSend(v107, "setDataCountBySource:", v37);

  }
  v49 = v120;
  if (v120 == v119)
  {
    v50 = 4;
    v49 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_53;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_53:
  v51 = v118;
  if (v118 == v117)
  {
    v52 = 4;
    v51 = v117;
  }
  else
  {
    if (!v118)
      goto LABEL_58;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_58:
  v53 = (uint64_t)v114;
  if (!v114)
  {
LABEL_61:
    v116 = (_QWORD *)v53;
    goto LABEL_63;
  }
  if (v114 != v113)
  {
    v53 = (*(uint64_t (**)(void))(*v114 + 16))();
    goto LABEL_61;
  }
  v116 = v115;
  (*(void (**)(uint64_t, _QWORD *))(v113[0] + 24))((uint64_t)v113, v115);
LABEL_63:
  v120 = 0;
  v54 = operator new(0x28uLL);
  *v54 = &off_1E6D047D0;
  v55 = (uint64_t)v116;
  if (!v116)
  {
LABEL_66:
    v54[4] = v55;
    goto LABEL_68;
  }
  if (v116 != v115)
  {
    v55 = (*(uint64_t (**)(void))(*v116 + 16))();
    goto LABEL_66;
  }
  v54[4] = v54 + 1;
  (*(void (**)(_QWORD *))(v115[0] + 24))(v115);
LABEL_68:
  v120 = v54;
  v108 = v107;
  v56 = *(_QWORD *)(a1 + 24);
  v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v109, v105);
  if (!v120)
    std::__throw_bad_function_call[abi:ne180100]();
  v58 = (double *)(*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v120 + 48))(v120, v109, v57);
  v60 = *v58;
  v59 = v58[1];
  v61 = v58[2];
  v62 = *((_QWORD *)v58 + 3);
  v64 = v58[4];
  v63 = v58[5];
  v65 = v58[6];
  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }
  v66 = *(_QWORD *)(a1 + 24);
  v67 = _HKStatisticsOptionBaselineRelativeQuantities();
  v68 = *(void **)(a1 + 16);
  if ((v67 & v66) != 0)
    objc_msgSend(v68, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v68, "canonicalUnit");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v56 & 2) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, v60);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v108, "setAverageQuantity:", v70);

  }
  if ((v56 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, v61);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v108, "setMinimumQuantity:", v71);

  }
  if ((v56 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, v59);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v108, "setMaximumQuantity:", v72);

  }
  if ((v56 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, v64);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v108, "setMostRecentQuantity:", v73);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v63, v65);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v108, "setMostRecentQuantityDateInterval:", v74);

  }
  objc_msgSend(v108, "setDataCount:", v62);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_118;
  if ((v56 & 2) != 0)
  {
    v9 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    if ((v56 & 4) == 0)
      goto LABEL_85;
LABEL_87:
    v104 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    goto LABEL_88;
  }
  v9 = 0;
  if ((v56 & 4) != 0)
    goto LABEL_87;
LABEL_85:
  v104 = 0;
LABEL_88:
  if ((v56 & 8) != 0)
    v103 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v103 = 0;
  if ((v56 & 0x20) != 0)
  {
    v76 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v75 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v75 = 0;
    v76 = 0;
  }
  v77 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v109, v105);
  for (i = v110; i; i = (uint64_t **)*i)
  {
    v79 = i[2];
    if ((v56 & 2) != 0)
    {
      if (!v120)
        goto LABEL_149;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, *(double *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v120 + 48))(v120, (uint64_t *)i + 3));
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v80, v79);

    }
    if ((v56 & 4) != 0)
    {
      if (!v120)
        goto LABEL_149;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v120 + 48))(v120, (uint64_t *)i + 3) + 16));
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v104, "setObject:forKeyedSubscript:", v81, v79);

    }
    if ((v56 & 8) != 0)
    {
      if (!v120)
        goto LABEL_149;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v120 + 48))(v120, (uint64_t *)i + 3) + 8));
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v103, "setObject:forKeyedSubscript:", v82, v79);

    }
    if ((v56 & 0x20) != 0)
    {
      if (!v120)
        std::__throw_bad_function_call[abi:ne180100]();
      v83 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v120 + 48))(v120, (uint64_t *)i + 3);
      v84 = *(double *)(v83 + 40);
      v85 = *(double *)(v83 + 48);
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, *(double *)(v83 + 32));
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v86, v79);

      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v84, v85);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "setObject:forKeyedSubscript:", v87, v79);

    }
    if (!v120)
LABEL_149:
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v120 + 48))(v120, (uint64_t *)i + 3) + 24));
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v77, "setObject:forKeyedSubscript:", v88, v79);

  }
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v109);
  if ((v56 & 2) != 0)
    objc_msgSend(v108, "setAverageQuantityBySource:", v9);
  if ((v56 & 4) != 0)
    objc_msgSend(v108, "setMinimumQuantityBySource:", v104);
  if ((v56 & 8) != 0)
    objc_msgSend(v108, "setMaximumQuantityBySource:", v103);
  if ((v56 & 0x20) != 0)
  {
    objc_msgSend(v108, "setMostRecentQuantityBySource:", v76);
    objc_msgSend(v108, "setMostRecentQuantityDateIntervalBySource:", v75);
  }
  objc_msgSend(v108, "setDataCountBySource:", v77);

LABEL_118:
  v89 = v120;
  if (v120 == v119)
  {
    v90 = 4;
    v89 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_123;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_123:
  v91 = v116;
  if (v116 == v115)
  {
    v92 = 4;
    v91 = v115;
  }
  else
  {
    if (!v116)
      goto LABEL_128;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_128:

  v93 = v114;
  if (v114 == v113)
  {
    v94 = 4;
    v93 = v113;
    goto LABEL_132;
  }
  if (v114)
  {
    v94 = 5;
LABEL_132:
    (*(void (**)(void))(*v93 + 8 * v94))();
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v108, "averageQuantity");
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  if (v96)
  {
    objc_msgSend(v108, "averageQuantity");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v69, "isCompatibleWithUnit:", v95) & 1) == 0)
    {

LABEL_147:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v95);
      goto LABEL_148;
    }
  }
  objc_msgSend(v108, "minimumQuantity");
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  if (v97)
  {
    objc_msgSend(v108, "minimumQuantity");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v9, "isCompatibleWithUnit:", v95))
    {
      v98 = 1;
      goto LABEL_141;
    }
  }
  objc_msgSend(v108, "maximumQuantity");
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  if (v99)
  {
    objc_msgSend(v108, "maximumQuantity");
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    v101 = objc_msgSend(v100, "isCompatibleWithUnit:", v95);

    v98 = v101 ^ 1;
    if (v97)
      goto LABEL_141;
  }
  else
  {
    v98 = 0;
    if (v97)
    {
LABEL_141:

      if (v96)
        goto LABEL_142;
      goto LABEL_146;
    }
  }
  if (v96)
  {
LABEL_142:

    if ((v98 & 1) == 0)
      goto LABEL_148;
    goto LABEL_147;
  }
LABEL_146:

  if (v98)
    goto LABEL_147;
LABEL_148:

  return v108;
}

void sub_1B7C690A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, _Unwind_Exception *exception_object, void *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char *a40)
{
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;

  v44 = *(_QWORD **)(v43 - 152);
  if (v44 == (_QWORD *)(v43 - 176))
  {
    v45 = 4;
    v44 = (_QWORD *)(v43 - 176);
  }
  else
  {
    if (!v44)
      goto LABEL_6;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_6:
  v46 = *(_QWORD **)(v43 - 216);
  if (v46 == (_QWORD *)(v43 - 240))
  {
    v47 = 4;
    v46 = (_QWORD *)(v43 - 240);
  }
  else
  {
    if (!v46)
      goto LABEL_11;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_11:

  v48 = a40;
  if (a40 == &a37)
  {
    v49 = 4;
    v48 = &a37;
  }
  else
  {
    if (!a40)
      goto LABEL_16;
    v49 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
LABEL_16:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 328);
  v2 = *(_QWORD *)(a1 + 344);
  if (v1 != (*(_QWORD *)(a1 + 352) - v2) >> 3)
  {
    v4 = (void **)(a1 + 344);
    *(_QWORD *)(a1 + 352) = v2;
    std::vector<long long>::reserve((void **)(a1 + 344), v1);
    v5 = *(_QWORD **)(a1 + 320);
    if (v5)
    {
      v6 = *(char **)(a1 + 352);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 360);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 344);
            v6 = *(char **)(a1 + 352);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 344) = v16;
          *(_QWORD *)(a1 + 352) = v9;
          *(_QWORD *)(a1 + 360) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 352) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7C6963C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  _QWORD *v6;
  double *v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  char v16;
  double v17;
  int v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double *j;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  id WeakRetained;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  int v56;
  unint64_t v57;
  uint64_t *v58;
  __int128 v59;
  char *v60;
  char v61;
  double *v62;
  __int128 v63;
  _OWORD *v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  double var2;
  double *i;
  int v76;
  int v77;
  unint64_t var3;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  char *v82;
  char *v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  unint64_t v91;
  uint64_t *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  double v96;
  void *v97;
  void *v98;
  double **v99;
  id *location;
  id v101;
  uint64_t *v102;
  int64_t v103;
  char **v104;
  uint64_t v105;
  HDRawQuantitySample v106;
  __int128 v107;
  __int128 v108;
  __int16 v109;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v104 = (char **)(a1 + 96);
    v102 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    v99 = (double **)(a1 + 208);
    v6 = (_QWORD *)(a1 + 288);
    do
    {
      v7 = *(double **)(a1 + 96);
      v8 = *(__int128 **)(a1 + 104);
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          v30 = a2;
          v31 = a2;
          v32 = v5;
          v33 = *(_QWORD *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              v34 = *(double *)(v33 + 8);
              v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31)
                v31 = *(double *)(v33 + 8);
              if (v35 > v5)
                v37 = *(double *)(v33 + 16);
              else
                v37 = v30;
              if (v35 < v30)
              {
                v32 = v5;
                v30 = v37;
              }
              v33 += 48;
            }
            while ((__int128 *)v33 != v8);
          }
          if (v30 >= v31)
            v38 = v31;
          else
            v38 = v30;
          v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            v40 = v39 * floor(v38 / v39);
            v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41)
              v38 = v40;
            else
              v38 = v41;
          }
          *v104 = 0;
          v104[1] = 0;
          v104[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            v45 = *(char **)(a1 + 96);
            v44 = *(char **)(a1 + 104);
            v46 = v42;
            if (v44 != v45)
            {
              do
              {
                v47 = *((_OWORD *)v44 - 3);
                v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              v44 = *v104;
            }
            *(_QWORD *)(a1 + 96) = v46;
            *(_QWORD *)(a1 + 104) = v42;
            *(_QWORD *)(a1 + 112) = &v42[48 * v43];
            if (v44)
              operator delete(v44);
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v106.var0 = a1;
            v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8)
              v51 = 0;
            else
              v51 = v50;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>((uint64_t)v7, v8, (uint64_t)&v106, v51, 1);
          }
          if (*(_BYTE *)(a1 + 25))
            v101 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v101 = 0;
          if (v7 == (double *)v8)
          {
LABEL_140:
            *(double *)(a1 + 232) = HKIntervalMask<double>::removeIntervalsBefore(v99, v38) + *(double *)(a1 + 232);
            v93 = *(_QWORD **)(a1 + 280);
            if (v93 != v6)
            {
              do
              {
                *((double *)v93 + 19) = HKIntervalMask<double>::removeIntervalsBefore((double **)v93 + 16, v38)
                                      + *((double *)v93 + 19);
                v94 = (_QWORD *)v93[1];
                if (v94)
                {
                  do
                  {
                    v95 = v94;
                    v94 = (_QWORD *)*v94;
                  }
                  while (v94);
                }
                else
                {
                  do
                  {
                    v95 = (_QWORD *)v93[2];
                    v54 = *v95 == (_QWORD)v93;
                    v93 = v95;
                  }
                  while (!v54);
                }
                v93 = v95;
              }
              while (v95 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7)
              operator delete(v7);
            goto LABEL_152;
          }
          v103 = 0;
          v61 = 0;
          v62 = v7;
          while (2)
          {
            v63 = *((_OWORD *)v62 + 1);
            *(_OWORD *)&v106.var0 = *(_OWORD *)v62;
            *(_OWORD *)&v106.var2 = v63;
            *(double *)&v106.var4 = v62[4];
            if (!v106.var4 || v106.var1 > v38)
            {
              v64 = *(_OWORD **)(a1 + 104);
              v65 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v64 >= v65)
              {
                v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - *v104) >> 4);
                v70 = v69 + 1;
                if (v69 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (_QWORD)*v104) >> 4);
                if (2 * v71 > v70)
                  v70 = 2 * v71;
                if (v71 >= 0x2AAAAAAAAAAAAAALL)
                  v72 = 0x555555555555555;
                else
                  v72 = v70;
                if (v72)
                  v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v72);
                else
                  v73 = 0;
                v79 = (_OWORD *)(v72 + 48 * v69);
                v80 = *(_OWORD *)v62;
                v81 = *((_OWORD *)v62 + 2);
                v79[1] = *((_OWORD *)v62 + 1);
                v79[2] = v81;
                *v79 = v80;
                v83 = *(char **)(a1 + 96);
                v82 = *(char **)(a1 + 104);
                v84 = v79;
                if (v82 != v83)
                {
                  do
                  {
                    v85 = *((_OWORD *)v82 - 3);
                    v86 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)((char *)v84 - 21) = *(_OWORD *)(v82 - 21);
                    *(v84 - 3) = v85;
                    *(v84 - 2) = v86;
                    v84 -= 3;
                    v82 -= 48;
                  }
                  while (v82 != v83);
                  v82 = *v104;
                }
                v68 = v79 + 3;
                *(_QWORD *)(a1 + 96) = v84;
                *(_QWORD *)(a1 + 104) = v79 + 3;
                *(_QWORD *)(a1 + 112) = v72 + 48 * v73;
                if (v82)
                  operator delete(v82);
              }
              else
              {
                v66 = *(_OWORD *)v62;
                v67 = *((_OWORD *)v62 + 2);
                v64[1] = *((_OWORD *)v62 + 1);
                v64[2] = v67;
                *v64 = v66;
                v68 = v64 + 3;
              }
              *(_QWORD *)(a1 + 104) = v68;
LABEL_139:
              v62 += 6;
              if (v62 == (double *)v8)
                goto LABEL_140;
              continue;
            }
            break;
          }
          var2 = v106.var2;
          if (v106.var2 > v38)
            var2 = v38;
          v106.var2 = var2;
          for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v106.var1 >= *i; i += 2)
          {
            if (v106.var1 < i[1])
              goto LABEL_139;
          }
          v76 = *((unsigned __int8 *)v62 + 42);
          v77 = *((unsigned __int8 *)v62 + 41);
          if ((v61 & 1) != 0)
          {
            var3 = v106.var3;
            if (v103 == v106.var3 || *(_BYTE *)(a1 + 24))
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(v102, &v106, v76 == 0);
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(v102, &v106, v76 == 0);
            var3 = v106.var3;
            v103 = v106.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_138;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v87)
            goto LABEL_137;
          objc_msgSend(v101, "objectForKeyedSubscript:", v87);
          v88 = (void *)objc_claimAutoreleasedReturnValue();
          v89 = v88;
          if (v88)
          {
            if (objc_msgSend(v88, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_136:

LABEL_137:
LABEL_138:
              v61 = 1;
              goto LABEL_139;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v101, "setObject:forKeyedSubscript:", v90, v87);

          }
          v91 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
          v92 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v91);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(v92, &v106, v77 == 0);
          goto LABEL_136;
        }
        v10 = *((unsigned __int8 *)v7 + 42);
        v11 = *((unsigned __int8 *)v7 + 41);
        v12 = *((unsigned __int8 *)v7 + 40);
        v13 = v7[1];
        v14 = v7[2];
        v15 = *((_QWORD *)v7 + 3);
        v16 = *((_BYTE *)v7 + 33);
        if (v14 <= a2)
          v17 = v7[2];
        else
          v17 = a2;
        if (v13 < a2)
          v18 = *((unsigned __int8 *)v7 + 32);
        else
          v18 = 0;
        if (v13 < a2)
          v19 = 0;
        else
          v19 = *((_BYTE *)v7 + 33);
        if (v13 < a2)
        {
          v20 = 0;
        }
        else
        {
          v17 = v7[2];
          v20 = *((_QWORD *)v7 + 3);
        }
        if (v13 < a2)
          v21 = 0.0;
        else
          v21 = v7[2];
        if (v13 < a2)
          v22 = 0.0;
        else
          v22 = *v7;
        if (v13 < a2)
          v23 = 0.0;
        else
          v23 = v7[1];
        if (v13 < a2)
          v24 = 0;
        else
          v24 = *((unsigned __int8 *)v7 + 32);
        if (*((_BYTE *)v7 + 32))
        {
          v14 = v17;
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
        }
        if (*((_BYTE *)v7 + 32))
          v25 = v21;
        else
          v25 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v26 = v22;
        else
          v26 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v27 = v23;
        else
          v27 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v28 = v24;
        else
          v28 = 0;
        v106.var0 = *v7;
        v106.var1 = v13;
        v106.var2 = v14;
        v106.var3 = v15;
        v106.var4 = v18;
        v106.var5 = v16;
        *(_DWORD *)(&v106.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v106.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&v107 = v26;
        *((double *)&v107 + 1) = v27;
        *(double *)&v108 = v25;
        *((_QWORD *)&v108 + 1) = v20;
        LOBYTE(v109) = v28;
        HIBYTE(v109) = v19;
        for (j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            v52 = v12 != 0;
            v53 = v11 != 0;
            v55 = v10 != 0;
            if (!v28)
              goto LABEL_150;
LABEL_93:
            LOWORD(v105) = v109;
            v59 = v108;
            v60 = *v104;
            *(_OWORD *)v60 = v107;
            *((_OWORD *)v60 + 1) = v59;
            *((_QWORD *)v60 + 4) = v105;
            v60[40] = v52;
            v60[41] = v53;
            v60[42] = v55;
            goto LABEL_151;
          }
        }
        v52 = v12 != 0;
        v53 = v11 != 0;
        v54 = v10 == 0;
        v55 = v10 != 0;
        if (v18)
        {
          v56 = v54;
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(v102, &v106, v56);
          if (*(_BYTE *)(a1 + 25))
          {
            v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v15);
            v58 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v57);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(v58, &v106, v11 == 0);
          }
          v52 = 1;
          v53 = 1;
          v55 = 1;
        }
        if (v28)
          goto LABEL_93;
LABEL_150:
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
      }
LABEL_151:
      *(double *)(a1 + 56) = a2;
LABEL_152:
      v96 = *(double *)(a1 + 56);
      if (v96 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete, HDStatisticsTimeInterval>>]");
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v97, "handleFailureInFunction:file:lineNumber:description:", v98, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v96 = *(double *)(a1 + 56);
      }
      v5 = v96;
    }
    while (v96 < a2);
  }
}

void sub_1B7C69DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::vector<long long>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  void *v8;
  _OWORD *v9;
  int v10;
  void *v11;
  _OWORD *v12;
  int v13;

  v5 = result;
  v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v6 = 1;
  if (v6)
  {
    if (v6 == 1)
    {
      if (!*(_DWORD *)result)
      {
        *(_OWORD *)(result + 1) = 0u;
        v12 = result + 11;
        v11 = (void *)result[11];
        *(_DWORD *)v5 = 1;
        *(_OWORD *)(v5 + 3) = 0u;
        *(_OWORD *)(v5 + 5) = 0u;
        *(_OWORD *)(v5 + 7) = 0u;
        *(_OWORD *)(v5 + 9) = 0u;
        if (v11)
        {
          v5[12] = (uint64_t)v11;
          operator delete(v11);
          v13 = *((unsigned __int8 *)v5 + 72);
          *v12 = 0u;
          *(_OWORD *)(v5 + 13) = 0u;
          if (v13 && *((double *)v5 + 6) > *((double *)v5 + 16))
            goto LABEL_25;
        }
        else
        {
          *v12 = 0uLL;
          *(_OWORD *)(v5 + 13) = 0uLL;
        }
        *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 15);
        *(_OWORD *)(v5 + 7) = *(_OWORD *)(v5 + 17);
        *((_WORD *)v5 + 36) = *((_WORD *)v5 + 76);
        goto LABEL_25;
      }
    }
    else if (v6 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        HDStatisticsDiscrete::addSample((uint64_t)(result + 1), a2);
        return HDStatisticsTimeInterval::addSample(v5 + 10, a2, 1);
      }
      *(_DWORD *)result = 2;
      *(_OWORD *)(result + 1) = 0u;
      v9 = result + 11;
      v8 = (void *)result[11];
      *(_OWORD *)(v5 + 3) = 0u;
      *(_OWORD *)(v5 + 5) = 0u;
      *(_OWORD *)(v5 + 7) = 0u;
      *(_OWORD *)(v5 + 9) = 0u;
      if (v8)
      {
        v5[12] = (uint64_t)v8;
        operator delete(v8);
        v10 = *((unsigned __int8 *)v5 + 72);
        *v9 = 0u;
        *(_OWORD *)(v5 + 13) = 0u;
        if (v10 && *((double *)v5 + 6) > *((double *)v5 + 16))
          goto LABEL_25;
      }
      else
      {
        *v9 = 0uLL;
        *(_OWORD *)(v5 + 13) = 0uLL;
      }
      *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 15);
      *(_OWORD *)(v5 + 7) = *(_OWORD *)(v5 + 17);
      *((_WORD *)v5 + 36) = *((_WORD *)v5 + 76);
LABEL_25:
      HDStatisticsDiscrete::addSample((uint64_t)(v5 + 1), a2);
      v7 = v5 + 10;
      return HDStatisticsTimeInterval::addSample(v7, a2, a3);
    }
  }
  else if (!*(_DWORD *)result && !result[4])
  {
    HDStatisticsDiscrete::addSample((uint64_t)(result + 1), a2);
    v7 = v5 + 10;
    return HDStatisticsTimeInterval::addSample(v7, a2, a3);
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 288);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 288);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 288) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 280);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 280), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 368), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 408);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7C6A268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 448);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7C6A338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0xC8uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t **std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(_QWORD *a1, id *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  v4 = objc_msgSend(*a2, "hash");
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t **)*i)
  {
    v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if ((std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>::operator()[abi:ne180100](i[2], *a2) & 1) != 0)return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>(uint64_t a1, id *a2, id **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = objc_msgSend(*a2, "hash");
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>::operator()[abi:ne180100](*((void **)i + 2), *a2) & 1) != 0)return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  *((_QWORD *)i + 2) = **a3;
  *((_QWORD *)i + 3) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v23 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B7C6A73C(_Unwind_Exception *a1)
{
  id *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},long long>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 344);
  v7 = *(char **)(*(_QWORD *)a4 + 352);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 344);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 344);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 352);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 344);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 352);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 344);
      v15 = *(char **)(*(_QWORD *)a4 + 352);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 352);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 352);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 344);
          v25 = *(char **)(*(_QWORD *)a4 + 352);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 352);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 352);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 344);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 344);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 352);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 344);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 352);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 344);
      v41 = *(char **)(*(_QWORD *)a4 + 352);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 352);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 352);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 344);
      v11 = *(char **)(*(_QWORD *)a3 + 352);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 352);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 352);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 344);
      v24 = *(char **)(*(_QWORD *)a3 + 352);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 352);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 352);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 344);
            v31 = *(char **)(*(_QWORD *)a3 + 352);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 352);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 352);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 344);
    v14 = *(char **)(*(_QWORD *)a5 + 352);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 352);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 352);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 344);
        v23 = *(char **)(*(_QWORD *)a5 + 352);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 352);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 352);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 344);
            v32 = *(char **)(*(_QWORD *)a5 + 352);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 352);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 352);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 344);
    v16 = *(char **)(*(_QWORD *)a6 + 352);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 352);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 352);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 344);
        v25 = *(char **)(*(_QWORD *)a6 + 352);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 352);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 352);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 344);
            v34 = *(char **)(*(_QWORD *)a6 + 352);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 352);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 352);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 344);
                v43 = *(char **)(*(_QWORD *)a6 + 352);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 352);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 352);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B7C6C6E0(_Unwind_Exception *a1)
{
  id *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,NSString * {__strong}>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 144);
  v5 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 56) = v5;
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = v4;
  v6 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v7 = *(const void **)(a2 + 208);
  v8 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 88), v7, v8, (v8 - (uint64_t)v7) >> 4);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 232);
  result = *(__n128 *)(a2 + 240);
  v10 = *(_OWORD *)(a2 + 256);
  *(__n128 *)(a1 + 120) = result;
  *(_OWORD *)(a1 + 136) = v10;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 272);
  return result;
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  void *v47;
  _QWORD *v48;
  _QWORD *v50;
  unint64_t v51;
  _QWORD v52[2];
  char v53;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 280);
  v48 = (_QWORD *)(a2 + 288);
  if (v3 == (_QWORD *)(a2 + 288))
    return;
  v50 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_80;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v51 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0xB8uLL);
      v52[0] = v19;
      v52[1] = v50;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      v53 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        v12 = (uint64_t *)v52[0];
        if (v37)
        {
          *(_QWORD *)v52[0] = *v37;
        }
        else
        {
          *(_QWORD *)v52[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v50;
          if (!*v12)
          {
LABEL_76:
            v52[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v52);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v50;
            if (*v50)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v50;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v47 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v47)
            operator delete(v47);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = v12[1];
      if (v13 == v8)
        break;
      if (v51 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = (id)v12[2];
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    *((_OWORD *)v12 + 2) = *((_OWORD *)v3 + 3);
    v39 = *((_OWORD *)v3 + 4);
    v40 = *((_OWORD *)v3 + 5);
    v41 = *((_OWORD *)v3 + 6);
    v12[12] = v3[14];
    *((_OWORD *)v12 + 4) = v40;
    *((_OWORD *)v12 + 5) = v41;
    *((_OWORD *)v12 + 3) = v39;
    v12[13] = v3[15];
    if (v12 + 2 != v3 + 4)
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 112, (char *)v3[16], v3[17], (uint64_t)(v3[17] - v3[16]) >> 4);
    v12[17] = v3[19];
    v42 = *((_OWORD *)v3 + 10);
    v43 = *((_OWORD *)v3 + 11);
    *((_WORD *)v12 + 88) = *((_WORD *)v3 + 96);
    *((_OWORD *)v12 + 9) = v42;
    *((_OWORD *)v12 + 10) = v43;

LABEL_80:
    v44 = (_QWORD *)v3[1];
    if (v44)
    {
      do
      {
        v45 = v44;
        v44 = (_QWORD *)*v44;
      }
      while (v44);
    }
    else
    {
      do
      {
        v45 = (_QWORD *)v3[2];
        v46 = *v45 == (_QWORD)v3;
        v3 = v45;
      }
      while (!v46);
    }
    v3 = v45;
  }
  while (v45 != v48);
}

void sub_1B7C6CD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D04740;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D04740;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D04740;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7C6CF24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D04740;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 72;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D047D0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D047D0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D047D0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7C6D154(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D047D0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D04860;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D04860;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 640))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7C6D418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 640))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 616);
      v7 = *(_QWORD *)(a1 + 608);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7C6D6A0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  char v10;
  double v11;
  _BOOL4 v12;
  double v14;
  char *v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t **v49;

  v3 = *(_BYTE *)(a2 + 32);
  if (v3)
  {
    v5 = a1 + 8;
    v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      v7 = *(uint64_t **)a2;
      v8 = *(double *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_BYTE *)(a2 + 33);
      v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36))
        v12 = v6 < v11;
      else
        v12 = v6 <= v11;
      if (v12)
      {
        if (v8 <= v11)
          v14 = *(double *)(a2 + 16);
        else
          v14 = *(double *)(a1 + 16);
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 312, *(_QWORD *)(a2 + 24), v9);
        v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 160) <= 0)
        {
          v33 = *(double *)(a1 + 8);
          v34 = *(double *)(a1 + 16);
          if (v6 >= v33)
            v33 = v6;
          if (v34 >= v14)
            v34 = v14;
          *(double *)(a1 + 48) = v33;
          *(double *)(a1 + 56) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            v16 = *(double *)(a1 + 8);
            if (v6 >= v16)
              v16 = v6;
            *(double *)(a1 + 48) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            v17 = *(double *)(a1 + 16);
            if (v17 >= v14)
              v17 = v14;
            *(double *)(a1 + 56) = v17;
          }
        }
        if (*(_BYTE *)(a1 + 32))
        {
          v35 = *(double *)(a1 + 64);
          if (v6 < v35)
            v35 = v6;
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v6);
          v15 = *(char **)(a1 + 112);
        }
        v36 = *(_QWORD *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          v38 = 0x555555555555555;
          v39 = *(char **)(a1 + 104);
          v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v39) >> 4);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 < 0x2AAAAAAAAAAAAAALL)
            v38 = v41;
          if (v38)
          {
            v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            v39 = *(char **)(a1 + 104);
            v15 = *(char **)(a1 + 112);
          }
          else
          {
            v43 = 0;
          }
          v44 = v38 + 48 * v40;
          *(_QWORD *)v44 = v7;
          *(double *)(v44 + 8) = v6;
          *(double *)(v44 + 16) = v14;
          *(_QWORD *)(v44 + 24) = v9;
          v45 = v38 + 48 * v43;
          *(_BYTE *)(v44 + 32) = v3;
          *(_BYTE *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(_BYTE *)(v44 + 42) = 0;
          v37 = (_QWORD *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              v46 = *((_OWORD *)v15 - 3);
              v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 48) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            v39 = *(char **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 104) = v44;
          *(_QWORD *)(a1 + 112) = v37;
          *(_QWORD *)(a1 + 120) = v45;
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((_QWORD *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          v37 = v15 + 48;
          v15[42] = 0;
        }
        *(_QWORD *)(a1 + 112) = v37;
        if (!*(_BYTE *)(a1 + 280) || *(double *)(a1 + 256) <= v6)
        {
          *(_QWORD *)(a1 + 248) = v7;
          *(double *)(a1 + 256) = v6;
          *(double *)(a1 + 264) = v8;
          *(_QWORD *)(a1 + 272) = v9;
          *(_BYTE *)(a1 + 280) = v3;
          *(_BYTE *)(a1 + 281) = v10;
          if (!*(_BYTE *)(a1 + 200) || *(double *)(a1 + 176) <= v6)
          {
            *(_QWORD *)(a1 + 168) = v7;
            *(double *)(a1 + 176) = v6;
            *(double *)(a1 + 184) = v8;
            *(_QWORD *)(a1 + 192) = v9;
            *(_BYTE *)(a1 + 200) = v3;
            *(_BYTE *)(a1 + 201) = v10;
          }
        }
        if (*(_BYTE *)(a1 + 33))
        {
          v48 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v9);
          v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsForSource(v5, v48);
          if (!*((_BYTE *)v49 + 152) || *((double *)v49 + 16) <= v6)
          {
            v49[15] = v7;
            *((double *)v49 + 16) = v6;
            *((double *)v49 + 17) = v8;
            v49[18] = (uint64_t *)v9;
            *((_BYTE *)v49 + 152) = v3;
            *((_BYTE *)v49 + 153) = v10;
            if (!*((_BYTE *)v49 + 72) || *((double *)v49 + 6) <= v6)
            {
              v49[5] = v7;
              *((double *)v49 + 6) = v6;
              *((double *)v49 + 7) = v8;
              v49[8] = (uint64_t *)v9;
              *((_BYTE *)v49 + 72) = v3;
              *((_BYTE *)v49 + 73) = v10;
            }
          }
        }
      }
      else
      {
        if (v6 < v11)
          v6 = *(double *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 504);
        v19 = *(_QWORD *)(a1 + 512);
        if (v18 >= v19)
        {
          v21 = *(_QWORD *)(a1 + 496);
          v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x333333333333333)
            v25 = 0x666666666666666;
          else
            v25 = v23;
          if (v25)
            v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          else
            v26 = 0;
          v27 = v25 + 40 * v22;
          v28 = v25 + 40 * v26;
          *(_QWORD *)v27 = v7;
          *(double *)(v27 + 8) = v6;
          *(double *)(v27 + 16) = v8;
          *(_QWORD *)(v27 + 24) = v9;
          *(_BYTE *)(v27 + 32) = v3;
          *(_BYTE *)(v27 + 33) = v10;
          v20 = v27 + 40;
          v30 = *(char **)(a1 + 496);
          v29 = *(char **)(a1 + 504);
          if (v29 != v30)
          {
            do
            {
              v31 = *(_OWORD *)(v29 - 40);
              v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            v29 = *(char **)(a1 + 496);
          }
          *(_QWORD *)(a1 + 496) = v27;
          *(_QWORD *)(a1 + 504) = v20;
          *(_QWORD *)(a1 + 512) = v28;
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v18 = v7;
          *(double *)(v18 + 8) = v6;
          *(double *)(v18 + 16) = v8;
          *(_QWORD *)(v18 + 24) = v9;
          *(_BYTE *)(v18 + 32) = v3;
          v20 = v18 + 40;
          *(_BYTE *)(v18 + 33) = v10;
        }
        *(_QWORD *)(a1 + 504) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 642))
  {
    *(_BYTE *)(a1 + 644) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 644) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7C6DBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 496), *(_QWORD *)(a1 + 504), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 504) - *(_QWORD *)(a1 + 496)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7C6DCA0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  __int128 v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;
  _BYTE v18[68];

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 520), *(id *)(a1 + 40));
  *((double *)v8 - 4) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v9 = 0uLL;
  memset(v18, 0, sizeof(v18));
  v10 = *(void **)(a1 + 216);
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)&v18[36];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v18[52];
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v18[4];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&v18[20];
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  if (v10)
  {
    *(_QWORD *)(a1 + 224) = v10;
    operator delete(v10);
    v9 = 0uLL;
  }
  *(_WORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 248) = v9;
  *(_OWORD *)(a1 + 264) = v9;
  *(_OWORD *)(a1 + 216) = v9;
  *(_OWORD *)(a1 + 232) = v9;
  if (*(_QWORD *)(a1 + 304))
  {
    v11 = *(_QWORD **)(a1 + 288);
    v12 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 288) = a1 + 296;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    if (v11[1])
      v13 = (_QWORD *)v11[1];
    else
      v13 = v11;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 520));
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a1 + 496);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 644))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 644) = 0;
  }

}

void sub_1B7C6DEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x666666666666667)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[5 * v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9 - 6);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1B7C6DF5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 640))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7C6E060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 656));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 640) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7C6E3C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C400CC883D5);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7C6E570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7C6E7DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  char v18;

  v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v8 = 1;
    v9 = a6;
  }
  v13 = a5;
  v14 = v9;
  v15 = a7;
  v16 = a2;
  v17 = v8;
  v18 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  else
  {
    v11 = v7 <= a6;
    v12 = *(double *)(a1 + 40);
    if (v9 >= v12)
      v11 = 0;
    if (!v11 || a7 <= v12)
      v12 = a7;
    v14 = v9;
    v15 = v12;
    v17 = v11;
    if (v11)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 640))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(__int128 *result, double *a2, double *a3)
{
  double v3;
  double v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int16 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int16 v23;
  __int128 v24;
  __int16 v25;
  __int128 v26;

  v3 = a2[1];
  v4 = a3[1];
  if (v3 >= *((double *)result + 1))
  {
    if (v4 < v3)
    {
      v10 = *((_QWORD *)a2 + 4);
      v11 = *(_OWORD *)a2;
      v12 = *((_OWORD *)a2 + 1);
      v13 = *((_WORD *)a3 + 16);
      v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v14;
      *((_WORD *)a2 + 16) = v13;
      *(_OWORD *)a3 = v11;
      *((_OWORD *)a3 + 1) = v12;
      *((_WORD *)a3 + 16) = v10;
      if (a2[1] < *((double *)result + 1))
      {
        v15 = *((_QWORD *)result + 4);
        v16 = *result;
        v17 = result[1];
        v18 = *((_WORD *)a2 + 16);
        v19 = *((_OWORD *)a2 + 1);
        *result = *(_OWORD *)a2;
        result[1] = v19;
        *((_WORD *)result + 16) = v18;
        *(_OWORD *)a2 = v16;
        *((_OWORD *)a2 + 1) = v17;
        *((_WORD *)a2 + 16) = v15;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v20 = *((_QWORD *)result + 4);
      v21 = *result;
      v22 = result[1];
      v23 = *((_WORD *)a2 + 16);
      v24 = *((_OWORD *)a2 + 1);
      *result = *(_OWORD *)a2;
      result[1] = v24;
      *((_WORD *)result + 16) = v23;
      *(_OWORD *)a2 = v21;
      *((_OWORD *)a2 + 1) = v22;
      *((_WORD *)a2 + 16) = v20;
      if (a3[1] >= a2[1])
        return result;
      v5 = *((_QWORD *)a2 + 4);
      v6 = *(_OWORD *)a2;
      v7 = *((_OWORD *)a2 + 1);
      v25 = *((_WORD *)a3 + 16);
      v26 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v26;
      *((_WORD *)a2 + 16) = v25;
    }
    else
    {
      v5 = *((_QWORD *)result + 4);
      v6 = *result;
      v7 = result[1];
      v8 = *((_WORD *)a3 + 16);
      v9 = *((_OWORD *)a3 + 1);
      *result = *(_OWORD *)a3;
      result[1] = v9;
      *((_WORD *)result + 16) = v8;
    }
    *(_OWORD *)a3 = v6;
    *((_OWORD *)a3 + 1) = v7;
    *((_WORD *)a3 + 16) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  __int16 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int16 v19;
  __int128 v20;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)a2, (double *)a3);
  result.n128_u64[0] = *(_QWORD *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    v9 = *(_QWORD *)(a3 + 32);
    result = *(__n128 *)a3;
    v10 = *(_OWORD *)(a3 + 16);
    v11 = *(_WORD *)(a4 + 32);
    v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_WORD *)(a3 + 32) = v11;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v10;
    *(_WORD *)(a4 + 32) = v9;
    result.n128_u64[0] = *(_QWORD *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      v13 = *(_QWORD *)(a2 + 32);
      result = *(__n128 *)a2;
      v14 = *(_OWORD *)(a2 + 16);
      v15 = *(_WORD *)(a3 + 32);
      v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(_WORD *)(a2 + 32) = v15;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v14;
      *(_WORD *)(a3 + 32) = v13;
      result.n128_u64[0] = *(_QWORD *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        v17 = *(_QWORD *)(a1 + 32);
        result = *(__n128 *)a1;
        v18 = *(_OWORD *)(a1 + 16);
        v19 = *(_WORD *)(a2 + 32);
        v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_WORD *)(a1 + 32) = v19;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v18;
        *(_WORD *)(a2 + 32) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int16 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int16 v25;
  __int128 v26;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a2, a3, a4);
  result.n128_u64[0] = *(_QWORD *)(a5 + 8);
  if (result.n128_f64[0] < *(double *)(a4 + 8))
  {
    v11 = *(_QWORD *)(a4 + 32);
    result = *(__n128 *)a4;
    v12 = *(_OWORD *)(a4 + 16);
    v13 = *(_WORD *)(a5 + 32);
    v14 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v14;
    *(_WORD *)(a4 + 32) = v13;
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 16) = v12;
    *(_WORD *)(a5 + 32) = v11;
    result.n128_u64[0] = *(_QWORD *)(a4 + 8);
    if (result.n128_f64[0] < *(double *)(a3 + 8))
    {
      v15 = *(_QWORD *)(a3 + 32);
      result = *(__n128 *)a3;
      v16 = *(_OWORD *)(a3 + 16);
      v17 = *(_WORD *)(a4 + 32);
      v18 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v18;
      *(_WORD *)(a3 + 32) = v17;
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v16;
      *(_WORD *)(a4 + 32) = v15;
      result.n128_u64[0] = *(_QWORD *)(a3 + 8);
      if (result.n128_f64[0] < *(double *)(a2 + 8))
      {
        v19 = *(_QWORD *)(a2 + 32);
        result = *(__n128 *)a2;
        v20 = *(_OWORD *)(a2 + 16);
        v21 = *(_WORD *)(a3 + 32);
        v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v22;
        *(_WORD *)(a2 + 32) = v21;
        *(__n128 *)a3 = result;
        *(_OWORD *)(a3 + 16) = v20;
        *(_WORD *)(a3 + 32) = v19;
        result.n128_u64[0] = *(_QWORD *)(a2 + 8);
        if (result.n128_f64[0] < *(double *)(a1 + 8))
        {
          v23 = *(_QWORD *)(a1 + 32);
          result = *(__n128 *)a1;
          v24 = *(_OWORD *)(a1 + 16);
          v25 = *(_WORD *)(a2 + 32);
          v26 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v26;
          *(_WORD *)(a1 + 32) = v25;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v24;
          *(_WORD *)(a2 + 32) = v23;
        }
      }
    }
  }
  return result;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7C6F728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7C6F7C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E6CFF278;
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(v4 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(v4 + 42) = *(_BYTE *)(a2 + 42);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<statistics::Interval>>>(result, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<statistics::Interval>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1B7C6F950(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>(uint64_t **a1, const statistics::RawQuantitySample *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = operator new();
  statistics::RawQuantitySample::RawQuantitySample(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<statistics::Interval>>>(result, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<statistics::Interval>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1B7C6FAA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::archive(uint64_t a1, int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::archive((uint64_t)v6, (int8x16_t *)(a2 + 2));
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(*(int8x16_t *)(a2 + 30), *(int8x16_t *)(a2 + 30), 8uLL);
  v6[1] = *((_QWORD *)a2 + 17);
  v6[2] = *((_QWORD *)a2 + 18);
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7C6FBAC(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

uint64_t PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>(statistics::Statistics ***a1, const statistics::RawQuantitySample **a2)
{
  statistics::Statistics *v4;
  uint64_t result;
  unint64_t v6;
  statistics::Statistics **v7;
  statistics::Statistics **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  statistics::Statistics **v14;
  char *v15;
  statistics::Statistics **v16;
  statistics::Statistics **v17;
  statistics::Statistics *v18;
  int64x2_t v19;
  statistics::Statistics **v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = (statistics::Statistics *)operator new();
  statistics::Statistics::Statistics(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<statistics::Interval>>>(result, v12);
    else
      v13 = 0;
    v14 = (statistics::Statistics **)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (statistics::Statistics **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (statistics::Statistics **)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<statistics::Interval>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1B7C6FCF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::archive(uint64_t a1, int8x16_t *a2)
{
  statistics **v4;
  _BYTE v5[208];

  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (statistics **)(a1 + 8);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsDiscrete::archive(a2, (uint64_t)v5);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics((_QWORD *)a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)&a2[4].u64[1], (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1B7C6FDC4(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, _QWORD *a2)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[4];
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  double v18;

  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  v6 = a2[16];
  if (v6)
  {
    HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::unarchive((uint64_t)v13, *(HDStatisticsTimeInterval **)(v6 + 8), *(_QWORD *)(v6 + 128));
    v7 = v15;
    *(_QWORD *)(v5 + 64) = v14;
    v8 = v13[3];
    *(_OWORD *)(v5 + 32) = v13[2];
    *(_OWORD *)(v5 + 48) = v8;
    v9 = v13[1];
    *(_OWORD *)v5 = v13[0];
    *(_OWORD *)(v5 + 16) = v9;
    *(_QWORD *)(a1 + 80) = v7;
    result = v18;
    v10 = v17;
    *(_OWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 104) = v10;
    *(double *)(a1 + 112) = result;
  }
  *(_DWORD *)a1 = a2[17];
  v11 = a2[14];
  if (v11)
  {
    result = *(double *)(v11 + 8);
    v12 = *(_QWORD *)(v11 + 16);
    *(int8x16_t *)(a1 + 120) = vextq_s8(*(int8x16_t *)(v11 + 24), *(int8x16_t *)(v11 + 24), 8uLL);
    *(double *)(a1 + 136) = result;
    *(_QWORD *)(a1 + 144) = v12;
    *(_WORD *)(a1 + 152) = 1;
  }
  return result;
}

double HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, uint64_t a3)
{
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)(a1 + 64) = 0;
  v4 = 0uLL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  if (a3)
  {
    v5 = *(_QWORD *)(a3 + 24);
    v6 = *(_QWORD *)(a3 + 104);
    v7 = *(_QWORD *)(a3 + 112);
    if (v7)
    {
      v4 = *(int8x16_t *)(v7 + 24);
      v8 = *(_QWORD *)(v7 + 8);
      v9 = 1;
      v7 = *(_QWORD *)(v7 + 16);
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)(a3 + 88), *(int8x16_t *)(a3 + 88), 8uLL);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v5;
    v4 = vextq_s8(v4, v4, 8uLL);
    *(int8x16_t *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v7;
    *(_BYTE *)(a1 + 64) = v9;
    *(_BYTE *)(a1 + 65) = 0;
  }
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)&v12);
    *(_QWORD *)(a1 + 72) = v12;
    v4.i64[0] = v15;
    v10 = v14;
    *(_OWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v4.i64[0];
  }
  return *(double *)v4.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D049E0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_WORD *)(a1 + 592) = 1;
  *(_BYTE *)(a1 + 594) = 0;
  *(_BYTE *)(a1 + 596) = 0;
  *(_QWORD *)(a1 + 600) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 640) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D049E0;
  v2 = *(void **)(a1 + 624);
  if (v2)
  {
    *(_QWORD *)(a1 + 632) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 560);
  if (v3)
  {
    *(_QWORD *)(a1 + 568) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 592) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

}

void sub_1B7C700DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 600) = v4;
    v3 = v5;
  }

}

void sub_1B7C7013C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 76, a2);
  v7 = a2;
  v4 = a1[76];
  v5 = a1[73];
  a1[73] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[73]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 264) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7C702D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  void *v3;
  _BYTE v4[8];
  double v5;

  if (*(_BYTE *)(a1 + 592))
    return 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v5);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7C70378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 594))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 593))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 595))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 632);
    v18 = *(_QWORD *)(a1 + 640);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 624);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 632);
      v33 = *(char **)(a1 + 624);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 624);
      }
      *(_QWORD *)(a1 + 624) = v28;
      *(_QWORD *)(a1 + 632) = v21;
      *(_QWORD *)(a1 + 640) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 632) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7C705CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 594))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 594) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 593))
    goto LABEL_5;
  v9 = *(void **)(a1 + 616);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_378);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 616);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 616);
  *(_QWORD *)(a1 + 616) = 0;

  *(_BYTE *)(a1 + 593) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 624);
    *(_QWORD *)(a1 + 640) = 0;
    *(_QWORD *)(a1 + 632) = 0;
    *(_QWORD *)(a1 + 624) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 624);
      v37 = *(__int128 **)(a1 + 632);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 632);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 632) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 624);
  v39 = *(_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560));
  }
  *(_BYTE *)(a1 + 594) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 596))
    {
      *(_BYTE *)(a1 + 596) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 594) = 0;
LABEL_83:

  return v7;
}

void sub_1B7C70CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 594) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 595) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 594))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 594))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 616);
    *(_QWORD *)(a1 + 616) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 593) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 593))
  {
    v8 = *(void **)(a1 + 616);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 616);
      *(_QWORD *)(a1 + 616) = v9;

      v8 = *(void **)(a1 + 616);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7C70FC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 592) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 592) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7C710E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 592) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 592), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::archive((uint64_t)&v37, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 352);
  if (v9 != (_QWORD *)(a1 + 360))
  {
    do
    {
      HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::archive((uint64_t)&v37, (int8x16_t *)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 360));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 560);
  for (k = *(int8x16_t **)(a1 + 568); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7C71478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t j;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  __n128 v63;
  void *v64[2];
  __int128 v65;
  int8x16_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  uint64_t v73[4];
  void *__p[2];
  _WORD v75[56];
  uint64_t v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  int v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 v91;
  __int128 v92;
  int v93;
  void (**v94)(statistics::StatisticsEngine *__hidden);
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _BYTE v101[32];
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;

  v59 = a2;
  *(_BYTE *)(a1 + 592) = objc_msgSend(v59, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v59;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v63.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v64 = 0u;
  v65 = 0u;
  v102 = 0;
  v62 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v101, (const unsigned __int8 *)objc_msgSend(v62, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v102));
  v94 = &off_1E6D09A88;
  v95 = 0;
  v99 = 0;
  v97 = 0;
  v98 = 0;
  v100 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v94, (PB::Reader *)v101);
  v61 = a1;
  v63.n128_u64[0] = v96;
  if (v95)
  {
    v70 = 0;
    memset(v73, 0, sizeof(v73));
    memset(&v75[40], 0, 32);
    v79 = 0;
    v78 = 0;
    *(_OWORD *)__p = 0u;
    memset(v75, 0, 74);
    v76 = 0;
    v77 = &v78;
    v80 = 0u;
    v81 = 0u;
    v82 = 1065353216;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0;
    v87 = 1065353216;
    v88 = 0u;
    v89 = 0u;
    v90 = 1065353216;
    v91 = 0u;
    v92 = 0u;
    v93 = 1065353216;
    v66 = vextq_s8(*(int8x16_t *)(v95 + 8), *(int8x16_t *)(v95 + 8), 8uLL);
    v4 = *(_QWORD *)(v95 + 72);
    v67 = *(_QWORD *)(v95 + 64);
    v68 = *(_BYTE *)(v95 + 185);
    v69 = *(_BYTE *)(v95 + 186);
    v71 = vextq_s8(*(int8x16_t *)(v95 + 24), *(int8x16_t *)(v95 + 24), 8uLL);
    v72 = v4;
    v6 = *(_QWORD *)(v95 + 80);
    v5 = *(_QWORD *)(v95 + 88);
    v60 = (_QWORD *)v95;
    if (v6 != v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v7 >= *(_QWORD *)v75)
        {
          v14 = (char *)__p[0];
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)v75 - (unint64_t)__p[0]) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)v75 - (unint64_t)__p[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v75 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = (char *)__p[1];
            v14 = (char *)__p[0];
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p[0];
          }
          v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(_QWORD *)v75 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    v23 = v60[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(v23 + 8), *(_QWORD *)(v23 + 128));
      *(_QWORD *)&v75[36] = v107;
      *(_OWORD *)&v75[20] = v105;
      *(_OWORD *)&v75[28] = v106;
      *(_OWORD *)&v75[4] = v103;
      *(_OWORD *)&v75[12] = v104;
      *(_QWORD *)&v75[40] = v108;
      if (*(_QWORD *)&v75[44])
      {
        *(_QWORD *)&v75[48] = *(_QWORD *)&v75[44];
        operator delete(*(void **)&v75[44]);
      }
      *(_OWORD *)&v75[44] = v109;
      *(_QWORD *)&v75[52] = v110;
      v110 = 0;
      v109 = 0uLL;
      v76 = v111;
    }
    v24 = (uint64_t *)v60[17];
    for (i = (uint64_t *)v60[18]; v24 != i; ++v24)
    {
      v26 = *v24;
      HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(*v24 + 8), *(_QWORD *)(*v24 + 128));
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v78;
      v29 = &v78;
      v30 = &v78;
      if (v78)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_34;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_37;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_34:
      v33 = (char *)operator new(0x98uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v77)
      {
        v77 = (uint64_t **)*v77;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v32);
      ++v79;
LABEL_37:
      v34 = (void *)*((_QWORD *)v33 + 15);
      v35 = v107;
      v36 = v106;
      *(_OWORD *)(v33 + 72) = v105;
      *(_OWORD *)(v33 + 88) = v36;
      *((_QWORD *)v33 + 13) = v35;
      v37 = v104;
      *(_OWORD *)(v33 + 40) = v103;
      *(_OWORD *)(v33 + 56) = v37;
      *((_QWORD *)v33 + 14) = v108;
      if (v34)
      {
        *((_QWORD *)v33 + 16) = v34;
        operator delete(v34);
        *((_QWORD *)v33 + 15) = 0;
        *((_QWORD *)v33 + 16) = 0;
        *((_QWORD *)v33 + 17) = 0;
      }
      *(_OWORD *)(v33 + 120) = v109;
      *((_QWORD *)v33 + 17) = v110;
      v110 = 0;
      v109 = 0uLL;
      *((_QWORD *)v33 + 18) = v111;
    }
    v38 = v60[5];
    for (j = v60[6]; v38 != j; v38 += 8)
    {
      v41 = *(double *)(*(_QWORD *)v38 + 8);
      v40 = *(double *)(*(_QWORD *)v38 + 16);
      if (v41 >= v40)
        v42 = *(double *)(*(_QWORD *)v38 + 16);
      else
        v42 = *(double *)(*(_QWORD *)v38 + 8);
      if (v40 < v41)
        v40 = *(double *)(*(_QWORD *)v38 + 8);
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::operator=((uint64_t)&v63.n128_i64[1], (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  v43 = v97;
  v44 = v98;
  if (v97 != v98)
  {
    v45 = (char *)v64[1];
    do
    {
      v46 = *(_QWORD *)(*(_QWORD *)v43 + 24);
      v47 = *(_QWORD *)(*(_QWORD *)v43 + 32);
      v48 = *(_QWORD *)(*(_QWORD *)v43 + 8);
      v49 = *(_QWORD *)(*(_QWORD *)v43 + 16);
      if ((unint64_t)v45 >= (unint64_t)v65)
      {
        v50 = (char *)v64[0];
        v51 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)v64[0]) >> 3);
        v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) > v52)
          v52 = 0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) >= 0x333333333333333)
          v53 = 0x666666666666666;
        else
          v53 = v52;
        if (v53)
        {
          v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          v50 = (char *)v64[0];
          v45 = (char *)v64[1];
        }
        else
        {
          v54 = 0;
        }
        v55 = v53 + 40 * v51;
        *(_QWORD *)v55 = v47;
        *(_QWORD *)(v55 + 8) = v46;
        *(_QWORD *)(v55 + 16) = v48;
        *(_QWORD *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        v56 = (char *)v55;
        if (v45 != v50)
        {
          do
          {
            v57 = *(_OWORD *)(v45 - 40);
            v58 = *(_OWORD *)(v45 - 24);
            *((_WORD *)v56 - 4) = *((_WORD *)v45 - 4);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while (v45 != v50);
          v50 = (char *)v64[0];
        }
        v45 = (char *)(v55 + 40);
        v64[0] = v56;
        v64[1] = (void *)(v55 + 40);
        *(_QWORD *)&v65 = v53 + 40 * v54;
        if (v50)
          operator delete(v50);
      }
      else
      {
        *(_QWORD *)v45 = v47;
        *((_QWORD *)v45 + 1) = v46;
        *((_QWORD *)v45 + 2) = v48;
        *((_QWORD *)v45 + 3) = v49;
        *((_WORD *)v45 + 16) = 1;
        v45 += 40;
      }
      v64[1] = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v94);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::operator=((_QWORD *)(v61 + 112), &v63);
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v63.n128_i64[1]);

}

void sub_1B7C71BCC(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x3A0]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x350]);
  v8 = (void *)STACK[0x338];
  if (STACK[0x338])
  {
    STACK[0x340] = (unint64_t)v8;
    operator delete(v8);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x310]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy((_QWORD *)STACK[0x300]);
  v9 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v9;
    operator delete(v9);
  }
  v10 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v10;
    operator delete(v10);
  }
  objc_destroyWeak((id *)&STACK[0x268]);
  v11 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v11;
    operator delete(v11);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3D0]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_QWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 448);
  if (v2)
  {
    *(_QWORD *)(a1 + 456) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 400);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 360);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 320);
  v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(_QWORD *)(a1 + 304) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 256);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 240));
  v3 = *(void **)(a1 + 200);
  if (v3)
  {
    *(_QWORD *)(a1 + 208) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    v2 = (void *)a1[15];
    if (v2)
    {
      a1[16] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[440];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[376];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 608));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 592) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7C72130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 56), a2 + 28);
  v4 = a2[29].n128_u64[1];
  a2[29].n128_u64[1] = 0;
  v5 = (void *)a1[59];
  a1[59] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v12 = *(_OWORD *)(a2 + 136);
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 136) = v12;
  v15 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = v15;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 4);
  v16 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = 0;
  v17 = (_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v16;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  v18 = *(_QWORD **)(a2 + 232);
  if (v18 != (_QWORD *)(a2 + 240))
  {
    v19 = 0;
    v20 = (_QWORD *)(a1 + 240);
    while (1)
    {
      v21 = (_QWORD *)(a1 + 240);
      if (v20 == v17)
        goto LABEL_12;
      v22 = v19;
      v23 = (_QWORD *)(a1 + 240);
      if (v19)
      {
        do
        {
          v21 = v22;
          v22 = (_QWORD *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v23[2];
          v24 = *v21 == (_QWORD)v23;
          v23 = v21;
        }
        while (v24);
      }
      v25 = v18[4];
      if (v21[4] < v25)
      {
LABEL_12:
        if (v19)
          v26 = (uint64_t **)v21;
        else
          v26 = (uint64_t **)(a1 + 240);
        if (v19)
          v27 = (uint64_t **)(v21 + 1);
        else
          v27 = (uint64_t **)(a1 + 240);
        if (!*v27)
        {
LABEL_28:
          v30 = (char *)operator new(0x98uLL);
          *((_QWORD *)v30 + 4) = v18[4];
          *(_OWORD *)(v30 + 40) = *(_OWORD *)(v18 + 5);
          v31 = *(_OWORD *)(v18 + 7);
          v32 = *(_OWORD *)(v18 + 9);
          v33 = *(_OWORD *)(v18 + 11);
          *((_QWORD *)v30 + 13) = v18[13];
          *(_OWORD *)(v30 + 88) = v33;
          *(_OWORD *)(v30 + 72) = v32;
          *(_OWORD *)(v30 + 56) = v31;
          v34 = v18[14];
          *((_QWORD *)v30 + 15) = 0;
          *((_QWORD *)v30 + 14) = v34;
          *((_QWORD *)v30 + 16) = 0;
          *((_QWORD *)v30 + 17) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v30 + 15, (const void *)v18[15], v18[16], (uint64_t)(v18[16] - v18[15]) >> 4);
          *((_QWORD *)v30 + 18) = v18[18];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 232), (uint64_t)v26, v27, (uint64_t *)v30);
        }
      }
      else
      {
        v27 = (uint64_t **)(a1 + 240);
        v26 = (uint64_t **)(a1 + 240);
        if (!v19)
          goto LABEL_28;
        v28 = v19;
        while (1)
        {
          while (1)
          {
            v26 = (uint64_t **)v28;
            v29 = v28[4];
            if (v29 <= v25)
              break;
            v28 = *v26;
            v27 = v26;
            if (!*v26)
              goto LABEL_28;
          }
          if (v29 >= v25)
            break;
          v28 = v26[1];
          if (!v28)
          {
            v27 = v26 + 1;
            goto LABEL_28;
          }
        }
      }
      v35 = (_QWORD *)v18[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v18[2];
          v24 = *v36 == (_QWORD)v18;
          v18 = v36;
        }
        while (!v24);
      }
      if (v36 == (_QWORD *)(a2 + 240))
        break;
      v19 = (_QWORD *)*v17;
      v20 = *(_QWORD **)(a1 + 232);
      v18 = v36;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 256, a2 + 256);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 296), *(const void **)(a2 + 296), *(_QWORD *)(a2 + 304), (uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 320, a2 + 320);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 360, a2 + 360);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 400, a2 + 400);
  return a1;
}

void sub_1B7C72538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v13 + 304) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(*v12);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v13 + 208) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 200, (__n128 *)(a2 + 200));
  v14 = a1 + 240;
  v13 = *(_QWORD **)(a1 + 240);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(v13);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  v15 = (_QWORD *)(a2 + 240);
  v16 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 240) = v16;
  v17 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 248) = v17;
  if (v17)
  {
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(a2 + 232) = v15;
    *v15 = 0;
    *(_QWORD *)(a2 + 248) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 232) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 256, (uint64_t *)(a2 + 256));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 296, (__n128 *)(a2 + 296));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 320, (uint64_t *)(a2 + 320));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 360, (uint64_t *)(a2 + 360));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 400, (uint64_t *)(a2 + 400));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  double v3;
  id v4;
  double *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  id v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t **i;
  uint64_t *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  double *v51;
  double v52;
  double v53;
  double v54;
  void *v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  double *v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint64_t **j;
  uint64_t *v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  double v98;
  double v99;
  void *v100;
  void *v101;
  void *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  void *v110;
  id v111;
  id v112;
  uint64_t v113;
  id v115;
  id v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  void *__p;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[3];
  _QWORD *v128;
  _QWORD v129[3];
  _QWORD *v130;
  _QWORD v131[3];
  _QWORD *v132;
  _BYTE v133[24];
  _BYTE *v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v3 = *(double *)a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308)
    v5 = (double *)a2;
  v110 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  v113 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v7 = (void *)v6;
  v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = *(id *)(a1 + 16);
    if (objc_msgSend(v9, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v9, "underlyingSampleType");
      v10 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v10;
    }

  }
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v8, v110, v7);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v14 = *(uint64_t **)(a2 + 296);
      v15 = *(uint64_t **)(v113 + 304);
      while (v14 != v15)
      {
        v16 = *v14;
        v17 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v17, "sourceForSourceID:", v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          if ((objc_msgSend(v13, "containsObject:", v18) & 1) == 0)
            objc_msgSend(v13, "addObject:", v18);
        }

        ++v14;
      }
      v19 = (void *)objc_msgSend(v13, "copy");
      objc_msgSend(v11, "_setSources:", v19);

    }
  }

  v127[0] = &off_1E6D04BD0;
  v128 = v127;
  v111 = v11;
  v20 = (uint64_t)v128;
  if (!v128)
    goto LABEL_22;
  if (v128 != v127)
  {
    v20 = (*(uint64_t (**)(void))(*v128 + 16))();
LABEL_22:
    v132 = (_QWORD *)v20;
    goto LABEL_24;
  }
  v132 = v131;
  (*(void (**)(uint64_t, _QWORD *))(v127[0] + 24))((uint64_t)v127, v131);
LABEL_24:
  v134 = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E6D04AB0;
  v22 = v21 + 1;
  v23 = (uint64_t)v132;
  if (!v132)
  {
LABEL_27:
    v21[4] = v23;
    goto LABEL_29;
  }
  if (v132 != v131)
  {
    v23 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v132 + 16))(v132, v22);
    goto LABEL_27;
  }
  v21[4] = v22;
  (*(void (**)(_QWORD *))(v131[0] + 24))(v131);
LABEL_29:
  v134 = v21;
  v24 = v111;
  v25 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = *(_OWORD *)(v113 + 136);
  v28 = *(_OWORD *)(v113 + 168);
  v119 = *(_OWORD *)(v113 + 152);
  v120 = v28;
  v117 = *(_OWORD *)(v113 + 120);
  v118 = v27;
  v29 = *(_QWORD *)(v113 + 192);
  v121 = *(_QWORD *)(v113 + 184);
  v122 = v29;
  v124 = 0;
  v125 = 0;
  v30 = *(const void **)(v113 + 200);
  v31 = *(_QWORD *)(v113 + 208);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v30, v31, (v31 - (uint64_t)v30) >> 4);
  v126 = *(_QWORD *)(v113 + 224);
  if (!v134)
    std::__throw_bad_function_call[abi:ne180100]();
  v32 = (*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v134 + 48))(v134, &v117);
  v33 = *(double **)(v32 + 8);
  v34 = 0.0;
  while (v33 != *(double **)(v32 + 16))
  {
    v36 = *v33;
    v35 = v33[1];
    v33 += 2;
    v34 = v34 + v35 - v36;
  }
  objc_msgSend(v25, "quantityWithUnit:doubleValue:", v26, v34 + *(double *)(v32 + 32));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setDuration:", v37);

  if (__p)
  {
    v124 = __p;
    operator delete(__p);
  }

  v38 = *(_OWORD *)(v113 + 168);
  v119 = *(_OWORD *)(v113 + 152);
  v120 = v38;
  v39 = *(_QWORD *)(v113 + 184);
  v40 = *(_OWORD *)(v113 + 136);
  v117 = *(_OWORD *)(v113 + 120);
  v118 = v40;
  v42 = *(_QWORD *)(v113 + 192);
  v41 = *(const void **)(v113 + 200);
  v121 = v39;
  v122 = v42;
  v124 = 0;
  v125 = 0;
  v43 = *(_QWORD *)(v113 + 208);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v41, v43, (v43 - (uint64_t)v41) >> 4);
  v126 = *(_QWORD *)(v113 + 224);
  if (!v134)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v24, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v134 + 48))(v134, &v117));
  if (__p)
  {
    v124 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v44 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v45 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v117, v113);
    for (i = (uint64_t **)v118; i; i = (uint64_t **)*i)
    {
      v47 = i[2];
      v48 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v134)
        std::__throw_bad_function_call[abi:ne180100]();
      v50 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)i + 3);
      v51 = *(double **)(v50 + 8);
      v52 = 0.0;
      while (v51 != *(double **)(v50 + 16))
      {
        v54 = *v51;
        v53 = v51[1];
        v51 += 2;
        v52 = v52 + v53 - v54;
      }
      objc_msgSend(v48, "quantityWithUnit:doubleValue:", v49, v52 + *(double *)(v50 + 32));
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "setObject:forKeyedSubscript:", v55, v47);

      if (!v134)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)i + 3));
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "setObject:forKeyedSubscript:", v56, v47);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v117);
    objc_msgSend(v24, "setDurationBySource:", v44);
    objc_msgSend(v24, "setDataCountBySource:", v45);

  }
  v57 = v134;
  if (v134 == v133)
  {
    v58 = 4;
    v57 = v133;
  }
  else
  {
    if (!v134)
      goto LABEL_52;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_52:
  v59 = v132;
  if (v132 == v131)
  {
    v60 = 4;
    v59 = v131;
  }
  else
  {
    if (!v132)
      goto LABEL_57;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_57:
  v61 = (uint64_t)v128;
  if (!v128)
  {
LABEL_60:
    v130 = (_QWORD *)v61;
    goto LABEL_62;
  }
  if (v128 != v127)
  {
    v61 = (*(uint64_t (**)(void))(*v128 + 16))();
    goto LABEL_60;
  }
  v130 = v129;
  (*(void (**)(uint64_t, _QWORD *))(v127[0] + 24))((uint64_t)v127, v129);
LABEL_62:
  v134 = 0;
  v62 = operator new(0x28uLL);
  *v62 = &off_1E6D04B40;
  v63 = (uint64_t)v130;
  if (!v130)
  {
LABEL_65:
    v62[4] = v63;
    goto LABEL_67;
  }
  if (v130 != v129)
  {
    v63 = (*(uint64_t (**)(void))(*v130 + 16))();
    goto LABEL_65;
  }
  v62[4] = v62 + 1;
  (*(void (**)(_QWORD *))(v129[0] + 24))(v129);
LABEL_67:
  v134 = v62;
  v116 = v24;
  v64 = *(_QWORD *)(a1 + 24);
  v65 = *(_OWORD *)(v113 + 168);
  v119 = *(_OWORD *)(v113 + 152);
  v120 = v65;
  v66 = *(_QWORD *)(v113 + 184);
  v67 = *(_OWORD *)(v113 + 136);
  v117 = *(_OWORD *)(v113 + 120);
  v118 = v67;
  v69 = *(_QWORD *)(v113 + 192);
  v68 = *(const void **)(v113 + 200);
  v121 = v66;
  v122 = v69;
  v124 = 0;
  v125 = 0;
  v70 = *(_QWORD *)(v113 + 208);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v68, v70, (v70 - (uint64_t)v68) >> 4);
  v126 = *(_QWORD *)(v113 + 224);
  if (!v134)
    std::__throw_bad_function_call[abi:ne180100]();
  v71 = (double *)(*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v134 + 48))(v134, &v117);
  v73 = *v71;
  v72 = v71[1];
  v74 = v71[2];
  v75 = *((_QWORD *)v71 + 3);
  v77 = v71[4];
  v76 = v71[5];
  v78 = v71[6];
  if (__p)
  {
    v124 = __p;
    operator delete(__p);
  }
  v79 = *(_QWORD *)(a1 + 24);
  v80 = _HKStatisticsOptionBaselineRelativeQuantities();
  v81 = *(void **)(a1 + 16);
  if ((v80 & v79) != 0)
    objc_msgSend(v81, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v81, "canonicalUnit");
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v64 & 2) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v82, v73);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v116, "setAverageQuantity:", v83);

  }
  if ((v64 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v82, v74);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v116, "setMinimumQuantity:", v84);

  }
  if ((v64 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v82, v72);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v116, "setMaximumQuantity:", v85);

  }
  if ((v64 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v82, v77);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v116, "setMostRecentQuantity:", v86);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v76, v78);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v116, "setMostRecentQuantityDateInterval:", v87);

  }
  objc_msgSend(v116, "setDataCount:", v75);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_117;
  if ((v64 & 2) != 0)
    v115 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v115 = 0;
  if ((v64 & 4) != 0)
    v112 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v112 = 0;
  if ((v64 & 8) != 0)
  {
    v88 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    if ((v64 & 0x20) == 0)
      goto LABEL_90;
LABEL_92:
    v90 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v89 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    goto LABEL_93;
  }
  v88 = 0;
  if ((v64 & 0x20) != 0)
    goto LABEL_92;
LABEL_90:
  v89 = 0;
  v90 = 0;
LABEL_93:
  v91 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v117, v113);
  for (j = (uint64_t **)v118; j; j = (uint64_t **)*j)
  {
    v93 = j[2];
    if ((v64 & 2) != 0)
    {
      if (!v134)
        goto LABEL_133;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v82, *(double *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)j + 3));
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v115, "setObject:forKeyedSubscript:", v94, v93);

    }
    if ((v64 & 4) != 0)
    {
      if (!v134)
        goto LABEL_133;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v82, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)j + 3) + 16));
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v112, "setObject:forKeyedSubscript:", v95, v93);

    }
    if ((v64 & 8) != 0)
    {
      if (!v134)
        goto LABEL_133;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v82, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)j + 3) + 8));
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "setObject:forKeyedSubscript:", v96, v93);

    }
    if ((v64 & 0x20) != 0)
    {
      if (!v134)
        std::__throw_bad_function_call[abi:ne180100]();
      v97 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)j + 3);
      v98 = *(double *)(v97 + 40);
      v99 = *(double *)(v97 + 48);
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v82, *(double *)(v97 + 32));
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v90, "setObject:forKeyedSubscript:", v100, v93);

      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v98, v99);
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v89, "setObject:forKeyedSubscript:", v101, v93);

    }
    if (!v134)
LABEL_133:
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)j + 3) + 24));
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v91, "setObject:forKeyedSubscript:", v102, v93);

  }
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v117);
  if ((v64 & 2) != 0)
    objc_msgSend(v116, "setAverageQuantityBySource:", v115);
  if ((v64 & 4) != 0)
    objc_msgSend(v116, "setMinimumQuantityBySource:", v112);
  if ((v64 & 8) != 0)
    objc_msgSend(v116, "setMaximumQuantityBySource:", v88);
  if ((v64 & 0x20) != 0)
  {
    objc_msgSend(v116, "setMostRecentQuantityBySource:", v90);
    objc_msgSend(v116, "setMostRecentQuantityDateIntervalBySource:", v89);
  }
  objc_msgSend(v116, "setDataCountBySource:", v91);

LABEL_117:
  v103 = v134;
  if (v134 == v133)
  {
    v104 = 4;
    v103 = v133;
  }
  else
  {
    if (!v134)
      goto LABEL_122;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_122:
  v105 = v130;
  if (v130 == v129)
  {
    v106 = 4;
    v105 = v129;
  }
  else
  {
    if (!v130)
      goto LABEL_127;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_127:

  v107 = v128;
  if (v128 == v127)
  {
    v108 = 4;
    v107 = v127;
    goto LABEL_131;
  }
  if (v128)
  {
    v108 = 5;
LABEL_131:
    (*(void (**)(void))(*v107 + 8 * v108))();
  }
  return v116;
}

void sub_1B7C73400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32,char a33,uint64_t a34,uint64_t a35,char *a36)
{
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v41 = *(_QWORD **)(v39 - 152);
  if (v41 == (_QWORD *)(v39 - 176))
  {
    v42 = 4;
    v41 = (_QWORD *)(v39 - 176);
  }
  else
  {
    if (!v41)
      goto LABEL_6;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_6:
  v43 = a36;
  if (a36 == &a33)
  {
    v44 = 4;
    v43 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_11;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_11:

  v45 = a32;
  if (a32 == &a29)
  {
    v46 = 4;
    v45 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_16;
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_16:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 280);
  v2 = *(_QWORD *)(a1 + 296);
  if (v1 != (*(_QWORD *)(a1 + 304) - v2) >> 3)
  {
    v4 = (void **)(a1 + 296);
    *(_QWORD *)(a1 + 304) = v2;
    std::vector<long long>::reserve((void **)(a1 + 296), v1);
    v5 = *(_QWORD **)(a1 + 272);
    if (v5)
    {
      v6 = *(char **)(a1 + 304);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 312);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 296);
            v6 = *(char **)(a1 + 304);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 296) = v16;
          *(_QWORD *)(a1 + 304) = v9;
          *(_QWORD *)(a1 + 312) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 304) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7C738F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  _QWORD *v6;
  double *v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  char v16;
  double v17;
  int v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double *j;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  id WeakRetained;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  int v56;
  unint64_t v57;
  uint64_t **v58;
  __int128 v59;
  char *v60;
  char v61;
  double *v62;
  __int128 v63;
  _OWORD *v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  double var2;
  double *i;
  int v76;
  int v77;
  unint64_t var3;
  _BOOL4 v79;
  _OWORD *v80;
  __int128 v81;
  __int128 v82;
  char *v83;
  char *v84;
  _OWORD *v85;
  __int128 v86;
  __int128 v87;
  _BOOL4 v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  unint64_t v93;
  uint64_t **v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  double v98;
  void *v99;
  void *v100;
  double **v101;
  id *location;
  id v103;
  uint64_t *v104;
  HDStatisticsDiscrete *v105;
  int64_t v106;
  char **v107;
  uint64_t v108;
  HDRawQuantitySample v109;
  __int128 v110;
  __int128 v111;
  __int16 v112;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v107 = (char **)(a1 + 96);
    v104 = (uint64_t *)(a1 + 192);
    v105 = (HDStatisticsDiscrete *)(a1 + 120);
    location = (id *)(a1 + 88);
    v101 = (double **)(a1 + 200);
    v6 = (_QWORD *)(a1 + 240);
    do
    {
      v7 = *(double **)(a1 + 96);
      v8 = *(__int128 **)(a1 + 104);
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          v30 = a2;
          v31 = a2;
          v32 = v5;
          v33 = *(_QWORD *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              v34 = *(double *)(v33 + 8);
              v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31)
                v31 = *(double *)(v33 + 8);
              if (v35 > v5)
                v37 = *(double *)(v33 + 16);
              else
                v37 = v30;
              if (v35 < v30)
              {
                v32 = v5;
                v30 = v37;
              }
              v33 += 48;
            }
            while ((__int128 *)v33 != v8);
          }
          if (v30 >= v31)
            v38 = v31;
          else
            v38 = v30;
          v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            v40 = v39 * floor(v38 / v39);
            v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41)
              v38 = v40;
            else
              v38 = v41;
          }
          *v107 = 0;
          v107[1] = 0;
          v107[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            v45 = *(char **)(a1 + 96);
            v44 = *(char **)(a1 + 104);
            v46 = v42;
            if (v44 != v45)
            {
              do
              {
                v47 = *((_OWORD *)v44 - 3);
                v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              v44 = *v107;
            }
            *(_QWORD *)(a1 + 96) = v46;
            *(_QWORD *)(a1 + 104) = v42;
            *(_QWORD *)(a1 + 112) = &v42[48 * v43];
            if (v44)
              operator delete(v44);
          }
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v109.var0 = a1;
            v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8)
              v51 = 0;
            else
              v51 = v50;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*,false>((uint64_t)v7, v8, (uint64_t)&v109, v51, 1);
          }
          if (*(_BYTE *)(a1 + 25))
            v103 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v103 = 0;
          if (v7 == (double *)v8)
          {
LABEL_140:
            *(double *)(a1 + 224) = HKIntervalMask<double>::removeIntervalsBefore(v101, v38) + *(double *)(a1 + 224);
            v95 = *(_QWORD **)(a1 + 232);
            if (v95 != v6)
            {
              do
              {
                *((double *)v95 + 18) = HKIntervalMask<double>::removeIntervalsBefore((double **)v95 + 15, v38)
                                      + *((double *)v95 + 18);
                v96 = (_QWORD *)v95[1];
                if (v96)
                {
                  do
                  {
                    v97 = v96;
                    v96 = (_QWORD *)*v96;
                  }
                  while (v96);
                }
                else
                {
                  do
                  {
                    v97 = (_QWORD *)v95[2];
                    v54 = *v97 == (_QWORD)v95;
                    v95 = v97;
                  }
                  while (!v54);
                }
                v95 = v97;
              }
              while (v97 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7)
              operator delete(v7);
            goto LABEL_152;
          }
          v106 = 0;
          v61 = 0;
          v62 = v7;
          while (2)
          {
            v63 = *((_OWORD *)v62 + 1);
            *(_OWORD *)&v109.var0 = *(_OWORD *)v62;
            *(_OWORD *)&v109.var2 = v63;
            *(double *)&v109.var4 = v62[4];
            if (!v109.var4 || v109.var1 > v38)
            {
              v64 = *(_OWORD **)(a1 + 104);
              v65 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v64 >= v65)
              {
                v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - *v107) >> 4);
                v70 = v69 + 1;
                if (v69 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (_QWORD)*v107) >> 4);
                if (2 * v71 > v70)
                  v70 = 2 * v71;
                if (v71 >= 0x2AAAAAAAAAAAAAALL)
                  v72 = 0x555555555555555;
                else
                  v72 = v70;
                if (v72)
                  v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v72);
                else
                  v73 = 0;
                v80 = (_OWORD *)(v72 + 48 * v69);
                v81 = *(_OWORD *)v62;
                v82 = *((_OWORD *)v62 + 2);
                v80[1] = *((_OWORD *)v62 + 1);
                v80[2] = v82;
                *v80 = v81;
                v84 = *(char **)(a1 + 96);
                v83 = *(char **)(a1 + 104);
                v85 = v80;
                if (v83 != v84)
                {
                  do
                  {
                    v86 = *((_OWORD *)v83 - 3);
                    v87 = *((_OWORD *)v83 - 2);
                    *(_OWORD *)((char *)v85 - 21) = *(_OWORD *)(v83 - 21);
                    *(v85 - 3) = v86;
                    *(v85 - 2) = v87;
                    v85 -= 3;
                    v83 -= 48;
                  }
                  while (v83 != v84);
                  v83 = *v107;
                }
                v68 = v80 + 3;
                *(_QWORD *)(a1 + 96) = v85;
                *(_QWORD *)(a1 + 104) = v80 + 3;
                *(_QWORD *)(a1 + 112) = v72 + 48 * v73;
                if (v83)
                  operator delete(v83);
              }
              else
              {
                v66 = *(_OWORD *)v62;
                v67 = *((_OWORD *)v62 + 2);
                v64[1] = *((_OWORD *)v62 + 1);
                v64[2] = v67;
                *v64 = v66;
                v68 = v64 + 3;
              }
              *(_QWORD *)(a1 + 104) = v68;
LABEL_139:
              v62 += 6;
              if (v62 == (double *)v8)
                goto LABEL_140;
              continue;
            }
            break;
          }
          var2 = v109.var2;
          if (v109.var2 > v38)
            var2 = v38;
          v109.var2 = var2;
          for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v109.var1 >= *i; i += 2)
          {
            if (v109.var1 < i[1])
              goto LABEL_139;
          }
          v76 = *((unsigned __int8 *)v62 + 42);
          v77 = *((unsigned __int8 *)v62 + 41);
          if ((v61 & 1) != 0)
          {
            var3 = v109.var3;
            if (v106 == v109.var3 || *(_BYTE *)(a1 + 24))
            {
              v79 = v76 == 0;
              HDStatisticsDiscrete::addSample((uint64_t)v105, &v109);
              HDStatisticsTimeInterval::addSample(v104, &v109, v79);
            }
          }
          else
          {
            v88 = v76 == 0;
            HDStatisticsDiscrete::addSample((uint64_t)v105, &v109);
            HDStatisticsTimeInterval::addSample(v104, &v109, v88);
            var3 = v109.var3;
            v106 = v109.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_138;
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, var3);
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v89)
            goto LABEL_137;
          objc_msgSend(v103, "objectForKeyedSubscript:", v89);
          v90 = (void *)objc_claimAutoreleasedReturnValue();
          v91 = v90;
          if (v90)
          {
            if (objc_msgSend(v90, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_136:

LABEL_137:
LABEL_138:
              v61 = 1;
              goto LABEL_139;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v103, "setObject:forKeyedSubscript:", v92, v89);

          }
          v93 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
          v94 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v93);
          HDStatisticsDiscrete::addSample((uint64_t)v94, &v109);
          HDStatisticsTimeInterval::addSample((uint64_t *)v94 + 9, &v109, v77 == 0);
          goto LABEL_136;
        }
        v10 = *((unsigned __int8 *)v7 + 42);
        v11 = *((unsigned __int8 *)v7 + 41);
        v12 = *((unsigned __int8 *)v7 + 40);
        v13 = v7[1];
        v14 = v7[2];
        v15 = *((_QWORD *)v7 + 3);
        v16 = *((_BYTE *)v7 + 33);
        if (v14 <= a2)
          v17 = v7[2];
        else
          v17 = a2;
        if (v13 < a2)
          v18 = *((unsigned __int8 *)v7 + 32);
        else
          v18 = 0;
        if (v13 < a2)
          v19 = 0;
        else
          v19 = *((_BYTE *)v7 + 33);
        if (v13 < a2)
        {
          v20 = 0;
        }
        else
        {
          v17 = v7[2];
          v20 = *((_QWORD *)v7 + 3);
        }
        if (v13 < a2)
          v21 = 0.0;
        else
          v21 = v7[2];
        if (v13 < a2)
          v22 = 0.0;
        else
          v22 = *v7;
        if (v13 < a2)
          v23 = 0.0;
        else
          v23 = v7[1];
        if (v13 < a2)
          v24 = 0;
        else
          v24 = *((unsigned __int8 *)v7 + 32);
        if (*((_BYTE *)v7 + 32))
        {
          v14 = v17;
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
        }
        if (*((_BYTE *)v7 + 32))
          v25 = v21;
        else
          v25 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v26 = v22;
        else
          v26 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v27 = v23;
        else
          v27 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v28 = v24;
        else
          v28 = 0;
        v109.var0 = *v7;
        v109.var1 = v13;
        v109.var2 = v14;
        v109.var3 = v15;
        v109.var4 = v18;
        v109.var5 = v16;
        *(_DWORD *)(&v109.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v109.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&v110 = v26;
        *((double *)&v110 + 1) = v27;
        *(double *)&v111 = v25;
        *((_QWORD *)&v111 + 1) = v20;
        LOBYTE(v112) = v28;
        HIBYTE(v112) = v19;
        for (j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            v52 = v12 != 0;
            v53 = v11 != 0;
            v55 = v10 != 0;
            if (!v28)
              goto LABEL_150;
LABEL_93:
            LOWORD(v108) = v112;
            v59 = v111;
            v60 = *v107;
            *(_OWORD *)v60 = v110;
            *((_OWORD *)v60 + 1) = v59;
            *((_QWORD *)v60 + 4) = v108;
            v60[40] = v52;
            v60[41] = v53;
            v60[42] = v55;
            goto LABEL_151;
          }
        }
        v52 = v12 != 0;
        v53 = v11 != 0;
        v54 = v10 == 0;
        v55 = v10 != 0;
        if (v18)
        {
          v56 = v54;
          HDStatisticsDiscrete::addSample((uint64_t)v105, &v109);
          HDStatisticsTimeInterval::addSample(v104, &v109, v56);
          if (*(_BYTE *)(a1 + 25))
          {
            v57 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v15);
            v58 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v57);
            HDStatisticsDiscrete::addSample((uint64_t)v58, &v109);
            HDStatisticsTimeInterval::addSample((uint64_t *)v58 + 9, &v109, v11 == 0);
          }
          v52 = 1;
          v53 = 1;
          v55 = 1;
        }
        if (v28)
          goto LABEL_93;
LABEL_150:
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
      }
LABEL_151:
      *(double *)(a1 + 56) = a2;
LABEL_152:
      v98 = *(double *)(a1 + 56);
      if (v98 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsDiscrete, HDStatisticsTimeInterval>]");
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v99, "handleFailureInFunction:file:lineNumber:description:", v100, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v98 = *(double *)(a1 + 56);
      }
      v5 = v98;
    }
    while (v98 < a2);
  }
}

void sub_1B7C7411C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v12;

  v12 = a2;
  v5 = *(_QWORD **)(a1 + 240);
  v3 = (uint64_t **)(a1 + 240);
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = (uint64_t **)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    v6 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 320), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 360);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7C742E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 400);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7C743B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x98uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 296);
  v7 = *(char **)(*(_QWORD *)a4 + 304);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 296);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 296);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 304);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 296);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 304);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 296);
      v15 = *(char **)(*(_QWORD *)a4 + 304);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 304);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 304);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 296);
          v25 = *(char **)(*(_QWORD *)a4 + 304);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 304);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 304);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 296);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 296);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 304);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 296);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 304);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 296);
      v41 = *(char **)(*(_QWORD *)a4 + 304);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 304);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 304);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 296);
      v11 = *(char **)(*(_QWORD *)a3 + 304);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 304);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 304);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 296);
      v24 = *(char **)(*(_QWORD *)a3 + 304);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 304);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 304);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 296);
            v31 = *(char **)(*(_QWORD *)a3 + 304);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 304);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 304);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 296);
    v14 = *(char **)(*(_QWORD *)a5 + 304);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 304);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 304);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 296);
        v23 = *(char **)(*(_QWORD *)a5 + 304);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 304);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 304);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 296);
            v32 = *(char **)(*(_QWORD *)a5 + 304);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 304);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 304);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 296);
    v16 = *(char **)(*(_QWORD *)a6 + 304);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 304);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 304);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 296);
        v25 = *(char **)(*(_QWORD *)a6 + 304);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 304);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 304);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 296);
            v34 = *(char **)(*(_QWORD *)a6 + 304);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 304);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 304);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 296);
                v43 = *(char **)(*(_QWORD *)a6 + 304);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 304);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 304);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  char **v11;
  char *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  char **v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  BOOL v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v48;
  unint64_t v49;
  _QWORD v50[2];
  char v51;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 232);
  v46 = (_QWORD *)(a2 + 240);
  if (v3 == (_QWORD *)(a2 + 240))
    return;
  v48 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_80;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v49 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0x88uLL);
      v50[0] = v19;
      v50[1] = v48;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      v51 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
        v12 = (char *)v50[0];
        if (v37)
        {
          *(_QWORD *)v50[0] = *v37;
        }
        else
        {
          *(_QWORD *)v50[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v48;
          if (!*(_QWORD *)v12)
          {
LABEL_76:
            v50[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v50);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*(_QWORD *)v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (char **)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v48;
            if (*v48)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v48;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v45 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v45)
            operator delete(v45);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = *((_QWORD *)v12 + 1);
      if (v13 == v8)
        break;
      if (v49 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = *(char **)v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = *((id *)v12 + 2);
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v3 + 5);
    v39 = *(_OWORD *)(v3 + 7);
    v40 = *(_OWORD *)(v3 + 9);
    v41 = *(_OWORD *)(v3 + 11);
    *((_QWORD *)v12 + 11) = v3[13];
    *(_OWORD *)(v12 + 72) = v41;
    *(_OWORD *)(v12 + 56) = v40;
    *(_OWORD *)(v12 + 40) = v39;
    *((_QWORD *)v12 + 12) = v3[14];
    if (v12 + 16 != (char *)(v3 + 4))
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v12 + 104, (char *)v3[15], v3[16], (uint64_t)(v3[16] - v3[15]) >> 4);
    *((_QWORD *)v12 + 16) = v3[18];

LABEL_80:
    v42 = (_QWORD *)v3[1];
    if (v42)
    {
      do
      {
        v43 = v42;
        v42 = (_QWORD *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        v43 = (_QWORD *)v3[2];
        v44 = *v43 == (_QWORD)v3;
        v3 = v43;
      }
      while (!v44);
    }
    v3 = v43;
  }
  while (v43 != v46);
}

void sub_1B7C76794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D04AB0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D04AB0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D04AB0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7C769B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D04AB0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 72;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D04B40;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D04B40;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D04B40;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7C76BE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D04B40;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D04BD0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D04BD0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 592))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7C76EAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 592))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 568);
      v7 = *(_QWORD *)(a1 + 560);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7C77134(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  char v10;
  double v11;
  _BOOL4 v12;
  double v14;
  char *v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t **v49;

  v3 = *(_BYTE *)(a2 + 32);
  if (v3)
  {
    v5 = a1 + 8;
    v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      v7 = *(uint64_t **)a2;
      v8 = *(double *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_BYTE *)(a2 + 33);
      v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36))
        v12 = v6 < v11;
      else
        v12 = v6 <= v11;
      if (v12)
      {
        if (v8 <= v11)
          v14 = *(double *)(a2 + 16);
        else
          v14 = *(double *)(a1 + 16);
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 264, *(_QWORD *)(a2 + 24), v9);
        v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 152) <= 0)
        {
          v33 = *(double *)(a1 + 8);
          v34 = *(double *)(a1 + 16);
          if (v6 >= v33)
            v33 = v6;
          if (v34 >= v14)
            v34 = v14;
          *(double *)(a1 + 48) = v33;
          *(double *)(a1 + 56) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            v16 = *(double *)(a1 + 8);
            if (v6 >= v16)
              v16 = v6;
            *(double *)(a1 + 48) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            v17 = *(double *)(a1 + 16);
            if (v17 >= v14)
              v17 = v14;
            *(double *)(a1 + 56) = v17;
          }
        }
        if (*(_BYTE *)(a1 + 32))
        {
          v35 = *(double *)(a1 + 64);
          if (v6 < v35)
            v35 = v6;
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v6);
          v15 = *(char **)(a1 + 112);
        }
        v36 = *(_QWORD *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          v38 = 0x555555555555555;
          v39 = *(char **)(a1 + 104);
          v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v39) >> 4);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 < 0x2AAAAAAAAAAAAAALL)
            v38 = v41;
          if (v38)
          {
            v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            v39 = *(char **)(a1 + 104);
            v15 = *(char **)(a1 + 112);
          }
          else
          {
            v43 = 0;
          }
          v44 = v38 + 48 * v40;
          *(_QWORD *)v44 = v7;
          *(double *)(v44 + 8) = v6;
          *(double *)(v44 + 16) = v14;
          *(_QWORD *)(v44 + 24) = v9;
          v45 = v38 + 48 * v43;
          *(_BYTE *)(v44 + 32) = v3;
          *(_BYTE *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(_BYTE *)(v44 + 42) = 0;
          v37 = (_QWORD *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              v46 = *((_OWORD *)v15 - 3);
              v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 48) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            v39 = *(char **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 104) = v44;
          *(_QWORD *)(a1 + 112) = v37;
          *(_QWORD *)(a1 + 120) = v45;
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((_QWORD *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          v37 = v15 + 48;
          v15[42] = 0;
        }
        *(_QWORD *)(a1 + 112) = v37;
        if (!*(_BYTE *)(a1 + 192) || *(double *)(a1 + 168) <= v6)
        {
          *(_QWORD *)(a1 + 160) = v7;
          *(double *)(a1 + 168) = v6;
          *(double *)(a1 + 176) = v8;
          *(_QWORD *)(a1 + 184) = v9;
          *(_BYTE *)(a1 + 192) = v3;
          *(_BYTE *)(a1 + 193) = v10;
        }
        if (*(_BYTE *)(a1 + 33))
        {
          v48 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v9);
          v49 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v48);
          if (!*((_BYTE *)v49 + 64) || *((double *)v49 + 5) <= v6)
          {
            v49[4] = v7;
            *((double *)v49 + 5) = v6;
            *((double *)v49 + 6) = v8;
            v49[7] = (uint64_t *)v9;
            *((_BYTE *)v49 + 64) = v3;
            *((_BYTE *)v49 + 65) = v10;
          }
        }
      }
      else
      {
        if (v6 < v11)
          v6 = *(double *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 456);
        v19 = *(_QWORD *)(a1 + 464);
        if (v18 >= v19)
        {
          v21 = *(_QWORD *)(a1 + 448);
          v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x333333333333333)
            v25 = 0x666666666666666;
          else
            v25 = v23;
          if (v25)
            v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          else
            v26 = 0;
          v27 = v25 + 40 * v22;
          v28 = v25 + 40 * v26;
          *(_QWORD *)v27 = v7;
          *(double *)(v27 + 8) = v6;
          *(double *)(v27 + 16) = v8;
          *(_QWORD *)(v27 + 24) = v9;
          *(_BYTE *)(v27 + 32) = v3;
          *(_BYTE *)(v27 + 33) = v10;
          v20 = v27 + 40;
          v30 = *(char **)(a1 + 448);
          v29 = *(char **)(a1 + 456);
          if (v29 != v30)
          {
            do
            {
              v31 = *(_OWORD *)(v29 - 40);
              v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            v29 = *(char **)(a1 + 448);
          }
          *(_QWORD *)(a1 + 448) = v27;
          *(_QWORD *)(a1 + 456) = v20;
          *(_QWORD *)(a1 + 464) = v28;
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v18 = v7;
          *(double *)(v18 + 8) = v6;
          *(double *)(v18 + 16) = v8;
          *(_QWORD *)(v18 + 24) = v9;
          *(_BYTE *)(v18 + 32) = v3;
          v20 = v18 + 40;
          *(_BYTE *)(v18 + 33) = v10;
        }
        *(_QWORD *)(a1 + 456) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 594))
  {
    *(_BYTE *)(a1 + 596) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 596) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7C775FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 448), *(_QWORD *)(a1 + 456), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 456) - *(_QWORD *)(a1 + 448)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7C776E4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 472), *(id *)(a1 + 40));
  v9 = *(void **)(a1 + 208);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v10 = 0uLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  if (v9)
  {
    *(_QWORD *)(a1 + 216) = v9;
    operator delete(v9);
    v10 = 0uLL;
  }
  *(_OWORD *)(a1 + 208) = v10;
  *(_OWORD *)(a1 + 224) = v10;
  if (*(_QWORD *)(a1 + 256))
  {
    v11 = *(_QWORD *)(a1 + 248);
    v12 = *(_QWORD **)(a1 + 240);
    *(_QWORD *)(a1 + 240) = a1 + 248;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    if (v12[1])
      v13 = (_QWORD *)v12[1];
    else
      v13 = v12;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 472));
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 448);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 596))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 596) = 0;
  }

}

void sub_1B7C77898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 592))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7C77954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 608));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 592) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7C77CB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40E18B10D7);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7C77E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7C780D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  char v18;

  v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v8 = 1;
    v9 = a6;
  }
  v13 = a5;
  v14 = v9;
  v15 = a7;
  v16 = a2;
  v17 = v8;
  v18 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  else
  {
    v11 = v7 <= a6;
    v12 = *(double *)(a1 + 40);
    if (v9 >= v12)
      v11 = 0;
    if (!v11 || a7 <= v12)
      v12 = a7;
    v14 = v9;
    v15 = v12;
    v17 = v11;
    if (v11)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 592))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7C78D58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7C78DF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D04C80;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_WORD *)(a1 + 600) = 1;
  *(_BYTE *)(a1 + 602) = 0;
  *(_BYTE *)(a1 + 604) = 0;
  *(_QWORD *)(a1 + 608) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_QWORD *)(a1 + 648) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D04C80;
  v2 = *(void **)(a1 + 632);
  if (v2)
  {
    *(_QWORD *)(a1 + 640) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 568);
  if (v3)
  {
    *(_QWORD *)(a1 + 576) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 600) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_configureForStartTime(a1);

}

void sub_1B7C78F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 608) = v4;
    v3 = v5;
  }

}

void sub_1B7C78FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 77, a2);
  v7 = a2;
  v4 = a1[77];
  v5 = a1[74];
  a1[74] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[74]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 272) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7C79160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[56];

  if (*(_BYTE *)(a1 + 600))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7C79208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 602))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 601))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 603))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 640);
    v18 = *(_QWORD *)(a1 + 648);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 632);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 640);
      v33 = *(char **)(a1 + 632);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 632);
      }
      *(_QWORD *)(a1 + 632) = v28;
      *(_QWORD *)(a1 + 640) = v21;
      *(_QWORD *)(a1 + 648) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 640) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7C7945C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 602))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 602) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 601))
    goto LABEL_5;
  v9 = *(void **)(a1 + 624);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_379);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 624);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 624);
  *(_QWORD *)(a1 + 624) = 0;

  *(_BYTE *)(a1 + 601) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 632);
    *(_QWORD *)(a1 + 648) = 0;
    *(_QWORD *)(a1 + 640) = 0;
    *(_QWORD *)(a1 + 632) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 632);
      v37 = *(__int128 **)(a1 + 640);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 640);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 640) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 632);
  v39 = *(_QWORD *)(a1 + 640);
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 576) != *(_QWORD *)(a1 + 568))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 576) != *(_QWORD *)(a1 + 568));
  }
  *(_BYTE *)(a1 + 602) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 604))
    {
      *(_BYTE *)(a1 + 604) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 602) = 0;
LABEL_83:

  return v7;
}

void sub_1B7C79B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 602) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 603) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 602))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 602))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 624);
    *(_QWORD *)(a1 + 624) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 601) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 601))
  {
    v8 = *(void **)(a1 + 624);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 624);
      *(_QWORD *)(a1 + 624) = v9;

      v8 = *(void **)(a1 + 624);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7C79E50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 600) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 600) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7C79F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 600) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 600), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsDiscrete>::archive((uint64_t)&v37, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(int **)(a1 + 360);
  if (v9 != (int *)(a1 + 368))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsDiscrete>::archive((uint64_t)&v37, v9 + 10);
      v10 = *((_QWORD *)v9 + 4);
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (int *)*((_QWORD *)v9 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(int **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (int *)*((_QWORD *)v9 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (int *)(a1 + 368));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 568);
  for (k = *(int8x16_t **)(a1 + 576); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7C7A308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t i;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  id v61;
  _QWORD *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  _BYTE v66[448];
  __int128 v67;
  __int128 v68;
  int8x16_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  int8x16_t v74;
  uint64_t v75;
  uint64_t v76[4];
  void *__p;
  char *v78;
  unint64_t v79;
  _BYTE v80[80];
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t **v84;
  uint64_t *v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  __int128 v95;
  __int128 v96;
  int v97;
  __int128 v98;
  __int128 v99;
  int v100;
  void (**v101)(statistics::StatisticsEngine *__hidden);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  _BYTE v108[32];
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;

  v61 = a2;
  *(_BYTE *)(a1 + 600) = objc_msgSend(v61, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v61;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket((uint64_t)v66, 0, -1.79769313e308, 1.79769313e308);
  v67 = 0u;
  v68 = 0u;
  v109 = 0;
  v64 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v108, (const unsigned __int8 *)objc_msgSend(v64, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v109));
  v63 = a1;
  v101 = &off_1E6D09A88;
  v102 = 0;
  v106 = 0;
  v104 = 0;
  v105 = 0;
  v107 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v101, (PB::Reader *)v108);
  v65 = v103;
  if (v102)
  {
    v73 = 0;
    memset(v76, 0, sizeof(v76));
    __p = 0;
    memset(&v80[8], 0, 66);
    v81 = 0u;
    v82 = 0u;
    LOWORD(v83) = 0;
    v86 = 0;
    v79 = 0;
    v78 = 0;
    *(_DWORD *)v80 = 0;
    v85 = 0;
    v84 = &v85;
    v87 = 0u;
    v88 = 0u;
    v89 = 1065353216;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0;
    v94 = 1065353216;
    v95 = 0u;
    v96 = 0u;
    v97 = 1065353216;
    v98 = 0u;
    v99 = 0u;
    v100 = 1065353216;
    v69 = vextq_s8(*(int8x16_t *)(v102 + 8), *(int8x16_t *)(v102 + 8), 8uLL);
    v4 = *(_QWORD *)(v102 + 72);
    v70 = *(_QWORD *)(v102 + 64);
    v71 = *(_BYTE *)(v102 + 185);
    v72 = *(_BYTE *)(v102 + 186);
    v74 = vextq_s8(*(int8x16_t *)(v102 + 24), *(int8x16_t *)(v102 + 24), 8uLL);
    v75 = v4;
    v6 = *(_QWORD *)(v102 + 80);
    v5 = *(_QWORD *)(v102 + 88);
    v62 = (_QWORD *)v102;
    if (v6 != v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v7 >= v79)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v79 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v79 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v78;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v78 = (char *)(v19 + 6);
          v79 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v78 = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    v23 = (_QWORD *)v62[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsDiscrete>::unarchive((uint64_t)&v110, v23);
      *(_OWORD *)&v80[64] = v114;
      v81 = v115;
      v82 = v116;
      v83 = v117;
      *(_OWORD *)v80 = v110;
      *(_OWORD *)&v80[16] = v111;
      *(_OWORD *)&v80[32] = v112;
      *(_OWORD *)&v80[48] = v113;
    }
    v24 = (_QWORD **)v62[17];
    v25 = (_QWORD **)v62[18];
    while (v24 != v25)
    {
      v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsDiscrete>::unarchive((uint64_t)&v110, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v85;
      v29 = &v85;
      v30 = &v85;
      if (v85)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_33;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_36;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_33:
      v33 = (char *)operator new(0xA0uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *((_QWORD *)v33 + 19) = 0;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v84)
      {
        v84 = (uint64_t **)*v84;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v85, v32);
      ++v86;
LABEL_36:
      v34 = v117;
      v35 = v116;
      v36 = v115;
      *(_OWORD *)(v33 + 104) = v114;
      *(_OWORD *)(v33 + 120) = v36;
      *(_OWORD *)(v33 + 136) = v35;
      v37 = v113;
      v38 = v112;
      v39 = v111;
      *(_OWORD *)(v33 + 40) = v110;
      *((_QWORD *)v33 + 19) = v34;
      *(_OWORD *)(v33 + 56) = v39;
      *(_OWORD *)(v33 + 72) = v38;
      ++v24;
      *(_OWORD *)(v33 + 88) = v37;
    }
    v40 = v62[5];
    for (i = v62[6]; v40 != i; v40 += 8)
    {
      v43 = *(double *)(*(_QWORD *)v40 + 8);
      v42 = *(double *)(*(_QWORD *)v40 + 16);
      if (v43 >= v42)
        v44 = *(double *)(*(_QWORD *)v40 + 16);
      else
        v44 = *(double *)(*(_QWORD *)v40 + 8);
      if (v42 < v43)
        v42 = *(double *)(*(_QWORD *)v40 + 8);
      HKIntervalMask<double>::_insertInterval(v76, v44, v42);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::operator=((uint64_t)v66, (uint64_t)&v69);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket((uint64_t)&v69);
  }
  v45 = v104;
  v46 = v105;
  if (v104 != v105)
  {
    v47 = *((_QWORD *)&v67 + 1);
    do
    {
      v48 = *(_QWORD *)(*(_QWORD *)v45 + 24);
      v49 = *(_QWORD *)(*(_QWORD *)v45 + 32);
      v50 = *(_QWORD *)(*(_QWORD *)v45 + 8);
      v51 = *(_QWORD *)(*(_QWORD *)v45 + 16);
      if (v47 >= (unint64_t)v68)
      {
        v52 = (void *)v67;
        v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v67) >> 3);
        v54 = v53 + 1;
        if (v53 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v68 - v67) >> 3) > v54)
          v54 = 0x999999999999999ALL * ((uint64_t)(v68 - v67) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v68 - v67) >> 3) >= 0x333333333333333)
          v55 = 0x666666666666666;
        else
          v55 = v54;
        if (v55)
        {
          v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
          v47 = *((_QWORD *)&v67 + 1);
          v52 = (void *)v67;
        }
        else
        {
          v56 = 0;
        }
        v57 = v55 + 40 * v53;
        *(_QWORD *)v57 = v49;
        *(_QWORD *)(v57 + 8) = v48;
        *(_QWORD *)(v57 + 16) = v50;
        *(_QWORD *)(v57 + 24) = v51;
        *(_WORD *)(v57 + 32) = 1;
        v58 = v57;
        if ((void *)v47 != v52)
        {
          do
          {
            v59 = *(_OWORD *)(v47 - 40);
            v60 = *(_OWORD *)(v47 - 24);
            *(_WORD *)(v58 - 8) = *(_WORD *)(v47 - 8);
            *(_OWORD *)(v58 - 24) = v60;
            *(_OWORD *)(v58 - 40) = v59;
            v58 -= 40;
            v47 -= 40;
          }
          while ((void *)v47 != v52);
          v52 = (void *)v67;
        }
        v47 = v57 + 40;
        *(_QWORD *)&v67 = v58;
        *((_QWORD *)&v67 + 1) = v57 + 40;
        *(_QWORD *)&v68 = v55 + 40 * v56;
        if (v52)
          operator delete(v52);
      }
      else
      {
        *(_QWORD *)v47 = v49;
        *(_QWORD *)(v47 + 8) = v48;
        *(_QWORD *)(v47 + 16) = v50;
        *(_QWORD *)(v47 + 24) = v51;
        *(_WORD *)(v47 + 32) = 1;
        v47 += 40;
      }
      *((_QWORD *)&v67 + 1) = v47;
      v45 += 8;
    }
    while (v45 != v46);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v101);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::operator=((_QWORD *)(v63 + 112), (uint64_t)&v65);
  if ((_QWORD)v67)
  {
    *((_QWORD *)&v67 + 1) = v67;
    operator delete((void *)v67);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket((uint64_t)v66);

}

void sub_1B7C7AA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3E8]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_WORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 456);
  if (v2)
  {
    *(_QWORD *)(a1 + 464) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 408);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 368);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 328);
  v2 = *(void **)(a1 + 304);
  if (v2)
  {
    *(_QWORD *)(a1 + 312) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 264);
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 248));
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[448];
  uint64_t v18;
  _BYTE v19[448];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[384];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 616));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 600) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7C7AF18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 57), (__n128 *)(a2 + 456));
  v4 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a2 + 480) = 0;
  v5 = (void *)a1[60];
  a1[60] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  _QWORD *v41;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 184);
  v13 = *(_OWORD *)(a2 + 200);
  v14 = *(_OWORD *)(a2 + 216);
  v15 = *(_QWORD *)(a2 + 232);
  v16 = *(_OWORD *)(a2 + 120);
  v17 = *(_OWORD *)(a2 + 136);
  v18 = *(_OWORD *)(a2 + 152);
  v19 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 248) = 0;
  v20 = (_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 168) = v19;
  *(_OWORD *)(a1 + 152) = v18;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 120) = v16;
  *(_QWORD *)(a1 + 232) = v15;
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(a1 + 200) = v13;
  *(_OWORD *)(a1 + 184) = v12;
  *(_QWORD *)(a1 + 256) = 0;
  v21 = *(_QWORD **)(a2 + 240);
  if (v21 != (_QWORD *)(a2 + 248))
  {
    v22 = 0;
    v23 = (_QWORD *)(a1 + 248);
    while (1)
    {
      v24 = v21[4];
      v25 = (_QWORD *)(a1 + 248);
      if (v23 == v20)
        goto LABEL_12;
      v26 = v22;
      v27 = (_QWORD *)(a1 + 248);
      if (v22)
      {
        do
        {
          v25 = v26;
          v26 = (_QWORD *)v26[1];
        }
        while (v26);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v27[2];
          v28 = *v25 == (_QWORD)v27;
          v27 = v25;
        }
        while (v28);
      }
      if (v25[4] < v24)
      {
LABEL_12:
        if (v22)
          v29 = (uint64_t **)v25;
        else
          v29 = (uint64_t **)(a1 + 248);
        if (v22)
          v30 = (uint64_t **)(v25 + 1);
        else
          v30 = (uint64_t **)(a1 + 248);
        if (!*v30)
        {
LABEL_28:
          v33 = (uint64_t *)operator new(0xA0uLL);
          v34 = *((_OWORD *)v21 + 2);
          v35 = *((_OWORD *)v21 + 3);
          v36 = *((_OWORD *)v21 + 5);
          *((_OWORD *)v33 + 4) = *((_OWORD *)v21 + 4);
          *((_OWORD *)v33 + 5) = v36;
          *((_OWORD *)v33 + 2) = v34;
          *((_OWORD *)v33 + 3) = v35;
          v37 = *((_OWORD *)v21 + 6);
          v38 = *((_OWORD *)v21 + 7);
          v39 = *((_OWORD *)v21 + 9);
          *((_OWORD *)v33 + 8) = *((_OWORD *)v21 + 8);
          *((_OWORD *)v33 + 9) = v39;
          *((_OWORD *)v33 + 6) = v37;
          *((_OWORD *)v33 + 7) = v38;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 240), (uint64_t)v29, v30, v33);
        }
      }
      else
      {
        v30 = (uint64_t **)(a1 + 248);
        v29 = (uint64_t **)(a1 + 248);
        if (!v22)
          goto LABEL_28;
        v31 = v22;
        while (1)
        {
          while (1)
          {
            v29 = (uint64_t **)v31;
            v32 = v31[4];
            if (v32 <= v24)
              break;
            v31 = *v29;
            v30 = v29;
            if (!*v29)
              goto LABEL_28;
          }
          if (v32 >= v24)
            break;
          v31 = v29[1];
          if (!v31)
          {
            v30 = v29 + 1;
            goto LABEL_28;
          }
        }
      }
      v40 = (_QWORD *)v21[1];
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = (_QWORD *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (_QWORD *)v21[2];
          v28 = *v41 == (_QWORD)v21;
          v21 = v41;
        }
        while (!v28);
      }
      if (v41 == (_QWORD *)(a2 + 248))
        break;
      v22 = (_QWORD *)*v20;
      v23 = *(_QWORD **)(a1 + 240);
      v21 = v41;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 264, a2 + 264);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 304), *(const void **)(a2 + 304), *(_QWORD *)(a2 + 312), (uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 328, a2 + 328);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 368, a2 + 368);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 408, a2 + 408);
  return a1;
}

void sub_1B7C7B2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  v19 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 312) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 200);
  v11 = *(_OWORD *)(a2 + 216);
  v12 = *(_QWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 216) = v11;
  *(_OWORD *)(a1 + 200) = v10;
  v13 = *(_OWORD *)(a2 + 120);
  v14 = *(_OWORD *)(a2 + 136);
  v15 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v15;
  *(_OWORD *)(a1 + 136) = v14;
  *(_OWORD *)(a1 + 120) = v13;
  v16 = a1 + 248;
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 248));
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v17 = (_QWORD *)(a2 + 248);
  v18 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 248) = v18;
  v19 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 256) = v19;
  if (v19)
  {
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)(a2 + 240) = v17;
    *v17 = 0;
    *(_QWORD *)(a2 + 256) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 240) = v16;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 264, (uint64_t *)(a2 + 264));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 304, (__n128 *)(a2 + 304));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 328, (uint64_t *)(a2 + 328));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  unint64_t v2;
  int8x8_t prime;
  double v5;
  id v6;
  double *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id WeakRetained;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  id v46;
  void *v47;
  char v48;
  float v49;
  _BOOL8 v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  _QWORD **v56;
  unint64_t v57;
  uint8x8_t v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t v61;
  _QWORD *i;
  unint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  void *v76;
  uint64_t **v77;
  uint64_t *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  double v83;
  double v84;
  void *v85;
  void *v86;
  _QWORD *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  int v92;
  void *v93;
  void *v94;
  int v95;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  unint64_t v102;
  id v103;
  uint64_t v105;
  id v106;
  id v107;
  void *v108;
  uint64_t v109;
  void *__p[2];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  _QWORD v118[3];
  _QWORD *v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = objc_alloc(MEMORY[0x1E0C99D68]);
  v7 = a2 + 5;
  if (v5 != -1.79769313e308)
    v7 = a2;
  v105 = (uint64_t)a2;
  v106 = (id)objc_msgSend(v6, "initWithTimeIntervalSinceReferenceDate:", *v7);
  if (a2[1] == 1.79769313e308)
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v9 = (void *)v8;
  v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = *(id *)(a1 + 16);
    if (objc_msgSend(v11, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v11, "underlyingSampleType");
      v12 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v12;
    }

  }
  v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v10, v106, v9);
  v14 = a1;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    prime = (int8x8_t)(a1 + 48);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v2 = (unint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v16 = *(uint64_t **)(v105 + 304);
      v17 = *(uint64_t **)(v105 + 312);
      while (v16 != v17)
      {
        v18 = *v16;
        v19 = objc_loadWeakRetained(*(id **)&prime);
        objc_msgSend(v19, "sourceForSourceID:", v18);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
        {
          if ((objc_msgSend((id)v2, "containsObject:", v20) & 1) == 0)
            objc_msgSend((id)v2, "addObject:", v20);
        }

        ++v16;
      }
      prime = (int8x8_t)objc_msgSend((id)v2, "copy");
      objc_msgSend((id)v13, "_setSources:", *(_QWORD *)&prime);

      v14 = a1;
    }
  }

  v118[0] = &off_1E6D04D50;
  v119 = v118;
  v107 = (id)v13;
  v109 = *(_QWORD *)(v14 + 24);
  v21 = *(_OWORD *)(v105 + 200);
  v114 = *(_OWORD *)(v105 + 184);
  v115 = v21;
  v116 = *(_OWORD *)(v105 + 216);
  v117 = *(_QWORD *)(v105 + 232);
  v22 = *(_OWORD *)(v105 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v105 + 120);
  v111 = v22;
  v23 = *(_OWORD *)(v105 + 168);
  v112 = *(_OWORD *)(v105 + 152);
  v113 = v23;
  if (!v119)
    std::__throw_bad_function_call[abi:ne180100]();
  v24 = (double *)(*(uint64_t (**)(_QWORD *, void **))(*v119 + 48))(v119, __p);
  v26 = *v24;
  v25 = v24[1];
  v27 = v24[2];
  v28 = *((_QWORD *)v24 + 3);
  v30 = v24[4];
  v29 = v24[5];
  v31 = v24[6];
  v32 = *(_QWORD *)(a1 + 24);
  v33 = _HKStatisticsOptionBaselineRelativeQuantities();
  v34 = *(void **)(a1 + 16);
  if ((v33 & v32) != 0)
    objc_msgSend(v34, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v34, "canonicalUnit");
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v109 & 2) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v108, v26);
    v13 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v107, "setAverageQuantity:", v13);

  }
  if ((v109 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v108, v27);
    v13 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v107, "setMinimumQuantity:", v13);

  }
  if ((v109 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v108, v25);
    v13 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v107, "setMaximumQuantity:", v13);

  }
  if ((v109 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v108, v30);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v107, "setMostRecentQuantity:", v35);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v29, v31);
    v13 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v107, "setMostRecentQuantityDateInterval:", v13);

  }
  objc_msgSend(v107, "setDataCount:", v28);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_163;
  if ((v109 & 2) != 0)
    v101 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v101 = 0;
  if ((v109 & 4) != 0)
    v100 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v100 = 0;
  if ((v109 & 8) != 0)
    v98 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v98 = 0;
  if ((v109 & 0x20) != 0)
  {
    v97 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v99 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v99 = 0;
    v97 = 0;
  }
  v103 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)__p = 0u;
  v111 = 0u;
  LODWORD(v112) = 1065353216;
  v36 = *(_QWORD **)(v105 + 240);
  if (v36 == (_QWORD *)(v105 + 248))
    goto LABEL_154;
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_bundleIdentifierForSourceID(v105, v36[4]);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = v37;
    if (!v37)
      goto LABEL_121;
    v39 = objc_msgSend(v37, "hash");
    v40 = v39;
    v41 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_64;
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v42.i16[0] = vaddlv_u8(v42);
    v43 = v42.u32[0];
    if (v42.u32[0] > 1uLL)
    {
      v2 = v39;
      if ((void *)v39 >= __p[1])
        v2 = v39 % (unint64_t)__p[1];
    }
    else
    {
      v2 = ((unint64_t)__p[1] - 1) & v39;
    }
    v44 = (uint64_t *)*((_QWORD *)__p[0] + v2);
    if (!v44 || (v13 = *v44) == 0)
    {
LABEL_64:
      v13 = (uint64_t)operator new(0x90uLL);
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = v40;
      *(_QWORD *)(v13 + 16) = v38;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_QWORD *)(v13 + 136) = 0;
      v49 = (float)(unint64_t)(*((_QWORD *)&v111 + 1) + 1);
      if (v41 && (float)(*(float *)&v112 * (float)v41) >= v49)
      {
LABEL_110:
        v64 = __p[0];
        v65 = (uint64_t *)*((_QWORD *)__p[0] + v2);
        if (v65)
        {
          *(_QWORD *)v13 = *v65;
        }
        else
        {
          *(_QWORD *)v13 = v111;
          *(_QWORD *)&v111 = v13;
          v64[v2] = &v111;
          if (!*(_QWORD *)v13)
          {
LABEL_119:
            ++*((_QWORD *)&v111 + 1);
            goto LABEL_120;
          }
          v66 = *(_QWORD *)(*(_QWORD *)v13 + 8);
          if ((v41 & (v41 - 1)) != 0)
          {
            if (v66 >= v41)
              v66 %= v41;
          }
          else
          {
            v66 &= v41 - 1;
          }
          v65 = (uint64_t *)((char *)__p[0] + 8 * v66);
        }
        *v65 = v13;
        goto LABEL_119;
      }
      v50 = (v41 & (v41 - 1)) != 0;
      if (v41 < 3)
        v50 = 1;
      v51 = v50 | (2 * v41);
      v52 = vcvtps_u32_f32(v49 / *(float *)&v112);
      if (v51 <= v52)
        prime = (int8x8_t)v52;
      else
        prime = (int8x8_t)v51;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v41 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_76;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v59 = vcvtps_u32_f32((float)*((unint64_t *)&v111 + 1) / *(float *)&v112);
        if (__p[1] < (void *)3
          || (v60 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
        {
          v59 = std::__next_prime(v59);
        }
        else
        {
          v61 = 1 << -(char)__clz(v59 - 1);
          if (v59 >= 2)
            v59 = v61;
        }
        if (*(_QWORD *)&prime <= v59)
          prime = (int8x8_t)v59;
        if (*(_QWORD *)&prime >= v41)
        {
          v41 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_76:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v53 = operator new(8 * *(_QWORD *)&prime);
            v54 = __p[0];
            __p[0] = v53;
            if (v54)
              operator delete(v54);
            v55 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v55++) = 0;
            while (*(_QWORD *)&prime != v55);
            v56 = (_QWORD **)v111;
            if ((_QWORD)v111)
            {
              v57 = *(_QWORD *)(v111 + 8);
              v58 = (uint8x8_t)vcnt_s8(prime);
              v58.i16[0] = vaddlv_u8(v58);
              if (v58.u32[0] > 1uLL)
              {
                if (v57 >= *(_QWORD *)&prime)
                  v57 %= *(_QWORD *)&prime;
              }
              else
              {
                v57 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v57) = &v111;
              for (i = *v56; i; v57 = v63)
              {
                v63 = i[1];
                if (v58.u32[0] > 1uLL)
                {
                  if (v63 >= *(_QWORD *)&prime)
                    v63 %= *(_QWORD *)&prime;
                }
                else
                {
                  v63 &= *(_QWORD *)&prime - 1;
                }
                if (v63 != v57)
                {
                  if (!*((_QWORD *)__p[0] + v63))
                  {
                    *((_QWORD *)__p[0] + v63) = v56;
                    goto LABEL_101;
                  }
                  *v56 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v63);
                  **((_QWORD **)__p[0] + v63) = i;
                  i = v56;
                }
                v63 = v57;
LABEL_101:
                v56 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v41 = (unint64_t)prime;
            goto LABEL_105;
          }
          v76 = __p[0];
          __p[0] = 0;
          if (v76)
            operator delete(v76);
          v41 = 0;
          __p[1] = 0;
        }
      }
LABEL_105:
      if ((v41 & (v41 - 1)) != 0)
      {
        if (v40 >= v41)
          v2 = v40 % v41;
        else
          v2 = v40;
      }
      else
      {
        v2 = (v41 - 1) & v40;
      }
      goto LABEL_110;
    }
    v102 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v45 = *(_QWORD *)(v13 + 8);
      if (v45 == v40)
        break;
      if (v43 > 1)
      {
        if (v45 >= v41)
          v45 %= v41;
      }
      else
      {
        v45 &= v102;
      }
      if (v45 != v2)
        goto LABEL_64;
LABEL_63:
      v13 = *(_QWORD *)v13;
      if (!v13)
        goto LABEL_64;
    }
    prime = (int8x8_t)*(id *)(v13 + 16);
    v46 = v38;
    v47 = v46;
    if ((id)prime != v46)
    {
      v48 = objc_msgSend(*(id *)&prime, "isEqualToString:", v46);

      if ((v48 & 1) != 0)
        goto LABEL_120;
      goto LABEL_63;
    }

LABEL_120:
    v67 = *(_OWORD *)(v36 + 5);
    v68 = *(_OWORD *)(v36 + 7);
    v69 = *(_OWORD *)(v36 + 9);
    *(_OWORD *)(v13 + 72) = *(_OWORD *)(v36 + 11);
    *(_OWORD *)(v13 + 56) = v69;
    *(_OWORD *)(v13 + 40) = v68;
    *(_OWORD *)(v13 + 24) = v67;
    v70 = *(_OWORD *)(v36 + 13);
    v71 = *(_OWORD *)(v36 + 15);
    v72 = *(_OWORD *)(v36 + 17);
    *(_QWORD *)(v13 + 136) = v36[19];
    *(_OWORD *)(v13 + 120) = v72;
    *(_OWORD *)(v13 + 104) = v71;
    *(_OWORD *)(v13 + 88) = v70;

LABEL_121:
    v73 = (_QWORD *)v36[1];
    if (v73)
    {
      do
      {
        v74 = v73;
        v73 = (_QWORD *)*v73;
      }
      while (v73);
    }
    else
    {
      do
      {
        v74 = (_QWORD *)v36[2];
        v75 = *v74 == (_QWORD)v36;
        v36 = v74;
      }
      while (!v75);
    }
    v36 = v74;
  }
  while (v74 != (_QWORD *)(v105 + 248));
  v77 = (uint64_t **)v111;
  if ((_QWORD)v111)
  {
    prime = (int8x8_t)0x1E0CB6000uLL;
    do
    {
      v78 = v77[2];
      if ((v109 & 2) != 0)
      {
        if (!v119)
          goto LABEL_184;
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v108, *(double *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v119 + 48))(v119, (uint64_t *)v77 + 3));
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v101, "setObject:forKeyedSubscript:", v79, v78);

      }
      if ((v109 & 4) != 0)
      {
        if (!v119)
          goto LABEL_184;
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v108, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v119 + 48))(v119, (uint64_t *)v77 + 3) + 16));
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v100, "setObject:forKeyedSubscript:", v80, v78);

      }
      if ((v109 & 8) != 0)
      {
        if (!v119)
          goto LABEL_184;
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v108, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v119 + 48))(v119, (uint64_t *)v77 + 3) + 8));
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "setObject:forKeyedSubscript:", v81, v78);

      }
      if ((v109 & 0x20) != 0)
      {
        if (!v119)
          std::__throw_bad_function_call[abi:ne180100]();
        v82 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v119 + 48))(v119, (uint64_t *)v77 + 3);
        v83 = *(double *)(v82 + 40);
        v84 = *(double *)(v82 + 48);
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v108, *(double *)(v82 + 32));
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v97, "setObject:forKeyedSubscript:", v85, v78);

        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v83, v84);
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v99, "setObject:forKeyedSubscript:", v86, v78);

      }
      if (!v119)
LABEL_184:
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v119 + 48))(v119, (uint64_t *)v77 + 3) + 24));
      v13 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v103, "setObject:forKeyedSubscript:", v13, v78);

      v77 = (uint64_t **)*v77;
    }
    while (v77);
  }
LABEL_154:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  if ((v109 & 2) != 0)
    objc_msgSend(v107, "setAverageQuantityBySource:", v101);
  if ((v109 & 4) != 0)
    objc_msgSend(v107, "setMinimumQuantityBySource:", v100);
  if ((v109 & 8) != 0)
    objc_msgSend(v107, "setMaximumQuantityBySource:", v98);
  if ((v109 & 0x20) != 0)
  {
    objc_msgSend(v107, "setMostRecentQuantityBySource:", v97);
    objc_msgSend(v107, "setMostRecentQuantityDateIntervalBySource:", v99);
  }
  objc_msgSend(v107, "setDataCountBySource:", v103);

LABEL_163:
  v87 = v119;
  if (v119 == v118)
  {
    v88 = 4;
    v87 = v118;
LABEL_167:
    (*(void (**)(void))(*v87 + 8 * v88))();
  }
  else if (v119)
  {
    v88 = 5;
    goto LABEL_167;
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v107, "averageQuantity");
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  if (v90)
  {
    objc_msgSend(v107, "averageQuantity");
    v13 = objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend((id)v13, "isCompatibleWithUnit:", v89) & 1) == 0)
    {

      goto LABEL_182;
    }
  }
  objc_msgSend(v107, "minimumQuantity");
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  if (v91)
  {
    objc_msgSend(v107, "minimumQuantity");
    prime = (int8x8_t)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(*(id *)&prime, "isCompatibleWithUnit:", v89))
    {
      v92 = 1;
      goto LABEL_176;
    }
  }
  objc_msgSend(v107, "maximumQuantity");
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  if (v93)
  {
    objc_msgSend(v107, "maximumQuantity");
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    v95 = objc_msgSend(v94, "isCompatibleWithUnit:", v89);

    v92 = v95 ^ 1;
    if (v91)
      goto LABEL_176;
LABEL_180:
    if (!v90)
      goto LABEL_181;
LABEL_177:

    if ((v92 & 1) == 0)
      goto LABEL_183;
LABEL_182:
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v89);
    goto LABEL_183;
  }
  v92 = 0;
  if (!v91)
    goto LABEL_180;
LABEL_176:

  if (v90)
    goto LABEL_177;
LABEL_181:

  if (v92)
    goto LABEL_182;
LABEL_183:

  return v107;
}

void sub_1B7C7C29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 152);
  if (v25 == (_QWORD *)(v23 - 176))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 176);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 288);
  v2 = *(_QWORD *)(a1 + 304);
  if (v1 != (*(_QWORD *)(a1 + 312) - v2) >> 3)
  {
    v4 = (void **)(a1 + 304);
    *(_QWORD *)(a1 + 312) = v2;
    std::vector<long long>::reserve((void **)(a1 + 304), v1);
    v5 = *(_QWORD **)(a1 + 280);
    if (v5)
    {
      v6 = *(char **)(a1 + 312);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 320);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 304);
            v6 = *(char **)(a1 + 312);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 304) = v16;
          *(_QWORD *)(a1 + 312) = v9;
          *(_QWORD *)(a1 + 320) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 312) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7C7C6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  _QWORD *v6;
  double *v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  char v16;
  double v17;
  int v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double *j;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  id WeakRetained;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  unint64_t v55;
  uint64_t **v56;
  char v57;
  double *v58;
  __int128 v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  _OWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  double var2;
  double *i;
  unint64_t var3;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  char *v77;
  _OWORD *v78;
  __int128 v79;
  __int128 v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  unint64_t v85;
  uint64_t **v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  BOOL v90;
  __int128 v91;
  char *v92;
  double v93;
  void *v94;
  void *v95;
  id *location;
  id v97;
  uint64_t v98;
  int64_t v99;
  char **v100;
  uint64_t v101;
  HDRawQuantitySample v102;
  __int128 v103;
  __int128 v104;
  __int16 v105;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v100 = (char **)(a1 + 96);
    v98 = a1 + 120;
    location = (id *)(a1 + 88);
    v6 = (_QWORD *)(a1 + 248);
    do
    {
      v7 = *(double **)(a1 + 96);
      v8 = *(__int128 **)(a1 + 104);
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          v30 = a2;
          v31 = a2;
          v32 = v5;
          v33 = *(_QWORD *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              v34 = *(double *)(v33 + 8);
              v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31)
                v31 = *(double *)(v33 + 8);
              if (v35 > v5)
                v37 = *(double *)(v33 + 16);
              else
                v37 = v30;
              if (v35 < v30)
              {
                v32 = v5;
                v30 = v37;
              }
              v33 += 48;
            }
            while ((__int128 *)v33 != v8);
          }
          if (v30 >= v31)
            v38 = v31;
          else
            v38 = v30;
          v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            v40 = v39 * floor(v38 / v39);
            v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41)
              v38 = v40;
            else
              v38 = v41;
          }
          *v100 = 0;
          v100[1] = 0;
          v100[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            v45 = *(char **)(a1 + 96);
            v44 = *(char **)(a1 + 104);
            v46 = v42;
            if (v44 != v45)
            {
              do
              {
                v47 = *((_OWORD *)v44 - 3);
                v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              v44 = *v100;
            }
            *(_QWORD *)(a1 + 96) = v46;
            *(_QWORD *)(a1 + 104) = v42;
            *(_QWORD *)(a1 + 112) = &v42[48 * v43];
            if (v44)
              operator delete(v44);
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v102.var0 = a1;
            v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8)
              v51 = 0;
            else
              v51 = v50;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*,false>((uint64_t)v7, v8, (uint64_t)&v102, v51, 1);
          }
          if (*(_BYTE *)(a1 + 25))
            v97 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v97 = 0;
          if (v7 == (double *)v8)
          {
LABEL_135:
            v87 = *(_QWORD **)(a1 + 240);
            if (v87 != v6)
            {
              do
              {
                v88 = (_QWORD *)v87[1];
                if (v88)
                {
                  do
                  {
                    v89 = v88;
                    v88 = (_QWORD *)*v88;
                  }
                  while (v88);
                }
                else
                {
                  do
                  {
                    v89 = (_QWORD *)v87[2];
                    v90 = *v89 == (_QWORD)v87;
                    v87 = v89;
                  }
                  while (!v90);
                }
                v87 = v89;
              }
              while (v89 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7)
              operator delete(v7);
            goto LABEL_149;
          }
          v99 = 0;
          v57 = 0;
          v58 = v7;
          while (2)
          {
            v59 = *((_OWORD *)v58 + 1);
            *(_OWORD *)&v102.var0 = *(_OWORD *)v58;
            *(_OWORD *)&v102.var2 = v59;
            *(double *)&v102.var4 = v58[4];
            if (!v102.var4 || v102.var1 > v38)
            {
              v60 = *(_OWORD **)(a1 + 104);
              v61 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v60 >= v61)
              {
                v65 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - *v100) >> 4);
                v66 = v65 + 1;
                if (v65 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (_QWORD)*v100) >> 4);
                if (2 * v67 > v66)
                  v66 = 2 * v67;
                if (v67 >= 0x2AAAAAAAAAAAAAALL)
                  v68 = 0x555555555555555;
                else
                  v68 = v66;
                if (v68)
                  v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v68);
                else
                  v69 = 0;
                v73 = (_OWORD *)(v68 + 48 * v65);
                v74 = *(_OWORD *)v58;
                v75 = *((_OWORD *)v58 + 2);
                v73[1] = *((_OWORD *)v58 + 1);
                v73[2] = v75;
                *v73 = v74;
                v77 = *(char **)(a1 + 96);
                v76 = *(char **)(a1 + 104);
                v78 = v73;
                if (v76 != v77)
                {
                  do
                  {
                    v79 = *((_OWORD *)v76 - 3);
                    v80 = *((_OWORD *)v76 - 2);
                    *(_OWORD *)((char *)v78 - 21) = *(_OWORD *)(v76 - 21);
                    *(v78 - 3) = v79;
                    *(v78 - 2) = v80;
                    v78 -= 3;
                    v76 -= 48;
                  }
                  while (v76 != v77);
                  v76 = *v100;
                }
                v64 = v73 + 3;
                *(_QWORD *)(a1 + 96) = v78;
                *(_QWORD *)(a1 + 104) = v73 + 3;
                *(_QWORD *)(a1 + 112) = v68 + 48 * v69;
                if (v76)
                  operator delete(v76);
              }
              else
              {
                v62 = *(_OWORD *)v58;
                v63 = *((_OWORD *)v58 + 2);
                v60[1] = *((_OWORD *)v58 + 1);
                v60[2] = v63;
                *v60 = v62;
                v64 = v60 + 3;
              }
              *(_QWORD *)(a1 + 104) = v64;
LABEL_134:
              v58 += 6;
              if (v58 == (double *)v8)
                goto LABEL_135;
              continue;
            }
            break;
          }
          var2 = v102.var2;
          if (v102.var2 > v38)
            var2 = v38;
          v102.var2 = var2;
          for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v102.var1 >= *i; i += 2)
          {
            if (v102.var1 < i[1])
              goto LABEL_134;
          }
          if ((v57 & 1) != 0)
          {
            var3 = v102.var3;
            if (v99 == v102.var3 || *(_BYTE *)(a1 + 24))
              HDStatisticsRelative<HDStatisticsDiscrete>::addSample(v98, &v102);
          }
          else
          {
            HDStatisticsRelative<HDStatisticsDiscrete>::addSample(v98, &v102);
            var3 = v102.var3;
            v99 = v102.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_133;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_bundleIdentifierForSourceID(a1, var3);
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v81)
            goto LABEL_132;
          objc_msgSend(v97, "objectForKeyedSubscript:", v81);
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          v83 = v82;
          if (v82)
          {
            if (objc_msgSend(v82, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_131:

LABEL_132:
LABEL_133:
              v57 = 1;
              goto LABEL_134;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v97, "setObject:forKeyedSubscript:", v84, v81);

          }
          v85 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_canonicalSourceIDForSourceID(a1, var3);
          v86 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(a1, v85);
          HDStatisticsRelative<HDStatisticsDiscrete>::addSample((uint64_t)v86, &v102);
          goto LABEL_131;
        }
        v10 = *((unsigned __int8 *)v7 + 42);
        v11 = *((unsigned __int8 *)v7 + 41);
        v12 = *((unsigned __int8 *)v7 + 40);
        v13 = v7[1];
        v14 = v7[2];
        v15 = *((_QWORD *)v7 + 3);
        v16 = *((_BYTE *)v7 + 33);
        if (v14 <= a2)
          v17 = v7[2];
        else
          v17 = a2;
        if (v13 < a2)
          v18 = *((unsigned __int8 *)v7 + 32);
        else
          v18 = 0;
        if (v13 < a2)
          v19 = 0;
        else
          v19 = *((_BYTE *)v7 + 33);
        if (v13 < a2)
        {
          v20 = 0;
        }
        else
        {
          v17 = v7[2];
          v20 = *((_QWORD *)v7 + 3);
        }
        if (v13 < a2)
          v21 = 0.0;
        else
          v21 = v7[2];
        if (v13 < a2)
          v22 = 0.0;
        else
          v22 = *v7;
        if (v13 < a2)
          v23 = 0.0;
        else
          v23 = v7[1];
        if (v13 < a2)
          v24 = 0;
        else
          v24 = *((unsigned __int8 *)v7 + 32);
        if (*((_BYTE *)v7 + 32))
        {
          v14 = v17;
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
        }
        if (*((_BYTE *)v7 + 32))
          v25 = v21;
        else
          v25 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v26 = v22;
        else
          v26 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v27 = v23;
        else
          v27 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v28 = v24;
        else
          v28 = 0;
        v102.var0 = *v7;
        v102.var1 = v13;
        v102.var2 = v14;
        v102.var3 = v15;
        v102.var4 = v18;
        v102.var5 = v16;
        *(_DWORD *)(&v102.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v102.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&v103 = v26;
        *((double *)&v103 + 1) = v27;
        *(double *)&v104 = v25;
        *((_QWORD *)&v104 + 1) = v20;
        LOBYTE(v105) = v28;
        HIBYTE(v105) = v19;
        for (j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            v52 = v12 != 0;
            v53 = v11 != 0;
            v54 = v10 != 0;
            goto LABEL_145;
          }
        }
        v52 = v12 != 0;
        v53 = v11 != 0;
        v54 = v10 != 0;
        if (v18)
        {
          HDStatisticsRelative<HDStatisticsDiscrete>::addSample(v98, &v102);
          if (*(_BYTE *)(a1 + 25))
          {
            v55 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_canonicalSourceIDForSourceID(a1, v15);
            v56 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(a1, v55);
            HDStatisticsRelative<HDStatisticsDiscrete>::addSample((uint64_t)v56, &v102);
          }
          v52 = 1;
          v53 = 1;
          v54 = 1;
        }
LABEL_145:
        if (v28)
        {
          LOWORD(v101) = v105;
          v91 = v104;
          v92 = *v100;
          *(_OWORD *)v92 = v103;
          *((_OWORD *)v92 + 1) = v91;
          *((_QWORD *)v92 + 4) = v101;
          v92[40] = v52;
          v92[41] = v53;
          v92[42] = v54;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_149:
      v93 = *(double *)(a1 + 56);
      if (v93 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsDiscrete>]");
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v94, "handleFailureInFunction:file:lineNumber:description:", v95, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v93 = *(double *)(a1 + 56);
      }
      v5 = v93;
    }
    while (v93 < a2);
  }
}

void sub_1B7C7CE54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsRelative<HDStatisticsDiscrete>::addSample(uint64_t result, const HDRawQuantitySample *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int v6;

  v2 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v2 = 1;
  if (v2)
  {
    if (v2 == 1)
    {
      if (!*(_DWORD *)result)
      {
        *(_OWORD *)(result + 24) = 0u;
        *(_OWORD *)(result + 8) = 0u;
        v4 = result + 8;
        v5 = *(_OWORD *)(result + 96);
        *(_OWORD *)(result + 40) = *(_OWORD *)(result + 80);
        v6 = 1;
        goto LABEL_16;
      }
    }
    else if (v2 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        v3 = result + 8;
        return HDStatisticsDiscrete::addSample(v3, a2);
      }
      *(_OWORD *)(result + 24) = 0u;
      *(_OWORD *)(result + 8) = 0u;
      v4 = result + 8;
      v5 = *(_OWORD *)(result + 96);
      *(_OWORD *)(result + 40) = *(_OWORD *)(result + 80);
      v6 = 2;
LABEL_16:
      *(_DWORD *)result = v6;
      *(_QWORD *)(result + 72) = 0;
      *(_WORD *)(result + 72) = *(_WORD *)(result + 112);
      *(_OWORD *)(result + 56) = v5;
      v3 = v4;
      return HDStatisticsDiscrete::addSample(v3, a2);
    }
  }
  else if (!*(_DWORD *)result && !*(_QWORD *)(result + 32))
  {
    v3 = result + 8;
    return HDStatisticsDiscrete::addSample(v3, a2);
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v12;

  v12 = a2;
  v5 = *(_QWORD **)(a1 + 248);
  v3 = (uint64_t **)(a1 + 248);
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = (uint64_t **)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    v6 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 328), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 368);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7C7D0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 408);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7C7D1B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0xA0uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *((_QWORD *)v9 + 19) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 304);
  v7 = *(char **)(*(_QWORD *)a4 + 312);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 304);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 304);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 312);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 304);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 312);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 304);
      v15 = *(char **)(*(_QWORD *)a4 + 312);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 312);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 312);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 304);
          v25 = *(char **)(*(_QWORD *)a4 + 312);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 312);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 312);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 304);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 304);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 312);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 304);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 312);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 304);
      v41 = *(char **)(*(_QWORD *)a4 + 312);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 312);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 312);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 304);
      v11 = *(char **)(*(_QWORD *)a3 + 312);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 312);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 312);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 304);
      v24 = *(char **)(*(_QWORD *)a3 + 312);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 312);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 312);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 304);
            v31 = *(char **)(*(_QWORD *)a3 + 312);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 312);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 312);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 304);
    v14 = *(char **)(*(_QWORD *)a5 + 312);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 312);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 312);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 304);
        v23 = *(char **)(*(_QWORD *)a5 + 312);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 312);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 312);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 304);
            v32 = *(char **)(*(_QWORD *)a5 + 312);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 312);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 312);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 304);
    v16 = *(char **)(*(_QWORD *)a6 + 312);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 312);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 312);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 304);
        v25 = *(char **)(*(_QWORD *)a6 + 312);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 312);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 312);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 304);
            v34 = *(char **)(*(_QWORD *)a6 + 312);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 312);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 312);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 304);
                v43 = *(char **)(*(_QWORD *)a6 + 312);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 312);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 312);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table(uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D04D50;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D04D50;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 600))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7C7F228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 600))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 576);
      v7 = *(_QWORD *)(a1 + 568);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7C7F4B0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  char v10;
  double v11;
  _BOOL4 v12;
  double v14;
  char *v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t **v49;

  v3 = *(_BYTE *)(a2 + 32);
  if (v3)
  {
    v5 = a1 + 8;
    v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      v7 = *(uint64_t **)a2;
      v8 = *(double *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_BYTE *)(a2 + 33);
      v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36))
        v12 = v6 < v11;
      else
        v12 = v6 <= v11;
      if (v12)
      {
        if (v8 <= v11)
          v14 = *(double *)(a2 + 16);
        else
          v14 = *(double *)(a1 + 16);
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 272, *(_QWORD *)(a2 + 24), v9);
        v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 160) <= 0)
        {
          v33 = *(double *)(a1 + 8);
          v34 = *(double *)(a1 + 16);
          if (v6 >= v33)
            v33 = v6;
          if (v34 >= v14)
            v34 = v14;
          *(double *)(a1 + 48) = v33;
          *(double *)(a1 + 56) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            v16 = *(double *)(a1 + 8);
            if (v6 >= v16)
              v16 = v6;
            *(double *)(a1 + 48) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            v17 = *(double *)(a1 + 16);
            if (v17 >= v14)
              v17 = v14;
            *(double *)(a1 + 56) = v17;
          }
        }
        if (*(_BYTE *)(a1 + 32))
        {
          v35 = *(double *)(a1 + 64);
          if (v6 < v35)
            v35 = v6;
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime(v5, v6);
          v15 = *(char **)(a1 + 112);
        }
        v36 = *(_QWORD *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          v38 = 0x555555555555555;
          v39 = *(char **)(a1 + 104);
          v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v39) >> 4);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 < 0x2AAAAAAAAAAAAAALL)
            v38 = v41;
          if (v38)
          {
            v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            v39 = *(char **)(a1 + 104);
            v15 = *(char **)(a1 + 112);
          }
          else
          {
            v43 = 0;
          }
          v44 = v38 + 48 * v40;
          *(_QWORD *)v44 = v7;
          *(double *)(v44 + 8) = v6;
          *(double *)(v44 + 16) = v14;
          *(_QWORD *)(v44 + 24) = v9;
          v45 = v38 + 48 * v43;
          *(_BYTE *)(v44 + 32) = v3;
          *(_BYTE *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(_BYTE *)(v44 + 42) = 0;
          v37 = (_QWORD *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              v46 = *((_OWORD *)v15 - 3);
              v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 48) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            v39 = *(char **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 104) = v44;
          *(_QWORD *)(a1 + 112) = v37;
          *(_QWORD *)(a1 + 120) = v45;
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((_QWORD *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          v37 = v15 + 48;
          v15[42] = 0;
        }
        *(_QWORD *)(a1 + 112) = v37;
        if (!*(_BYTE *)(a1 + 240) || *(double *)(a1 + 216) <= v6)
        {
          *(_QWORD *)(a1 + 208) = v7;
          *(double *)(a1 + 216) = v6;
          *(double *)(a1 + 224) = v8;
          *(_QWORD *)(a1 + 232) = v9;
          *(_BYTE *)(a1 + 240) = v3;
          *(_BYTE *)(a1 + 241) = v10;
          if (!*(_BYTE *)(a1 + 200) || *(double *)(a1 + 176) <= v6)
          {
            *(_QWORD *)(a1 + 168) = v7;
            *(double *)(a1 + 176) = v6;
            *(double *)(a1 + 184) = v8;
            *(_QWORD *)(a1 + 192) = v9;
            *(_BYTE *)(a1 + 200) = v3;
            *(_BYTE *)(a1 + 201) = v10;
          }
        }
        if (*(_BYTE *)(a1 + 33))
        {
          v48 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_canonicalSourceIDForSourceID(v5, v9);
          v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(v5, v48);
          if (!*((_BYTE *)v49 + 112) || *((double *)v49 + 11) <= v6)
          {
            v49[10] = v7;
            *((double *)v49 + 11) = v6;
            *((double *)v49 + 12) = v8;
            v49[13] = (uint64_t *)v9;
            *((_BYTE *)v49 + 112) = v3;
            *((_BYTE *)v49 + 113) = v10;
            if (!*((_BYTE *)v49 + 72) || *((double *)v49 + 6) <= v6)
            {
              v49[5] = v7;
              *((double *)v49 + 6) = v6;
              *((double *)v49 + 7) = v8;
              v49[8] = (uint64_t *)v9;
              *((_BYTE *)v49 + 72) = v3;
              *((_BYTE *)v49 + 73) = v10;
            }
          }
        }
      }
      else
      {
        if (v6 < v11)
          v6 = *(double *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 464);
        v19 = *(_QWORD *)(a1 + 472);
        if (v18 >= v19)
        {
          v21 = *(_QWORD *)(a1 + 456);
          v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x333333333333333)
            v25 = 0x666666666666666;
          else
            v25 = v23;
          if (v25)
            v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          else
            v26 = 0;
          v27 = v25 + 40 * v22;
          v28 = v25 + 40 * v26;
          *(_QWORD *)v27 = v7;
          *(double *)(v27 + 8) = v6;
          *(double *)(v27 + 16) = v8;
          *(_QWORD *)(v27 + 24) = v9;
          *(_BYTE *)(v27 + 32) = v3;
          *(_BYTE *)(v27 + 33) = v10;
          v20 = v27 + 40;
          v30 = *(char **)(a1 + 456);
          v29 = *(char **)(a1 + 464);
          if (v29 != v30)
          {
            do
            {
              v31 = *(_OWORD *)(v29 - 40);
              v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            v29 = *(char **)(a1 + 456);
          }
          *(_QWORD *)(a1 + 456) = v27;
          *(_QWORD *)(a1 + 464) = v20;
          *(_QWORD *)(a1 + 472) = v28;
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v18 = v7;
          *(double *)(v18 + 8) = v6;
          *(double *)(v18 + 16) = v8;
          *(_QWORD *)(v18 + 24) = v9;
          *(_BYTE *)(v18 + 32) = v3;
          v20 = v18 + 40;
          *(_BYTE *)(v18 + 33) = v10;
        }
        *(_QWORD *)(a1 + 464) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 602))
  {
    *(_BYTE *)(a1 + 604) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 604) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7C7F9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 456), *(_QWORD *)(a1 + 464), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 464) - *(_QWORD *)(a1 + 456)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7C7FAB0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *i;
  _QWORD *v15;

  v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 480), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 64);
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_QWORD *)(v8 + 200) = 0;
  if (*(_QWORD *)(v8 + 224))
  {
    v9 = *(_QWORD **)(a1 + 248);
    v10 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 248) = a1 + 256;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    if (v9[1])
      v11 = (_QWORD *)v9[1];
    else
      v11 = v9;
    if (v11)
    {
      v12 = (_QWORD *)v11[2];
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if ((_QWORD *)*v12 == v11)
        {
          *v12 = 0;
          while (1)
          {
            v15 = (_QWORD *)v12[1];
            if (!v15)
              break;
            do
            {
              v12 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; v13 = (_QWORD *)v12[1])
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (i = (_QWORD *)v12[2]; i; i = (_QWORD *)i[2])
          v12 = i;
        v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 480));
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a1 + 456);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 604))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 604) = 0;
  }

}

void sub_1B7C7FC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 600))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7C7FD14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 616));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 600) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7C80078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C409B2FA8CALL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7C80224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7C80490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  char v18;

  v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v8 = 1;
    v9 = a6;
  }
  v13 = a5;
  v14 = v9;
  v15 = a7;
  v16 = a2;
  v17 = v8;
  v18 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  else
  {
    v11 = v7 <= a6;
    v12 = *(double *)(a1 + 40);
    if (v9 >= v12)
      v11 = 0;
    if (!v11 || a7 <= v12)
      v12 = a7;
    v14 = v9;
    v15 = v12;
    v17 = v11;
    if (v11)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 600))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7C81118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7C811B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsDiscrete>::archive(uint64_t a1, int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsDiscrete::archive((int8x16_t *)(a2 + 2), (uint64_t)v6);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(*((int8x16_t *)a2 + 5), *((int8x16_t *)a2 + 5), 8uLL);
  v6[1] = *((_QWORD *)a2 + 12);
  v6[2] = *((_QWORD *)a2 + 13);
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7C812C0(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsDiscrete>::unarchive(uint64_t a1, _QWORD *a2)
{
  int8x16_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  *(_WORD *)(a1 + 72) = 0;
  v2 = 0uLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_WORD *)(a1 + 112) = 0;
  v3 = a2[16];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    v5 = *(int8x16_t *)(v3 + 88);
    v6 = *(_QWORD *)(v3 + 104);
    v7 = *(_QWORD *)(v3 + 112);
    if (v7)
    {
      v2 = *(int8x16_t *)(v7 + 24);
      v8 = *(_QWORD *)(v7 + 8);
      v9 = 1;
      v7 = *(_QWORD *)(v7 + 16);
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    *(int8x16_t *)(a1 + 8) = vextq_s8(v5, v5, 8uLL);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v4;
    v2 = vextq_s8(v2, v2, 8uLL);
    *(int8x16_t *)(a1 + 40) = v2;
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 72) = v9;
    *(_BYTE *)(a1 + 73) = 0;
  }
  *(_DWORD *)a1 = a2[17];
  v10 = a2[14];
  if (v10)
  {
    v2.i64[0] = *(_QWORD *)(v10 + 8);
    v11 = *(_QWORD *)(v10 + 16);
    *(int8x16_t *)(a1 + 80) = vextq_s8(*(int8x16_t *)(v10 + 24), *(int8x16_t *)(v10 + 24), 8uLL);
    *(_QWORD *)(a1 + 96) = v2.i64[0];
    *(_QWORD *)(a1 + 104) = v11;
    *(_WORD *)(a1 + 112) = 1;
  }
  return *(double *)v2.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D04E00;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_WORD *)(a1 + 552) = 1;
  *(_BYTE *)(a1 + 554) = 0;
  *(_BYTE *)(a1 + 556) = 0;
  *(_QWORD *)(a1 + 560) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 600) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D04E00;
  v2 = *(void **)(a1 + 584);
  if (v2)
  {
    *(_QWORD *)(a1 + 592) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 520);
  if (v3)
  {
    *(_QWORD *)(a1 + 528) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 552) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_configureForStartTime(a1);

}

void sub_1B7C814EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 560) = v4;
    v3 = v5;
  }

}

void sub_1B7C8154C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 71, a2);
  v7 = a2;
  v4 = a1[71];
  v5 = a1[68];
  a1[68] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[68]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 264) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7C816E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[50];

  if (*(_BYTE *)(a1 + 552))
    return 0;
  HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7C81788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 554))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 553))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 555))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 592);
    v18 = *(_QWORD *)(a1 + 600);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 584);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 592);
      v33 = *(char **)(a1 + 584);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 584);
      }
      *(_QWORD *)(a1 + 584) = v28;
      *(_QWORD *)(a1 + 592) = v21;
      *(_QWORD *)(a1 + 600) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 592) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7C819DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 554))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 554) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 553))
    goto LABEL_5;
  v9 = *(void **)(a1 + 576);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_380);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 576);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;

  *(_BYTE *)(a1 + 553) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 584);
    *(_QWORD *)(a1 + 600) = 0;
    *(_QWORD *)(a1 + 592) = 0;
    *(_QWORD *)(a1 + 584) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 584);
      v37 = *(__int128 **)(a1 + 592);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 592);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 592) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 584);
  v39 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 528) != *(_QWORD *)(a1 + 520))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsDiscrete>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 528) != *(_QWORD *)(a1 + 520));
  }
  *(_BYTE *)(a1 + 554) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 556))
    {
      *(_BYTE *)(a1 + 556) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 554) = 0;
LABEL_83:

  return v7;
}

void sub_1B7C820D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 554) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 555) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 554))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 554))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 576);
    *(_QWORD *)(a1 + 576) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 553) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 553))
  {
    v8 = *(void **)(a1 + 576);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 576);
      *(_QWORD *)(a1 + 576) = v9;

      v8 = *(void **)(a1 + 576);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7C823D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 552) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 552) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7C824F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::reset(uint64_t result)
{
  *(_BYTE *)(result + 552) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 552), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsDiscrete::archive((int8x16_t *)(a1 + 240), (uint64_t)&v37);
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 312);
  if (v9 != (_QWORD *)(a1 + 320))
  {
    do
    {
      HDStatisticsDiscrete::archive((int8x16_t *)(v9 + 5), (uint64_t)&v37);
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 320));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 520);
  for (k = *(int8x16_t **)(a1 + 528); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7C82888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  uint64_t i;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  id v68;
  _QWORD *v69;
  uint64_t v70;
  id v71;
  int8x16_t v72;
  int8x16_t v73;
  uint64_t v74;
  _BYTE v75[400];
  __int128 v76;
  __int128 v77;
  int8x16_t v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  int8x16_t v82;
  uint64_t v83;
  uint64_t v84[4];
  __int128 __p;
  _QWORD v86[10];
  uint64_t **v87;
  uint64_t *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  __int128 v98;
  __int128 v99;
  int v100;
  __int128 v101;
  __int128 v102;
  int v103;
  void (**v104)(statistics::StatisticsEngine *__hidden);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _BYTE v111[32];
  uint64_t v112[3];

  v68 = a2;
  *(_BYTE *)(a1 + 552) = objc_msgSend(v68, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v68;
  HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket((uint64_t)v75, 0, -1.79769313e308, 1.79769313e308);
  v76 = 0u;
  v77 = 0u;
  v112[0] = 0;
  v71 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v111, (const unsigned __int8 *)objc_msgSend(v71, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), v112));
  v70 = a1;
  v104 = &off_1E6D09A88;
  v105 = 0;
  v108 = 0;
  v109 = 0;
  v107 = 0;
  v110 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v104, (PB::Reader *)v111);
  v74 = v106;
  if (v105)
  {
    v81 = 0;
    memset(v84, 0, sizeof(v84));
    v89 = 0;
    v88 = 0;
    __p = 0u;
    memset(v86, 0, 74);
    v87 = &v88;
    v90 = 0u;
    v91 = 0u;
    v92 = 1065353216;
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0;
    v97 = 1065353216;
    v98 = 0u;
    v99 = 0u;
    v100 = 1065353216;
    v101 = 0u;
    v102 = 0u;
    v103 = 1065353216;
    v78 = vextq_s8(*(int8x16_t *)(v105 + 8), *(int8x16_t *)(v105 + 8), 8uLL);
    v4 = *(_QWORD *)(v105 + 72);
    v79 = *(_QWORD *)(v105 + 64);
    v80 = *(_WORD *)(v105 + 185);
    v82 = vextq_s8(*(int8x16_t *)(v105 + 24), *(int8x16_t *)(v105 + 24), 8uLL);
    v83 = v4;
    v6 = *(_QWORD *)(v105 + 80);
    v5 = *(_QWORD *)(v105 + 88);
    v69 = (_QWORD *)v105;
    if (v6 != v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v7 >= v86[0])
        {
          v14 = (_QWORD *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - __p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v86[0] - __p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v86[0] - __p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86[0] - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = (_QWORD *)*((_QWORD *)&__p + 1);
            v14 = (_QWORD *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)((char *)v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 6;
            }
            while (v7 != v14);
            v14 = (_QWORD *)__p;
          }
          v7 = (_QWORD *)(v19 + 48);
          *(_QWORD *)&__p = v20;
          *((_QWORD *)&__p + 1) = v19 + 48;
          v86[0] = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v7 = v9;
          v7[1] = v8;
          v7[2] = v10;
          v7[3] = v11;
          *((_WORD *)v7 + 16) = 1;
          *((_BYTE *)v7 + 40) = 0;
          *((_BYTE *)v7 + 41) = v12;
          *((_BYTE *)v7 + 42) = v13;
          v7 += 6;
        }
        *((_QWORD *)&__p + 1) = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    v23 = v69[13];
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 24);
      v25 = *(int8x16_t *)(v23 + 88);
      v26 = *(_QWORD *)(v23 + 104);
      v27 = *(_QWORD *)(v23 + 112);
      if (v27)
      {
        v28 = *(int8x16_t *)(v27 + 24);
        v29 = *(_QWORD *)(v27 + 8);
        v30 = 1;
        v27 = *(_QWORD *)(v27 + 16);
      }
      else
      {
        v30 = 0;
        v28 = 0uLL;
        v29 = 0;
      }
      *(int8x16_t *)&v86[1] = vextq_s8(v25, v25, 8uLL);
      v86[3] = v26;
      v86[4] = v24;
      *(int8x16_t *)&v86[5] = vextq_s8(v28, v28, 8uLL);
      v86[7] = v29;
      v86[8] = v27;
      LOWORD(v86[9]) = v30;
    }
    v31 = (uint64_t *)v69[17];
    v32 = (uint64_t *)v69[18];
    while (v31 != v32)
    {
      v33 = *v31;
      v34 = *(_QWORD *)(*v31 + 112);
      if (v34)
      {
        v73 = *(int8x16_t *)(v34 + 24);
        v35 = *(_QWORD *)(v34 + 8);
        v36 = 1;
        v37 = *(_QWORD *)(v34 + 16);
      }
      else
      {
        v37 = 0;
        v36 = 0;
        v35 = 0;
        v73 = 0u;
      }
      v38 = *(_QWORD *)(v33 + 24);
      v72 = *(int8x16_t *)(v33 + 88);
      v39 = *(_QWORD *)(v33 + 104);
      v40 = *(_QWORD *)(v33 + 144);
      v41 = &v88;
      v42 = &v88;
      v43 = v88;
      if (v88)
      {
        do
        {
          while (1)
          {
            v42 = (uint64_t **)v43;
            v44 = v43[4];
            if (v44 <= v40)
              break;
            v43 = *v42;
            v41 = v42;
            if (!*v42)
              goto LABEL_39;
          }
          if (v44 >= v40)
          {
            v46 = (char *)v42;
            goto LABEL_42;
          }
          v43 = v42[1];
        }
        while (v43);
        v41 = v42 + 1;
      }
LABEL_39:
      v46 = (char *)operator new(0x70uLL);
      *((_QWORD *)v46 + 4) = v40;
      *(_OWORD *)(v46 + 40) = 0u;
      *(_OWORD *)(v46 + 56) = 0u;
      *(_OWORD *)(v46 + 72) = 0u;
      *(_OWORD *)(v46 + 88) = 0u;
      *((_QWORD *)v46 + 13) = 0;
      *(_QWORD *)v46 = 0;
      *((_QWORD *)v46 + 1) = 0;
      *((_QWORD *)v46 + 2) = v42;
      *v41 = (uint64_t *)v46;
      v45 = (uint64_t *)v46;
      if (*v87)
      {
        v87 = (uint64_t **)*v87;
        v45 = *v41;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v88, v45);
      ++v89;
LABEL_42:
      *(int8x16_t *)(v46 + 40) = vextq_s8(v72, v72, 8uLL);
      *((_QWORD *)v46 + 7) = v39;
      *((_QWORD *)v46 + 8) = v38;
      *(int8x16_t *)(v46 + 72) = vextq_s8(v73, v73, 8uLL);
      *((_QWORD *)v46 + 11) = v35;
      *((_QWORD *)v46 + 12) = v37;
      v46[104] = v36;
      ++v31;
      v46[105] = 0;
    }
    v47 = v69[5];
    for (i = v69[6]; v47 != i; v47 += 8)
    {
      v50 = *(double *)(*(_QWORD *)v47 + 8);
      v49 = *(double *)(*(_QWORD *)v47 + 16);
      if (v50 >= v49)
        v51 = *(double *)(*(_QWORD *)v47 + 16);
      else
        v51 = *(double *)(*(_QWORD *)v47 + 8);
      if (v49 < v50)
        v49 = *(double *)(*(_QWORD *)v47 + 8);
      HKIntervalMask<double>::_insertInterval(v84, v51, v49);
    }
    HDStatisticsBucket<HDStatisticsDiscrete>::operator=((uint64_t)v75, (uint64_t)&v78);
    HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket((uint64_t)&v78);
  }
  v52 = v107;
  v53 = v108;
  if (v107 != v108)
  {
    v54 = *((_QWORD *)&v76 + 1);
    do
    {
      v55 = *(_QWORD *)(*(_QWORD *)v52 + 24);
      v56 = *(_QWORD *)(*(_QWORD *)v52 + 32);
      v57 = *(_QWORD *)(*(_QWORD *)v52 + 8);
      v58 = *(_QWORD *)(*(_QWORD *)v52 + 16);
      if (v54 >= (unint64_t)v77)
      {
        v59 = (void *)v76;
        v60 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - v76) >> 3);
        v61 = v60 + 1;
        if (v60 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v77 - v76) >> 3) > v61)
          v61 = 0x999999999999999ALL * ((uint64_t)(v77 - v76) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v77 - v76) >> 3) >= 0x333333333333333)
          v62 = 0x666666666666666;
        else
          v62 = v61;
        if (v62)
        {
          v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v62);
          v54 = *((_QWORD *)&v76 + 1);
          v59 = (void *)v76;
        }
        else
        {
          v63 = 0;
        }
        v64 = v62 + 40 * v60;
        *(_QWORD *)v64 = v56;
        *(_QWORD *)(v64 + 8) = v55;
        *(_QWORD *)(v64 + 16) = v57;
        *(_QWORD *)(v64 + 24) = v58;
        *(_WORD *)(v64 + 32) = 1;
        v65 = v64;
        if ((void *)v54 != v59)
        {
          do
          {
            v66 = *(_OWORD *)(v54 - 40);
            v67 = *(_OWORD *)(v54 - 24);
            *(_WORD *)(v65 - 8) = *(_WORD *)(v54 - 8);
            *(_OWORD *)(v65 - 24) = v67;
            *(_OWORD *)(v65 - 40) = v66;
            v65 -= 40;
            v54 -= 40;
          }
          while ((void *)v54 != v59);
          v59 = (void *)v76;
        }
        v54 = v64 + 40;
        *(_QWORD *)&v76 = v65;
        *((_QWORD *)&v76 + 1) = v64 + 40;
        *(_QWORD *)&v77 = v62 + 40 * v63;
        if (v59)
          operator delete(v59);
      }
      else
      {
        *(_QWORD *)v54 = v56;
        *(_QWORD *)(v54 + 8) = v55;
        *(_QWORD *)(v54 + 16) = v57;
        *(_QWORD *)(v54 + 24) = v58;
        *(_WORD *)(v54 + 32) = 1;
        v54 += 40;
      }
      *((_QWORD *)&v76 + 1) = v54;
      v52 += 8;
    }
    while (v52 != v53);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v104);

  HDStatisticsCollectionEngine<HDStatisticsDiscrete>::operator=((_QWORD *)(v70 + 112), (uint64_t)&v74);
  if ((_QWORD)v76)
  {
    *((_QWORD *)&v76 + 1) = v76;
    operator delete((void *)v76);
  }
  HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket((uint64_t)v75);

}

void sub_1B7C82FA8(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)(v12 - 224));
  HDStatisticsCollectionEngine<HDStatisticsDiscrete>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsDiscrete>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 408);
  if (v2)
  {
    *(_QWORD *)(a1 + 416) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 360);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 320);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 280);
  v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(_QWORD *)(a1 + 264) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 216);
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 200));
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[400];
  uint64_t v18;
  _BYTE v19[400];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[336];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 568));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsDiscrete>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 552) = 0;
  return HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7C83488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsDiscrete>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsDiscrete>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 51), (__n128 *)(a2 + 408));
  v4 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a2 + 432) = 0;
  v5 = (void *)a1[54];
  a1[54] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;
  _QWORD *v35;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 136);
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 168);
  v15 = *(_QWORD *)(a2 + 184);
  v16 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 200) = 0;
  v17 = (_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_OWORD *)(a1 + 120) = v16;
  *(_QWORD *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 136) = v12;
  *(_QWORD *)(a1 + 208) = 0;
  v18 = *(_QWORD **)(a2 + 192);
  if (v18 != (_QWORD *)(a2 + 200))
  {
    v19 = 0;
    v20 = (_QWORD *)(a1 + 200);
    while (1)
    {
      v21 = v18[4];
      v22 = (_QWORD *)(a1 + 200);
      if (v20 == v17)
        goto LABEL_12;
      v23 = v19;
      v24 = (_QWORD *)(a1 + 200);
      if (v19)
      {
        do
        {
          v22 = v23;
          v23 = (_QWORD *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v24[2];
          v25 = *v22 == (_QWORD)v24;
          v24 = v22;
        }
        while (v25);
      }
      if (v22[4] < v21)
      {
LABEL_12:
        if (v19)
          v26 = (uint64_t **)v22;
        else
          v26 = (uint64_t **)(a1 + 200);
        if (v19)
          v27 = (uint64_t **)(v22 + 1);
        else
          v27 = (uint64_t **)(a1 + 200);
        if (!*v27)
        {
LABEL_28:
          v30 = (uint64_t *)operator new(0x70uLL);
          *((_OWORD *)v30 + 2) = *((_OWORD *)v18 + 2);
          v31 = *((_OWORD *)v18 + 3);
          v32 = *((_OWORD *)v18 + 4);
          v33 = *((_OWORD *)v18 + 6);
          *((_OWORD *)v30 + 5) = *((_OWORD *)v18 + 5);
          *((_OWORD *)v30 + 6) = v33;
          *((_OWORD *)v30 + 3) = v31;
          *((_OWORD *)v30 + 4) = v32;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 192), (uint64_t)v26, v27, v30);
        }
      }
      else
      {
        v27 = (uint64_t **)(a1 + 200);
        v26 = (uint64_t **)(a1 + 200);
        if (!v19)
          goto LABEL_28;
        v28 = v19;
        while (1)
        {
          while (1)
          {
            v26 = (uint64_t **)v28;
            v29 = v28[4];
            if (v29 <= v21)
              break;
            v28 = *v26;
            v27 = v26;
            if (!*v26)
              goto LABEL_28;
          }
          if (v29 >= v21)
            break;
          v28 = v26[1];
          if (!v28)
          {
            v27 = v26 + 1;
            goto LABEL_28;
          }
        }
      }
      v34 = (_QWORD *)v18[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v18[2];
          v25 = *v35 == (_QWORD)v18;
          v18 = v35;
        }
        while (!v25);
      }
      if (v35 == (_QWORD *)(a2 + 200))
        break;
      v19 = (_QWORD *)*v17;
      v20 = *(_QWORD **)(a1 + 192);
      v18 = v35;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 216, a2 + 216);
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 256), *(const void **)(a2 + 256), *(_QWORD *)(a2 + 264), (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 280, a2 + 280);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 320, a2 + 320);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 360, a2 + 360);
  return a1;
}

void sub_1B7C83824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  v19 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 264) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsDiscrete>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_OWORD *)(a2 + 136);
  v14 = a1 + 200;
  v13 = *(_QWORD **)(a1 + 200);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 136) = v12;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  std::__tree<long>::destroy(v13);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v15 = (_QWORD *)(a2 + 200);
  v16 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 200) = v16;
  v17 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 208) = v17;
  if (v17)
  {
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(a2 + 192) = v15;
    *v15 = 0;
    *(_QWORD *)(a2 + 208) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 192) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 216, (uint64_t *)(a2 + 216));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 256, (__n128 *)(a2 + 256));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 280, (uint64_t *)(a2 + 280));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 320, (uint64_t *)(a2 + 320));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 360, (uint64_t *)(a2 + 360));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  unint64_t v46;
  void **v47;
  char *v48;
  unint64_t v49;
  id v50;
  id v51;
  void *v52;
  char v53;
  float v54;
  _BOOL8 v55;
  unint64_t v56;
  unint64_t v57;
  int8x8_t prime;
  void *v59;
  void *v60;
  uint64_t v61;
  _QWORD **v62;
  unint64_t v63;
  uint8x8_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t v67;
  _QWORD *i;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _QWORD *v76;
  _QWORD *v77;
  BOOL v78;
  void *v79;
  uint64_t **j;
  uint64_t *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  double v86;
  double v87;
  void *v88;
  void *v89;
  void *v90;
  _QWORD *v91;
  uint64_t v92;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  unint64_t v99;
  id v100;
  id v101;
  id v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *__p[2];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  _QWORD v111[3];
  _QWORD *v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = a2 + 5;
  if (v4 != -1.79769313e308)
    v6 = a2;
  v101 = (id)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  v103 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v101, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(v103 + 256);
      v16 = *(uint64_t **)(v103 + 264);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v20 = (void *)objc_msgSend(v14, "copy");
      objc_msgSend(v12, "_setSources:", v20);

    }
  }

  v111[0] = &off_1E6D04ED0;
  v112 = v111;
  v102 = v12;
  v105 = *(_QWORD *)(a1 + 24);
  v21 = *(_OWORD *)(v103 + 136);
  v22 = *(_OWORD *)(v103 + 168);
  v108 = *(_OWORD *)(v103 + 152);
  v109 = v22;
  v110 = *(_QWORD *)(v103 + 184);
  *(_OWORD *)__p = *(_OWORD *)(v103 + 120);
  v107 = v21;
  if (!v112)
    std::__throw_bad_function_call[abi:ne180100]();
  v23 = (double *)(*(uint64_t (**)(_QWORD *, void **))(*v112 + 48))(v112, __p);
  v25 = *v23;
  v24 = v23[1];
  v26 = v23[2];
  v27 = *((_QWORD *)v23 + 3);
  v29 = v23[4];
  v28 = v23[5];
  v30 = v23[6];
  v31 = *(_QWORD *)(a1 + 24);
  v32 = _HKStatisticsOptionBaselineRelativeQuantities();
  v33 = *(void **)(a1 + 16);
  if ((v32 & v31) != 0)
    objc_msgSend(v33, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v33, "canonicalUnit");
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v105 & 2) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v104, v25);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v102, "setAverageQuantity:", v34);

  }
  if ((v105 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v104, v26);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v102, "setMinimumQuantity:", v35);

  }
  if ((v105 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v104, v24);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v102, "setMaximumQuantity:", v36);

  }
  if ((v105 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v104, v29);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v102, "setMostRecentQuantity:", v37);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v28, v30);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v102, "setMostRecentQuantityDateInterval:", v38);

  }
  objc_msgSend(v102, "setDataCount:", v27);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_162;
  if ((v105 & 2) != 0)
    v98 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v98 = 0;
  if ((v105 & 4) != 0)
    v97 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v97 = 0;
  if ((v105 & 8) != 0)
    v95 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v95 = 0;
  if ((v105 & 0x20) != 0)
  {
    v94 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v96 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v96 = 0;
    v94 = 0;
  }
  v100 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)__p = 0u;
  v107 = 0u;
  LODWORD(v108) = 1065353216;
  v39 = *(_QWORD **)(v103 + 192);
  if (v39 == (_QWORD *)(v103 + 200))
    goto LABEL_153;
  do
  {
    HDStatisticsBucket<HDStatisticsDiscrete>::_bundleIdentifierForSourceID(v103, v39[4]);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = v40;
    if (!v40)
      goto LABEL_121;
    v42 = objc_msgSend(v40, "hash");
    v43 = v42;
    v44 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_64;
    v45 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v45.i16[0] = vaddlv_u8(v45);
    v46 = v45.u32[0];
    if (v45.u32[0] > 1uLL)
    {
      v27 = v42;
      if ((void *)v42 >= __p[1])
        v27 = v42 % (unint64_t)__p[1];
    }
    else
    {
      v27 = ((unint64_t)__p[1] - 1) & v42;
    }
    v47 = (void **)*((_QWORD *)__p[0] + v27);
    if (!v47 || (v48 = (char *)*v47) == 0)
    {
LABEL_64:
      v48 = (char *)operator new(0x60uLL);
      *(_QWORD *)v48 = 0;
      *((_QWORD *)v48 + 1) = v43;
      *((_QWORD *)v48 + 2) = v41;
      *(_OWORD *)(v48 + 24) = 0u;
      *(_OWORD *)(v48 + 40) = 0u;
      *(_OWORD *)(v48 + 56) = 0u;
      *(_OWORD *)(v48 + 72) = 0u;
      *((_QWORD *)v48 + 11) = 0;
      v54 = (float)(unint64_t)(*((_QWORD *)&v107 + 1) + 1);
      if (v44 && (float)(*(float *)&v108 * (float)v44) >= v54)
      {
LABEL_110:
        v70 = __p[0];
        v71 = (_QWORD *)*((_QWORD *)__p[0] + v27);
        if (v71)
        {
          *(_QWORD *)v48 = *v71;
        }
        else
        {
          *(_QWORD *)v48 = v107;
          *(_QWORD *)&v107 = v48;
          v70[v27] = &v107;
          if (!*(_QWORD *)v48)
          {
LABEL_119:
            ++*((_QWORD *)&v107 + 1);
            goto LABEL_120;
          }
          v72 = *(_QWORD *)(*(_QWORD *)v48 + 8);
          if ((v44 & (v44 - 1)) != 0)
          {
            if (v72 >= v44)
              v72 %= v44;
          }
          else
          {
            v72 &= v44 - 1;
          }
          v71 = (char *)__p[0] + 8 * v72;
        }
        *v71 = v48;
        goto LABEL_119;
      }
      v55 = (v44 & (v44 - 1)) != 0;
      if (v44 < 3)
        v55 = 1;
      v56 = v55 | (2 * v44);
      v57 = vcvtps_u32_f32(v54 / *(float *)&v108);
      if (v56 <= v57)
        prime = (int8x8_t)v57;
      else
        prime = (int8x8_t)v56;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v44 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_76;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v65 = vcvtps_u32_f32((float)*((unint64_t *)&v107 + 1) / *(float *)&v108);
        if (__p[1] < (void *)3
          || (v66 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
        {
          v65 = std::__next_prime(v65);
        }
        else
        {
          v67 = 1 << -(char)__clz(v65 - 1);
          if (v65 >= 2)
            v65 = v67;
        }
        if (*(_QWORD *)&prime <= v65)
          prime = (int8x8_t)v65;
        if (*(_QWORD *)&prime >= v44)
        {
          v44 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_76:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v59 = operator new(8 * *(_QWORD *)&prime);
            v60 = __p[0];
            __p[0] = v59;
            if (v60)
              operator delete(v60);
            v61 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v61++) = 0;
            while (*(_QWORD *)&prime != v61);
            v62 = (_QWORD **)v107;
            if ((_QWORD)v107)
            {
              v63 = *(_QWORD *)(v107 + 8);
              v64 = (uint8x8_t)vcnt_s8(prime);
              v64.i16[0] = vaddlv_u8(v64);
              if (v64.u32[0] > 1uLL)
              {
                if (v63 >= *(_QWORD *)&prime)
                  v63 %= *(_QWORD *)&prime;
              }
              else
              {
                v63 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v63) = &v107;
              for (i = *v62; i; v63 = v69)
              {
                v69 = i[1];
                if (v64.u32[0] > 1uLL)
                {
                  if (v69 >= *(_QWORD *)&prime)
                    v69 %= *(_QWORD *)&prime;
                }
                else
                {
                  v69 &= *(_QWORD *)&prime - 1;
                }
                if (v69 != v63)
                {
                  if (!*((_QWORD *)__p[0] + v69))
                  {
                    *((_QWORD *)__p[0] + v69) = v62;
                    goto LABEL_101;
                  }
                  *v62 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v69);
                  **((_QWORD **)__p[0] + v69) = i;
                  i = v62;
                }
                v69 = v63;
LABEL_101:
                v62 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v44 = (unint64_t)prime;
            goto LABEL_105;
          }
          v79 = __p[0];
          __p[0] = 0;
          if (v79)
            operator delete(v79);
          v44 = 0;
          __p[1] = 0;
        }
      }
LABEL_105:
      if ((v44 & (v44 - 1)) != 0)
      {
        if (v43 >= v44)
          v27 = v43 % v44;
        else
          v27 = v43;
      }
      else
      {
        v27 = (v44 - 1) & v43;
      }
      goto LABEL_110;
    }
    v99 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v49 = *((_QWORD *)v48 + 1);
      if (v49 == v43)
        break;
      if (v46 > 1)
      {
        if (v49 >= v44)
          v49 %= v44;
      }
      else
      {
        v49 &= v99;
      }
      if (v49 != v27)
        goto LABEL_64;
LABEL_63:
      v48 = *(char **)v48;
      if (!v48)
        goto LABEL_64;
    }
    v50 = *((id *)v48 + 2);
    v51 = v41;
    v52 = v51;
    if (v50 != v51)
    {
      v53 = objc_msgSend(v50, "isEqualToString:", v51);

      if ((v53 & 1) != 0)
        goto LABEL_120;
      goto LABEL_63;
    }

LABEL_120:
    *(_OWORD *)(v48 + 24) = *(_OWORD *)(v39 + 5);
    v73 = *(_OWORD *)(v39 + 7);
    v74 = *(_OWORD *)(v39 + 9);
    v75 = *(_OWORD *)(v39 + 11);
    *((_QWORD *)v48 + 11) = v39[13];
    *(_OWORD *)(v48 + 72) = v75;
    *(_OWORD *)(v48 + 56) = v74;
    *(_OWORD *)(v48 + 40) = v73;

LABEL_121:
    v76 = (_QWORD *)v39[1];
    if (v76)
    {
      do
      {
        v77 = v76;
        v76 = (_QWORD *)*v76;
      }
      while (v76);
    }
    else
    {
      do
      {
        v77 = (_QWORD *)v39[2];
        v78 = *v77 == (_QWORD)v39;
        v39 = v77;
      }
      while (!v78);
    }
    v39 = v77;
  }
  while (v77 != (_QWORD *)(v103 + 200));
  for (j = (uint64_t **)v107; j; j = (uint64_t **)*j)
  {
    v81 = j[2];
    if ((v105 & 2) != 0)
    {
      if (!v112)
        goto LABEL_168;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v104, *(double *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v112 + 48))(v112, (uint64_t *)j + 3));
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "setObject:forKeyedSubscript:", v82, v81);

    }
    if ((v105 & 4) != 0)
    {
      if (!v112)
        goto LABEL_168;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v104, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v112 + 48))(v112, (uint64_t *)j + 3) + 16));
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v97, "setObject:forKeyedSubscript:", v83, v81);

    }
    if ((v105 & 8) != 0)
    {
      if (!v112)
        goto LABEL_168;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v104, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v112 + 48))(v112, (uint64_t *)j + 3) + 8));
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v95, "setObject:forKeyedSubscript:", v84, v81);

    }
    if ((v105 & 0x20) != 0)
    {
      if (!v112)
        std::__throw_bad_function_call[abi:ne180100]();
      v85 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v112 + 48))(v112, (uint64_t *)j + 3);
      v86 = *(double *)(v85 + 40);
      v87 = *(double *)(v85 + 48);
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v104, *(double *)(v85 + 32));
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v94, "setObject:forKeyedSubscript:", v88, v81);

      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v86, v87);
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v96, "setObject:forKeyedSubscript:", v89, v81);

    }
    if (!v112)
LABEL_168:
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v112 + 48))(v112, (uint64_t *)j + 3) + 24));
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "setObject:forKeyedSubscript:", v90, v81);

  }
LABEL_153:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  if ((v105 & 2) != 0)
    objc_msgSend(v102, "setAverageQuantityBySource:", v98);
  if ((v105 & 4) != 0)
    objc_msgSend(v102, "setMinimumQuantityBySource:", v97);
  if ((v105 & 8) != 0)
    objc_msgSend(v102, "setMaximumQuantityBySource:", v95);
  if ((v105 & 0x20) != 0)
  {
    objc_msgSend(v102, "setMostRecentQuantityBySource:", v94);
    objc_msgSend(v102, "setMostRecentQuantityDateIntervalBySource:", v96);
  }
  objc_msgSend(v102, "setDataCountBySource:", v100);

LABEL_162:
  v91 = v112;
  if (v112 == v111)
  {
    v92 = 4;
    v91 = v111;
LABEL_166:
    (*(void (**)(void))(*v91 + 8 * v92))();
  }
  else if (v112)
  {
    v92 = 5;
    goto LABEL_166;
  }
  return v102;
}

void sub_1B7C84640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;

  v23 = *(_QWORD **)(v21 - 152);
  if (v23 == (_QWORD *)(v21 - 176))
  {
    v24 = 4;
    v23 = (_QWORD *)(v21 - 176);
  }
  else
  {
    if (!v23)
      goto LABEL_2;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_2:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 240);
  v2 = *(_QWORD *)(a1 + 256);
  if (v1 != (*(_QWORD *)(a1 + 264) - v2) >> 3)
  {
    v4 = (void **)(a1 + 256);
    *(_QWORD *)(a1 + 264) = v2;
    std::vector<long long>::reserve((void **)(a1 + 256), v1);
    v5 = *(_QWORD **)(a1 + 232);
    if (v5)
    {
      v6 = *(char **)(a1 + 264);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 272);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 256);
            v6 = *(char **)(a1 + 264);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 256) = v16;
          *(_QWORD *)(a1 + 264) = v9;
          *(_QWORD *)(a1 + 272) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 264) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7C849C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  _QWORD *v6;
  double *v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  char v16;
  double v17;
  int v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double *j;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  id WeakRetained;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  unint64_t v55;
  uint64_t **v56;
  char v57;
  double *v58;
  __int128 v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  _OWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  double var2;
  double *i;
  unint64_t var3;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  char *v77;
  _OWORD *v78;
  __int128 v79;
  __int128 v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  unint64_t v85;
  uint64_t **v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  BOOL v90;
  __int128 v91;
  char *v92;
  double v93;
  void *v94;
  void *v95;
  id *location;
  id v97;
  HDStatisticsDiscrete *v98;
  int64_t v99;
  char **v100;
  uint64_t v101;
  HDRawQuantitySample v102;
  __int128 v103;
  __int128 v104;
  __int16 v105;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v100 = (char **)(a1 + 96);
    v98 = (HDStatisticsDiscrete *)(a1 + 120);
    location = (id *)(a1 + 88);
    v6 = (_QWORD *)(a1 + 200);
    do
    {
      v7 = *(double **)(a1 + 96);
      v8 = *(__int128 **)(a1 + 104);
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          v30 = a2;
          v31 = a2;
          v32 = v5;
          v33 = *(_QWORD *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              v34 = *(double *)(v33 + 8);
              v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31)
                v31 = *(double *)(v33 + 8);
              if (v35 > v5)
                v37 = *(double *)(v33 + 16);
              else
                v37 = v30;
              if (v35 < v30)
              {
                v32 = v5;
                v30 = v37;
              }
              v33 += 48;
            }
            while ((__int128 *)v33 != v8);
          }
          if (v30 >= v31)
            v38 = v31;
          else
            v38 = v30;
          v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            v40 = v39 * floor(v38 / v39);
            v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41)
              v38 = v40;
            else
              v38 = v41;
          }
          *v100 = 0;
          v100[1] = 0;
          v100[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            v45 = *(char **)(a1 + 96);
            v44 = *(char **)(a1 + 104);
            v46 = v42;
            if (v44 != v45)
            {
              do
              {
                v47 = *((_OWORD *)v44 - 3);
                v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              v44 = *v100;
            }
            *(_QWORD *)(a1 + 96) = v46;
            *(_QWORD *)(a1 + 104) = v42;
            *(_QWORD *)(a1 + 112) = &v42[48 * v43];
            if (v44)
              operator delete(v44);
          }
          HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v102.var0 = a1;
            v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8)
              v51 = 0;
            else
              v51 = v50;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*,false>((uint64_t)v7, v8, (uint64_t)&v102, v51, 1);
          }
          if (*(_BYTE *)(a1 + 25))
            v97 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v97 = 0;
          if (v7 == (double *)v8)
          {
LABEL_135:
            v87 = *(_QWORD **)(a1 + 192);
            if (v87 != v6)
            {
              do
              {
                v88 = (_QWORD *)v87[1];
                if (v88)
                {
                  do
                  {
                    v89 = v88;
                    v88 = (_QWORD *)*v88;
                  }
                  while (v88);
                }
                else
                {
                  do
                  {
                    v89 = (_QWORD *)v87[2];
                    v90 = *v89 == (_QWORD)v87;
                    v87 = v89;
                  }
                  while (!v90);
                }
                v87 = v89;
              }
              while (v89 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7)
              operator delete(v7);
            goto LABEL_149;
          }
          v99 = 0;
          v57 = 0;
          v58 = v7;
          while (2)
          {
            v59 = *((_OWORD *)v58 + 1);
            *(_OWORD *)&v102.var0 = *(_OWORD *)v58;
            *(_OWORD *)&v102.var2 = v59;
            *(double *)&v102.var4 = v58[4];
            if (!v102.var4 || v102.var1 > v38)
            {
              v60 = *(_OWORD **)(a1 + 104);
              v61 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v60 >= v61)
              {
                v65 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - *v100) >> 4);
                v66 = v65 + 1;
                if (v65 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (_QWORD)*v100) >> 4);
                if (2 * v67 > v66)
                  v66 = 2 * v67;
                if (v67 >= 0x2AAAAAAAAAAAAAALL)
                  v68 = 0x555555555555555;
                else
                  v68 = v66;
                if (v68)
                  v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v68);
                else
                  v69 = 0;
                v73 = (_OWORD *)(v68 + 48 * v65);
                v74 = *(_OWORD *)v58;
                v75 = *((_OWORD *)v58 + 2);
                v73[1] = *((_OWORD *)v58 + 1);
                v73[2] = v75;
                *v73 = v74;
                v77 = *(char **)(a1 + 96);
                v76 = *(char **)(a1 + 104);
                v78 = v73;
                if (v76 != v77)
                {
                  do
                  {
                    v79 = *((_OWORD *)v76 - 3);
                    v80 = *((_OWORD *)v76 - 2);
                    *(_OWORD *)((char *)v78 - 21) = *(_OWORD *)(v76 - 21);
                    *(v78 - 3) = v79;
                    *(v78 - 2) = v80;
                    v78 -= 3;
                    v76 -= 48;
                  }
                  while (v76 != v77);
                  v76 = *v100;
                }
                v64 = v73 + 3;
                *(_QWORD *)(a1 + 96) = v78;
                *(_QWORD *)(a1 + 104) = v73 + 3;
                *(_QWORD *)(a1 + 112) = v68 + 48 * v69;
                if (v76)
                  operator delete(v76);
              }
              else
              {
                v62 = *(_OWORD *)v58;
                v63 = *((_OWORD *)v58 + 2);
                v60[1] = *((_OWORD *)v58 + 1);
                v60[2] = v63;
                *v60 = v62;
                v64 = v60 + 3;
              }
              *(_QWORD *)(a1 + 104) = v64;
LABEL_134:
              v58 += 6;
              if (v58 == (double *)v8)
                goto LABEL_135;
              continue;
            }
            break;
          }
          var2 = v102.var2;
          if (v102.var2 > v38)
            var2 = v38;
          v102.var2 = var2;
          for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v102.var1 >= *i; i += 2)
          {
            if (v102.var1 < i[1])
              goto LABEL_134;
          }
          if ((v57 & 1) != 0)
          {
            var3 = v102.var3;
            if (v99 == v102.var3 || *(_BYTE *)(a1 + 24))
              HDStatisticsDiscrete::addSample((uint64_t)v98, &v102);
          }
          else
          {
            HDStatisticsDiscrete::addSample((uint64_t)v98, &v102);
            var3 = v102.var3;
            v99 = v102.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_133;
          HDStatisticsBucket<HDStatisticsDiscrete>::_bundleIdentifierForSourceID(a1, var3);
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v81)
            goto LABEL_132;
          objc_msgSend(v97, "objectForKeyedSubscript:", v81);
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          v83 = v82;
          if (v82)
          {
            if (objc_msgSend(v82, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_131:

LABEL_132:
LABEL_133:
              v57 = 1;
              goto LABEL_134;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v97, "setObject:forKeyedSubscript:", v84, v81);

          }
          v85 = HDStatisticsBucket<HDStatisticsDiscrete>::_canonicalSourceIDForSourceID(a1, var3);
          v86 = HDStatisticsBucket<HDStatisticsDiscrete>::_statisticsForSource(a1, v85);
          HDStatisticsDiscrete::addSample((uint64_t)v86, &v102);
          goto LABEL_131;
        }
        v10 = *((unsigned __int8 *)v7 + 42);
        v11 = *((unsigned __int8 *)v7 + 41);
        v12 = *((unsigned __int8 *)v7 + 40);
        v13 = v7[1];
        v14 = v7[2];
        v15 = *((_QWORD *)v7 + 3);
        v16 = *((_BYTE *)v7 + 33);
        if (v14 <= a2)
          v17 = v7[2];
        else
          v17 = a2;
        if (v13 < a2)
          v18 = *((unsigned __int8 *)v7 + 32);
        else
          v18 = 0;
        if (v13 < a2)
          v19 = 0;
        else
          v19 = *((_BYTE *)v7 + 33);
        if (v13 < a2)
        {
          v20 = 0;
        }
        else
        {
          v17 = v7[2];
          v20 = *((_QWORD *)v7 + 3);
        }
        if (v13 < a2)
          v21 = 0.0;
        else
          v21 = v7[2];
        if (v13 < a2)
          v22 = 0.0;
        else
          v22 = *v7;
        if (v13 < a2)
          v23 = 0.0;
        else
          v23 = v7[1];
        if (v13 < a2)
          v24 = 0;
        else
          v24 = *((unsigned __int8 *)v7 + 32);
        if (*((_BYTE *)v7 + 32))
        {
          v14 = v17;
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
        }
        if (*((_BYTE *)v7 + 32))
          v25 = v21;
        else
          v25 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v26 = v22;
        else
          v26 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v27 = v23;
        else
          v27 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v28 = v24;
        else
          v28 = 0;
        v102.var0 = *v7;
        v102.var1 = v13;
        v102.var2 = v14;
        v102.var3 = v15;
        v102.var4 = v18;
        v102.var5 = v16;
        *(_DWORD *)(&v102.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v102.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&v103 = v26;
        *((double *)&v103 + 1) = v27;
        *(double *)&v104 = v25;
        *((_QWORD *)&v104 + 1) = v20;
        LOBYTE(v105) = v28;
        HIBYTE(v105) = v19;
        for (j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            v52 = v12 != 0;
            v53 = v11 != 0;
            v54 = v10 != 0;
            goto LABEL_145;
          }
        }
        v52 = v12 != 0;
        v53 = v11 != 0;
        v54 = v10 != 0;
        if (v18)
        {
          HDStatisticsDiscrete::addSample((uint64_t)v98, &v102);
          if (*(_BYTE *)(a1 + 25))
          {
            v55 = HDStatisticsBucket<HDStatisticsDiscrete>::_canonicalSourceIDForSourceID(a1, v15);
            v56 = HDStatisticsBucket<HDStatisticsDiscrete>::_statisticsForSource(a1, v55);
            HDStatisticsDiscrete::addSample((uint64_t)v56, &v102);
          }
          v52 = 1;
          v53 = 1;
          v54 = 1;
        }
LABEL_145:
        if (v28)
        {
          LOWORD(v101) = v105;
          v91 = v104;
          v92 = *v100;
          *(_OWORD *)v92 = v103;
          *((_OWORD *)v92 + 1) = v91;
          *((_QWORD *)v92 + 4) = v101;
          v92[40] = v52;
          v92[41] = v53;
          v92[42] = v54;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_149:
      v93 = *(double *)(a1 + 56);
      if (v93 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime(double) [Statistics = HDStatisticsDiscrete]");
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v94, "handleFailureInFunction:file:lineNumber:description:", v95, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v93 = *(double *)(a1 + 56);
      }
      v5 = v93;
    }
    while (v93 < a2);
  }
}

void sub_1B7C85164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsDiscrete>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v12;

  v12 = a2;
  v5 = *(_QWORD **)(a1 + 200);
  v3 = (uint64_t **)(a1 + 200);
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = (uint64_t **)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsDiscrete>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsDiscrete>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsDiscrete>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    v6 = std::__tree<std::__value_type<long long,HDStatisticsDiscrete>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsDiscrete>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsDiscrete>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsDiscrete>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 280), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsDiscrete>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 320);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7C85320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsDiscrete>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 360);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7C853F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsDiscrete>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsDiscrete>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsDiscrete>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x70uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *((_QWORD *)v9 + 13) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 256);
  v7 = *(char **)(*(_QWORD *)a4 + 264);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 256);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 256);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 264);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 256);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 264);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 256);
      v15 = *(char **)(*(_QWORD *)a4 + 264);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 264);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 264);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 256);
          v25 = *(char **)(*(_QWORD *)a4 + 264);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 264);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 264);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 256);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 256);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 264);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 256);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 264);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 256);
      v41 = *(char **)(*(_QWORD *)a4 + 264);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 264);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 264);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 256);
      v11 = *(char **)(*(_QWORD *)a3 + 264);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 264);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 264);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 256);
      v24 = *(char **)(*(_QWORD *)a3 + 264);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 264);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 264);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 256);
            v31 = *(char **)(*(_QWORD *)a3 + 264);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 264);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 264);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 256);
    v14 = *(char **)(*(_QWORD *)a5 + 264);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 264);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 264);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 256);
        v23 = *(char **)(*(_QWORD *)a5 + 264);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 264);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 264);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 256);
            v32 = *(char **)(*(_QWORD *)a5 + 264);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 264);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 264);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 256);
    v16 = *(char **)(*(_QWORD *)a6 + 264);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 264);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 264);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 256);
        v25 = *(char **)(*(_QWORD *)a6 + 264);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 264);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 264);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 256);
            v34 = *(char **)(*(_QWORD *)a6 + 264);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 264);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 264);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 256);
                v43 = *(char **)(*(_QWORD *)a6 + 264);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 264);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 264);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D04ED0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D04ED0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 552))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsDiscrete>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7C87400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 552))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 528);
      v7 = *(_QWORD *)(a1 + 520);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsDiscrete>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsDiscrete>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7C87688(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsDiscrete>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  char v10;
  double v11;
  _BOOL4 v12;
  double v14;
  char *v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t **v49;

  v3 = *(_BYTE *)(a2 + 32);
  if (v3)
  {
    v5 = a1 + 8;
    v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      v7 = *(uint64_t **)a2;
      v8 = *(double *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_BYTE *)(a2 + 33);
      v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36))
        v12 = v6 < v11;
      else
        v12 = v6 <= v11;
      if (v12)
      {
        if (v8 <= v11)
          v14 = *(double *)(a2 + 16);
        else
          v14 = *(double *)(a1 + 16);
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 224, *(_QWORD *)(a2 + 24), v9);
        v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 152) <= 0)
        {
          v33 = *(double *)(a1 + 8);
          v34 = *(double *)(a1 + 16);
          if (v6 >= v33)
            v33 = v6;
          if (v34 >= v14)
            v34 = v14;
          *(double *)(a1 + 48) = v33;
          *(double *)(a1 + 56) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            v16 = *(double *)(a1 + 8);
            if (v6 >= v16)
              v16 = v6;
            *(double *)(a1 + 48) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            v17 = *(double *)(a1 + 16);
            if (v17 >= v14)
              v17 = v14;
            *(double *)(a1 + 56) = v17;
          }
        }
        if (*(_BYTE *)(a1 + 32))
        {
          v35 = *(double *)(a1 + 64);
          if (v6 < v35)
            v35 = v6;
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime(v5, v6);
          v15 = *(char **)(a1 + 112);
        }
        v36 = *(_QWORD *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          v38 = 0x555555555555555;
          v39 = *(char **)(a1 + 104);
          v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v39) >> 4);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 < 0x2AAAAAAAAAAAAAALL)
            v38 = v41;
          if (v38)
          {
            v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            v39 = *(char **)(a1 + 104);
            v15 = *(char **)(a1 + 112);
          }
          else
          {
            v43 = 0;
          }
          v44 = v38 + 48 * v40;
          *(_QWORD *)v44 = v7;
          *(double *)(v44 + 8) = v6;
          *(double *)(v44 + 16) = v14;
          *(_QWORD *)(v44 + 24) = v9;
          v45 = v38 + 48 * v43;
          *(_BYTE *)(v44 + 32) = v3;
          *(_BYTE *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(_BYTE *)(v44 + 42) = 0;
          v37 = (_QWORD *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              v46 = *((_OWORD *)v15 - 3);
              v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 48) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            v39 = *(char **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 104) = v44;
          *(_QWORD *)(a1 + 112) = v37;
          *(_QWORD *)(a1 + 120) = v45;
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((_QWORD *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          v37 = v15 + 48;
          v15[42] = 0;
        }
        *(_QWORD *)(a1 + 112) = v37;
        if (!*(_BYTE *)(a1 + 192) || *(double *)(a1 + 168) <= v6)
        {
          *(_QWORD *)(a1 + 160) = v7;
          *(double *)(a1 + 168) = v6;
          *(double *)(a1 + 176) = v8;
          *(_QWORD *)(a1 + 184) = v9;
          *(_BYTE *)(a1 + 192) = v3;
          *(_BYTE *)(a1 + 193) = v10;
        }
        if (*(_BYTE *)(a1 + 33))
        {
          v48 = HDStatisticsBucket<HDStatisticsDiscrete>::_canonicalSourceIDForSourceID(v5, v9);
          v49 = HDStatisticsBucket<HDStatisticsDiscrete>::_statisticsForSource(v5, v48);
          if (!*((_BYTE *)v49 + 64) || *((double *)v49 + 5) <= v6)
          {
            v49[4] = v7;
            *((double *)v49 + 5) = v6;
            *((double *)v49 + 6) = v8;
            v49[7] = (uint64_t *)v9;
            *((_BYTE *)v49 + 64) = v3;
            *((_BYTE *)v49 + 65) = v10;
          }
        }
      }
      else
      {
        if (v6 < v11)
          v6 = *(double *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 416);
        v19 = *(_QWORD *)(a1 + 424);
        if (v18 >= v19)
        {
          v21 = *(_QWORD *)(a1 + 408);
          v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x333333333333333)
            v25 = 0x666666666666666;
          else
            v25 = v23;
          if (v25)
            v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          else
            v26 = 0;
          v27 = v25 + 40 * v22;
          v28 = v25 + 40 * v26;
          *(_QWORD *)v27 = v7;
          *(double *)(v27 + 8) = v6;
          *(double *)(v27 + 16) = v8;
          *(_QWORD *)(v27 + 24) = v9;
          *(_BYTE *)(v27 + 32) = v3;
          *(_BYTE *)(v27 + 33) = v10;
          v20 = v27 + 40;
          v30 = *(char **)(a1 + 408);
          v29 = *(char **)(a1 + 416);
          if (v29 != v30)
          {
            do
            {
              v31 = *(_OWORD *)(v29 - 40);
              v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            v29 = *(char **)(a1 + 408);
          }
          *(_QWORD *)(a1 + 408) = v27;
          *(_QWORD *)(a1 + 416) = v20;
          *(_QWORD *)(a1 + 424) = v28;
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v18 = v7;
          *(double *)(v18 + 8) = v6;
          *(double *)(v18 + 16) = v8;
          *(_QWORD *)(v18 + 24) = v9;
          *(_BYTE *)(v18 + 32) = v3;
          v20 = v18 + 40;
          *(_BYTE *)(v18 + 33) = v10;
        }
        *(_QWORD *)(a1 + 416) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 554))
  {
    *(_BYTE *)(a1 + 556) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 556) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7C87B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsDiscrete>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 408), *(_QWORD *)(a1 + 416), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 416) - *(_QWORD *)(a1 + 408)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsDiscrete>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsDiscrete>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7C87C38(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsDiscrete>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *i;
  _QWORD *v15;

  v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 432), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 64);
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_QWORD *)(v8 + 152) = 0;
  if (*(_QWORD *)(v8 + 176))
  {
    v9 = *(_QWORD *)(a1 + 208);
    v10 = *(_QWORD **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = a1 + 208;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    if (v10[1])
      v11 = (_QWORD *)v10[1];
    else
      v11 = v10;
    if (v11)
    {
      v12 = (_QWORD *)v11[2];
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if ((_QWORD *)*v12 == v11)
        {
          *v12 = 0;
          while (1)
          {
            v15 = (_QWORD *)v12[1];
            if (!v15)
              break;
            do
            {
              v12 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; v13 = (_QWORD *)v12[1])
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (i = (_QWORD *)v12[2]; i; i = (_QWORD *)i[2])
          v12 = i;
        v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 432));
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a1 + 408);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 556))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 556) = 0;
  }

}

void sub_1B7C87DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 552))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7C87E94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 568));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 552) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7C881F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C404725BC8DLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7C883A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsDiscrete>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7C88610(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  char v18;

  v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v8 = 1;
    v9 = a6;
  }
  v13 = a5;
  v14 = v9;
  v15 = a7;
  v16 = a2;
  v17 = v8;
  v18 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  else
  {
    v11 = v7 <= a6;
    v12 = *(double *)(a1 + 40);
    if (v9 >= v12)
      v11 = 0;
    if (!v11 || a7 <= v12)
      v12 = a7;
    v14 = v9;
    v15 = v12;
    v17 = v11;
    if (v11)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 552))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7C89298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7C89338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D04F80;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_WORD *)(a1 + 624) = 1;
  *(_BYTE *)(a1 + 626) = 0;
  *(_BYTE *)(a1 + 628) = 0;
  *(_QWORD *)(a1 + 632) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 672) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D04F80;
  v2 = *(void **)(a1 + 656);
  if (v2)
  {
    *(_QWORD *)(a1 + 664) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 592);
  if (v3)
  {
    *(_QWORD *)(a1 + 600) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 624) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

}

void sub_1B7C894A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 632) = v4;
    v3 = v5;
  }

}

void sub_1B7C89504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 80, a2);
  v7 = a2;
  v4 = a1[80];
  v5 = a1[77];
  a1[77] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[77]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 256) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7C89698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  void *v3;
  _BYTE v4[8];
  double v5;

  if (*(_BYTE *)(a1 + 624))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v5);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7C89740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 626))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 625))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 627))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 664);
    v18 = *(_QWORD *)(a1 + 672);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 656);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 664);
      v33 = *(char **)(a1 + 656);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 656);
      }
      *(_QWORD *)(a1 + 656) = v28;
      *(_QWORD *)(a1 + 664) = v21;
      *(_QWORD *)(a1 + 672) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 664) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7C89994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 626))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 626) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 625))
    goto LABEL_5;
  v9 = *(void **)(a1 + 648);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_381);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 648);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 648);
  *(_QWORD *)(a1 + 648) = 0;

  *(_BYTE *)(a1 + 625) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 656);
    *(_QWORD *)(a1 + 672) = 0;
    *(_QWORD *)(a1 + 664) = 0;
    *(_QWORD *)(a1 + 656) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 656);
      v37 = *(__int128 **)(a1 + 664);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 664);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 664) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 656);
  v39 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 600) != *(_QWORD *)(a1 + 592))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 600) != *(_QWORD *)(a1 + 592));
  }
  *(_BYTE *)(a1 + 626) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 628))
    {
      *(_BYTE *)(a1 + 628) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 626) = 0;
LABEL_83:

  return v7;
}

void sub_1B7C8A08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 626) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 627) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 626))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 626))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 648);
    *(_QWORD *)(a1 + 648) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 625) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 625))
  {
    v8 = *(void **)(a1 + 648);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 648);
      *(_QWORD *)(a1 + 648) = v9;

      v8 = *(void **)(a1 + 648);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7C8A388(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 624) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 624) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7C8A4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 624) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 624), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(int **)(a1 + 384);
  if (v9 != (int *)(a1 + 392))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, v9 + 10);
      v10 = *((_QWORD *)v9 + 4);
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (int *)*((_QWORD *)v9 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(int **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (int *)*((_QWORD *)v9 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (int *)(a1 + 392));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 592);
  for (k = *(int8x16_t **)(a1 + 600); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7C8A840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **i;
  _QWORD **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **j;
  uint64_t **v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t k;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  id v60;
  _QWORD *v61;
  uint64_t v62;
  id v63;
  __n128 v64;
  void *v65[2];
  __int128 v66;
  int8x16_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  int8x16_t v72;
  uint64_t v73;
  uint64_t v74[4];
  void *__p;
  char *v76;
  unint64_t v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _QWORD v83[10];
  uint64_t **v84;
  uint64_t *v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  __int128 v95;
  __int128 v96;
  int v97;
  __int128 v98;
  __int128 v99;
  int v100;
  void (**v101)(statistics::StatisticsEngine *__hidden);
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  _BYTE v108[32];
  unint64_t v109;
  int v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int16 v121;

  v60 = a2;
  *(_BYTE *)(a1 + 624) = objc_msgSend(v60, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v60;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v64.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v65 = 0u;
  v66 = 0u;
  v109 = 0;
  v63 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v108, (const unsigned __int8 *)objc_msgSend(v63, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v109));
  v62 = a1;
  v101 = &off_1E6D09A88;
  v102 = 0;
  v106 = 0;
  v104 = 0;
  v105 = 0;
  v107 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v101, (PB::Reader *)v108);
  v64.n128_u64[0] = v103;
  if (v102)
  {
    v71 = 0;
    memset(v74, 0, sizeof(v74));
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    LOWORD(v82) = 0;
    memset(v83, 0, 74);
    v86 = 0;
    __p = 0;
    v78 = 0;
    v76 = 0;
    v77 = 0;
    v85 = 0;
    v84 = &v85;
    v87 = 0u;
    v88 = 0u;
    v89 = 1065353216;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0;
    v94 = 1065353216;
    v95 = 0u;
    v96 = 0u;
    v97 = 1065353216;
    v98 = 0u;
    v99 = 0u;
    v100 = 1065353216;
    v67 = vextq_s8(*(int8x16_t *)(v102 + 8), *(int8x16_t *)(v102 + 8), 8uLL);
    v4 = *(_QWORD *)(v102 + 72);
    v68 = *(_QWORD *)(v102 + 64);
    v69 = *(_BYTE *)(v102 + 185);
    v70 = *(_BYTE *)(v102 + 186);
    v72 = vextq_s8(*(int8x16_t *)(v102 + 24), *(int8x16_t *)(v102 + 24), 8uLL);
    v73 = v4;
    v5 = *(_QWORD *)(v102 + 80);
    v6 = *(_QWORD *)(v102 + 88);
    v61 = (_QWORD *)v102;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v77)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v77 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v77 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v76;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v76 = (char *)(v19 + 6);
          v77 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v76 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = (_QWORD *)v61[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v110, v23);
      v78 = v110;
      v82 = v114;
      v79 = v111;
      v80 = v112;
      v81 = v113;
      v83[0] = v115;
      if (v83[1])
      {
        v83[2] = v83[1];
        operator delete((void *)v83[1]);
      }
      *(_OWORD *)&v83[1] = v116;
      v83[3] = v117;
      v117 = 0;
      v116 = 0uLL;
      v83[4] = v118;
      *(_OWORD *)&v83[5] = v119;
      *(_OWORD *)&v83[7] = v120;
      LOWORD(v83[9]) = v121;
    }
    v25 = (_QWORD **)v61[17];
    for (i = (_QWORD **)v61[18]; v25 != i; ++v25)
    {
      v26 = (uint64_t)*v25;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v110, *v25);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v85;
      for (j = &v85; ; v28 = *j)
      {
        v30 = j;
        if (!v28)
          break;
        while (1)
        {
          j = (uint64_t **)v28;
          v31 = v28[4];
          if (v31 > v27)
            break;
          if (v31 >= v27)
          {
            v32 = (char *)j;
            goto LABEL_37;
          }
          v28 = j[1];
          if (!v28)
          {
            v30 = j + 1;
            goto LABEL_34;
          }
        }
      }
LABEL_34:
      v32 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v32 + 4) = v27;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 56) = 0u;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      *(_OWORD *)(v32 + 104) = 0u;
      *(_OWORD *)(v32 + 120) = 0u;
      *(_OWORD *)(v32 + 136) = 0u;
      *(_OWORD *)(v32 + 152) = 0u;
      *(_OWORD *)(v32 + 168) = 0u;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = j;
      *v30 = (uint64_t *)v32;
      v33 = (uint64_t *)v32;
      if (*v84)
      {
        v84 = (uint64_t **)*v84;
        v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v85, v33);
      ++v86;
LABEL_37:
      v34 = (void *)*((_QWORD *)v32 + 14);
      *((_DWORD *)v32 + 10) = v110;
      v35 = v114;
      v37 = v112;
      v36 = v113;
      *((_OWORD *)v32 + 3) = v111;
      *((_OWORD *)v32 + 4) = v37;
      *((_OWORD *)v32 + 5) = v36;
      *((_QWORD *)v32 + 12) = v35;
      *((_QWORD *)v32 + 13) = v115;
      if (v34)
      {
        *((_QWORD *)v32 + 15) = v34;
        operator delete(v34);
        *((_QWORD *)v32 + 14) = 0;
        *((_QWORD *)v32 + 15) = 0;
        *((_QWORD *)v32 + 16) = 0;
      }
      *((_OWORD *)v32 + 7) = v116;
      *((_QWORD *)v32 + 16) = v117;
      v117 = 0;
      v116 = 0uLL;
      *((_QWORD *)v32 + 17) = v118;
      v38 = v120;
      *((_OWORD *)v32 + 9) = v119;
      *((_OWORD *)v32 + 10) = v38;
      *((_WORD *)v32 + 88) = v121;
    }
    v39 = v61[5];
    for (k = v61[6]; v39 != k; v39 += 8)
    {
      v42 = *(double *)(*(_QWORD *)v39 + 8);
      v41 = *(double *)(*(_QWORD *)v39 + 16);
      if (v42 >= v41)
        v43 = *(double *)(*(_QWORD *)v39 + 16);
      else
        v43 = *(double *)(*(_QWORD *)v39 + 8);
      if (v41 < v42)
        v41 = *(double *)(*(_QWORD *)v39 + 8);
      HKIntervalMask<double>::_insertInterval(v74, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((uint64_t)&v64.n128_i64[1], (uint64_t)&v67);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v67);
  }
  v44 = v104;
  v45 = v105;
  if (v104 != v105)
  {
    v46 = (char *)v65[1];
    do
    {
      v47 = *(_QWORD *)(*(_QWORD *)v44 + 24);
      v48 = *(_QWORD *)(*(_QWORD *)v44 + 32);
      v49 = *(_QWORD *)(*(_QWORD *)v44 + 8);
      v50 = *(_QWORD *)(*(_QWORD *)v44 + 16);
      if ((unint64_t)v46 >= (unint64_t)v66)
      {
        v51 = (char *)v65[0];
        v52 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - (char *)v65[0]) >> 3);
        v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) > v53)
          v53 = 0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) >= 0x333333333333333)
          v54 = 0x666666666666666;
        else
          v54 = v53;
        if (v54)
        {
          v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          v46 = (char *)v65[1];
          v51 = (char *)v65[0];
        }
        else
        {
          v55 = 0;
        }
        v56 = v54 + 40 * v52;
        *(_QWORD *)v56 = v48;
        *(_QWORD *)(v56 + 8) = v47;
        *(_QWORD *)(v56 + 16) = v49;
        *(_QWORD *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        v57 = (char *)v56;
        if (v46 != v51)
        {
          do
          {
            v58 = *(_OWORD *)(v46 - 40);
            v59 = *(_OWORD *)(v46 - 24);
            *((_WORD *)v57 - 4) = *((_WORD *)v46 - 4);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while (v46 != v51);
          v51 = (char *)v65[0];
        }
        v46 = (char *)(v56 + 40);
        v65[0] = v57;
        v65[1] = (void *)(v56 + 40);
        *(_QWORD *)&v66 = v54 + 40 * v55;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *(_QWORD *)v46 = v48;
        *((_QWORD *)v46 + 1) = v47;
        *((_QWORD *)v46 + 2) = v49;
        *((_QWORD *)v46 + 3) = v50;
        *((_WORD *)v46 + 16) = 1;
        v46 += 40;
      }
      v65[1] = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v101);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(v62 + 112), &v64);
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v64.n128_i64[1]);

}

void sub_1B7C8B004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x3F0]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3A0]);
  v10 = (void *)STACK[0x388];
  if (STACK[0x388])
  {
    STACK[0x390] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x360]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy((_QWORD *)STACK[0x350]);
  v11 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v11;
    operator delete(v11);
  }
  v12 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v12;
    operator delete(v12);
  }
  objc_destroyWeak((id *)&STACK[0x298]);
  v13 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v13;
    operator delete(v13);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x420]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 242) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 480);
  if (v2)
  {
    *(_QWORD *)(a1 + 488) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 432);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 392);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 352);
  v2 = *(void **)(a1 + 328);
  if (v2)
  {
    *(_QWORD *)(a1 + 336) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 288);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 272));
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    v2 = (void *)a1[14];
    if (v2)
    {
      a1[15] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[472];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[408];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 640));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 624) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7C8B57C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 60), a2 + 30);
  v4 = a2[31].n128_u64[1];
  a2[31].n128_u64[1] = 0;
  v5 = (void *)a1[63];
  a1[63] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v12 = *(_OWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 144);
  v14 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v13;
  *(_OWORD *)(a1 + 160) = v14;
  *(_OWORD *)(a1 + 128) = v12;
  v15 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = v15;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 192), *(const void **)(a2 + 192), *(_QWORD *)(a2 + 200), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 4);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v16 = *(_OWORD *)(a2 + 240);
  v17 = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v16;
  v18 = (_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 256) = v17;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  v19 = *(_QWORD **)(a2 + 264);
  if (v19 != (_QWORD *)(a2 + 272))
  {
    v20 = 0;
    v21 = (_QWORD *)(a1 + 272);
    while (1)
    {
      v22 = (_QWORD *)(a1 + 272);
      if (v21 == v18)
        goto LABEL_12;
      v23 = v20;
      v24 = (_QWORD *)(a1 + 272);
      if (v20)
      {
        do
        {
          v22 = v23;
          v23 = (_QWORD *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v24[2];
          v25 = *v22 == (_QWORD)v24;
          v24 = v22;
        }
        while (v25);
      }
      v26 = v19[4];
      if (v22[4] < v26)
      {
LABEL_12:
        if (v20)
          v27 = (uint64_t **)v22;
        else
          v27 = (uint64_t **)(a1 + 272);
        if (v20)
          v28 = (uint64_t **)(v22 + 1);
        else
          v28 = (uint64_t **)(a1 + 272);
        if (!*v28)
        {
LABEL_28:
          v31 = operator new(0xB8uLL);
          v31[4] = v19[4];
          *((_DWORD *)v31 + 10) = *((_DWORD *)v19 + 10);
          v32 = *((_OWORD *)v19 + 3);
          v33 = *((_OWORD *)v19 + 4);
          v34 = *((_OWORD *)v19 + 5);
          v31[12] = v19[12];
          *((_OWORD *)v31 + 4) = v33;
          *((_OWORD *)v31 + 5) = v34;
          *((_OWORD *)v31 + 3) = v32;
          v35 = v19[13];
          v31[14] = 0;
          v31[13] = v35;
          v31[15] = 0;
          v31[16] = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v31 + 14, (const void *)v19[14], v19[15], (uint64_t)(v19[15] - v19[14]) >> 4);
          v31[17] = v19[17];
          v36 = *((_OWORD *)v19 + 9);
          v37 = *((_OWORD *)v19 + 10);
          v31[22] = v19[22];
          *((_OWORD *)v31 + 9) = v36;
          *((_OWORD *)v31 + 10) = v37;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 264), (uint64_t)v27, v28, v31);
        }
      }
      else
      {
        v28 = (uint64_t **)(a1 + 272);
        v27 = (uint64_t **)(a1 + 272);
        if (!v20)
          goto LABEL_28;
        v29 = v20;
        while (1)
        {
          while (1)
          {
            v27 = (uint64_t **)v29;
            v30 = v29[4];
            if (v30 <= v26)
              break;
            v29 = *v27;
            v28 = v27;
            if (!*v27)
              goto LABEL_28;
          }
          if (v30 >= v26)
            break;
          v29 = v27[1];
          if (!v29)
          {
            v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      v38 = (_QWORD *)v19[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v19[2];
          v25 = *v39 == (_QWORD)v19;
          v19 = v39;
        }
        while (!v25);
      }
      if (v39 == (_QWORD *)(a2 + 272))
        break;
      v20 = (_QWORD *)*v18;
      v21 = *(_QWORD **)(a1 + 264);
      v19 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 288, a2 + 288);
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 328), *(const void **)(a2 + 328), *(_QWORD *)(a2 + 336), (uint64_t)(*(_QWORD *)(a2 + 336) - *(_QWORD *)(a2 + 328)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 352, a2 + 352);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 392, a2 + 392);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 432, a2 + 432);
  return a1;
}

void sub_1B7C8B98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v12 + 336) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(*v13);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 200) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 192, (__n128 *)(a2 + 192));
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v13 = *(_OWORD *)(a2 + 224);
  v14 = *(_OWORD *)(a2 + 240);
  *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v13;
  *(_OWORD *)(a1 + 240) = v14;
  v15 = a1 + 272;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 272));
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v16 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 272) = v16;
  v17 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 280) = v17;
  if (v17)
  {
    *(_QWORD *)(v16 + 16) = v15;
    *(_QWORD *)(a2 + 264) = a2 + 272;
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(a2 + 280) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 264) = v15;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 288, (uint64_t *)(a2 + 288));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 328, (__n128 *)(a2 + 328));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 352, (uint64_t *)(a2 + 352));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 392, (uint64_t *)(a2 + 392));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 432, (uint64_t *)(a2 + 432));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  double v3;
  id v4;
  double *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  id v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  __n128 v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  __n128 v35;
  id v36;
  id v37;
  uint64_t **i;
  uint64_t *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  void *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  void *v56;
  __n128 v57;
  double *v58;
  double v59;
  id v60;
  double v61;
  double v62;
  double v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  uint64_t **v70;
  uint64_t *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  double v75;
  double v76;
  void *v77;
  void *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  int v88;
  void *v89;
  void *v90;
  int v91;
  void *v93;
  id v94;
  id v95;
  id v96;
  uint64_t v97;
  id v99;
  _BYTE v100[16];
  uint64_t **v101;
  void *__p;
  void *v103;
  _QWORD v104[3];
  _QWORD *v105;
  _QWORD v106[3];
  _QWORD *v107;
  _QWORD v108[3];
  _QWORD *v109;
  _BYTE v110[24];
  _BYTE *v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v3 = *(double *)a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308)
    v5 = (double *)a2;
  v93 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  v97 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v7 = (void *)v6;
  v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = *(id *)(a1 + 16);
    if (objc_msgSend(v9, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v9, "underlyingSampleType");
      v10 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v10;
    }

  }
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v8, v93, v7);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v14 = *(uint64_t **)(a2 + 328);
      v15 = *(uint64_t **)(v97 + 336);
      while (v14 != v15)
      {
        v16 = *v14;
        v17 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v17, "sourceForSourceID:", v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          if ((objc_msgSend(v13, "containsObject:", v18) & 1) == 0)
            objc_msgSend(v13, "addObject:", v18);
        }

        ++v14;
      }
      v19 = (void *)objc_msgSend(v13, "copy");
      objc_msgSend(v11, "_setSources:", v19);

    }
  }

  v104[0] = &off_1E6D05170;
  v105 = v104;
  v94 = v11;
  v20 = (uint64_t)v105;
  if (!v105)
    goto LABEL_22;
  if (v105 != v104)
  {
    v20 = (*(uint64_t (**)(void))(*v105 + 16))();
LABEL_22:
    v109 = (_QWORD *)v20;
    goto LABEL_24;
  }
  v109 = v108;
  (*(void (**)(uint64_t, _QWORD *))(v104[0] + 24))((uint64_t)v104, v108);
LABEL_24:
  v111 = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E6D05050;
  v22 = v21 + 1;
  v23 = (uint64_t)v109;
  if (!v109)
  {
LABEL_27:
    v21[4] = v23;
    goto LABEL_29;
  }
  if (v109 != v108)
  {
    v23 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v109 + 16))(v109, v22);
    goto LABEL_27;
  }
  v21[4] = v22;
  (*(void (**)(_QWORD *))(v108[0] + 24))(v108);
LABEL_29:
  v111 = v21;
  v24 = v94;
  v25 = (void *)MEMORY[0x1E0CB6A28];
  v26 = v24;
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v100, v97);
  if (!v111)
    std::__throw_bad_function_call[abi:ne180100]();
  v29 = (*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v111 + 48))(v111, v100, v28);
  v30 = *(double **)(v29 + 8);
  v31 = 0.0;
  while (v30 != *(double **)(v29 + 16))
  {
    v33 = *v30;
    v32 = v30[1];
    v30 += 2;
    v31 = v31 + v32 - v33;
  }
  objc_msgSend(v25, "quantityWithUnit:doubleValue:", v27, v31 + *(double *)(v29 + 32));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setDuration:", v34);

  if (__p)
  {
    v103 = __p;
    operator delete(__p);
  }

  v35 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v100, v97);
  if (!v111)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v24, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v111 + 48))(v111, v100, v35));
  if (__p)
  {
    v103 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v36 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v37 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v100, v97);
    for (i = v101; i; i = (uint64_t **)*i)
    {
      v39 = i[2];
      v40 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v111)
        std::__throw_bad_function_call[abi:ne180100]();
      v42 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v111 + 48))(v111, (uint64_t *)i + 3);
      v43 = *(double **)(v42 + 8);
      v44 = 0.0;
      while (v43 != *(double **)(v42 + 16))
      {
        v46 = *v43;
        v45 = v43[1];
        v43 += 2;
        v44 = v44 + v45 - v46;
      }
      objc_msgSend(v40, "quantityWithUnit:doubleValue:", v41, v44 + *(double *)(v42 + 32));
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "setObject:forKeyedSubscript:", v47, v39);

      if (!v111)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v111 + 48))(v111, (uint64_t *)i + 3));
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "setObject:forKeyedSubscript:", v48, v39);

      v24 = v26;
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v100);
    objc_msgSend(v24, "setDurationBySource:", v36);
    objc_msgSend(v24, "setDataCountBySource:", v37);

  }
  v49 = v111;
  if (v111 == v110)
  {
    v50 = 4;
    v49 = v110;
  }
  else
  {
    if (!v111)
      goto LABEL_52;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_52:
  v51 = v109;
  if (v109 == v108)
  {
    v52 = 4;
    v51 = v108;
  }
  else
  {
    if (!v109)
      goto LABEL_57;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_57:
  v53 = (uint64_t)v105;
  if (!v105)
  {
LABEL_60:
    v107 = (_QWORD *)v53;
    goto LABEL_62;
  }
  if (v105 != v104)
  {
    v53 = (*(uint64_t (**)(void))(*v105 + 16))();
    goto LABEL_60;
  }
  v107 = v106;
  (*(void (**)(uint64_t, _QWORD *))(v104[0] + 24))((uint64_t)v104, v106);
LABEL_62:
  v111 = 0;
  v54 = operator new(0x28uLL);
  *v54 = &off_1E6D050E0;
  v55 = (uint64_t)v107;
  if (!v107)
  {
LABEL_65:
    v54[4] = v55;
    goto LABEL_67;
  }
  if (v107 != v106)
  {
    v55 = (*(uint64_t (**)(void))(*v107 + 16))();
    goto LABEL_65;
  }
  v54[4] = v54 + 1;
  (*(void (**)(_QWORD *))(v106[0] + 24))(v106);
LABEL_67:
  v111 = v54;
  v99 = v24;
  objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v100, v97);
  if (!v111)
    std::__throw_bad_function_call[abi:ne180100]();
  v58 = (double *)(*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v111 + 48))(v111, v100, v57);
  v59 = *v58;
  v60 = (id)*((_QWORD *)v58 + 1);
  v62 = v58[2];
  v61 = v58[3];
  v63 = v58[4];
  if (__p)
  {
    v103 = __p;
    operator delete(__p);
  }
  objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v56, v59);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v99, "setSumQuantity:", v64);

  objc_msgSend(v99, "setDataCount:", v60);
  v65 = *(_QWORD *)(a1 + 24);
  LOBYTE(v66) = v65;
  if ((v65 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v56, v62);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v99, "setMostRecentQuantity:", v67);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v61, v63);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v99, "setMostRecentQuantityDateInterval:", v68);

    v66 = *(_QWORD *)(a1 + 24);
  }
  if ((v66 & 1) != 0)
  {
    v60 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v69 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    if ((v65 & 0x20) != 0)
    {
      v95 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v96 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    }
    else
    {
      v95 = 0;
      v96 = 0;
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v100, v97);
    v70 = v101;
    if (v101)
    {
      v24 = (id)0x1E0CB3000;
      do
      {
        v71 = v70[2];
        if (!v111
          || (objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v56, *(double *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v111 + 48))(v111, (uint64_t *)v70 + 3)), v72 = (void *)objc_claimAutoreleasedReturnValue(), objc_msgSend(v60, "setObject:forKeyedSubscript:", v72, v71), v72, !v111))
        {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v111 + 48))(v111, (uint64_t *)v70 + 3)+ 8));
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v69, "setObject:forKeyedSubscript:", v73, v71);

        if ((v65 & 0x20) != 0)
        {
          if (!v111)
            std::__throw_bad_function_call[abi:ne180100]();
          v74 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v111 + 48))(v111, (uint64_t *)v70 + 3);
          v75 = *(double *)(v74 + 24);
          v76 = *(double *)(v74 + 32);
          objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v56, *(double *)(v74 + 16));
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v95, "setObject:forKeyedSubscript:", v77, v71);

          objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v75, v76);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v96, "setObject:forKeyedSubscript:", v78, v71);

        }
        v70 = (uint64_t **)*v70;
      }
      while (v70);
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v100);
    objc_msgSend(v99, "setSumQuantityBySource:", v60);
    objc_msgSend(v99, "setDataCountBySource:", v69);
    if ((v65 & 0x20) != 0)
    {
      objc_msgSend(v99, "setMostRecentQuantityBySource:", v95);
      objc_msgSend(v99, "setMostRecentQuantityDateIntervalBySource:", v96);
    }

  }
  v79 = v111;
  if (v111 == v110)
  {
    v80 = 4;
    v79 = v110;
  }
  else
  {
    if (!v111)
      goto LABEL_92;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_92:
  v81 = v107;
  if (v107 == v106)
  {
    v82 = 4;
    v81 = v106;
  }
  else
  {
    if (!v107)
      goto LABEL_97;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_97:

  v83 = v105;
  if (v105 == v104)
  {
    v84 = 4;
    v83 = v104;
    goto LABEL_101;
  }
  if (v105)
  {
    v84 = 5;
LABEL_101:
    (*(void (**)(void))(*v83 + 8 * v84))();
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v99, "averageQuantity");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  if (v86)
  {
    objc_msgSend(v99, "averageQuantity");
    v60 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v60, "isCompatibleWithUnit:", v85) & 1) == 0)
    {

LABEL_116:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v85);
      goto LABEL_117;
    }
  }
  objc_msgSend(v99, "minimumQuantity");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  if (v87)
  {
    objc_msgSend(v99, "minimumQuantity");
    v24 = (id)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v24, "isCompatibleWithUnit:", v85))
    {
      v88 = 1;
      goto LABEL_110;
    }
  }
  objc_msgSend(v99, "maximumQuantity");
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  if (v89)
  {
    objc_msgSend(v99, "maximumQuantity");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    v91 = objc_msgSend(v90, "isCompatibleWithUnit:", v85);

    v88 = v91 ^ 1;
    if (v87)
      goto LABEL_110;
  }
  else
  {
    v88 = 0;
    if (v87)
    {
LABEL_110:

      if (v86)
        goto LABEL_111;
      goto LABEL_115;
    }
  }
  if (v86)
  {
LABEL_111:

    if ((v88 & 1) == 0)
      goto LABEL_117;
    goto LABEL_116;
  }
LABEL_115:

  if (v88)
    goto LABEL_116;
LABEL_117:

  return v99;
}

void sub_1B7C8C738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char *a38)
{
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  v43 = *(_QWORD **)(v41 - 136);
  if (v43 == (_QWORD *)(v41 - 160))
  {
    v44 = 4;
    v43 = (_QWORD *)(v41 - 160);
  }
  else
  {
    if (!v43)
      goto LABEL_6;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_6:
  v45 = *(_QWORD **)(v41 - 200);
  if (v45 == (_QWORD *)(v41 - 224))
  {
    v46 = 4;
    v45 = (_QWORD *)(v41 - 224);
  }
  else
  {
    if (!v45)
      goto LABEL_11;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_11:

  v47 = a38;
  if (a38 == &a35)
  {
    v48 = 4;
    v47 = &a35;
  }
  else
  {
    if (!a38)
      goto LABEL_16;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
LABEL_16:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 312);
  v2 = *(_QWORD *)(a1 + 328);
  if (v1 != (*(_QWORD *)(a1 + 336) - v2) >> 3)
  {
    v4 = (void **)(a1 + 328);
    *(_QWORD *)(a1 + 336) = v2;
    std::vector<long long>::reserve((void **)(a1 + 328), v1);
    v5 = *(_QWORD **)(a1 + 304);
    if (v5)
    {
      v6 = *(char **)(a1 + 336);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 344);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 328);
            v6 = *(char **)(a1 + 336);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 328) = v16;
          *(_QWORD *)(a1 + 336) = v9;
          *(_QWORD *)(a1 + 344) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 336) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7C8CC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  int64_t v12;
  char v13;
  char v14;
  double v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  id WeakRetained;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  double v49;
  int64_t v50;
  _BOOL4 var4;
  BOOL var5;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  unint64_t var3;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  char *v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  void *v81;
  unint64_t v82;
  uint64_t *v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  double v100;
  int v101;
  int v102;
  int v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  unint64_t v107;
  uint64_t *v108;
  __int128 v109;
  char *v110;
  double v111;
  void *v112;
  void *v113;
  _QWORD *v114;
  double **v115;
  id *location;
  void *v117;
  id v118;
  uint64_t *v119;
  int64_t v120;
  double **v121;
  char v122;
  BOOL v123;
  int64_t v124;
  void **v125;
  uint64_t v126;
  HDRawQuantitySample v127;
  __int128 v128;
  __int128 v129;
  __int16 v130;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v125 = (void **)(a1 + 96);
    v121 = (double **)(a1 + 64);
    v119 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    v115 = (double **)(a1 + 192);
    v114 = (_QWORD *)(a1 + 272);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_124:
      *(double *)(a1 + 56) = a2;
LABEL_125:
      v111 = *(double *)(a1 + 56);
      if (v111 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative, HDStatisticsTimeInterval>>]");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v112, "handleFailureInFunction:file:lineNumber:description:", v113, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v111 = *(double *)(a1 + 56);
      }
      v5 = v111;
      if (v111 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v20 = a2;
      v21 = a2;
      v22 = v5;
      v23 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v24 = *(double *)(v23 + 8);
          v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21)
            v21 = *(double *)(v23 + 8);
          if (v25 > v5)
            v27 = *(double *)(v23 + 16);
          else
            v27 = v20;
          if (v25 < v20)
          {
            v22 = v5;
            v20 = v27;
          }
          v23 += 48;
        }
        while ((__int128 *)v23 != v7);
      }
      if (v20 >= v21)
        v28 = v21;
      else
        v28 = v20;
      v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        v30 = v29 * floor(v28 / v29);
        v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31)
          v28 = v30;
        else
          v28 = v31;
      }
      *v125 = 0;
      v125[1] = 0;
      v125[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        v35 = *(char **)(a1 + 96);
        v34 = *(char **)(a1 + 104);
        v36 = v32;
        if (v34 != v35)
        {
          do
          {
            v37 = *((_OWORD *)v34 - 3);
            v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          v34 = (char *)*v125;
        }
        *(_QWORD *)(a1 + 96) = v36;
        *(_QWORD *)(a1 + 104) = v32;
        *(_QWORD *)(a1 + 112) = &v32[48 * v33];
        if (v34)
          operator delete(v34);
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v127.var0 = a1;
        v40 = 126 - 2 * __clz(v8);
        if ((__int128 *)v6 == v7)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v127, v41, 1);
      }
      if (*(_BYTE *)(a1 + 25))
        v118 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v118 = 0;
      v117 = (void *)v6;
      if ((__int128 *)v6 == v7)
      {
LABEL_106:
        *(double *)(a1 + 216) = HKIntervalMask<double>::removeIntervalsBefore(v115, v28) + *(double *)(a1 + 216);
        v96 = *(_QWORD **)(a1 + 264);
        if (v96 != v114)
        {
          do
          {
            *((double *)v96 + 17) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 14, v28)
                                  + *((double *)v96 + 17);
            v97 = (_QWORD *)v96[1];
            if (v97)
            {
              do
              {
                v98 = v97;
                v97 = (_QWORD *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                v98 = (_QWORD *)v96[2];
                v99 = *v98 == (_QWORD)v96;
                v96 = v98;
              }
              while (!v99);
            }
            v96 = v98;
          }
          while (v98 != v114);
        }
        *(double *)(a1 + 56) = v28;

        if (v117)
          operator delete(v117);
        goto LABEL_125;
      }
      v120 = 0;
      v44 = 0;
      v45 = v6;
      while (2)
      {
        v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v127.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v127.var2 = v46;
        *(_QWORD *)&v127.var4 = *(_QWORD *)(v45 + 32);
        v47 = v46;
        v48 = v28 - v127.var1;
        v49 = *(double *)&v46 - v127.var1;
        if (v49 - (v28 - v127.var1) < 0.01)
        {
          v50 = 0;
          var4 = 0;
          var5 = 0;
          v53 = 0.0;
          v47 = 0;
          v54 = 0.0;
          if (!v127.var4)
            goto LABEL_59;
LABEL_54:
          v123 = var5;
          v124 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
          v56 = *(unsigned __int8 *)(v45 + 42);
          v57 = *(unsigned __int8 *)(v45 + 41);
          v122 = *(_BYTE *)(v45 + 40);
          if (!v127.var4)
            goto LABEL_87;
          if ((v44 & 1) != 0)
          {
            var3 = v127.var3;
            if (v120 == v127.var3 || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(v119, &v127, v56 == 0);
              v56 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(v119, &v127, v56 == 0);
            v56 = 1;
            var3 = v127.var3;
            v120 = v127.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_86;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v69)
            goto LABEL_85;
          objc_msgSend(v118, "objectForKeyedSubscript:", v69);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v71 = v70;
          if (v70)
          {
            if (objc_msgSend(v70, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              v44 = 1;
LABEL_87:
              if (var4)
              {
                v84 = v56 != 0;
                v86 = *(char **)(a1 + 104);
                v85 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((_QWORD *)v86 + 2) = v47;
                  *((_QWORD *)v86 + 3) = v124;
                  v86[32] = var4;
                  v86[33] = v123;
                  v86[40] = v122;
                  v86[41] = v57;
                  v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                v80 = (char *)*v125;
                v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (_BYTE *)*v125) >> 4);
                v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (_QWORD)v80) >> 4);
                if (2 * v89 > v88)
                  v88 = 2 * v89;
                if (v89 >= 0x2AAAAAAAAAAAAAALL)
                  v90 = 0x555555555555555;
                else
                  v90 = v88;
                if (v90)
                {
                  v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  v80 = *(char **)(a1 + 96);
                  v86 = *(char **)(a1 + 104);
                }
                else
                {
                  v91 = 0;
                }
                v92 = v90 + 48 * v87;
                *(double *)v92 = v54;
                *(double *)(v92 + 8) = v53;
                *(_QWORD *)(v92 + 16) = v47;
                *(_QWORD *)(v92 + 24) = v124;
                *(_BYTE *)(v92 + 32) = var4;
                *(_BYTE *)(v92 + 33) = v123;
                *(_BYTE *)(v92 + 40) = v122;
                *(_BYTE *)(v92 + 41) = v57;
                *(_BYTE *)(v92 + 42) = v84;
                v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    v94 = *((_OWORD *)v86 - 3);
                    v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 48) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  v80 = (char *)*v125;
                }
                v63 = (_OWORD *)(v92 + 48);
                *(_QWORD *)(a1 + 96) = v93;
                *(_QWORD *)(a1 + 104) = v92 + 48;
                *(_QWORD *)(a1 + 112) = v90 + 48 * v91;
                if (v80)
LABEL_103:
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v118, "setObject:forKeyedSubscript:", v81, v69);

          }
          v82 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
          v83 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v82);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(v83, &v127, v57 == 0);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          v127.var4 = 0;
          goto LABEL_59;
        }
        v55 = v48 / v49 * v127.var0;
        v50 = v127.var3;
        var5 = v127.var5;
        v54 = v127.var0 - v55;
        v127.var0 = v55;
        v127.var2 = v28;
        v53 = v28;
        var4 = v127.var4;
        if (v127.var4)
          goto LABEL_54;
LABEL_59:
        v59 = *(_OWORD **)(a1 + 104);
        v60 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          v61 = *(_OWORD *)v45;
          v62 = *(_OWORD *)(v45 + 32);
          v59[1] = *(_OWORD *)(v45 + 16);
          v59[2] = v62;
          *v59 = v61;
          v63 = v59 + 3;
          goto LABEL_104;
        }
        v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (_BYTE *)*v125) >> 4);
        v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (_QWORD)*v125) >> 4);
        if (2 * v66 > v65)
          v65 = 2 * v66;
        if (v66 >= 0x2AAAAAAAAAAAAAALL)
          v67 = 0x555555555555555;
        else
          v67 = v65;
        if (v67)
          v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        else
          v68 = 0;
        v72 = (_OWORD *)(v67 + 48 * v64);
        v73 = *(_OWORD *)v45;
        v74 = *(_OWORD *)(v45 + 32);
        v72[1] = *(_OWORD *)(v45 + 16);
        v72[2] = v74;
        *v72 = v73;
        v76 = *(char **)(a1 + 96);
        v75 = *(char **)(a1 + 104);
        v77 = v72;
        if (v75 != v76)
        {
          do
          {
            v78 = *((_OWORD *)v75 - 3);
            v79 = *((_OWORD *)v75 - 2);
            *(_OWORD *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          v75 = (char *)*v125;
        }
        v63 = v72 + 3;
        *(_QWORD *)(a1 + 96) = v77;
        *(_QWORD *)(a1 + 104) = v72 + 3;
        *(_QWORD *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(_QWORD *)(a1 + 104) = v63;
LABEL_105:
        v45 += 48;
        if ((__int128 *)v45 == v7)
          goto LABEL_106;
        continue;
      }
    }
    v10 = *(double *)v6;
    v9 = *(double *)(v6 + 8);
    v11 = *(double *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 24);
    v13 = *(_BYTE *)(v6 + 32);
    v14 = *(_BYTE *)(v6 + 33);
    v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        v42 = 0;
        v43 = 0;
        v18 = 0.0;
        v17 = *(double *)(v6 + 16);
        v16 = *(_BYTE *)(v6 + 32);
        v19 = 0.0;
        v11 = 0.0;
        v13 = 0;
LABEL_117:
        v101 = *(unsigned __int8 *)(v6 + 42);
        v102 = *(unsigned __int8 *)(v6 + 41);
        v103 = *(unsigned __int8 *)(v6 + 40);
        v127.var0 = v10;
        v127.var1 = v9;
        v127.var2 = v17;
        v127.var3 = v12;
        v127.var4 = v16;
        v127.var5 = v14;
        *(_DWORD *)(&v127.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v127.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&v128 = v18;
        *((double *)&v128 + 1) = v19;
        *(double *)&v129 = v11;
        *((_QWORD *)&v129 + 1) = v42;
        LOBYTE(v130) = v13;
        HIBYTE(v130) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
        v104 = v103 != 0;
        v105 = v102 != 0;
        v106 = v101 != 0;
        if (v127.var4)
        {
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(v119, &v127, v101 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v107 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v127.var3);
            v108 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v107);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(v108, &v127, v102 == 0);
          }
          v104 = 1;
          v105 = 1;
          v106 = 1;
        }
        if ((_BYTE)v130)
        {
          LOWORD(v126) = v130;
          v109 = v129;
          v110 = (char *)*v125;
          *(_OWORD *)v110 = v128;
          *((_OWORD *)v110 + 1) = v109;
          *((_QWORD *)v110 + 4) = v126;
          v110[40] = v104;
          v110[41] = v105;
          v110[42] = v106;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_124;
      }
      v100 = v10 * (v15 / (v11 - v9));
      v17 = a2;
      v16 = *(_BYTE *)(v6 + 32);
      v18 = v10 - v100;
      v10 = v100;
      v19 = a2;
    }
    else
    {
      v16 = 0;
      v17 = *(double *)(v6 + 16);
      v18 = *(double *)v6;
      v19 = *(double *)(v6 + 8);
    }
    v42 = *(_QWORD *)(v6 + 24);
    v43 = *(_BYTE *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1B7C8D5EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  HDRawQuantitySample *v4;
  uint64_t *v5;
  double var0;
  int v7;
  uint64_t *v8;
  int v9;
  int v10;
  double *v11;
  void *v12;
  _OWORD *v13;
  int v14;

  v4 = a2;
  v5 = result;
  var0 = a2->var0;
  v7 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v7 = 1;
  if (v7)
  {
    if (v7 == 1)
    {
      if (!*(_DWORD *)result)
      {
        v10 = 1;
        goto LABEL_17;
      }
    }
    else if (v7 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        *((double *)result + 1) = var0 + *((double *)result + 1);
        ++result[2];
        v8 = result + 8;
        v9 = 1;
        return HDStatisticsTimeInterval::addSample(v8, a2, v9);
      }
      v10 = 2;
LABEL_17:
      *(_DWORD *)result = v10;
      *(_OWORD *)(result + 1) = 0u;
      v11 = (double *)(result + 1);
      v13 = result + 9;
      v12 = (void *)result[9];
      *(_OWORD *)(v5 + 3) = 0u;
      *(_OWORD *)(v5 + 5) = 0u;
      *(_OWORD *)(v5 + 7) = 0u;
      if (v12)
      {
        v5[10] = (uint64_t)v12;
        operator delete(v12);
        v14 = *((unsigned __int8 *)v5 + 56);
        *v13 = 0u;
        *(_OWORD *)(v5 + 11) = 0u;
        if (v14 && *((double *)v5 + 4) > *((double *)v5 + 14))
        {
LABEL_23:
          *v11 = v4->var0 + *v11;
          if (a3)
            ++v5[2];
          v8 = v5 + 8;
LABEL_26:
          a2 = v4;
          v9 = a3;
          return HDStatisticsTimeInterval::addSample(v8, a2, v9);
        }
      }
      else
      {
        *v13 = 0uLL;
        *(_OWORD *)(v5 + 11) = 0uLL;
      }
      *(_OWORD *)(v5 + 3) = *(_OWORD *)(v5 + 13);
      *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 15);
      *((_WORD *)v5 + 28) = *((_WORD *)v5 + 68);
      goto LABEL_23;
    }
  }
  else if (!*(_DWORD *)result && !result[2])
  {
    *((double *)result + 1) = var0 + *((double *)result + 1);
    if (a3)
      result[2] = 1;
    v8 = result + 8;
    goto LABEL_26;
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 272);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 272);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 272) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 264);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 264), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 352), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 392);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7C8D964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 432);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7C8DA34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0xB8uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 328);
  v7 = *(char **)(*(_QWORD *)a4 + 336);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 328);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 328);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 336);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 328);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 336);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 328);
      v15 = *(char **)(*(_QWORD *)a4 + 336);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 336);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 336);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 328);
          v25 = *(char **)(*(_QWORD *)a4 + 336);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 336);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 336);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 328);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 328);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 336);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 328);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 336);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 328);
      v41 = *(char **)(*(_QWORD *)a4 + 336);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 336);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 336);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 328);
      v11 = *(char **)(*(_QWORD *)a3 + 336);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 336);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 336);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 328);
      v24 = *(char **)(*(_QWORD *)a3 + 336);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 336);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 336);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 328);
            v31 = *(char **)(*(_QWORD *)a3 + 336);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 336);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 336);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 328);
    v14 = *(char **)(*(_QWORD *)a5 + 336);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 336);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 336);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 328);
        v23 = *(char **)(*(_QWORD *)a5 + 336);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 336);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 336);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 328);
            v32 = *(char **)(*(_QWORD *)a5 + 336);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 336);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 336);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 328);
    v16 = *(char **)(*(_QWORD *)a6 + 336);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 336);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 336);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 328);
        v25 = *(char **)(*(_QWORD *)a6 + 336);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 336);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 336);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 328);
            v34 = *(char **)(*(_QWORD *)a6 + 336);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 336);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 336);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 328);
                v43 = *(char **)(*(_QWORD *)a6 + 336);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 336);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 336);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 128);
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 160);
  v5 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v6 = *(const void **)(a2 + 192);
  v7 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 72), v6, v7, (v7 - (uint64_t)v6) >> 4);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 216);
  result = *(__n128 *)(a2 + 224);
  v9 = *(_OWORD *)(a2 + 240);
  *(__n128 *)(a1 + 104) = result;
  *(_OWORD *)(a1 + 120) = v9;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 256);
  return result;
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  void *v47;
  _QWORD *v48;
  _QWORD *v50;
  unint64_t v51;
  _QWORD v52[2];
  char v53;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 264);
  v48 = (_QWORD *)(a2 + 272);
  if (v3 == (_QWORD *)(a2 + 272))
    return;
  v50 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_80;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v51 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0xA8uLL);
      v52[0] = v19;
      v52[1] = v50;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      v53 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        v12 = (uint64_t *)v52[0];
        if (v37)
        {
          *(_QWORD *)v52[0] = *v37;
        }
        else
        {
          *(_QWORD *)v52[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v50;
          if (!*v12)
          {
LABEL_76:
            v52[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v52);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v50;
            if (*v50)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v50;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v47 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v47)
            operator delete(v47);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = v12[1];
      if (v13 == v8)
        break;
      if (v51 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = (id)v12[2];
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    v39 = *((_OWORD *)v3 + 3);
    v40 = *((_OWORD *)v3 + 4);
    v41 = *((_OWORD *)v3 + 5);
    v12[10] = v3[12];
    *((_OWORD *)v12 + 3) = v40;
    *((_OWORD *)v12 + 4) = v41;
    *((_OWORD *)v12 + 2) = v39;
    v12[11] = v3[13];
    if (v12 + 2 != v3 + 4)
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 96, (char *)v3[14], v3[15], (uint64_t)(v3[15] - v3[14]) >> 4);
    v12[15] = v3[17];
    v42 = *((_OWORD *)v3 + 9);
    v43 = *((_OWORD *)v3 + 10);
    *((_WORD *)v12 + 80) = *((_WORD *)v3 + 88);
    *((_OWORD *)v12 + 8) = v42;
    *((_OWORD *)v12 + 9) = v43;

LABEL_80:
    v44 = (_QWORD *)v3[1];
    if (v44)
    {
      do
      {
        v45 = v44;
        v44 = (_QWORD *)*v44;
      }
      while (v44);
    }
    else
    {
      do
      {
        v45 = (_QWORD *)v3[2];
        v46 = *v45 == (_QWORD)v3;
        v3 = v45;
      }
      while (!v46);
    }
    v3 = v45;
  }
  while (v45 != v48);
}

void sub_1B7C8FEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D05050;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D05050;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D05050;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7C900CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D05050;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 56;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D050E0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D050E0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D050E0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7C902FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D050E0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D05170;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D05170;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 624))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7C905C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 624))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 600);
      v7 = *(_QWORD *)(a1 + 592);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7C90848(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  double v12;
  int v13;
  unint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  int8x16_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  uint64_t **v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  double v66;
  double v67;
  unint64_t v68;
  char v69;

  v5 = a1 + 8;
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = *(double *)(a1 + 8) - v7;
  v13 = v10;
  v14 = (unint64_t)v9;
  v15 = v11;
  v16 = v8;
  v17 = v7;
  v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      v13 = *(unsigned __int8 *)(a2 + 32);
      v18 = v6 - v6 * (v12 / (v8 - v7));
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 33);
      v16 = *(double *)(a2 + 16);
      v17 = *(double *)(a1 + 8);
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0.0;
      v17 = 0.0;
      v18 = 0.0;
    }
  }
  v19 = *(double *)(a1 + 16);
  v20 = v19 - v17;
  v21 = v16 - v17;
  v22 = v16 - v17 - (v19 - v17);
  if (*(_DWORD *)(a1 + 36))
  {
    if (v20 >= 0.01)
    {
      if (v22 >= 0.01)
      {
LABEL_24:
        v25 = v16;
        v68 = v14;
        v24 = v18 - v18 * (v20 / v21);
        v23 = v13;
        v69 = v15;
        v16 = *(double *)(a1 + 16);
        v18 = v18 * (v20 / v21);
        if (!v13)
          goto LABEL_25;
        goto LABEL_11;
      }
LABEL_10:
      v68 = 0;
      v23 = 0;
      v69 = 0;
      v24 = 0.0;
      v19 = 0.0;
      v25 = 0.0;
      if (!v13)
      {
LABEL_25:
        v15 = v69;
        goto LABEL_63;
      }
LABEL_11:
      v66 = v17;
      v67 = v16;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 296, v14, v14);
      v26 = *(_QWORD *)(a1 + 112);
      if (v26 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 144) <= 0)
      {
        v31.f64[1] = *(float64_t *)(a1 + 16);
        v28 = v66;
        v27 = v67;
        v31.f64[0] = v66;
        v32.f64[0] = *(float64_t *)(a1 + 8);
        v32.f64[1] = v67;
        v33 = (int8x16_t)vcgtq_f64(v32, v31);
        v32.f64[0] = v66;
        *(int8x16_t *)(a1 + 48) = vbslq_s8(v33, *(int8x16_t *)(a1 + 8), (int8x16_t)v32);
      }
      else
      {
        v28 = v66;
        v27 = v67;
        if (v66 < *(double *)(a1 + 48))
        {
          v29 = *(double *)(a1 + 8);
          if (v66 >= v29)
            v29 = v66;
          *(double *)(a1 + 48) = v29;
        }
        if (v67 > *(double *)(a1 + 56))
        {
          v30 = *(double *)(a1 + 16);
          if (v30 >= v67)
            v30 = v67;
          *(double *)(a1 + 56) = v30;
        }
      }
      if (*(_BYTE *)(a1 + 32))
      {
        v34 = *(double *)(a1 + 64);
        if (v28 < v34)
          v34 = v28;
        *(double *)(a1 + 64) = v34;
      }
      if (a3 && v28 < *(double *)(a1 + 16))
      {
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v28);
        v28 = v66;
        v27 = v67;
        v26 = *(_QWORD *)(a1 + 112);
      }
      v35 = *(_QWORD *)(a1 + 120);
      if (v26 >= v35)
      {
        v37 = *(_QWORD *)(a1 + 104);
        v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v37) >> 4);
        v39 = v38 + 1;
        if (v38 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v37) >> 4);
        if (2 * v40 > v39)
          v39 = 2 * v40;
        if (v40 >= 0x2AAAAAAAAAAAAAALL)
          v41 = 0x555555555555555;
        else
          v41 = v39;
        if (v41)
        {
          v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v41);
          v28 = v66;
          v27 = v67;
        }
        else
        {
          v42 = 0;
        }
        v43 = v41 + 48 * v38;
        v44 = v41 + 48 * v42;
        *(double *)v43 = v18;
        *(double *)(v43 + 8) = v28;
        *(double *)(v43 + 16) = v27;
        *(_QWORD *)(v43 + 24) = v14;
        *(_BYTE *)(v43 + 32) = v13;
        *(_BYTE *)(v43 + 33) = v15;
        *(_WORD *)(v43 + 40) = 0;
        *(_BYTE *)(v43 + 42) = 0;
        v36 = v43 + 48;
        v46 = *(char **)(a1 + 104);
        v45 = *(char **)(a1 + 112);
        if (v45 == v46)
        {
          v15 = v69;
        }
        else
        {
          v15 = v69;
          do
          {
            v47 = *((_OWORD *)v45 - 3);
            v48 = *((_OWORD *)v45 - 2);
            *(_OWORD *)(v43 - 21) = *(_OWORD *)(v45 - 21);
            *(_OWORD *)(v43 - 48) = v47;
            *(_OWORD *)(v43 - 32) = v48;
            v43 -= 48;
            v45 -= 48;
          }
          while (v45 != v46);
          v45 = *(char **)(a1 + 104);
        }
        *(_QWORD *)(a1 + 104) = v43;
        *(_QWORD *)(a1 + 112) = v36;
        *(_QWORD *)(a1 + 120) = v44;
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(double *)v26 = v18;
        *(double *)(v26 + 8) = v28;
        *(double *)(v26 + 16) = v27;
        *(_QWORD *)(v26 + 24) = v14;
        *(_BYTE *)(v26 + 32) = v13;
        *(_BYTE *)(v26 + 33) = v15;
        *(_WORD *)(v26 + 40) = 0;
        v36 = v26 + 48;
        *(_BYTE *)(v26 + 42) = 0;
        v15 = v69;
      }
      *(_QWORD *)(a1 + 112) = v36;
      if (!*(_BYTE *)(a1 + 264) || *(double *)(a1 + 240) <= v7)
      {
        *(double *)(a1 + 232) = v6;
        *(double *)(a1 + 240) = v7;
        *(double *)(a1 + 248) = v8;
        *(_QWORD *)(a1 + 256) = v9;
        *(_BYTE *)(a1 + 264) = v10;
        *(_BYTE *)(a1 + 265) = v11;
        if (!*(_BYTE *)(a1 + 184) || *(double *)(a1 + 160) <= v7)
        {
          *(double *)(a1 + 152) = v6;
          *(double *)(a1 + 160) = v7;
          *(double *)(a1 + 168) = v8;
          *(_QWORD *)(a1 + 176) = v9;
          *(_BYTE *)(a1 + 184) = v10;
          *(_BYTE *)(a1 + 185) = v11;
        }
      }
      if (*(_BYTE *)(a1 + 33))
      {
        v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v14);
        v50 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource(v5, v49);
        if (!*((_BYTE *)v50 + 136) || *((double *)v50 + 14) <= v7)
        {
          *((double *)v50 + 13) = v6;
          *((double *)v50 + 14) = v7;
          *((double *)v50 + 15) = v8;
          v50[16] = v9;
          *((_BYTE *)v50 + 136) = v10;
          *((_BYTE *)v50 + 137) = v11;
          if (!*((_BYTE *)v50 + 56) || *((double *)v50 + 4) <= v7)
          {
            *((double *)v50 + 3) = v6;
            *((double *)v50 + 4) = v7;
            *((double *)v50 + 5) = v8;
            v50[6] = v9;
            *((_BYTE *)v50 + 56) = v10;
            *((_BYTE *)v50 + 57) = v11;
          }
        }
      }
LABEL_63:
      v14 = v68;
      if (!v23)
        return;
      goto LABEL_64;
    }
  }
  else
  {
    if (v22 < 0.01)
      goto LABEL_10;
    if (v20 >= 0.01)
      goto LABEL_24;
  }
  LOBYTE(v23) = v13;
  v25 = v16;
  v19 = v17;
  v24 = v18;
  if (!v13)
    return;
LABEL_64:
  v51 = *(_QWORD *)(a1 + 488);
  v52 = *(_QWORD *)(a1 + 496);
  if (v51 >= v52)
  {
    v54 = *(_QWORD *)(a1 + 480);
    v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - v54) >> 3);
    v56 = v55 + 1;
    if (v55 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v54) >> 3);
    if (2 * v57 > v56)
      v56 = 2 * v57;
    if (v57 >= 0x333333333333333)
      v58 = 0x666666666666666;
    else
      v58 = v56;
    if (v58)
      v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v58);
    else
      v59 = 0;
    v60 = v58 + 40 * v55;
    v61 = v58 + 40 * v59;
    *(double *)v60 = v24;
    *(double *)(v60 + 8) = v19;
    *(double *)(v60 + 16) = v25;
    *(_QWORD *)(v60 + 24) = v14;
    *(_BYTE *)(v60 + 32) = v23;
    *(_BYTE *)(v60 + 33) = v15;
    v53 = v60 + 40;
    v63 = *(char **)(a1 + 480);
    v62 = *(char **)(a1 + 488);
    if (v62 != v63)
    {
      do
      {
        v64 = *(_OWORD *)(v62 - 40);
        v65 = *(_OWORD *)(v62 - 24);
        *(_WORD *)(v60 - 8) = *((_WORD *)v62 - 4);
        *(_OWORD *)(v60 - 24) = v65;
        *(_OWORD *)(v60 - 40) = v64;
        v60 -= 40;
        v62 -= 40;
      }
      while (v62 != v63);
      v62 = *(char **)(a1 + 480);
    }
    *(_QWORD *)(a1 + 480) = v60;
    *(_QWORD *)(a1 + 488) = v53;
    *(_QWORD *)(a1 + 496) = v61;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *(double *)v51 = v24;
    *(double *)(v51 + 8) = v19;
    *(double *)(v51 + 16) = v25;
    *(_QWORD *)(v51 + 24) = v14;
    *(_BYTE *)(v51 + 32) = v23;
    v53 = v51 + 40;
    *(_BYTE *)(v51 + 33) = v15;
  }
  *(_QWORD *)(a1 + 488) = v53;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 626))
  {
    *(_BYTE *)(a1 + 628) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 628) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7C90E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 480), *(_QWORD *)(a1 + 488), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 488) - *(_QWORD *)(a1 + 480)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7C90F70(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  __int128 v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;
  _BYTE v18[52];

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 504), *(id *)(a1 + 40));
  *((double *)v8 - 4) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v9 = 0uLL;
  memset(v18, 0, sizeof(v18));
  v10 = *(void **)(a1 + 200);
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v18[4];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&v18[20];
  *(_OWORD *)(a1 + 168) = *(_OWORD *)&v18[36];
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  if (v10)
  {
    *(_QWORD *)(a1 + 208) = v10;
    operator delete(v10);
    v9 = 0uLL;
  }
  *(_WORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 232) = v9;
  *(_OWORD *)(a1 + 248) = v9;
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 216) = v9;
  if (*(_QWORD *)(a1 + 288))
  {
    v11 = *(_QWORD **)(a1 + 272);
    v12 = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a1 + 272) = a1 + 280;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    if (v11[1])
      v13 = (_QWORD *)v11[1];
    else
      v13 = v11;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 504));
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 480);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 628))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 628) = 0;
  }

}

void sub_1B7C91188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 624))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7C91244(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 640));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 624) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7C915A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40E5794905);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7C91754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7C919C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  double v11;
  double v12;
  _QWORD v13[2];
  double v14;
  uint64_t v15;
  char v16;
  char v17;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  *(double *)v13 = a5;
  *(double *)&v13[1] = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  else
  {
    v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      v8 = 0;
    }
    *(double *)v13 = a5;
    v14 = a7;
    v16 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 624))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7C9268C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7C9272C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::archive(uint64_t a1, int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::archive((uint64_t)v6, (int8x16_t *)(a2 + 2));
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(*(int8x16_t *)(a2 + 26), *(int8x16_t *)(a2 + 26), 8uLL);
  v6[1] = *((_QWORD *)a2 + 15);
  v6[2] = *((_QWORD *)a2 + 16);
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7C92834(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::archive(uint64_t a1, int8x16_t *a2)
{
  statistics **v4;
  _BYTE v5[208];

  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (statistics **)(a1 + 8);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsCumulative::archive(a2, (uint64_t)v5);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics((_QWORD *)a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)&a2[3].u64[1], (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1B7C928FC(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, _QWORD *a2)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  double v17;

  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_WORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  v6 = a2[16];
  if (v6)
  {
    HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::unarchive((uint64_t)v12, *(HDStatisticsTimeInterval **)(v6 + 8), *(_QWORD **)(v6 + 128));
    v7 = v14;
    *(_QWORD *)(v5 + 48) = v13;
    v8 = v12[1];
    *(_OWORD *)v5 = v12[0];
    *(_OWORD *)(v5 + 16) = v8;
    *(_OWORD *)(v5 + 32) = v12[2];
    *(_QWORD *)(a1 + 64) = v7;
    result = v17;
    v9 = v16;
    *(_OWORD *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 88) = v9;
    *(double *)(a1 + 96) = result;
  }
  *(_DWORD *)a1 = a2[17];
  v10 = a2[14];
  if (v10)
  {
    result = *(double *)(v10 + 8);
    v11 = *(_QWORD *)(v10 + 16);
    *(int8x16_t *)(a1 + 104) = vextq_s8(*(int8x16_t *)(v10 + 24), *(int8x16_t *)(v10 + 24), 8uLL);
    *(double *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 128) = v11;
    *(_WORD *)(a1 + 136) = 1;
  }
  return result;
}

double HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, _QWORD *a3)
{
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)(a1 + 48) = 0;
  v4 = 0uLL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  if (a3)
  {
    v5 = a3[3];
    v6 = a3[14];
    if (v6)
    {
      v4 = *(int8x16_t *)(v6 + 24);
      v7 = *(_QWORD *)(v6 + 8);
      v8 = 1;
      v6 = *(_QWORD *)(v6 + 16);
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    *(_QWORD *)a1 = a3[19];
    *(_QWORD *)(a1 + 8) = v5;
    v4 = vextq_s8(v4, v4, 8uLL);
    *(int8x16_t *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 49) = 0;
  }
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)&v11);
    *(_QWORD *)(a1 + 56) = v11;
    v4.i64[0] = v14;
    v9 = v13;
    *(_OWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 88) = v4.i64[0];
  }
  return *(double *)v4.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D05220;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_WORD *)(a1 + 576) = 1;
  *(_BYTE *)(a1 + 578) = 0;
  *(_BYTE *)(a1 + 580) = 0;
  *(_QWORD *)(a1 + 584) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_QWORD *)(a1 + 624) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D05220;
  v2 = *(void **)(a1 + 608);
  if (v2)
  {
    *(_QWORD *)(a1 + 616) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 544);
  if (v3)
  {
    *(_QWORD *)(a1 + 552) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 576) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

}

void sub_1B7C92C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 584) = v4;
    v3 = v5;
  }

}

void sub_1B7C92C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 74, a2);
  v7 = a2;
  v4 = a1[74];
  v5 = a1[71];
  a1[71] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[71]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7C92DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  void *v3;
  _BYTE v4[8];
  double v5;

  if (*(_BYTE *)(a1 + 576))
    return 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v5);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7C92EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 578))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 577))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 579))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 616);
    v18 = *(_QWORD *)(a1 + 624);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 608);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 616);
      v33 = *(char **)(a1 + 608);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 608);
      }
      *(_QWORD *)(a1 + 608) = v28;
      *(_QWORD *)(a1 + 616) = v21;
      *(_QWORD *)(a1 + 624) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 616) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7C930F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 578))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 578) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 577))
    goto LABEL_5;
  v9 = *(void **)(a1 + 600);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_382);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 600);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;

  *(_BYTE *)(a1 + 577) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 608);
    *(_QWORD *)(a1 + 624) = 0;
    *(_QWORD *)(a1 + 616) = 0;
    *(_QWORD *)(a1 + 608) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 608);
      v37 = *(__int128 **)(a1 + 616);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 616);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 616) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 608);
  v39 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 552) != *(_QWORD *)(a1 + 544))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 552) != *(_QWORD *)(a1 + 544));
  }
  *(_BYTE *)(a1 + 578) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 580))
    {
      *(_BYTE *)(a1 + 580) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 578) = 0;
LABEL_83:

  return v7;
}

void sub_1B7C937EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 578) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 579) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 578))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 578))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 600);
    *(_QWORD *)(a1 + 600) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 577) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 577))
  {
    v8 = *(void **)(a1 + 600);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 600);
      *(_QWORD *)(a1 + 600) = v9;

      v8 = *(void **)(a1 + 600);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7C93AE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 576) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 576) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7C93C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 576) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 576), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::archive((uint64_t)&v37, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 336);
  if (v9 != (_QWORD *)(a1 + 344))
  {
    do
    {
      HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::archive((uint64_t)&v37, (int8x16_t *)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 344));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 544);
  for (k = *(int8x16_t **)(a1 + 552); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7C93FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  uint64_t v38;
  uint64_t j;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  __n128 v63;
  void *v64[2];
  __int128 v65;
  int8x16_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  uint64_t v73[4];
  void *__p[2];
  _BYTE v75[96];
  uint64_t v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  int v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 v91;
  __int128 v92;
  int v93;
  void (**v94)(statistics::StatisticsEngine *__hidden);
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _BYTE v101[32];
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;

  v59 = a2;
  *(_BYTE *)(a1 + 576) = objc_msgSend(v59, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v59;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v63.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v64 = 0u;
  v65 = 0u;
  v102 = 0;
  v62 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v101, (const unsigned __int8 *)objc_msgSend(v62, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v102));
  v94 = &off_1E6D09A88;
  v95 = 0;
  v99 = 0;
  v97 = 0;
  v98 = 0;
  v100 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v94, (PB::Reader *)v101);
  v61 = a1;
  v63.n128_u64[0] = v96;
  if (v95)
  {
    v70 = 0;
    memset(v73, 0, sizeof(v73));
    memset(&v75[64], 0, 32);
    v79 = 0;
    v78 = 0;
    *(_OWORD *)__p = 0u;
    memset(v75, 0, 58);
    v76 = 0;
    v77 = &v78;
    v80 = 0u;
    v81 = 0u;
    v82 = 1065353216;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0;
    v87 = 1065353216;
    v88 = 0u;
    v89 = 0u;
    v90 = 1065353216;
    v91 = 0u;
    v92 = 0u;
    v93 = 1065353216;
    v66 = vextq_s8(*(int8x16_t *)(v95 + 8), *(int8x16_t *)(v95 + 8), 8uLL);
    v4 = *(_QWORD *)(v95 + 72);
    v67 = *(_QWORD *)(v95 + 64);
    v68 = *(_BYTE *)(v95 + 185);
    v69 = *(_BYTE *)(v95 + 186);
    v71 = vextq_s8(*(int8x16_t *)(v95 + 24), *(int8x16_t *)(v95 + 24), 8uLL);
    v72 = v4;
    v6 = *(_QWORD *)(v95 + 80);
    v5 = *(_QWORD *)(v95 + 88);
    v60 = (_QWORD *)v95;
    if (v6 != v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v7 >= *(_QWORD *)v75)
        {
          v14 = (char *)__p[0];
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)v75 - (unint64_t)__p[0]) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)v75 - (unint64_t)__p[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v75 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = (char *)__p[1];
            v14 = (char *)__p[0];
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p[0];
          }
          v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(_QWORD *)v75 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    v23 = v60[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(v23 + 8), *(_QWORD **)(v23 + 128));
      *(_OWORD *)&v75[8] = v103;
      *(_OWORD *)&v75[24] = v104;
      *(_OWORD *)&v75[40] = v105;
      *(_QWORD *)&v75[56] = v106;
      *(_QWORD *)&v75[64] = v107;
      if (*(_QWORD *)&v75[72])
      {
        *(_QWORD *)&v75[80] = *(_QWORD *)&v75[72];
        operator delete(*(void **)&v75[72]);
      }
      *(_OWORD *)&v75[72] = v108;
      *(_QWORD *)&v75[88] = v109;
      v109 = 0;
      v108 = 0uLL;
      v76 = v110;
    }
    v24 = (uint64_t *)v60[17];
    for (i = (uint64_t *)v60[18]; v24 != i; ++v24)
    {
      v26 = *v24;
      HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(*v24 + 8), *(_QWORD **)(*v24 + 128));
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v78;
      v29 = &v78;
      v30 = &v78;
      if (v78)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_34;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_37;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_34:
      v33 = (char *)operator new(0x88uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v77)
      {
        v77 = (uint64_t **)*v77;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v32);
      ++v79;
LABEL_37:
      v34 = v106;
      v36 = v104;
      v35 = v105;
      v37 = (void *)*((_QWORD *)v33 + 13);
      *(_OWORD *)(v33 + 40) = v103;
      *(_OWORD *)(v33 + 56) = v36;
      *(_OWORD *)(v33 + 72) = v35;
      *((_QWORD *)v33 + 11) = v34;
      *((_QWORD *)v33 + 12) = v107;
      if (v37)
      {
        *((_QWORD *)v33 + 14) = v37;
        operator delete(v37);
        *((_QWORD *)v33 + 13) = 0;
        *((_QWORD *)v33 + 14) = 0;
        *((_QWORD *)v33 + 15) = 0;
      }
      *(_OWORD *)(v33 + 104) = v108;
      *((_QWORD *)v33 + 15) = v109;
      v109 = 0;
      v108 = 0uLL;
      *((_QWORD *)v33 + 16) = v110;
    }
    v38 = v60[5];
    for (j = v60[6]; v38 != j; v38 += 8)
    {
      v41 = *(double *)(*(_QWORD *)v38 + 8);
      v40 = *(double *)(*(_QWORD *)v38 + 16);
      if (v41 >= v40)
        v42 = *(double *)(*(_QWORD *)v38 + 16);
      else
        v42 = *(double *)(*(_QWORD *)v38 + 8);
      if (v40 < v41)
        v40 = *(double *)(*(_QWORD *)v38 + 8);
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((uint64_t)&v63.n128_i64[1], (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  v43 = v97;
  v44 = v98;
  if (v97 != v98)
  {
    v45 = (char *)v64[1];
    do
    {
      v46 = *(_QWORD *)(*(_QWORD *)v43 + 24);
      v47 = *(_QWORD *)(*(_QWORD *)v43 + 32);
      v48 = *(_QWORD *)(*(_QWORD *)v43 + 8);
      v49 = *(_QWORD *)(*(_QWORD *)v43 + 16);
      if ((unint64_t)v45 >= (unint64_t)v65)
      {
        v50 = (char *)v64[0];
        v51 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)v64[0]) >> 3);
        v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) > v52)
          v52 = 0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) >= 0x333333333333333)
          v53 = 0x666666666666666;
        else
          v53 = v52;
        if (v53)
        {
          v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          v50 = (char *)v64[0];
          v45 = (char *)v64[1];
        }
        else
        {
          v54 = 0;
        }
        v55 = v53 + 40 * v51;
        *(_QWORD *)v55 = v47;
        *(_QWORD *)(v55 + 8) = v46;
        *(_QWORD *)(v55 + 16) = v48;
        *(_QWORD *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        v56 = (char *)v55;
        if (v45 != v50)
        {
          do
          {
            v57 = *(_OWORD *)(v45 - 40);
            v58 = *(_OWORD *)(v45 - 24);
            *((_WORD *)v56 - 4) = *((_WORD *)v45 - 4);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while (v45 != v50);
          v50 = (char *)v64[0];
        }
        v45 = (char *)(v55 + 40);
        v64[0] = v56;
        v64[1] = (void *)(v55 + 40);
        *(_QWORD *)&v65 = v53 + 40 * v54;
        if (v50)
          operator delete(v50);
      }
      else
      {
        *(_QWORD *)v45 = v47;
        *((_QWORD *)v45 + 1) = v46;
        *((_QWORD *)v45 + 2) = v48;
        *((_QWORD *)v45 + 3) = v49;
        *((_WORD *)v45 + 16) = 1;
        v45 += 40;
      }
      v64[1] = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v94);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((_QWORD *)(v61 + 112), &v63);
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v63.n128_i64[1]);

}

void sub_1B7C946E4(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x380]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x330]);
  v8 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v8;
    operator delete(v8);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2F0]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy((_QWORD *)STACK[0x2E0]);
  v9 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v9;
    operator delete(v9);
  }
  v10 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v10;
    operator delete(v10);
  }
  objc_destroyWeak((id *)&STACK[0x258]);
  v11 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v11;
    operator delete(v11);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3B0]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(_QWORD *)(a1 + 440) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 384);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 344);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 304);
  v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(_QWORD *)(a1 + 288) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 240);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 224));
  v3 = *(void **)(a1 + 184);
  if (v3)
  {
    *(_QWORD *)(a1 + 192) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    v2 = (void *)a1[13];
    if (v2)
    {
      a1[14] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[424];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[360];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 592));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 576) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7C94C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 54), a2 + 27);
  v4 = a2[28].n128_u64[1];
  a2[28].n128_u64[1] = 0;
  v5 = (void *)a1[57];
  a1[57] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 120);
  v13 = *(_OWORD *)(a2 + 136);
  v14 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  v15 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = v15;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 184), *(const void **)(a2 + 184), *(_QWORD *)(a2 + 192), (uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 4);
  v16 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = 0;
  v17 = (_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 208) = v16;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  v18 = *(_QWORD **)(a2 + 216);
  if (v18 != (_QWORD *)(a2 + 224))
  {
    v19 = 0;
    v20 = (_QWORD *)(a1 + 224);
    while (1)
    {
      v21 = (_QWORD *)(a1 + 224);
      if (v20 == v17)
        goto LABEL_12;
      v22 = v19;
      v23 = (_QWORD *)(a1 + 224);
      if (v19)
      {
        do
        {
          v21 = v22;
          v22 = (_QWORD *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v23[2];
          v24 = *v21 == (_QWORD)v23;
          v23 = v21;
        }
        while (v24);
      }
      v25 = v18[4];
      if (v21[4] < v25)
      {
LABEL_12:
        if (v19)
          v26 = (uint64_t **)v21;
        else
          v26 = (uint64_t **)(a1 + 224);
        if (v19)
          v27 = (uint64_t **)(v21 + 1);
        else
          v27 = (uint64_t **)(a1 + 224);
        if (!*v27)
        {
LABEL_28:
          v30 = (char *)operator new(0x88uLL);
          *((_QWORD *)v30 + 4) = v18[4];
          v31 = *(_OWORD *)(v18 + 5);
          v32 = *(_OWORD *)(v18 + 7);
          v33 = *(_OWORD *)(v18 + 9);
          *((_QWORD *)v30 + 11) = v18[11];
          *(_OWORD *)(v30 + 72) = v33;
          *(_OWORD *)(v30 + 56) = v32;
          *(_OWORD *)(v30 + 40) = v31;
          v34 = v18[12];
          *((_QWORD *)v30 + 13) = 0;
          *((_QWORD *)v30 + 12) = v34;
          *((_QWORD *)v30 + 14) = 0;
          *((_QWORD *)v30 + 15) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v30 + 13, (const void *)v18[13], v18[14], (uint64_t)(v18[14] - v18[13]) >> 4);
          *((_QWORD *)v30 + 16) = v18[16];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 216), (uint64_t)v26, v27, (uint64_t *)v30);
        }
      }
      else
      {
        v27 = (uint64_t **)(a1 + 224);
        v26 = (uint64_t **)(a1 + 224);
        if (!v19)
          goto LABEL_28;
        v28 = v19;
        while (1)
        {
          while (1)
          {
            v26 = (uint64_t **)v28;
            v29 = v28[4];
            if (v29 <= v25)
              break;
            v28 = *v26;
            v27 = v26;
            if (!*v26)
              goto LABEL_28;
          }
          if (v29 >= v25)
            break;
          v28 = v26[1];
          if (!v28)
          {
            v27 = v26 + 1;
            goto LABEL_28;
          }
        }
      }
      v35 = (_QWORD *)v18[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v18[2];
          v24 = *v36 == (_QWORD)v18;
          v18 = v36;
        }
        while (!v24);
      }
      if (v36 == (_QWORD *)(a2 + 224))
        break;
      v19 = (_QWORD *)*v17;
      v20 = *(_QWORD **)(a1 + 216);
      v18 = v36;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 240, a2 + 240);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 280), *(const void **)(a2 + 280), *(_QWORD *)(a2 + 288), (uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 304, a2 + 304);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 384, a2 + 384);
  return a1;
}

void sub_1B7C9503C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v13 + 288) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(*v12);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v13 + 192) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v10 = *(_OWORD *)(a2 + 120);
  v11 = *(_OWORD *)(a2 + 136);
  v12 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 184, (__n128 *)(a2 + 184));
  v14 = a1 + 224;
  v13 = *(_QWORD **)(a1 + 224);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(v13);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v15 = (_QWORD *)(a2 + 224);
  v16 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 224) = v16;
  v17 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 232) = v17;
  if (v17)
  {
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(a2 + 216) = v15;
    *v15 = 0;
    *(_QWORD *)(a2 + 232) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 216) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 240, (uint64_t *)(a2 + 240));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 280, (__n128 *)(a2 + 280));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  double v3;
  id v4;
  double *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  id v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  void *v35;
  __int128 v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t **i;
  uint64_t *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  double *v47;
  double v48;
  double v49;
  double v50;
  void *v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  uint64_t **j;
  uint64_t *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  double v83;
  double v84;
  void *v85;
  void *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  void *v94;
  id v95;
  id v96;
  id v98;
  id v99;
  id v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  void *__p;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[3];
  _QWORD *v111;
  _QWORD v112[3];
  _QWORD *v113;
  _QWORD v114[3];
  _QWORD *v115;
  _BYTE v116[24];
  _BYTE *v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v3 = *(double *)a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308)
    v5 = (double *)a2;
  v94 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v7 = (void *)v6;
  v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = *(id *)(a1 + 16);
    if (objc_msgSend(v9, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v9, "underlyingSampleType");
      v10 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v10;
    }

  }
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v8, v94, v7);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v14 = *(uint64_t **)(a2 + 280);
      v15 = *(uint64_t **)(a2 + 288);
      while (v14 != v15)
      {
        v16 = *v14;
        v17 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v17, "sourceForSourceID:", v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          if ((objc_msgSend(v13, "containsObject:", v18) & 1) == 0)
            objc_msgSend(v13, "addObject:", v18);
        }

        ++v14;
      }
      v19 = (void *)objc_msgSend(v13, "copy");
      objc_msgSend(v11, "_setSources:", v19);

    }
  }

  v110[0] = &off_1E6D05410;
  v111 = v110;
  v95 = v11;
  v20 = (uint64_t)v111;
  if (!v111)
    goto LABEL_22;
  if (v111 != v110)
  {
    v20 = (*(uint64_t (**)(_QWORD *))(*v111 + 16))(v111);
LABEL_22:
    v115 = (_QWORD *)v20;
    goto LABEL_24;
  }
  v115 = v114;
  (*(void (**)(uint64_t, _QWORD *))(v110[0] + 24))((uint64_t)v110, v114);
LABEL_24:
  v117 = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E6D052F0;
  v22 = (uint64_t)v115;
  if (!v115)
  {
LABEL_27:
    v21[4] = v22;
    goto LABEL_29;
  }
  if (v115 != v114)
  {
    v22 = (*(uint64_t (**)(_QWORD *))(*v115 + 16))(v115);
    goto LABEL_27;
  }
  v21[4] = v21 + 1;
  (*(void (**)(_QWORD *))(v114[0] + 24))(v114);
LABEL_29:
  v117 = v21;
  v23 = v95;
  v24 = (void *)MEMORY[0x1E0CB6A28];
  v99 = v23;
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = *(_OWORD *)(a2 + 136);
  v101 = *(_OWORD *)(a2 + 120);
  v102 = v26;
  v103 = *(_OWORD *)(a2 + 152);
  v27 = *(_QWORD *)(a2 + 176);
  v104 = *(_QWORD *)(a2 + 168);
  v105 = v27;
  v107 = 0;
  v108 = 0;
  v28 = *(const void **)(a2 + 184);
  v29 = *(_QWORD *)(a2 + 192);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v28, v29, (v29 - (uint64_t)v28) >> 4);
  v109 = *(_QWORD *)(a2 + 208);
  if (!v117)
    std::__throw_bad_function_call[abi:ne180100]();
  v30 = (*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v117 + 48))(v117, &v101);
  v31 = *(double **)(v30 + 8);
  v32 = 0.0;
  while (v31 != *(double **)(v30 + 16))
  {
    v34 = *v31;
    v33 = v31[1];
    v31 += 2;
    v32 = v32 + v33 - v34;
  }
  objc_msgSend(v24, "quantityWithUnit:doubleValue:", v25, v32 + *(double *)(v30 + 32));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setDuration:", v35);

  if (__p)
  {
    v107 = __p;
    operator delete(__p);
  }

  v36 = *(_OWORD *)(a2 + 136);
  v101 = *(_OWORD *)(a2 + 120);
  v102 = v36;
  v103 = *(_OWORD *)(a2 + 152);
  v38 = *(_QWORD *)(a2 + 176);
  v37 = *(const void **)(a2 + 184);
  v104 = *(_QWORD *)(a2 + 168);
  v105 = v38;
  v107 = 0;
  v108 = 0;
  v39 = *(_QWORD *)(a2 + 192);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v37, v39, (v39 - (uint64_t)v37) >> 4);
  v109 = *(_QWORD *)(a2 + 208);
  if (!v117)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v23, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v117 + 48))(v117, &v101));
  if (__p)
  {
    v107 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v40 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v41 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v101, a2);
    for (i = (uint64_t **)v102; i; i = (uint64_t **)*i)
    {
      v43 = i[2];
      v44 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v117)
        std::__throw_bad_function_call[abi:ne180100]();
      v46 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v117 + 48))(v117, (uint64_t *)i + 3);
      v47 = *(double **)(v46 + 8);
      v48 = 0.0;
      while (v47 != *(double **)(v46 + 16))
      {
        v50 = *v47;
        v49 = v47[1];
        v47 += 2;
        v48 = v48 + v49 - v50;
      }
      objc_msgSend(v44, "quantityWithUnit:doubleValue:", v45, v48 + *(double *)(v46 + 32));
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "setObject:forKeyedSubscript:", v51, v43);

      if (!v117)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v117 + 48))(v117, (uint64_t *)i + 3));
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "setObject:forKeyedSubscript:", v52, v43);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v101);
    objc_msgSend(v99, "setDurationBySource:", v40);
    objc_msgSend(v99, "setDataCountBySource:", v41);

  }
  v53 = v117;
  if (v117 == v116)
  {
    v54 = 4;
    v53 = v116;
  }
  else
  {
    if (!v117)
      goto LABEL_52;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_52:
  v55 = v115;
  if (v115 == v114)
  {
    v56 = 4;
    v55 = v114;
  }
  else
  {
    if (!v115)
      goto LABEL_57;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_57:
  v57 = (uint64_t)v111;
  if (!v111)
  {
LABEL_60:
    v113 = (_QWORD *)v57;
    goto LABEL_62;
  }
  if (v111 != v110)
  {
    v57 = (*(uint64_t (**)(void))(*v111 + 16))();
    goto LABEL_60;
  }
  v113 = v112;
  (*(void (**)(uint64_t, _QWORD *))(v110[0] + 24))((uint64_t)v110, v112);
LABEL_62:
  v117 = 0;
  v58 = operator new(0x28uLL);
  *v58 = &off_1E6D05380;
  v59 = (uint64_t)v113;
  if (!v113)
  {
LABEL_65:
    v58[4] = v59;
    goto LABEL_67;
  }
  if (v113 != v112)
  {
    v59 = (*(uint64_t (**)(void))(*v113 + 16))();
    goto LABEL_65;
  }
  v58[4] = v58 + 1;
  (*(void (**)(_QWORD *))(v112[0] + 24))(v112);
LABEL_67:
  v117 = v58;
  v100 = v99;
  objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v61 = *(_OWORD *)(a2 + 136);
  v101 = *(_OWORD *)(a2 + 120);
  v102 = v61;
  v103 = *(_OWORD *)(a2 + 152);
  v63 = *(_QWORD *)(a2 + 176);
  v62 = *(const void **)(a2 + 184);
  v104 = *(_QWORD *)(a2 + 168);
  v105 = v63;
  v107 = 0;
  v108 = 0;
  v64 = *(_QWORD *)(a2 + 192);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v62, v64, (v64 - (uint64_t)v62) >> 4);
  v109 = *(_QWORD *)(a2 + 208);
  if (!v117)
    std::__throw_bad_function_call[abi:ne180100]();
  v65 = (double *)(*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v117 + 48))(v117, &v101);
  v66 = *v65;
  v67 = *((_QWORD *)v65 + 1);
  v69 = v65[2];
  v68 = v65[3];
  v70 = v65[4];
  if (__p)
  {
    v107 = __p;
    operator delete(__p);
  }
  objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v60, v66, v95);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v100, "setSumQuantity:", v71);

  objc_msgSend(v100, "setDataCount:", v67);
  v72 = *(_QWORD *)(a1 + 24);
  LOBYTE(v73) = v72;
  if ((v72 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v60, v69);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "setMostRecentQuantity:", v74);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v68, v70);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "setMostRecentQuantityDateInterval:", v75);

    v73 = *(_QWORD *)(a1 + 24);
  }
  if ((v73 & 1) != 0)
  {
    v76 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v77 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    if ((v72 & 0x20) != 0)
    {
      v96 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v98 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    }
    else
    {
      v96 = 0;
      v98 = 0;
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v101, a2);
    for (j = (uint64_t **)v102; j; j = (uint64_t **)*j)
    {
      v79 = j[2];
      if (!v117
        || (objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v60, *(double *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v117 + 48))(v117, (uint64_t *)j + 3)), v80 = (void *)objc_claimAutoreleasedReturnValue(), objc_msgSend(v76, "setObject:forKeyedSubscript:", v80, v79), v80, !v117))
      {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v117 + 48))(v117, (uint64_t *)j + 3) + 8));
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v77, "setObject:forKeyedSubscript:", v81, v79);

      if ((v72 & 0x20) != 0)
      {
        if (!v117)
          std::__throw_bad_function_call[abi:ne180100]();
        v82 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v117 + 48))(v117, (uint64_t *)j + 3);
        v83 = *(double *)(v82 + 24);
        v84 = *(double *)(v82 + 32);
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v60, *(double *)(v82 + 16));
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v96, "setObject:forKeyedSubscript:", v85, v79);

        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v83, v84);
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "setObject:forKeyedSubscript:", v86, v79);

      }
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v101);
    objc_msgSend(v100, "setSumQuantityBySource:", v76);
    objc_msgSend(v100, "setDataCountBySource:", v77);
    if ((v72 & 0x20) != 0)
    {
      objc_msgSend(v100, "setMostRecentQuantityBySource:", v96);
      objc_msgSend(v100, "setMostRecentQuantityDateIntervalBySource:", v98);
    }

  }
  v87 = v117;
  if (v117 == v116)
  {
    v88 = 4;
    v87 = v116;
  }
  else
  {
    if (!v117)
      goto LABEL_91;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_91:
  v89 = v113;
  if (v113 == v112)
  {
    v90 = 4;
    v89 = v112;
  }
  else
  {
    if (!v113)
      goto LABEL_96;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_96:

  v91 = v111;
  if (v111 == v110)
  {
    v92 = 4;
    v91 = v110;
    goto LABEL_100;
  }
  if (v111)
  {
    v92 = 5;
LABEL_100:
    (*(void (**)(void))(*v91 + 8 * v92))();
  }
  return v100;
}

void sub_1B7C95D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29,uint64_t a30,uint64_t a31,char *a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v41 = *(_QWORD **)(v39 - 136);
  if (v41 == (_QWORD *)(v39 - 160))
  {
    v42 = 4;
    v41 = (_QWORD *)(v39 - 160);
  }
  else
  {
    if (!v41)
      goto LABEL_6;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_6:
  v43 = a32;
  if (a32 == &a29)
  {
    v44 = 4;
    v43 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_11;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_11:

  v45 = a28;
  if (a28 == &a25)
  {
    v46 = 4;
    v45 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_16;
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_16:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 264);
  v2 = *(_QWORD *)(a1 + 280);
  if (v1 != (*(_QWORD *)(a1 + 288) - v2) >> 3)
  {
    v4 = (void **)(a1 + 280);
    *(_QWORD *)(a1 + 288) = v2;
    std::vector<long long>::reserve((void **)(a1 + 280), v1);
    v5 = *(_QWORD **)(a1 + 256);
    if (v5)
    {
      v6 = *(char **)(a1 + 288);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 280);
            v6 = *(char **)(a1 + 288);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 280) = v16;
          *(_QWORD *)(a1 + 288) = v9;
          *(_QWORD *)(a1 + 296) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 288) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7C961E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  int64_t v12;
  char v13;
  char v14;
  double v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  id WeakRetained;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  double v49;
  int64_t var3;
  _BOOL4 var4;
  BOOL var5;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  unint64_t v58;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  unint64_t v72;
  uint64_t **v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  char *v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  char *v82;
  void *v83;
  unint64_t v84;
  BOOL v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  BOOL v100;
  double v101;
  int v102;
  int v103;
  int v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  double var0;
  unint64_t v109;
  uint64_t **v110;
  __int128 v111;
  char *v112;
  double v113;
  void *v114;
  void *v115;
  _QWORD *v116;
  double **v117;
  id *location;
  void *v119;
  id v120;
  uint64_t *v121;
  int64_t v122;
  double **v123;
  char v124;
  BOOL v125;
  int64_t v126;
  _QWORD *v127;
  uint64_t v128;
  HDRawQuantitySample v129;
  __int128 v130;
  __int128 v131;
  __int16 v132;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v127 = (_QWORD *)(a1 + 96);
    v123 = (double **)(a1 + 64);
    v121 = (uint64_t *)(a1 + 176);
    location = (id *)(a1 + 88);
    v117 = (double **)(a1 + 184);
    v116 = (_QWORD *)(a1 + 224);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_134:
      *(double *)(a1 + 56) = a2;
LABEL_135:
      v113 = *(double *)(a1 + 56);
      if (v113 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsCumulative, HDStatisticsTimeInterval>]");
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v114, "handleFailureInFunction:file:lineNumber:description:", v115, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v113 = *(double *)(a1 + 56);
      }
      v5 = v113;
      if (v113 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v20 = a2;
      v21 = a2;
      v22 = v5;
      v23 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v24 = *(double *)(v23 + 8);
          v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21)
            v21 = *(double *)(v23 + 8);
          if (v25 > v5)
            v27 = *(double *)(v23 + 16);
          else
            v27 = v20;
          if (v25 < v20)
          {
            v22 = v5;
            v20 = v27;
          }
          v23 += 48;
        }
        while ((__int128 *)v23 != v7);
      }
      if (v20 >= v21)
        v28 = v21;
      else
        v28 = v20;
      v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        v30 = v29 * floor(v28 / v29);
        v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31)
          v28 = v30;
        else
          v28 = v31;
      }
      *v127 = 0;
      v127[1] = 0;
      v127[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        v35 = *(char **)(a1 + 96);
        v34 = *(char **)(a1 + 104);
        v36 = v32;
        if (v34 != v35)
        {
          do
          {
            v37 = *((_OWORD *)v34 - 3);
            v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          v34 = (char *)*v127;
        }
        *(_QWORD *)(a1 + 96) = v36;
        *(_QWORD *)(a1 + 104) = v32;
        *(_QWORD *)(a1 + 112) = &v32[48 * v33];
        if (v34)
          operator delete(v34);
      }
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v129.var0 = a1;
        v40 = 126 - 2 * __clz(v8);
        if ((__int128 *)v6 == v7)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v129, v41, 1);
      }
      if (*(_BYTE *)(a1 + 25))
        v120 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v120 = 0;
      v119 = (void *)v6;
      if ((__int128 *)v6 == v7)
      {
LABEL_112:
        *(double *)(a1 + 208) = HKIntervalMask<double>::removeIntervalsBefore(v117, v28) + *(double *)(a1 + 208);
        v97 = *(_QWORD **)(a1 + 216);
        if (v97 != v116)
        {
          do
          {
            *((double *)v97 + 16) = HKIntervalMask<double>::removeIntervalsBefore((double **)v97 + 13, v28)
                                  + *((double *)v97 + 16);
            v98 = (_QWORD *)v97[1];
            if (v98)
            {
              do
              {
                v99 = v98;
                v98 = (_QWORD *)*v98;
              }
              while (v98);
            }
            else
            {
              do
              {
                v99 = (_QWORD *)v97[2];
                v100 = *v99 == (_QWORD)v97;
                v97 = v99;
              }
              while (!v100);
            }
            v97 = v99;
          }
          while (v99 != v116);
        }
        *(double *)(a1 + 56) = v28;

        if (v119)
          operator delete(v119);
        goto LABEL_135;
      }
      v122 = 0;
      v44 = 0;
      v45 = v6;
      while (2)
      {
        v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v129.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v129.var2 = v46;
        *(_QWORD *)&v129.var4 = *(_QWORD *)(v45 + 32);
        v47 = v46;
        v48 = v28 - v129.var1;
        v49 = *(double *)&v46 - v129.var1;
        if (v49 - (v28 - v129.var1) >= 0.01)
        {
          if (v48 < 0.01)
          {
            v129.var4 = 0;
            goto LABEL_61;
          }
          v55 = v48 / v49 * v129.var0;
          var3 = v129.var3;
          var5 = v129.var5;
          v54 = v129.var0 - v55;
          v129.var0 = v55;
          v129.var2 = v28;
          v53 = v28;
          var4 = v129.var4;
          if (v129.var4)
            goto LABEL_54;
LABEL_61:
          v59 = *(_OWORD **)(a1 + 104);
          v60 = *(_QWORD *)(a1 + 112);
          if ((unint64_t)v59 < v60)
          {
            v61 = *(_OWORD *)v45;
            v62 = *(_OWORD *)(v45 + 32);
            v59[1] = *(_OWORD *)(v45 + 16);
            v59[2] = v62;
            *v59 = v61;
            v63 = v59 + 3;
            goto LABEL_110;
          }
          v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v59 - *v127) >> 4);
          v65 = v64 + 1;
          if (v64 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v127) >> 4);
          if (2 * v66 > v65)
            v65 = 2 * v66;
          if (v66 >= 0x2AAAAAAAAAAAAAALL)
            v67 = 0x555555555555555;
          else
            v67 = v65;
          if (v67)
            v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
          else
            v68 = 0;
          v74 = (_OWORD *)(v67 + 48 * v64);
          v75 = *(_OWORD *)v45;
          v76 = *(_OWORD *)(v45 + 32);
          v74[1] = *(_OWORD *)(v45 + 16);
          v74[2] = v76;
          *v74 = v75;
          v78 = *(char **)(a1 + 96);
          v77 = *(char **)(a1 + 104);
          v79 = v74;
          if (v77 != v78)
          {
            do
            {
              v80 = *((_OWORD *)v77 - 3);
              v81 = *((_OWORD *)v77 - 2);
              *(_OWORD *)((char *)v79 - 21) = *(_OWORD *)(v77 - 21);
              *(v79 - 3) = v80;
              *(v79 - 2) = v81;
              v79 -= 3;
              v77 -= 48;
            }
            while (v77 != v78);
            v77 = (char *)*v127;
          }
          v63 = v74 + 3;
          *(_QWORD *)(a1 + 96) = v79;
          *(_QWORD *)(a1 + 104) = v74 + 3;
          *(_QWORD *)(a1 + 112) = v67 + 48 * v68;
          if (v77)
          {
            v82 = v77;
            goto LABEL_109;
          }
LABEL_110:
          *(_QWORD *)(a1 + 104) = v63;
        }
        else
        {
          var3 = 0;
          var4 = 0;
          var5 = 0;
          v53 = 0.0;
          v47 = 0;
          v54 = 0.0;
          if (!v129.var4)
            goto LABEL_61;
LABEL_54:
          v125 = var5;
          v126 = var3;
          HDRawQuantitySample::applyMask((uint64_t)&v129, v123);
          v56 = *(unsigned __int8 *)(v45 + 42);
          v57 = *(unsigned __int8 *)(v45 + 41);
          v124 = *(_BYTE *)(v45 + 40);
          if (v129.var4)
          {
            if ((v44 & 1) != 0)
            {
              v58 = v129.var3;
              if (v122 == v129.var3 || *(_BYTE *)(a1 + 24))
              {
                *(double *)(a1 + 120) = v129.var0 + *(double *)(a1 + 120);
                if (!v56)
                  ++*(_QWORD *)(a1 + 128);
                HDStatisticsTimeInterval::addSample(v121, &v129, v56 == 0);
                v56 = 1;
              }
            }
            else
            {
              *(double *)(a1 + 120) = v129.var0 + *(double *)(a1 + 120);
              if (!v56)
                ++*(_QWORD *)(a1 + 128);
              HDStatisticsTimeInterval::addSample(v121, &v129, v56 == 0);
              v56 = 1;
              v58 = v129.var3;
              v122 = v129.var3;
            }
            if (*(_BYTE *)(a1 + 25))
            {
              HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, v58);
              v69 = (void *)objc_claimAutoreleasedReturnValue();
              if (v69)
              {
                objc_msgSend(v120, "objectForKeyedSubscript:", v69);
                v70 = (void *)objc_claimAutoreleasedReturnValue();
                v71 = v70;
                if (v70)
                {
                  if (objc_msgSend(v70, "longLongValue") == v58 || *(_BYTE *)(a1 + 24))
                  {
                    v72 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v58);
                    v73 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v72);
                    goto LABEL_87;
                  }
                }
                else
                {
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v58);
                  v83 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v120, "setObject:forKeyedSubscript:", v83, v69);

                  v84 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v58);
                  v73 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v84);
LABEL_87:
                  *(double *)v73 = v129.var0 + *(double *)v73;
                  if (!v57)
                    v73[1] = (uint64_t *)((char *)v73[1] + 1);
                  HDStatisticsTimeInterval::addSample((uint64_t *)v73 + 7, &v129, v57 == 0);
                  LOBYTE(v57) = 1;
                }

              }
            }
            v44 = 1;
          }
          if (var4)
          {
            v85 = v56 != 0;
            v87 = *(char **)(a1 + 104);
            v86 = *(_QWORD *)(a1 + 112);
            if ((unint64_t)v87 < v86)
            {
              *(double *)v87 = v54;
              *((double *)v87 + 1) = v53;
              *((_QWORD *)v87 + 2) = v47;
              *((_QWORD *)v87 + 3) = v126;
              v87[32] = var4;
              v87[33] = v125;
              v87[40] = v124;
              v87[41] = v57;
              v63 = v87 + 48;
              v87[42] = v85;
              goto LABEL_110;
            }
            v82 = (char *)*v127;
            v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v87[-*v127] >> 4);
            v89 = v88 + 1;
            if (v88 + 1 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - (_QWORD)v82) >> 4);
            if (2 * v90 > v89)
              v89 = 2 * v90;
            if (v90 >= 0x2AAAAAAAAAAAAAALL)
              v91 = 0x555555555555555;
            else
              v91 = v89;
            if (v91)
            {
              v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v91);
              v82 = *(char **)(a1 + 96);
              v87 = *(char **)(a1 + 104);
            }
            else
            {
              v92 = 0;
            }
            v93 = v91 + 48 * v88;
            *(double *)v93 = v54;
            *(double *)(v93 + 8) = v53;
            *(_QWORD *)(v93 + 16) = v47;
            *(_QWORD *)(v93 + 24) = v126;
            *(_BYTE *)(v93 + 32) = var4;
            *(_BYTE *)(v93 + 33) = v125;
            *(_BYTE *)(v93 + 40) = v124;
            *(_BYTE *)(v93 + 41) = v57;
            *(_BYTE *)(v93 + 42) = v85;
            v94 = v93;
            if (v87 != v82)
            {
              do
              {
                v95 = *((_OWORD *)v87 - 3);
                v96 = *((_OWORD *)v87 - 2);
                *(_OWORD *)(v94 - 21) = *(_OWORD *)(v87 - 21);
                *(_OWORD *)(v94 - 48) = v95;
                *(_OWORD *)(v94 - 32) = v96;
                v94 -= 48;
                v87 -= 48;
              }
              while (v87 != v82);
              v82 = (char *)*v127;
            }
            v63 = (_OWORD *)(v93 + 48);
            *(_QWORD *)(a1 + 96) = v94;
            *(_QWORD *)(a1 + 104) = v93 + 48;
            *(_QWORD *)(a1 + 112) = v91 + 48 * v92;
            if (v82)
LABEL_109:
              operator delete(v82);
            goto LABEL_110;
          }
        }
        v45 += 48;
        if ((__int128 *)v45 == v7)
          goto LABEL_112;
        continue;
      }
    }
    v10 = *(double *)v6;
    v9 = *(double *)(v6 + 8);
    v11 = *(double *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 24);
    v13 = *(_BYTE *)(v6 + 32);
    v14 = *(_BYTE *)(v6 + 33);
    v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        v42 = 0;
        v43 = 0;
        v18 = 0.0;
        v17 = *(double *)(v6 + 16);
        v16 = *(_BYTE *)(v6 + 32);
        v19 = 0.0;
        v11 = 0.0;
        v13 = 0;
LABEL_123:
        v102 = *(unsigned __int8 *)(v6 + 42);
        v103 = *(unsigned __int8 *)(v6 + 41);
        v104 = *(unsigned __int8 *)(v6 + 40);
        v129.var0 = v10;
        v129.var1 = v9;
        v129.var2 = v17;
        v129.var3 = v12;
        v129.var4 = v16;
        v129.var5 = v14;
        *(_DWORD *)(&v129.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v129.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&v130 = v18;
        *((double *)&v130 + 1) = v19;
        *(double *)&v131 = v11;
        *((_QWORD *)&v131 + 1) = v42;
        LOBYTE(v132) = v13;
        HIBYTE(v132) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v129, v123);
        v105 = v104 != 0;
        v106 = v103 != 0;
        v107 = v102 != 0;
        if (v129.var4)
        {
          var0 = v129.var0;
          *(double *)(a1 + 120) = v129.var0 + *(double *)(a1 + 120);
          if (!v102)
            ++*(_QWORD *)(a1 + 128);
          HDStatisticsTimeInterval::addSample(v121, &v129, v102 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v109 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v129.var3);
            v110 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v109);
            *(double *)v110 = var0 + *(double *)v110;
            if (!v103)
              v110[1] = (uint64_t *)((char *)v110[1] + 1);
            HDStatisticsTimeInterval::addSample((uint64_t *)v110 + 7, &v129, v103 == 0);
          }
          v105 = 1;
          v106 = 1;
          v107 = 1;
        }
        if ((_BYTE)v132)
        {
          LOWORD(v128) = v132;
          v111 = v131;
          v112 = (char *)*v127;
          *(_OWORD *)v112 = v130;
          *((_OWORD *)v112 + 1) = v111;
          *((_QWORD *)v112 + 4) = v128;
          v112[40] = v105;
          v112[41] = v106;
          v112[42] = v107;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_134;
      }
      v101 = v10 * (v15 / (v11 - v9));
      v17 = a2;
      v16 = *(_BYTE *)(v6 + 32);
      v18 = v10 - v101;
      v10 = v101;
      v19 = a2;
    }
    else
    {
      v16 = 0;
      v17 = *(double *)(v6 + 16);
      v18 = *(double *)v6;
      v19 = *(double *)(v6 + 8);
    }
    v42 = *(_QWORD *)(v6 + 24);
    v43 = *(_BYTE *)(v6 + 33);
    goto LABEL_123;
  }
}

void sub_1B7C96C24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v12;

  v12 = a2;
  v5 = *(_QWORD **)(a1 + 224);
  v3 = (uint64_t **)(a1 + 224);
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = (uint64_t **)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    v6 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 304), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 344);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7C96DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 384);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7C96ECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x88uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 280);
  v7 = *(char **)(*(_QWORD *)a4 + 288);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 280);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 280);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 288);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 280);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 288);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 280);
      v15 = *(char **)(*(_QWORD *)a4 + 288);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 288);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 288);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 280);
          v25 = *(char **)(*(_QWORD *)a4 + 288);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 288);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 288);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 280);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 280);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 288);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 280);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 288);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 280);
      v41 = *(char **)(*(_QWORD *)a4 + 288);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 288);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 288);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 280);
      v11 = *(char **)(*(_QWORD *)a3 + 288);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 288);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 288);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 280);
      v24 = *(char **)(*(_QWORD *)a3 + 288);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 288);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 288);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 280);
            v31 = *(char **)(*(_QWORD *)a3 + 288);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 288);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 288);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 280);
    v14 = *(char **)(*(_QWORD *)a5 + 288);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 288);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 288);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 280);
        v23 = *(char **)(*(_QWORD *)a5 + 288);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 288);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 288);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 280);
            v32 = *(char **)(*(_QWORD *)a5 + 288);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 288);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 288);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 280);
    v16 = *(char **)(*(_QWORD *)a6 + 288);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 288);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 288);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 280);
        v25 = *(char **)(*(_QWORD *)a6 + 288);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 288);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 288);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 280);
            v34 = *(char **)(*(_QWORD *)a6 + 288);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 288);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 288);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 280);
                v43 = *(char **)(*(_QWORD *)a6 + 288);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 288);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 288);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  char **v11;
  char *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  char **v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  BOOL v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v48;
  unint64_t v49;
  _QWORD v50[2];
  char v51;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 216);
  v46 = (_QWORD *)(a2 + 224);
  if (v3 == (_QWORD *)(a2 + 224))
    return;
  v48 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_80;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v49 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0x78uLL);
      v50[0] = v19;
      v50[1] = v48;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      v51 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
        v12 = (char *)v50[0];
        if (v37)
        {
          *(_QWORD *)v50[0] = *v37;
        }
        else
        {
          *(_QWORD *)v50[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v48;
          if (!*(_QWORD *)v12)
          {
LABEL_76:
            v50[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v50);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*(_QWORD *)v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (char **)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v48;
            if (*v48)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v48;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v45 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v45)
            operator delete(v45);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = *((_QWORD *)v12 + 1);
      if (v13 == v8)
        break;
      if (v49 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = *(char **)v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = *((id *)v12 + 2);
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    v39 = *(_OWORD *)(v3 + 5);
    v40 = *(_OWORD *)(v3 + 7);
    v41 = *(_OWORD *)(v3 + 9);
    *((_QWORD *)v12 + 9) = v3[11];
    *(_OWORD *)(v12 + 56) = v41;
    *(_OWORD *)(v12 + 40) = v40;
    *(_OWORD *)(v12 + 24) = v39;
    *((_QWORD *)v12 + 10) = v3[12];
    if (v12 + 16 != (char *)(v3 + 4))
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v12 + 88, (char *)v3[13], v3[14], (uint64_t)(v3[14] - v3[13]) >> 4);
    *((_QWORD *)v12 + 14) = v3[16];

LABEL_80:
    v42 = (_QWORD *)v3[1];
    if (v42)
    {
      do
      {
        v43 = v42;
        v42 = (_QWORD *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        v43 = (_QWORD *)v3[2];
        v44 = *v43 == (_QWORD)v3;
        v3 = v43;
      }
      while (!v44);
    }
    v3 = v43;
  }
  while (v43 != v46);
}

void sub_1B7C9929C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D052F0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D052F0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D052F0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7C994C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D052F0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 56;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D05380;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D05380;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D05380;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7C996F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D05380;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsCumulative,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsCumulative const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D05410;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D05410;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 576))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7C999B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 576))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 552);
      v7 = *(_QWORD *)(a1 + 544);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7C99C3C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  double v12;
  int v13;
  unint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int8x16_t v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t **v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  double v67;
  double v68;
  unint64_t v69;
  char v70;

  v5 = a1 + 8;
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = *(double *)(a1 + 8) - v7;
  v13 = v10;
  v14 = (unint64_t)v9;
  v15 = v11;
  v16 = v8;
  v17 = v7;
  v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      v13 = *(unsigned __int8 *)(a2 + 32);
      v18 = v6 - v6 * (v12 / (v8 - v7));
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 33);
      v16 = *(double *)(a2 + 16);
      v17 = *(double *)(a1 + 8);
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0.0;
      v17 = 0.0;
      v18 = 0.0;
    }
  }
  v19 = *(double *)(a1 + 16);
  v20 = v19 - v17;
  v21 = v16 - v17;
  v22 = v16 - v17 - (v19 - v17);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v22 < 0.01)
      goto LABEL_10;
    if (v20 >= 0.01)
      goto LABEL_24;
LABEL_22:
    v23 = v13;
    v31 = v14;
    v25 = v16;
    v19 = v17;
    v24 = v18;
    if (!v23)
      return;
    goto LABEL_60;
  }
  if (v20 < 0.01)
    goto LABEL_22;
  if (v22 >= 0.01)
  {
LABEL_24:
    v25 = v16;
    v69 = v14;
    v24 = v18 - v18 * (v20 / v21);
    v23 = v13;
    v70 = v15;
    v16 = *(double *)(a1 + 16);
    v18 = v18 * (v20 / v21);
    if (!v13)
    {
LABEL_25:
      v15 = v70;
      v31 = v69;
      if (!v23)
        return;
      goto LABEL_60;
    }
    goto LABEL_11;
  }
LABEL_10:
  v69 = 0;
  v23 = 0;
  v70 = 0;
  v24 = 0.0;
  v19 = 0.0;
  v25 = 0.0;
  if (!v13)
    goto LABEL_25;
LABEL_11:
  v67 = v17;
  v68 = v16;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 248, v14, v14);
  v26 = *(_QWORD *)(a1 + 112);
  if (v26 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
  {
    v32.f64[1] = *(float64_t *)(a1 + 16);
    v28 = v67;
    v27 = v68;
    v32.f64[0] = v67;
    v33.f64[0] = *(float64_t *)(a1 + 8);
    v33.f64[1] = v68;
    v34 = (int8x16_t)vcgtq_f64(v33, v32);
    v33.f64[0] = v67;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v34, *(int8x16_t *)(a1 + 8), (int8x16_t)v33);
  }
  else
  {
    v28 = v67;
    v27 = v68;
    if (v67 < *(double *)(a1 + 48))
    {
      v29 = *(double *)(a1 + 8);
      if (v67 >= v29)
        v29 = v67;
      *(double *)(a1 + 48) = v29;
    }
    if (v68 > *(double *)(a1 + 56))
    {
      v30 = *(double *)(a1 + 16);
      if (v30 >= v68)
        v30 = v68;
      *(double *)(a1 + 56) = v30;
    }
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v35 = *(double *)(a1 + 64);
    if (v28 < v35)
      v35 = v28;
    *(double *)(a1 + 64) = v35;
  }
  if (a3 && v28 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v28);
    v28 = v67;
    v27 = v68;
    v26 = *(_QWORD *)(a1 + 112);
  }
  v36 = *(_QWORD *)(a1 + 120);
  if (v26 >= v36)
  {
    v38 = *(_QWORD *)(a1 + 104);
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v38) >> 4);
    v40 = v39 + 1;
    if (v39 + 1 > 0x555555555555555)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v38) >> 4);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0x2AAAAAAAAAAAAAALL)
      v42 = 0x555555555555555;
    else
      v42 = v40;
    if (v42)
    {
      v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v42);
      v28 = v67;
      v27 = v68;
    }
    else
    {
      v43 = 0;
    }
    v44 = v42 + 48 * v39;
    v45 = v42 + 48 * v43;
    *(double *)v44 = v18;
    *(double *)(v44 + 8) = v28;
    *(double *)(v44 + 16) = v27;
    *(_QWORD *)(v44 + 24) = v14;
    *(_BYTE *)(v44 + 32) = v13;
    *(_BYTE *)(v44 + 33) = v15;
    *(_WORD *)(v44 + 40) = 0;
    *(_BYTE *)(v44 + 42) = 0;
    v37 = v44 + 48;
    v47 = *(char **)(a1 + 104);
    v46 = *(char **)(a1 + 112);
    if (v46 == v47)
    {
      v15 = v70;
      v31 = v69;
    }
    else
    {
      v15 = v70;
      v31 = v69;
      do
      {
        v48 = *((_OWORD *)v46 - 3);
        v49 = *((_OWORD *)v46 - 2);
        *(_OWORD *)(v44 - 21) = *(_OWORD *)(v46 - 21);
        *(_OWORD *)(v44 - 48) = v48;
        *(_OWORD *)(v44 - 32) = v49;
        v44 -= 48;
        v46 -= 48;
      }
      while (v46 != v47);
      v46 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v44;
    *(_QWORD *)(a1 + 112) = v37;
    *(_QWORD *)(a1 + 120) = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *(double *)v26 = v18;
    *(double *)(v26 + 8) = v28;
    *(double *)(v26 + 16) = v27;
    *(_QWORD *)(v26 + 24) = v14;
    *(_BYTE *)(v26 + 32) = v13;
    *(_BYTE *)(v26 + 33) = v15;
    *(_WORD *)(v26 + 40) = 0;
    v37 = v26 + 48;
    *(_BYTE *)(v26 + 42) = 0;
    v15 = v70;
    v31 = v69;
  }
  *(_QWORD *)(a1 + 112) = v37;
  if (!*(_BYTE *)(a1 + 176) || *(double *)(a1 + 152) <= v7)
  {
    *(double *)(a1 + 144) = v6;
    *(double *)(a1 + 152) = v7;
    *(double *)(a1 + 160) = v8;
    *(_QWORD *)(a1 + 168) = v9;
    *(_BYTE *)(a1 + 176) = v10;
    *(_BYTE *)(a1 + 177) = v11;
  }
  if (*(_BYTE *)(a1 + 33)
    && ((v50 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v14), v51 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v50), !*((_BYTE *)v51 + 48))|| *((double *)v51 + 3) <= v7))
  {
    *((double *)v51 + 2) = v6;
    *((double *)v51 + 3) = v7;
    *((double *)v51 + 4) = v8;
    v51[5] = v9;
    *((_BYTE *)v51 + 48) = v10;
    *((_BYTE *)v51 + 49) = v11;
    if (!v23)
      return;
  }
  else if (!v23)
  {
    return;
  }
LABEL_60:
  v52 = *(_QWORD *)(a1 + 440);
  v53 = *(_QWORD *)(a1 + 448);
  if (v52 >= v53)
  {
    v55 = *(_QWORD *)(a1 + 432);
    v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v55) >> 3);
    v57 = v56 + 1;
    if (v56 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v55) >> 3);
    if (2 * v58 > v57)
      v57 = 2 * v58;
    if (v58 >= 0x333333333333333)
      v59 = 0x666666666666666;
    else
      v59 = v57;
    if (v59)
      v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
    else
      v60 = 0;
    v61 = v59 + 40 * v56;
    v62 = v59 + 40 * v60;
    *(double *)v61 = v24;
    *(double *)(v61 + 8) = v19;
    *(double *)(v61 + 16) = v25;
    *(_QWORD *)(v61 + 24) = v31;
    *(_BYTE *)(v61 + 32) = v23;
    *(_BYTE *)(v61 + 33) = v15;
    v54 = v61 + 40;
    v64 = *(char **)(a1 + 432);
    v63 = *(char **)(a1 + 440);
    if (v63 != v64)
    {
      do
      {
        v65 = *(_OWORD *)(v63 - 40);
        v66 = *(_OWORD *)(v63 - 24);
        *(_WORD *)(v61 - 8) = *((_WORD *)v63 - 4);
        *(_OWORD *)(v61 - 24) = v66;
        *(_OWORD *)(v61 - 40) = v65;
        v61 -= 40;
        v63 -= 40;
      }
      while (v63 != v64);
      v63 = *(char **)(a1 + 432);
    }
    *(_QWORD *)(a1 + 432) = v61;
    *(_QWORD *)(a1 + 440) = v54;
    *(_QWORD *)(a1 + 448) = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *(double *)v52 = v24;
    *(double *)(v52 + 8) = v19;
    *(double *)(v52 + 16) = v25;
    *(_QWORD *)(v52 + 24) = v31;
    *(_BYTE *)(v52 + 32) = v23;
    v54 = v52 + 40;
    *(_BYTE *)(v52 + 33) = v15;
  }
  *(_QWORD *)(a1 + 440) = v54;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 578))
  {
    *(_BYTE *)(a1 + 580) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 580) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7C9A248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 432), *(_QWORD *)(a1 + 440), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 440) - *(_QWORD *)(a1 + 432)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7C9A330(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 456), *(id *)(a1 + 40));
  v9 = *(void **)(a1 + 192);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v10 = 0uLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  if (v9)
  {
    *(_QWORD *)(a1 + 200) = v9;
    operator delete(v9);
    v10 = 0uLL;
  }
  *(_OWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 208) = v10;
  if (*(_QWORD *)(a1 + 240))
  {
    v11 = *(_QWORD *)(a1 + 232);
    v12 = *(_QWORD **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = a1 + 232;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    if (v12[1])
      v13 = (_QWORD *)v12[1];
    else
      v13 = v12;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 456));
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a1 + 432);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 580))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 580) = 0;
  }

}

void sub_1B7C9A4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 576))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7C9A59C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 592));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 576) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7C9A900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C409A2B2ECELL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7C9AAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7C9AD18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  double v11;
  double v12;
  _QWORD v13[2];
  double v14;
  uint64_t v15;
  char v16;
  char v17;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  *(double *)v13 = a5;
  *(double *)&v13[1] = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  else
  {
    v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      v8 = 0;
    }
    *(double *)v13 = a5;
    v14 = a7;
    v16 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 576))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7C9B9E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7C9BA84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D054C0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_WORD *)(a1 + 584) = 1;
  *(_BYTE *)(a1 + 586) = 0;
  *(_BYTE *)(a1 + 588) = 0;
  *(_QWORD *)(a1 + 592) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_QWORD *)(a1 + 632) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D054C0;
  v2 = *(void **)(a1 + 616);
  if (v2)
  {
    *(_QWORD *)(a1 + 624) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 552);
  if (v3)
  {
    *(_QWORD *)(a1 + 560) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 584) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_configureForStartTime(a1);

}

void sub_1B7C9BBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 592) = v4;
    v3 = v5;
  }

}

void sub_1B7C9BC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 75, a2);
  v7 = a2;
  v4 = a1[75];
  v5 = a1[72];
  a1[72] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[72]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 256) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7C9BDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[54];

  if (*(_BYTE *)(a1 + 584))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7C9BE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 586))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 585))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 587))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 624);
    v18 = *(_QWORD *)(a1 + 632);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 616);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 624);
      v33 = *(char **)(a1 + 616);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 616);
      }
      *(_QWORD *)(a1 + 616) = v28;
      *(_QWORD *)(a1 + 624) = v21;
      *(_QWORD *)(a1 + 632) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 624) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7C9C0E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 586))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 586) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 585))
    goto LABEL_5;
  v9 = *(void **)(a1 + 608);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_383);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 608);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 608);
  *(_QWORD *)(a1 + 608) = 0;

  *(_BYTE *)(a1 + 585) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 616);
    *(_QWORD *)(a1 + 632) = 0;
    *(_QWORD *)(a1 + 624) = 0;
    *(_QWORD *)(a1 + 616) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 616);
      v37 = *(__int128 **)(a1 + 624);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 624);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 624) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 616);
  v39 = *(_QWORD *)(a1 + 624);
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 560) != *(_QWORD *)(a1 + 552))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 560) != *(_QWORD *)(a1 + 552));
  }
  *(_BYTE *)(a1 + 586) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 588))
    {
      *(_BYTE *)(a1 + 588) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 586) = 0;
LABEL_83:

  return v7;
}

void sub_1B7C9C7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 586) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 587) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 586))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 586))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 608);
    *(_QWORD *)(a1 + 608) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 585) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 585))
  {
    v8 = *(void **)(a1 + 608);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 608);
      *(_QWORD *)(a1 + 608) = v9;

      v8 = *(void **)(a1 + 608);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7C9CADC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 584) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 584) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7C9CBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 584) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 584), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsCumulative>::archive((uint64_t)&v37, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(int **)(a1 + 344);
  if (v9 != (int *)(a1 + 352))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsCumulative>::archive((uint64_t)&v37, v9 + 10);
      v10 = *((_QWORD *)v9 + 4);
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (int *)*((_QWORD *)v9 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(int **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (int *)*((_QWORD *)v9 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (int *)(a1 + 352));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 552);
  for (k = *(int8x16_t **)(a1 + 560); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7C9CF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t i;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  id v60;
  _QWORD *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  _BYTE v65[432];
  __int128 v66;
  __int128 v67;
  int8x16_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  int8x16_t v73;
  uint64_t v74;
  uint64_t v75[4];
  void *__p;
  char *v77;
  unint64_t v78;
  _BYTE v79[64];
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  int v93;
  __int128 v94;
  __int128 v95;
  int v96;
  __int128 v97;
  __int128 v98;
  int v99;
  void (**v100)(statistics::StatisticsEngine *__hidden);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  _BYTE v107[32];
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;

  v60 = a2;
  *(_BYTE *)(a1 + 584) = objc_msgSend(v60, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v60;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket((uint64_t)v65, 0, -1.79769313e308, 1.79769313e308);
  v66 = 0u;
  v67 = 0u;
  v108 = 0;
  v63 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v107, (const unsigned __int8 *)objc_msgSend(v63, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v108));
  v62 = a1;
  v100 = &off_1E6D09A88;
  v101 = 0;
  v105 = 0;
  v103 = 0;
  v104 = 0;
  v106 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v100, (PB::Reader *)v107);
  v64 = v102;
  if (v101)
  {
    v72 = 0;
    memset(v75, 0, sizeof(v75));
    __p = 0;
    memset(&v79[8], 0, 50);
    v80 = 0u;
    v81 = 0u;
    LOWORD(v82) = 0;
    v85 = 0;
    v78 = 0;
    v77 = 0;
    *(_DWORD *)v79 = 0;
    v84 = 0;
    v83 = &v84;
    v87 = 0u;
    v86 = 0u;
    v88 = 1065353216;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0;
    v93 = 1065353216;
    v94 = 0u;
    v95 = 0u;
    v96 = 1065353216;
    v97 = 0u;
    v98 = 0u;
    v99 = 1065353216;
    v68 = vextq_s8(*(int8x16_t *)(v101 + 8), *(int8x16_t *)(v101 + 8), 8uLL);
    v4 = *(_QWORD *)(v101 + 72);
    v69 = *(_QWORD *)(v101 + 64);
    v70 = *(_BYTE *)(v101 + 185);
    v71 = *(_BYTE *)(v101 + 186);
    v73 = vextq_s8(*(int8x16_t *)(v101 + 24), *(int8x16_t *)(v101 + 24), 8uLL);
    v74 = v4;
    v6 = *(_QWORD *)(v101 + 80);
    v5 = *(_QWORD *)(v101 + 88);
    v61 = (_QWORD *)v101;
    if (v6 != v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v7 >= v78)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v78 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v78 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v77;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v77 = (char *)(v19 + 6);
          v78 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v77 = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    v23 = (_QWORD *)v61[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCumulative>::unarchive((uint64_t)&v109, v23);
      v80 = v113;
      v81 = v114;
      v82 = v115;
      *(_OWORD *)v79 = v109;
      *(_OWORD *)&v79[16] = v110;
      *(_OWORD *)&v79[32] = v111;
      *(_OWORD *)&v79[48] = v112;
    }
    v24 = (_QWORD **)v61[17];
    v25 = (_QWORD **)v61[18];
    while (v24 != v25)
    {
      v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsCumulative>::unarchive((uint64_t)&v109, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v84;
      v29 = &v84;
      v30 = &v84;
      if (v84)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_33;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_36;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_33:
      v33 = (char *)operator new(0x90uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *((_QWORD *)v33 + 17) = 0;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v83)
      {
        v83 = (uint64_t **)*v83;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v84, v32);
      ++v85;
LABEL_36:
      v34 = v115;
      v35 = v114;
      v36 = v113;
      v37 = v111;
      *(_OWORD *)(v33 + 88) = v112;
      *(_OWORD *)(v33 + 104) = v36;
      *(_OWORD *)(v33 + 120) = v35;
      v38 = v110;
      *(_OWORD *)(v33 + 40) = v109;
      *((_QWORD *)v33 + 17) = v34;
      *(_OWORD *)(v33 + 56) = v38;
      ++v24;
      *(_OWORD *)(v33 + 72) = v37;
    }
    v39 = v61[5];
    for (i = v61[6]; v39 != i; v39 += 8)
    {
      v42 = *(double *)(*(_QWORD *)v39 + 8);
      v41 = *(double *)(*(_QWORD *)v39 + 16);
      if (v42 >= v41)
        v43 = *(double *)(*(_QWORD *)v39 + 16);
      else
        v43 = *(double *)(*(_QWORD *)v39 + 8);
      if (v41 < v42)
        v41 = *(double *)(*(_QWORD *)v39 + 8);
      HKIntervalMask<double>::_insertInterval(v75, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((uint64_t)v65, (uint64_t)&v68);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)&v68);
  }
  v44 = v103;
  v45 = v104;
  if (v103 != v104)
  {
    v46 = *((_QWORD *)&v66 + 1);
    do
    {
      v47 = *(_QWORD *)(*(_QWORD *)v44 + 24);
      v48 = *(_QWORD *)(*(_QWORD *)v44 + 32);
      v49 = *(_QWORD *)(*(_QWORD *)v44 + 8);
      v50 = *(_QWORD *)(*(_QWORD *)v44 + 16);
      if (v46 >= (unint64_t)v67)
      {
        v51 = (void *)v66;
        v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v66) >> 3);
        v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v67 - v66) >> 3) > v53)
          v53 = 0x999999999999999ALL * ((uint64_t)(v67 - v66) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v67 - v66) >> 3) >= 0x333333333333333)
          v54 = 0x666666666666666;
        else
          v54 = v53;
        if (v54)
        {
          v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          v46 = *((_QWORD *)&v66 + 1);
          v51 = (void *)v66;
        }
        else
        {
          v55 = 0;
        }
        v56 = v54 + 40 * v52;
        *(_QWORD *)v56 = v48;
        *(_QWORD *)(v56 + 8) = v47;
        *(_QWORD *)(v56 + 16) = v49;
        *(_QWORD *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        v57 = v56;
        if ((void *)v46 != v51)
        {
          do
          {
            v58 = *(_OWORD *)(v46 - 40);
            v59 = *(_OWORD *)(v46 - 24);
            *(_WORD *)(v57 - 8) = *(_WORD *)(v46 - 8);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while ((void *)v46 != v51);
          v51 = (void *)v66;
        }
        v46 = v56 + 40;
        *(_QWORD *)&v66 = v57;
        *((_QWORD *)&v66 + 1) = v56 + 40;
        *(_QWORD *)&v67 = v54 + 40 * v55;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *(_QWORD *)v46 = v48;
        *(_QWORD *)(v46 + 8) = v47;
        *(_QWORD *)(v46 + 16) = v49;
        *(_QWORD *)(v46 + 24) = v50;
        *(_WORD *)(v46 + 32) = 1;
        v46 += 40;
      }
      *((_QWORD *)&v66 + 1) = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v100);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((_QWORD *)(v62 + 112), (uint64_t)&v64);
  if ((_QWORD)v66)
  {
    *((_QWORD *)&v66 + 1) = v66;
    operator delete((void *)v66);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v65);

}

void sub_1B7C9D69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3C8]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_WORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 440);
  if (v2)
  {
    *(_QWORD *)(a1 + 448) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 392);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 352);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 312);
  v2 = *(void **)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)(a1 + 296) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 248);
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 232));
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[432];
  uint64_t v18;
  _BYTE v19[432];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[368];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 600));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 584) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7C9DB90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 55), (__n128 *)(a2 + 440));
  v4 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a2 + 464) = 0;
  v5 = (void *)a1[58];
  a1[58] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 168);
  v13 = *(_OWORD *)(a2 + 184);
  v14 = *(_OWORD *)(a2 + 200);
  v15 = *(_QWORD *)(a2 + 216);
  v16 = *(_OWORD *)(a2 + 120);
  v17 = *(_OWORD *)(a2 + 136);
  v18 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 232) = 0;
  v19 = (_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 152) = v18;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 120) = v16;
  *(_QWORD *)(a1 + 216) = v15;
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 184) = v13;
  *(_OWORD *)(a1 + 168) = v12;
  *(_QWORD *)(a1 + 240) = 0;
  v20 = *(_QWORD **)(a2 + 224);
  if (v20 != (_QWORD *)(a2 + 232))
  {
    v21 = 0;
    v22 = (_QWORD *)(a1 + 232);
    while (1)
    {
      v23 = v20[4];
      v24 = (_QWORD *)(a1 + 232);
      if (v22 == v19)
        goto LABEL_12;
      v25 = v21;
      v26 = (_QWORD *)(a1 + 232);
      if (v21)
      {
        do
        {
          v24 = v25;
          v25 = (_QWORD *)v25[1];
        }
        while (v25);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v26[2];
          v27 = *v24 == (_QWORD)v26;
          v26 = v24;
        }
        while (v27);
      }
      if (v24[4] < v23)
      {
LABEL_12:
        if (v21)
          v28 = (uint64_t **)v24;
        else
          v28 = (uint64_t **)(a1 + 232);
        if (v21)
          v29 = (uint64_t **)(v24 + 1);
        else
          v29 = (uint64_t **)(a1 + 232);
        if (!*v29)
        {
LABEL_28:
          v32 = (uint64_t *)operator new(0x90uLL);
          v33 = *((_OWORD *)v20 + 2);
          v34 = *((_OWORD *)v20 + 4);
          *((_OWORD *)v32 + 3) = *((_OWORD *)v20 + 3);
          *((_OWORD *)v32 + 4) = v34;
          *((_OWORD *)v32 + 2) = v33;
          v35 = *((_OWORD *)v20 + 5);
          v36 = *((_OWORD *)v20 + 6);
          v37 = *((_OWORD *)v20 + 8);
          *((_OWORD *)v32 + 7) = *((_OWORD *)v20 + 7);
          *((_OWORD *)v32 + 8) = v37;
          *((_OWORD *)v32 + 5) = v35;
          *((_OWORD *)v32 + 6) = v36;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 224), (uint64_t)v28, v29, v32);
        }
      }
      else
      {
        v29 = (uint64_t **)(a1 + 232);
        v28 = (uint64_t **)(a1 + 232);
        if (!v21)
          goto LABEL_28;
        v30 = v21;
        while (1)
        {
          while (1)
          {
            v28 = (uint64_t **)v30;
            v31 = v30[4];
            if (v31 <= v23)
              break;
            v30 = *v28;
            v29 = v28;
            if (!*v28)
              goto LABEL_28;
          }
          if (v31 >= v23)
            break;
          v30 = v28[1];
          if (!v30)
          {
            v29 = v28 + 1;
            goto LABEL_28;
          }
        }
      }
      v38 = (_QWORD *)v20[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v20[2];
          v27 = *v39 == (_QWORD)v20;
          v20 = v39;
        }
        while (!v27);
      }
      if (v39 == (_QWORD *)(a2 + 232))
        break;
      v21 = (_QWORD *)*v19;
      v22 = *(_QWORD **)(a1 + 224);
      v20 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 248, a2 + 248);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 312, a2 + 312);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 352, a2 + 352);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 392, a2 + 392);
  return a1;
}

void sub_1B7C9DF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  v19 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 296) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 184);
  v11 = *(_OWORD *)(a2 + 200);
  v12 = *(_OWORD *)(a2 + 168);
  v14 = a1 + 232;
  v13 = *(_QWORD **)(a1 + 232);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 200) = v11;
  *(_OWORD *)(a1 + 168) = v12;
  v15 = *(_OWORD *)(a2 + 152);
  v16 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v16;
  *(_OWORD *)(a1 + 152) = v15;
  std::__tree<long>::destroy(v13);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v17 = (_QWORD *)(a2 + 232);
  v18 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 232) = v18;
  v19 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 240) = v19;
  if (v19)
  {
    *(_QWORD *)(v18 + 16) = v14;
    *(_QWORD *)(a2 + 224) = v17;
    *v17 = 0;
    *(_QWORD *)(a2 + 240) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 224) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 248, (uint64_t *)(a2 + 248));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 288, (__n128 *)(a2 + 288));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 312, (uint64_t *)(a2 + 312));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 352, (uint64_t *)(a2 + 352));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 392, (uint64_t *)(a2 + 392));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  unint64_t v2;
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id WeakRetained;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  void **v40;
  char *v41;
  unint64_t v42;
  id v43;
  id v44;
  void *v45;
  char v46;
  float v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  int8x8_t prime;
  void *v52;
  void *v53;
  uint64_t v54;
  _QWORD **v55;
  unint64_t v56;
  uint8x8_t v57;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t v60;
  _QWORD *i;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD *v71;
  _QWORD *v72;
  BOOL v73;
  void *v74;
  uint64_t **v75;
  uint64_t *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  double v80;
  double v81;
  void *v82;
  void *v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  int v89;
  void *v90;
  void *v91;
  int v92;
  id v94;
  id v95;
  unint64_t v97;
  id v98;
  id v99;
  char v100;
  void *v101;
  uint64_t v102;
  id v103;
  id v104;
  void *__p[2];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  _QWORD v112[3];
  _QWORD *v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = a2 + 5;
  if (v4 != -1.79769313e308)
    v6 = a2;
  v102 = (uint64_t)a2;
  v103 = (id)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  if (a2[1] == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v103, v8);
  v13 = a1;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v2 = (unint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(v102 + 288);
      v16 = *(uint64_t **)(v102 + 296);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend((id)v2, "containsObject:", v19) & 1) == 0)
            objc_msgSend((id)v2, "addObject:", v19);
        }

        ++v15;
      }
      v20 = (void *)objc_msgSend((id)v2, "copy");
      objc_msgSend((id)v12, "_setSources:", v20);

      v13 = a1;
    }
  }

  v112[0] = &off_1E6D05590;
  v113 = v112;
  v104 = (id)v12;
  objc_msgSend(*(id *)(v13 + 16), "canonicalUnit");
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = *(_OWORD *)(v102 + 168);
  v22 = *(_OWORD *)(v102 + 200);
  v109 = *(_OWORD *)(v102 + 184);
  v110 = v22;
  v111 = *(_QWORD *)(v102 + 216);
  v23 = *(_OWORD *)(v102 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v102 + 120);
  v106 = v23;
  v107 = *(_OWORD *)(v102 + 152);
  v108 = v21;
  if (!v113)
    std::__throw_bad_function_call[abi:ne180100]();
  v24 = (*(uint64_t (**)(_QWORD *, void **))(*v113 + 48))(v113, __p);
  v25 = *(_QWORD *)(v24 + 8);
  v27 = *(double *)(v24 + 16);
  v26 = *(double *)(v24 + 24);
  v28 = *(double *)(v24 + 32);
  objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v101, *(double *)v24);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v104, "setSumQuantity:", v29);

  objc_msgSend(v104, "setDataCount:", v25);
  v30 = *(_QWORD *)(a1 + 24);
  v100 = v30;
  if ((v30 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v101, v27);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v104, "setMostRecentQuantity:", v31);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v26, v28);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v104, "setMostRecentQuantityDateInterval:", v32);

    v30 = *(_QWORD *)(a1 + 24);
  }
  if ((v30 & 1) == 0)
    goto LABEL_131;
  v99 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v98 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if ((v100 & 0x20) != 0)
  {
    v94 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v95 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v94 = 0;
    v95 = 0;
  }
  *(_OWORD *)__p = 0u;
  v106 = 0u;
  LODWORD(v107) = 1065353216;
  v33 = *(_QWORD **)(v102 + 224);
  if (v33 == (_QWORD *)(v102 + 232))
    goto LABEL_128;
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_bundleIdentifierForSourceID(v102, v33[4]);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = v34;
    if (!v34)
      goto LABEL_103;
    v36 = objc_msgSend(v34, "hash");
    v12 = v36;
    v37 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_46;
    v38 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v38.i16[0] = vaddlv_u8(v38);
    v39 = v38.u32[0];
    if (v38.u32[0] > 1uLL)
    {
      v2 = v36;
      if ((void *)v36 >= __p[1])
        v2 = v36 % (unint64_t)__p[1];
    }
    else
    {
      v2 = ((unint64_t)__p[1] - 1) & v36;
    }
    v40 = (void **)*((_QWORD *)__p[0] + v2);
    if (!v40 || (v41 = (char *)*v40) == 0)
    {
LABEL_46:
      v41 = (char *)operator new(0x80uLL);
      *(_QWORD *)v41 = 0;
      *((_QWORD *)v41 + 1) = v12;
      *((_QWORD *)v41 + 2) = v35;
      *(_OWORD *)(v41 + 24) = 0u;
      *(_OWORD *)(v41 + 40) = 0u;
      *(_OWORD *)(v41 + 56) = 0u;
      *(_OWORD *)(v41 + 72) = 0u;
      *(_OWORD *)(v41 + 88) = 0u;
      *(_OWORD *)(v41 + 104) = 0u;
      *((_QWORD *)v41 + 15) = 0;
      v47 = (float)(unint64_t)(*((_QWORD *)&v106 + 1) + 1);
      if (v37 && (float)(*(float *)&v107 * (float)v37) >= v47)
      {
LABEL_92:
        v63 = __p[0];
        v64 = (_QWORD *)*((_QWORD *)__p[0] + v2);
        if (v64)
        {
          *(_QWORD *)v41 = *v64;
        }
        else
        {
          *(_QWORD *)v41 = v106;
          *(_QWORD *)&v106 = v41;
          v63[v2] = &v106;
          if (!*(_QWORD *)v41)
          {
LABEL_101:
            ++*((_QWORD *)&v106 + 1);
            goto LABEL_102;
          }
          v65 = *(_QWORD *)(*(_QWORD *)v41 + 8);
          if ((v37 & (v37 - 1)) != 0)
          {
            if (v65 >= v37)
              v65 %= v37;
          }
          else
          {
            v65 &= v37 - 1;
          }
          v64 = (char *)__p[0] + 8 * v65;
        }
        *v64 = v41;
        goto LABEL_101;
      }
      v48 = (v37 & (v37 - 1)) != 0;
      if (v37 < 3)
        v48 = 1;
      v49 = v48 | (2 * v37);
      v50 = vcvtps_u32_f32(v47 / *(float *)&v107);
      if (v49 <= v50)
        prime = (int8x8_t)v50;
      else
        prime = (int8x8_t)v49;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v37 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_58;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v58 = vcvtps_u32_f32((float)*((unint64_t *)&v106 + 1) / *(float *)&v107);
        if (__p[1] < (void *)3
          || (v59 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
        {
          v58 = std::__next_prime(v58);
        }
        else
        {
          v60 = 1 << -(char)__clz(v58 - 1);
          if (v58 >= 2)
            v58 = v60;
        }
        if (*(_QWORD *)&prime <= v58)
          prime = (int8x8_t)v58;
        if (*(_QWORD *)&prime >= v37)
        {
          v37 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_58:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v52 = operator new(8 * *(_QWORD *)&prime);
            v53 = __p[0];
            __p[0] = v52;
            if (v53)
              operator delete(v53);
            v54 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v54++) = 0;
            while (*(_QWORD *)&prime != v54);
            v55 = (_QWORD **)v106;
            if ((_QWORD)v106)
            {
              v56 = *(_QWORD *)(v106 + 8);
              v57 = (uint8x8_t)vcnt_s8(prime);
              v57.i16[0] = vaddlv_u8(v57);
              if (v57.u32[0] > 1uLL)
              {
                if (v56 >= *(_QWORD *)&prime)
                  v56 %= *(_QWORD *)&prime;
              }
              else
              {
                v56 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v56) = &v106;
              for (i = *v55; i; v56 = v62)
              {
                v62 = i[1];
                if (v57.u32[0] > 1uLL)
                {
                  if (v62 >= *(_QWORD *)&prime)
                    v62 %= *(_QWORD *)&prime;
                }
                else
                {
                  v62 &= *(_QWORD *)&prime - 1;
                }
                if (v62 != v56)
                {
                  if (!*((_QWORD *)__p[0] + v62))
                  {
                    *((_QWORD *)__p[0] + v62) = v55;
                    goto LABEL_83;
                  }
                  *v55 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v62);
                  **((_QWORD **)__p[0] + v62) = i;
                  i = v55;
                }
                v62 = v56;
LABEL_83:
                v55 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v37 = (unint64_t)prime;
            goto LABEL_87;
          }
          v74 = __p[0];
          __p[0] = 0;
          if (v74)
            operator delete(v74);
          v37 = 0;
          __p[1] = 0;
        }
      }
LABEL_87:
      if ((v37 & (v37 - 1)) != 0)
      {
        if (v12 >= v37)
          v2 = v12 % v37;
        else
          v2 = v12;
      }
      else
      {
        v2 = (v37 - 1) & v12;
      }
      goto LABEL_92;
    }
    v97 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v42 = *((_QWORD *)v41 + 1);
      if (v42 == v12)
        break;
      if (v39 > 1)
      {
        if (v42 >= v37)
          v42 %= v37;
      }
      else
      {
        v42 &= v97;
      }
      if (v42 != v2)
        goto LABEL_46;
LABEL_45:
      v41 = *(char **)v41;
      if (!v41)
        goto LABEL_46;
    }
    v43 = *((id *)v41 + 2);
    v44 = v35;
    v45 = v44;
    if (v43 != v44)
    {
      v46 = objc_msgSend(v43, "isEqualToString:", v44);

      if ((v46 & 1) != 0)
        goto LABEL_102;
      goto LABEL_45;
    }

LABEL_102:
    v66 = *(_OWORD *)(v33 + 5);
    v67 = *(_OWORD *)(v33 + 7);
    *(_OWORD *)(v41 + 56) = *(_OWORD *)(v33 + 9);
    *(_OWORD *)(v41 + 40) = v67;
    *(_OWORD *)(v41 + 24) = v66;
    v68 = *(_OWORD *)(v33 + 11);
    v69 = *(_OWORD *)(v33 + 13);
    v70 = *(_OWORD *)(v33 + 15);
    *((_QWORD *)v41 + 15) = v33[17];
    *(_OWORD *)(v41 + 104) = v70;
    *(_OWORD *)(v41 + 88) = v69;
    *(_OWORD *)(v41 + 72) = v68;

LABEL_103:
    v71 = (_QWORD *)v33[1];
    if (v71)
    {
      do
      {
        v72 = v71;
        v71 = (_QWORD *)*v71;
      }
      while (v71);
    }
    else
    {
      do
      {
        v72 = (_QWORD *)v33[2];
        v73 = *v72 == (_QWORD)v33;
        v33 = v72;
      }
      while (!v73);
    }
    v33 = v72;
  }
  while (v72 != (_QWORD *)(v102 + 232));
  v75 = (uint64_t **)v106;
  if ((_QWORD)v106)
  {
    v12 = 0x1E0CB3000uLL;
    do
    {
      v76 = v75[2];
      if (!v113
        || (v2 = (unint64_t)(v75 + 3),
            objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v101, *(double *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v113 + 48))(v113, (uint64_t *)v75 + 3)), v77 = (void *)objc_claimAutoreleasedReturnValue(), objc_msgSend(v99, "setObject:forKeyedSubscript:", v77, v76), v77, !v113))
      {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v113 + 48))(v113, (uint64_t *)v75 + 3) + 8));
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "setObject:forKeyedSubscript:", v78, v76);

      if ((v100 & 0x20) != 0)
      {
        if (!v113)
          std::__throw_bad_function_call[abi:ne180100]();
        v79 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v113 + 48))(v113, (uint64_t *)v75 + 3);
        v80 = *(double *)(v79 + 24);
        v81 = *(double *)(v79 + 32);
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v101, *(double *)(v79 + 16));
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v94, "setObject:forKeyedSubscript:", v82, v76);

        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v80, v81);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v95, "setObject:forKeyedSubscript:", v83, v76);

      }
      v75 = (uint64_t **)*v75;
    }
    while (v75);
  }
LABEL_128:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  objc_msgSend(v104, "setSumQuantityBySource:", v99);
  objc_msgSend(v104, "setDataCountBySource:", v98);
  if ((v100 & 0x20) != 0)
  {
    objc_msgSend(v104, "setMostRecentQuantityBySource:", v94);
    objc_msgSend(v104, "setMostRecentQuantityDateIntervalBySource:", v95);
  }

LABEL_131:
  v84 = v113;
  if (v113 == v112)
  {
    v85 = 4;
    v84 = v112;
LABEL_135:
    (*(void (**)(void))(*v84 + 8 * v85))();
  }
  else if (v113)
  {
    v85 = 5;
    goto LABEL_135;
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v104, "averageQuantity");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  if (v87)
  {
    objc_msgSend(v104, "averageQuantity");
    v12 = objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend((id)v12, "isCompatibleWithUnit:", v86) & 1) == 0)
    {

      goto LABEL_150;
    }
  }
  objc_msgSend(v104, "minimumQuantity");
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  if (v88)
  {
    objc_msgSend(v104, "minimumQuantity");
    v2 = objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend((id)v2, "isCompatibleWithUnit:", v86))
    {
      v89 = 1;
      goto LABEL_144;
    }
  }
  objc_msgSend(v104, "maximumQuantity");
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  if (v90)
  {
    objc_msgSend(v104, "maximumQuantity");
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    v92 = objc_msgSend(v91, "isCompatibleWithUnit:", v86);

    v89 = v92 ^ 1;
    if (v88)
      goto LABEL_144;
LABEL_148:
    if (!v87)
      goto LABEL_149;
LABEL_145:

    if ((v89 & 1) == 0)
      goto LABEL_151;
LABEL_150:
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v86);
    goto LABEL_151;
  }
  v89 = 0;
  if (!v88)
    goto LABEL_148;
LABEL_144:

  if (v87)
    goto LABEL_145;
LABEL_149:

  if (v89)
    goto LABEL_150;
LABEL_151:

  return v104;
}

void sub_1B7C9ED1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22)
{
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;

  v24 = *(_QWORD **)(v22 - 136);
  if (v24 == (_QWORD *)(v22 - 160))
  {
    v25 = 4;
    v24 = (_QWORD *)(v22 - 160);
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_6:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 272);
  v2 = *(_QWORD *)(a1 + 288);
  if (v1 != (*(_QWORD *)(a1 + 296) - v2) >> 3)
  {
    v4 = (void **)(a1 + 288);
    *(_QWORD *)(a1 + 296) = v2;
    std::vector<long long>::reserve((void **)(a1 + 288), v1);
    v5 = *(_QWORD **)(a1 + 264);
    if (v5)
    {
      v6 = *(char **)(a1 + 296);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 304);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 288);
            v6 = *(char **)(a1 + 296);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 288) = v16;
          *(_QWORD *)(a1 + 296) = v9;
          *(_QWORD *)(a1 + 304) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 296) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7C9F0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  char v13;
  char v14;
  double v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  id WeakRetained;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  __int128 *v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  int v51;
  char v52;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  unint64_t v58;
  __int128 *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  __int128 *v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  char *v76;
  __int128 *v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  void *v81;
  unint64_t v82;
  uint64_t **v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  double v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  unint64_t v108;
  uint64_t **v109;
  __int128 v110;
  char *v111;
  double v112;
  void *v113;
  void *v114;
  _QWORD *v115;
  id *location;
  __int128 *v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  double **v121;
  char v122;
  char v123;
  uint64_t v124;
  void **v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int16 v132;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v125 = (void **)(a1 + 96);
    v121 = (double **)(a1 + 64);
    v119 = a1 + 120;
    location = (id *)(a1 + 88);
    v115 = (_QWORD *)(a1 + 232);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_124:
      *(double *)(a1 + 56) = a2;
LABEL_125:
      v112 = *(double *)(a1 + 56);
      if (v112 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCumulative>]");
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v113, "handleFailureInFunction:file:lineNumber:description:", v114, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v112 = *(double *)(a1 + 56);
      }
      v5 = v112;
      if (v112 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v20 = a2;
      v21 = a2;
      v22 = v5;
      v23 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v24 = *(double *)(v23 + 8);
          v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21)
            v21 = *(double *)(v23 + 8);
          if (v25 > v5)
            v27 = *(double *)(v23 + 16);
          else
            v27 = v20;
          if (v25 < v20)
          {
            v22 = v5;
            v20 = v27;
          }
          v23 += 48;
        }
        while ((__int128 *)v23 != v7);
      }
      if (v20 >= v21)
        v28 = v21;
      else
        v28 = v20;
      v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        v30 = v29 * floor(v28 / v29);
        v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31)
          v28 = v30;
        else
          v28 = v31;
      }
      *v125 = 0;
      v125[1] = 0;
      v125[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        v35 = *(char **)(a1 + 96);
        v34 = *(char **)(a1 + 104);
        v36 = v32;
        if (v34 != v35)
        {
          do
          {
            v37 = *((_OWORD *)v34 - 3);
            v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          v34 = (char *)*v125;
        }
        *(_QWORD *)(a1 + 96) = v36;
        *(_QWORD *)(a1 + 104) = v32;
        *(_QWORD *)(a1 + 112) = &v32[48 * v33];
        if (v34)
          operator delete(v34);
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder(a1);
      v117 = (__int128 *)v6;
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v127 = a1;
        v40 = 126 - 2 * __clz(v8);
        if (v117 == v7)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*,false>((uint64_t)v117, v7, (uint64_t)&v127, v41, 1);
      }
      if (*(_BYTE *)(a1 + 25))
        v118 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v118 = 0;
      if (v117 == v7)
      {
LABEL_106:
        v96 = *(_QWORD **)(a1 + 224);
        if (v96 != v115)
        {
          do
          {
            v97 = (_QWORD *)v96[1];
            if (v97)
            {
              do
              {
                v98 = v97;
                v97 = (_QWORD *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                v98 = (_QWORD *)v96[2];
                v99 = *v98 == (_QWORD)v96;
                v96 = v98;
              }
              while (!v99);
            }
            v96 = v98;
          }
          while (v98 != v115);
        }
        *(double *)(a1 + 56) = v28;

        if (v117)
          operator delete(v117);
        goto LABEL_125;
      }
      v120 = 0;
      v44 = 0;
      v45 = v117;
      while (2)
      {
        v46 = v45[1];
        v127 = *v45;
        v128 = v46;
        v129 = *((_QWORD *)v45 + 4);
        v47 = v46;
        v48 = v28 - *((double *)&v127 + 1);
        v49 = *(double *)&v46 - *((double *)&v127 + 1);
        if (v49 - (v28 - *((double *)&v127 + 1)) < 0.01)
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = 0.0;
          v47 = 0;
          v54 = 0.0;
          if (!(_BYTE)v129)
            goto LABEL_59;
LABEL_54:
          v123 = v52;
          v124 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
          v56 = *((unsigned __int8 *)v45 + 42);
          v57 = *((unsigned __int8 *)v45 + 41);
          v122 = *((_BYTE *)v45 + 40);
          if (!(_BYTE)v129)
            goto LABEL_87;
          if ((v44 & 1) != 0)
          {
            v58 = *((_QWORD *)&v128 + 1);
            if (v120 == *((_QWORD *)&v128 + 1) || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsCumulative>::addSample(v119, (double *)&v127, v56 == 0);
              v56 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCumulative>::addSample(v119, (double *)&v127, v56 == 0);
            v56 = 1;
            v58 = *((_QWORD *)&v128 + 1);
            v120 = *((_QWORD *)&v128 + 1);
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_86;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_bundleIdentifierForSourceID(a1, v58);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v69)
            goto LABEL_85;
          objc_msgSend(v118, "objectForKeyedSubscript:", v69);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v71 = v70;
          if (v70)
          {
            if (objc_msgSend(v70, "longLongValue") != v58 && !*(_BYTE *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              v44 = 1;
LABEL_87:
              if (v51)
              {
                v84 = v56 != 0;
                v86 = *(char **)(a1 + 104);
                v85 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((_QWORD *)v86 + 2) = v47;
                  *((_QWORD *)v86 + 3) = v124;
                  v86[32] = v51;
                  v86[33] = v123;
                  v86[40] = v122;
                  v86[41] = v57;
                  v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                v80 = (char *)*v125;
                v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (_BYTE *)*v125) >> 4);
                v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (_QWORD)v80) >> 4);
                if (2 * v89 > v88)
                  v88 = 2 * v89;
                if (v89 >= 0x2AAAAAAAAAAAAAALL)
                  v90 = 0x555555555555555;
                else
                  v90 = v88;
                if (v90)
                {
                  v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  v80 = *(char **)(a1 + 96);
                  v86 = *(char **)(a1 + 104);
                }
                else
                {
                  v91 = 0;
                }
                v92 = v90 + 48 * v87;
                *(double *)v92 = v54;
                *(double *)(v92 + 8) = v53;
                *(_QWORD *)(v92 + 16) = v47;
                *(_QWORD *)(v92 + 24) = v124;
                *(_BYTE *)(v92 + 32) = v51;
                *(_BYTE *)(v92 + 33) = v123;
                *(_BYTE *)(v92 + 40) = v122;
                *(_BYTE *)(v92 + 41) = v57;
                *(_BYTE *)(v92 + 42) = v84;
                v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    v94 = *((_OWORD *)v86 - 3);
                    v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 48) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  v80 = (char *)*v125;
                }
                v63 = (_OWORD *)(v92 + 48);
                *(_QWORD *)(a1 + 96) = v93;
                *(_QWORD *)(a1 + 104) = v92 + 48;
                *(_QWORD *)(a1 + 112) = v90 + 48 * v91;
                if (v80)
LABEL_103:
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v58);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v118, "setObject:forKeyedSubscript:", v81, v69);

          }
          v82 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_canonicalSourceIDForSourceID(a1, v58);
          v83 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource(a1, v82);
          HDStatisticsRelative<HDStatisticsCumulative>::addSample((uint64_t)v83, (double *)&v127, v57 == 0);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          LOBYTE(v129) = 0;
          goto LABEL_59;
        }
        v55 = v48 / v49 * *(double *)&v127;
        v50 = *((_QWORD *)&v128 + 1);
        v52 = BYTE1(v129);
        v54 = *(double *)&v127 - v55;
        *(double *)&v127 = v55;
        *(double *)&v128 = v28;
        v53 = v28;
        v51 = v129;
        if ((_BYTE)v129)
          goto LABEL_54;
LABEL_59:
        v59 = *(__int128 **)(a1 + 104);
        v60 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          v61 = *v45;
          v62 = v45[2];
          v59[1] = v45[1];
          v59[2] = v62;
          *v59 = v61;
          v63 = v59 + 3;
          goto LABEL_104;
        }
        v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (_BYTE *)*v125) >> 4);
        v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (_QWORD)*v125) >> 4);
        if (2 * v66 > v65)
          v65 = 2 * v66;
        if (v66 >= 0x2AAAAAAAAAAAAAALL)
          v67 = 0x555555555555555;
        else
          v67 = v65;
        if (v67)
          v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        else
          v68 = 0;
        v72 = (__int128 *)(v67 + 48 * v64);
        v73 = *v45;
        v74 = v45[2];
        v72[1] = v45[1];
        v72[2] = v74;
        *v72 = v73;
        v76 = *(char **)(a1 + 96);
        v75 = *(char **)(a1 + 104);
        v77 = v72;
        if (v75 != v76)
        {
          do
          {
            v78 = *((_OWORD *)v75 - 3);
            v79 = *((_OWORD *)v75 - 2);
            *(__int128 *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          v75 = (char *)*v125;
        }
        v63 = v72 + 3;
        *(_QWORD *)(a1 + 96) = v77;
        *(_QWORD *)(a1 + 104) = v72 + 3;
        *(_QWORD *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(_QWORD *)(a1 + 104) = v63;
LABEL_105:
        v45 += 3;
        if (v45 == v7)
          goto LABEL_106;
        continue;
      }
    }
    v10 = *(double *)v6;
    v9 = *(double *)(v6 + 8);
    v11 = *(double *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 24);
    v13 = *(_BYTE *)(v6 + 32);
    v14 = *(_BYTE *)(v6 + 33);
    v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        v42 = 0;
        v43 = 0;
        v18 = 0.0;
        v17 = *(double *)(v6 + 16);
        v16 = *(_BYTE *)(v6 + 32);
        v19 = 0.0;
        v11 = 0.0;
        v13 = 0;
LABEL_117:
        v101 = *(unsigned __int8 *)(v6 + 42);
        v102 = *(unsigned __int8 *)(v6 + 41);
        v103 = *(_QWORD *)(a1 + 96);
        v104 = *(unsigned __int8 *)(v6 + 40);
        *(double *)&v127 = v10;
        *((double *)&v127 + 1) = v9;
        *(double *)&v128 = v17;
        *((_QWORD *)&v128 + 1) = v12;
        LOBYTE(v129) = v16;
        BYTE1(v129) = v14;
        *(_DWORD *)((char *)&v129 + 2) = *(_DWORD *)(v103 + 34);
        HIWORD(v129) = *(_WORD *)(v103 + 38);
        *(double *)&v130 = v18;
        *((double *)&v130 + 1) = v19;
        *(double *)&v131 = v11;
        *((_QWORD *)&v131 + 1) = v42;
        LOBYTE(v132) = v13;
        HIBYTE(v132) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
        v105 = v104 != 0;
        v106 = v102 != 0;
        v107 = v101 != 0;
        if ((_BYTE)v129)
        {
          HDStatisticsRelative<HDStatisticsCumulative>::addSample(v119, (double *)&v127, v101 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v108 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v128 + 1));
            v109 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource(a1, v108);
            HDStatisticsRelative<HDStatisticsCumulative>::addSample((uint64_t)v109, (double *)&v127, v102 == 0);
          }
          v105 = 1;
          v106 = 1;
          v107 = 1;
        }
        if ((_BYTE)v132)
        {
          LOWORD(v126) = v132;
          v110 = v131;
          v111 = (char *)*v125;
          *(_OWORD *)v111 = v130;
          *((_OWORD *)v111 + 1) = v110;
          *((_QWORD *)v111 + 4) = v126;
          v111[40] = v105;
          v111[41] = v106;
          v111[42] = v107;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_124;
      }
      v100 = v10 * (v15 / (v11 - v9));
      v17 = a2;
      v16 = *(_BYTE *)(v6 + 32);
      v18 = v10 - v100;
      v10 = v100;
      v19 = a2;
    }
    else
    {
      v16 = 0;
      v17 = *(double *)(v6 + 16);
      v18 = *(double *)v6;
      v19 = *(double *)(v6 + 8);
    }
    v42 = *(_QWORD *)(v6 + 24);
    v43 = *(_BYTE *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1B7C9FA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsRelative<HDStatisticsCumulative>::addSample(uint64_t result, double *a2, int a3)
{
  double v3;
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  double v8;

  v3 = *a2;
  v4 = 2 * (*a2 != -1.79769313e308);
  if (*a2 == 1.79769313e308)
    v4 = 1;
  if (v4)
  {
    if (v4 == 1)
    {
      if (*(_DWORD *)result)
        return result;
      v6 = 1;
    }
    else
    {
      if (v4 != 2)
        return result;
      if (*(_DWORD *)result == 2)
      {
        *(double *)(result + 8) = v3 + *(double *)(result + 8);
        v5 = *(_QWORD *)(result + 16) + 1;
LABEL_16:
        *(_QWORD *)(result + 16) = v5;
        return result;
      }
      v6 = 2;
    }
    *(_DWORD *)result = v6;
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = *(_WORD *)(result + 96);
    v7 = *(_OWORD *)(result + 64);
    *(_OWORD *)(result + 40) = *(_OWORD *)(result + 80);
    *(_OWORD *)(result + 24) = v7;
    v3 = *a2;
    v8 = 0.0;
  }
  else
  {
    if (*(_DWORD *)result || *(_QWORD *)(result + 16))
      return result;
    v8 = *(double *)(result + 8);
  }
  *(double *)(result + 8) = v3 + v8;
  if (a3)
  {
    v5 = 1;
    goto LABEL_16;
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v12;

  v12 = a2;
  v5 = *(_QWORD **)(a1 + 232);
  v3 = (uint64_t **)(a1 + 232);
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = (uint64_t **)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    v6 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 312), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 352);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7C9FCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 392);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7C9FD98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCumulative>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x90uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *((_QWORD *)v9 + 17) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 288);
  v7 = *(char **)(*(_QWORD *)a4 + 296);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 288);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 288);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 296);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 288);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 296);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 288);
      v15 = *(char **)(*(_QWORD *)a4 + 296);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 296);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 296);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 288);
          v25 = *(char **)(*(_QWORD *)a4 + 296);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 296);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 296);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 288);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 288);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 296);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 288);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 296);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 288);
      v41 = *(char **)(*(_QWORD *)a4 + 296);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 296);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 296);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 288);
      v11 = *(char **)(*(_QWORD *)a3 + 296);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 296);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 296);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 288);
      v24 = *(char **)(*(_QWORD *)a3 + 296);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 296);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 296);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 288);
            v31 = *(char **)(*(_QWORD *)a3 + 296);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 296);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 296);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 288);
    v14 = *(char **)(*(_QWORD *)a5 + 296);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 296);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 296);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 288);
        v23 = *(char **)(*(_QWORD *)a5 + 296);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 296);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 296);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 288);
            v32 = *(char **)(*(_QWORD *)a5 + 296);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 296);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 296);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 288);
    v16 = *(char **)(*(_QWORD *)a6 + 296);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 296);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 296);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 288);
        v25 = *(char **)(*(_QWORD *)a6 + 296);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 296);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 296);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 288);
            v34 = *(char **)(*(_QWORD *)a6 + 296);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 296);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 296);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 288);
                v43 = *(char **)(*(_QWORD *)a6 + 296);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 296);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 296);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D05590;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D05590;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCumulative> const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCumulative> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 584))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7CA1DB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 584))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 560);
      v7 = *(_QWORD *)(a1 + 552);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7CA2038(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  double v12;
  int v13;
  unint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  int8x16_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  uint64_t **v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  double v66;
  double v67;
  unint64_t v68;
  char v69;

  v5 = a1 + 8;
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = *(double *)(a1 + 8) - v7;
  v13 = v10;
  v14 = (unint64_t)v9;
  v15 = v11;
  v16 = v8;
  v17 = v7;
  v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      v13 = *(unsigned __int8 *)(a2 + 32);
      v18 = v6 - v6 * (v12 / (v8 - v7));
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 33);
      v16 = *(double *)(a2 + 16);
      v17 = *(double *)(a1 + 8);
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0.0;
      v17 = 0.0;
      v18 = 0.0;
    }
  }
  v19 = *(double *)(a1 + 16);
  v20 = v19 - v17;
  v21 = v16 - v17;
  v22 = v16 - v17 - (v19 - v17);
  if (*(_DWORD *)(a1 + 36))
  {
    if (v20 >= 0.01)
    {
      if (v22 >= 0.01)
      {
LABEL_24:
        v25 = v16;
        v68 = v14;
        v24 = v18 - v18 * (v20 / v21);
        v23 = v13;
        v69 = v15;
        v16 = *(double *)(a1 + 16);
        v18 = v18 * (v20 / v21);
        if (!v13)
          goto LABEL_25;
        goto LABEL_11;
      }
LABEL_10:
      v68 = 0;
      v23 = 0;
      v69 = 0;
      v24 = 0.0;
      v19 = 0.0;
      v25 = 0.0;
      if (!v13)
      {
LABEL_25:
        v15 = v69;
        goto LABEL_63;
      }
LABEL_11:
      v66 = v17;
      v67 = v16;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 256, v14, v14);
      v26 = *(_QWORD *)(a1 + 112);
      if (v26 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 144) <= 0)
      {
        v31.f64[1] = *(float64_t *)(a1 + 16);
        v28 = v66;
        v27 = v67;
        v31.f64[0] = v66;
        v32.f64[0] = *(float64_t *)(a1 + 8);
        v32.f64[1] = v67;
        v33 = (int8x16_t)vcgtq_f64(v32, v31);
        v32.f64[0] = v66;
        *(int8x16_t *)(a1 + 48) = vbslq_s8(v33, *(int8x16_t *)(a1 + 8), (int8x16_t)v32);
      }
      else
      {
        v28 = v66;
        v27 = v67;
        if (v66 < *(double *)(a1 + 48))
        {
          v29 = *(double *)(a1 + 8);
          if (v66 >= v29)
            v29 = v66;
          *(double *)(a1 + 48) = v29;
        }
        if (v67 > *(double *)(a1 + 56))
        {
          v30 = *(double *)(a1 + 16);
          if (v30 >= v67)
            v30 = v67;
          *(double *)(a1 + 56) = v30;
        }
      }
      if (*(_BYTE *)(a1 + 32))
      {
        v34 = *(double *)(a1 + 64);
        if (v28 < v34)
          v34 = v28;
        *(double *)(a1 + 64) = v34;
      }
      if (a3 && v28 < *(double *)(a1 + 16))
      {
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime(v5, v28);
        v28 = v66;
        v27 = v67;
        v26 = *(_QWORD *)(a1 + 112);
      }
      v35 = *(_QWORD *)(a1 + 120);
      if (v26 >= v35)
      {
        v37 = *(_QWORD *)(a1 + 104);
        v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v37) >> 4);
        v39 = v38 + 1;
        if (v38 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v37) >> 4);
        if (2 * v40 > v39)
          v39 = 2 * v40;
        if (v40 >= 0x2AAAAAAAAAAAAAALL)
          v41 = 0x555555555555555;
        else
          v41 = v39;
        if (v41)
        {
          v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v41);
          v28 = v66;
          v27 = v67;
        }
        else
        {
          v42 = 0;
        }
        v43 = v41 + 48 * v38;
        v44 = v41 + 48 * v42;
        *(double *)v43 = v18;
        *(double *)(v43 + 8) = v28;
        *(double *)(v43 + 16) = v27;
        *(_QWORD *)(v43 + 24) = v14;
        *(_BYTE *)(v43 + 32) = v13;
        *(_BYTE *)(v43 + 33) = v15;
        *(_WORD *)(v43 + 40) = 0;
        *(_BYTE *)(v43 + 42) = 0;
        v36 = v43 + 48;
        v46 = *(char **)(a1 + 104);
        v45 = *(char **)(a1 + 112);
        if (v45 == v46)
        {
          v15 = v69;
        }
        else
        {
          v15 = v69;
          do
          {
            v47 = *((_OWORD *)v45 - 3);
            v48 = *((_OWORD *)v45 - 2);
            *(_OWORD *)(v43 - 21) = *(_OWORD *)(v45 - 21);
            *(_OWORD *)(v43 - 48) = v47;
            *(_OWORD *)(v43 - 32) = v48;
            v43 -= 48;
            v45 -= 48;
          }
          while (v45 != v46);
          v45 = *(char **)(a1 + 104);
        }
        *(_QWORD *)(a1 + 104) = v43;
        *(_QWORD *)(a1 + 112) = v36;
        *(_QWORD *)(a1 + 120) = v44;
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(double *)v26 = v18;
        *(double *)(v26 + 8) = v28;
        *(double *)(v26 + 16) = v27;
        *(_QWORD *)(v26 + 24) = v14;
        *(_BYTE *)(v26 + 32) = v13;
        *(_BYTE *)(v26 + 33) = v15;
        *(_WORD *)(v26 + 40) = 0;
        v36 = v26 + 48;
        *(_BYTE *)(v26 + 42) = 0;
        v15 = v69;
      }
      *(_QWORD *)(a1 + 112) = v36;
      if (!*(_BYTE *)(a1 + 224) || *(double *)(a1 + 200) <= v7)
      {
        *(double *)(a1 + 192) = v6;
        *(double *)(a1 + 200) = v7;
        *(double *)(a1 + 208) = v8;
        *(_QWORD *)(a1 + 216) = v9;
        *(_BYTE *)(a1 + 224) = v10;
        *(_BYTE *)(a1 + 225) = v11;
        if (!*(_BYTE *)(a1 + 184) || *(double *)(a1 + 160) <= v7)
        {
          *(double *)(a1 + 152) = v6;
          *(double *)(a1 + 160) = v7;
          *(double *)(a1 + 168) = v8;
          *(_QWORD *)(a1 + 176) = v9;
          *(_BYTE *)(a1 + 184) = v10;
          *(_BYTE *)(a1 + 185) = v11;
        }
      }
      if (*(_BYTE *)(a1 + 33))
      {
        v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_canonicalSourceIDForSourceID(v5, v14);
        v50 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsForSource(v5, v49);
        if (!*((_BYTE *)v50 + 96) || *((double *)v50 + 9) <= v7)
        {
          *((double *)v50 + 8) = v6;
          *((double *)v50 + 9) = v7;
          *((double *)v50 + 10) = v8;
          v50[11] = v9;
          *((_BYTE *)v50 + 96) = v10;
          *((_BYTE *)v50 + 97) = v11;
          if (!*((_BYTE *)v50 + 56) || *((double *)v50 + 4) <= v7)
          {
            *((double *)v50 + 3) = v6;
            *((double *)v50 + 4) = v7;
            *((double *)v50 + 5) = v8;
            v50[6] = v9;
            *((_BYTE *)v50 + 56) = v10;
            *((_BYTE *)v50 + 57) = v11;
          }
        }
      }
LABEL_63:
      v14 = v68;
      if (!v23)
        return;
      goto LABEL_64;
    }
  }
  else
  {
    if (v22 < 0.01)
      goto LABEL_10;
    if (v20 >= 0.01)
      goto LABEL_24;
  }
  LOBYTE(v23) = v13;
  v25 = v16;
  v19 = v17;
  v24 = v18;
  if (!v13)
    return;
LABEL_64:
  v51 = *(_QWORD *)(a1 + 448);
  v52 = *(_QWORD *)(a1 + 456);
  if (v51 >= v52)
  {
    v54 = *(_QWORD *)(a1 + 440);
    v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - v54) >> 3);
    v56 = v55 + 1;
    if (v55 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v54) >> 3);
    if (2 * v57 > v56)
      v56 = 2 * v57;
    if (v57 >= 0x333333333333333)
      v58 = 0x666666666666666;
    else
      v58 = v56;
    if (v58)
      v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v58);
    else
      v59 = 0;
    v60 = v58 + 40 * v55;
    v61 = v58 + 40 * v59;
    *(double *)v60 = v24;
    *(double *)(v60 + 8) = v19;
    *(double *)(v60 + 16) = v25;
    *(_QWORD *)(v60 + 24) = v14;
    *(_BYTE *)(v60 + 32) = v23;
    *(_BYTE *)(v60 + 33) = v15;
    v53 = v60 + 40;
    v63 = *(char **)(a1 + 440);
    v62 = *(char **)(a1 + 448);
    if (v62 != v63)
    {
      do
      {
        v64 = *(_OWORD *)(v62 - 40);
        v65 = *(_OWORD *)(v62 - 24);
        *(_WORD *)(v60 - 8) = *((_WORD *)v62 - 4);
        *(_OWORD *)(v60 - 24) = v65;
        *(_OWORD *)(v60 - 40) = v64;
        v60 -= 40;
        v62 -= 40;
      }
      while (v62 != v63);
      v62 = *(char **)(a1 + 440);
    }
    *(_QWORD *)(a1 + 440) = v60;
    *(_QWORD *)(a1 + 448) = v53;
    *(_QWORD *)(a1 + 456) = v61;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *(double *)v51 = v24;
    *(double *)(v51 + 8) = v19;
    *(double *)(v51 + 16) = v25;
    *(_QWORD *)(v51 + 24) = v14;
    *(_BYTE *)(v51 + 32) = v23;
    v53 = v51 + 40;
    *(_BYTE *)(v51 + 33) = v15;
  }
  *(_QWORD *)(a1 + 448) = v53;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 586))
  {
    *(_BYTE *)(a1 + 588) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 588) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7CA2678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 440), *(_QWORD *)(a1 + 448), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 448) - *(_QWORD *)(a1 + 440)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7CA2760(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *i;
  _QWORD *v15;

  v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 464), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 64);
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_QWORD *)(v8 + 184) = 0;
  if (*(_QWORD *)(v8 + 208))
  {
    v9 = *(_QWORD *)(a1 + 240);
    v10 = *(_QWORD **)(a1 + 232);
    *(_QWORD *)(a1 + 232) = a1 + 240;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    if (v10[1])
      v11 = (_QWORD *)v10[1];
    else
      v11 = v10;
    if (v11)
    {
      v12 = (_QWORD *)v11[2];
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if ((_QWORD *)*v12 == v11)
        {
          *v12 = 0;
          while (1)
          {
            v15 = (_QWORD *)v12[1];
            if (!v15)
              break;
            do
            {
              v12 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; v13 = (_QWORD *)v12[1])
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (i = (_QWORD *)v12[2]; i; i = (_QWORD *)i[2])
          v12 = i;
        v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 464));
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a1 + 440);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 588))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 588) = 0;
  }

}

void sub_1B7CA2908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 584))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7CA29C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 600));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 584) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7CA2D28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40081539FBLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7CA2ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCumulative>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7CA3140(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  double v11;
  double v12;
  _QWORD v13[2];
  double v14;
  uint64_t v15;
  char v16;
  char v17;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  *(double *)v13 = a5;
  *(double *)&v13[1] = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  else
  {
    v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      v8 = 0;
    }
    *(double *)v13 = a5;
    v14 = a7;
    v16 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 584))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7CA3E0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7CA3EAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsCumulativeEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCumulative>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsCumulative>::archive(uint64_t a1, int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsCumulative::archive((int8x16_t *)(a2 + 2), (uint64_t)v6);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(*((int8x16_t *)a2 + 4), *((int8x16_t *)a2 + 4), 8uLL);
  v6[1] = *((_QWORD *)a2 + 10);
  v6[2] = *((_QWORD *)a2 + 11);
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7CA3FB4(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCumulative>::unarchive(uint64_t a1, _QWORD *a2)
{
  int8x16_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  *(_WORD *)(a1 + 56) = 0;
  v2 = 0uLL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_WORD *)(a1 + 96) = 0;
  v3 = (_QWORD *)a2[16];
  if (v3)
  {
    v4 = v3[19];
    v5 = v3[3];
    v6 = v3[14];
    if (v6)
    {
      v2 = *(int8x16_t *)(v6 + 24);
      v7 = *(_QWORD *)(v6 + 8);
      v8 = 1;
      v6 = *(_QWORD *)(v6 + 16);
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    v2 = vextq_s8(v2, v2, 8uLL);
    *(int8x16_t *)(a1 + 24) = v2;
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v6;
    *(_BYTE *)(a1 + 56) = v8;
    *(_BYTE *)(a1 + 57) = 0;
  }
  *(_DWORD *)a1 = a2[17];
  v9 = a2[14];
  if (v9)
  {
    v2.i64[0] = *(_QWORD *)(v9 + 8);
    v10 = *(_QWORD *)(v9 + 16);
    *(int8x16_t *)(a1 + 64) = vextq_s8(*(int8x16_t *)(v9 + 24), *(int8x16_t *)(v9 + 24), 8uLL);
    *(_QWORD *)(a1 + 80) = v2.i64[0];
    *(_QWORD *)(a1 + 88) = v10;
    *(_WORD *)(a1 + 96) = 1;
  }
  return *(double *)v2.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D05640;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_WORD *)(a1 + 536) = 1;
  *(_BYTE *)(a1 + 538) = 0;
  *(_BYTE *)(a1 + 540) = 0;
  *(_QWORD *)(a1 + 544) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 584) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D05640;
  v2 = *(void **)(a1 + 568);
  if (v2)
  {
    *(_QWORD *)(a1 + 576) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 504);
  if (v3)
  {
    *(_QWORD *)(a1 + 512) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 536) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_configureForStartTime(a1);

}

void sub_1B7CA41D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 544) = v4;
    v3 = v5;
  }

}

void sub_1B7CA4230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 69, a2);
  v7 = a2;
  v4 = a1[69];
  v5 = a1[66];
  a1[66] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[66]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7CA43C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[48];

  if (*(_BYTE *)(a1 + 536))
    return 0;
  HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7CA446C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 538))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 537))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 539))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 576);
    v18 = *(_QWORD *)(a1 + 584);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 568);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 576);
      v33 = *(char **)(a1 + 568);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 568);
      }
      *(_QWORD *)(a1 + 568) = v28;
      *(_QWORD *)(a1 + 576) = v21;
      *(_QWORD *)(a1 + 584) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 576) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7CA46C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 538))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 538) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 537))
    goto LABEL_5;
  v9 = *(void **)(a1 + 560);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_384);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 560);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;

  *(_BYTE *)(a1 + 537) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 568);
    *(_QWORD *)(a1 + 584) = 0;
    *(_QWORD *)(a1 + 576) = 0;
    *(_QWORD *)(a1 + 568) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 568);
      v37 = *(__int128 **)(a1 + 576);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 576);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 576) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 568);
  v39 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 512) != *(_QWORD *)(a1 + 504))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsCumulative>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 512) != *(_QWORD *)(a1 + 504));
  }
  *(_BYTE *)(a1 + 538) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 540))
    {
      *(_BYTE *)(a1 + 540) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 538) = 0;
LABEL_83:

  return v7;
}

void sub_1B7CA4DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 538) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 539) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 538))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 538))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 560);
    *(_QWORD *)(a1 + 560) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 537) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 537))
  {
    v8 = *(void **)(a1 + 560);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 560);
      *(_QWORD *)(a1 + 560) = v9;

      v8 = *(void **)(a1 + 560);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7CA50AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 536) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 536) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7CA51CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::reset(uint64_t result)
{
  *(_BYTE *)(result + 536) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 536), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsCumulative::archive((int8x16_t *)(a1 + 240), (uint64_t)&v37);
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 296);
  if (v9 != (_QWORD *)(a1 + 304))
  {
    do
    {
      HDStatisticsCumulative::archive((int8x16_t *)(v9 + 5), (uint64_t)&v37);
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 304));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 504);
  for (k = *(int8x16_t **)(a1 + 512); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7CA5560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t i;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  id v67;
  _QWORD *v68;
  uint64_t v69;
  id v70;
  int8x16_t v71;
  uint64_t v72;
  _BYTE v73[384];
  __int128 v74;
  __int128 v75;
  int8x16_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  int8x16_t v80;
  uint64_t v81;
  uint64_t v82[4];
  __int128 __p;
  __int128 v84;
  _QWORD v85[6];
  uint64_t **v86;
  uint64_t *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  int v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  __int128 v98;
  int v99;
  __int128 v100;
  __int128 v101;
  int v102;
  void (**v103)(statistics::StatisticsEngine *__hidden);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  _BYTE v110[32];
  uint64_t v111[3];

  v67 = a2;
  *(_BYTE *)(a1 + 536) = objc_msgSend(v67, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v67;
  HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket((uint64_t)v73, 0, -1.79769313e308, 1.79769313e308);
  v74 = 0u;
  v75 = 0u;
  v111[0] = 0;
  v70 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v110, (const unsigned __int8 *)objc_msgSend(v70, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), v111));
  v69 = a1;
  v103 = &off_1E6D09A88;
  v104 = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  v109 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v103, (PB::Reader *)v110);
  v72 = v105;
  if (v104)
  {
    v79 = 0;
    memset(v82, 0, sizeof(v82));
    v88 = 0;
    v87 = 0;
    __p = 0u;
    v84 = 0u;
    memset(v85, 0, 42);
    v86 = &v87;
    v89 = 0u;
    v90 = 0u;
    v91 = 1065353216;
    v95 = 0;
    v93 = 0u;
    v94 = 0u;
    v92 = 0u;
    v96 = 1065353216;
    v97 = 0u;
    v98 = 0u;
    v99 = 1065353216;
    v100 = 0u;
    v101 = 0u;
    v102 = 1065353216;
    v76 = vextq_s8(*(int8x16_t *)(v104 + 8), *(int8x16_t *)(v104 + 8), 8uLL);
    v4 = *(_QWORD *)(v104 + 72);
    v77 = *(_QWORD *)(v104 + 64);
    v78 = *(_WORD *)(v104 + 185);
    v80 = vextq_s8(*(int8x16_t *)(v104 + 24), *(int8x16_t *)(v104 + 24), 8uLL);
    v81 = v4;
    v6 = *(_QWORD *)(v104 + 80);
    v5 = *(_QWORD *)(v104 + 88);
    v68 = (_QWORD *)v104;
    if (v6 != v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if (v7 >= (unint64_t)v84)
        {
          v14 = (void *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - __p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v84 - __p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v84 - __p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = *((_QWORD *)&__p + 1);
            v14 = (void *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = v19;
          if ((void *)v7 != v14)
          {
            do
            {
              v21 = *(_OWORD *)(v7 - 48);
              v22 = *(_OWORD *)(v7 - 32);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while ((void *)v7 != v14);
            v14 = (void *)__p;
          }
          v7 = v19 + 48;
          *(_QWORD *)&__p = v20;
          *((_QWORD *)&__p + 1) = v19 + 48;
          *(_QWORD *)&v84 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *(_QWORD *)(v7 + 8) = v8;
          *(_QWORD *)(v7 + 16) = v10;
          *(_QWORD *)(v7 + 24) = v11;
          *(_WORD *)(v7 + 32) = 1;
          *(_BYTE *)(v7 + 40) = 0;
          *(_BYTE *)(v7 + 41) = v12;
          *(_BYTE *)(v7 + 42) = v13;
          v7 += 48;
        }
        *((_QWORD *)&__p + 1) = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    v23 = (_QWORD *)v68[13];
    if (v23)
    {
      v24 = v23[19];
      v25 = v23[3];
      v26 = v23[14];
      if (v26)
      {
        v27 = *(int8x16_t *)(v26 + 24);
        v28 = *(_QWORD *)(v26 + 8);
        v29 = 1;
        v26 = *(_QWORD *)(v26 + 16);
      }
      else
      {
        v29 = 0;
        v27 = 0uLL;
        v28 = 0;
      }
      *((_QWORD *)&v84 + 1) = v24;
      v85[0] = v25;
      *(int8x16_t *)&v85[1] = vextq_s8(v27, v27, 8uLL);
      v85[3] = v28;
      v85[4] = v26;
      LOWORD(v85[5]) = v29;
    }
    v30 = v68[17];
    v31 = v68[18];
    while (v30 != v31)
    {
      v32 = *(_QWORD **)v30;
      v33 = *(_QWORD *)(*(_QWORD *)v30 + 112);
      if (v33)
      {
        v71 = *(int8x16_t *)(v33 + 24);
        v34 = *(_QWORD *)(v33 + 8);
        v35 = 1;
        v36 = *(_QWORD *)(v33 + 16);
      }
      else
      {
        v36 = 0;
        v35 = 0;
        v34 = 0;
        v71 = 0u;
      }
      v37 = v32[19];
      v38 = v32[3];
      v39 = v32[18];
      v40 = &v87;
      v41 = &v87;
      v42 = v87;
      if (v87)
      {
        do
        {
          while (1)
          {
            v41 = (uint64_t **)v42;
            v43 = v42[4];
            if (v43 <= v39)
              break;
            v42 = *v41;
            v40 = v41;
            if (!*v41)
              goto LABEL_39;
          }
          if (v43 >= v39)
          {
            v45 = (char *)v41;
            goto LABEL_42;
          }
          v42 = v41[1];
        }
        while (v42);
        v40 = v41 + 1;
      }
LABEL_39:
      v45 = (char *)operator new(0x60uLL);
      *((_QWORD *)v45 + 4) = v39;
      *(_OWORD *)(v45 + 40) = 0u;
      *(_OWORD *)(v45 + 56) = 0u;
      *(_OWORD *)(v45 + 72) = 0u;
      *((_QWORD *)v45 + 11) = 0;
      *(_QWORD *)v45 = 0;
      *((_QWORD *)v45 + 1) = 0;
      *((_QWORD *)v45 + 2) = v41;
      *v40 = (uint64_t *)v45;
      v44 = (uint64_t *)v45;
      if (*v86)
      {
        v86 = (uint64_t **)*v86;
        v44 = *v40;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v87, v44);
      ++v88;
LABEL_42:
      *((_QWORD *)v45 + 5) = v37;
      *((_QWORD *)v45 + 6) = v38;
      *(int8x16_t *)(v45 + 56) = vextq_s8(v71, v71, 8uLL);
      *((_QWORD *)v45 + 9) = v34;
      *((_QWORD *)v45 + 10) = v36;
      v45[88] = v35;
      v30 += 8;
      v45[89] = 0;
    }
    v46 = v68[5];
    for (i = v68[6]; v46 != i; v46 += 8)
    {
      v49 = *(double *)(*(_QWORD *)v46 + 8);
      v48 = *(double *)(*(_QWORD *)v46 + 16);
      if (v49 >= v48)
        v50 = *(double *)(*(_QWORD *)v46 + 16);
      else
        v50 = *(double *)(*(_QWORD *)v46 + 8);
      if (v48 < v49)
        v48 = *(double *)(*(_QWORD *)v46 + 8);
      HKIntervalMask<double>::_insertInterval(v82, v50, v48);
    }
    HDStatisticsBucket<HDStatisticsCumulative>::operator=((uint64_t)v73, (uint64_t)&v76);
    HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)&v76);
  }
  v51 = v106;
  v52 = v107;
  if (v106 != v107)
  {
    v53 = *((_QWORD *)&v74 + 1);
    do
    {
      v54 = *(_QWORD *)(*(_QWORD *)v51 + 24);
      v55 = *(_QWORD *)(*(_QWORD *)v51 + 32);
      v56 = *(_QWORD *)(*(_QWORD *)v51 + 8);
      v57 = *(_QWORD *)(*(_QWORD *)v51 + 16);
      if (v53 >= (unint64_t)v75)
      {
        v58 = (void *)v74;
        v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v74) >> 3);
        v60 = v59 + 1;
        if (v59 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v75 - v74) >> 3) > v60)
          v60 = 0x999999999999999ALL * ((uint64_t)(v75 - v74) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v75 - v74) >> 3) >= 0x333333333333333)
          v61 = 0x666666666666666;
        else
          v61 = v60;
        if (v61)
        {
          v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v61);
          v53 = *((_QWORD *)&v74 + 1);
          v58 = (void *)v74;
        }
        else
        {
          v62 = 0;
        }
        v63 = v61 + 40 * v59;
        *(_QWORD *)v63 = v55;
        *(_QWORD *)(v63 + 8) = v54;
        *(_QWORD *)(v63 + 16) = v56;
        *(_QWORD *)(v63 + 24) = v57;
        *(_WORD *)(v63 + 32) = 1;
        v64 = v63;
        if ((void *)v53 != v58)
        {
          do
          {
            v65 = *(_OWORD *)(v53 - 40);
            v66 = *(_OWORD *)(v53 - 24);
            *(_WORD *)(v64 - 8) = *(_WORD *)(v53 - 8);
            *(_OWORD *)(v64 - 24) = v66;
            *(_OWORD *)(v64 - 40) = v65;
            v64 -= 40;
            v53 -= 40;
          }
          while ((void *)v53 != v58);
          v58 = (void *)v74;
        }
        v53 = v63 + 40;
        *(_QWORD *)&v74 = v64;
        *((_QWORD *)&v74 + 1) = v63 + 40;
        *(_QWORD *)&v75 = v61 + 40 * v62;
        if (v58)
          operator delete(v58);
      }
      else
      {
        *(_QWORD *)v53 = v55;
        *(_QWORD *)(v53 + 8) = v54;
        *(_QWORD *)(v53 + 16) = v56;
        *(_QWORD *)(v53 + 24) = v57;
        *(_WORD *)(v53 + 32) = 1;
        v53 += 40;
      }
      *((_QWORD *)&v74 + 1) = v53;
      v51 += 8;
    }
    while (v51 != v52);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v103);

  HDStatisticsCollectionEngine<HDStatisticsCumulative>::operator=((_QWORD *)(v69 + 112), (uint64_t)&v72);
  if ((_QWORD)v74)
  {
    *((_QWORD *)&v74 + 1) = v74;
    operator delete((void *)v74);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v73);

}

void sub_1B7CA5C58(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)(v10 - 224));
  HDStatisticsCollectionEngine<HDStatisticsCumulative>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCumulative>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 392);
  if (v2)
  {
    *(_QWORD *)(a1 + 400) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 344);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 304);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 264);
  v2 = *(void **)(a1 + 240);
  if (v2)
  {
    *(_QWORD *)(a1 + 248) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 200);
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 184));
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[384];
  uint64_t v18;
  _BYTE v19[384];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[320];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 552));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCumulative>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 536) = 0;
  return HDStatisticsBucket<HDStatisticsCumulative>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7CA6134(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsCumulative>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsCumulative>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 49), (__n128 *)(a2 + 392));
  v4 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 416) = 0;
  v5 = (void *)a1[52];
  a1[52] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCumulative>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 120);
  v13 = *(_OWORD *)(a2 + 136);
  v14 = *(_OWORD *)(a2 + 152);
  v15 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = 0;
  v16 = (_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 192) = 0;
  v17 = *(_QWORD **)(a2 + 176);
  if (v17 != (_QWORD *)(a2 + 184))
  {
    v18 = 0;
    v19 = (_QWORD *)(a1 + 184);
    while (1)
    {
      v20 = v17[4];
      v21 = (_QWORD *)(a1 + 184);
      if (v19 == v16)
        goto LABEL_12;
      v22 = v18;
      v23 = (_QWORD *)(a1 + 184);
      if (v18)
      {
        do
        {
          v21 = v22;
          v22 = (_QWORD *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v23[2];
          v24 = *v21 == (_QWORD)v23;
          v23 = v21;
        }
        while (v24);
      }
      if (v21[4] < v20)
      {
LABEL_12:
        if (v18)
          v25 = (uint64_t **)v21;
        else
          v25 = (uint64_t **)(a1 + 184);
        if (v18)
          v26 = (uint64_t **)(v21 + 1);
        else
          v26 = (uint64_t **)(a1 + 184);
        if (!*v26)
        {
LABEL_28:
          v29 = (uint64_t *)operator new(0x60uLL);
          v30 = *((_OWORD *)v17 + 2);
          v31 = *((_OWORD *)v17 + 3);
          v32 = *((_OWORD *)v17 + 5);
          *((_OWORD *)v29 + 4) = *((_OWORD *)v17 + 4);
          *((_OWORD *)v29 + 5) = v32;
          *((_OWORD *)v29 + 2) = v30;
          *((_OWORD *)v29 + 3) = v31;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 176), (uint64_t)v25, v26, v29);
        }
      }
      else
      {
        v26 = (uint64_t **)(a1 + 184);
        v25 = (uint64_t **)(a1 + 184);
        if (!v18)
          goto LABEL_28;
        v27 = v18;
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v27;
            v28 = v27[4];
            if (v28 <= v20)
              break;
            v27 = *v25;
            v26 = v25;
            if (!*v25)
              goto LABEL_28;
          }
          if (v28 >= v20)
            break;
          v27 = v25[1];
          if (!v27)
          {
            v26 = v25 + 1;
            goto LABEL_28;
          }
        }
      }
      v33 = (_QWORD *)v17[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v17[2];
          v24 = *v34 == (_QWORD)v17;
          v17 = v34;
        }
        while (!v24);
      }
      if (v34 == (_QWORD *)(a2 + 184))
        break;
      v18 = (_QWORD *)*v16;
      v19 = *(_QWORD **)(a1 + 176);
      v17 = v34;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 200, a2 + 200);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 240), *(const void **)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 264, a2 + 264);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 304, a2 + 304);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 344, a2 + 344);
  return a1;
}

void sub_1B7CA64C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  v19 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 248) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCumulative>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 136);
  v11 = *(_OWORD *)(a2 + 152);
  v12 = *(_OWORD *)(a2 + 120);
  v14 = a1 + 184;
  v13 = *(_QWORD **)(a1 + 184);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 120) = v12;
  std::__tree<long>::destroy(v13);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v15 = (_QWORD *)(a2 + 184);
  v16 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v16;
  v17 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v17;
  if (v17)
  {
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(a2 + 176) = v15;
    *v15 = 0;
    *(_QWORD *)(a2 + 192) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 176) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 200, (uint64_t *)(a2 + 200));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 240, (__n128 *)(a2 + 240));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 264, (uint64_t *)(a2 + 264));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  unint64_t v2;
  double v5;
  id v6;
  double *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id WeakRetained;
  id v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  void **v39;
  char *v40;
  unint64_t v41;
  id v42;
  id v43;
  void *v44;
  char v45;
  float v46;
  _BOOL8 v47;
  unint64_t v48;
  unint64_t v49;
  int8x8_t prime;
  void *v51;
  void *v52;
  uint64_t v53;
  _QWORD **v54;
  unint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  uint8x8_t v58;
  uint64_t v59;
  _QWORD *i;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD *v68;
  _QWORD *v69;
  BOOL v70;
  void *v71;
  uint64_t **j;
  uint64_t *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  double v77;
  double v78;
  void *v79;
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  id v84;
  id v85;
  unint64_t v86;
  id v87;
  id v88;
  char v89;
  id v90;
  id v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void *__p[2];
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  _QWORD v99[3];
  _QWORD *v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = objc_alloc(MEMORY[0x1E0C99D68]);
  v7 = a2 + 5;
  if (v5 != -1.79769313e308)
    v7 = a2;
  v90 = (id)objc_msgSend(v6, "initWithTimeIntervalSinceReferenceDate:", *v7);
  v94 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308)
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v9 = (void *)v8;
  v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = *(id *)(a1 + 16);
    if (objc_msgSend(v11, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v11, "underlyingSampleType");
      v12 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v12;
    }

  }
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v10, v90, v9);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v92 = v9;
      v15 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v17 = *(uint64_t **)(v94 + 240);
      v16 = *(uint64_t **)(v94 + 248);
      while (v17 != v16)
      {
        v18 = *v17;
        v2 = (unint64_t)objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend((id)v2, "sourceForSourceID:", v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v15, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v15, "addObject:", v19);
        }

        ++v17;
      }
      v20 = (void *)objc_msgSend(v15, "copy");
      objc_msgSend(v13, "_setSources:", v20);

      v9 = v92;
    }
  }

  v99[0] = &off_1E6D05710;
  v100 = v99;
  v91 = v13;
  objc_msgSend(*(id *)(a1 + 16), "canonicalUnit");
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = *(_OWORD *)(v94 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v94 + 120);
  v96 = v21;
  v97 = *(_OWORD *)(v94 + 152);
  v98 = *(_QWORD *)(v94 + 168);
  if (!v100)
    std::__throw_bad_function_call[abi:ne180100]();
  v22 = (*(uint64_t (**)(_QWORD *, void **))(*v100 + 48))(v100, __p);
  v23 = *(_QWORD *)(v22 + 8);
  v25 = *(double *)(v22 + 16);
  v24 = *(double *)(v22 + 24);
  v26 = *(double *)(v22 + 32);
  objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v93, *(double *)v22);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v91, "setSumQuantity:", v27);

  objc_msgSend(v91, "setDataCount:", v23);
  v28 = *(_QWORD *)(a1 + 24);
  v89 = v28;
  if ((v28 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v93, v25);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v91, "setMostRecentQuantity:", v29);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v24, v26);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v91, "setMostRecentQuantityDateInterval:", v30);

    v28 = *(_QWORD *)(a1 + 24);
  }
  if ((v28 & 1) == 0)
    goto LABEL_130;
  v88 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v87 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if ((v89 & 0x20) != 0)
  {
    v84 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v85 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v84 = 0;
    v85 = 0;
  }
  *(_OWORD *)__p = 0u;
  v96 = 0u;
  LODWORD(v97) = 1065353216;
  v31 = *(_QWORD **)(v94 + 176);
  if (v31 == (_QWORD *)(v94 + 184))
    goto LABEL_127;
  do
  {
    HDStatisticsBucket<HDStatisticsCumulative>::_bundleIdentifierForSourceID(v94, v31[4]);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = v32;
    if (!v32)
      goto LABEL_103;
    v34 = objc_msgSend(v32, "hash");
    v35 = v34;
    v36 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_46;
    v37 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v37.i16[0] = vaddlv_u8(v37);
    v38 = v37.u32[0];
    if (v37.u32[0] > 1uLL)
    {
      v2 = v34;
      if ((void *)v34 >= __p[1])
        v2 = v34 % (unint64_t)__p[1];
    }
    else
    {
      v2 = ((unint64_t)__p[1] - 1) & v34;
    }
    v39 = (void **)*((_QWORD *)__p[0] + v2);
    if (!v39 || (v40 = (char *)*v39) == 0)
    {
LABEL_46:
      v40 = (char *)operator new(0x50uLL);
      *(_QWORD *)v40 = 0;
      *((_QWORD *)v40 + 1) = v35;
      *((_QWORD *)v40 + 2) = v33;
      *(_OWORD *)(v40 + 24) = 0u;
      *(_OWORD *)(v40 + 40) = 0u;
      *(_OWORD *)(v40 + 56) = 0u;
      *((_QWORD *)v40 + 9) = 0;
      v46 = (float)(unint64_t)(*((_QWORD *)&v96 + 1) + 1);
      if (v36 && (float)(*(float *)&v97 * (float)v36) >= v46)
      {
LABEL_92:
        v62 = __p[0];
        v63 = (_QWORD *)*((_QWORD *)__p[0] + v2);
        if (v63)
        {
          *(_QWORD *)v40 = *v63;
        }
        else
        {
          *(_QWORD *)v40 = v96;
          *(_QWORD *)&v96 = v40;
          v62[v2] = &v96;
          if (!*(_QWORD *)v40)
          {
LABEL_101:
            ++*((_QWORD *)&v96 + 1);
            goto LABEL_102;
          }
          v64 = *(_QWORD *)(*(_QWORD *)v40 + 8);
          if ((v36 & (v36 - 1)) != 0)
          {
            if (v64 >= v36)
              v64 %= v36;
          }
          else
          {
            v64 &= v36 - 1;
          }
          v63 = (char *)__p[0] + 8 * v64;
        }
        *v63 = v40;
        goto LABEL_101;
      }
      v47 = (v36 & (v36 - 1)) != 0;
      if (v36 < 3)
        v47 = 1;
      v48 = v47 | (2 * v36);
      v49 = vcvtps_u32_f32(v46 / *(float *)&v97);
      if (v48 <= v49)
        prime = (int8x8_t)v49;
      else
        prime = (int8x8_t)v48;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v36 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_58;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v57 = vcvtps_u32_f32((float)*((unint64_t *)&v96 + 1) / *(float *)&v97);
        if (__p[1] < (void *)3
          || (v58 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
        {
          v57 = std::__next_prime(v57);
        }
        else
        {
          v59 = 1 << -(char)__clz(v57 - 1);
          if (v57 >= 2)
            v57 = v59;
        }
        if (*(_QWORD *)&prime <= v57)
          prime = (int8x8_t)v57;
        if (*(_QWORD *)&prime >= v36)
        {
          v36 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_58:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v51 = operator new(8 * *(_QWORD *)&prime);
            v52 = __p[0];
            __p[0] = v51;
            if (v52)
              operator delete(v52);
            v53 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v53++) = 0;
            while (*(_QWORD *)&prime != v53);
            v54 = (_QWORD **)v96;
            if ((_QWORD)v96)
            {
              v55 = *(_QWORD *)(v96 + 8);
              v56 = (uint8x8_t)vcnt_s8(prime);
              v56.i16[0] = vaddlv_u8(v56);
              if (v56.u32[0] > 1uLL)
              {
                if (v55 >= *(_QWORD *)&prime)
                  v55 %= *(_QWORD *)&prime;
              }
              else
              {
                v55 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v55) = &v96;
              for (i = *v54; i; v55 = v61)
              {
                v61 = i[1];
                if (v56.u32[0] > 1uLL)
                {
                  if (v61 >= *(_QWORD *)&prime)
                    v61 %= *(_QWORD *)&prime;
                }
                else
                {
                  v61 &= *(_QWORD *)&prime - 1;
                }
                if (v61 != v55)
                {
                  if (!*((_QWORD *)__p[0] + v61))
                  {
                    *((_QWORD *)__p[0] + v61) = v54;
                    goto LABEL_83;
                  }
                  *v54 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v61);
                  **((_QWORD **)__p[0] + v61) = i;
                  i = v54;
                }
                v61 = v55;
LABEL_83:
                v54 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v36 = (unint64_t)prime;
            goto LABEL_87;
          }
          v71 = __p[0];
          __p[0] = 0;
          if (v71)
            operator delete(v71);
          v36 = 0;
          __p[1] = 0;
        }
      }
LABEL_87:
      if ((v36 & (v36 - 1)) != 0)
      {
        if (v35 >= v36)
          v2 = v35 % v36;
        else
          v2 = v35;
      }
      else
      {
        v2 = (v36 - 1) & v35;
      }
      goto LABEL_92;
    }
    v86 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v41 = *((_QWORD *)v40 + 1);
      if (v41 == v35)
        break;
      if (v38 > 1)
      {
        if (v41 >= v36)
          v41 %= v36;
      }
      else
      {
        v41 &= v86;
      }
      if (v41 != v2)
        goto LABEL_46;
LABEL_45:
      v40 = *(char **)v40;
      if (!v40)
        goto LABEL_46;
    }
    v42 = *((id *)v40 + 2);
    v43 = v33;
    v44 = v43;
    if (v42 != v43)
    {
      v45 = objc_msgSend(v42, "isEqualToString:", v43);

      if ((v45 & 1) != 0)
        goto LABEL_102;
      goto LABEL_45;
    }

LABEL_102:
    v65 = *(_OWORD *)(v31 + 5);
    v66 = *(_OWORD *)(v31 + 7);
    v67 = *(_OWORD *)(v31 + 9);
    *((_QWORD *)v40 + 9) = v31[11];
    *(_OWORD *)(v40 + 56) = v67;
    *(_OWORD *)(v40 + 40) = v66;
    *(_OWORD *)(v40 + 24) = v65;

LABEL_103:
    v68 = (_QWORD *)v31[1];
    if (v68)
    {
      do
      {
        v69 = v68;
        v68 = (_QWORD *)*v68;
      }
      while (v68);
    }
    else
    {
      do
      {
        v69 = (_QWORD *)v31[2];
        v70 = *v69 == (_QWORD)v31;
        v31 = v69;
      }
      while (!v70);
    }
    v31 = v69;
  }
  while (v69 != (_QWORD *)(v94 + 184));
  for (j = (uint64_t **)v96; j; j = (uint64_t **)*j)
  {
    v73 = j[2];
    if (!v100
      || (objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v93, *(double *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v100 + 48))(v100, (uint64_t *)j + 3)), v74 = (void *)objc_claimAutoreleasedReturnValue(), objc_msgSend(v88, "setObject:forKeyedSubscript:", v74, v73), v74, !v100))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v100 + 48))(v100, (uint64_t *)j + 3) + 8));
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v87, "setObject:forKeyedSubscript:", v75, v73);

    if ((v89 & 0x20) != 0)
    {
      if (!v100)
        std::__throw_bad_function_call[abi:ne180100]();
      v76 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v100 + 48))(v100, (uint64_t *)j + 3);
      v77 = *(double *)(v76 + 24);
      v78 = *(double *)(v76 + 32);
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v93, *(double *)(v76 + 16));
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v84, "setObject:forKeyedSubscript:", v79, v73);

      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v77, v78);
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v80, v73);

    }
  }
LABEL_127:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  objc_msgSend(v91, "setSumQuantityBySource:", v88);
  objc_msgSend(v91, "setDataCountBySource:", v87);
  if ((v89 & 0x20) != 0)
  {
    objc_msgSend(v91, "setMostRecentQuantityBySource:", v84);
    objc_msgSend(v91, "setMostRecentQuantityDateIntervalBySource:", v85);
  }

LABEL_130:
  v81 = v100;
  if (v100 == v99)
  {
    v82 = 4;
    v81 = v99;
LABEL_134:
    (*(void (**)(void))(*v81 + 8 * v82))();
  }
  else if (v100)
  {
    v82 = 5;
    goto LABEL_134;
  }
  return v91;
}

void sub_1B7CA7108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32)
{
  char *v33;
  uint64_t v34;

  v33 = a32;
  if (a32 == &a29)
  {
    v34 = 4;
    v33 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_2;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_2:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  unint64_t v3;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v2 = (void **)(a1 + 240);
  v1 = *(_QWORD *)(a1 + 240);
  v3 = *(_QWORD *)(a1 + 224);
  if (v3 != (*(_QWORD *)(a1 + 248) - v1) >> 3)
  {
    *(_QWORD *)(a1 + 248) = v1;
    std::vector<long long>::reserve((void **)(a1 + 240), v3);
    v5 = *(_QWORD **)(a1 + 216);
    if (v5)
    {
      v6 = *(char **)(a1 + 248);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 256);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v2;
          v11 = (v6 - (_BYTE *)*v2) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 240);
            v6 = *(char **)(a1 + 248);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 240) = v16;
          *(_QWORD *)(a1 + 248) = v9;
          *(_QWORD *)(a1 + 256) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 248) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v2);

    }
  }
}

void sub_1B7CA744C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  char v13;
  char v14;
  double v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  id WeakRetained;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  __int128 *v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  int v51;
  char v52;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  unint64_t v58;
  __int128 *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  __int128 *v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  char *v76;
  __int128 *v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  void *v81;
  unint64_t v82;
  uint64_t **v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  double v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  double v108;
  unint64_t v109;
  uint64_t **v110;
  __int128 v111;
  char *v112;
  double v113;
  void *v114;
  void *v115;
  _QWORD *v116;
  id *location;
  __int128 *v118;
  id v119;
  uint64_t v120;
  double **v121;
  char v122;
  char v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int16 v132;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v125 = (_QWORD *)(a1 + 96);
    v121 = (double **)(a1 + 64);
    location = (id *)(a1 + 88);
    v116 = (_QWORD *)(a1 + 184);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_133:
      *(double *)(a1 + 56) = a2;
LABEL_134:
      v113 = *(double *)(a1 + 56);
      if (v113 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime(double) [Statistics = HDStatisticsCumulative]");
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v114, "handleFailureInFunction:file:lineNumber:description:", v115, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v113 = *(double *)(a1 + 56);
      }
      v5 = v113;
      if (v113 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v20 = a2;
      v21 = a2;
      v22 = v5;
      v23 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v24 = *(double *)(v23 + 8);
          v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21)
            v21 = *(double *)(v23 + 8);
          if (v25 > v5)
            v27 = *(double *)(v23 + 16);
          else
            v27 = v20;
          if (v25 < v20)
          {
            v22 = v5;
            v20 = v27;
          }
          v23 += 48;
        }
        while ((__int128 *)v23 != v7);
      }
      if (v20 >= v21)
        v28 = v21;
      else
        v28 = v20;
      v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        v30 = v29 * floor(v28 / v29);
        v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31)
          v28 = v30;
        else
          v28 = v31;
      }
      *v125 = 0;
      v125[1] = 0;
      v125[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        v35 = *(char **)(a1 + 96);
        v34 = *(char **)(a1 + 104);
        v36 = v32;
        if (v34 != v35)
        {
          do
          {
            v37 = *((_OWORD *)v34 - 3);
            v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          v34 = (char *)*v125;
        }
        *(_QWORD *)(a1 + 96) = v36;
        *(_QWORD *)(a1 + 104) = v32;
        *(_QWORD *)(a1 + 112) = &v32[48 * v33];
        if (v34)
          operator delete(v34);
      }
      HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder(a1);
      v118 = (__int128 *)v6;
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v127 = a1;
        v40 = 126 - 2 * __clz(v8);
        if (v118 == v7)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*,false>((uint64_t)v118, v7, (uint64_t)&v127, v41, 1);
      }
      if (*(_BYTE *)(a1 + 25))
        v119 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v119 = 0;
      if (v118 == v7)
      {
LABEL_112:
        v96 = *(_QWORD **)(a1 + 176);
        if (v96 != v116)
        {
          do
          {
            v97 = (_QWORD *)v96[1];
            if (v97)
            {
              do
              {
                v98 = v97;
                v97 = (_QWORD *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                v98 = (_QWORD *)v96[2];
                v99 = *v98 == (_QWORD)v96;
                v96 = v98;
              }
              while (!v99);
            }
            v96 = v98;
          }
          while (v98 != v116);
        }
        *(double *)(a1 + 56) = v28;

        if (v118)
          operator delete(v118);
        goto LABEL_134;
      }
      v120 = 0;
      v44 = 0;
      v45 = v118;
      while (2)
      {
        v46 = v45[1];
        v127 = *v45;
        v128 = v46;
        v129 = *((_QWORD *)v45 + 4);
        v47 = v46;
        v48 = v28 - *((double *)&v127 + 1);
        v49 = *(double *)&v46 - *((double *)&v127 + 1);
        if (v49 - (v28 - *((double *)&v127 + 1)) >= 0.01)
        {
          if (v48 < 0.01)
          {
            LOBYTE(v129) = 0;
            goto LABEL_61;
          }
          v55 = v48 / v49 * *(double *)&v127;
          v50 = *((_QWORD *)&v128 + 1);
          v52 = BYTE1(v129);
          v54 = *(double *)&v127 - v55;
          *(double *)&v127 = v55;
          *(double *)&v128 = v28;
          v53 = v28;
          v51 = v129;
          if ((_BYTE)v129)
            goto LABEL_54;
LABEL_61:
          v59 = *(__int128 **)(a1 + 104);
          v60 = *(_QWORD *)(a1 + 112);
          if ((unint64_t)v59 < v60)
          {
            v61 = *v45;
            v62 = v45[2];
            v59[1] = v45[1];
            v59[2] = v62;
            *v59 = v61;
            v63 = v59 + 3;
            goto LABEL_110;
          }
          v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v59 - *v125) >> 4);
          v65 = v64 + 1;
          if (v64 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v125) >> 4);
          if (2 * v66 > v65)
            v65 = 2 * v66;
          if (v66 >= 0x2AAAAAAAAAAAAAALL)
            v67 = 0x555555555555555;
          else
            v67 = v65;
          if (v67)
            v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
          else
            v68 = 0;
          v72 = (__int128 *)(v67 + 48 * v64);
          v73 = *v45;
          v74 = v45[2];
          v72[1] = v45[1];
          v72[2] = v74;
          *v72 = v73;
          v76 = *(char **)(a1 + 96);
          v75 = *(char **)(a1 + 104);
          v77 = v72;
          if (v75 != v76)
          {
            do
            {
              v78 = *((_OWORD *)v75 - 3);
              v79 = *((_OWORD *)v75 - 2);
              *(__int128 *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
              *(v77 - 3) = v78;
              *(v77 - 2) = v79;
              v77 -= 3;
              v75 -= 48;
            }
            while (v75 != v76);
            v75 = (char *)*v125;
          }
          v63 = v72 + 3;
          *(_QWORD *)(a1 + 96) = v77;
          *(_QWORD *)(a1 + 104) = v72 + 3;
          *(_QWORD *)(a1 + 112) = v67 + 48 * v68;
          if (v75)
          {
            v80 = v75;
            goto LABEL_109;
          }
LABEL_110:
          *(_QWORD *)(a1 + 104) = v63;
        }
        else
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = 0.0;
          v47 = 0;
          v54 = 0.0;
          if (!(_BYTE)v129)
            goto LABEL_61;
LABEL_54:
          v123 = v52;
          v124 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
          v56 = *((unsigned __int8 *)v45 + 42);
          v57 = *((unsigned __int8 *)v45 + 41);
          v122 = *((_BYTE *)v45 + 40);
          if ((_BYTE)v129)
          {
            if ((v44 & 1) != 0)
            {
              v58 = *((_QWORD *)&v128 + 1);
              if (v120 == *((_QWORD *)&v128 + 1) || *(_BYTE *)(a1 + 24))
              {
                *(double *)(a1 + 120) = *(double *)&v127 + *(double *)(a1 + 120);
                if (!v56)
                  ++*(_QWORD *)(a1 + 128);
                v56 = 1;
              }
            }
            else
            {
              *(double *)(a1 + 120) = *(double *)&v127 + *(double *)(a1 + 120);
              if (!v56)
                ++*(_QWORD *)(a1 + 128);
              v56 = 1;
              v58 = *((_QWORD *)&v128 + 1);
              v120 = *((_QWORD *)&v128 + 1);
            }
            if (*(_BYTE *)(a1 + 25))
            {
              HDStatisticsBucket<HDStatisticsCumulative>::_bundleIdentifierForSourceID(a1, v58);
              v69 = (void *)objc_claimAutoreleasedReturnValue();
              if (v69)
              {
                objc_msgSend(v119, "objectForKeyedSubscript:", v69);
                v70 = (void *)objc_claimAutoreleasedReturnValue();
                v71 = v70;
                if (v70)
                {
                  if (objc_msgSend(v70, "longLongValue") != v58 && !*(_BYTE *)(a1 + 24))
                    goto LABEL_90;
                }
                else
                {
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v58);
                  v81 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v119, "setObject:forKeyedSubscript:", v81, v69);

                }
                v82 = HDStatisticsBucket<HDStatisticsCumulative>::_canonicalSourceIDForSourceID(a1, v58);
                v83 = HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource(a1, v82);
                *(double *)v83 = *(double *)&v127 + *(double *)v83;
                if (!v57)
                  v83[1] = (uint64_t *)((char *)v83[1] + 1);
                LOBYTE(v57) = 1;
LABEL_90:

              }
            }
            v44 = 1;
          }
          if (v51)
          {
            v84 = v56 != 0;
            v86 = *(char **)(a1 + 104);
            v85 = *(_QWORD *)(a1 + 112);
            if ((unint64_t)v86 < v85)
            {
              *(double *)v86 = v54;
              *((double *)v86 + 1) = v53;
              *((_QWORD *)v86 + 2) = v47;
              *((_QWORD *)v86 + 3) = v124;
              v86[32] = v51;
              v86[33] = v123;
              v86[40] = v122;
              v86[41] = v57;
              v63 = v86 + 48;
              v86[42] = v84;
              goto LABEL_110;
            }
            v80 = (char *)*v125;
            v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v86[-*v125] >> 4);
            v88 = v87 + 1;
            if (v87 + 1 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (_QWORD)v80) >> 4);
            if (2 * v89 > v88)
              v88 = 2 * v89;
            if (v89 >= 0x2AAAAAAAAAAAAAALL)
              v90 = 0x555555555555555;
            else
              v90 = v88;
            if (v90)
            {
              v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
              v80 = *(char **)(a1 + 96);
              v86 = *(char **)(a1 + 104);
            }
            else
            {
              v91 = 0;
            }
            v92 = v90 + 48 * v87;
            *(double *)v92 = v54;
            *(double *)(v92 + 8) = v53;
            *(_QWORD *)(v92 + 16) = v47;
            *(_QWORD *)(v92 + 24) = v124;
            *(_BYTE *)(v92 + 32) = v51;
            *(_BYTE *)(v92 + 33) = v123;
            *(_BYTE *)(v92 + 40) = v122;
            *(_BYTE *)(v92 + 41) = v57;
            *(_BYTE *)(v92 + 42) = v84;
            v93 = v92;
            if (v86 != v80)
            {
              do
              {
                v94 = *((_OWORD *)v86 - 3);
                v95 = *((_OWORD *)v86 - 2);
                *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                *(_OWORD *)(v93 - 48) = v94;
                *(_OWORD *)(v93 - 32) = v95;
                v93 -= 48;
                v86 -= 48;
              }
              while (v86 != v80);
              v80 = (char *)*v125;
            }
            v63 = (_OWORD *)(v92 + 48);
            *(_QWORD *)(a1 + 96) = v93;
            *(_QWORD *)(a1 + 104) = v92 + 48;
            *(_QWORD *)(a1 + 112) = v90 + 48 * v91;
            if (v80)
LABEL_109:
              operator delete(v80);
            goto LABEL_110;
          }
        }
        v45 += 3;
        if (v45 == v7)
          goto LABEL_112;
        continue;
      }
    }
    v10 = *(double *)v6;
    v9 = *(double *)(v6 + 8);
    v11 = *(double *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 24);
    v13 = *(_BYTE *)(v6 + 32);
    v14 = *(_BYTE *)(v6 + 33);
    v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        v42 = 0;
        v43 = 0;
        v18 = 0.0;
        v17 = *(double *)(v6 + 16);
        v16 = *(_BYTE *)(v6 + 32);
        v19 = 0.0;
        v11 = 0.0;
        v13 = 0;
LABEL_123:
        v101 = *(unsigned __int8 *)(v6 + 42);
        v102 = *(unsigned __int8 *)(v6 + 41);
        v103 = *(_QWORD *)(a1 + 96);
        v104 = *(unsigned __int8 *)(v6 + 40);
        *(double *)&v127 = v10;
        *((double *)&v127 + 1) = v9;
        *(double *)&v128 = v17;
        *((_QWORD *)&v128 + 1) = v12;
        LOBYTE(v129) = v16;
        BYTE1(v129) = v14;
        *(_DWORD *)((char *)&v129 + 2) = *(_DWORD *)(v103 + 34);
        HIWORD(v129) = *(_WORD *)(v103 + 38);
        *(double *)&v130 = v18;
        *((double *)&v130 + 1) = v19;
        *(double *)&v131 = v11;
        *((_QWORD *)&v131 + 1) = v42;
        LOBYTE(v132) = v13;
        HIBYTE(v132) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
        v105 = v104 != 0;
        v106 = v102 != 0;
        v107 = v101 != 0;
        if ((_BYTE)v129)
        {
          v108 = *(double *)&v127;
          *(double *)(a1 + 120) = *(double *)&v127 + *(double *)(a1 + 120);
          if (!v101)
            ++*(_QWORD *)(a1 + 128);
          if (*(_BYTE *)(a1 + 25))
          {
            v109 = HDStatisticsBucket<HDStatisticsCumulative>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v128 + 1));
            v110 = HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource(a1, v109);
            *(double *)v110 = v108 + *(double *)v110;
            if (!v102)
              v110[1] = (uint64_t *)((char *)v110[1] + 1);
          }
          v105 = 1;
          v106 = 1;
          v107 = 1;
        }
        if ((_BYTE)v132)
        {
          LOWORD(v126) = v132;
          v111 = v131;
          v112 = (char *)*v125;
          *(_OWORD *)v112 = v130;
          *((_OWORD *)v112 + 1) = v111;
          *((_QWORD *)v112 + 4) = v126;
          v112[40] = v105;
          v112[41] = v106;
          v112[42] = v107;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_133;
      }
      v100 = v10 * (v15 / (v11 - v9));
      v17 = a2;
      v16 = *(_BYTE *)(v6 + 32);
      v18 = v10 - v100;
      v10 = v100;
      v19 = a2;
    }
    else
    {
      v16 = 0;
      v17 = *(double *)(v6 + 16);
      v18 = *(double *)v6;
      v19 = *(double *)(v6 + 8);
    }
    v42 = *(_QWORD *)(v6 + 24);
    v43 = *(_BYTE *)(v6 + 33);
    goto LABEL_123;
  }
}

void sub_1B7CA7DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v12;

  v12 = a2;
  v5 = *(_QWORD **)(a1 + 184);
  v3 = (uint64_t **)(a1 + 184);
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = (uint64_t **)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsCumulative>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCumulative>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCumulative>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    v6 = std::__tree<std::__value_type<long long,HDStatisticsCumulative>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCumulative>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCumulative>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCumulative>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 264), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCumulative>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 304);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7CA7F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCumulative>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 344);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7CA8068(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCumulative>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCumulative>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCumulative>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x60uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *((_QWORD *)v9 + 11) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 240);
  v7 = *(char **)(*(_QWORD *)a4 + 248);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 240);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 240);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 248);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 240);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 248);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 240);
      v15 = *(char **)(*(_QWORD *)a4 + 248);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 248);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 248);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 240);
          v25 = *(char **)(*(_QWORD *)a4 + 248);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 248);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 248);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 240);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 240);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 248);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 240);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 248);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 240);
      v41 = *(char **)(*(_QWORD *)a4 + 248);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 248);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 248);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 240);
      v11 = *(char **)(*(_QWORD *)a3 + 248);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 248);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 248);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 240);
      v24 = *(char **)(*(_QWORD *)a3 + 248);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 248);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 248);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 240);
            v31 = *(char **)(*(_QWORD *)a3 + 248);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 248);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 248);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 240);
    v14 = *(char **)(*(_QWORD *)a5 + 248);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 248);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 248);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 240);
        v23 = *(char **)(*(_QWORD *)a5 + 248);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 248);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 248);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 240);
            v32 = *(char **)(*(_QWORD *)a5 + 248);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 248);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 248);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCumulative>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCumulative>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 240);
    v16 = *(char **)(*(_QWORD *)a6 + 248);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 248);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 248);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 240);
        v25 = *(char **)(*(_QWORD *)a6 + 248);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 248);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 248);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 240);
            v34 = *(char **)(*(_QWORD *)a6 + 248);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 248);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 248);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 240);
                v43 = *(char **)(*(_QWORD *)a6 + 248);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 248);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 248);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D05710;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D05710;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addStatisticsFromFinishedBucket<HDStatisticsCumulative>(HKStatistics *,HDStatisticsBucket<HDStatisticsCumulative> const&)::{lambda(HDStatisticsCumulative const&)#1}>,HDStatisticsCumulative const& ()(HDStatisticsCumulative const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 536))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsCumulative>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7CAA074(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 536))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 504);
      v7 = *(_QWORD *)(a1 + 512);
      if (v7 == v6)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCumulative>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCumulative>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_didChangeBucket(a1, v9);
      if (v7 != v6)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7CAA2F8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCumulative>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  double v12;
  int v13;
  unint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int8x16_t v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t **v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  double v67;
  double v68;
  unint64_t v69;
  char v70;

  v5 = a1 + 8;
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = *(double *)(a1 + 8) - v7;
  v13 = v10;
  v14 = (unint64_t)v9;
  v15 = v11;
  v16 = v8;
  v17 = v7;
  v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      v13 = *(unsigned __int8 *)(a2 + 32);
      v18 = v6 - v6 * (v12 / (v8 - v7));
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 33);
      v16 = *(double *)(a2 + 16);
      v17 = *(double *)(a1 + 8);
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0.0;
      v17 = 0.0;
      v18 = 0.0;
    }
  }
  v19 = *(double *)(a1 + 16);
  v20 = v19 - v17;
  v21 = v16 - v17;
  v22 = v16 - v17 - (v19 - v17);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v22 < 0.01)
      goto LABEL_10;
    if (v20 >= 0.01)
      goto LABEL_24;
LABEL_22:
    v23 = v13;
    v31 = v14;
    v25 = v16;
    v19 = v17;
    v24 = v18;
    if (!v23)
      return;
    goto LABEL_60;
  }
  if (v20 < 0.01)
    goto LABEL_22;
  if (v22 >= 0.01)
  {
LABEL_24:
    v25 = v16;
    v69 = v14;
    v24 = v18 - v18 * (v20 / v21);
    v23 = v13;
    v70 = v15;
    v16 = *(double *)(a1 + 16);
    v18 = v18 * (v20 / v21);
    if (!v13)
    {
LABEL_25:
      v15 = v70;
      v31 = v69;
      if (!v23)
        return;
      goto LABEL_60;
    }
    goto LABEL_11;
  }
LABEL_10:
  v69 = 0;
  v23 = 0;
  v70 = 0;
  v24 = 0.0;
  v19 = 0.0;
  v25 = 0.0;
  if (!v13)
    goto LABEL_25;
LABEL_11:
  v67 = v17;
  v68 = v16;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 208, v14, v14);
  v26 = *(_QWORD *)(a1 + 112);
  if (v26 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
  {
    v32.f64[1] = *(float64_t *)(a1 + 16);
    v28 = v67;
    v27 = v68;
    v32.f64[0] = v67;
    v33.f64[0] = *(float64_t *)(a1 + 8);
    v33.f64[1] = v68;
    v34 = (int8x16_t)vcgtq_f64(v33, v32);
    v33.f64[0] = v67;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v34, *(int8x16_t *)(a1 + 8), (int8x16_t)v33);
  }
  else
  {
    v28 = v67;
    v27 = v68;
    if (v67 < *(double *)(a1 + 48))
    {
      v29 = *(double *)(a1 + 8);
      if (v67 >= v29)
        v29 = v67;
      *(double *)(a1 + 48) = v29;
    }
    if (v68 > *(double *)(a1 + 56))
    {
      v30 = *(double *)(a1 + 16);
      if (v30 >= v68)
        v30 = v68;
      *(double *)(a1 + 56) = v30;
    }
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v35 = *(double *)(a1 + 64);
    if (v28 < v35)
      v35 = v28;
    *(double *)(a1 + 64) = v35;
  }
  if (a3 && v28 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime(v5, v28);
    v28 = v67;
    v27 = v68;
    v26 = *(_QWORD *)(a1 + 112);
  }
  v36 = *(_QWORD *)(a1 + 120);
  if (v26 >= v36)
  {
    v38 = *(_QWORD *)(a1 + 104);
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v38) >> 4);
    v40 = v39 + 1;
    if (v39 + 1 > 0x555555555555555)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v38) >> 4);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0x2AAAAAAAAAAAAAALL)
      v42 = 0x555555555555555;
    else
      v42 = v40;
    if (v42)
    {
      v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v42);
      v28 = v67;
      v27 = v68;
    }
    else
    {
      v43 = 0;
    }
    v44 = v42 + 48 * v39;
    v45 = v42 + 48 * v43;
    *(double *)v44 = v18;
    *(double *)(v44 + 8) = v28;
    *(double *)(v44 + 16) = v27;
    *(_QWORD *)(v44 + 24) = v14;
    *(_BYTE *)(v44 + 32) = v13;
    *(_BYTE *)(v44 + 33) = v15;
    *(_WORD *)(v44 + 40) = 0;
    *(_BYTE *)(v44 + 42) = 0;
    v37 = v44 + 48;
    v47 = *(char **)(a1 + 104);
    v46 = *(char **)(a1 + 112);
    if (v46 == v47)
    {
      v15 = v70;
      v31 = v69;
    }
    else
    {
      v15 = v70;
      v31 = v69;
      do
      {
        v48 = *((_OWORD *)v46 - 3);
        v49 = *((_OWORD *)v46 - 2);
        *(_OWORD *)(v44 - 21) = *(_OWORD *)(v46 - 21);
        *(_OWORD *)(v44 - 48) = v48;
        *(_OWORD *)(v44 - 32) = v49;
        v44 -= 48;
        v46 -= 48;
      }
      while (v46 != v47);
      v46 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v44;
    *(_QWORD *)(a1 + 112) = v37;
    *(_QWORD *)(a1 + 120) = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *(double *)v26 = v18;
    *(double *)(v26 + 8) = v28;
    *(double *)(v26 + 16) = v27;
    *(_QWORD *)(v26 + 24) = v14;
    *(_BYTE *)(v26 + 32) = v13;
    *(_BYTE *)(v26 + 33) = v15;
    *(_WORD *)(v26 + 40) = 0;
    v37 = v26 + 48;
    *(_BYTE *)(v26 + 42) = 0;
    v15 = v70;
    v31 = v69;
  }
  *(_QWORD *)(a1 + 112) = v37;
  if (!*(_BYTE *)(a1 + 176) || *(double *)(a1 + 152) <= v7)
  {
    *(double *)(a1 + 144) = v6;
    *(double *)(a1 + 152) = v7;
    *(double *)(a1 + 160) = v8;
    *(_QWORD *)(a1 + 168) = v9;
    *(_BYTE *)(a1 + 176) = v10;
    *(_BYTE *)(a1 + 177) = v11;
  }
  if (*(_BYTE *)(a1 + 33)
    && ((v50 = HDStatisticsBucket<HDStatisticsCumulative>::_canonicalSourceIDForSourceID(v5, v14),
         v51 = HDStatisticsBucket<HDStatisticsCumulative>::_statisticsForSource(v5, v50),
         !*((_BYTE *)v51 + 48))
     || *((double *)v51 + 3) <= v7))
  {
    *((double *)v51 + 2) = v6;
    *((double *)v51 + 3) = v7;
    *((double *)v51 + 4) = v8;
    v51[5] = v9;
    *((_BYTE *)v51 + 48) = v10;
    *((_BYTE *)v51 + 49) = v11;
    if (!v23)
      return;
  }
  else if (!v23)
  {
    return;
  }
LABEL_60:
  v52 = *(_QWORD *)(a1 + 400);
  v53 = *(_QWORD *)(a1 + 408);
  if (v52 >= v53)
  {
    v55 = *(_QWORD *)(a1 + 392);
    v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v55) >> 3);
    v57 = v56 + 1;
    if (v56 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v55) >> 3);
    if (2 * v58 > v57)
      v57 = 2 * v58;
    if (v58 >= 0x333333333333333)
      v59 = 0x666666666666666;
    else
      v59 = v57;
    if (v59)
      v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
    else
      v60 = 0;
    v61 = v59 + 40 * v56;
    v62 = v59 + 40 * v60;
    *(double *)v61 = v24;
    *(double *)(v61 + 8) = v19;
    *(double *)(v61 + 16) = v25;
    *(_QWORD *)(v61 + 24) = v31;
    *(_BYTE *)(v61 + 32) = v23;
    *(_BYTE *)(v61 + 33) = v15;
    v54 = v61 + 40;
    v64 = *(char **)(a1 + 392);
    v63 = *(char **)(a1 + 400);
    if (v63 != v64)
    {
      do
      {
        v65 = *(_OWORD *)(v63 - 40);
        v66 = *(_OWORD *)(v63 - 24);
        *(_WORD *)(v61 - 8) = *((_WORD *)v63 - 4);
        *(_OWORD *)(v61 - 24) = v66;
        *(_OWORD *)(v61 - 40) = v65;
        v61 -= 40;
        v63 -= 40;
      }
      while (v63 != v64);
      v63 = *(char **)(a1 + 392);
    }
    *(_QWORD *)(a1 + 392) = v61;
    *(_QWORD *)(a1 + 400) = v54;
    *(_QWORD *)(a1 + 408) = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *(double *)v52 = v24;
    *(double *)(v52 + 8) = v19;
    *(double *)(v52 + 16) = v25;
    *(_QWORD *)(v52 + 24) = v31;
    *(_BYTE *)(v52 + 32) = v23;
    v54 = v52 + 40;
    *(_BYTE *)(v52 + 33) = v15;
  }
  *(_QWORD *)(a1 + 400) = v54;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 538))
  {
    *(_BYTE *)(a1 + 540) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 540) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7CAA904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCumulative>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 392), *(_QWORD *)(a1 + 400), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCumulative>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCumulative>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7CAA9EC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCumulative>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *i;
  _QWORD *v15;

  v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 416), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 64);
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_QWORD *)(v8 + 136) = 0;
  if (*(_QWORD *)(v8 + 160))
  {
    v9 = *(_QWORD *)(a1 + 192);
    v10 = *(_QWORD **)(a1 + 184);
    *(_QWORD *)(a1 + 184) = a1 + 192;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    if (v10[1])
      v11 = (_QWORD *)v10[1];
    else
      v11 = v10;
    if (v11)
    {
      v12 = (_QWORD *)v11[2];
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if ((_QWORD *)*v12 == v11)
        {
          *v12 = 0;
          while (1)
          {
            v15 = (_QWORD *)v12[1];
            if (!v15)
              break;
            do
            {
              v12 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; v13 = (_QWORD *)v12[1])
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (i = (_QWORD *)v12[2]; i; i = (_QWORD *)i[2])
          v12 = i;
        v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 416));
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a1 + 392);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 540))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 540) = 0;
  }

}

void sub_1B7CAAB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 536))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7CAAC44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 552));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 536) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7CAAFA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40C88B5054);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7CAB154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsCumulative>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsCumulative>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7CAB3C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  double v11;
  double v12;
  _QWORD v13[2];
  double v14;
  uint64_t v15;
  char v16;
  char v17;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  *(double *)v13 = a5;
  *(double *)&v13[1] = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  else
  {
    v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      v8 = 0;
    }
    *(double *)v13 = a5;
    v14 = a7;
    v16 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 536))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsCumulative>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7CAC08C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7CAC12C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsCumulativeE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCumulative>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D057C0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_WORD *)(a1 + 680) = 1;
  *(_BYTE *)(a1 + 682) = 0;
  *(_BYTE *)(a1 + 684) = 0;
  *(_QWORD *)(a1 + 688) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_QWORD *)(a1 + 728) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D057C0;
  v2 = *(void **)(a1 + 712);
  if (v2)
  {
    *(_QWORD *)(a1 + 720) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 648);
  if (v3)
  {
    *(_QWORD *)(a1 + 656) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 680) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

}

void sub_1B7CAC2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 688) = v4;
    v3 = v5;
  }

}

void sub_1B7CAC300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 87, a2);
  v7 = a2;
  v4 = a1[87];
  v5 = a1[84];
  a1[84] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[84]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 312) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7CAC494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[66];

  if (*(_BYTE *)(a1 + 680))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7CAC53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 682))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 681))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 680))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 683))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 720);
      v20 = *(_QWORD *)(a1 + 728);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 712);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 720);
        v35 = *(char **)(a1 + 712);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 712);
        }
        *(_QWORD *)(a1 + 712) = v30;
        *(_QWORD *)(a1 + 720) = v23;
        *(_QWORD *)(a1 + 728) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 720) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7CAC7DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 682))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 682) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 681))
    goto LABEL_5;
  v9 = *(void **)(a1 + 704);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_385);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 704);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 704);
  *(_QWORD *)(a1 + 704) = 0;

  *(_BYTE *)(a1 + 681) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 712);
    *(_QWORD *)(a1 + 728) = 0;
    *(_QWORD *)(a1 + 720) = 0;
    *(_QWORD *)(a1 + 712) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 712);
      v37 = *(__int128 **)(a1 + 720);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 720);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 720) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 712);
  v39 = *(_QWORD *)(a1 + 720);
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 656) != *(_QWORD *)(a1 + 648))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 656) != *(_QWORD *)(a1 + 648));
  }
  *(_BYTE *)(a1 + 682) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 684))
    {
      *(_BYTE *)(a1 + 684) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 682) = 0;
LABEL_83:

  return v7;
}

void sub_1B7CACED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 682) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 683) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 682))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 682))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 704);
    *(_QWORD *)(a1 + 704) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 681) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 681))
  {
    v8 = *(void **)(a1 + 704);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 704);
      *(_QWORD *)(a1 + 704) = v9;

      v8 = *(void **)(a1 + 704);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7CAD1D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 680) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 680) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7CAD2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 680) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 680), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 440);
  if (v9 != (_QWORD *)(a1 + 448))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, (int8x16_t *)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 448));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 648);
  for (k = *(int8x16_t **)(a1 + 656); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7CAD688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD **i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t j;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  id v62;
  _QWORD *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  _BYTE v67[528];
  __int128 v68;
  __int128 v69;
  int8x16_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  int8x16_t v75;
  uint64_t v76;
  uint64_t v77[4];
  void *__p;
  char *v79;
  unint64_t v80;
  int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[4];
  _QWORD v88[6];
  uint64_t **v89;
  uint64_t *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  int v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  __int128 v100;
  __int128 v101;
  int v102;
  __int128 v103;
  __int128 v104;
  int v105;
  void (**v106)(statistics::StatisticsEngine *__hidden);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  _BYTE v113[32];
  unint64_t v114;
  int v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int16 v129;

  v62 = a2;
  *(_BYTE *)(a1 + 680) = objc_msgSend(v62, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v62;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v67, 0, -1.79769313e308, 1.79769313e308);
  v68 = 0u;
  v69 = 0u;
  v114 = 0;
  v65 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v113, (const unsigned __int8 *)objc_msgSend(v65, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v114));
  v64 = a1;
  v106 = &off_1E6D09A88;
  v107 = 0;
  v111 = 0;
  v109 = 0;
  v110 = 0;
  v112 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v106, (PB::Reader *)v113);
  v66 = v108;
  if (v107)
  {
    v74 = 0;
    memset(v77, 0, sizeof(v77));
    __p = 0;
    v80 = 0;
    v79 = 0;
    v81 = 0;
    v82 = xmmword_1B7F54AF0;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0u;
    memset(v87, 0, 26);
    memset(&v87[2], 0, 32);
    memset(v88, 0, 42);
    v91 = 0;
    v90 = 0;
    v89 = &v90;
    v92 = 0u;
    v93 = 0u;
    v94 = 1065353216;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v98 = 0;
    v99 = 1065353216;
    v100 = 0u;
    v101 = 0u;
    v102 = 1065353216;
    v103 = 0u;
    v104 = 0u;
    v105 = 1065353216;
    v70 = vextq_s8(*(int8x16_t *)(v107 + 8), *(int8x16_t *)(v107 + 8), 8uLL);
    v4 = *(_QWORD *)(v107 + 72);
    v71 = *(_QWORD *)(v107 + 64);
    v72 = *(_BYTE *)(v107 + 185);
    v73 = *(_BYTE *)(v107 + 186);
    v75 = vextq_s8(*(int8x16_t *)(v107 + 24), *(int8x16_t *)(v107 + 24), 8uLL);
    v76 = v4;
    v5 = *(_QWORD *)(v107 + 80);
    v6 = *(_QWORD *)(v107 + 88);
    v63 = (_QWORD *)v107;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v80)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v80 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v80 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v79;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v79 = (char *)(v19 + 6);
          v80 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v79 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = (_QWORD *)v63[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v115, v23);
      v81 = v115;
      v86 = v120;
      v87[0] = v121;
      v87[1] = v122;
      v82 = v116;
      v83 = v117;
      v84 = v118;
      v85 = v119;
      *(_QWORD *)&v87[2] = v123;
      if (*((_QWORD *)&v87[2] + 1))
      {
        *(_QWORD *)&v87[3] = *((_QWORD *)&v87[2] + 1);
        operator delete(*((void **)&v87[2] + 1));
      }
      *(_OWORD *)((char *)&v87[2] + 8) = v124;
      *((_QWORD *)&v87[3] + 1) = v125;
      v125 = 0;
      v124 = 0uLL;
      v88[0] = v126;
      *(_OWORD *)&v88[1] = v127;
      *(_OWORD *)&v88[3] = v128;
      LOWORD(v88[5]) = v129;
    }
    v24 = (_QWORD **)v63[17];
    for (i = (_QWORD **)v63[18]; v24 != i; ++v24)
    {
      v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v115, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v90;
      v29 = &v90;
      v30 = &v90;
      if (v90)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_34;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_37;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_34:
      v33 = (char *)operator new(0xF0uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      *(_OWORD *)(v33 + 200) = 0u;
      *(_OWORD *)(v33 + 216) = 0u;
      *((_QWORD *)v33 + 29) = 0;
      *((_QWORD *)v33 + 7) = 0xFFEFFFFFFFFFFFFFLL;
      *((_OWORD *)v33 + 4) = 0u;
      *((_OWORD *)v33 + 5) = 0u;
      *((_OWORD *)v33 + 6) = 0u;
      *((_OWORD *)v33 + 7) = 0u;
      *((_OWORD *)v33 + 8) = 0u;
      *(_OWORD *)(v33 + 138) = 0u;
      *(_OWORD *)(v33 + 218) = 0u;
      *((_OWORD *)v33 + 12) = 0u;
      *((_OWORD *)v33 + 13) = 0u;
      *((_OWORD *)v33 + 10) = 0u;
      *((_OWORD *)v33 + 11) = 0u;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v89)
      {
        v89 = (uint64_t **)*v89;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v90, v32);
      ++v91;
LABEL_37:
      *((_DWORD *)v33 + 10) = v115;
      v35 = v117;
      v34 = v118;
      *((_OWORD *)v33 + 3) = v116;
      *((_OWORD *)v33 + 4) = v35;
      v37 = v121;
      v36 = v122;
      v38 = v119;
      *((_OWORD *)v33 + 7) = v120;
      *((_OWORD *)v33 + 8) = v37;
      *((_OWORD *)v33 + 9) = v36;
      *((_OWORD *)v33 + 5) = v34;
      *((_OWORD *)v33 + 6) = v38;
      *((_QWORD *)v33 + 20) = v123;
      v39 = (void *)*((_QWORD *)v33 + 21);
      if (v39)
      {
        *((_QWORD *)v33 + 22) = v39;
        operator delete(v39);
        *((_QWORD *)v33 + 21) = 0;
        *((_QWORD *)v33 + 22) = 0;
        *((_QWORD *)v33 + 23) = 0;
      }
      *(_OWORD *)(v33 + 168) = v124;
      *((_QWORD *)v33 + 23) = v125;
      *((_QWORD *)v33 + 24) = v126;
      v40 = v128;
      *(_OWORD *)(v33 + 200) = v127;
      v125 = 0;
      v124 = 0uLL;
      *(_OWORD *)(v33 + 216) = v40;
      *((_WORD *)v33 + 116) = v129;
    }
    v41 = v63[5];
    for (j = v63[6]; v41 != j; v41 += 8)
    {
      v44 = *(double *)(*(_QWORD *)v41 + 8);
      v43 = *(double *)(*(_QWORD *)v41 + 16);
      if (v44 >= v43)
        v45 = *(double *)(*(_QWORD *)v41 + 16);
      else
        v45 = *(double *)(*(_QWORD *)v41 + 8);
      if (v43 < v44)
        v43 = *(double *)(*(_QWORD *)v41 + 8);
      HKIntervalMask<double>::_insertInterval(v77, v45, v43);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((uint64_t)v67, (uint64_t)&v70);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v70);
  }
  v46 = v109;
  v47 = v110;
  if (v109 != v110)
  {
    v48 = *((_QWORD *)&v68 + 1);
    do
    {
      v49 = *(_QWORD *)(*(_QWORD *)v46 + 24);
      v50 = *(_QWORD *)(*(_QWORD *)v46 + 32);
      v51 = *(_QWORD *)(*(_QWORD *)v46 + 8);
      v52 = *(_QWORD *)(*(_QWORD *)v46 + 16);
      if (v48 >= (unint64_t)v69)
      {
        v53 = (void *)v68;
        v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v68) >> 3);
        v55 = v54 + 1;
        if (v54 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v69 - v68) >> 3) > v55)
          v55 = 0x999999999999999ALL * ((uint64_t)(v69 - v68) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v69 - v68) >> 3) >= 0x333333333333333)
          v56 = 0x666666666666666;
        else
          v56 = v55;
        if (v56)
        {
          v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v56);
          v48 = *((_QWORD *)&v68 + 1);
          v53 = (void *)v68;
        }
        else
        {
          v57 = 0;
        }
        v58 = v56 + 40 * v54;
        *(_QWORD *)v58 = v50;
        *(_QWORD *)(v58 + 8) = v49;
        *(_QWORD *)(v58 + 16) = v51;
        *(_QWORD *)(v58 + 24) = v52;
        *(_WORD *)(v58 + 32) = 1;
        v59 = v58;
        if ((void *)v48 != v53)
        {
          do
          {
            v60 = *(_OWORD *)(v48 - 40);
            v61 = *(_OWORD *)(v48 - 24);
            *(_WORD *)(v59 - 8) = *(_WORD *)(v48 - 8);
            *(_OWORD *)(v59 - 24) = v61;
            *(_OWORD *)(v59 - 40) = v60;
            v59 -= 40;
            v48 -= 40;
          }
          while ((void *)v48 != v53);
          v53 = (void *)v68;
        }
        *(_QWORD *)&v68 = v59;
        v48 = v58 + 40;
        *((_QWORD *)&v68 + 1) = v58 + 40;
        *(_QWORD *)&v69 = v56 + 40 * v57;
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v48 = v50;
        *(_QWORD *)(v48 + 8) = v49;
        *(_QWORD *)(v48 + 16) = v51;
        *(_QWORD *)(v48 + 24) = v52;
        *(_WORD *)(v48 + 32) = 1;
        v48 += 40;
      }
      *((_QWORD *)&v68 + 1) = v48;
      v46 += 8;
    }
    while (v46 != v47);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v106);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(v64 + 112), (uint64_t)&v66);
  if ((_QWORD)v68)
  {
    *((_QWORD *)&v68 + 1) = v68;
    operator delete((void *)v68);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v67);

}

void sub_1B7CADEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a2);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x430]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x408]);
  v9 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v9;
    operator delete(v9);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a3);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy((_QWORD *)STACK[0x3B8]);
  v10 = (void *)STACK[0x368];
  if (STACK[0x368])
  {
    STACK[0x370] = (unint64_t)v10;
    operator delete(v10);
  }
  v11 = (void *)STACK[0x2D0];
  if (STACK[0x2D0])
  {
    STACK[0x2D8] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x2C8]);
  v12 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x488]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_1B7F54AF0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 520) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 536);
  if (v2)
  {
    *(_QWORD *)(a1 + 544) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 488);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 448);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 408);
  v2 = *(void **)(a1 + 384);
  if (v2)
  {
    *(_QWORD *)(a1 + 392) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 344);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 328));
  v3 = *(void **)(a1 + 248);
  if (v3)
  {
    *(_QWORD *)(a1 + 256) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    v2 = (void *)a1[21];
    if (v2)
    {
      a1[22] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[528];
  uint64_t v18;
  _BYTE v19[528];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[464];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 696));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 680) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7CAE438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 67), (__n128 *)(a2 + 536));
  v4 = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a2 + 560) = 0;
  v5 = (void *)a1[70];
  a1[70] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v12 = *(_OWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 128) = v12;
  v14 = *(_OWORD *)(a2 + 176);
  v15 = *(_OWORD *)(a2 + 192);
  v16 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 176) = v14;
  *(_OWORD *)(a1 + 192) = v15;
  v17 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = v17;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 248), *(const void **)(a2 + 248), *(_QWORD *)(a2 + 256), (uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v18 = *(_OWORD *)(a2 + 296);
  v19 = *(_QWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v18;
  v20 = (_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 312) = v19;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  v21 = *(_QWORD **)(a2 + 320);
  if (v21 != (_QWORD *)(a2 + 328))
  {
    v22 = 0;
    v23 = (_QWORD *)(a1 + 328);
    while (1)
    {
      v24 = (_QWORD *)(a1 + 328);
      if (v23 == v20)
        goto LABEL_12;
      v25 = v22;
      v26 = (_QWORD *)(a1 + 328);
      if (v22)
      {
        do
        {
          v24 = v25;
          v25 = (_QWORD *)v25[1];
        }
        while (v25);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v26[2];
          v27 = *v24 == (_QWORD)v26;
          v26 = v24;
        }
        while (v27);
      }
      v28 = v21[4];
      if (v24[4] < v28)
      {
LABEL_12:
        if (v22)
          v29 = (uint64_t **)v24;
        else
          v29 = (uint64_t **)(a1 + 328);
        if (v22)
          v30 = (uint64_t **)(v24 + 1);
        else
          v30 = (uint64_t **)(a1 + 328);
        if (!*v30)
        {
LABEL_28:
          v33 = (char *)operator new(0xF0uLL);
          *((_QWORD *)v33 + 4) = v21[4];
          *((_DWORD *)v33 + 10) = *((_DWORD *)v21 + 10);
          v34 = *((_OWORD *)v21 + 3);
          v35 = *((_OWORD *)v21 + 5);
          *((_OWORD *)v33 + 4) = *((_OWORD *)v21 + 4);
          *((_OWORD *)v33 + 5) = v35;
          *((_OWORD *)v33 + 3) = v34;
          v36 = *((_OWORD *)v21 + 6);
          v37 = *((_OWORD *)v21 + 7);
          v38 = *((_OWORD *)v21 + 9);
          *((_OWORD *)v33 + 8) = *((_OWORD *)v21 + 8);
          *((_OWORD *)v33 + 9) = v38;
          *((_OWORD *)v33 + 6) = v36;
          *((_OWORD *)v33 + 7) = v37;
          v39 = v21[20];
          *((_QWORD *)v33 + 21) = 0;
          *((_QWORD *)v33 + 20) = v39;
          *((_QWORD *)v33 + 22) = 0;
          *((_QWORD *)v33 + 23) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v33 + 21, (const void *)v21[21], v21[22], (uint64_t)(v21[22] - v21[21]) >> 4);
          *((_QWORD *)v33 + 24) = v21[24];
          v40 = *(_OWORD *)(v21 + 25);
          v41 = *(_OWORD *)(v21 + 27);
          *((_QWORD *)v33 + 29) = v21[29];
          *(_OWORD *)(v33 + 216) = v41;
          *(_OWORD *)(v33 + 200) = v40;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 320), (uint64_t)v29, v30, (uint64_t *)v33);
        }
      }
      else
      {
        v30 = (uint64_t **)(a1 + 328);
        v29 = (uint64_t **)(a1 + 328);
        if (!v22)
          goto LABEL_28;
        v31 = v22;
        while (1)
        {
          while (1)
          {
            v29 = (uint64_t **)v31;
            v32 = v31[4];
            if (v32 <= v28)
              break;
            v31 = *v29;
            v30 = v29;
            if (!*v29)
              goto LABEL_28;
          }
          if (v32 >= v28)
            break;
          v31 = v29[1];
          if (!v31)
          {
            v30 = v29 + 1;
            goto LABEL_28;
          }
        }
      }
      v42 = (_QWORD *)v21[1];
      if (v42)
      {
        do
        {
          v43 = v42;
          v42 = (_QWORD *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (_QWORD *)v21[2];
          v27 = *v43 == (_QWORD)v21;
          v21 = v43;
        }
        while (!v27);
      }
      if (v43 == (_QWORD *)(a2 + 328))
        break;
      v22 = (_QWORD *)*v20;
      v23 = *(_QWORD **)(a1 + 320);
      v21 = v43;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 344, a2 + 344);
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 384), *(const void **)(a2 + 384), *(_QWORD *)(a2 + 392), (uint64_t)(*(_QWORD *)(a2 + 392) - *(_QWORD *)(a2 + 384)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 408, a2 + 408);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 448, a2 + 448);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 488, a2 + 488);
  return a1;
}

void sub_1B7CAE868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v12 + 392) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*v13);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 256) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  v10 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = v10;
  v11 = *(_OWORD *)(a2 + 128);
  v12 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  v13 = *(_OWORD *)(a2 + 176);
  v14 = *(_OWORD *)(a2 + 192);
  v15 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 176) = v13;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 248, (__n128 *)(a2 + 248));
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v16 = *(_OWORD *)(a2 + 280);
  v17 = *(_OWORD *)(a2 + 296);
  *(_WORD *)(a1 + 312) = *(_WORD *)(a2 + 312);
  *(_OWORD *)(a1 + 280) = v16;
  *(_OWORD *)(a1 + 296) = v17;
  v18 = a1 + 328;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 328));
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v19 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 328) = v19;
  v20 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 336) = v20;
  if (v20)
  {
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(a2 + 320) = a2 + 328;
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(a2 + 336) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 320) = v18;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 384, (__n128 *)(a2 + 384));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 448, (uint64_t *)(a2 + 448));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 488, (uint64_t *)(a2 + 488));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  double v3;
  id v4;
  double *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  __n128 v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  __n128 v35;
  id v36;
  id v37;
  uint64_t **v38;
  uint64_t *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  void *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  double *v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  id v75;
  id v76;
  id v77;
  uint64_t **i;
  uint64_t *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  double v84;
  double v85;
  void *v86;
  void *v87;
  void *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  int v98;
  void *v99;
  void *v100;
  int v101;
  id v103;
  id v104;
  id v105;
  uint64_t v106;
  id v108;
  id v109;
  _BYTE v110[16];
  uint64_t **v111;
  void *__p;
  void *v113;
  _QWORD v114[3];
  _QWORD *v115;
  _QWORD v116[3];
  _QWORD *v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = a2 + 5;
  if (v3 != -1.79769313e308)
    v5 = a2;
  v6 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  v106 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v6, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(v106 + 384);
      v16 = *(uint64_t **)(v106 + 392);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v20 = (void *)objc_msgSend(v14, "copy");
      objc_msgSend(v12, "_setSources:", v20);

    }
  }

  v114[0] = &off_1E6D059B0;
  v115 = v114;
  v21 = v12;
  v22 = (uint64_t)v115;
  v103 = v21;
  if (!v115)
    goto LABEL_22;
  if (v115 != v114)
  {
    v22 = (*(uint64_t (**)(void))(*v115 + 16))();
LABEL_22:
    v119 = (_QWORD *)v22;
    goto LABEL_24;
  }
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(v114[0] + 24))((uint64_t)v114, v118);
LABEL_24:
  v121 = 0;
  v23 = operator new(0x28uLL);
  *v23 = &off_1E6D05890;
  v24 = v23 + 1;
  v25 = (uint64_t)v119;
  if (!v119)
  {
LABEL_27:
    v23[4] = v25;
    goto LABEL_29;
  }
  if (v119 != v118)
  {
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v119 + 16))(v119, v24);
    goto LABEL_27;
  }
  v23[4] = v24;
  (*(void (**)(_QWORD *))(v118[0] + 24))(v118);
LABEL_29:
  v121 = v23;
  v108 = v21;
  v26 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v110, v106);
  if (!v121)
    std::__throw_bad_function_call[abi:ne180100]();
  v29 = (*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v121 + 48))(v121, v110, v28);
  v30 = *(double **)(v29 + 8);
  v31 = 0.0;
  while (v30 != *(double **)(v29 + 16))
  {
    v33 = *v30;
    v32 = v30[1];
    v30 += 2;
    v31 = v31 + v32 - v33;
  }
  objc_msgSend(v26, "quantityWithUnit:doubleValue:", v27, v31 + *(double *)(v29 + 32));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v108, "setDuration:", v34);

  if (__p)
  {
    v113 = __p;
    operator delete(__p);
  }

  v35 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v110, v106);
  if (!v121)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v108, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v121 + 48))(v121, v110, v35));
  if (__p)
  {
    v113 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v36 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v37 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v110, v106);
    v38 = v111;
    if (v111)
    {
      v9 = (id)0x1E0CB3000;
      do
      {
        v39 = v38[2];
        v40 = (void *)MEMORY[0x1E0CB6A28];
        objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v121)
          std::__throw_bad_function_call[abi:ne180100]();
        v42 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v121 + 48))(v121, (uint64_t *)v38 + 3);
        v43 = *(double **)(v42 + 8);
        v44 = 0.0;
        while (v43 != *(double **)(v42 + 16))
        {
          v46 = *v43;
          v45 = v43[1];
          v43 += 2;
          v44 = v44 + v45 - v46;
        }
        objc_msgSend(v40, "quantityWithUnit:doubleValue:", v41, v44 + *(double *)(v42 + 32));
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "setObject:forKeyedSubscript:", v47, v39);

        if (!v121)
          std::__throw_bad_function_call[abi:ne180100]();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v121 + 48))(v121, (uint64_t *)v38 + 3));
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "setObject:forKeyedSubscript:", v48, v39);

        v38 = (uint64_t **)*v38;
      }
      while (v38);
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v110);
    objc_msgSend(v108, "setDurationBySource:", v36);
    objc_msgSend(v108, "setDataCountBySource:", v37);

  }
  v49 = v121;
  if (v121 == v120)
  {
    v50 = 4;
    v49 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_53;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_53:
  v51 = v119;
  if (v119 == v118)
  {
    v52 = 4;
    v51 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_58;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_58:
  v53 = (uint64_t)v115;
  if (!v115)
  {
LABEL_61:
    v117 = (_QWORD *)v53;
    goto LABEL_63;
  }
  if (v115 != v114)
  {
    v53 = (*(uint64_t (**)(void))(*v115 + 16))();
    goto LABEL_61;
  }
  v117 = v116;
  (*(void (**)(uint64_t, _QWORD *))(v114[0] + 24))((uint64_t)v114, v116);
LABEL_63:
  v121 = 0;
  v54 = operator new(0x28uLL);
  *v54 = &off_1E6D05920;
  v55 = (uint64_t)v117;
  if (!v117)
  {
LABEL_66:
    v54[4] = v55;
    goto LABEL_68;
  }
  if (v117 != v116)
  {
    v55 = (*(uint64_t (**)(void))(*v117 + 16))();
    goto LABEL_66;
  }
  v54[4] = v54 + 1;
  (*(void (**)(_QWORD *))(v116[0] + 24))(v116);
LABEL_68:
  v121 = v54;
  v109 = v108;
  v56 = *(_QWORD *)(a1 + 24);
  v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v110, v106);
  if (!v121)
    std::__throw_bad_function_call[abi:ne180100]();
  v58 = (double *)(*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v121 + 48))(v121, v110, v57);
  v60 = v58[5];
  v59 = v58[6];
  v61 = v58[7];
  v62 = *((_QWORD *)v58 + 8);
  v64 = v58[9];
  v63 = v58[10];
  v65 = v58[11];
  if (__p)
  {
    v113 = __p;
    operator delete(__p);
  }
  v66 = *(_QWORD *)(a1 + 24);
  v67 = _HKStatisticsOptionBaselineRelativeQuantities();
  v68 = *(void **)(a1 + 16);
  if ((v67 & v66) != 0)
    objc_msgSend(v68, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v68, "canonicalUnit");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v56 & 2) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, v60);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v109, "setAverageQuantity:", v70);

  }
  if ((v56 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, v61);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v109, "setMinimumQuantity:", v71);

  }
  if ((v56 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, v59);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v109, "setMaximumQuantity:", v72);

  }
  if ((v56 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, v64);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v109, "setMostRecentQuantity:", v73);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v63, v65);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v109, "setMostRecentQuantityDateInterval:", v74);

  }
  objc_msgSend(v109, "setDataCount:", v62);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_118;
  if ((v56 & 2) != 0)
  {
    v9 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    if ((v56 & 4) == 0)
      goto LABEL_85;
LABEL_87:
    v105 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    goto LABEL_88;
  }
  v9 = 0;
  if ((v56 & 4) != 0)
    goto LABEL_87;
LABEL_85:
  v105 = 0;
LABEL_88:
  if ((v56 & 8) != 0)
    v104 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v104 = 0;
  if ((v56 & 0x20) != 0)
  {
    v76 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v75 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v75 = 0;
    v76 = 0;
  }
  v77 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v110, v106);
  for (i = v111; i; i = (uint64_t **)*i)
  {
    v79 = i[2];
    if ((v56 & 2) != 0)
    {
      if (!v121)
        goto LABEL_149;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v121 + 48))(v121, (uint64_t *)i + 3) + 40));
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v80, v79);

    }
    if ((v56 & 4) != 0)
    {
      if (!v121)
        goto LABEL_149;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v121 + 48))(v121, (uint64_t *)i + 3) + 56));
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v105, "setObject:forKeyedSubscript:", v81, v79);

    }
    if ((v56 & 8) != 0)
    {
      if (!v121)
        goto LABEL_149;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v121 + 48))(v121, (uint64_t *)i + 3) + 48));
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v104, "setObject:forKeyedSubscript:", v82, v79);

    }
    if ((v56 & 0x20) != 0)
    {
      if (!v121)
        std::__throw_bad_function_call[abi:ne180100]();
      v83 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v121 + 48))(v121, (uint64_t *)i + 3);
      v84 = *(double *)(v83 + 80);
      v85 = *(double *)(v83 + 88);
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v69, *(double *)(v83 + 72));
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v86, v79);

      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v84, v85);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "setObject:forKeyedSubscript:", v87, v79);

    }
    if (!v121)
LABEL_149:
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v121 + 48))(v121, (uint64_t *)i + 3) + 64));
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v77, "setObject:forKeyedSubscript:", v88, v79);

  }
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v110);
  if ((v56 & 2) != 0)
    objc_msgSend(v109, "setAverageQuantityBySource:", v9);
  if ((v56 & 4) != 0)
    objc_msgSend(v109, "setMinimumQuantityBySource:", v105);
  if ((v56 & 8) != 0)
    objc_msgSend(v109, "setMaximumQuantityBySource:", v104);
  if ((v56 & 0x20) != 0)
  {
    objc_msgSend(v109, "setMostRecentQuantityBySource:", v76);
    objc_msgSend(v109, "setMostRecentQuantityDateIntervalBySource:", v75);
  }
  objc_msgSend(v109, "setDataCountBySource:", v77);

LABEL_118:
  v89 = v121;
  if (v121 == v120)
  {
    v90 = 4;
    v89 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_123;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_123:
  v91 = v117;
  if (v117 == v116)
  {
    v92 = 4;
    v91 = v116;
  }
  else
  {
    if (!v117)
      goto LABEL_128;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_128:

  v93 = v115;
  if (v115 == v114)
  {
    v94 = 4;
    v93 = v114;
    goto LABEL_132;
  }
  if (v115)
  {
    v94 = 5;
LABEL_132:
    (*(void (**)(void))(*v93 + 8 * v94))();
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v109, "averageQuantity");
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  if (v96)
  {
    objc_msgSend(v109, "averageQuantity");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v69, "isCompatibleWithUnit:", v95) & 1) == 0)
    {

LABEL_147:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v95, v103);
      goto LABEL_148;
    }
  }
  objc_msgSend(v109, "minimumQuantity");
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  if (v97)
  {
    objc_msgSend(v109, "minimumQuantity");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v9, "isCompatibleWithUnit:", v95))
    {
      v98 = 1;
      goto LABEL_141;
    }
  }
  objc_msgSend(v109, "maximumQuantity");
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  if (v99)
  {
    objc_msgSend(v109, "maximumQuantity");
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    v101 = objc_msgSend(v100, "isCompatibleWithUnit:", v95);

    v98 = v101 ^ 1;
    if (v97)
      goto LABEL_141;
  }
  else
  {
    v98 = 0;
    if (v97)
    {
LABEL_141:

      if (v96)
        goto LABEL_142;
      goto LABEL_146;
    }
  }
  if (v96)
  {
LABEL_142:

    if ((v98 & 1) == 0)
      goto LABEL_148;
    goto LABEL_147;
  }
LABEL_146:

  if (v98)
    goto LABEL_147;
LABEL_148:

  return v109;
}

void sub_1B7CAF7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, _Unwind_Exception *exception_object, void *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char *a44)
{
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;

  v48 = *(_QWORD **)(v47 - 152);
  if (v48 == (_QWORD *)(v47 - 176))
  {
    v49 = 4;
    v48 = (_QWORD *)(v47 - 176);
  }
  else
  {
    if (!v48)
      goto LABEL_6;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_6:
  v50 = *(_QWORD **)(v47 - 216);
  if (v50 == (_QWORD *)(v47 - 240))
  {
    v51 = 4;
    v50 = (_QWORD *)(v47 - 240);
  }
  else
  {
    if (!v50)
      goto LABEL_11;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_11:

  v52 = a44;
  if (a44 == &a41)
  {
    v53 = 4;
    v52 = &a41;
  }
  else
  {
    if (!a44)
      goto LABEL_16;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_16:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 368);
  v2 = *(_QWORD *)(a1 + 384);
  if (v1 != (*(_QWORD *)(a1 + 392) - v2) >> 3)
  {
    v4 = (void **)(a1 + 384);
    *(_QWORD *)(a1 + 392) = v2;
    std::vector<long long>::reserve((void **)(a1 + 384), v1);
    v5 = *(_QWORD **)(a1 + 360);
    if (v5)
    {
      v6 = *(char **)(a1 + 392);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 400);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 384);
            v6 = *(char **)(a1 + 392);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 384) = v16;
          *(_QWORD *)(a1 + 392) = v9;
          *(_QWORD *)(a1 + 400) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 392) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7CAFD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  _QWORD *v6;
  double *v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  char v16;
  double v17;
  int v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double *j;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  id WeakRetained;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  int v56;
  unint64_t v57;
  uint64_t *v58;
  __int128 v59;
  char *v60;
  unint64_t v61;
  char v62;
  double *v63;
  __int128 v64;
  _OWORD *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  _OWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  double var2;
  double *i;
  int v77;
  int v78;
  unint64_t var3;
  _OWORD *v80;
  __int128 v81;
  __int128 v82;
  char *v83;
  char *v84;
  _OWORD *v85;
  __int128 v86;
  __int128 v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  unint64_t v92;
  uint64_t *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  double v97;
  void *v98;
  void *v99;
  double **v100;
  id *location;
  id v102;
  uint64_t *v103;
  int64_t v104;
  char **v105;
  uint64_t v106;
  HDRawQuantitySample v107;
  __int128 v108;
  __int128 v109;
  __int16 v110;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v105 = (char **)(a1 + 96);
    v103 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    v100 = (double **)(a1 + 248);
    v6 = (_QWORD *)(a1 + 328);
    do
    {
      v7 = *(double **)(a1 + 96);
      v8 = *(__int128 **)(a1 + 104);
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          v30 = a2;
          v31 = a2;
          v32 = v5;
          v33 = *(_QWORD *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              v34 = *(double *)(v33 + 8);
              v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31)
                v31 = *(double *)(v33 + 8);
              if (v35 > v5)
                v37 = *(double *)(v33 + 16);
              else
                v37 = v30;
              if (v35 < v30)
              {
                v32 = v5;
                v30 = v37;
              }
              v33 += 48;
            }
            while ((__int128 *)v33 != v8);
          }
          if (v30 >= v31)
            v38 = v31;
          else
            v38 = v30;
          v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            v40 = v39 * floor(v38 / v39);
            v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41)
              v38 = v40;
            else
              v38 = v41;
          }
          *v105 = 0;
          v105[1] = 0;
          v105[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            v45 = *(char **)(a1 + 96);
            v44 = *(char **)(a1 + 104);
            v46 = v42;
            if (v44 != v45)
            {
              do
              {
                v47 = *((_OWORD *)v44 - 3);
                v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              v44 = *v105;
            }
            *(_QWORD *)(a1 + 96) = v46;
            *(_QWORD *)(a1 + 104) = v42;
            *(_QWORD *)(a1 + 112) = &v42[48 * v43];
            if (v44)
              operator delete(v44);
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v107.var0 = a1;
            v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8)
              v51 = 0;
            else
              v51 = v50;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>((uint64_t)v7, v8, (uint64_t)&v107, v51, 1);
          }
          else
          {
            v61 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8)
              v51 = 0;
            else
              v51 = v61;
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>((uint64_t)v7, v8, v51, 1);
          if (*(_BYTE *)(a1 + 25))
            v102 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v102 = 0;
          if (v7 == (double *)v8)
          {
LABEL_143:
            *(double *)(a1 + 272) = HKIntervalMask<double>::removeIntervalsBefore(v100, v38) + *(double *)(a1 + 272);
            v94 = *(_QWORD **)(a1 + 320);
            if (v94 != v6)
            {
              do
              {
                *((double *)v94 + 24) = HKIntervalMask<double>::removeIntervalsBefore((double **)v94 + 21, v38)
                                      + *((double *)v94 + 24);
                v95 = (_QWORD *)v94[1];
                if (v95)
                {
                  do
                  {
                    v96 = v95;
                    v95 = (_QWORD *)*v95;
                  }
                  while (v95);
                }
                else
                {
                  do
                  {
                    v96 = (_QWORD *)v94[2];
                    v54 = *v96 == (_QWORD)v94;
                    v94 = v96;
                  }
                  while (!v54);
                }
                v94 = v96;
              }
              while (v96 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7)
              operator delete(v7);
            goto LABEL_155;
          }
          v104 = 0;
          v62 = 0;
          v63 = v7;
          while (2)
          {
            v64 = *((_OWORD *)v63 + 1);
            *(_OWORD *)&v107.var0 = *(_OWORD *)v63;
            *(_OWORD *)&v107.var2 = v64;
            *(double *)&v107.var4 = v63[4];
            if (!v107.var4 || v107.var1 > v38)
            {
              v65 = *(_OWORD **)(a1 + 104);
              v66 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v65 >= v66)
              {
                v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - *v105) >> 4);
                v71 = v70 + 1;
                if (v70 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (_QWORD)*v105) >> 4);
                if (2 * v72 > v71)
                  v71 = 2 * v72;
                if (v72 >= 0x2AAAAAAAAAAAAAALL)
                  v73 = 0x555555555555555;
                else
                  v73 = v71;
                if (v73)
                  v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v73);
                else
                  v74 = 0;
                v80 = (_OWORD *)(v73 + 48 * v70);
                v81 = *(_OWORD *)v63;
                v82 = *((_OWORD *)v63 + 2);
                v80[1] = *((_OWORD *)v63 + 1);
                v80[2] = v82;
                *v80 = v81;
                v84 = *(char **)(a1 + 96);
                v83 = *(char **)(a1 + 104);
                v85 = v80;
                if (v83 != v84)
                {
                  do
                  {
                    v86 = *((_OWORD *)v83 - 3);
                    v87 = *((_OWORD *)v83 - 2);
                    *(_OWORD *)((char *)v85 - 21) = *(_OWORD *)(v83 - 21);
                    *(v85 - 3) = v86;
                    *(v85 - 2) = v87;
                    v85 -= 3;
                    v83 -= 48;
                  }
                  while (v83 != v84);
                  v83 = *v105;
                }
                v69 = v80 + 3;
                *(_QWORD *)(a1 + 96) = v85;
                *(_QWORD *)(a1 + 104) = v80 + 3;
                *(_QWORD *)(a1 + 112) = v73 + 48 * v74;
                if (v83)
                  operator delete(v83);
              }
              else
              {
                v67 = *(_OWORD *)v63;
                v68 = *((_OWORD *)v63 + 2);
                v65[1] = *((_OWORD *)v63 + 1);
                v65[2] = v68;
                *v65 = v67;
                v69 = v65 + 3;
              }
              *(_QWORD *)(a1 + 104) = v69;
LABEL_142:
              v63 += 6;
              if (v63 == (double *)v8)
                goto LABEL_143;
              continue;
            }
            break;
          }
          var2 = v107.var2;
          if (v107.var2 > v38)
            var2 = v38;
          v107.var2 = var2;
          for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v107.var1 >= *i; i += 2)
          {
            if (v107.var1 < i[1])
              goto LABEL_142;
          }
          v77 = *((unsigned __int8 *)v63 + 42);
          v78 = *((unsigned __int8 *)v63 + 41);
          if ((v62 & 1) != 0)
          {
            var3 = v107.var3;
            if (v104 == v107.var3 || *(_BYTE *)(a1 + 24))
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v103, &v107, v77 == 0);
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v103, &v107, v77 == 0);
            var3 = v107.var3;
            v104 = v107.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_141;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
          v88 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v88)
            goto LABEL_140;
          objc_msgSend(v102, "objectForKeyedSubscript:", v88);
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          v90 = v89;
          if (v89)
          {
            if (objc_msgSend(v89, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_139:

LABEL_140:
LABEL_141:
              v62 = 1;
              goto LABEL_142;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v91 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v102, "setObject:forKeyedSubscript:", v91, v88);

          }
          v92 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
          v93 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v92);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v93, &v107, v78 == 0);
          goto LABEL_139;
        }
        v10 = *((unsigned __int8 *)v7 + 42);
        v11 = *((unsigned __int8 *)v7 + 41);
        v12 = *((unsigned __int8 *)v7 + 40);
        v13 = v7[1];
        v14 = v7[2];
        v15 = *((_QWORD *)v7 + 3);
        v16 = *((_BYTE *)v7 + 33);
        if (v14 <= a2)
          v17 = v7[2];
        else
          v17 = a2;
        if (v13 < a2)
          v18 = *((unsigned __int8 *)v7 + 32);
        else
          v18 = 0;
        if (v13 < a2)
          v19 = 0;
        else
          v19 = *((_BYTE *)v7 + 33);
        if (v13 < a2)
        {
          v20 = 0;
        }
        else
        {
          v17 = v7[2];
          v20 = *((_QWORD *)v7 + 3);
        }
        if (v13 < a2)
          v21 = 0.0;
        else
          v21 = v7[2];
        if (v13 < a2)
          v22 = 0.0;
        else
          v22 = *v7;
        if (v13 < a2)
          v23 = 0.0;
        else
          v23 = v7[1];
        if (v13 < a2)
          v24 = 0;
        else
          v24 = *((unsigned __int8 *)v7 + 32);
        if (*((_BYTE *)v7 + 32))
        {
          v14 = v17;
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
        }
        if (*((_BYTE *)v7 + 32))
          v25 = v21;
        else
          v25 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v26 = v22;
        else
          v26 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v27 = v23;
        else
          v27 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v28 = v24;
        else
          v28 = 0;
        v107.var0 = *v7;
        v107.var1 = v13;
        v107.var2 = v14;
        v107.var3 = v15;
        v107.var4 = v18;
        v107.var5 = v16;
        *(_DWORD *)(&v107.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v107.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&v108 = v26;
        *((double *)&v108 + 1) = v27;
        *(double *)&v109 = v25;
        *((_QWORD *)&v109 + 1) = v20;
        LOBYTE(v110) = v28;
        HIBYTE(v110) = v19;
        for (j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            v52 = v12 != 0;
            v53 = v11 != 0;
            v55 = v10 != 0;
            if (!v28)
              goto LABEL_153;
LABEL_91:
            LOWORD(v106) = v110;
            v59 = v109;
            v60 = *v105;
            *(_OWORD *)v60 = v108;
            *((_OWORD *)v60 + 1) = v59;
            *((_QWORD *)v60 + 4) = v106;
            v60[40] = v52;
            v60[41] = v53;
            v60[42] = v55;
            goto LABEL_154;
          }
        }
        v52 = v12 != 0;
        v53 = v11 != 0;
        v54 = v10 == 0;
        v55 = v10 != 0;
        if (v18)
        {
          v56 = v54;
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v103, &v107, v56);
          if (*(_BYTE *)(a1 + 25))
          {
            v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v15);
            v58 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v57);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v58, &v107, v11 == 0);
          }
          v52 = 1;
          v53 = 1;
          v55 = 1;
        }
        if (v28)
          goto LABEL_91;
LABEL_153:
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
      }
LABEL_154:
      *(double *)(a1 + 56) = a2;
LABEL_155:
      v97 = *(double *)(a1 + 56);
      if (v97 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>, HDStatisticsTimeInterval>>]");
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "handleFailureInFunction:file:lineNumber:description:", v99, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v97 = *(double *)(a1 + 56);
      }
      v5 = v97;
    }
    while (v97 < a2);
  }
}

void sub_1B7CB0568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  int v8;
  void *v9;
  _OWORD *v10;
  int v11;
  __int128 v12;

  v5 = result;
  v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v6 = 1;
  if (v6)
  {
    if (v6 == 1)
    {
      if (!*(_DWORD *)result)
      {
        v8 = 1;
        goto LABEL_15;
      }
    }
    else if (v6 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)(result + 1), &a2->var0);
        return HDStatisticsTimeInterval::addSample(v5 + 15, a2, 1);
      }
      v8 = 2;
LABEL_15:
      *(_DWORD *)result = v8;
      *(_OWORD *)(result + 1) = xmmword_1B7F54AF0;
      result[15] = 0;
      v10 = result + 16;
      v9 = (void *)result[16];
      *(_OWORD *)(v5 + 3) = 0u;
      *(_OWORD *)(v5 + 5) = 0u;
      *(_OWORD *)(v5 + 7) = 0u;
      *(_OWORD *)(v5 + 9) = 0u;
      *(_OWORD *)(v5 + 11) = 0u;
      *(_OWORD *)(v5 + 13) = 0u;
      if (v9)
      {
        v5[17] = (uint64_t)v9;
        operator delete(v9);
        v11 = *((unsigned __int8 *)v5 + 112);
        *v10 = 0u;
        *((_OWORD *)v5 + 9) = 0u;
        if (v11 && *((double *)v5 + 11) > *((double *)v5 + 21))
          goto LABEL_21;
      }
      else
      {
        *v10 = 0uLL;
        *((_OWORD *)v5 + 9) = 0uLL;
      }
      v12 = *((_OWORD *)v5 + 11);
      *((_OWORD *)v5 + 5) = *((_OWORD *)v5 + 10);
      *((_OWORD *)v5 + 6) = v12;
      *((_WORD *)v5 + 56) = *((_WORD *)v5 + 96);
LABEL_21:
      HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)(v5 + 1), &a2->var0);
      v7 = v5 + 15;
      return HDStatisticsTimeInterval::addSample(v7, a2, a3);
    }
  }
  else if (!*(_DWORD *)result && !result[9])
  {
    HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)(result + 1), &a2->var0);
    v7 = v5 + 15;
    return HDStatisticsTimeInterval::addSample(v7, a2, a3);
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 328);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 328);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 328) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 320);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 320), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 408), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 448);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7CB08B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 488);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7CB0984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(uint64_t a1, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double result;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(double *)(a1 + 8);
    v4 = v3 + floor((a2[1] - v3) / 60.0) * 60.0;
    if (v4 == v3)
    {
      v10 = *(double *)(a1 + 32);
      v7 = *(double *)a1;
      v6 = *(_QWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24) + 1;
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 16);
      if (v5)
      {
        v6 = v5 + 1;
        v7 = *(double *)a1 + (*(double *)(a1 + 32) - *(double *)a1) / (double)v6;
      }
      else
      {
        v7 = *(double *)(a1 + 32);
        v6 = 1;
      }
      *(double *)a1 = v7;
      *(double *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v10 = 0.0;
      v11 = 1;
      *(_QWORD *)(a1 + 16) = v6;
    }
    v12 = *a2;
    v13 = *(double *)(a1 + 48);
    if (*(double *)(a1 + 56) < *a2)
      v12 = *(double *)(a1 + 56);
    *(double *)(a1 + 56) = v12;
    v14 = *a2;
    if (*a2 >= v13)
      v15 = *a2;
    else
      v15 = v13;
    *(_QWORD *)(a1 + 64) = v2 + 1;
    v16 = v10 + (v14 - v10) / (double)v11;
    *(_QWORD *)(a1 + 24) = v11;
    result = v7 + (v16 - v7) / (double)(v6 + 1);
    *(double *)(a1 + 32) = v16;
    *(double *)(a1 + 40) = result;
    *(double *)(a1 + 48) = v15;
  }
  else
  {
    v8 = *a2;
    *(double *)(a1 + 32) = *a2;
    *(double *)(a1 + 40) = v8;
    *(double *)(a1 + 48) = v8;
    *(double *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = 1;
    *(_QWORD *)a1 = 0;
    *(_OWORD *)(a1 + 16) = xmmword_1B7F54B00;
    result = *(double *)(a1 + 8);
    if (result == -1.79769313e308)
    {
      result = a2[1];
      *(double *)(a1 + 8) = result;
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0xF0uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *((_QWORD *)v9 + 29) = 0;
    *((_QWORD *)v9 + 7) = 0xFFEFFFFFFFFFFFFFLL;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 5) = 0u;
    *((_OWORD *)v9 + 6) = 0u;
    *((_OWORD *)v9 + 7) = 0u;
    *((_OWORD *)v9 + 8) = 0u;
    *(_OWORD *)(v9 + 138) = 0u;
    *(_OWORD *)(v9 + 218) = 0u;
    *((_OWORD *)v9 + 12) = 0u;
    *((_OWORD *)v9 + 13) = 0u;
    *((_OWORD *)v9 + 10) = 0u;
    *((_OWORD *)v9 + 11) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 384);
  v7 = *(char **)(*(_QWORD *)a4 + 392);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 384);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 384);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 392);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 384);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 392);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 384);
      v15 = *(char **)(*(_QWORD *)a4 + 392);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 392);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 392);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 384);
          v25 = *(char **)(*(_QWORD *)a4 + 392);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 392);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 392);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 384);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 384);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 392);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 384);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 392);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 384);
      v41 = *(char **)(*(_QWORD *)a4 + 392);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 392);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 392);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 384);
      v11 = *(char **)(*(_QWORD *)a3 + 392);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 392);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 392);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 384);
      v24 = *(char **)(*(_QWORD *)a3 + 392);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 392);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 392);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 384);
            v31 = *(char **)(*(_QWORD *)a3 + 392);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 392);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 392);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 384);
    v14 = *(char **)(*(_QWORD *)a5 + 392);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 392);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 392);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 384);
        v23 = *(char **)(*(_QWORD *)a5 + 392);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 392);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 392);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 384);
            v32 = *(char **)(*(_QWORD *)a5 + 392);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 392);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 392);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 384);
    v16 = *(char **)(*(_QWORD *)a6 + 392);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 392);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 392);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 384);
        v25 = *(char **)(*(_QWORD *)a6 + 392);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 392);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 392);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 384);
            v34 = *(char **)(*(_QWORD *)a6 + 392);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 392);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 392);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 384);
                v43 = *(char **)(*(_QWORD *)a6 + 392);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 392);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 392);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  __n128 result;
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[32];
  _BYTE v21[32];
  _BYTE v22[32];
  _BYTE v23[24];

  result.n128_u64[0] = *((_QWORD *)a2 + 1);
  v4 = *((double *)a3 + 1);
  if (result.n128_f64[0] >= *((double *)a1 + 1))
  {
    if (v4 < result.n128_f64[0])
    {
      v9 = *a2;
      *(_OWORD *)v20 = a2[1];
      *(_OWORD *)&v20[16] = a2[2];
      v10 = *(__int128 *)((char *)a3 + 27);
      v11 = a3[1];
      *a2 = *a3;
      a2[1] = v11;
      *(__int128 *)((char *)a2 + 27) = v10;
      *a3 = v9;
      a3[1] = *(_OWORD *)v20;
      result.n128_u64[1] = *(_QWORD *)&v20[19];
      *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v20[11];
      result.n128_u64[0] = *((_QWORD *)a2 + 1);
      if (result.n128_f64[0] < *((double *)a1 + 1))
      {
        v12 = *a1;
        *(_OWORD *)v21 = a1[1];
        *(_OWORD *)&v21[16] = a1[2];
        v13 = *(__int128 *)((char *)a2 + 27);
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        *(__int128 *)((char *)a1 + 27) = v13;
        *a2 = v12;
        a2[1] = *(_OWORD *)v21;
        result = *(__n128 *)&v21[11];
        *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v21[11];
      }
    }
  }
  else
  {
    if (v4 >= result.n128_f64[0])
    {
      v15 = *a1;
      *(_OWORD *)v22 = a1[1];
      *(_OWORD *)&v22[16] = a1[2];
      v16 = *(__int128 *)((char *)a2 + 27);
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      *(__int128 *)((char *)a1 + 27) = v16;
      *a2 = v15;
      a2[1] = *(_OWORD *)v22;
      result.n128_u64[1] = *(_QWORD *)&v22[19];
      *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v22[11];
      result.n128_u64[0] = *((_QWORD *)a3 + 1);
      if (result.n128_f64[0] >= *((double *)a2 + 1))
        return result;
      v5 = a2[1];
      v6 = *a2;
      *(_QWORD *)v23 = *((_QWORD *)&v5 + 1);
      *(_OWORD *)&v23[8] = a2[2];
      v18 = *(__int128 *)((char *)a3 + 27);
      v19 = a3[1];
      *a2 = *a3;
      a2[1] = v19;
      *(__int128 *)((char *)a2 + 27) = v18;
    }
    else
    {
      v5 = a1[1];
      v6 = *a1;
      *(_QWORD *)v23 = *((_QWORD *)&v5 + 1);
      *(_OWORD *)&v23[8] = a1[2];
      v7 = *(__int128 *)((char *)a3 + 27);
      v8 = a3[1];
      *a1 = *a3;
      a1[1] = v8;
      *(__int128 *)((char *)a1 + 27) = v7;
    }
    *a3 = v6;
    a3[1] = v5;
    result = *(__n128 *)&v23[3];
    *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v23[3];
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[32];
  _BYTE v19[32];
  _BYTE v20[32];

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  result.n128_u64[0] = *(_QWORD *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    v9 = *(_OWORD *)a3;
    *(_OWORD *)v18 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v18[16] = *(_OWORD *)(a3 + 32);
    v10 = *(_OWORD *)(a4 + 27);
    v11 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 27) = v10;
    *(_OWORD *)a4 = v9;
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v18;
    result.n128_u64[1] = *(_QWORD *)&v18[19];
    *(_OWORD *)(a4 + 27) = *(_OWORD *)&v18[11];
    result.n128_u64[0] = *(_QWORD *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      v12 = *(_OWORD *)a2;
      *(_OWORD *)v19 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(a2 + 32);
      v13 = *(_OWORD *)(a3 + 27);
      v14 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 27) = v13;
      *(_OWORD *)a3 = v12;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v19;
      result.n128_u64[1] = *(_QWORD *)&v19[19];
      *(_OWORD *)(a3 + 27) = *(_OWORD *)&v19[11];
      result.n128_u64[0] = *(_QWORD *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 + 27);
        v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *(_OWORD *)a2 = v15;
        *(_OWORD *)(a2 + 16) = *(_OWORD *)v20;
        result = *(__n128 *)&v20[11];
        *(_OWORD *)(a2 + 27) = *(_OWORD *)&v20[11];
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  _BYTE v24[32];
  _BYTE v25[32];
  _BYTE v26[32];

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a2, a3, a4);
  result.n128_u64[0] = *(_QWORD *)(a5 + 8);
  if (result.n128_f64[0] < *(double *)(a4 + 8))
  {
    v11 = *(_OWORD *)a4;
    *(_OWORD *)v23 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v23[16] = *(_OWORD *)(a4 + 32);
    v12 = *(_OWORD *)(a5 + 27);
    v13 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v13;
    *(_OWORD *)(a4 + 27) = v12;
    *(_OWORD *)a5 = v11;
    *(_OWORD *)(a5 + 16) = *(_OWORD *)v23;
    result.n128_u64[1] = *(_QWORD *)&v23[19];
    *(_OWORD *)(a5 + 27) = *(_OWORD *)&v23[11];
    result.n128_u64[0] = *(_QWORD *)(a4 + 8);
    if (result.n128_f64[0] < *(double *)(a3 + 8))
    {
      v14 = *(_OWORD *)a3;
      *(_OWORD *)v24 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v24[16] = *(_OWORD *)(a3 + 32);
      v15 = *(_OWORD *)(a4 + 27);
      v16 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v16;
      *(_OWORD *)(a3 + 27) = v15;
      *(_OWORD *)a4 = v14;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v24;
      result.n128_u64[1] = *(_QWORD *)&v24[19];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v24[11];
      result.n128_u64[0] = *(_QWORD *)(a3 + 8);
      if (result.n128_f64[0] < *(double *)(a2 + 8))
      {
        v17 = *(_OWORD *)a2;
        *(_OWORD *)v25 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
        v18 = *(_OWORD *)(a3 + 27);
        v19 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v19;
        *(_OWORD *)(a2 + 27) = v18;
        *(_OWORD *)a3 = v17;
        *(_OWORD *)(a3 + 16) = *(_OWORD *)v25;
        result.n128_u64[1] = *(_QWORD *)&v25[19];
        *(_OWORD *)(a3 + 27) = *(_OWORD *)&v25[11];
        result.n128_u64[0] = *(_QWORD *)(a2 + 8);
        if (result.n128_f64[0] < *(double *)(a1 + 8))
        {
          v20 = *(_OWORD *)a1;
          *(_OWORD *)v26 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v26[16] = *(_OWORD *)(a1 + 32);
          v21 = *(_OWORD *)(a2 + 27);
          v22 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v22;
          *(_OWORD *)(a1 + 27) = v21;
          *(_OWORD *)a2 = v20;
          *(_OWORD *)(a2 + 16) = *(_OWORD *)v26;
          result = *(__n128 *)&v26[11];
          *(_OWORD *)(a2 + 27) = *(_OWORD *)&v26[11];
        }
      }
    }
  }
  return result;
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;

  v2 = a2 + 120;
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 160);
  v4 = *(_QWORD *)(a2 + 240);
  v3 = *(const void **)(a2 + 248);
  *(_QWORD *)(a1 + 120) = v4;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v5 = a1 + 128;
  v6 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 128), v3, v6, (v6 - (uint64_t)v3) >> 4);
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(v2 + 152);
  result = *(__n128 *)(v2 + 160);
  v8 = *(_OWORD *)(v2 + 176);
  *(__n128 *)(v5 + 32) = result;
  *(_OWORD *)(v5 + 48) = v8;
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(v2 + 192);
  return result;
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  BOOL v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v52;
  unint64_t v53;
  _QWORD v54[2];
  char v55;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 320);
  v50 = (_QWORD *)(a2 + 328);
  if (v3 == (_QWORD *)(a2 + 328))
    return;
  v52 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_81;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v53 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0xE0uLL);
      v54[0] = v19;
      v54[1] = v52;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *(_OWORD *)(v19 + 184) = 0u;
      *(_OWORD *)(v19 + 200) = 0u;
      *((_QWORD *)v19 + 27) = 0;
      *((_QWORD *)v19 + 5) = 0xFFEFFFFFFFFFFFFFLL;
      *((_OWORD *)v19 + 3) = 0u;
      *((_OWORD *)v19 + 4) = 0u;
      *((_OWORD *)v19 + 5) = 0u;
      *((_OWORD *)v19 + 6) = 0u;
      *((_OWORD *)v19 + 7) = 0u;
      *(_OWORD *)(v19 + 122) = 0u;
      *(_OWORD *)(v19 + 202) = 0u;
      *((_OWORD *)v19 + 11) = 0u;
      *((_OWORD *)v19 + 12) = 0u;
      *((_OWORD *)v19 + 9) = 0u;
      *((_OWORD *)v19 + 10) = 0u;
      v55 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_68:
        v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        v12 = (uint64_t *)v54[0];
        if (v37)
        {
          *(_QWORD *)v54[0] = *v37;
        }
        else
        {
          *(_QWORD *)v54[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v52;
          if (!*v12)
          {
LABEL_77:
            v54[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v54);
            goto LABEL_78;
          }
          v38 = *(_QWORD *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_77;
      }
      v22 = v9 < 3 || (v9 & (v9 - 1)) != 0;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_34;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_34:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v52;
            if (*v52)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v52;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_59;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_59:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_63;
          }
          v49 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v49)
            operator delete(v49);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_63:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_68;
    }
    while (1)
    {
      v13 = v12[1];
      if (v13 == v8)
        break;
      if (v53 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = (id)v12[2];
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_78;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_78:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    v39 = *((_OWORD *)v3 + 3);
    v40 = *((_OWORD *)v3 + 5);
    *((_OWORD *)v12 + 3) = *((_OWORD *)v3 + 4);
    *((_OWORD *)v12 + 4) = v40;
    *((_OWORD *)v12 + 2) = v39;
    v41 = *((_OWORD *)v3 + 6);
    v42 = *((_OWORD *)v3 + 7);
    v43 = *((_OWORD *)v3 + 9);
    *((_OWORD *)v12 + 7) = *((_OWORD *)v3 + 8);
    *((_OWORD *)v12 + 8) = v43;
    *((_OWORD *)v12 + 5) = v41;
    *((_OWORD *)v12 + 6) = v42;
    v12[18] = v3[20];
    if (v12 + 2 != v3 + 4)
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 152, (char *)v3[21], v3[22], (uint64_t)(v3[22] - v3[21]) >> 4);
    v12[22] = v3[24];
    v44 = *(_OWORD *)(v3 + 25);
    v45 = *(_OWORD *)(v3 + 27);
    *((_WORD *)v12 + 108) = *((_WORD *)v3 + 116);
    *(_OWORD *)(v12 + 25) = v45;
    *(_OWORD *)(v12 + 23) = v44;

LABEL_81:
    v46 = (_QWORD *)v3[1];
    if (v46)
    {
      do
      {
        v47 = v46;
        v46 = (_QWORD *)*v46;
      }
      while (v46);
    }
    else
    {
      do
      {
        v47 = (_QWORD *)v3[2];
        v48 = *v47 == (_QWORD)v3;
        v3 = v47;
      }
      while (!v48);
    }
    v3 = v47;
  }
  while (v47 != v50);
}

void sub_1B7CB3D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D05890;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D05890;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D05890;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7CB3F90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D05890;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 112;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D05920;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D05920;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D05920;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7CB41C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D05920;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D059B0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D059B0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 680))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 680))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7CB44C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 656);
      v7 = *(_QWORD *)(a1 + 648);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7CB46C8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  char v10;
  double v11;
  _BOOL4 v12;
  double v14;
  char *v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  uint64_t **v48;

  v3 = *(_BYTE *)(a2 + 32);
  if (!v3)
    return;
  v5 = a1 + 8;
  v6 = *(double *)(a2 + 8);
  if (v6 < *(double *)(a1 + 8))
    return;
  v7 = *(uint64_t **)a2;
  v8 = *(double *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 33);
  v11 = *(double *)(a1 + 16);
  if (*(_DWORD *)(a1 + 36))
    v12 = v6 < v11;
  else
    v12 = v6 <= v11;
  if (v12)
  {
    if (v8 <= v11)
      v14 = *(double *)(a2 + 16);
    else
      v14 = *(double *)(a1 + 16);
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 352, *(_QWORD *)(a2 + 24), v9);
    v15 = *(char **)(a1 + 112);
    if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 200) <= 0)
    {
      v33 = *(double *)(a1 + 8);
      v34 = *(double *)(a1 + 16);
      if (v6 >= v33)
        v33 = v6;
      if (v34 >= v14)
        v34 = v14;
      *(double *)(a1 + 48) = v33;
      *(double *)(a1 + 56) = v34;
      if (!a3)
        goto LABEL_47;
    }
    else
    {
      if (v6 < *(double *)(a1 + 48))
      {
        v16 = *(double *)(a1 + 8);
        if (v6 >= v16)
          v16 = v6;
        *(double *)(a1 + 48) = v16;
      }
      if (v14 > *(double *)(a1 + 56))
      {
        v17 = *(double *)(a1 + 16);
        if (v17 >= v14)
          v17 = v14;
        *(double *)(a1 + 56) = v17;
      }
      if (!a3)
        goto LABEL_47;
    }
    if (v6 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v6);
      v15 = *(char **)(a1 + 112);
    }
LABEL_47:
    v35 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v15 >= v35)
    {
      v37 = 0x555555555555555;
      v38 = *(char **)(a1 + 104);
      v39 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v38) >> 4);
      v40 = v39 + 1;
      if (v39 + 1 > 0x555555555555555)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v38) >> 4);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 < 0x2AAAAAAAAAAAAAALL)
        v37 = v40;
      if (v37)
      {
        v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v37);
        v38 = *(char **)(a1 + 104);
        v15 = *(char **)(a1 + 112);
      }
      else
      {
        v42 = 0;
      }
      v43 = v37 + 48 * v39;
      *(_QWORD *)v43 = v7;
      *(double *)(v43 + 8) = v6;
      *(double *)(v43 + 16) = v14;
      *(_QWORD *)(v43 + 24) = v9;
      v44 = v37 + 48 * v42;
      *(_BYTE *)(v43 + 32) = v3;
      *(_BYTE *)(v43 + 33) = v10;
      *(_WORD *)(v43 + 40) = 0;
      *(_BYTE *)(v43 + 42) = 0;
      v36 = (_QWORD *)(v43 + 48);
      if (v15 != v38)
      {
        do
        {
          v45 = *((_OWORD *)v15 - 3);
          v46 = *((_OWORD *)v15 - 2);
          *(_OWORD *)(v43 - 21) = *(_OWORD *)(v15 - 21);
          *(_OWORD *)(v43 - 48) = v45;
          *(_OWORD *)(v43 - 32) = v46;
          v43 -= 48;
          v15 -= 48;
        }
        while (v15 != v38);
        v38 = *(char **)(a1 + 104);
      }
      *(_QWORD *)(a1 + 104) = v43;
      *(_QWORD *)(a1 + 112) = v36;
      *(_QWORD *)(a1 + 120) = v44;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_QWORD *)v15 = v7;
      *((double *)v15 + 1) = v6;
      *((double *)v15 + 2) = v14;
      *((_QWORD *)v15 + 3) = v9;
      v15[32] = v3;
      v15[33] = v10;
      *((_WORD *)v15 + 20) = 0;
      v36 = v15 + 48;
      v15[42] = 0;
    }
    *(_QWORD *)(a1 + 112) = v36;
    if (!*(_BYTE *)(a1 + 320) || *(double *)(a1 + 296) <= v6)
    {
      *(_QWORD *)(a1 + 288) = v7;
      *(double *)(a1 + 296) = v6;
      *(double *)(a1 + 304) = v8;
      *(_QWORD *)(a1 + 312) = v9;
      *(_BYTE *)(a1 + 320) = v3;
      *(_BYTE *)(a1 + 321) = v10;
      if (!*(_BYTE *)(a1 + 240) || *(double *)(a1 + 216) <= v6)
      {
        *(_QWORD *)(a1 + 208) = v7;
        *(double *)(a1 + 216) = v6;
        *(double *)(a1 + 224) = v8;
        *(_QWORD *)(a1 + 232) = v9;
        *(_BYTE *)(a1 + 240) = v3;
        *(_BYTE *)(a1 + 241) = v10;
      }
    }
    if (*(_BYTE *)(a1 + 33))
    {
      v47 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v9);
      v48 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(v5, v47);
      if (!*((_BYTE *)v48 + 192) || *((double *)v48 + 21) <= v6)
      {
        v48[20] = v7;
        *((double *)v48 + 21) = v6;
        *((double *)v48 + 22) = v8;
        v48[23] = (uint64_t *)v9;
        *((_BYTE *)v48 + 192) = v3;
        *((_BYTE *)v48 + 193) = v10;
        if (!*((_BYTE *)v48 + 112) || *((double *)v48 + 11) <= v6)
        {
          v48[10] = v7;
          *((double *)v48 + 11) = v6;
          *((double *)v48 + 12) = v8;
          v48[13] = (uint64_t *)v9;
          *((_BYTE *)v48 + 112) = v3;
          *((_BYTE *)v48 + 113) = v10;
        }
      }
    }
    return;
  }
  if (v6 < v11)
    v6 = *(double *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 544);
  v19 = *(_QWORD *)(a1 + 552);
  if (v18 >= v19)
  {
    v21 = *(_QWORD *)(a1 + 536);
    v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
    v23 = v22 + 1;
    if (v22 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
    if (2 * v24 > v23)
      v23 = 2 * v24;
    if (v24 >= 0x333333333333333)
      v25 = 0x666666666666666;
    else
      v25 = v23;
    if (v25)
      v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
    else
      v26 = 0;
    v27 = v25 + 40 * v22;
    v28 = v25 + 40 * v26;
    *(_QWORD *)v27 = v7;
    *(double *)(v27 + 8) = v6;
    *(double *)(v27 + 16) = v8;
    *(_QWORD *)(v27 + 24) = v9;
    *(_BYTE *)(v27 + 32) = v3;
    *(_BYTE *)(v27 + 33) = v10;
    v20 = v27 + 40;
    v29 = *(char **)(a1 + 544);
    v30 = *(char **)(a1 + 536);
    if (v29 != v30)
    {
      do
      {
        v31 = *(_OWORD *)(v29 - 40);
        v32 = *(_OWORD *)(v29 - 24);
        *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
        *(_OWORD *)(v27 - 24) = v32;
        *(_OWORD *)(v27 - 40) = v31;
        v27 -= 40;
        v29 -= 40;
      }
      while (v29 != v30);
      v29 = *(char **)(a1 + 536);
    }
    *(_QWORD *)(a1 + 536) = v27;
    *(_QWORD *)(a1 + 544) = v20;
    *(_QWORD *)(a1 + 552) = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *(_QWORD *)v18 = v7;
    *(double *)(v18 + 8) = v6;
    *(double *)(v18 + 16) = v8;
    *(_QWORD *)(v18 + 24) = v9;
    *(_BYTE *)(v18 + 32) = v3;
    v20 = v18 + 40;
    *(_BYTE *)(v18 + 33) = v10;
  }
  *(_QWORD *)(a1 + 544) = v20;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 682))
  {
    *(_BYTE *)(a1 + 684) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 684) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7CB4BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 536), *(_QWORD *)(a1 + 544), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7CB4CC4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  __int128 v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;

  v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 560), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 64);
  *(_DWORD *)(v8 + 88) = 0;
  v9 = 0uLL;
  *(_OWORD *)(v8 + 96) = xmmword_1B7F54AF0;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_QWORD *)(v8 + 208) = 0;
  v10 = *(void **)(v8 + 216);
  if (v10)
  {
    *(_QWORD *)(a1 + 264) = v10;
    operator delete(v10);
    v9 = 0uLL;
  }
  *(_WORD *)(v8 + 280) = 0;
  *(_OWORD *)(v8 + 248) = v9;
  *(_OWORD *)(v8 + 264) = v9;
  *(_OWORD *)(v8 + 216) = v9;
  *(_OWORD *)(v8 + 232) = v9;
  if (*(_QWORD *)(a1 + 344))
  {
    v11 = *(_QWORD **)(a1 + 328);
    v12 = *(_QWORD *)(a1 + 336);
    *(_QWORD *)(a1 + 328) = a1 + 336;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    if (v11[1])
      v13 = (_QWORD *)v11[1];
    else
      v13 = v11;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(v13);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 560));
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a1 + 536);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 684))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 684) = 0;
  }

}

void sub_1B7CB4E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 680))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7CB4F4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 696));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 680) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7CB52B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C4016FCC05CLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7CB545C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7CB56C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  char v18;

  v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v8 = 1;
    v9 = a6;
  }
  v13 = a5;
  v14 = v9;
  v15 = a7;
  v16 = a2;
  v17 = v8;
  v18 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  else
  {
    v11 = v7 <= a6;
    v12 = *(double *)(a1 + 40);
    if (v9 >= v12)
      v11 = 0;
    if (!v11 || a7 <= v12)
      v12 = a7;
    v14 = v9;
    v15 = v12;
    v17 = v11;
    if (v11)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 680))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7CB6350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7CB63F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::archive(uint64_t a1, int8x16_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive((uint64_t)v6, (uint64_t)&a2->i64[1]);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = a2->i32[0];
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(a2[10], a2[10], 8uLL);
  v6[1] = a2[11].i64[0];
  v6[2] = a2[11].i64[1];
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7CB64F8(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive(uint64_t a1, uint64_t a2)
{
  statistics **v4;
  _BYTE v5[208];

  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (statistics **)(a1 + 8);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::archive((uint64_t)v5, a2);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics((_QWORD *)a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(a2 + 112), (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1B7CB65C0(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::archive(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD v8[3];
  int8x16_t v9;
  __int16 v10;
  char v11;
  int v12;

  *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)(a2 + 40), *(int8x16_t *)(a2 + 40), 8uLL);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = v5;
  *(_QWORD *)(a1 + 112) = 0;
  v7 = (uint64_t *)(a1 + 112);
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 204) = 6397;
  *(_QWORD *)(a1 + 40) = v3;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v8[0] = &off_1E6CFF278;
  v12 = 127;
  v9 = vextq_s8(*(int8x16_t *)(a2 + 72), *(int8x16_t *)(a2 + 72), 8uLL);
  v8[1] = *(_QWORD *)(a2 + 88);
  v8[2] = *(_QWORD *)(a2 + 96);
  v10 = 0;
  v11 = 0;
  statistics::RawQuantitySample::operator=(*v7, (uint64_t)v8);
  PB::Base::~Base((PB::Base *)v8);
}

void sub_1B7CB66C8(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[7];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  double v17;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_1B7F54AF0;
  v4 = (_OWORD *)(a1 + 8);
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 98) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 178) = 0u;
  v6 = a2[16];
  if (v6)
  {
    HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive((uint64_t)v13, *(HDStatisticsTimeInterval **)(v6 + 8), *(_QWORD *)(v6 + 128));
    v7 = v13[5];
    v4[4] = v13[4];
    v4[5] = v7;
    v4[6] = v13[6];
    v8 = v13[1];
    *v4 = v13[0];
    v4[1] = v8;
    v9 = v13[3];
    v4[2] = v13[2];
    v4[3] = v9;
    *(_QWORD *)(a1 + 120) = v14;
    result = v17;
    v10 = v16;
    *(_OWORD *)(a1 + 128) = v15;
    *(_QWORD *)(a1 + 144) = v10;
    *(double *)(a1 + 152) = result;
  }
  *(_DWORD *)a1 = a2[17];
  v11 = a2[14];
  if (v11)
  {
    result = *(double *)(v11 + 8);
    v12 = *(_QWORD *)(v11 + 16);
    *(int8x16_t *)(a1 + 160) = vextq_s8(*(int8x16_t *)(v11 + 24), *(int8x16_t *)(v11 + 24), 8uLL);
    *(double *)(a1 + 176) = result;
    *(_QWORD *)(a1 + 184) = v12;
    *(_WORD *)(a1 + 192) = 1;
  }
  return result;
}

double HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, uint64_t a3)
{
  int8x16_t v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v4 = 0uLL;
  *(_OWORD *)a1 = xmmword_1B7F54AF0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 90) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  if (a3)
  {
    v5 = *(_QWORD *)(a3 + 24);
    v6 = *(int8x16_t *)(a3 + 88);
    v7 = *(_QWORD *)(a3 + 104);
    v8 = *(_QWORD *)(a3 + 176);
    v9 = *(_QWORD *)(a3 + 168);
    v10 = *(_QWORD *)(a3 + 48);
    v11 = *(_QWORD *)(a3 + 40);
    v12 = *(_QWORD *)(a3 + 112);
    if (v12)
    {
      v4 = *(int8x16_t *)(v12 + 24);
      v13 = *(_QWORD *)(v12 + 8);
      v14 = 1;
      v12 = *(_QWORD *)(v12 + 16);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    *(_QWORD *)a1 = *(_QWORD *)(a3 + 56);
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v8;
    *(int8x16_t *)(a1 + 40) = vextq_s8(v6, v6, 8uLL);
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v5;
    v4 = vextq_s8(v4, v4, 8uLL);
    *(int8x16_t *)(a1 + 72) = v4;
    *(_QWORD *)(a1 + 88) = v13;
    *(_QWORD *)(a1 + 96) = v12;
    *(_BYTE *)(a1 + 104) = v14;
  }
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)&v17);
    *(_QWORD *)(a1 + 112) = v17;
    v4.i64[0] = v20;
    v15 = v19;
    *(_OWORD *)(a1 + 120) = v18;
    *(_QWORD *)(a1 + 136) = v15;
    *(_QWORD *)(a1 + 144) = v4.i64[0];
  }
  return *(double *)v4.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D05A60;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_WORD *)(a1 + 632) = 1;
  *(_BYTE *)(a1 + 634) = 0;
  *(_BYTE *)(a1 + 636) = 0;
  *(_QWORD *)(a1 + 640) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_QWORD *)(a1 + 680) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D05A60;
  v2 = *(void **)(a1 + 664);
  if (v2)
  {
    *(_QWORD *)(a1 + 672) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 600);
  if (v3)
  {
    *(_QWORD *)(a1 + 608) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 632) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

}

void sub_1B7CB6A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::configureMergeAnchor(double *a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*((_QWORD *)a1 + 5))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *((_QWORD *)a1 + 80) = v4;
    v3 = v5;
    if (a1[31] == -1.79769313e308)
      *((_QWORD *)a1 + 31) = v4;
  }

}

void sub_1B7CB6AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 81, a2);
  v7 = a2;
  v4 = a1[81];
  v5 = a1[78];
  a1[78] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[78]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 304) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7CB6C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[60];

  if (*(_BYTE *)(a1 + 632))
    return 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7CB6CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 634))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 633))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 632))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 635))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 672);
      v20 = *(_QWORD *)(a1 + 680);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 664);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 672);
        v35 = *(char **)(a1 + 664);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 664);
        }
        *(_QWORD *)(a1 + 664) = v30;
        *(_QWORD *)(a1 + 672) = v23;
        *(_QWORD *)(a1 + 680) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 672) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7CB6F88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 634))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 634) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 633))
    goto LABEL_5;
  v9 = *(void **)(a1 + 656);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_386);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 656);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 656);
  *(_QWORD *)(a1 + 656) = 0;

  *(_BYTE *)(a1 + 633) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 664);
    *(_QWORD *)(a1 + 680) = 0;
    *(_QWORD *)(a1 + 672) = 0;
    *(_QWORD *)(a1 + 664) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 664);
      v37 = *(__int128 **)(a1 + 672);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 672);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 672) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 664);
  v39 = *(_QWORD *)(a1 + 672);
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 608) != *(_QWORD *)(a1 + 600))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 608) != *(_QWORD *)(a1 + 600));
  }
  *(_BYTE *)(a1 + 634) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 636))
    {
      *(_BYTE *)(a1 + 636) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 634) = 0;
LABEL_83:

  return v7;
}

void sub_1B7CB7680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 634) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 635) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 634))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 634))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 656);
    *(_QWORD *)(a1 + 656) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 633) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 633))
  {
    v8 = *(void **)(a1 + 656);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 656);
      *(_QWORD *)(a1 + 656) = v9;

      v8 = *(void **)(a1 + 656);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7CB797C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 632) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 632) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7CB7A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 632) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 632), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive((uint64_t)&v37, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 392);
  if (v9 != (_QWORD *)(a1 + 400))
  {
    do
    {
      HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive((uint64_t)&v37, (uint64_t)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 400));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 600);
  for (k = *(int8x16_t **)(a1 + 608); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7CB7E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  uint64_t v40;
  uint64_t j;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  id v61;
  _QWORD *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  _BYTE v66[480];
  __int128 v67;
  __int128 v68;
  int8x16_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  int8x16_t v74;
  uint64_t v75;
  uint64_t v76[4];
  __int128 __p;
  _BYTE v78[24];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _OWORD v83[4];
  uint64_t v84;
  uint64_t **v85;
  uint64_t *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  __int128 v97;
  int v98;
  __int128 v99;
  __int128 v100;
  int v101;
  void (**v102)(statistics::StatisticsEngine *__hidden);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _BYTE v109[32];
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;

  v61 = a2;
  *(_BYTE *)(a1 + 632) = objc_msgSend(v61, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v61;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v66, 0, -1.79769313e308, 1.79769313e308);
  v67 = 0u;
  v68 = 0u;
  v110 = 0;
  v64 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v109, (const unsigned __int8 *)objc_msgSend(v64, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v110));
  v63 = a1;
  v102 = &off_1E6D09A88;
  v103 = 0;
  v107 = 0;
  v105 = 0;
  v106 = 0;
  v108 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v102, (PB::Reader *)v109);
  v65 = v104;
  if (v103)
  {
    v73 = 0;
    memset(v76, 0, sizeof(v76));
    __p = 0u;
    *(_OWORD *)v78 = 0u;
    *(_QWORD *)&v78[16] = 0xFFEFFFFFFFFFFFFFLL;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    memset(v83, 0, 26);
    memset(&v83[2], 0, 32);
    v86 = 0;
    v87 = 0;
    v84 = 0;
    v85 = &v86;
    v88 = 0u;
    v89 = 0u;
    v90 = 1065353216;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0;
    v95 = 1065353216;
    v96 = 0u;
    v97 = 0u;
    v98 = 1065353216;
    v99 = 0u;
    v100 = 0u;
    v101 = 1065353216;
    v69 = vextq_s8(*(int8x16_t *)(v103 + 8), *(int8x16_t *)(v103 + 8), 8uLL);
    v4 = *(_QWORD *)(v103 + 72);
    v70 = *(_QWORD *)(v103 + 64);
    v71 = *(_BYTE *)(v103 + 185);
    v72 = *(_BYTE *)(v103 + 186);
    v74 = vextq_s8(*(int8x16_t *)(v103 + 24), *(int8x16_t *)(v103 + 24), 8uLL);
    v75 = v4;
    v5 = *(_QWORD *)(v103 + 80);
    v6 = *(_QWORD *)(v103 + 88);
    v62 = (_QWORD *)v103;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= *(_QWORD *)v78)
        {
          v14 = (_QWORD *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - __p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)v78 - __p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)v78 - __p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v78 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = (_QWORD *)*((_QWORD *)&__p + 1);
            v14 = (_QWORD *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)((char *)v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 6;
            }
            while (v7 != v14);
            v14 = (_QWORD *)__p;
          }
          v7 = (_QWORD *)(v19 + 48);
          *(_QWORD *)&__p = v20;
          *((_QWORD *)&__p + 1) = v19 + 48;
          *(_QWORD *)v78 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v7 = v9;
          v7[1] = v8;
          v7[2] = v10;
          v7[3] = v11;
          *((_WORD *)v7 + 16) = 1;
          *((_BYTE *)v7 + 40) = 0;
          *((_BYTE *)v7 + 41) = v12;
          *((_BYTE *)v7 + 42) = v13;
          v7 += 6;
        }
        *((_QWORD *)&__p + 1) = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = v62[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive((uint64_t)&v111, *(HDStatisticsTimeInterval **)(v23 + 8), *(_QWORD *)(v23 + 128));
      v82 = v115;
      v83[0] = v116;
      v83[1] = v117;
      *(_OWORD *)&v78[8] = v111;
      v79 = v112;
      v80 = v113;
      v81 = v114;
      *(_QWORD *)&v83[2] = v118;
      if (*((_QWORD *)&v83[2] + 1))
      {
        *(_QWORD *)&v83[3] = *((_QWORD *)&v83[2] + 1);
        operator delete(*((void **)&v83[2] + 1));
      }
      *(_OWORD *)((char *)&v83[2] + 8) = v119;
      *((_QWORD *)&v83[3] + 1) = v120;
      v120 = 0;
      v119 = 0uLL;
      v84 = v121;
    }
    v24 = (uint64_t *)v62[17];
    for (i = (uint64_t *)v62[18]; v24 != i; ++v24)
    {
      v26 = *v24;
      HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive((uint64_t)&v111, *(HDStatisticsTimeInterval **)(*v24 + 8), *(_QWORD *)(*v24 + 128));
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v86;
      v29 = &v86;
      v30 = &v86;
      if (v86)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_34;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_37;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_34:
      v33 = (char *)operator new(0xC0uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *((_QWORD *)v33 + 6) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v33 + 130) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *((_QWORD *)v33 + 23) = 0;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v85)
      {
        v85 = (uint64_t **)*v85;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v86, v32);
      ++v87;
LABEL_37:
      v34 = v117;
      v35 = v116;
      v36 = v115;
      v37 = v113;
      *(_OWORD *)(v33 + 88) = v114;
      *(_OWORD *)(v33 + 104) = v36;
      *(_OWORD *)(v33 + 120) = v35;
      *(_OWORD *)(v33 + 136) = v34;
      v38 = v112;
      *(_OWORD *)(v33 + 40) = v111;
      *(_OWORD *)(v33 + 56) = v38;
      *(_OWORD *)(v33 + 72) = v37;
      *((_QWORD *)v33 + 19) = v118;
      v39 = (void *)*((_QWORD *)v33 + 20);
      if (v39)
      {
        *((_QWORD *)v33 + 21) = v39;
        operator delete(v39);
        *((_QWORD *)v33 + 20) = 0;
        *((_QWORD *)v33 + 21) = 0;
        *((_QWORD *)v33 + 22) = 0;
      }
      *((_OWORD *)v33 + 10) = v119;
      *((_QWORD *)v33 + 22) = v120;
      v120 = 0;
      v119 = 0uLL;
      *((_QWORD *)v33 + 23) = v121;
    }
    v40 = v62[5];
    for (j = v62[6]; v40 != j; v40 += 8)
    {
      v43 = *(double *)(*(_QWORD *)v40 + 8);
      v42 = *(double *)(*(_QWORD *)v40 + 16);
      if (v43 >= v42)
        v44 = *(double *)(*(_QWORD *)v40 + 16);
      else
        v44 = *(double *)(*(_QWORD *)v40 + 8);
      if (v42 < v43)
        v42 = *(double *)(*(_QWORD *)v40 + 8);
      HKIntervalMask<double>::_insertInterval(v76, v44, v42);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((uint64_t)v66, (uint64_t)&v69);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v69);
  }
  v45 = v105;
  v46 = v106;
  if (v105 != v106)
  {
    v47 = *((_QWORD *)&v67 + 1);
    do
    {
      v48 = *(_QWORD *)(*(_QWORD *)v45 + 24);
      v49 = *(_QWORD *)(*(_QWORD *)v45 + 32);
      v50 = *(_QWORD *)(*(_QWORD *)v45 + 8);
      v51 = *(_QWORD *)(*(_QWORD *)v45 + 16);
      if (v47 >= (unint64_t)v68)
      {
        v52 = (void *)v67;
        v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v67) >> 3);
        v54 = v53 + 1;
        if (v53 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v68 - v67) >> 3) > v54)
          v54 = 0x999999999999999ALL * ((uint64_t)(v68 - v67) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v68 - v67) >> 3) >= 0x333333333333333)
          v55 = 0x666666666666666;
        else
          v55 = v54;
        if (v55)
        {
          v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
          v47 = *((_QWORD *)&v67 + 1);
          v52 = (void *)v67;
        }
        else
        {
          v56 = 0;
        }
        v57 = v55 + 40 * v53;
        *(_QWORD *)v57 = v49;
        *(_QWORD *)(v57 + 8) = v48;
        *(_QWORD *)(v57 + 16) = v50;
        *(_QWORD *)(v57 + 24) = v51;
        *(_WORD *)(v57 + 32) = 1;
        v58 = v57;
        if ((void *)v47 != v52)
        {
          do
          {
            v59 = *(_OWORD *)(v47 - 40);
            v60 = *(_OWORD *)(v47 - 24);
            *(_WORD *)(v58 - 8) = *(_WORD *)(v47 - 8);
            *(_OWORD *)(v58 - 24) = v60;
            *(_OWORD *)(v58 - 40) = v59;
            v58 -= 40;
            v47 -= 40;
          }
          while ((void *)v47 != v52);
          v52 = (void *)v67;
        }
        v47 = v57 + 40;
        *(_QWORD *)&v67 = v58;
        *((_QWORD *)&v67 + 1) = v57 + 40;
        *(_QWORD *)&v68 = v55 + 40 * v56;
        if (v52)
          operator delete(v52);
      }
      else
      {
        *(_QWORD *)v47 = v49;
        *(_QWORD *)(v47 + 8) = v48;
        *(_QWORD *)(v47 + 16) = v50;
        *(_QWORD *)(v47 + 24) = v51;
        *(_WORD *)(v47 + 32) = 1;
        v47 += 40;
      }
      *((_QWORD *)&v67 + 1) = v47;
      v45 += 8;
    }
    while (v45 != v46);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v102);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((_QWORD *)(v63 + 112), (uint64_t)&v65);
  if ((_QWORD)v67)
  {
    *((_QWORD *)&v67 + 1) = v67;
    operator delete((void *)v67);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v66);

}

void sub_1B7CB863C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a2);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x3D0]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3A8]);
  v9 = (void *)STACK[0x390];
  if (STACK[0x390])
  {
    STACK[0x398] = (unint64_t)v9;
    operator delete(v9);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a3);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy((_QWORD *)STACK[0x358]);
  v10 = (void *)STACK[0x330];
  if (STACK[0x330])
  {
    STACK[0x338] = (unint64_t)v10;
    operator delete(v10);
  }
  v11 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x298]);
  v12 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x428]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 210) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 488);
  if (v2)
  {
    *(_QWORD *)(a1 + 496) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 440);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 400);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 360);
  v2 = *(void **)(a1 + 336);
  if (v2)
  {
    *(_QWORD *)(a1 + 344) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 296);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 280));
  v3 = *(void **)(a1 + 240);
  if (v3)
  {
    *(_QWORD *)(a1 + 248) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    v2 = (void *)a1[20];
    if (v2)
    {
      a1[21] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[480];
  uint64_t v18;
  _BYTE v19[480];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[64];
  double v29;
  uint64_t v30;

  v30 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v30);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 648));
  if (!*(_QWORD *)(a1 + 40))
  {
    v26 = 0;
    if (v29 == -1.79769313e308)
      v29 = *(double *)(a1 + 640);
  }
  v15 = v30;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 632) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7CB8BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 61), (__n128 *)(a2 + 488));
  v4 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a2 + 512) = 0;
  v5 = (void *)a1[64];
  a1[64] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 120);
  v13 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  v14 = *(_OWORD *)(a2 + 168);
  v15 = *(_OWORD *)(a2 + 184);
  v16 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 168) = v14;
  v17 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = v17;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 240), *(const void **)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 4);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v18 = (_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  v19 = *(_QWORD **)(a2 + 272);
  if (v19 != (_QWORD *)(a2 + 280))
  {
    v20 = 0;
    v21 = (_QWORD *)(a1 + 280);
    while (1)
    {
      v22 = (_QWORD *)(a1 + 280);
      if (v21 == v18)
        goto LABEL_12;
      v23 = v20;
      v24 = (_QWORD *)(a1 + 280);
      if (v20)
      {
        do
        {
          v22 = v23;
          v23 = (_QWORD *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v24[2];
          v25 = *v22 == (_QWORD)v24;
          v24 = v22;
        }
        while (v25);
      }
      v26 = v19[4];
      if (v22[4] < v26)
      {
LABEL_12:
        if (v20)
          v27 = (uint64_t **)v22;
        else
          v27 = (uint64_t **)(a1 + 280);
        if (v20)
          v28 = (uint64_t **)(v22 + 1);
        else
          v28 = (uint64_t **)(a1 + 280);
        if (!*v28)
        {
LABEL_28:
          v31 = (char *)operator new(0xC0uLL);
          *((_QWORD *)v31 + 4) = v19[4];
          v32 = *(_OWORD *)(v19 + 5);
          v33 = *(_OWORD *)(v19 + 7);
          *(_OWORD *)(v31 + 72) = *(_OWORD *)(v19 + 9);
          *(_OWORD *)(v31 + 56) = v33;
          *(_OWORD *)(v31 + 40) = v32;
          v34 = *(_OWORD *)(v19 + 11);
          v35 = *(_OWORD *)(v19 + 13);
          v36 = *(_OWORD *)(v19 + 15);
          *(_OWORD *)(v31 + 136) = *(_OWORD *)(v19 + 17);
          *(_OWORD *)(v31 + 120) = v36;
          *(_OWORD *)(v31 + 104) = v35;
          *(_OWORD *)(v31 + 88) = v34;
          v37 = v19[19];
          *((_QWORD *)v31 + 20) = 0;
          *((_QWORD *)v31 + 19) = v37;
          *((_QWORD *)v31 + 21) = 0;
          *((_QWORD *)v31 + 22) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v31 + 20, (const void *)v19[20], v19[21], (uint64_t)(v19[21] - v19[20]) >> 4);
          *((_QWORD *)v31 + 23) = v19[23];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 272), (uint64_t)v27, v28, (uint64_t *)v31);
        }
      }
      else
      {
        v28 = (uint64_t **)(a1 + 280);
        v27 = (uint64_t **)(a1 + 280);
        if (!v20)
          goto LABEL_28;
        v29 = v20;
        while (1)
        {
          while (1)
          {
            v27 = (uint64_t **)v29;
            v30 = v29[4];
            if (v30 <= v26)
              break;
            v29 = *v27;
            v28 = v27;
            if (!*v27)
              goto LABEL_28;
          }
          if (v30 >= v26)
            break;
          v29 = v27[1];
          if (!v29)
          {
            v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      v38 = (_QWORD *)v19[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v19[2];
          v25 = *v39 == (_QWORD)v19;
          v19 = v39;
        }
        while (!v25);
      }
      if (v39 == (_QWORD *)(a2 + 280))
        break;
      v20 = (_QWORD *)*v18;
      v21 = *(_QWORD **)(a1 + 272);
      v19 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 296, a2 + 296);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 336), *(const void **)(a2 + 336), *(_QWORD *)(a2 + 344), (uint64_t)(*(_QWORD *)(a2 + 344) - *(_QWORD *)(a2 + 336)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 360, a2 + 360);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 400, a2 + 400);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 440, a2 + 440);
  return a1;
}

void sub_1B7CB8FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v12 + 344) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*v13);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 248) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 184);
  v11 = *(_OWORD *)(a2 + 200);
  v12 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 200) = v11;
  *(_OWORD *)(a1 + 184) = v10;
  v13 = *(_OWORD *)(a2 + 136);
  v14 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 240, (__n128 *)(a2 + 240));
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v15 = a1 + 280;
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 280));
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v16 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 280) = v16;
  v17 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 288) = v17;
  if (v17)
  {
    *(_QWORD *)(v16 + 16) = v15;
    *(_QWORD *)(a2 + 272) = a2 + 280;
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a2 + 288) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 272) = v15;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 296, (uint64_t *)(a2 + 296));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 336, (__n128 *)(a2 + 336));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 360, (uint64_t *)(a2 + 360));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 400, (uint64_t *)(a2 + 400));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 440, (uint64_t *)(a2 + 440));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  double v3;
  id v4;
  double *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  id v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  const void *v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t **i;
  uint64_t *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  double *v50;
  double v51;
  double v52;
  double v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  const void *v67;
  uint64_t v68;
  double *v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  id v86;
  id v87;
  id v88;
  id v89;
  uint64_t **j;
  uint64_t *v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  double v96;
  double v97;
  void *v98;
  void *v99;
  void *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  void *v108;
  id v109;
  id v110;
  uint64_t v111;
  id v113;
  id v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  void *__p;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[3];
  _QWORD *v128;
  _QWORD v129[3];
  _QWORD *v130;
  _QWORD v131[3];
  _QWORD *v132;
  _BYTE v133[24];
  _BYTE *v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v3 = *(double *)a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308)
    v5 = (double *)a2;
  v108 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  v111 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v7 = (void *)v6;
  v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = *(id *)(a1 + 16);
    if (objc_msgSend(v9, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v9, "underlyingSampleType");
      v10 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v10;
    }

  }
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v8, v108, v7);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v14 = *(uint64_t **)(a2 + 336);
      v15 = *(uint64_t **)(v111 + 344);
      while (v14 != v15)
      {
        v16 = *v14;
        v17 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v17, "sourceForSourceID:", v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          if ((objc_msgSend(v13, "containsObject:", v18) & 1) == 0)
            objc_msgSend(v13, "addObject:", v18);
        }

        ++v14;
      }
      v19 = (void *)objc_msgSend(v13, "copy");
      objc_msgSend(v11, "_setSources:", v19);

    }
  }

  v127[0] = &off_1E6D05C50;
  v128 = v127;
  v109 = v11;
  v20 = (uint64_t)v128;
  if (!v128)
    goto LABEL_22;
  if (v128 != v127)
  {
    v20 = (*(uint64_t (**)(void))(*v128 + 16))();
LABEL_22:
    v132 = (_QWORD *)v20;
    goto LABEL_24;
  }
  v132 = v131;
  (*(void (**)(uint64_t, _QWORD *))(v127[0] + 24))((uint64_t)v127, v131);
LABEL_24:
  v134 = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E6D05B30;
  v22 = v21 + 1;
  v23 = (uint64_t)v132;
  if (!v132)
  {
LABEL_27:
    v21[4] = v23;
    goto LABEL_29;
  }
  if (v132 != v131)
  {
    v23 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v132 + 16))(v132, v22);
    goto LABEL_27;
  }
  v21[4] = v22;
  (*(void (**)(_QWORD *))(v131[0] + 24))(v131);
LABEL_29:
  v134 = v21;
  v24 = v109;
  v25 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = *(_OWORD *)(v111 + 168);
  v28 = *(_OWORD *)(v111 + 200);
  v119 = *(_OWORD *)(v111 + 184);
  v120 = v28;
  v121 = *(_OWORD *)(v111 + 216);
  v29 = *(_OWORD *)(v111 + 136);
  v115 = *(_OWORD *)(v111 + 120);
  v116 = v29;
  v117 = *(_OWORD *)(v111 + 152);
  v118 = v27;
  v30 = *(const void **)(v111 + 240);
  v122 = *(_QWORD *)(v111 + 232);
  __p = 0;
  v31 = *(_QWORD *)(v111 + 248);
  v124 = 0;
  v125 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v30, v31, (v31 - (uint64_t)v30) >> 4);
  v126 = *(_QWORD *)(v111 + 264);
  if (!v134)
    std::__throw_bad_function_call[abi:ne180100]();
  v32 = (*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v134 + 48))(v134, &v115);
  v33 = *(double **)(v32 + 8);
  v34 = 0.0;
  while (v33 != *(double **)(v32 + 16))
  {
    v36 = *v33;
    v35 = v33[1];
    v33 += 2;
    v34 = v34 + v35 - v36;
  }
  objc_msgSend(v25, "quantityWithUnit:doubleValue:", v26, v34 + *(double *)(v32 + 32));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setDuration:", v37);

  if (__p)
  {
    v124 = __p;
    operator delete(__p);
  }

  v38 = *(_OWORD *)(v111 + 200);
  v119 = *(_OWORD *)(v111 + 184);
  v120 = v38;
  v121 = *(_OWORD *)(v111 + 216);
  v39 = *(_OWORD *)(v111 + 136);
  v115 = *(_OWORD *)(v111 + 120);
  v116 = v39;
  v40 = *(_OWORD *)(v111 + 168);
  v117 = *(_OWORD *)(v111 + 152);
  v118 = v40;
  v41 = *(const void **)(v111 + 240);
  v122 = *(_QWORD *)(v111 + 232);
  __p = 0;
  v42 = *(_QWORD *)(v111 + 248);
  v124 = 0;
  v125 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v41, v42, (v42 - (uint64_t)v41) >> 4);
  v126 = *(_QWORD *)(v111 + 264);
  if (!v134)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v24, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v134 + 48))(v134, &v115));
  if (__p)
  {
    v124 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v43 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v44 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v115, v111);
    for (i = (uint64_t **)v116; i; i = (uint64_t **)*i)
    {
      v46 = i[2];
      v47 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v134)
        std::__throw_bad_function_call[abi:ne180100]();
      v49 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)i + 3);
      v50 = *(double **)(v49 + 8);
      v51 = 0.0;
      while (v50 != *(double **)(v49 + 16))
      {
        v53 = *v50;
        v52 = v50[1];
        v50 += 2;
        v51 = v51 + v52 - v53;
      }
      objc_msgSend(v47, "quantityWithUnit:doubleValue:", v48, v51 + *(double *)(v49 + 32));
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "setObject:forKeyedSubscript:", v54, v46);

      if (!v134)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)i + 3));
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "setObject:forKeyedSubscript:", v55, v46);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v115);
    objc_msgSend(v24, "setDurationBySource:", v43);
    objc_msgSend(v24, "setDataCountBySource:", v44);

  }
  v56 = v134;
  if (v134 == v133)
  {
    v57 = 4;
    v56 = v133;
  }
  else
  {
    if (!v134)
      goto LABEL_52;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_52:
  v58 = v132;
  if (v132 == v131)
  {
    v59 = 4;
    v58 = v131;
  }
  else
  {
    if (!v132)
      goto LABEL_57;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_57:
  v60 = (uint64_t)v128;
  if (!v128)
  {
LABEL_60:
    v130 = (_QWORD *)v60;
    goto LABEL_62;
  }
  if (v128 != v127)
  {
    v60 = (*(uint64_t (**)(void))(*v128 + 16))();
    goto LABEL_60;
  }
  v130 = v129;
  (*(void (**)(uint64_t, _QWORD *))(v127[0] + 24))((uint64_t)v127, v129);
LABEL_62:
  v134 = 0;
  v61 = operator new(0x28uLL);
  *v61 = &off_1E6D05BC0;
  v62 = (uint64_t)v130;
  if (!v130)
  {
LABEL_65:
    v61[4] = v62;
    goto LABEL_67;
  }
  if (v130 != v129)
  {
    v62 = (*(uint64_t (**)(void))(*v130 + 16))();
    goto LABEL_65;
  }
  v61[4] = v61 + 1;
  (*(void (**)(_QWORD *))(v129[0] + 24))(v129);
LABEL_67:
  v134 = v61;
  v114 = v24;
  v63 = *(_QWORD *)(a1 + 24);
  v64 = *(_OWORD *)(v111 + 200);
  v119 = *(_OWORD *)(v111 + 184);
  v120 = v64;
  v121 = *(_OWORD *)(v111 + 216);
  v65 = *(_OWORD *)(v111 + 136);
  v115 = *(_OWORD *)(v111 + 120);
  v116 = v65;
  v66 = *(_OWORD *)(v111 + 168);
  v117 = *(_OWORD *)(v111 + 152);
  v118 = v66;
  v67 = *(const void **)(v111 + 240);
  v122 = *(_QWORD *)(v111 + 232);
  __p = 0;
  v68 = *(_QWORD *)(v111 + 248);
  v124 = 0;
  v125 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v67, v68, (v68 - (uint64_t)v67) >> 4);
  v126 = *(_QWORD *)(v111 + 264);
  if (!v134)
    std::__throw_bad_function_call[abi:ne180100]();
  v69 = (double *)(*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v134 + 48))(v134, &v115);
  v71 = v69[5];
  v70 = v69[6];
  v72 = v69[7];
  v73 = *((_QWORD *)v69 + 8);
  v75 = v69[9];
  v74 = v69[10];
  v76 = v69[11];
  if (__p)
  {
    v124 = __p;
    operator delete(__p);
  }
  v77 = *(_QWORD *)(a1 + 24);
  v78 = _HKStatisticsOptionBaselineRelativeQuantities();
  v79 = *(void **)(a1 + 16);
  if ((v78 & v77) != 0)
    objc_msgSend(v79, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v79, "canonicalUnit");
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v63 & 2) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v80, v71);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "setAverageQuantity:", v81);

  }
  if ((v63 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v80, v72);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "setMinimumQuantity:", v82);

  }
  if ((v63 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v80, v70);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "setMaximumQuantity:", v83);

  }
  if ((v63 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v80, v75);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "setMostRecentQuantity:", v84);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v74, v76);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "setMostRecentQuantityDateInterval:", v85);

  }
  objc_msgSend(v114, "setDataCount:", v73);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_117;
  if ((v63 & 2) != 0)
    v113 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v113 = 0;
  if ((v63 & 4) != 0)
    v110 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v110 = 0;
  if ((v63 & 8) != 0)
  {
    v86 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    if ((v63 & 0x20) == 0)
      goto LABEL_90;
LABEL_92:
    v88 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v87 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    goto LABEL_93;
  }
  v86 = 0;
  if ((v63 & 0x20) != 0)
    goto LABEL_92;
LABEL_90:
  v87 = 0;
  v88 = 0;
LABEL_93:
  v89 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v115, v111);
  for (j = (uint64_t **)v116; j; j = (uint64_t **)*j)
  {
    v91 = j[2];
    if ((v63 & 2) != 0)
    {
      if (!v134)
        goto LABEL_133;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v80, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)j + 3) + 40));
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v113, "setObject:forKeyedSubscript:", v92, v91);

    }
    if ((v63 & 4) != 0)
    {
      if (!v134)
        goto LABEL_133;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v80, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)j + 3) + 56));
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v110, "setObject:forKeyedSubscript:", v93, v91);

    }
    if ((v63 & 8) != 0)
    {
      if (!v134)
        goto LABEL_133;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v80, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)j + 3) + 48));
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v94, v91);

    }
    if ((v63 & 0x20) != 0)
    {
      if (!v134)
        std::__throw_bad_function_call[abi:ne180100]();
      v95 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)j + 3);
      v96 = *(double *)(v95 + 80);
      v97 = *(double *)(v95 + 88);
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v80, *(double *)(v95 + 72));
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "setObject:forKeyedSubscript:", v98, v91);

      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v96, v97);
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v87, "setObject:forKeyedSubscript:", v99, v91);

    }
    if (!v134)
LABEL_133:
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v134 + 48))(v134, (uint64_t *)j + 3) + 64));
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v89, "setObject:forKeyedSubscript:", v100, v91);

  }
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v115);
  if ((v63 & 2) != 0)
    objc_msgSend(v114, "setAverageQuantityBySource:", v113);
  if ((v63 & 4) != 0)
    objc_msgSend(v114, "setMinimumQuantityBySource:", v110);
  if ((v63 & 8) != 0)
    objc_msgSend(v114, "setMaximumQuantityBySource:", v86);
  if ((v63 & 0x20) != 0)
  {
    objc_msgSend(v114, "setMostRecentQuantityBySource:", v88);
    objc_msgSend(v114, "setMostRecentQuantityDateIntervalBySource:", v87);
  }
  objc_msgSend(v114, "setDataCountBySource:", v89);

LABEL_117:
  v101 = v134;
  if (v134 == v133)
  {
    v102 = 4;
    v101 = v133;
  }
  else
  {
    if (!v134)
      goto LABEL_122;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_122:
  v103 = v130;
  if (v130 == v129)
  {
    v104 = 4;
    v103 = v129;
  }
  else
  {
    if (!v130)
      goto LABEL_127;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_127:

  v105 = v128;
  if (v128 == v127)
  {
    v106 = 4;
    v105 = v127;
    goto LABEL_131;
  }
  if (v128)
  {
    v106 = 5;
LABEL_131:
    (*(void (**)(void))(*v105 + 8 * v106))();
  }
  return v114;
}

void sub_1B7CB9EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char *a38,char a39,uint64_t a40,uint64_t a41,char *a42)
{
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  v47 = *(_QWORD **)(v45 - 152);
  if (v47 == (_QWORD *)(v45 - 176))
  {
    v48 = 4;
    v47 = (_QWORD *)(v45 - 176);
  }
  else
  {
    if (!v47)
      goto LABEL_6;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_6:
  v49 = a42;
  if (a42 == &a39)
  {
    v50 = 4;
    v49 = &a39;
  }
  else
  {
    if (!a42)
      goto LABEL_11;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_11:

  v51 = a38;
  if (a38 == &a35)
  {
    v52 = 4;
    v51 = &a35;
  }
  else
  {
    if (!a38)
      goto LABEL_16;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_16:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 320);
  v2 = *(_QWORD *)(a1 + 336);
  if (v1 != (*(_QWORD *)(a1 + 344) - v2) >> 3)
  {
    v4 = (void **)(a1 + 336);
    *(_QWORD *)(a1 + 344) = v2;
    std::vector<long long>::reserve((void **)(a1 + 336), v1);
    v5 = *(_QWORD **)(a1 + 312);
    if (v5)
    {
      v6 = *(char **)(a1 + 344);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 352);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 336);
            v6 = *(char **)(a1 + 344);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 336) = v16;
          *(_QWORD *)(a1 + 344) = v9;
          *(_QWORD *)(a1 + 352) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 344) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7CBA3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  _QWORD *v6;
  double *v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  char v16;
  double v17;
  int v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double *j;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  id WeakRetained;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  int v56;
  unint64_t v57;
  uint64_t **v58;
  __int128 v59;
  char *v60;
  unint64_t v61;
  char v62;
  double *v63;
  __int128 v64;
  _OWORD *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  _OWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  double var2;
  double *i;
  int v77;
  int v78;
  unint64_t var3;
  _BOOL4 v80;
  _OWORD *v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  char *v85;
  _OWORD *v86;
  __int128 v87;
  __int128 v88;
  _BOOL4 v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  unint64_t v94;
  uint64_t **v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  double v99;
  void *v100;
  void *v101;
  double **v102;
  id *location;
  id v104;
  uint64_t *v105;
  uint64_t v106;
  int64_t v107;
  char **v108;
  uint64_t v109;
  HDRawQuantitySample v110;
  __int128 v111;
  __int128 v112;
  __int16 v113;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v108 = (char **)(a1 + 96);
    v105 = (uint64_t *)(a1 + 232);
    v106 = a1 + 120;
    location = (id *)(a1 + 88);
    v102 = (double **)(a1 + 240);
    v6 = (_QWORD *)(a1 + 280);
    do
    {
      v7 = *(double **)(a1 + 96);
      v8 = *(__int128 **)(a1 + 104);
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          v30 = a2;
          v31 = a2;
          v32 = v5;
          v33 = *(_QWORD *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              v34 = *(double *)(v33 + 8);
              v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31)
                v31 = *(double *)(v33 + 8);
              if (v35 > v5)
                v37 = *(double *)(v33 + 16);
              else
                v37 = v30;
              if (v35 < v30)
              {
                v32 = v5;
                v30 = v37;
              }
              v33 += 48;
            }
            while ((__int128 *)v33 != v8);
          }
          if (v30 >= v31)
            v38 = v31;
          else
            v38 = v30;
          v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            v40 = v39 * floor(v38 / v39);
            v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41)
              v38 = v40;
            else
              v38 = v41;
          }
          *v108 = 0;
          v108[1] = 0;
          v108[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            v45 = *(char **)(a1 + 96);
            v44 = *(char **)(a1 + 104);
            v46 = v42;
            if (v44 != v45)
            {
              do
              {
                v47 = *((_OWORD *)v44 - 3);
                v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              v44 = *v108;
            }
            *(_QWORD *)(a1 + 96) = v46;
            *(_QWORD *)(a1 + 104) = v42;
            *(_QWORD *)(a1 + 112) = &v42[48 * v43];
            if (v44)
              operator delete(v44);
          }
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v110.var0 = a1;
            v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8)
              v51 = 0;
            else
              v51 = v50;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>((uint64_t)v7, v8, (uint64_t)&v110, v51, 1);
          }
          else
          {
            v61 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8)
              v51 = 0;
            else
              v51 = v61;
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>((uint64_t)v7, v8, v51, 1);
          if (*(_BYTE *)(a1 + 25))
            v104 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v104 = 0;
          if (v7 == (double *)v8)
          {
LABEL_143:
            *(double *)(a1 + 264) = HKIntervalMask<double>::removeIntervalsBefore(v102, v38) + *(double *)(a1 + 264);
            v96 = *(_QWORD **)(a1 + 272);
            if (v96 != v6)
            {
              do
              {
                *((double *)v96 + 23) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 20, v38)
                                      + *((double *)v96 + 23);
                v97 = (_QWORD *)v96[1];
                if (v97)
                {
                  do
                  {
                    v98 = v97;
                    v97 = (_QWORD *)*v97;
                  }
                  while (v97);
                }
                else
                {
                  do
                  {
                    v98 = (_QWORD *)v96[2];
                    v54 = *v98 == (_QWORD)v96;
                    v96 = v98;
                  }
                  while (!v54);
                }
                v96 = v98;
              }
              while (v98 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7)
              operator delete(v7);
            goto LABEL_155;
          }
          v107 = 0;
          v62 = 0;
          v63 = v7;
          while (2)
          {
            v64 = *((_OWORD *)v63 + 1);
            *(_OWORD *)&v110.var0 = *(_OWORD *)v63;
            *(_OWORD *)&v110.var2 = v64;
            *(double *)&v110.var4 = v63[4];
            if (!v110.var4 || v110.var1 > v38)
            {
              v65 = *(_OWORD **)(a1 + 104);
              v66 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v65 >= v66)
              {
                v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - *v108) >> 4);
                v71 = v70 + 1;
                if (v70 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (_QWORD)*v108) >> 4);
                if (2 * v72 > v71)
                  v71 = 2 * v72;
                if (v72 >= 0x2AAAAAAAAAAAAAALL)
                  v73 = 0x555555555555555;
                else
                  v73 = v71;
                if (v73)
                  v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v73);
                else
                  v74 = 0;
                v81 = (_OWORD *)(v73 + 48 * v70);
                v82 = *(_OWORD *)v63;
                v83 = *((_OWORD *)v63 + 2);
                v81[1] = *((_OWORD *)v63 + 1);
                v81[2] = v83;
                *v81 = v82;
                v85 = *(char **)(a1 + 96);
                v84 = *(char **)(a1 + 104);
                v86 = v81;
                if (v84 != v85)
                {
                  do
                  {
                    v87 = *((_OWORD *)v84 - 3);
                    v88 = *((_OWORD *)v84 - 2);
                    *(_OWORD *)((char *)v86 - 21) = *(_OWORD *)(v84 - 21);
                    *(v86 - 3) = v87;
                    *(v86 - 2) = v88;
                    v86 -= 3;
                    v84 -= 48;
                  }
                  while (v84 != v85);
                  v84 = *v108;
                }
                v69 = v81 + 3;
                *(_QWORD *)(a1 + 96) = v86;
                *(_QWORD *)(a1 + 104) = v81 + 3;
                *(_QWORD *)(a1 + 112) = v73 + 48 * v74;
                if (v84)
                  operator delete(v84);
              }
              else
              {
                v67 = *(_OWORD *)v63;
                v68 = *((_OWORD *)v63 + 2);
                v65[1] = *((_OWORD *)v63 + 1);
                v65[2] = v68;
                *v65 = v67;
                v69 = v65 + 3;
              }
              *(_QWORD *)(a1 + 104) = v69;
LABEL_142:
              v63 += 6;
              if (v63 == (double *)v8)
                goto LABEL_143;
              continue;
            }
            break;
          }
          var2 = v110.var2;
          if (v110.var2 > v38)
            var2 = v38;
          v110.var2 = var2;
          for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v110.var1 >= *i; i += 2)
          {
            if (v110.var1 < i[1])
              goto LABEL_142;
          }
          v77 = *((unsigned __int8 *)v63 + 42);
          v78 = *((unsigned __int8 *)v63 + 41);
          if ((v62 & 1) != 0)
          {
            var3 = v110.var3;
            if (v107 == v110.var3 || *(_BYTE *)(a1 + 24))
            {
              v80 = v77 == 0;
              HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v106, &v110.var0);
              HDStatisticsTimeInterval::addSample(v105, &v110, v80);
            }
          }
          else
          {
            v89 = v77 == 0;
            HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v106, &v110.var0);
            HDStatisticsTimeInterval::addSample(v105, &v110, v89);
            var3 = v110.var3;
            v107 = v110.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_141;
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, var3);
          v90 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v90)
            goto LABEL_140;
          objc_msgSend(v104, "objectForKeyedSubscript:", v90);
          v91 = (void *)objc_claimAutoreleasedReturnValue();
          v92 = v91;
          if (v91)
          {
            if (objc_msgSend(v91, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_139:

LABEL_140:
LABEL_141:
              v62 = 1;
              goto LABEL_142;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v93 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v104, "setObject:forKeyedSubscript:", v93, v90);

          }
          v94 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
          v95 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v94);
          HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)v95, &v110.var0);
          HDStatisticsTimeInterval::addSample((uint64_t *)v95 + 14, &v110, v78 == 0);
          goto LABEL_139;
        }
        v10 = *((unsigned __int8 *)v7 + 42);
        v11 = *((unsigned __int8 *)v7 + 41);
        v12 = *((unsigned __int8 *)v7 + 40);
        v13 = v7[1];
        v14 = v7[2];
        v15 = *((_QWORD *)v7 + 3);
        v16 = *((_BYTE *)v7 + 33);
        if (v14 <= a2)
          v17 = v7[2];
        else
          v17 = a2;
        if (v13 < a2)
          v18 = *((unsigned __int8 *)v7 + 32);
        else
          v18 = 0;
        if (v13 < a2)
          v19 = 0;
        else
          v19 = *((_BYTE *)v7 + 33);
        if (v13 < a2)
        {
          v20 = 0;
        }
        else
        {
          v17 = v7[2];
          v20 = *((_QWORD *)v7 + 3);
        }
        if (v13 < a2)
          v21 = 0.0;
        else
          v21 = v7[2];
        if (v13 < a2)
          v22 = 0.0;
        else
          v22 = *v7;
        if (v13 < a2)
          v23 = 0.0;
        else
          v23 = v7[1];
        if (v13 < a2)
          v24 = 0;
        else
          v24 = *((unsigned __int8 *)v7 + 32);
        if (*((_BYTE *)v7 + 32))
        {
          v14 = v17;
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
        }
        if (*((_BYTE *)v7 + 32))
          v25 = v21;
        else
          v25 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v26 = v22;
        else
          v26 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v27 = v23;
        else
          v27 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v28 = v24;
        else
          v28 = 0;
        v110.var0 = *v7;
        v110.var1 = v13;
        v110.var2 = v14;
        v110.var3 = v15;
        v110.var4 = v18;
        v110.var5 = v16;
        *(_DWORD *)(&v110.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v110.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&v111 = v26;
        *((double *)&v111 + 1) = v27;
        *(double *)&v112 = v25;
        *((_QWORD *)&v112 + 1) = v20;
        LOBYTE(v113) = v28;
        HIBYTE(v113) = v19;
        for (j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            v52 = v12 != 0;
            v53 = v11 != 0;
            v55 = v10 != 0;
            if (!v28)
              goto LABEL_153;
LABEL_91:
            LOWORD(v109) = v113;
            v59 = v112;
            v60 = *v108;
            *(_OWORD *)v60 = v111;
            *((_OWORD *)v60 + 1) = v59;
            *((_QWORD *)v60 + 4) = v109;
            v60[40] = v52;
            v60[41] = v53;
            v60[42] = v55;
            goto LABEL_154;
          }
        }
        v52 = v12 != 0;
        v53 = v11 != 0;
        v54 = v10 == 0;
        v55 = v10 != 0;
        if (v18)
        {
          v56 = v54;
          HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v106, &v110.var0);
          HDStatisticsTimeInterval::addSample(v105, &v110, v56);
          if (*(_BYTE *)(a1 + 25))
          {
            v57 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v15);
            v58 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v57);
            HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)v58, &v110.var0);
            HDStatisticsTimeInterval::addSample((uint64_t *)v58 + 14, &v110, v11 == 0);
          }
          v52 = 1;
          v53 = 1;
          v55 = 1;
        }
        if (v28)
          goto LABEL_91;
LABEL_153:
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
      }
LABEL_154:
      *(double *)(a1 + 56) = a2;
LABEL_155:
      v99 = *(double *)(a1 + 56);
      if (v99 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>, HDStatisticsTimeInterval>]");
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v100, "handleFailureInFunction:file:lineNumber:description:", v101, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v99 = *(double *)(a1 + 56);
      }
      v5 = v99;
    }
    while (v99 < a2);
  }
}

void sub_1B7CBAC24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 280);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 280);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 280) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 272);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 272), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 360), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 400);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7CBADF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 440);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7CBAEC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0xC0uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_QWORD *)v9 + 6) = 0xFFEFFFFFFFFFFFFFLL;
    *(_OWORD *)(v9 + 130) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *((_QWORD *)v9 + 23) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 336);
  v7 = *(char **)(*(_QWORD *)a4 + 344);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 336);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 336);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 344);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 336);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 344);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 336);
      v15 = *(char **)(*(_QWORD *)a4 + 344);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 344);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 344);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 336);
          v25 = *(char **)(*(_QWORD *)a4 + 344);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 344);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 344);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 336);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 336);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 344);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 336);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 344);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 336);
      v41 = *(char **)(*(_QWORD *)a4 + 344);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 344);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 344);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 336);
      v11 = *(char **)(*(_QWORD *)a3 + 344);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 344);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 344);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 336);
      v24 = *(char **)(*(_QWORD *)a3 + 344);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 344);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 344);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 336);
            v31 = *(char **)(*(_QWORD *)a3 + 344);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 344);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 344);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 336);
    v14 = *(char **)(*(_QWORD *)a5 + 344);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 344);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 344);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 336);
        v23 = *(char **)(*(_QWORD *)a5 + 344);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 344);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 344);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 336);
            v32 = *(char **)(*(_QWORD *)a5 + 344);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 344);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 344);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 336);
    v16 = *(char **)(*(_QWORD *)a6 + 344);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 344);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 344);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 336);
        v25 = *(char **)(*(_QWORD *)a6 + 344);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 344);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 344);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 336);
            v34 = *(char **)(*(_QWORD *)a6 + 344);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 344);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 344);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 336);
                v43 = *(char **)(*(_QWORD *)a6 + 344);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 344);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 344);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  char **v11;
  char *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  char **v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  void *v47;
  _QWORD *v48;
  _QWORD *v50;
  unint64_t v51;
  _QWORD v52[2];
  char v53;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 272);
  v48 = (_QWORD *)(a2 + 280);
  if (v3 == (_QWORD *)(a2 + 280))
    return;
  v50 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_80;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v51 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0xB0uLL);
      v52[0] = v19;
      v52[1] = v50;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *((_QWORD *)v19 + 4) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v19 + 114) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *((_QWORD *)v19 + 21) = 0;
      v53 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
        v12 = (char *)v52[0];
        if (v37)
        {
          *(_QWORD *)v52[0] = *v37;
        }
        else
        {
          *(_QWORD *)v52[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v50;
          if (!*(_QWORD *)v12)
          {
LABEL_76:
            v52[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v52);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*(_QWORD *)v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (char **)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v50;
            if (*v50)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v50;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v47 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v47)
            operator delete(v47);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = *((_QWORD *)v12 + 1);
      if (v13 == v8)
        break;
      if (v51 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = *(char **)v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = *((id *)v12 + 2);
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    v39 = *(_OWORD *)(v3 + 5);
    v40 = *(_OWORD *)(v3 + 7);
    *(_OWORD *)(v12 + 56) = *(_OWORD *)(v3 + 9);
    *(_OWORD *)(v12 + 40) = v40;
    *(_OWORD *)(v12 + 24) = v39;
    v41 = *(_OWORD *)(v3 + 11);
    v42 = *(_OWORD *)(v3 + 13);
    v43 = *(_OWORD *)(v3 + 15);
    *(_OWORD *)(v12 + 120) = *(_OWORD *)(v3 + 17);
    *(_OWORD *)(v12 + 104) = v43;
    *(_OWORD *)(v12 + 88) = v42;
    *(_OWORD *)(v12 + 72) = v41;
    *((_QWORD *)v12 + 17) = v3[19];
    if (v12 + 16 != (char *)(v3 + 4))
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v12 + 144, (char *)v3[20], v3[21], (uint64_t)(v3[21] - v3[20]) >> 4);
    *((_QWORD *)v12 + 21) = v3[23];

LABEL_80:
    v44 = (_QWORD *)v3[1];
    if (v44)
    {
      do
      {
        v45 = v44;
        v44 = (_QWORD *)*v44;
      }
      while (v44);
    }
    else
    {
      do
      {
        v45 = (_QWORD *)v3[2];
        v46 = *v45 == (_QWORD)v3;
        v3 = v45;
      }
      while (!v46);
    }
    v3 = v45;
  }
  while (v45 != v48);
}

void sub_1B7CBDD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D05B30;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D05B30;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D05B30;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7CBDF94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D05B30;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 112;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D05BC0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D05BC0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D05BC0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7CBE1C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D05BC0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D05C50;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D05C50;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 632))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 632))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7CBE4C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 608);
      v7 = *(_QWORD *)(a1 + 600);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7CBE6CC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  char v10;
  double v11;
  _BOOL4 v12;
  double v14;
  char *v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  uint64_t **v48;

  v3 = *(_BYTE *)(a2 + 32);
  if (!v3)
    return;
  v5 = a1 + 8;
  v6 = *(double *)(a2 + 8);
  if (v6 < *(double *)(a1 + 8))
    return;
  v7 = *(uint64_t **)a2;
  v8 = *(double *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 33);
  v11 = *(double *)(a1 + 16);
  if (*(_DWORD *)(a1 + 36))
    v12 = v6 < v11;
  else
    v12 = v6 <= v11;
  if (v12)
  {
    if (v8 <= v11)
      v14 = *(double *)(a2 + 16);
    else
      v14 = *(double *)(a1 + 16);
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 304, *(_QWORD *)(a2 + 24), v9);
    v15 = *(char **)(a1 + 112);
    if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 192) <= 0)
    {
      v33 = *(double *)(a1 + 8);
      v34 = *(double *)(a1 + 16);
      if (v6 >= v33)
        v33 = v6;
      if (v34 >= v14)
        v34 = v14;
      *(double *)(a1 + 48) = v33;
      *(double *)(a1 + 56) = v34;
      if (!a3)
        goto LABEL_47;
    }
    else
    {
      if (v6 < *(double *)(a1 + 48))
      {
        v16 = *(double *)(a1 + 8);
        if (v6 >= v16)
          v16 = v6;
        *(double *)(a1 + 48) = v16;
      }
      if (v14 > *(double *)(a1 + 56))
      {
        v17 = *(double *)(a1 + 16);
        if (v17 >= v14)
          v17 = v14;
        *(double *)(a1 + 56) = v17;
      }
      if (!a3)
        goto LABEL_47;
    }
    if (v6 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v6);
      v15 = *(char **)(a1 + 112);
    }
LABEL_47:
    v35 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v15 >= v35)
    {
      v37 = 0x555555555555555;
      v38 = *(char **)(a1 + 104);
      v39 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v38) >> 4);
      v40 = v39 + 1;
      if (v39 + 1 > 0x555555555555555)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v38) >> 4);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 < 0x2AAAAAAAAAAAAAALL)
        v37 = v40;
      if (v37)
      {
        v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v37);
        v38 = *(char **)(a1 + 104);
        v15 = *(char **)(a1 + 112);
      }
      else
      {
        v42 = 0;
      }
      v43 = v37 + 48 * v39;
      *(_QWORD *)v43 = v7;
      *(double *)(v43 + 8) = v6;
      *(double *)(v43 + 16) = v14;
      *(_QWORD *)(v43 + 24) = v9;
      v44 = v37 + 48 * v42;
      *(_BYTE *)(v43 + 32) = v3;
      *(_BYTE *)(v43 + 33) = v10;
      *(_WORD *)(v43 + 40) = 0;
      *(_BYTE *)(v43 + 42) = 0;
      v36 = (_QWORD *)(v43 + 48);
      if (v15 != v38)
      {
        do
        {
          v45 = *((_OWORD *)v15 - 3);
          v46 = *((_OWORD *)v15 - 2);
          *(_OWORD *)(v43 - 21) = *(_OWORD *)(v15 - 21);
          *(_OWORD *)(v43 - 48) = v45;
          *(_OWORD *)(v43 - 32) = v46;
          v43 -= 48;
          v15 -= 48;
        }
        while (v15 != v38);
        v38 = *(char **)(a1 + 104);
      }
      *(_QWORD *)(a1 + 104) = v43;
      *(_QWORD *)(a1 + 112) = v36;
      *(_QWORD *)(a1 + 120) = v44;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_QWORD *)v15 = v7;
      *((double *)v15 + 1) = v6;
      *((double *)v15 + 2) = v14;
      *((_QWORD *)v15 + 3) = v9;
      v15[32] = v3;
      v15[33] = v10;
      *((_WORD *)v15 + 20) = 0;
      v36 = v15 + 48;
      v15[42] = 0;
    }
    *(_QWORD *)(a1 + 112) = v36;
    if (!*(_BYTE *)(a1 + 232) || *(double *)(a1 + 208) <= v6)
    {
      *(_QWORD *)(a1 + 200) = v7;
      *(double *)(a1 + 208) = v6;
      *(double *)(a1 + 216) = v8;
      *(_QWORD *)(a1 + 224) = v9;
      *(_BYTE *)(a1 + 232) = v3;
      *(_BYTE *)(a1 + 233) = v10;
    }
    if (*(_BYTE *)(a1 + 33))
    {
      v47 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v9);
      v48 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v47);
      if (!*((_BYTE *)v48 + 104) || *((double *)v48 + 10) <= v6)
      {
        v48[9] = v7;
        *((double *)v48 + 10) = v6;
        *((double *)v48 + 11) = v8;
        v48[12] = (uint64_t *)v9;
        *((_BYTE *)v48 + 104) = v3;
        *((_BYTE *)v48 + 105) = v10;
      }
    }
    return;
  }
  if (v6 < v11)
    v6 = *(double *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 496);
  v19 = *(_QWORD *)(a1 + 504);
  if (v18 >= v19)
  {
    v21 = *(_QWORD *)(a1 + 488);
    v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
    v23 = v22 + 1;
    if (v22 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
    if (2 * v24 > v23)
      v23 = 2 * v24;
    if (v24 >= 0x333333333333333)
      v25 = 0x666666666666666;
    else
      v25 = v23;
    if (v25)
      v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
    else
      v26 = 0;
    v27 = v25 + 40 * v22;
    v28 = v25 + 40 * v26;
    *(_QWORD *)v27 = v7;
    *(double *)(v27 + 8) = v6;
    *(double *)(v27 + 16) = v8;
    *(_QWORD *)(v27 + 24) = v9;
    *(_BYTE *)(v27 + 32) = v3;
    *(_BYTE *)(v27 + 33) = v10;
    v20 = v27 + 40;
    v30 = *(char **)(a1 + 488);
    v29 = *(char **)(a1 + 496);
    if (v29 != v30)
    {
      do
      {
        v31 = *(_OWORD *)(v29 - 40);
        v32 = *(_OWORD *)(v29 - 24);
        *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
        *(_OWORD *)(v27 - 24) = v32;
        *(_OWORD *)(v27 - 40) = v31;
        v27 -= 40;
        v29 -= 40;
      }
      while (v29 != v30);
      v29 = *(char **)(a1 + 488);
    }
    *(_QWORD *)(a1 + 488) = v27;
    *(_QWORD *)(a1 + 496) = v20;
    *(_QWORD *)(a1 + 504) = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *(_QWORD *)v18 = v7;
    *(double *)(v18 + 8) = v6;
    *(double *)(v18 + 16) = v8;
    *(_QWORD *)(v18 + 24) = v9;
    *(_BYTE *)(v18 + 32) = v3;
    v20 = v18 + 40;
    *(_BYTE *)(v18 + 33) = v10;
  }
  *(_QWORD *)(a1 + 496) = v20;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 634))
  {
    *(_BYTE *)(a1 + 636) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 636) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7CBEB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 488), *(_QWORD *)(a1 + 496), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 496) - *(_QWORD *)(a1 + 488)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7CBEC68(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  void *v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 512), *(id *)(a1 + 40));
  v9 = *(void **)(a1 + 248);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 128) = xmmword_1B7F54AF0;
  v10 = 0uLL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 256) = v9;
    operator delete(v9);
    v10 = 0uLL;
  }
  *(_OWORD *)(a1 + 248) = v10;
  *(_OWORD *)(a1 + 264) = v10;
  if (*(_QWORD *)(a1 + 296))
  {
    v11 = *(_QWORD **)(a1 + 280);
    v12 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 280) = a1 + 288;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    if (v11[1])
      v13 = (_QWORD *)v11[1];
    else
      v13 = v11;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 512));
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a1 + 488);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 636))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 636) = 0;
  }

}

void sub_1B7CBEE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 632))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7CBEEF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 648));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 632) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7CBF254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40C0BC8CBALL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7CBF400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7CBF66C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  char v18;

  v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v8 = 1;
    v9 = a6;
  }
  v13 = a5;
  v14 = v9;
  v15 = a7;
  v16 = a2;
  v17 = v8;
  v18 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  else
  {
    v11 = v7 <= a6;
    v12 = *(double *)(a1 + 40);
    if (v9 >= v12)
      v11 = 0;
    if (!v11 || a7 <= v12)
      v12 = a7;
    v14 = v9;
    v15 = v12;
    v17 = v11;
    if (v11)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 632))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7CC02F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7CC0394(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D05D00;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_WORD *)(a1 + 640) = 1;
  *(_BYTE *)(a1 + 642) = 0;
  *(_BYTE *)(a1 + 644) = 0;
  *(_QWORD *)(a1 + 648) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D05D00;
  v2 = *(void **)(a1 + 672);
  if (v2)
  {
    *(_QWORD *)(a1 + 680) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 608);
  if (v3)
  {
    *(_QWORD *)(a1 + 616) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 640) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_configureForStartTime(a1);

}

void sub_1B7CC0500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 648) = v4;
    v3 = v5;
  }

}

void sub_1B7CC0560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 82, a2);
  v7 = a2;
  v4 = a1[82];
  v5 = a1[79];
  a1[79] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[79]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 312) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7CC06F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[61];

  if (*(_BYTE *)(a1 + 640))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7CC079C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 642))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 641))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 640))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 643))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 680);
      v20 = *(_QWORD *)(a1 + 688);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 672);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 680);
        v35 = *(char **)(a1 + 672);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 672);
        }
        *(_QWORD *)(a1 + 672) = v30;
        *(_QWORD *)(a1 + 680) = v23;
        *(_QWORD *)(a1 + 688) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 680) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7CC0A3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 642))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 642) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 641))
    goto LABEL_5;
  v9 = *(void **)(a1 + 664);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_387);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 664);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 664);
  *(_QWORD *)(a1 + 664) = 0;

  *(_BYTE *)(a1 + 641) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 672);
    *(_QWORD *)(a1 + 688) = 0;
    *(_QWORD *)(a1 + 680) = 0;
    *(_QWORD *)(a1 + 672) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 672);
      v37 = *(__int128 **)(a1 + 680);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 680);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 680) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 672);
  v39 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 616) != *(_QWORD *)(a1 + 608))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 616) != *(_QWORD *)(a1 + 608));
  }
  *(_BYTE *)(a1 + 642) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 644))
    {
      *(_BYTE *)(a1 + 644) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 642) = 0;
LABEL_83:

  return v7;
}

void sub_1B7CC1134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 642) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 643) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 642))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 642))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 664);
    *(_QWORD *)(a1 + 664) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 641) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 641))
  {
    v8 = *(void **)(a1 + 664);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 664);
      *(_QWORD *)(a1 + 664) = v9;

      v8 = *(void **)(a1 + 664);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7CC1430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 640) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 640) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7CC1550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 640) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 640), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::archive((uint64_t)&v37, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(int **)(a1 + 400);
  if (v9 != (int *)(a1 + 408))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::archive((uint64_t)&v37, v9 + 10);
      v10 = *((_QWORD *)v9 + 4);
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (int *)*((_QWORD *)v9 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(int **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (int *)*((_QWORD *)v9 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (int *)(a1 + 408));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 608);
  for (k = *(int8x16_t **)(a1 + 616); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7CC18E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD **i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t j;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  id v62;
  _QWORD *v63;
  uint64_t v64;
  id v65;
  __n128 v66;
  void *v67[2];
  __int128 v68;
  int8x16_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  int8x16_t v74;
  uint64_t v75;
  uint64_t v76[4];
  void *__p;
  char *v78;
  unint64_t v79;
  _BYTE v80[160];
  uint64_t **v81;
  uint64_t *v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  int v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  __int128 v92;
  __int128 v93;
  int v94;
  __int128 v95;
  __int128 v96;
  int v97;
  void (**v98)(statistics::StatisticsEngine *__hidden);
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  _BYTE v105[32];
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;

  v62 = a2;
  *(_BYTE *)(a1 + 640) = objc_msgSend(v62, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v62;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)&v66.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v67 = 0u;
  v68 = 0u;
  v106 = 0;
  v65 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v105, (const unsigned __int8 *)objc_msgSend(v65, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v106));
  v98 = &off_1E6D09A88;
  v99 = 0;
  v103 = 0;
  v101 = 0;
  v102 = 0;
  v104 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v98, (PB::Reader *)v105);
  v64 = a1;
  v66.n128_u64[0] = v100;
  if (v99)
  {
    v73 = 0;
    memset(v76, 0, sizeof(v76));
    __p = 0;
    v79 = 0;
    v78 = 0;
    *(_DWORD *)v80 = 0;
    *(_OWORD *)&v80[8] = xmmword_1B7F54AF0;
    memset(&v80[24], 0, 90);
    memset(&v80[120], 0, 34);
    v83 = 0;
    v82 = 0;
    v81 = &v82;
    v84 = 0u;
    v85 = 0u;
    v86 = 1065353216;
    v87 = 0u;
    v88 = 0u;
    v89 = 0u;
    v90 = 0;
    v91 = 1065353216;
    v92 = 0u;
    v93 = 0u;
    v94 = 1065353216;
    v95 = 0u;
    v96 = 0u;
    v97 = 1065353216;
    v69 = vextq_s8(*(int8x16_t *)(v99 + 8), *(int8x16_t *)(v99 + 8), 8uLL);
    v4 = *(_QWORD *)(v99 + 72);
    v70 = *(_QWORD *)(v99 + 64);
    v71 = *(_BYTE *)(v99 + 185);
    v72 = *(_BYTE *)(v99 + 186);
    v74 = vextq_s8(*(int8x16_t *)(v99 + 24), *(int8x16_t *)(v99 + 24), 8uLL);
    v75 = v4;
    v5 = *(_QWORD *)(v99 + 80);
    v6 = *(_QWORD *)(v99 + 88);
    v63 = (_QWORD *)v99;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v79)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v79 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v79 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v78;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v78 = (char *)(v19 + 6);
          v79 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v78 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = (_QWORD *)v63[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::unarchive((uint64_t)&v107, v23);
      *(_OWORD *)&v80[96] = v113;
      *(_OWORD *)&v80[112] = v114;
      *(_OWORD *)&v80[128] = v115;
      *(_OWORD *)&v80[144] = v116;
      *(_OWORD *)&v80[32] = v109;
      *(_OWORD *)&v80[48] = v110;
      *(_OWORD *)&v80[64] = v111;
      *(_OWORD *)&v80[80] = v112;
      *(_OWORD *)v80 = v107;
      *(_OWORD *)&v80[16] = v108;
    }
    v24 = (_QWORD **)v63[17];
    for (i = (_QWORD **)v63[18]; v24 != i; *(_OWORD *)(v33 + 56) = v40)
    {
      v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::unarchive((uint64_t)&v107, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v82;
      v29 = &v82;
      v30 = &v82;
      if (v82)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_32;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_35;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_32:
      v33 = (char *)operator new(0xC8uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *((_QWORD *)v33 + 7) = 0xFFEFFFFFFFFFFFFFLL;
      *((_OWORD *)v33 + 4) = 0u;
      *((_OWORD *)v33 + 5) = 0u;
      *((_OWORD *)v33 + 6) = 0u;
      *((_OWORD *)v33 + 7) = 0u;
      *((_OWORD *)v33 + 8) = 0u;
      *(_OWORD *)(v33 + 138) = 0u;
      *((_OWORD *)v33 + 10) = 0u;
      *((_OWORD *)v33 + 11) = 0u;
      *((_WORD *)v33 + 96) = 0;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v81)
      {
        v81 = (uint64_t **)*v81;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v82, v32);
      ++v83;
LABEL_35:
      v34 = v116;
      v35 = v115;
      v36 = v114;
      *(_OWORD *)(v33 + 136) = v113;
      *(_OWORD *)(v33 + 152) = v36;
      *(_OWORD *)(v33 + 168) = v35;
      *(_OWORD *)(v33 + 184) = v34;
      v37 = v112;
      v38 = v111;
      v39 = v110;
      *(_OWORD *)(v33 + 72) = v109;
      *(_OWORD *)(v33 + 88) = v39;
      *(_OWORD *)(v33 + 104) = v38;
      *(_OWORD *)(v33 + 120) = v37;
      v40 = v108;
      *(_OWORD *)(v33 + 40) = v107;
      ++v24;
    }
    v41 = v63[5];
    for (j = v63[6]; v41 != j; v41 += 8)
    {
      v44 = *(double *)(*(_QWORD *)v41 + 8);
      v43 = *(double *)(*(_QWORD *)v41 + 16);
      if (v44 >= v43)
        v45 = *(double *)(*(_QWORD *)v41 + 16);
      else
        v45 = *(double *)(*(_QWORD *)v41 + 8);
      if (v43 < v44)
        v43 = *(double *)(*(_QWORD *)v41 + 8);
      HKIntervalMask<double>::_insertInterval(v76, v45, v43);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::operator=((uint64_t)&v66.n128_i64[1], (uint64_t)&v69);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)&v69);
  }
  v46 = v101;
  v47 = v102;
  if (v101 != v102)
  {
    v48 = (char *)v67[1];
    do
    {
      v49 = *(_QWORD *)(*(_QWORD *)v46 + 24);
      v50 = *(_QWORD *)(*(_QWORD *)v46 + 32);
      v51 = *(_QWORD *)(*(_QWORD *)v46 + 8);
      v52 = *(_QWORD *)(*(_QWORD *)v46 + 16);
      if ((unint64_t)v48 >= (unint64_t)v68)
      {
        v53 = (char *)v67[0];
        v54 = 0xCCCCCCCCCCCCCCCDLL * ((v48 - (char *)v67[0]) >> 3);
        v55 = v54 + 1;
        if (v54 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v68 - (unint64_t)v67[0]) >> 3) > v55)
          v55 = 0x999999999999999ALL * ((uint64_t)(v68 - (unint64_t)v67[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v68 - (unint64_t)v67[0]) >> 3) >= 0x333333333333333)
          v56 = 0x666666666666666;
        else
          v56 = v55;
        if (v56)
        {
          v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v56);
          v48 = (char *)v67[1];
          v53 = (char *)v67[0];
        }
        else
        {
          v57 = 0;
        }
        v58 = v56 + 40 * v54;
        *(_QWORD *)v58 = v50;
        *(_QWORD *)(v58 + 8) = v49;
        *(_QWORD *)(v58 + 16) = v51;
        *(_QWORD *)(v58 + 24) = v52;
        *(_WORD *)(v58 + 32) = 1;
        v59 = (char *)v58;
        if (v48 != v53)
        {
          do
          {
            v60 = *(_OWORD *)(v48 - 40);
            v61 = *(_OWORD *)(v48 - 24);
            *((_WORD *)v59 - 4) = *((_WORD *)v48 - 4);
            *(_OWORD *)(v59 - 24) = v61;
            *(_OWORD *)(v59 - 40) = v60;
            v59 -= 40;
            v48 -= 40;
          }
          while (v48 != v53);
          v53 = (char *)v67[0];
        }
        v48 = (char *)(v58 + 40);
        v67[0] = v59;
        v67[1] = (void *)(v58 + 40);
        *(_QWORD *)&v68 = v56 + 40 * v57;
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v48 = v50;
        *((_QWORD *)v48 + 1) = v49;
        *((_QWORD *)v48 + 2) = v51;
        *((_QWORD *)v48 + 3) = v52;
        *((_WORD *)v48 + 16) = 1;
        v48 += 40;
      }
      v67[1] = v48;
      v46 += 8;
    }
    while (v46 != v47);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v98);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::operator=((_QWORD *)(v64 + 112), &v66);
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)&v66.n128_i64[1]);

}

void sub_1B7CC2048(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x430]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_1B7F54AF0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_WORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 496);
  if (v2)
  {
    *(_QWORD *)(a1 + 504) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 448);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 408);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 368);
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 304);
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 288));
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[488];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[424];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 656));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 640) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7CC253C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 62), a2 + 31);
  v4 = a2[32].n128_u64[1];
  a2[32].n128_u64[1] = 0;
  v5 = (void *)a1[65];
  a1[65] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v12;
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 168);
  v15 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  v16 = *(_OWORD *)(a2 + 216);
  v17 = *(_OWORD *)(a2 + 232);
  v18 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v18;
  *(_OWORD *)(a1 + 232) = v17;
  *(_OWORD *)(a1 + 216) = v16;
  v19 = (_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  v20 = *(_QWORD **)(a2 + 280);
  if (v20 != (_QWORD *)(a2 + 288))
  {
    v21 = 0;
    v22 = (_QWORD *)(a1 + 288);
    while (1)
    {
      v23 = v20[4];
      v24 = (_QWORD *)(a1 + 288);
      if (v22 == v19)
        goto LABEL_12;
      v25 = v21;
      v26 = (_QWORD *)(a1 + 288);
      if (v21)
      {
        do
        {
          v24 = v25;
          v25 = (_QWORD *)v25[1];
        }
        while (v25);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v26[2];
          v27 = *v24 == (_QWORD)v26;
          v26 = v24;
        }
        while (v27);
      }
      if (v24[4] < v23)
      {
LABEL_12:
        if (v21)
          v28 = (uint64_t **)v24;
        else
          v28 = (uint64_t **)(a1 + 288);
        if (v21)
          v29 = (uint64_t **)(v24 + 1);
        else
          v29 = (uint64_t **)(a1 + 288);
        if (!*v29)
        {
LABEL_28:
          v32 = operator new(0xC8uLL);
          v33 = *((_OWORD *)v20 + 2);
          v34 = *((_OWORD *)v20 + 4);
          v32[3] = *((_OWORD *)v20 + 3);
          v32[4] = v34;
          v32[2] = v33;
          v35 = *((_OWORD *)v20 + 5);
          v36 = *((_OWORD *)v20 + 6);
          v37 = *((_OWORD *)v20 + 8);
          v32[7] = *((_OWORD *)v20 + 7);
          v32[8] = v37;
          v32[5] = v35;
          v32[6] = v36;
          v38 = *((_OWORD *)v20 + 9);
          v39 = *((_OWORD *)v20 + 10);
          v40 = *((_OWORD *)v20 + 11);
          *((_QWORD *)v32 + 24) = v20[24];
          v32[10] = v39;
          v32[11] = v40;
          v32[9] = v38;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 280), (uint64_t)v28, v29, (uint64_t *)v32);
        }
      }
      else
      {
        v29 = (uint64_t **)(a1 + 288);
        v28 = (uint64_t **)(a1 + 288);
        if (!v21)
          goto LABEL_28;
        v30 = v21;
        while (1)
        {
          while (1)
          {
            v28 = (uint64_t **)v30;
            v31 = v30[4];
            if (v31 <= v23)
              break;
            v30 = *v28;
            v29 = v28;
            if (!*v28)
              goto LABEL_28;
          }
          if (v31 >= v23)
            break;
          v30 = v28[1];
          if (!v30)
          {
            v29 = v28 + 1;
            goto LABEL_28;
          }
        }
      }
      v41 = (_QWORD *)v20[1];
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = (_QWORD *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (_QWORD *)v20[2];
          v27 = *v42 == (_QWORD)v20;
          v20 = v42;
        }
        while (!v27);
      }
      if (v42 == (_QWORD *)(a2 + 288))
        break;
      v21 = (_QWORD *)*v19;
      v22 = *(_QWORD **)(a1 + 280);
      v20 = v42;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 304, a2 + 304);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 344), *(const void **)(a2 + 344), *(_QWORD *)(a2 + 352), (uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 368, a2 + 368);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 408, a2 + 408);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 448, a2 + 448);
  return a1;
}

void sub_1B7CC2924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  v19 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 352) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 168);
  v11 = *(_OWORD *)(a2 + 184);
  v12 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  v13 = *(_OWORD *)(a2 + 232);
  v14 = *(_OWORD *)(a2 + 248);
  v15 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 248) = v14;
  *(_OWORD *)(a1 + 232) = v13;
  v16 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v16;
  v17 = a1 + 288;
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 288));
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  v18 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 288) = v18;
  v19 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v19;
  if (v19)
  {
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(a2 + 280) = a2 + 288;
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 296) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 280) = v17;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 344, (__n128 *)(a2 + 344));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 448, (uint64_t *)(a2 + 448));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  unint64_t v2;
  int8x8_t prime;
  double v5;
  id v6;
  double *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id WeakRetained;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  id v48;
  void *v49;
  char v50;
  float v51;
  _BOOL8 v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  _QWORD **v58;
  unint64_t v59;
  uint8x8_t v60;
  unint64_t v61;
  uint8x8_t v62;
  uint64_t v63;
  _QWORD *i;
  unint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _QWORD *v76;
  _QWORD *v77;
  BOOL v78;
  void *v79;
  uint64_t **v80;
  uint64_t *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  double v86;
  double v87;
  void *v88;
  void *v89;
  _QWORD *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  int v95;
  void *v96;
  void *v97;
  int v98;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  unint64_t v105;
  id v106;
  uint64_t v108;
  id v109;
  id v110;
  void *v111;
  uint64_t v112;
  void *__p[2];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _QWORD v123[3];
  _QWORD *v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = objc_alloc(MEMORY[0x1E0C99D68]);
  v7 = a2 + 5;
  if (v5 != -1.79769313e308)
    v7 = a2;
  v108 = (uint64_t)a2;
  v109 = (id)objc_msgSend(v6, "initWithTimeIntervalSinceReferenceDate:", *v7);
  if (a2[1] == 1.79769313e308)
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v9 = (void *)v8;
  v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = *(id *)(a1 + 16);
    if (objc_msgSend(v11, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v11, "underlyingSampleType");
      v12 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v12;
    }

  }
  v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v10, v109, v9);
  v14 = a1;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    prime = (int8x8_t)(a1 + 48);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v2 = (unint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v16 = *(uint64_t **)(v108 + 344);
      v17 = *(uint64_t **)(v108 + 352);
      while (v16 != v17)
      {
        v18 = *v16;
        v19 = objc_loadWeakRetained(*(id **)&prime);
        objc_msgSend(v19, "sourceForSourceID:", v18);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
        {
          if ((objc_msgSend((id)v2, "containsObject:", v20) & 1) == 0)
            objc_msgSend((id)v2, "addObject:", v20);
        }

        ++v16;
      }
      prime = (int8x8_t)objc_msgSend((id)v2, "copy");
      objc_msgSend((id)v13, "_setSources:", *(_QWORD *)&prime);

      v14 = a1;
    }
  }

  v123[0] = &off_1E6D05DD0;
  v124 = v123;
  v110 = (id)v13;
  v112 = *(_QWORD *)(v14 + 24);
  v21 = *(_OWORD *)(v108 + 232);
  v119 = *(_OWORD *)(v108 + 216);
  v120 = v21;
  v22 = *(_OWORD *)(v108 + 264);
  v121 = *(_OWORD *)(v108 + 248);
  v122 = v22;
  v23 = *(_OWORD *)(v108 + 168);
  v115 = *(_OWORD *)(v108 + 152);
  v116 = v23;
  v24 = *(_OWORD *)(v108 + 200);
  v117 = *(_OWORD *)(v108 + 184);
  v118 = v24;
  v25 = *(_OWORD *)(v108 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v108 + 120);
  v114 = v25;
  if (!v124)
    std::__throw_bad_function_call[abi:ne180100]();
  v26 = (double *)(*(uint64_t (**)(_QWORD *, void **))(*v124 + 48))(v124, __p);
  v28 = v26[5];
  v27 = v26[6];
  v29 = v26[7];
  v30 = *((_QWORD *)v26 + 8);
  v32 = v26[9];
  v31 = v26[10];
  v33 = v26[11];
  v34 = *(_QWORD *)(a1 + 24);
  v35 = _HKStatisticsOptionBaselineRelativeQuantities();
  v36 = *(void **)(a1 + 16);
  if ((v35 & v34) != 0)
    objc_msgSend(v36, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v36, "canonicalUnit");
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v112 & 2) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v111, v28);
    v13 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v110, "setAverageQuantity:", v13);

  }
  if ((v112 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v111, v29);
    v13 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v110, "setMinimumQuantity:", v13);

  }
  if ((v112 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v111, v27);
    v13 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v110, "setMaximumQuantity:", v13);

  }
  if ((v112 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v111, v32);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v110, "setMostRecentQuantity:", v37);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v31, v33);
    v13 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v110, "setMostRecentQuantityDateInterval:", v13);

  }
  objc_msgSend(v110, "setDataCount:", v30);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_164;
  if ((v112 & 2) != 0)
    v104 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v104 = 0;
  if ((v112 & 4) != 0)
    v103 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v103 = 0;
  if ((v112 & 8) != 0)
    v101 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v101 = 0;
  if ((v112 & 0x20) != 0)
  {
    v100 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v102 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v102 = 0;
    v100 = 0;
  }
  v106 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)__p = 0u;
  v114 = 0u;
  LODWORD(v115) = 1065353216;
  v38 = *(_QWORD **)(v108 + 280);
  if (v38 == (_QWORD *)(v108 + 288))
    goto LABEL_155;
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(v108, v38[4]);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = v39;
    if (!v39)
      goto LABEL_122;
    v41 = objc_msgSend(v39, "hash");
    v42 = v41;
    v43 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_64;
    v44 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v44.i16[0] = vaddlv_u8(v44);
    v45 = v44.u32[0];
    if (v44.u32[0] > 1uLL)
    {
      v2 = v41;
      if ((void *)v41 >= __p[1])
        v2 = v41 % (unint64_t)__p[1];
    }
    else
    {
      v2 = ((unint64_t)__p[1] - 1) & v41;
    }
    v46 = (uint64_t *)*((_QWORD *)__p[0] + v2);
    if (!v46 || (v13 = *v46) == 0)
    {
LABEL_64:
      v13 = (uint64_t)operator new(0xB8uLL);
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = v42;
      *(_QWORD *)(v13 + 16) = v40;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 168) = 0u;
      *(_OWORD *)(v13 + 152) = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_QWORD *)(v13 + 40) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_OWORD *)(v13 + 122) = 0u;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_WORD *)(v13 + 176) = 0;
      v51 = (float)(unint64_t)(*((_QWORD *)&v114 + 1) + 1);
      if (v43 && (float)(*(float *)&v115 * (float)v43) >= v51)
      {
LABEL_111:
        v66 = __p[0];
        v67 = (uint64_t *)*((_QWORD *)__p[0] + v2);
        if (v67)
        {
          *(_QWORD *)v13 = *v67;
        }
        else
        {
          *(_QWORD *)v13 = v114;
          *(_QWORD *)&v114 = v13;
          v66[v2] = &v114;
          if (!*(_QWORD *)v13)
          {
LABEL_120:
            ++*((_QWORD *)&v114 + 1);
            goto LABEL_121;
          }
          v68 = *(_QWORD *)(*(_QWORD *)v13 + 8);
          if ((v43 & (v43 - 1)) != 0)
          {
            if (v68 >= v43)
              v68 %= v43;
          }
          else
          {
            v68 &= v43 - 1;
          }
          v67 = (uint64_t *)((char *)__p[0] + 8 * v68);
        }
        *v67 = v13;
        goto LABEL_120;
      }
      v52 = v43 < 3 || (v43 & (v43 - 1)) != 0;
      v53 = v52 | (2 * v43);
      v54 = vcvtps_u32_f32(v51 / *(float *)&v115);
      if (v53 <= v54)
        prime = (int8x8_t)v54;
      else
        prime = (int8x8_t)v53;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v43 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_77;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v61 = vcvtps_u32_f32((float)*((unint64_t *)&v114 + 1) / *(float *)&v115);
        if (__p[1] < (void *)3
          || (v62 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v62.i16[0] = vaddlv_u8(v62), v62.u32[0] > 1uLL))
        {
          v61 = std::__next_prime(v61);
        }
        else
        {
          v63 = 1 << -(char)__clz(v61 - 1);
          if (v61 >= 2)
            v61 = v63;
        }
        if (*(_QWORD *)&prime <= v61)
          prime = (int8x8_t)v61;
        if (*(_QWORD *)&prime >= v43)
        {
          v43 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_77:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v55 = operator new(8 * *(_QWORD *)&prime);
            v56 = __p[0];
            __p[0] = v55;
            if (v56)
              operator delete(v56);
            v57 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v57++) = 0;
            while (*(_QWORD *)&prime != v57);
            v58 = (_QWORD **)v114;
            if ((_QWORD)v114)
            {
              v59 = *(_QWORD *)(v114 + 8);
              v60 = (uint8x8_t)vcnt_s8(prime);
              v60.i16[0] = vaddlv_u8(v60);
              if (v60.u32[0] > 1uLL)
              {
                if (v59 >= *(_QWORD *)&prime)
                  v59 %= *(_QWORD *)&prime;
              }
              else
              {
                v59 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v59) = &v114;
              for (i = *v58; i; v59 = v65)
              {
                v65 = i[1];
                if (v60.u32[0] > 1uLL)
                {
                  if (v65 >= *(_QWORD *)&prime)
                    v65 %= *(_QWORD *)&prime;
                }
                else
                {
                  v65 &= *(_QWORD *)&prime - 1;
                }
                if (v65 != v59)
                {
                  if (!*((_QWORD *)__p[0] + v65))
                  {
                    *((_QWORD *)__p[0] + v65) = v58;
                    goto LABEL_102;
                  }
                  *v58 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v65);
                  **((_QWORD **)__p[0] + v65) = i;
                  i = v58;
                }
                v65 = v59;
LABEL_102:
                v58 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v43 = (unint64_t)prime;
            goto LABEL_106;
          }
          v79 = __p[0];
          __p[0] = 0;
          if (v79)
            operator delete(v79);
          v43 = 0;
          __p[1] = 0;
        }
      }
LABEL_106:
      if ((v43 & (v43 - 1)) != 0)
      {
        if (v42 >= v43)
          v2 = v42 % v43;
        else
          v2 = v42;
      }
      else
      {
        v2 = (v43 - 1) & v42;
      }
      goto LABEL_111;
    }
    v105 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v47 = *(_QWORD *)(v13 + 8);
      if (v47 == v42)
        break;
      if (v45 > 1)
      {
        if (v47 >= v43)
          v47 %= v43;
      }
      else
      {
        v47 &= v105;
      }
      if (v47 != v2)
        goto LABEL_64;
LABEL_63:
      v13 = *(_QWORD *)v13;
      if (!v13)
        goto LABEL_64;
    }
    prime = (int8x8_t)*(id *)(v13 + 16);
    v48 = v40;
    v49 = v48;
    if ((id)prime != v48)
    {
      v50 = objc_msgSend(*(id *)&prime, "isEqualToString:", v48);

      if ((v50 & 1) != 0)
        goto LABEL_121;
      goto LABEL_63;
    }

LABEL_121:
    v69 = *(_OWORD *)(v38 + 5);
    *(_OWORD *)(v13 + 40) = *(_OWORD *)(v38 + 7);
    *(_OWORD *)(v13 + 24) = v69;
    v70 = *(_OWORD *)(v38 + 9);
    v71 = *(_OWORD *)(v38 + 11);
    v72 = *(_OWORD *)(v38 + 13);
    *(_OWORD *)(v13 + 104) = *(_OWORD *)(v38 + 15);
    *(_OWORD *)(v13 + 88) = v72;
    *(_OWORD *)(v13 + 72) = v71;
    *(_OWORD *)(v13 + 56) = v70;
    v73 = *(_OWORD *)(v38 + 17);
    v74 = *(_OWORD *)(v38 + 19);
    v75 = *(_OWORD *)(v38 + 21);
    *(_OWORD *)(v13 + 168) = *(_OWORD *)(v38 + 23);
    *(_OWORD *)(v13 + 152) = v75;
    *(_OWORD *)(v13 + 136) = v74;
    *(_OWORD *)(v13 + 120) = v73;

LABEL_122:
    v76 = (_QWORD *)v38[1];
    if (v76)
    {
      do
      {
        v77 = v76;
        v76 = (_QWORD *)*v76;
      }
      while (v76);
    }
    else
    {
      do
      {
        v77 = (_QWORD *)v38[2];
        v78 = *v77 == (_QWORD)v38;
        v38 = v77;
      }
      while (!v78);
    }
    v38 = v77;
  }
  while (v77 != (_QWORD *)(v108 + 288));
  v80 = (uint64_t **)v114;
  if ((_QWORD)v114)
  {
    prime = (int8x8_t)0x1E0CB6000uLL;
    do
    {
      v81 = v80[2];
      if ((v112 & 2) != 0)
      {
        if (!v124)
          goto LABEL_185;
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v111, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v124 + 48))(v124, (uint64_t *)v80 + 3) + 40));
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v104, "setObject:forKeyedSubscript:", v82, v81);

      }
      if ((v112 & 4) != 0)
      {
        if (!v124)
          goto LABEL_185;
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v111, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v124 + 48))(v124, (uint64_t *)v80 + 3) + 56));
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v103, "setObject:forKeyedSubscript:", v83, v81);

      }
      if ((v112 & 8) != 0)
      {
        if (!v124)
          goto LABEL_185;
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v111, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v124 + 48))(v124, (uint64_t *)v80 + 3) + 48));
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v101, "setObject:forKeyedSubscript:", v84, v81);

      }
      if ((v112 & 0x20) != 0)
      {
        if (!v124)
          std::__throw_bad_function_call[abi:ne180100]();
        v85 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v124 + 48))(v124, (uint64_t *)v80 + 3);
        v86 = *(double *)(v85 + 80);
        v87 = *(double *)(v85 + 88);
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v111, *(double *)(v85 + 72));
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v100, "setObject:forKeyedSubscript:", v88, v81);

        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v86, v87);
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v102, "setObject:forKeyedSubscript:", v89, v81);

      }
      if (!v124)
LABEL_185:
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v124 + 48))(v124, (uint64_t *)v80 + 3) + 64));
      v13 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v106, "setObject:forKeyedSubscript:", v13, v81);

      v80 = (uint64_t **)*v80;
    }
    while (v80);
  }
LABEL_155:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  if ((v112 & 2) != 0)
    objc_msgSend(v110, "setAverageQuantityBySource:", v104);
  if ((v112 & 4) != 0)
    objc_msgSend(v110, "setMinimumQuantityBySource:", v103);
  if ((v112 & 8) != 0)
    objc_msgSend(v110, "setMaximumQuantityBySource:", v101);
  if ((v112 & 0x20) != 0)
  {
    objc_msgSend(v110, "setMostRecentQuantityBySource:", v100);
    objc_msgSend(v110, "setMostRecentQuantityDateIntervalBySource:", v102);
  }
  objc_msgSend(v110, "setDataCountBySource:", v106);

LABEL_164:
  v90 = v124;
  if (v124 == v123)
  {
    v91 = 4;
    v90 = v123;
LABEL_168:
    (*(void (**)(void))(*v90 + 8 * v91))();
  }
  else if (v124)
  {
    v91 = 5;
    goto LABEL_168;
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v110, "averageQuantity");
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  if (v93)
  {
    objc_msgSend(v110, "averageQuantity");
    v13 = objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend((id)v13, "isCompatibleWithUnit:", v92) & 1) == 0)
    {

      goto LABEL_183;
    }
  }
  objc_msgSend(v110, "minimumQuantity");
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  if (v94)
  {
    objc_msgSend(v110, "minimumQuantity");
    prime = (int8x8_t)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(*(id *)&prime, "isCompatibleWithUnit:", v92))
    {
      v95 = 1;
      goto LABEL_177;
    }
  }
  objc_msgSend(v110, "maximumQuantity");
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  if (v96)
  {
    objc_msgSend(v110, "maximumQuantity");
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    v98 = objc_msgSend(v97, "isCompatibleWithUnit:", v92);

    v95 = v98 ^ 1;
    if (v94)
      goto LABEL_177;
LABEL_181:
    if (!v93)
      goto LABEL_182;
LABEL_178:

    if ((v95 & 1) == 0)
      goto LABEL_184;
LABEL_183:
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v92);
    goto LABEL_184;
  }
  v95 = 0;
  if (!v94)
    goto LABEL_181;
LABEL_177:

  if (v93)
    goto LABEL_178;
LABEL_182:

  if (v95)
    goto LABEL_183;
LABEL_184:

  return v110;
}

void sub_1B7CC394C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 152);
  if (v25 == (_QWORD *)(v23 - 176))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 176);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 328);
  v2 = *(_QWORD *)(a1 + 344);
  if (v1 != (*(_QWORD *)(a1 + 352) - v2) >> 3)
  {
    v4 = (void **)(a1 + 344);
    *(_QWORD *)(a1 + 352) = v2;
    std::vector<long long>::reserve((void **)(a1 + 344), v1);
    v5 = *(_QWORD **)(a1 + 320);
    if (v5)
    {
      v6 = *(char **)(a1 + 352);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 360);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 344);
            v6 = *(char **)(a1 + 352);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 344) = v16;
          *(_QWORD *)(a1 + 352) = v9;
          *(_QWORD *)(a1 + 360) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 352) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7CC3D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  _QWORD *v6;
  double *v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  char v16;
  double v17;
  int v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double *j;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  id WeakRetained;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  unint64_t v56;
  uint64_t **v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  double *v63;
  __int128 v64;
  __int128 *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  _OWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  double v75;
  double *i;
  unint64_t v77;
  __int128 *v78;
  __int128 v79;
  __int128 v80;
  char *v81;
  char *v82;
  __int128 *v83;
  __int128 v84;
  __int128 v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  unint64_t v90;
  uint64_t **v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  BOOL v95;
  double v96;
  void *v97;
  void *v98;
  id *location;
  id v100;
  uint64_t v101;
  char **v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int16 v109;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v101 = a1 + 120;
    v102 = (char **)(a1 + 96);
    location = (id *)(a1 + 88);
    v6 = (_QWORD *)(a1 + 288);
    do
    {
      v7 = *(double **)(a1 + 96);
      v8 = *(__int128 **)(a1 + 104);
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          v30 = a2;
          v31 = a2;
          v32 = v5;
          v33 = *(_QWORD *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              v34 = *(double *)(v33 + 8);
              v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31)
                v31 = *(double *)(v33 + 8);
              if (v35 > v5)
                v37 = *(double *)(v33 + 16);
              else
                v37 = v30;
              if (v35 < v30)
              {
                v32 = v5;
                v30 = v37;
              }
              v33 += 48;
            }
            while ((__int128 *)v33 != v8);
          }
          if (v30 >= v31)
            v38 = v31;
          else
            v38 = v30;
          v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            v40 = v39 * floor(v38 / v39);
            v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41)
              v38 = v40;
            else
              v38 = v41;
          }
          *v102 = 0;
          v102[1] = 0;
          v102[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            v45 = *(char **)(a1 + 96);
            v44 = *(char **)(a1 + 104);
            v46 = v42;
            if (v44 != v45)
            {
              do
              {
                v47 = *((_OWORD *)v44 - 3);
                v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              v44 = *v102;
            }
            *(_QWORD *)(a1 + 96) = v46;
            *(_QWORD *)(a1 + 104) = v42;
            *(_QWORD *)(a1 + 112) = &v42[48 * v43];
            if (v44)
              operator delete(v44);
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          v50 = __clz(v9);
          if (WeakRetained)
          {
            *(_QWORD *)&v104 = a1;
            v51 = 126 - 2 * v50;
            if (v7 == (double *)v8)
              v52 = 0;
            else
              v52 = v51;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*,false>((uint64_t)v7, v8, (uint64_t)&v104, v52, 1);
          }
          else
          {
            v60 = 126 - 2 * v50;
            if (v7 == (double *)v8)
              v52 = 0;
            else
              v52 = v60;
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*,false>((uint64_t)v7, v8, v52, 1);
          if (*(_BYTE *)(a1 + 25))
            v100 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v100 = 0;
          if (v7 == (double *)v8)
          {
LABEL_140:
            v92 = *(_QWORD **)(a1 + 280);
            if (v92 != v6)
            {
              do
              {
                v93 = (_QWORD *)v92[1];
                if (v93)
                {
                  do
                  {
                    v94 = v93;
                    v93 = (_QWORD *)*v93;
                  }
                  while (v93);
                }
                else
                {
                  do
                  {
                    v94 = (_QWORD *)v92[2];
                    v95 = *v94 == (_QWORD)v92;
                    v92 = v94;
                  }
                  while (!v95);
                }
                v92 = v94;
              }
              while (v94 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7)
              operator delete(v7);
            goto LABEL_152;
          }
          v61 = 0;
          v62 = 0;
          v63 = v7;
          while (2)
          {
            v64 = *((_OWORD *)v63 + 1);
            v104 = *(_OWORD *)v63;
            v105 = v64;
            v106 = *((_QWORD *)v63 + 4);
            if (!(_BYTE)v106 || *((double *)&v104 + 1) > v38)
            {
              v65 = *(__int128 **)(a1 + 104);
              v66 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v65 >= v66)
              {
                v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - *v102) >> 4);
                v71 = v70 + 1;
                if (v70 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (_QWORD)*v102) >> 4);
                if (2 * v72 > v71)
                  v71 = 2 * v72;
                if (v72 >= 0x2AAAAAAAAAAAAAALL)
                  v73 = 0x555555555555555;
                else
                  v73 = v71;
                if (v73)
                  v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v73);
                else
                  v74 = 0;
                v78 = (__int128 *)(v73 + 48 * v70);
                v79 = *(_OWORD *)v63;
                v80 = *((_OWORD *)v63 + 2);
                v78[1] = *((_OWORD *)v63 + 1);
                v78[2] = v80;
                *v78 = v79;
                v82 = *(char **)(a1 + 96);
                v81 = *(char **)(a1 + 104);
                v83 = v78;
                if (v81 != v82)
                {
                  do
                  {
                    v84 = *((_OWORD *)v81 - 3);
                    v85 = *((_OWORD *)v81 - 2);
                    *(__int128 *)((char *)v83 - 21) = *(_OWORD *)(v81 - 21);
                    *(v83 - 3) = v84;
                    *(v83 - 2) = v85;
                    v83 -= 3;
                    v81 -= 48;
                  }
                  while (v81 != v82);
                  v81 = *v102;
                }
                v69 = v78 + 3;
                *(_QWORD *)(a1 + 96) = v83;
                *(_QWORD *)(a1 + 104) = v78 + 3;
                *(_QWORD *)(a1 + 112) = v73 + 48 * v74;
                if (v81)
                  operator delete(v81);
              }
              else
              {
                v67 = *(_OWORD *)v63;
                v68 = *((_OWORD *)v63 + 2);
                v65[1] = *((_OWORD *)v63 + 1);
                v65[2] = v68;
                *v65 = v67;
                v69 = v65 + 3;
              }
              *(_QWORD *)(a1 + 104) = v69;
LABEL_139:
              v63 += 6;
              if (v63 == (double *)v8)
                goto LABEL_140;
              continue;
            }
            break;
          }
          v75 = *(double *)&v105;
          if (*(double *)&v105 > v38)
            v75 = v38;
          *(double *)&v105 = v75;
          for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && *((double *)&v104 + 1) >= *i; i += 2)
          {
            if (*((double *)&v104 + 1) < i[1])
              goto LABEL_139;
          }
          if ((v62 & 1) != 0)
          {
            v77 = *((_QWORD *)&v105 + 1);
            if (v61 == *((_QWORD *)&v105 + 1) || *(_BYTE *)(a1 + 24))
              HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(v101, (double *)&v104);
          }
          else
          {
            HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(v101, (double *)&v104);
            v77 = *((_QWORD *)&v105 + 1);
            v61 = *((_QWORD *)&v105 + 1);
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_138;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(a1, v77);
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v86)
            goto LABEL_137;
          objc_msgSend(v100, "objectForKeyedSubscript:", v86);
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          v88 = v87;
          if (v87)
          {
            if (objc_msgSend(v87, "longLongValue") != v77 && !*(_BYTE *)(a1 + 24))
            {
LABEL_136:

LABEL_137:
LABEL_138:
              v62 = 1;
              goto LABEL_139;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v77);
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v100, "setObject:forKeyedSubscript:", v89, v86);

          }
          v90 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(a1, v77);
          v91 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsForSource(a1, v90);
          HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample((uint64_t)v91, (double *)&v104);
          goto LABEL_136;
        }
        v10 = *((unsigned __int8 *)v7 + 42);
        v11 = *((unsigned __int8 *)v7 + 41);
        v12 = *((unsigned __int8 *)v7 + 40);
        v13 = v7[1];
        v14 = v7[2];
        v15 = *((_QWORD *)v7 + 3);
        v16 = *((_BYTE *)v7 + 33);
        if (v14 <= a2)
          v17 = v7[2];
        else
          v17 = a2;
        if (v13 < a2)
          v18 = *((unsigned __int8 *)v7 + 32);
        else
          v18 = 0;
        if (v13 < a2)
          v19 = 0;
        else
          v19 = *((_BYTE *)v7 + 33);
        if (v13 < a2)
        {
          v20 = 0;
        }
        else
        {
          v17 = v7[2];
          v20 = *((_QWORD *)v7 + 3);
        }
        if (v13 < a2)
          v21 = 0.0;
        else
          v21 = v7[2];
        if (v13 < a2)
          v22 = 0.0;
        else
          v22 = *v7;
        if (v13 < a2)
          v23 = 0.0;
        else
          v23 = v7[1];
        if (v13 < a2)
          v24 = 0;
        else
          v24 = *((unsigned __int8 *)v7 + 32);
        if (*((_BYTE *)v7 + 32))
        {
          v14 = v17;
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
        }
        if (*((_BYTE *)v7 + 32))
          v25 = v21;
        else
          v25 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v26 = v22;
        else
          v26 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v27 = v23;
        else
          v27 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v28 = v24;
        else
          v28 = 0;
        *(double *)&v104 = *v7;
        *((double *)&v104 + 1) = v13;
        *(double *)&v105 = v14;
        *((_QWORD *)&v105 + 1) = v15;
        LOBYTE(v106) = v18;
        BYTE1(v106) = v16;
        *(_DWORD *)((char *)&v106 + 2) = *(_DWORD *)((char *)v7 + 34);
        HIWORD(v106) = *((_WORD *)v7 + 19);
        *(double *)&v107 = v26;
        *((double *)&v107 + 1) = v27;
        *(double *)&v108 = v25;
        *((_QWORD *)&v108 + 1) = v20;
        LOBYTE(v109) = v28;
        HIBYTE(v109) = v19;
        for (j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            v53 = v12 != 0;
            v54 = v11 != 0;
            v55 = v10 != 0;
            if (!v28)
              goto LABEL_150;
LABEL_88:
            LOWORD(v103) = v109;
            v58 = v108;
            v59 = *v102;
            *(_OWORD *)v59 = v107;
            *((_OWORD *)v59 + 1) = v58;
            *((_QWORD *)v59 + 4) = v103;
            v59[40] = v53;
            v59[41] = v54;
            v59[42] = v55;
            goto LABEL_151;
          }
        }
        v53 = v12 != 0;
        v54 = v11 != 0;
        v55 = v10 != 0;
        if (v18)
        {
          HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(v101, (double *)&v104);
          if (*(_BYTE *)(a1 + 25))
          {
            v56 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(a1, v15);
            v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsForSource(a1, v56);
            HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample((uint64_t)v57, (double *)&v104);
          }
          v53 = 1;
          v54 = 1;
          v55 = 1;
        }
        if (v28)
          goto LABEL_88;
LABEL_150:
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
      }
LABEL_151:
      *(double *)(a1 + 56) = a2;
LABEL_152:
      v96 = *(double *)(a1 + 56);
      if (v96 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>]");
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v97, "handleFailureInFunction:file:lineNumber:description:", v98, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v96 = *(double *)(a1 + 56);
      }
      v5 = v96;
    }
    while (v96 < a2);
  }
}

void sub_1B7CC44E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(uint64_t a1, double *a2)
{
  double result;
  int v3;
  int v4;
  uint64_t v5;
  __int128 v6;

  result = *a2;
  v3 = 2 * (*a2 != -1.79769313e308);
  if (*a2 == 1.79769313e308)
    v3 = 1;
  if (v3)
  {
    if (v3 == 1)
    {
      if (!*(_DWORD *)a1)
      {
        v4 = 1;
        goto LABEL_14;
      }
    }
    else if (v3 == 2)
    {
      if (*(_DWORD *)a1 != 2)
      {
        v4 = 2;
LABEL_14:
        *(_DWORD *)a1 = v4;
        *(_OWORD *)(a1 + 8) = xmmword_1B7F54AF0;
        v5 = a1 + 8;
        *(_OWORD *)(a1 + 104) = 0u;
        *(_OWORD *)(a1 + 88) = 0u;
        *(_OWORD *)(a1 + 72) = 0u;
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        v6 = *(_OWORD *)(a1 + 136);
        *(_WORD *)(a1 + 112) = *(_WORD *)(a1 + 152);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 120);
        *(_OWORD *)(a1 + 96) = v6;
        return HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v5, a2);
      }
LABEL_10:
      v5 = a1 + 8;
      return HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v5, a2);
    }
  }
  else if (!*(_DWORD *)a1 && !*(_QWORD *)(a1 + 72))
  {
    goto LABEL_10;
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 288);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 288);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 288) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 280);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 280), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 368), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 408);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7CC476C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 448);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7CC483C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0xC8uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *((_QWORD *)v9 + 7) = 0xFFEFFFFFFFFFFFFFLL;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 5) = 0u;
    *((_OWORD *)v9 + 6) = 0u;
    *((_OWORD *)v9 + 7) = 0u;
    *((_OWORD *)v9 + 8) = 0u;
    *(_OWORD *)(v9 + 138) = 0u;
    *((_WORD *)v9 + 96) = 0;
    *((_OWORD *)v9 + 10) = 0u;
    *((_OWORD *)v9 + 11) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 344);
      v11 = *(char **)(*(_QWORD *)a3 + 352);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 352);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 352);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 344);
      v24 = *(char **)(*(_QWORD *)a3 + 352);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 352);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 352);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 344);
            v31 = *(char **)(*(_QWORD *)a3 + 352);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 352);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 352);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D05DD0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D05DD0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 640))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 640))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7CC6B80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 616);
      v7 = *(_QWORD *)(a1 + 608);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7CC6D88(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  char v10;
  double v11;
  _BOOL4 v12;
  double v14;
  char *v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  uint64_t **v48;

  v3 = *(_BYTE *)(a2 + 32);
  if (!v3)
    return;
  v5 = a1 + 8;
  v6 = *(double *)(a2 + 8);
  if (v6 < *(double *)(a1 + 8))
    return;
  v7 = *(uint64_t **)a2;
  v8 = *(double *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 33);
  v11 = *(double *)(a1 + 16);
  if (*(_DWORD *)(a1 + 36))
    v12 = v6 < v11;
  else
    v12 = v6 <= v11;
  if (v12)
  {
    if (v8 <= v11)
      v14 = *(double *)(a2 + 16);
    else
      v14 = *(double *)(a1 + 16);
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 312, *(_QWORD *)(a2 + 24), v9);
    v15 = *(char **)(a1 + 112);
    if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 200) <= 0)
    {
      v33 = *(double *)(a1 + 8);
      v34 = *(double *)(a1 + 16);
      if (v6 >= v33)
        v33 = v6;
      if (v34 >= v14)
        v34 = v14;
      *(double *)(a1 + 48) = v33;
      *(double *)(a1 + 56) = v34;
      if (!a3)
        goto LABEL_47;
    }
    else
    {
      if (v6 < *(double *)(a1 + 48))
      {
        v16 = *(double *)(a1 + 8);
        if (v6 >= v16)
          v16 = v6;
        *(double *)(a1 + 48) = v16;
      }
      if (v14 > *(double *)(a1 + 56))
      {
        v17 = *(double *)(a1 + 16);
        if (v17 >= v14)
          v17 = v14;
        *(double *)(a1 + 56) = v17;
      }
      if (!a3)
        goto LABEL_47;
    }
    if (v6 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime(v5, v6);
      v15 = *(char **)(a1 + 112);
    }
LABEL_47:
    v35 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v15 >= v35)
    {
      v37 = 0x555555555555555;
      v38 = *(char **)(a1 + 104);
      v39 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v38) >> 4);
      v40 = v39 + 1;
      if (v39 + 1 > 0x555555555555555)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v38) >> 4);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 < 0x2AAAAAAAAAAAAAALL)
        v37 = v40;
      if (v37)
      {
        v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v37);
        v38 = *(char **)(a1 + 104);
        v15 = *(char **)(a1 + 112);
      }
      else
      {
        v42 = 0;
      }
      v43 = v37 + 48 * v39;
      *(_QWORD *)v43 = v7;
      *(double *)(v43 + 8) = v6;
      *(double *)(v43 + 16) = v14;
      *(_QWORD *)(v43 + 24) = v9;
      v44 = v37 + 48 * v42;
      *(_BYTE *)(v43 + 32) = v3;
      *(_BYTE *)(v43 + 33) = v10;
      *(_WORD *)(v43 + 40) = 0;
      *(_BYTE *)(v43 + 42) = 0;
      v36 = (_QWORD *)(v43 + 48);
      if (v15 != v38)
      {
        do
        {
          v45 = *((_OWORD *)v15 - 3);
          v46 = *((_OWORD *)v15 - 2);
          *(_OWORD *)(v43 - 21) = *(_OWORD *)(v15 - 21);
          *(_OWORD *)(v43 - 48) = v45;
          *(_OWORD *)(v43 - 32) = v46;
          v43 -= 48;
          v15 -= 48;
        }
        while (v15 != v38);
        v38 = *(char **)(a1 + 104);
      }
      *(_QWORD *)(a1 + 104) = v43;
      *(_QWORD *)(a1 + 112) = v36;
      *(_QWORD *)(a1 + 120) = v44;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_QWORD *)v15 = v7;
      *((double *)v15 + 1) = v6;
      *((double *)v15 + 2) = v14;
      *((_QWORD *)v15 + 3) = v9;
      v15[32] = v3;
      v15[33] = v10;
      *((_WORD *)v15 + 20) = 0;
      v36 = v15 + 48;
      v15[42] = 0;
    }
    *(_QWORD *)(a1 + 112) = v36;
    if (!*(_BYTE *)(a1 + 280) || *(double *)(a1 + 256) <= v6)
    {
      *(_QWORD *)(a1 + 248) = v7;
      *(double *)(a1 + 256) = v6;
      *(double *)(a1 + 264) = v8;
      *(_QWORD *)(a1 + 272) = v9;
      *(_BYTE *)(a1 + 280) = v3;
      *(_BYTE *)(a1 + 281) = v10;
      if (!*(_BYTE *)(a1 + 240) || *(double *)(a1 + 216) <= v6)
      {
        *(_QWORD *)(a1 + 208) = v7;
        *(double *)(a1 + 216) = v6;
        *(double *)(a1 + 224) = v8;
        *(_QWORD *)(a1 + 232) = v9;
        *(_BYTE *)(a1 + 240) = v3;
        *(_BYTE *)(a1 + 241) = v10;
      }
    }
    if (*(_BYTE *)(a1 + 33))
    {
      v47 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(v5, v9);
      v48 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsForSource(v5, v47);
      if (!*((_BYTE *)v48 + 152) || *((double *)v48 + 16) <= v6)
      {
        v48[15] = v7;
        *((double *)v48 + 16) = v6;
        *((double *)v48 + 17) = v8;
        v48[18] = (uint64_t *)v9;
        *((_BYTE *)v48 + 152) = v3;
        *((_BYTE *)v48 + 153) = v10;
        if (!*((_BYTE *)v48 + 112) || *((double *)v48 + 11) <= v6)
        {
          v48[10] = v7;
          *((double *)v48 + 11) = v6;
          *((double *)v48 + 12) = v8;
          v48[13] = (uint64_t *)v9;
          *((_BYTE *)v48 + 112) = v3;
          *((_BYTE *)v48 + 113) = v10;
        }
      }
    }
    return;
  }
  if (v6 < v11)
    v6 = *(double *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 504);
  v19 = *(_QWORD *)(a1 + 512);
  if (v18 >= v19)
  {
    v21 = *(_QWORD *)(a1 + 496);
    v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
    v23 = v22 + 1;
    if (v22 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
    if (2 * v24 > v23)
      v23 = 2 * v24;
    if (v24 >= 0x333333333333333)
      v25 = 0x666666666666666;
    else
      v25 = v23;
    if (v25)
      v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
    else
      v26 = 0;
    v27 = v25 + 40 * v22;
    v28 = v25 + 40 * v26;
    *(_QWORD *)v27 = v7;
    *(double *)(v27 + 8) = v6;
    *(double *)(v27 + 16) = v8;
    *(_QWORD *)(v27 + 24) = v9;
    *(_BYTE *)(v27 + 32) = v3;
    *(_BYTE *)(v27 + 33) = v10;
    v20 = v27 + 40;
    v30 = *(char **)(a1 + 496);
    v29 = *(char **)(a1 + 504);
    if (v29 != v30)
    {
      do
      {
        v31 = *(_OWORD *)(v29 - 40);
        v32 = *(_OWORD *)(v29 - 24);
        *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
        *(_OWORD *)(v27 - 24) = v32;
        *(_OWORD *)(v27 - 40) = v31;
        v27 -= 40;
        v29 -= 40;
      }
      while (v29 != v30);
      v29 = *(char **)(a1 + 496);
    }
    *(_QWORD *)(a1 + 496) = v27;
    *(_QWORD *)(a1 + 504) = v20;
    *(_QWORD *)(a1 + 512) = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *(_QWORD *)v18 = v7;
    *(double *)(v18 + 8) = v6;
    *(double *)(v18 + 16) = v8;
    *(_QWORD *)(v18 + 24) = v9;
    *(_BYTE *)(v18 + 32) = v3;
    v20 = v18 + 40;
    *(_BYTE *)(v18 + 33) = v10;
  }
  *(_QWORD *)(a1 + 504) = v20;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 642))
  {
    *(_BYTE *)(a1 + 644) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 644) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7CC728C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 496), *(_QWORD *)(a1 + 504), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 504) - *(_QWORD *)(a1 + 496)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7CC7374(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *i;
  _QWORD *v15;

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 520), *(id *)(a1 + 40));
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  if (*(_QWORD *)(a1 + 304))
  {
    v9 = *(_QWORD **)(a1 + 288);
    v10 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 288) = a1 + 296;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    if (v9[1])
      v11 = (_QWORD *)v9[1];
    else
      v11 = v9;
    if (v11)
    {
      v12 = (_QWORD *)v11[2];
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if ((_QWORD *)*v12 == v11)
        {
          *v12 = 0;
          while (1)
          {
            v15 = (_QWORD *)v12[1];
            if (!v15)
              break;
            do
            {
              v12 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; v13 = (_QWORD *)v12[1])
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (i = (_QWORD *)v12[2]; i; i = (_QWORD *)i[2])
          v12 = i;
        v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong(v8, *(id *)(a1 + 520));
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a1 + 496);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 644))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 644) = 0;
  }

}

void sub_1B7CC7520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7CC75A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 656));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 640) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7CC7908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C4099229AECLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7CC7AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7CC7D20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  char v18;

  v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v8 = 1;
    v9 = a6;
  }
  v13 = a5;
  v14 = v9;
  v15 = a7;
  v16 = a2;
  v17 = v8;
  v18 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  else
  {
    v11 = v7 <= a6;
    v12 = *(double *)(a1 + 40);
    if (v9 >= v12)
      v11 = 0;
    if (!v11 || a7 <= v12)
      v12 = a7;
    v14 = v9;
    v15 = v12;
    v17 = v11;
    if (v11)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 640))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7CC89A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7CC8A48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::archive(uint64_t a1, int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::archive((uint64_t)v6, (uint64_t)(a2 + 2));
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(*(int8x16_t *)(a2 + 30), *(int8x16_t *)(a2 + 30), 8uLL);
  v6[1] = *((_QWORD *)a2 + 17);
  v6[2] = *((_QWORD *)a2 + 18);
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7CC8B50(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::unarchive(uint64_t a1, _QWORD *a2)
{
  int8x16_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)(a1 + 8) = xmmword_1B7F54AF0;
  v2 = 0uLL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 98) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  v3 = a2[16];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    v5 = *(int8x16_t *)(v3 + 88);
    v6 = *(_QWORD *)(v3 + 104);
    v7 = *(_QWORD *)(v3 + 176);
    v8 = *(_QWORD *)(v3 + 168);
    v9 = *(_QWORD *)(v3 + 56);
    v10 = *(_QWORD *)(v3 + 48);
    v11 = *(_QWORD *)(v3 + 40);
    v12 = *(_QWORD *)(v3 + 112);
    if (v12)
    {
      v2 = *(int8x16_t *)(v12 + 24);
      v13 = *(_QWORD *)(v12 + 8);
      v14 = 1;
      v12 = *(_QWORD *)(v12 + 16);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v7;
    *(int8x16_t *)(a1 + 48) = vextq_s8(v5, v5, 8uLL);
    *(_QWORD *)(a1 + 64) = v6;
    *(_QWORD *)(a1 + 72) = v4;
    v2 = vextq_s8(v2, v2, 8uLL);
    *(int8x16_t *)(a1 + 80) = v2;
    *(_QWORD *)(a1 + 96) = v13;
    *(_QWORD *)(a1 + 104) = v12;
    *(_BYTE *)(a1 + 112) = v14;
  }
  *(_DWORD *)a1 = a2[17];
  v15 = a2[14];
  if (v15)
  {
    v2.i64[0] = *(_QWORD *)(v15 + 8);
    v16 = *(_QWORD *)(v15 + 16);
    *(int8x16_t *)(a1 + 120) = vextq_s8(*(int8x16_t *)(v15 + 24), *(int8x16_t *)(v15 + 24), 8uLL);
    *(_QWORD *)(a1 + 136) = v2.i64[0];
    *(_QWORD *)(a1 + 144) = v16;
    *(_WORD *)(a1 + 152) = 1;
  }
  return *(double *)v2.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D05E80;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_WORD *)(a1 + 592) = 1;
  *(_BYTE *)(a1 + 594) = 0;
  *(_BYTE *)(a1 + 596) = 0;
  *(_QWORD *)(a1 + 600) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 640) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D05E80;
  v2 = *(void **)(a1 + 624);
  if (v2)
  {
    *(_QWORD *)(a1 + 632) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 560);
  if (v3)
  {
    *(_QWORD *)(a1 + 568) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 592) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_configureForStartTime(a1);

}

void sub_1B7CC8DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::configureMergeAnchor(double *a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*((_QWORD *)a1 + 5))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *((_QWORD *)a1 + 75) = v4;
    v3 = v5;
    if (a1[31] == -1.79769313e308)
      *((_QWORD *)a1 + 31) = v4;
  }

}

void sub_1B7CC8E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 76, a2);
  v7 = a2;
  v4 = a1[76];
  v5 = a1[73];
  a1[73] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[73]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 304) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7CC8FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[55];

  if (*(_BYTE *)(a1 + 592))
    return 0;
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7CC9058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 594))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 593))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 592))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 595))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 632);
      v20 = *(_QWORD *)(a1 + 640);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 624);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 632);
        v35 = *(char **)(a1 + 624);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 624);
        }
        *(_QWORD *)(a1 + 624) = v30;
        *(_QWORD *)(a1 + 632) = v23;
        *(_QWORD *)(a1 + 640) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 632) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7CC92F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 594))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 594) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 593))
    goto LABEL_5;
  v9 = *(void **)(a1 + 616);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_388);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 616);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 616);
  *(_QWORD *)(a1 + 616) = 0;

  *(_BYTE *)(a1 + 593) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 624);
    *(_QWORD *)(a1 + 640) = 0;
    *(_QWORD *)(a1 + 632) = 0;
    *(_QWORD *)(a1 + 624) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 624);
      v37 = *(__int128 **)(a1 + 632);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 632);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 632) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 624);
  v39 = *(_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560));
  }
  *(_BYTE *)(a1 + 594) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 596))
    {
      *(_BYTE *)(a1 + 596) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 594) = 0;
LABEL_83:

  return v7;
}

void sub_1B7CC99F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 594) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 595) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 594))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 594))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 616);
    *(_QWORD *)(a1 + 616) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 593) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 593))
  {
    v8 = *(void **)(a1 + 616);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 616);
      *(_QWORD *)(a1 + 616) = v9;

      v8 = *(void **)(a1 + 616);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7CC9CEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 592) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 592) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7CC9E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 592) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 592), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::archive((uint64_t)&v37, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 352);
  if (v9 != (_QWORD *)(a1 + 360))
  {
    do
    {
      HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::archive((uint64_t)&v37, (uint64_t)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 360));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 560);
  for (k = *(int8x16_t **)(a1 + 568); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7CCA1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t **v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t i;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  id v78;
  _QWORD *v79;
  uint64_t v80;
  id v81;
  uint64_t *v82;
  int8x16_t v83;
  int8x16_t v84;
  __n128 v85;
  void *v86[2];
  __int128 v87;
  int8x16_t v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  int8x16_t v93;
  uint64_t v94;
  uint64_t v95[4];
  void *__p[2];
  __int128 v97;
  unint64_t v98;
  __int128 v99;
  _QWORD v100[10];
  uint64_t **v101;
  uint64_t *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  int v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  int v114;
  __int128 v115;
  __int128 v116;
  int v117;
  void (**v118)(statistics::StatisticsEngine *__hidden);
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  _BYTE v125[32];
  uint64_t v126[3];

  v78 = a2;
  *(_BYTE *)(a1 + 592) = objc_msgSend(v78, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v78;
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)&v85.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v86 = 0u;
  v87 = 0u;
  v126[0] = 0;
  v81 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v125, (const unsigned __int8 *)objc_msgSend(v81, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), v126));
  v118 = &off_1E6D09A88;
  v119 = 0;
  v122 = 0;
  v123 = 0;
  v121 = 0;
  v124 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v118, (PB::Reader *)v125);
  v80 = a1;
  v85.n128_u64[0] = v120;
  if (v119)
  {
    v92 = 0;
    memset(v95, 0, sizeof(v95));
    *(_OWORD *)__p = 0u;
    v97 = 0u;
    v99 = 0u;
    memset(v100, 0, 74);
    v103 = 0;
    v102 = 0;
    v98 = 0xFFEFFFFFFFFFFFFFLL;
    v101 = &v102;
    v104 = 0u;
    v105 = 0u;
    v106 = 1065353216;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    v110 = 0;
    v111 = 1065353216;
    v112 = 0u;
    v113 = 0u;
    v114 = 1065353216;
    v115 = 0u;
    v116 = 0u;
    v117 = 1065353216;
    v88 = vextq_s8(*(int8x16_t *)(v119 + 8), *(int8x16_t *)(v119 + 8), 8uLL);
    v4 = *(_QWORD *)(v119 + 72);
    v89 = *(_QWORD *)(v119 + 64);
    v90 = *(_BYTE *)(v119 + 185);
    v91 = *(_BYTE *)(v119 + 186);
    v93 = vextq_s8(*(int8x16_t *)(v119 + 24), *(int8x16_t *)(v119 + 24), 8uLL);
    v94 = v4;
    v5 = *(_QWORD *)(v119 + 80);
    v6 = *(_QWORD *)(v119 + 88);
    v79 = (_QWORD *)v119;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= (unint64_t)v97)
        {
          v14 = (char *)__p[0];
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v97 - (unint64_t)__p[0]) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v97 - (unint64_t)__p[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = (char *)__p[1];
            v14 = (char *)__p[0];
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p[0];
          }
          v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(_QWORD *)&v97 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = v79[13];
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 24);
      v25 = *(int8x16_t *)(v23 + 88);
      v26 = *(_QWORD *)(v23 + 104);
      v27 = *(_QWORD *)(v23 + 176);
      v28 = *(_QWORD *)(v23 + 168);
      v29 = *(_QWORD *)(v23 + 56);
      v30 = *(_QWORD *)(v23 + 48);
      v31 = *(_QWORD *)(v23 + 40);
      v32 = *(_QWORD *)(v23 + 112);
      if (v32)
      {
        v33 = *(int8x16_t *)(v32 + 24);
        v34 = *(_QWORD *)(v32 + 8);
        v35 = 1;
        v32 = *(_QWORD *)(v32 + 16);
      }
      else
      {
        v35 = 0;
        v33 = 0uLL;
        v34 = 0;
      }
      *((_QWORD *)&v97 + 1) = v29;
      v98 = v31;
      *(_QWORD *)&v99 = v30;
      *((_QWORD *)&v99 + 1) = v28;
      v100[0] = v27;
      *(int8x16_t *)&v100[1] = vextq_s8(v25, v25, 8uLL);
      v100[3] = v26;
      v100[4] = v24;
      *(int8x16_t *)&v100[5] = vextq_s8(v33, v33, 8uLL);
      v100[7] = v34;
      v100[8] = v32;
      LOWORD(v100[9]) = v35;
    }
    v37 = (uint64_t *)v79[17];
    v36 = (uint64_t *)v79[18];
    v82 = v36;
    while (v37 != v36)
    {
      v38 = *v37;
      v39 = *(_QWORD *)(*v37 + 112);
      if (v39)
      {
        v84 = *(int8x16_t *)(v39 + 24);
        v40 = *(_QWORD *)(v39 + 8);
        v41 = 1;
        v42 = *(_QWORD *)(v39 + 16);
      }
      else
      {
        v42 = 0;
        v41 = 0;
        v40 = 0;
        v84 = 0u;
      }
      v43 = *(_QWORD *)(v38 + 24);
      v83 = *(int8x16_t *)(v38 + 88);
      v44 = *(_QWORD *)(v38 + 104);
      v45 = *(_QWORD *)(v38 + 176);
      v46 = *(_QWORD *)(v38 + 168);
      v47 = *(_QWORD *)(v38 + 56);
      v48 = *(_QWORD *)(v38 + 48);
      v49 = *(_QWORD *)(v38 + 40);
      v50 = *(_QWORD *)(v38 + 144);
      v51 = &v102;
      v52 = &v102;
      v53 = v102;
      if (v102)
      {
        do
        {
          while (1)
          {
            v51 = (uint64_t **)v53;
            v54 = v53[4];
            if (v54 <= v50)
              break;
            v53 = *v51;
            v52 = v51;
            if (!*v51)
              goto LABEL_39;
          }
          if (v54 >= v50)
          {
            v56 = (char *)v51;
            goto LABEL_42;
          }
          v53 = v51[1];
        }
        while (v53);
        v52 = v51 + 1;
      }
LABEL_39:
      v56 = (char *)operator new(0x98uLL);
      *((_QWORD *)v56 + 4) = v50;
      *(_OWORD *)(v56 + 40) = 0u;
      *(_OWORD *)(v56 + 120) = 0u;
      *(_OWORD *)(v56 + 136) = 0u;
      *(_OWORD *)(v56 + 56) = 0u;
      *(_OWORD *)(v56 + 72) = 0u;
      *(_OWORD *)(v56 + 88) = 0u;
      *(_OWORD *)(v56 + 104) = 0u;
      *((_QWORD *)v56 + 6) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v56 + 130) = 0u;
      *(_QWORD *)v56 = 0;
      *((_QWORD *)v56 + 1) = 0;
      *((_QWORD *)v56 + 2) = v51;
      *v52 = (uint64_t *)v56;
      v55 = (uint64_t *)v56;
      if (*v101)
      {
        v101 = (uint64_t **)*v101;
        v55 = *v52;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v102, v55);
      ++v103;
LABEL_42:
      *((_QWORD *)v56 + 5) = v47;
      *((_QWORD *)v56 + 6) = v49;
      *((_QWORD *)v56 + 7) = v48;
      *((_QWORD *)v56 + 8) = v46;
      *((_QWORD *)v56 + 9) = v45;
      *((int8x16_t *)v56 + 5) = vextq_s8(v83, v83, 8uLL);
      *((_QWORD *)v56 + 12) = v44;
      *((_QWORD *)v56 + 13) = v43;
      *((int8x16_t *)v56 + 7) = vextq_s8(v84, v84, 8uLL);
      *((_QWORD *)v56 + 16) = v40;
      *((_QWORD *)v56 + 17) = v42;
      v56[144] = v41;
      ++v37;
      v56[145] = 0;
      v36 = v82;
    }
    v57 = v79[5];
    for (i = v79[6]; v57 != i; v57 += 8)
    {
      v60 = *(double *)(*(_QWORD *)v57 + 8);
      v59 = *(double *)(*(_QWORD *)v57 + 16);
      if (v60 >= v59)
        v61 = *(double *)(*(_QWORD *)v57 + 16);
      else
        v61 = *(double *)(*(_QWORD *)v57 + 8);
      if (v59 < v60)
        v59 = *(double *)(*(_QWORD *)v57 + 8);
      HKIntervalMask<double>::_insertInterval(v95, v61, v59);
    }
    HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::operator=((uint64_t)&v85.n128_i64[1], (uint64_t)&v88);
    HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)&v88);
  }
  v62 = v121;
  v63 = v122;
  if (v121 != v122)
  {
    v64 = (char *)v86[1];
    do
    {
      v65 = *(_QWORD *)(*(_QWORD *)v62 + 24);
      v66 = *(_QWORD *)(*(_QWORD *)v62 + 32);
      v67 = *(_QWORD *)(*(_QWORD *)v62 + 8);
      v68 = *(_QWORD *)(*(_QWORD *)v62 + 16);
      if ((unint64_t)v64 >= (unint64_t)v87)
      {
        v69 = (char *)v86[0];
        v70 = 0xCCCCCCCCCCCCCCCDLL * ((v64 - (char *)v86[0]) >> 3);
        v71 = v70 + 1;
        if (v70 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v87 - (unint64_t)v86[0]) >> 3) > v71)
          v71 = 0x999999999999999ALL * ((uint64_t)(v87 - (unint64_t)v86[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v87 - (unint64_t)v86[0]) >> 3) >= 0x333333333333333)
          v72 = 0x666666666666666;
        else
          v72 = v71;
        if (v72)
        {
          v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v72);
          v64 = (char *)v86[1];
          v69 = (char *)v86[0];
        }
        else
        {
          v73 = 0;
        }
        v74 = v72 + 40 * v70;
        *(_QWORD *)v74 = v66;
        *(_QWORD *)(v74 + 8) = v65;
        *(_QWORD *)(v74 + 16) = v67;
        *(_QWORD *)(v74 + 24) = v68;
        *(_WORD *)(v74 + 32) = 1;
        v75 = (char *)v74;
        if (v64 != v69)
        {
          do
          {
            v76 = *(_OWORD *)(v64 - 40);
            v77 = *(_OWORD *)(v64 - 24);
            *((_WORD *)v75 - 4) = *((_WORD *)v64 - 4);
            *(_OWORD *)(v75 - 24) = v77;
            *(_OWORD *)(v75 - 40) = v76;
            v75 -= 40;
            v64 -= 40;
          }
          while (v64 != v69);
          v69 = (char *)v86[0];
        }
        v64 = (char *)(v74 + 40);
        v86[0] = v75;
        v86[1] = (void *)(v74 + 40);
        *(_QWORD *)&v87 = v72 + 40 * v73;
        if (v69)
          operator delete(v69);
      }
      else
      {
        *(_QWORD *)v64 = v66;
        *((_QWORD *)v64 + 1) = v65;
        *((_QWORD *)v64 + 2) = v67;
        *((_QWORD *)v64 + 3) = v68;
        *((_WORD *)v64 + 16) = 1;
        v64 += 40;
      }
      v86[1] = v64;
      v62 += 8;
    }
    while (v62 != v63);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v118);

  HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::operator=((_QWORD *)(v80 + 112), &v85);
  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)&v85.n128_i64[1]);

}

void sub_1B7CCA950(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)(v13 - 240));
  HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 210) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_QWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 448);
  if (v2)
  {
    *(_QWORD *)(a1 + 456) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 400);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 360);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 320);
  v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(_QWORD *)(a1 + 304) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 256);
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 240));
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[440];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[64];
  double v28;
  unint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 608));
  if (!*(_QWORD *)(a1 + 40))
  {
    v25 = 0;
    if (v28 == -1.79769313e308)
      v28 = *(double *)(a1 + 600);
  }
  v15 = v29;
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 592) = 0;
  return HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7CCAE5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 56), a2 + 28);
  v4 = a2[29].n128_u64[1];
  a2[29].n128_u64[1] = 0;
  v5 = (void *)a1[59];
  a1[59] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  _QWORD *v40;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 168);
  v13 = *(_OWORD *)(a2 + 184);
  v14 = *(_OWORD *)(a2 + 200);
  v15 = *(_OWORD *)(a2 + 216);
  v16 = *(_OWORD *)(a2 + 120);
  v17 = *(_OWORD *)(a2 + 136);
  v18 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 240) = 0;
  v19 = (_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_OWORD *)(a1 + 120) = v16;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 216) = v15;
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 184) = v13;
  *(_OWORD *)(a1 + 152) = v18;
  *(_QWORD *)(a1 + 248) = 0;
  v20 = *(_QWORD **)(a2 + 232);
  if (v20 != (_QWORD *)(a2 + 240))
  {
    v21 = 0;
    v22 = (_QWORD *)(a1 + 240);
    while (1)
    {
      v23 = v20[4];
      v24 = (_QWORD *)(a1 + 240);
      if (v22 == v19)
        goto LABEL_12;
      v25 = v21;
      v26 = (_QWORD *)(a1 + 240);
      if (v21)
      {
        do
        {
          v24 = v25;
          v25 = (_QWORD *)v25[1];
        }
        while (v25);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v26[2];
          v27 = *v24 == (_QWORD)v26;
          v26 = v24;
        }
        while (v27);
      }
      if (v24[4] < v23)
      {
LABEL_12:
        if (v21)
          v28 = (uint64_t **)v24;
        else
          v28 = (uint64_t **)(a1 + 240);
        if (v21)
          v29 = (uint64_t **)(v24 + 1);
        else
          v29 = (uint64_t **)(a1 + 240);
        if (!*v29)
        {
LABEL_28:
          v32 = operator new(0x98uLL);
          v33 = *((_OWORD *)v20 + 2);
          v34 = *((_OWORD *)v20 + 3);
          v35 = *((_OWORD *)v20 + 5);
          v32[4] = *((_OWORD *)v20 + 4);
          v32[5] = v35;
          v32[2] = v33;
          v32[3] = v34;
          v36 = *((_OWORD *)v20 + 6);
          v37 = *((_OWORD *)v20 + 7);
          v38 = *((_OWORD *)v20 + 8);
          *((_QWORD *)v32 + 18) = v20[18];
          v32[7] = v37;
          v32[8] = v38;
          v32[6] = v36;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 232), (uint64_t)v28, v29, (uint64_t *)v32);
        }
      }
      else
      {
        v29 = (uint64_t **)(a1 + 240);
        v28 = (uint64_t **)(a1 + 240);
        if (!v21)
          goto LABEL_28;
        v30 = v21;
        while (1)
        {
          while (1)
          {
            v28 = (uint64_t **)v30;
            v31 = v30[4];
            if (v31 <= v23)
              break;
            v30 = *v28;
            v29 = v28;
            if (!*v28)
              goto LABEL_28;
          }
          if (v31 >= v23)
            break;
          v30 = v28[1];
          if (!v30)
          {
            v29 = v28 + 1;
            goto LABEL_28;
          }
        }
      }
      v39 = (_QWORD *)v20[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (_QWORD *)v20[2];
          v27 = *v40 == (_QWORD)v20;
          v20 = v40;
        }
        while (!v27);
      }
      if (v40 == (_QWORD *)(a2 + 240))
        break;
      v21 = (_QWORD *)*v19;
      v22 = *(_QWORD **)(a1 + 232);
      v20 = v40;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 256, a2 + 256);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 296), *(const void **)(a2 + 296), *(_QWORD *)(a2 + 304), (uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 320, a2 + 320);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 360, a2 + 360);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 400, a2 + 400);
  return a1;
}

void sub_1B7CCB20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  v19 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 304) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 184);
  v11 = *(_OWORD *)(a2 + 200);
  v12 = *(_OWORD *)(a2 + 216);
  v14 = a1 + 240;
  v13 = *(_QWORD **)(a1 + 240);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 200) = v11;
  *(_OWORD *)(a1 + 184) = v10;
  v15 = *(_OWORD *)(a2 + 152);
  v16 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v16;
  *(_OWORD *)(a1 + 152) = v15;
  std::__tree<long>::destroy(v13);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  v17 = (_QWORD *)(a2 + 240);
  v18 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 240) = v18;
  v19 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 248) = v19;
  if (v19)
  {
    *(_QWORD *)(v18 + 16) = v14;
    *(_QWORD *)(a2 + 232) = v17;
    *v17 = 0;
    *(_QWORD *)(a2 + 248) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 232) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 256, (uint64_t *)(a2 + 256));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 296, (__n128 *)(a2 + 296));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 320, (uint64_t *)(a2 + 320));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 360, (uint64_t *)(a2 + 360));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 400, (uint64_t *)(a2 + 400));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint8x8_t v46;
  unint64_t v47;
  void **v48;
  char *v49;
  unint64_t v50;
  id v51;
  id v52;
  void *v53;
  char v54;
  float v55;
  _BOOL8 v56;
  unint64_t v57;
  unint64_t v58;
  int8x8_t prime;
  void *v60;
  void *v61;
  uint64_t v62;
  _QWORD **v63;
  unint64_t v64;
  uint8x8_t v65;
  unint64_t v66;
  uint8x8_t v67;
  uint64_t v68;
  _QWORD *i;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _QWORD *v79;
  _QWORD *v80;
  BOOL v81;
  void *v82;
  uint64_t **j;
  uint64_t *v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  double v89;
  double v90;
  void *v91;
  void *v92;
  void *v93;
  _QWORD *v94;
  uint64_t v95;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  unint64_t v102;
  id v103;
  id v104;
  id v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *__p[2];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _QWORD v116[3];
  _QWORD *v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = a2 + 5;
  if (v4 != -1.79769313e308)
    v6 = a2;
  v104 = (id)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  v106 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v104, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(v106 + 296);
      v16 = *(uint64_t **)(v106 + 304);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v20 = (void *)objc_msgSend(v14, "copy");
      objc_msgSend(v12, "_setSources:", v20);

    }
  }

  v116[0] = &off_1E6D05F50;
  v117 = v116;
  v105 = v12;
  v108 = *(_QWORD *)(a1 + 24);
  v21 = *(_OWORD *)(v106 + 168);
  v22 = *(_OWORD *)(v106 + 200);
  v113 = *(_OWORD *)(v106 + 184);
  v114 = v22;
  v115 = *(_OWORD *)(v106 + 216);
  v23 = *(_OWORD *)(v106 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v106 + 120);
  v110 = v23;
  v111 = *(_OWORD *)(v106 + 152);
  v112 = v21;
  if (!v117)
    std::__throw_bad_function_call[abi:ne180100]();
  v24 = (double *)(*(uint64_t (**)(_QWORD *, void **))(*v117 + 48))(v117, __p);
  v26 = v24[5];
  v25 = v24[6];
  v27 = v24[7];
  v28 = *((_QWORD *)v24 + 8);
  v30 = v24[9];
  v29 = v24[10];
  v31 = v24[11];
  v32 = *(_QWORD *)(a1 + 24);
  v33 = _HKStatisticsOptionBaselineRelativeQuantities();
  v34 = *(void **)(a1 + 16);
  if ((v33 & v32) != 0)
    objc_msgSend(v34, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v34, "canonicalUnit");
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v108 & 2) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v107, v26);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setAverageQuantity:", v35);

  }
  if ((v108 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v107, v27);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setMinimumQuantity:", v36);

  }
  if ((v108 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v107, v25);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setMaximumQuantity:", v37);

  }
  if ((v108 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v107, v30);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setMostRecentQuantity:", v38);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v29, v31);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setMostRecentQuantityDateInterval:", v39);

  }
  objc_msgSend(v105, "setDataCount:", v28);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_162;
  if ((v108 & 2) != 0)
    v101 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v101 = 0;
  if ((v108 & 4) != 0)
    v100 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v100 = 0;
  if ((v108 & 8) != 0)
    v98 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v98 = 0;
  if ((v108 & 0x20) != 0)
  {
    v97 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v99 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v99 = 0;
    v97 = 0;
  }
  v103 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)__p = 0u;
  v110 = 0u;
  LODWORD(v111) = 1065353216;
  v40 = *(_QWORD **)(v106 + 232);
  if (v40 == (_QWORD *)(v106 + 240))
    goto LABEL_153;
  do
  {
    HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(v106, v40[4]);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = v41;
    if (!v41)
      goto LABEL_121;
    v43 = objc_msgSend(v41, "hash");
    v44 = v43;
    v45 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_64;
    v46 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v46.i16[0] = vaddlv_u8(v46);
    v47 = v46.u32[0];
    if (v46.u32[0] > 1uLL)
    {
      v28 = v43;
      if ((void *)v43 >= __p[1])
        v28 = v43 % (unint64_t)__p[1];
    }
    else
    {
      v28 = ((unint64_t)__p[1] - 1) & v43;
    }
    v48 = (void **)*((_QWORD *)__p[0] + v28);
    if (!v48 || (v49 = (char *)*v48) == 0)
    {
LABEL_64:
      v49 = (char *)operator new(0x88uLL);
      *(_QWORD *)v49 = 0;
      *((_QWORD *)v49 + 1) = v44;
      *((_QWORD *)v49 + 2) = v42;
      *(_OWORD *)(v49 + 24) = 0u;
      *(_OWORD *)(v49 + 120) = 0u;
      *(_OWORD *)(v49 + 104) = 0u;
      *(_OWORD *)(v49 + 40) = 0u;
      *(_OWORD *)(v49 + 56) = 0u;
      *(_OWORD *)(v49 + 72) = 0u;
      *(_OWORD *)(v49 + 88) = 0u;
      *((_QWORD *)v49 + 4) = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)(v49 + 114) = 0u;
      v55 = (float)(unint64_t)(*((_QWORD *)&v110 + 1) + 1);
      if (v45 && (float)(*(float *)&v111 * (float)v45) >= v55)
      {
LABEL_110:
        v71 = __p[0];
        v72 = (_QWORD *)*((_QWORD *)__p[0] + v28);
        if (v72)
        {
          *(_QWORD *)v49 = *v72;
        }
        else
        {
          *(_QWORD *)v49 = v110;
          *(_QWORD *)&v110 = v49;
          v71[v28] = &v110;
          if (!*(_QWORD *)v49)
          {
LABEL_119:
            ++*((_QWORD *)&v110 + 1);
            goto LABEL_120;
          }
          v73 = *(_QWORD *)(*(_QWORD *)v49 + 8);
          if ((v45 & (v45 - 1)) != 0)
          {
            if (v73 >= v45)
              v73 %= v45;
          }
          else
          {
            v73 &= v45 - 1;
          }
          v72 = (char *)__p[0] + 8 * v73;
        }
        *v72 = v49;
        goto LABEL_119;
      }
      v56 = (v45 & (v45 - 1)) != 0;
      if (v45 < 3)
        v56 = 1;
      v57 = v56 | (2 * v45);
      v58 = vcvtps_u32_f32(v55 / *(float *)&v111);
      if (v57 <= v58)
        prime = (int8x8_t)v58;
      else
        prime = (int8x8_t)v57;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v45 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_76;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v66 = vcvtps_u32_f32((float)*((unint64_t *)&v110 + 1) / *(float *)&v111);
        if (__p[1] < (void *)3
          || (v67 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v67.i16[0] = vaddlv_u8(v67), v67.u32[0] > 1uLL))
        {
          v66 = std::__next_prime(v66);
        }
        else
        {
          v68 = 1 << -(char)__clz(v66 - 1);
          if (v66 >= 2)
            v66 = v68;
        }
        if (*(_QWORD *)&prime <= v66)
          prime = (int8x8_t)v66;
        if (*(_QWORD *)&prime >= v45)
        {
          v45 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_76:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v60 = operator new(8 * *(_QWORD *)&prime);
            v61 = __p[0];
            __p[0] = v60;
            if (v61)
              operator delete(v61);
            v62 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v62++) = 0;
            while (*(_QWORD *)&prime != v62);
            v63 = (_QWORD **)v110;
            if ((_QWORD)v110)
            {
              v64 = *(_QWORD *)(v110 + 8);
              v65 = (uint8x8_t)vcnt_s8(prime);
              v65.i16[0] = vaddlv_u8(v65);
              if (v65.u32[0] > 1uLL)
              {
                if (v64 >= *(_QWORD *)&prime)
                  v64 %= *(_QWORD *)&prime;
              }
              else
              {
                v64 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v64) = &v110;
              for (i = *v63; i; v64 = v70)
              {
                v70 = i[1];
                if (v65.u32[0] > 1uLL)
                {
                  if (v70 >= *(_QWORD *)&prime)
                    v70 %= *(_QWORD *)&prime;
                }
                else
                {
                  v70 &= *(_QWORD *)&prime - 1;
                }
                if (v70 != v64)
                {
                  if (!*((_QWORD *)__p[0] + v70))
                  {
                    *((_QWORD *)__p[0] + v70) = v63;
                    goto LABEL_101;
                  }
                  *v63 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v70);
                  **((_QWORD **)__p[0] + v70) = i;
                  i = v63;
                }
                v70 = v64;
LABEL_101:
                v63 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v45 = (unint64_t)prime;
            goto LABEL_105;
          }
          v82 = __p[0];
          __p[0] = 0;
          if (v82)
            operator delete(v82);
          v45 = 0;
          __p[1] = 0;
        }
      }
LABEL_105:
      if ((v45 & (v45 - 1)) != 0)
      {
        if (v44 >= v45)
          v28 = v44 % v45;
        else
          v28 = v44;
      }
      else
      {
        v28 = (v45 - 1) & v44;
      }
      goto LABEL_110;
    }
    v102 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v50 = *((_QWORD *)v49 + 1);
      if (v50 == v44)
        break;
      if (v47 > 1)
      {
        if (v50 >= v45)
          v50 %= v45;
      }
      else
      {
        v50 &= v102;
      }
      if (v50 != v28)
        goto LABEL_64;
LABEL_63:
      v49 = *(char **)v49;
      if (!v49)
        goto LABEL_64;
    }
    v51 = *((id *)v49 + 2);
    v52 = v42;
    v53 = v52;
    if (v51 != v52)
    {
      v54 = objc_msgSend(v51, "isEqualToString:", v52);

      if ((v54 & 1) != 0)
        goto LABEL_120;
      goto LABEL_63;
    }

LABEL_120:
    v74 = *(_OWORD *)(v40 + 5);
    v75 = *(_OWORD *)(v40 + 7);
    *(_OWORD *)(v49 + 56) = *(_OWORD *)(v40 + 9);
    *(_OWORD *)(v49 + 40) = v75;
    *(_OWORD *)(v49 + 24) = v74;
    v76 = *(_OWORD *)(v40 + 11);
    v77 = *(_OWORD *)(v40 + 13);
    v78 = *(_OWORD *)(v40 + 15);
    *(_OWORD *)(v49 + 120) = *(_OWORD *)(v40 + 17);
    *(_OWORD *)(v49 + 104) = v78;
    *(_OWORD *)(v49 + 88) = v77;
    *(_OWORD *)(v49 + 72) = v76;

LABEL_121:
    v79 = (_QWORD *)v40[1];
    if (v79)
    {
      do
      {
        v80 = v79;
        v79 = (_QWORD *)*v79;
      }
      while (v79);
    }
    else
    {
      do
      {
        v80 = (_QWORD *)v40[2];
        v81 = *v80 == (_QWORD)v40;
        v40 = v80;
      }
      while (!v81);
    }
    v40 = v80;
  }
  while (v80 != (_QWORD *)(v106 + 240));
  for (j = (uint64_t **)v110; j; j = (uint64_t **)*j)
  {
    v84 = j[2];
    if ((v108 & 2) != 0)
    {
      if (!v117)
        goto LABEL_168;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v107, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v117 + 48))(v117, (uint64_t *)j + 3) + 40));
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v101, "setObject:forKeyedSubscript:", v85, v84);

    }
    if ((v108 & 4) != 0)
    {
      if (!v117)
        goto LABEL_168;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v107, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v117 + 48))(v117, (uint64_t *)j + 3) + 56));
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v100, "setObject:forKeyedSubscript:", v86, v84);

    }
    if ((v108 & 8) != 0)
    {
      if (!v117)
        goto LABEL_168;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v107, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v117 + 48))(v117, (uint64_t *)j + 3) + 48));
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "setObject:forKeyedSubscript:", v87, v84);

    }
    if ((v108 & 0x20) != 0)
    {
      if (!v117)
        std::__throw_bad_function_call[abi:ne180100]();
      v88 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v117 + 48))(v117, (uint64_t *)j + 3);
      v89 = *(double *)(v88 + 80);
      v90 = *(double *)(v88 + 88);
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v107, *(double *)(v88 + 72));
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v97, "setObject:forKeyedSubscript:", v91, v84);

      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v89, v90);
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v99, "setObject:forKeyedSubscript:", v92, v84);

    }
    if (!v117)
LABEL_168:
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v117 + 48))(v117, (uint64_t *)j + 3) + 64));
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v103, "setObject:forKeyedSubscript:", v93, v84);

  }
LABEL_153:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  if ((v108 & 2) != 0)
    objc_msgSend(v105, "setAverageQuantityBySource:", v101);
  if ((v108 & 4) != 0)
    objc_msgSend(v105, "setMinimumQuantityBySource:", v100);
  if ((v108 & 8) != 0)
    objc_msgSend(v105, "setMaximumQuantityBySource:", v98);
  if ((v108 & 0x20) != 0)
  {
    objc_msgSend(v105, "setMostRecentQuantityBySource:", v97);
    objc_msgSend(v105, "setMostRecentQuantityDateIntervalBySource:", v99);
  }
  objc_msgSend(v105, "setDataCountBySource:", v103);

LABEL_162:
  v94 = v117;
  if (v117 == v116)
  {
    v95 = 4;
    v94 = v116;
LABEL_166:
    (*(void (**)(void))(*v94 + 8 * v95))();
  }
  else if (v117)
  {
    v95 = 5;
    goto LABEL_166;
  }
  return v105;
}

void sub_1B7CCC06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;

  v23 = *(_QWORD **)(v21 - 152);
  if (v23 == (_QWORD *)(v21 - 176))
  {
    v24 = 4;
    v23 = (_QWORD *)(v21 - 176);
  }
  else
  {
    if (!v23)
      goto LABEL_2;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_2:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 280);
  v2 = *(_QWORD *)(a1 + 296);
  if (v1 != (*(_QWORD *)(a1 + 304) - v2) >> 3)
  {
    v4 = (void **)(a1 + 296);
    *(_QWORD *)(a1 + 304) = v2;
    std::vector<long long>::reserve((void **)(a1 + 296), v1);
    v5 = *(_QWORD **)(a1 + 272);
    if (v5)
    {
      v6 = *(char **)(a1 + 304);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 312);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 296);
            v6 = *(char **)(a1 + 304);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 296) = v16;
          *(_QWORD *)(a1 + 304) = v9;
          *(_QWORD *)(a1 + 312) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 304) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7CCC3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  _QWORD *v6;
  double *v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  char v16;
  double v17;
  int v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double *j;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  id WeakRetained;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  unint64_t v56;
  uint64_t **v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  double *v63;
  __int128 v64;
  __int128 *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  _OWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  double v75;
  double *i;
  unint64_t v77;
  __int128 *v78;
  __int128 v79;
  __int128 v80;
  char *v81;
  char *v82;
  __int128 *v83;
  __int128 v84;
  __int128 v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  unint64_t v90;
  uint64_t **v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  BOOL v95;
  double v96;
  void *v97;
  void *v98;
  id *location;
  id v100;
  uint64_t v101;
  char **v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int16 v109;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v101 = a1 + 120;
    v102 = (char **)(a1 + 96);
    location = (id *)(a1 + 88);
    v6 = (_QWORD *)(a1 + 240);
    do
    {
      v7 = *(double **)(a1 + 96);
      v8 = *(__int128 **)(a1 + 104);
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          v30 = a2;
          v31 = a2;
          v32 = v5;
          v33 = *(_QWORD *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              v34 = *(double *)(v33 + 8);
              v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31)
                v31 = *(double *)(v33 + 8);
              if (v35 > v5)
                v37 = *(double *)(v33 + 16);
              else
                v37 = v30;
              if (v35 < v30)
              {
                v32 = v5;
                v30 = v37;
              }
              v33 += 48;
            }
            while ((__int128 *)v33 != v8);
          }
          if (v30 >= v31)
            v38 = v31;
          else
            v38 = v30;
          v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            v40 = v39 * floor(v38 / v39);
            v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41)
              v38 = v40;
            else
              v38 = v41;
          }
          *v102 = 0;
          v102[1] = 0;
          v102[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            v45 = *(char **)(a1 + 96);
            v44 = *(char **)(a1 + 104);
            v46 = v42;
            if (v44 != v45)
            {
              do
              {
                v47 = *((_OWORD *)v44 - 3);
                v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              v44 = *v102;
            }
            *(_QWORD *)(a1 + 96) = v46;
            *(_QWORD *)(a1 + 104) = v42;
            *(_QWORD *)(a1 + 112) = &v42[48 * v43];
            if (v44)
              operator delete(v44);
          }
          HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          v50 = __clz(v9);
          if (WeakRetained)
          {
            *(_QWORD *)&v104 = a1;
            v51 = 126 - 2 * v50;
            if (v7 == (double *)v8)
              v52 = 0;
            else
              v52 = v51;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*,false>((uint64_t)v7, v8, (uint64_t)&v104, v52, 1);
          }
          else
          {
            v60 = 126 - 2 * v50;
            if (v7 == (double *)v8)
              v52 = 0;
            else
              v52 = v60;
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*,false>((uint64_t)v7, v8, v52, 1);
          if (*(_BYTE *)(a1 + 25))
            v100 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v100 = 0;
          if (v7 == (double *)v8)
          {
LABEL_140:
            v92 = *(_QWORD **)(a1 + 232);
            if (v92 != v6)
            {
              do
              {
                v93 = (_QWORD *)v92[1];
                if (v93)
                {
                  do
                  {
                    v94 = v93;
                    v93 = (_QWORD *)*v93;
                  }
                  while (v93);
                }
                else
                {
                  do
                  {
                    v94 = (_QWORD *)v92[2];
                    v95 = *v94 == (_QWORD)v92;
                    v92 = v94;
                  }
                  while (!v95);
                }
                v92 = v94;
              }
              while (v94 != v6);
            }
            *(double *)(a1 + 56) = v38;

            if (v7)
              operator delete(v7);
            goto LABEL_152;
          }
          v61 = 0;
          v62 = 0;
          v63 = v7;
          while (2)
          {
            v64 = *((_OWORD *)v63 + 1);
            v104 = *(_OWORD *)v63;
            v105 = v64;
            v106 = *((_QWORD *)v63 + 4);
            if (!(_BYTE)v106 || *((double *)&v104 + 1) > v38)
            {
              v65 = *(__int128 **)(a1 + 104);
              v66 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v65 >= v66)
              {
                v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - *v102) >> 4);
                v71 = v70 + 1;
                if (v70 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (_QWORD)*v102) >> 4);
                if (2 * v72 > v71)
                  v71 = 2 * v72;
                if (v72 >= 0x2AAAAAAAAAAAAAALL)
                  v73 = 0x555555555555555;
                else
                  v73 = v71;
                if (v73)
                  v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v73);
                else
                  v74 = 0;
                v78 = (__int128 *)(v73 + 48 * v70);
                v79 = *(_OWORD *)v63;
                v80 = *((_OWORD *)v63 + 2);
                v78[1] = *((_OWORD *)v63 + 1);
                v78[2] = v80;
                *v78 = v79;
                v82 = *(char **)(a1 + 96);
                v81 = *(char **)(a1 + 104);
                v83 = v78;
                if (v81 != v82)
                {
                  do
                  {
                    v84 = *((_OWORD *)v81 - 3);
                    v85 = *((_OWORD *)v81 - 2);
                    *(__int128 *)((char *)v83 - 21) = *(_OWORD *)(v81 - 21);
                    *(v83 - 3) = v84;
                    *(v83 - 2) = v85;
                    v83 -= 3;
                    v81 -= 48;
                  }
                  while (v81 != v82);
                  v81 = *v102;
                }
                v69 = v78 + 3;
                *(_QWORD *)(a1 + 96) = v83;
                *(_QWORD *)(a1 + 104) = v78 + 3;
                *(_QWORD *)(a1 + 112) = v73 + 48 * v74;
                if (v81)
                  operator delete(v81);
              }
              else
              {
                v67 = *(_OWORD *)v63;
                v68 = *((_OWORD *)v63 + 2);
                v65[1] = *((_OWORD *)v63 + 1);
                v65[2] = v68;
                *v65 = v67;
                v69 = v65 + 3;
              }
              *(_QWORD *)(a1 + 104) = v69;
LABEL_139:
              v63 += 6;
              if (v63 == (double *)v8)
                goto LABEL_140;
              continue;
            }
            break;
          }
          v75 = *(double *)&v105;
          if (*(double *)&v105 > v38)
            v75 = v38;
          *(double *)&v105 = v75;
          for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && *((double *)&v104 + 1) >= *i; i += 2)
          {
            if (*((double *)&v104 + 1) < i[1])
              goto LABEL_139;
          }
          if ((v62 & 1) != 0)
          {
            v77 = *((_QWORD *)&v105 + 1);
            if (v61 == *((_QWORD *)&v105 + 1) || *(_BYTE *)(a1 + 24))
              HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v101, (double *)&v104);
          }
          else
          {
            HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v101, (double *)&v104);
            v77 = *((_QWORD *)&v105 + 1);
            v61 = *((_QWORD *)&v105 + 1);
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_138;
          HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(a1, v77);
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v86)
            goto LABEL_137;
          objc_msgSend(v100, "objectForKeyedSubscript:", v86);
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          v88 = v87;
          if (v87)
          {
            if (objc_msgSend(v87, "longLongValue") != v77 && !*(_BYTE *)(a1 + 24))
            {
LABEL_136:

LABEL_137:
LABEL_138:
              v62 = 1;
              goto LABEL_139;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v77);
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v100, "setObject:forKeyedSubscript:", v89, v86);

          }
          v90 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(a1, v77);
          v91 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsForSource(a1, v90);
          HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)v91, (double *)&v104);
          goto LABEL_136;
        }
        v10 = *((unsigned __int8 *)v7 + 42);
        v11 = *((unsigned __int8 *)v7 + 41);
        v12 = *((unsigned __int8 *)v7 + 40);
        v13 = v7[1];
        v14 = v7[2];
        v15 = *((_QWORD *)v7 + 3);
        v16 = *((_BYTE *)v7 + 33);
        if (v14 <= a2)
          v17 = v7[2];
        else
          v17 = a2;
        if (v13 < a2)
          v18 = *((unsigned __int8 *)v7 + 32);
        else
          v18 = 0;
        if (v13 < a2)
          v19 = 0;
        else
          v19 = *((_BYTE *)v7 + 33);
        if (v13 < a2)
        {
          v20 = 0;
        }
        else
        {
          v17 = v7[2];
          v20 = *((_QWORD *)v7 + 3);
        }
        if (v13 < a2)
          v21 = 0.0;
        else
          v21 = v7[2];
        if (v13 < a2)
          v22 = 0.0;
        else
          v22 = *v7;
        if (v13 < a2)
          v23 = 0.0;
        else
          v23 = v7[1];
        if (v13 < a2)
          v24 = 0;
        else
          v24 = *((unsigned __int8 *)v7 + 32);
        if (*((_BYTE *)v7 + 32))
        {
          v14 = v17;
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
        }
        if (*((_BYTE *)v7 + 32))
          v25 = v21;
        else
          v25 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v26 = v22;
        else
          v26 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v27 = v23;
        else
          v27 = 0.0;
        if (*((_BYTE *)v7 + 32))
          v28 = v24;
        else
          v28 = 0;
        *(double *)&v104 = *v7;
        *((double *)&v104 + 1) = v13;
        *(double *)&v105 = v14;
        *((_QWORD *)&v105 + 1) = v15;
        LOBYTE(v106) = v18;
        BYTE1(v106) = v16;
        *(_DWORD *)((char *)&v106 + 2) = *(_DWORD *)((char *)v7 + 34);
        HIWORD(v106) = *((_WORD *)v7 + 19);
        *(double *)&v107 = v26;
        *((double *)&v107 + 1) = v27;
        *(double *)&v108 = v25;
        *((_QWORD *)&v108 + 1) = v20;
        LOBYTE(v109) = v28;
        HIBYTE(v109) = v19;
        for (j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            v53 = v12 != 0;
            v54 = v11 != 0;
            v55 = v10 != 0;
            if (!v28)
              goto LABEL_150;
LABEL_88:
            LOWORD(v103) = v109;
            v58 = v108;
            v59 = *v102;
            *(_OWORD *)v59 = v107;
            *((_OWORD *)v59 + 1) = v58;
            *((_QWORD *)v59 + 4) = v103;
            v59[40] = v53;
            v59[41] = v54;
            v59[42] = v55;
            goto LABEL_151;
          }
        }
        v53 = v12 != 0;
        v54 = v11 != 0;
        v55 = v10 != 0;
        if (v18)
        {
          HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample(v101, (double *)&v104);
          if (*(_BYTE *)(a1 + 25))
          {
            v56 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(a1, v15);
            v57 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsForSource(a1, v56);
            HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>::addSample((uint64_t)v57, (double *)&v104);
          }
          v53 = 1;
          v54 = 1;
          v55 = 1;
        }
        if (v28)
          goto LABEL_88;
LABEL_150:
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
      }
LABEL_151:
      *(double *)(a1 + 56) = a2;
LABEL_152:
      v96 = *(double *)(a1 + 56);
      if (v96 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime(double) [Statistics = HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>]");
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v97, "handleFailureInFunction:file:lineNumber:description:", v98, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v96 = *(double *)(a1 + 56);
      }
      v5 = v96;
    }
    while (v96 < a2);
  }
}

void sub_1B7CCCB74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v12;

  v12 = a2;
  v5 = *(_QWORD **)(a1 + 240);
  v3 = (uint64_t **)(a1 + 240);
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = (uint64_t **)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    v6 = std::__tree<std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 320), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 360);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7CCCD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 400);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7CCCE00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x98uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_QWORD *)v9 + 6) = 0xFFEFFFFFFFFFFFFFLL;
    *(_OWORD *)(v9 + 130) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 296);
      v11 = *(char **)(*(_QWORD *)a3 + 304);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 304);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 304);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 296);
      v24 = *(char **)(*(_QWORD *)a3 + 304);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 304);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 304);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 296);
            v31 = *(char **)(*(_QWORD *)a3 + 304);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 304);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 304);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D05F50;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D05F50;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const& ()(HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 592))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 592))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7CCF124(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 568);
      v7 = *(_QWORD *)(a1 + 560);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7CCF32C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  char v10;
  double v11;
  _BOOL4 v12;
  double v14;
  char *v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  uint64_t **v48;

  v3 = *(_BYTE *)(a2 + 32);
  if (!v3)
    return;
  v5 = a1 + 8;
  v6 = *(double *)(a2 + 8);
  if (v6 < *(double *)(a1 + 8))
    return;
  v7 = *(uint64_t **)a2;
  v8 = *(double *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 33);
  v11 = *(double *)(a1 + 16);
  if (*(_DWORD *)(a1 + 36))
    v12 = v6 < v11;
  else
    v12 = v6 <= v11;
  if (v12)
  {
    if (v8 <= v11)
      v14 = *(double *)(a2 + 16);
    else
      v14 = *(double *)(a1 + 16);
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 264, *(_QWORD *)(a2 + 24), v9);
    v15 = *(char **)(a1 + 112);
    if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 192) <= 0)
    {
      v33 = *(double *)(a1 + 8);
      v34 = *(double *)(a1 + 16);
      if (v6 >= v33)
        v33 = v6;
      if (v34 >= v14)
        v34 = v14;
      *(double *)(a1 + 48) = v33;
      *(double *)(a1 + 56) = v34;
      if (!a3)
        goto LABEL_47;
    }
    else
    {
      if (v6 < *(double *)(a1 + 48))
      {
        v16 = *(double *)(a1 + 8);
        if (v6 >= v16)
          v16 = v6;
        *(double *)(a1 + 48) = v16;
      }
      if (v14 > *(double *)(a1 + 56))
      {
        v17 = *(double *)(a1 + 16);
        if (v17 >= v14)
          v17 = v14;
        *(double *)(a1 + 56) = v17;
      }
      if (!a3)
        goto LABEL_47;
    }
    if (v6 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime(v5, v6);
      v15 = *(char **)(a1 + 112);
    }
LABEL_47:
    v35 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v15 >= v35)
    {
      v37 = 0x555555555555555;
      v38 = *(char **)(a1 + 104);
      v39 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v38) >> 4);
      v40 = v39 + 1;
      if (v39 + 1 > 0x555555555555555)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v38) >> 4);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 < 0x2AAAAAAAAAAAAAALL)
        v37 = v40;
      if (v37)
      {
        v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v37);
        v38 = *(char **)(a1 + 104);
        v15 = *(char **)(a1 + 112);
      }
      else
      {
        v42 = 0;
      }
      v43 = v37 + 48 * v39;
      *(_QWORD *)v43 = v7;
      *(double *)(v43 + 8) = v6;
      *(double *)(v43 + 16) = v14;
      *(_QWORD *)(v43 + 24) = v9;
      v44 = v37 + 48 * v42;
      *(_BYTE *)(v43 + 32) = v3;
      *(_BYTE *)(v43 + 33) = v10;
      *(_WORD *)(v43 + 40) = 0;
      *(_BYTE *)(v43 + 42) = 0;
      v36 = (_QWORD *)(v43 + 48);
      if (v15 != v38)
      {
        do
        {
          v45 = *((_OWORD *)v15 - 3);
          v46 = *((_OWORD *)v15 - 2);
          *(_OWORD *)(v43 - 21) = *(_OWORD *)(v15 - 21);
          *(_OWORD *)(v43 - 48) = v45;
          *(_OWORD *)(v43 - 32) = v46;
          v43 -= 48;
          v15 -= 48;
        }
        while (v15 != v38);
        v38 = *(char **)(a1 + 104);
      }
      *(_QWORD *)(a1 + 104) = v43;
      *(_QWORD *)(a1 + 112) = v36;
      *(_QWORD *)(a1 + 120) = v44;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_QWORD *)v15 = v7;
      *((double *)v15 + 1) = v6;
      *((double *)v15 + 2) = v14;
      *((_QWORD *)v15 + 3) = v9;
      v15[32] = v3;
      v15[33] = v10;
      *((_WORD *)v15 + 20) = 0;
      v36 = v15 + 48;
      v15[42] = 0;
    }
    *(_QWORD *)(a1 + 112) = v36;
    if (!*(_BYTE *)(a1 + 232) || *(double *)(a1 + 208) <= v6)
    {
      *(_QWORD *)(a1 + 200) = v7;
      *(double *)(a1 + 208) = v6;
      *(double *)(a1 + 216) = v8;
      *(_QWORD *)(a1 + 224) = v9;
      *(_BYTE *)(a1 + 232) = v3;
      *(_BYTE *)(a1 + 233) = v10;
    }
    if (*(_BYTE *)(a1 + 33))
    {
      v47 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(v5, v9);
      v48 = HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsForSource(v5, v47);
      if (!*((_BYTE *)v48 + 104) || *((double *)v48 + 10) <= v6)
      {
        v48[9] = v7;
        *((double *)v48 + 10) = v6;
        *((double *)v48 + 11) = v8;
        v48[12] = (uint64_t *)v9;
        *((_BYTE *)v48 + 104) = v3;
        *((_BYTE *)v48 + 105) = v10;
      }
    }
    return;
  }
  if (v6 < v11)
    v6 = *(double *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 456);
  v19 = *(_QWORD *)(a1 + 464);
  if (v18 >= v19)
  {
    v21 = *(_QWORD *)(a1 + 448);
    v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
    v23 = v22 + 1;
    if (v22 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
    if (2 * v24 > v23)
      v23 = 2 * v24;
    if (v24 >= 0x333333333333333)
      v25 = 0x666666666666666;
    else
      v25 = v23;
    if (v25)
      v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
    else
      v26 = 0;
    v27 = v25 + 40 * v22;
    v28 = v25 + 40 * v26;
    *(_QWORD *)v27 = v7;
    *(double *)(v27 + 8) = v6;
    *(double *)(v27 + 16) = v8;
    *(_QWORD *)(v27 + 24) = v9;
    *(_BYTE *)(v27 + 32) = v3;
    *(_BYTE *)(v27 + 33) = v10;
    v20 = v27 + 40;
    v30 = *(char **)(a1 + 448);
    v29 = *(char **)(a1 + 456);
    if (v29 != v30)
    {
      do
      {
        v31 = *(_OWORD *)(v29 - 40);
        v32 = *(_OWORD *)(v29 - 24);
        *(_WORD *)(v27 - 8) = *((_WORD *)v29 - 4);
        *(_OWORD *)(v27 - 24) = v32;
        *(_OWORD *)(v27 - 40) = v31;
        v27 -= 40;
        v29 -= 40;
      }
      while (v29 != v30);
      v29 = *(char **)(a1 + 448);
    }
    *(_QWORD *)(a1 + 448) = v27;
    *(_QWORD *)(a1 + 456) = v20;
    *(_QWORD *)(a1 + 464) = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *(_QWORD *)v18 = v7;
    *(double *)(v18 + 8) = v6;
    *(double *)(v18 + 16) = v8;
    *(_QWORD *)(v18 + 24) = v9;
    *(_BYTE *)(v18 + 32) = v3;
    v20 = v18 + 40;
    *(_BYTE *)(v18 + 33) = v10;
  }
  *(_QWORD *)(a1 + 456) = v20;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 594))
  {
    *(_BYTE *)(a1 + 596) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 596) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7CCF7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 448), *(_QWORD *)(a1 + 456), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 456) - *(_QWORD *)(a1 + 448)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7CCF8C8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *i;
  _QWORD *v15;

  v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 472), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 64);
  *(_OWORD *)(v8 + 88) = xmmword_1B7F54AF0;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  if (*(_QWORD *)(v8 + 216))
  {
    v9 = *(_QWORD *)(a1 + 248);
    v10 = *(_QWORD **)(a1 + 240);
    *(_QWORD *)(a1 + 240) = a1 + 248;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    if (v10[1])
      v11 = (_QWORD *)v10[1];
    else
      v11 = v10;
    if (v11)
    {
      v12 = (_QWORD *)v11[2];
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if ((_QWORD *)*v12 == v11)
        {
          *v12 = 0;
          while (1)
          {
            v15 = (_QWORD *)v12[1];
            if (!v15)
              break;
            do
            {
              v12 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; v13 = (_QWORD *)v12[1])
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (i = (_QWORD *)v12[2]; i; i = (_QWORD *)i[2])
          v12 = i;
        v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 472));
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 448);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 596))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 596) = 0;
  }

}

void sub_1B7CCFA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7CCFAFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 608));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 592) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7CCFE60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40E1B91A94);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7CD000C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7CD0278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  char v18;

  v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v8 = 1;
    v9 = a6;
  }
  v13 = a5;
  v14 = v9;
  v15 = a7;
  v16 = a2;
  v17 = v8;
  v18 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  else
  {
    v11 = v7 <= a6;
    v12 = *(double *)(a1 + 40);
    if (v9 >= v12)
      v11 = 0;
    if (!v11 || a7 <= v12)
      v12 = a7;
    v14 = v9;
    v15 = v12;
    v17 = v11;
    if (v11)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 592))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7CD0F00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7CD0FA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI42HDStatisticsTemporalBucketWeightedDiscreteI52HDStatisticsTemporalBucketWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D06000;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_WORD *)(a1 + 704) = 1;
  *(_BYTE *)(a1 + 706) = 0;
  *(_BYTE *)(a1 + 708) = 0;
  *(_QWORD *)(a1 + 712) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_QWORD *)(a1 + 752) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D06000;
  v2 = *(void **)(a1 + 736);
  if (v2)
  {
    *(_QWORD *)(a1 + 744) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 672);
  if (v3)
  {
    *(_QWORD *)(a1 + 680) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 704) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

}

void sub_1B7CD110C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 712) = v4;
    v3 = v5;
  }

}

void sub_1B7CD116C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 90, a2);
  v7 = a2;
  v4 = a1[90];
  v5 = a1[87];
  a1[87] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[87]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 280) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7CD1300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[69];

  if (*(_BYTE *)(a1 + 704))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7CD13A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 706))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 705))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 704))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 707))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 744);
      v20 = *(_QWORD *)(a1 + 752);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 736);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 744);
        v35 = *(char **)(a1 + 736);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 736);
        }
        *(_QWORD *)(a1 + 736) = v30;
        *(_QWORD *)(a1 + 744) = v23;
        *(_QWORD *)(a1 + 752) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 744) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7CD1648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 706))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 706) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 705))
    goto LABEL_5;
  v9 = *(void **)(a1 + 728);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_389);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 728);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 728);
  *(_QWORD *)(a1 + 728) = 0;

  *(_BYTE *)(a1 + 705) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 736);
    *(_QWORD *)(a1 + 752) = 0;
    *(_QWORD *)(a1 + 744) = 0;
    *(_QWORD *)(a1 + 736) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 736);
      v37 = *(__int128 **)(a1 + 744);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 744);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 744) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 736);
  v39 = *(_QWORD *)(a1 + 744);
  *(_QWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 680) != *(_QWORD *)(a1 + 672))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 680) != *(_QWORD *)(a1 + 672));
  }
  *(_BYTE *)(a1 + 706) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 708))
    {
      *(_BYTE *)(a1 + 708) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 706) = 0;
LABEL_83:

  return v7;
}

void sub_1B7CD1D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 706) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 707) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 706))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 706))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 728);
    *(_QWORD *)(a1 + 728) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 705) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 705))
  {
    v8 = *(void **)(a1 + 728);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 728);
      *(_QWORD *)(a1 + 728) = v9;

      v8 = *(void **)(a1 + 728);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7CD203C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 704) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 704) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7CD215C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 704) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 704), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(int **)(a1 + 464);
  if (v9 != (int *)(a1 + 472))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, v9 + 10);
      v10 = *((_QWORD *)v9 + 4);
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (int *)*((_QWORD *)v9 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(int **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (int *)*((_QWORD *)v9 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (int *)(a1 + 472));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 672);
  for (k = *(int8x16_t **)(a1 + 680); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7CD24F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD **i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **j;
  uint64_t **v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t k;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  id v63;
  _QWORD *v64;
  uint64_t v65;
  id v66;
  __n128 v67;
  void *v68[2];
  __int128 v69;
  int8x16_t v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  int8x16_t v74;
  uint64_t v75;
  uint64_t v76[4];
  void *__p;
  char *v78;
  unint64_t v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD v84[2];
  __int128 v85;
  __int128 v86;
  _BYTE v87[98];
  uint64_t **v88;
  uint64_t *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  int v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  int v98;
  __int128 v99;
  __int128 v100;
  int v101;
  __int128 v102;
  __int128 v103;
  int v104;
  void (**v105)(statistics::StatisticsEngine *__hidden);
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  _BYTE v112[32];
  unint64_t v113;
  int v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int16 v130;

  v63 = a2;
  *(_BYTE *)(a1 + 704) = objc_msgSend(v63, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v63;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v67.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v68 = 0u;
  v69 = 0u;
  v113 = 0;
  v66 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v112, (const unsigned __int8 *)objc_msgSend(v66, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v113));
  v65 = a1;
  v105 = &off_1E6D09A88;
  v106 = 0;
  v110 = 0;
  v108 = 0;
  v109 = 0;
  v111 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v105, (PB::Reader *)v112);
  v67.n128_u64[0] = v107;
  if (v106)
  {
    v73 = 0;
    memset(v76, 0, sizeof(v76));
    v85 = 0u;
    v86 = 0u;
    *(_WORD *)v87 = 0;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    memset(v84, 0, 26);
    memset(&v87[8], 0, 90);
    v90 = 0;
    v80 = 0;
    __p = 0;
    v79 = 0;
    v78 = 0;
    v89 = 0;
    v88 = &v89;
    v91 = 0u;
    v92 = 0u;
    v93 = 1065353216;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0;
    v98 = 1065353216;
    v99 = 0u;
    v100 = 0u;
    v101 = 1065353216;
    v103 = 0u;
    v102 = 0u;
    v104 = 1065353216;
    v70 = vextq_s8(*(int8x16_t *)(v106 + 8), *(int8x16_t *)(v106 + 8), 8uLL);
    v4 = *(_QWORD *)(v106 + 72);
    v71 = *(_QWORD *)(v106 + 64);
    v72 = *(_WORD *)(v106 + 185);
    v74 = vextq_s8(*(int8x16_t *)(v106 + 24), *(int8x16_t *)(v106 + 24), 8uLL);
    v75 = v4;
    v5 = *(_QWORD *)(v106 + 80);
    v6 = *(_QWORD *)(v106 + 88);
    v64 = (_QWORD *)v106;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v79)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v79 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v79 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v78;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v78 = (char *)(v19 + 6);
          v79 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v78 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = (_QWORD *)v64[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v114, v23);
      v80 = v114;
      *(_QWORD *)&v87[16] = v123;
      v86 = v121;
      *(_OWORD *)v87 = v122;
      v83 = v117;
      v84[0] = v118;
      v84[1] = v119;
      v85 = v120;
      v81 = v115;
      v82 = v116;
      *(_QWORD *)&v87[24] = v124;
      if (*(_QWORD *)&v87[32])
      {
        *(_QWORD *)&v87[40] = *(_QWORD *)&v87[32];
        operator delete(*(void **)&v87[32]);
      }
      *(_OWORD *)&v87[32] = v125;
      *(_QWORD *)&v87[48] = v126;
      v126 = 0;
      v125 = 0uLL;
      *(_QWORD *)&v87[56] = v127;
      *(_OWORD *)&v87[64] = v128;
      *(_OWORD *)&v87[80] = v129;
      *(_WORD *)&v87[96] = v130;
    }
    v24 = (_QWORD **)v64[17];
    for (i = (_QWORD **)v64[18]; v24 != i; ++v24)
    {
      v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v114, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v89;
      for (j = &v89; ; v28 = *j)
      {
        v30 = j;
        if (!v28)
          break;
        while (1)
        {
          j = (uint64_t **)v28;
          v31 = v28[4];
          if (v31 > v27)
            break;
          if (v31 >= v27)
          {
            v32 = (char *)j;
            goto LABEL_37;
          }
          v28 = j[1];
          if (!v28)
          {
            v30 = j + 1;
            goto LABEL_34;
          }
        }
      }
LABEL_34:
      v32 = (char *)operator new(0x108uLL);
      *((_QWORD *)v32 + 4) = v27;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 56) = 0u;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      *(_OWORD *)(v32 + 104) = 0u;
      *(_OWORD *)(v32 + 120) = 0u;
      *(_OWORD *)(v32 + 136) = 0u;
      *(_OWORD *)(v32 + 152) = 0u;
      *(_OWORD *)(v32 + 168) = 0u;
      *(_OWORD *)(v32 + 184) = 0u;
      *(_OWORD *)(v32 + 200) = 0u;
      *(_OWORD *)(v32 + 216) = 0u;
      *(_OWORD *)(v32 + 232) = 0u;
      *(_OWORD *)(v32 + 248) = 0u;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = j;
      *v30 = (uint64_t *)v32;
      v33 = (uint64_t *)v32;
      if (*v88)
      {
        v88 = (uint64_t **)*v88;
        v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v89, v33);
      ++v90;
LABEL_37:
      *((_DWORD *)v32 + 10) = v114;
      v34 = v119;
      *((_OWORD *)v32 + 6) = v118;
      *((_OWORD *)v32 + 7) = v34;
      v35 = v117;
      v36 = v115;
      *((_OWORD *)v32 + 4) = v116;
      *((_OWORD *)v32 + 5) = v35;
      v37 = v123;
      v38 = v122;
      v39 = v120;
      *((_OWORD *)v32 + 9) = v121;
      *((_OWORD *)v32 + 10) = v38;
      *((_OWORD *)v32 + 8) = v39;
      *((_QWORD *)v32 + 22) = v37;
      *((_OWORD *)v32 + 3) = v36;
      v40 = (void *)*((_QWORD *)v32 + 24);
      *((_QWORD *)v32 + 23) = v124;
      if (v40)
      {
        *((_QWORD *)v32 + 25) = v40;
        operator delete(v40);
        *((_QWORD *)v32 + 24) = 0;
        *((_QWORD *)v32 + 25) = 0;
        *((_QWORD *)v32 + 26) = 0;
      }
      *((_OWORD *)v32 + 12) = v125;
      *((_QWORD *)v32 + 26) = v126;
      v126 = 0;
      v125 = 0uLL;
      *((_QWORD *)v32 + 27) = v127;
      v41 = v129;
      *((_OWORD *)v32 + 14) = v128;
      *((_OWORD *)v32 + 15) = v41;
      *((_WORD *)v32 + 128) = v130;
    }
    v42 = v64[5];
    for (k = v64[6]; v42 != k; v42 += 8)
    {
      v45 = *(double *)(*(_QWORD *)v42 + 8);
      v44 = *(double *)(*(_QWORD *)v42 + 16);
      if (v45 >= v44)
        v46 = *(double *)(*(_QWORD *)v42 + 16);
      else
        v46 = *(double *)(*(_QWORD *)v42 + 8);
      if (v44 < v45)
        v44 = *(double *)(*(_QWORD *)v42 + 8);
      HKIntervalMask<double>::_insertInterval(v76, v46, v44);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((uint64_t)&v67.n128_i64[1], (uint64_t)&v70);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v70);
  }
  v47 = v108;
  v48 = v109;
  if (v108 != v109)
  {
    v49 = (char *)v68[1];
    do
    {
      v50 = *(_QWORD *)(*(_QWORD *)v47 + 24);
      v51 = *(_QWORD *)(*(_QWORD *)v47 + 32);
      v52 = *(_QWORD *)(*(_QWORD *)v47 + 8);
      v53 = *(_QWORD *)(*(_QWORD *)v47 + 16);
      if ((unint64_t)v49 >= (unint64_t)v69)
      {
        v54 = (char *)v68[0];
        v55 = 0xCCCCCCCCCCCCCCCDLL * ((v49 - (char *)v68[0]) >> 3);
        v56 = v55 + 1;
        if (v55 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v69 - (unint64_t)v68[0]) >> 3) > v56)
          v56 = 0x999999999999999ALL * ((uint64_t)(v69 - (unint64_t)v68[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v69 - (unint64_t)v68[0]) >> 3) >= 0x333333333333333)
          v57 = 0x666666666666666;
        else
          v57 = v56;
        if (v57)
        {
          v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v57);
          v49 = (char *)v68[1];
          v54 = (char *)v68[0];
        }
        else
        {
          v58 = 0;
        }
        v59 = v57 + 40 * v55;
        *(_QWORD *)v59 = v51;
        *(_QWORD *)(v59 + 8) = v50;
        *(_QWORD *)(v59 + 16) = v52;
        *(_QWORD *)(v59 + 24) = v53;
        *(_WORD *)(v59 + 32) = 1;
        v60 = (char *)v59;
        if (v49 != v54)
        {
          do
          {
            v61 = *(_OWORD *)(v49 - 40);
            v62 = *(_OWORD *)(v49 - 24);
            *((_WORD *)v60 - 4) = *((_WORD *)v49 - 4);
            *(_OWORD *)(v60 - 24) = v62;
            *(_OWORD *)(v60 - 40) = v61;
            v60 -= 40;
            v49 -= 40;
          }
          while (v49 != v54);
          v54 = (char *)v68[0];
        }
        v68[0] = v60;
        v49 = (char *)(v59 + 40);
        v68[1] = (void *)(v59 + 40);
        *(_QWORD *)&v69 = v57 + 40 * v58;
        if (v54)
          operator delete(v54);
      }
      else
      {
        *(_QWORD *)v49 = v51;
        *((_QWORD *)v49 + 1) = v50;
        *((_QWORD *)v49 + 2) = v52;
        *((_QWORD *)v49 + 3) = v53;
        *((_WORD *)v49 + 16) = 1;
        v49 += 40;
      }
      v68[1] = v49;
      v47 += 8;
    }
    while (v47 != v48);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v105);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(v65 + 112), &v67);
  if (v68[0])
  {
    v68[1] = v68[0];
    operator delete(v68[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v67.n128_i64[1]);

}

void sub_1B7CD2D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x490]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x440]);
  v10 = (void *)STACK[0x428];
  if (STACK[0x428])
  {
    STACK[0x430] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x400]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy((_QWORD *)STACK[0x3F0]);
  v11 = (void *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    STACK[0x3A8] = (unint64_t)v11;
    operator delete(v11);
  }
  v12 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v12;
    operator delete(v12);
  }
  objc_destroyWeak((id *)&STACK[0x2E8]);
  v13 = (void *)STACK[0x2D0];
  if (STACK[0x2D0])
  {
    STACK[0x2D8] = (unint64_t)v13;
    operator delete(v13);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x4C0]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

