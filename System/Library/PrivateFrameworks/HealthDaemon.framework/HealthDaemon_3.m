uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_WORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 322) = 0u;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 344) = a1 + 352;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 504) = 1065353216;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_DWORD *)(a1 + 544) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 560);
  if (v2)
  {
    *(_QWORD *)(a1 + 568) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 512);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 472);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 432);
  v2 = *(void **)(a1 + 408);
  if (v2)
  {
    *(_QWORD *)(a1 + 416) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 368);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 352));
  v3 = *(void **)(a1 + 272);
  if (v3)
  {
    *(_QWORD *)(a1 + 280) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    v2 = (void *)a1[24];
    if (v2)
    {
      a1[25] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[552];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[488];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 720));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 704) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7CD3288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 70), a2 + 35);
  v4 = a2[36].n128_u64[1];
  a2[36].n128_u64[1] = 0;
  v5 = (void *)a1[73];
  a1[73] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v12 = *(_OWORD *)(a2 + 144);
  v13 = *(_OWORD *)(a2 + 160);
  v14 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v13;
  v15 = *(_OWORD *)(a2 + 208);
  v16 = *(_OWORD *)(a2 + 224);
  v17 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 208) = v15;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 272), *(const void **)(a2 + 272), *(_QWORD *)(a2 + 280), (uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  v18 = *(_OWORD *)(a2 + 320);
  v19 = *(_QWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v18;
  v20 = (_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 336) = v19;
  *(_QWORD *)(a1 + 344) = a1 + 352;
  v21 = *(_QWORD **)(a2 + 344);
  if (v21 != (_QWORD *)(a2 + 352))
  {
    v22 = 0;
    v23 = (_QWORD *)(a1 + 352);
    while (1)
    {
      v24 = (_QWORD *)(a1 + 352);
      if (v23 == v20)
        goto LABEL_12;
      v25 = v22;
      v26 = (_QWORD *)(a1 + 352);
      if (v22)
      {
        do
        {
          v24 = v25;
          v25 = (_QWORD *)v25[1];
        }
        while (v25);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v26[2];
          v27 = *v24 == (_QWORD)v26;
          v26 = v24;
        }
        while (v27);
      }
      v28 = v21[4];
      if (v24[4] < v28)
      {
LABEL_12:
        if (v22)
          v29 = (uint64_t **)v24;
        else
          v29 = (uint64_t **)(a1 + 352);
        if (v22)
          v30 = (uint64_t **)(v24 + 1);
        else
          v30 = (uint64_t **)(a1 + 352);
        if (!*v30)
        {
LABEL_28:
          v33 = operator new(0x108uLL);
          v33[4] = v21[4];
          *((_DWORD *)v33 + 10) = *((_DWORD *)v21 + 10);
          *((_OWORD *)v33 + 3) = *((_OWORD *)v21 + 3);
          v34 = *((_OWORD *)v21 + 4);
          v35 = *((_OWORD *)v21 + 5);
          v36 = *((_OWORD *)v21 + 7);
          *((_OWORD *)v33 + 6) = *((_OWORD *)v21 + 6);
          *((_OWORD *)v33 + 7) = v36;
          *((_OWORD *)v33 + 4) = v34;
          *((_OWORD *)v33 + 5) = v35;
          v37 = *((_OWORD *)v21 + 8);
          v38 = *((_OWORD *)v21 + 9);
          v39 = *((_OWORD *)v21 + 10);
          v33[22] = v21[22];
          *((_OWORD *)v33 + 9) = v38;
          *((_OWORD *)v33 + 10) = v39;
          *((_OWORD *)v33 + 8) = v37;
          v40 = v21[23];
          v33[24] = 0;
          v33[23] = v40;
          v33[25] = 0;
          v33[26] = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v33 + 24, (const void *)v21[24], v21[25], (uint64_t)(v21[25] - v21[24]) >> 4);
          v33[27] = v21[27];
          v41 = *((_OWORD *)v21 + 14);
          v42 = *((_OWORD *)v21 + 15);
          v33[32] = v21[32];
          *((_OWORD *)v33 + 14) = v41;
          *((_OWORD *)v33 + 15) = v42;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 344), (uint64_t)v29, v30, v33);
        }
      }
      else
      {
        v30 = (uint64_t **)(a1 + 352);
        v29 = (uint64_t **)(a1 + 352);
        if (!v22)
          goto LABEL_28;
        v31 = v22;
        while (1)
        {
          while (1)
          {
            v29 = (uint64_t **)v31;
            v32 = v31[4];
            if (v32 <= v28)
              break;
            v31 = *v29;
            v30 = v29;
            if (!*v29)
              goto LABEL_28;
          }
          if (v32 >= v28)
            break;
          v31 = v29[1];
          if (!v31)
          {
            v30 = v29 + 1;
            goto LABEL_28;
          }
        }
      }
      v43 = (_QWORD *)v21[1];
      if (v43)
      {
        do
        {
          v44 = v43;
          v43 = (_QWORD *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (_QWORD *)v21[2];
          v27 = *v44 == (_QWORD)v21;
          v21 = v44;
        }
        while (!v27);
      }
      if (v44 == (_QWORD *)(a2 + 352))
        break;
      v22 = (_QWORD *)*v20;
      v23 = *(_QWORD **)(a1 + 344);
      v21 = v44;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 368, a2 + 368);
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 408), *(const void **)(a2 + 408), *(_QWORD *)(a2 + 416), (uint64_t)(*(_QWORD *)(a2 + 416) - *(_QWORD *)(a2 + 408)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 432, a2 + 432);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 472, a2 + 472);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 512, a2 + 512);
  return a1;
}

void sub_1B7CD36C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v12 + 416) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*v13);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 280) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 144);
  v11 = *(_OWORD *)(a2 + 160);
  v12 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 160) = v11;
  v13 = *(_OWORD *)(a2 + 208);
  v14 = *(_OWORD *)(a2 + 224);
  v15 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 240) = v15;
  *(_OWORD *)(a1 + 208) = v13;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 272, (__n128 *)(a2 + 272));
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  v16 = *(_OWORD *)(a2 + 304);
  v17 = *(_OWORD *)(a2 + 320);
  *(_WORD *)(a1 + 336) = *(_WORD *)(a2 + 336);
  *(_OWORD *)(a1 + 304) = v16;
  *(_OWORD *)(a1 + 320) = v17;
  v18 = a1 + 352;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 352));
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  v19 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 352) = v19;
  v20 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 360) = v20;
  if (v20)
  {
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(a2 + 344) = a2 + 352;
    *(_QWORD *)(a2 + 352) = 0;
    *(_QWORD *)(a2 + 360) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 344) = v18;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 408, (__n128 *)(a2 + 408));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 432, (uint64_t *)(a2 + 432));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 472, (uint64_t *)(a2 + 472));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 512, (uint64_t *)(a2 + 512));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  double v3;
  id v4;
  double *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  __n128 v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  __n128 v35;
  id v36;
  id v37;
  uint64_t **i;
  uint64_t *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  void *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  double v59;
  double v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  int v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  id v78;
  id v79;
  id v80;
  uint64_t **j;
  uint64_t *v82;
  void *v83;
  uint64_t v84;
  double v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  double v90;
  double v91;
  void *v92;
  void *v93;
  void *v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  void *v102;
  void *v103;
  int v104;
  void *v105;
  void *v106;
  int v107;
  id v109;
  id v110;
  uint64_t v111;
  id v113;
  id v114;
  _BYTE v115[16];
  uint64_t **v116;
  void *__p;
  void *v118;
  _QWORD v119[3];
  _QWORD *v120;
  _QWORD v121[3];
  _QWORD *v122;
  _QWORD v123[3];
  _QWORD *v124;
  _BYTE v125[24];
  _BYTE *v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = a2 + 5;
  if (v3 != -1.79769313e308)
    v5 = a2;
  v6 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  v111 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v6, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(v111 + 408);
      v16 = *(uint64_t **)(v111 + 416);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v20 = (void *)objc_msgSend(v14, "copy");
      objc_msgSend(v12, "_setSources:", v20);

    }
  }

  v119[0] = &off_1E6D061F0;
  v120 = v119;
  v21 = v12;
  v22 = (uint64_t)v120;
  if (!v120)
    goto LABEL_22;
  if (v120 != v119)
  {
    v22 = (*(uint64_t (**)(void))(*v120 + 16))();
LABEL_22:
    v124 = (_QWORD *)v22;
    goto LABEL_24;
  }
  v124 = v123;
  (*(void (**)(uint64_t, _QWORD *))(v119[0] + 24))((uint64_t)v119, v123);
LABEL_24:
  v126 = 0;
  v23 = operator new(0x28uLL);
  *v23 = &off_1E6D060D0;
  v24 = v23 + 1;
  v25 = (uint64_t)v124;
  if (!v124)
  {
LABEL_27:
    v23[4] = v25;
    goto LABEL_29;
  }
  if (v124 != v123)
  {
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v124 + 16))(v124, v24);
    goto LABEL_27;
  }
  v23[4] = v24;
  (*(void (**)(_QWORD *))(v123[0] + 24))(v123);
LABEL_29:
  v126 = v23;
  v113 = v21;
  v26 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v115, v111);
  if (!v126)
    std::__throw_bad_function_call[abi:ne180100]();
  v29 = (*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v126 + 48))(v126, v115, v28);
  v30 = *(double **)(v29 + 8);
  v31 = 0.0;
  while (v30 != *(double **)(v29 + 16))
  {
    v33 = *v30;
    v32 = v30[1];
    v30 += 2;
    v31 = v31 + v32 - v33;
  }
  objc_msgSend(v26, "quantityWithUnit:doubleValue:", v27, v31 + *(double *)(v29 + 32));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v113, "setDuration:", v34);

  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }

  v35 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v115, v111);
  if (!v126)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v113, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v126 + 48))(v126, v115, v35));
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v36 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v37 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v115, v111);
    for (i = v116; i; i = (uint64_t **)*i)
    {
      v39 = i[2];
      v40 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v126)
        std::__throw_bad_function_call[abi:ne180100]();
      v42 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v126 + 48))(v126, (uint64_t *)i + 3);
      v43 = *(double **)(v42 + 8);
      v44 = 0.0;
      while (v43 != *(double **)(v42 + 16))
      {
        v46 = *v43;
        v45 = v43[1];
        v43 += 2;
        v44 = v44 + v45 - v46;
      }
      objc_msgSend(v40, "quantityWithUnit:doubleValue:", v41, v44 + *(double *)(v42 + 32));
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "setObject:forKeyedSubscript:", v47, v39);

      if (!v126)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v126 + 48))(v126, (uint64_t *)i + 3));
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "setObject:forKeyedSubscript:", v48, v39);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v115);
    objc_msgSend(v113, "setDurationBySource:", v36);
    objc_msgSend(v113, "setDataCountBySource:", v37);

  }
  v49 = v126;
  if (v126 == v125)
  {
    v50 = 4;
    v49 = v125;
  }
  else
  {
    if (!v126)
      goto LABEL_52;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_52:
  v51 = v124;
  if (v124 == v123)
  {
    v52 = 4;
    v51 = v123;
  }
  else
  {
    if (!v124)
      goto LABEL_57;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_57:
  v53 = (uint64_t)v120;
  if (!v120)
  {
LABEL_60:
    v122 = (_QWORD *)v53;
    goto LABEL_62;
  }
  if (v120 != v119)
  {
    v53 = (*(uint64_t (**)(void))(*v120 + 16))();
    goto LABEL_60;
  }
  v122 = v121;
  (*(void (**)(uint64_t, _QWORD *))(v119[0] + 24))((uint64_t)v119, v121);
LABEL_62:
  v126 = 0;
  v54 = operator new(0x28uLL);
  *v54 = &off_1E6D06160;
  v55 = (uint64_t)v122;
  if (!v122)
  {
LABEL_65:
    v54[4] = v55;
    goto LABEL_67;
  }
  if (v122 != v121)
  {
    v55 = (*(uint64_t (**)(void))(*v122 + 16))();
    goto LABEL_65;
  }
  v54[4] = v54 + 1;
  (*(void (**)(_QWORD *))(v121[0] + 24))(v121);
LABEL_67:
  v126 = v54;
  v114 = v113;
  v56 = *(_QWORD *)(a1 + 24);
  v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v115, v111);
  if (!v126)
    std::__throw_bad_function_call[abi:ne180100]();
  v58 = (*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v126 + 48))(v126, v115, v57);
  v59 = *(double *)(v58 + 8);
  v60 = *(double *)(v58 + 16);
  v61 = *(_QWORD *)(v58 + 32);
  v63 = *(double *)(v58 + 40);
  v62 = *(double *)(v58 + 48);
  v64 = *(double *)(v58 + 56);
  v65 = *(double *)(v58 + 80);
  v66 = *(unsigned __int8 *)(v58 + 112);
  v67 = *(double *)(v58 + 120);
  v68 = *(double *)(v58 + 128);
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }
  v69 = *(_QWORD *)(a1 + 24);
  v70 = _HKStatisticsOptionBaselineRelativeQuantities();
  v71 = *(void **)(a1 + 16);
  if ((v70 & v69) != 0)
    objc_msgSend(v71, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v71, "canonicalUnit");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v56 & 2) != 0)
  {
    if (v66)
      v67 = v67 + (v65 - v67) * 22.5 / (v68 + 22.5);
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v72, v67);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "setAverageQuantity:", v73);

  }
  if ((v56 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v72, v60);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "setMinimumQuantity:", v74);

  }
  if ((v56 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v72, v59);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "setMaximumQuantity:", v75);

  }
  if ((v56 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v72, v63);
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "setMostRecentQuantity:", v76);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v62, v64);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "setMostRecentQuantityDateInterval:", v77);

  }
  objc_msgSend(v114, "setDataCount:", v61);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_122;
  if ((v56 & 2) != 0)
  {
    v69 = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
    if ((v56 & 4) == 0)
      goto LABEL_86;
LABEL_88:
    v110 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    goto LABEL_89;
  }
  v69 = 0;
  if ((v56 & 4) != 0)
    goto LABEL_88;
LABEL_86:
  v110 = 0;
LABEL_89:
  if ((v56 & 8) != 0)
    v109 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v109 = 0;
  if ((v56 & 0x20) != 0)
  {
    v79 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v78 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v78 = 0;
    v79 = 0;
  }
  v80 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v115, v111);
  for (j = v116; j; j = (uint64_t **)*j)
  {
    v82 = j[2];
    if ((v56 & 2) != 0)
    {
      if (!v126)
        goto LABEL_153;
      v83 = (void *)MEMORY[0x1E0CB6A28];
      v84 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v126 + 48))(v126, (uint64_t *)j + 3);
      if (*(_BYTE *)(v84 + 112))
        v85 = *(double *)(v84 + 120)
            + (*(double *)(v84 + 80) - *(double *)(v84 + 120)) * 22.5 / (*(double *)(v84 + 128) + 22.5);
      else
        v85 = *(double *)(v84 + 120);
      objc_msgSend(v83, "quantityWithUnit:doubleValue:", v72, v85);
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)v69, "setObject:forKeyedSubscript:", v86, v82);

    }
    if ((v56 & 4) != 0)
    {
      if (!v126)
        goto LABEL_153;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v72, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v126 + 48))(v126, (uint64_t *)j + 3) + 16));
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v110, "setObject:forKeyedSubscript:", v87, v82);

    }
    if ((v56 & 8) != 0)
    {
      if (!v126)
        goto LABEL_153;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v72, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v126 + 48))(v126, (uint64_t *)j + 3) + 8));
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v109, "setObject:forKeyedSubscript:", v88, v82);

    }
    if ((v56 & 0x20) != 0)
    {
      if (!v126)
        std::__throw_bad_function_call[abi:ne180100]();
      v89 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v126 + 48))(v126, (uint64_t *)j + 3);
      v90 = *(double *)(v89 + 48);
      v91 = *(double *)(v89 + 56);
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v72, *(double *)(v89 + 40));
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v79, "setObject:forKeyedSubscript:", v92, v82);

      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v90, v91);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v78, "setObject:forKeyedSubscript:", v93, v82);

    }
    if (!v126)
LABEL_153:
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v126 + 48))(v126, (uint64_t *)j + 3) + 32));
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v80, "setObject:forKeyedSubscript:", v94, v82);

  }
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v115);
  if ((v56 & 2) != 0)
    objc_msgSend(v114, "setAverageQuantityBySource:", v69);
  if ((v56 & 4) != 0)
    objc_msgSend(v114, "setMinimumQuantityBySource:", v110);
  if ((v56 & 8) != 0)
    objc_msgSend(v114, "setMaximumQuantityBySource:", v109);
  if ((v56 & 0x20) != 0)
  {
    objc_msgSend(v114, "setMostRecentQuantityBySource:", v79);
    objc_msgSend(v114, "setMostRecentQuantityDateIntervalBySource:", v78);
  }
  objc_msgSend(v114, "setDataCountBySource:", v80);

LABEL_122:
  v95 = v126;
  if (v126 == v125)
  {
    v96 = 4;
    v95 = v125;
  }
  else
  {
    if (!v126)
      goto LABEL_127;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_127:
  v97 = v122;
  if (v122 == v121)
  {
    v98 = 4;
    v97 = v121;
  }
  else
  {
    if (!v122)
      goto LABEL_132;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_132:

  v99 = v120;
  if (v120 == v119)
  {
    v100 = 4;
    v99 = v119;
    goto LABEL_136;
  }
  if (v120)
  {
    v100 = 5;
LABEL_136:
    (*(void (**)(void))(*v99 + 8 * v100))();
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v114, "averageQuantity");
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  if (v102)
  {
    objc_msgSend(v114, "averageQuantity");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v72, "isCompatibleWithUnit:", v101) & 1) == 0)
    {

LABEL_151:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v101);
      goto LABEL_152;
    }
  }
  objc_msgSend(v114, "minimumQuantity");
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  if (v103)
  {
    objc_msgSend(v114, "minimumQuantity");
    v69 = objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend((id)v69, "isCompatibleWithUnit:", v101))
    {
      v104 = 1;
      goto LABEL_145;
    }
  }
  objc_msgSend(v114, "maximumQuantity");
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  if (v105)
  {
    objc_msgSend(v114, "maximumQuantity");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = objc_msgSend(v106, "isCompatibleWithUnit:", v101);

    v104 = v107 ^ 1;
    if (v103)
      goto LABEL_145;
  }
  else
  {
    v104 = 0;
    if (v103)
    {
LABEL_145:

      if (v102)
        goto LABEL_146;
      goto LABEL_150;
    }
  }
  if (v102)
  {
LABEL_146:

    if ((v104 & 1) == 0)
      goto LABEL_152;
    goto LABEL_151;
  }
LABEL_150:

  if (v104)
    goto LABEL_151;
LABEL_152:

  return v114;
}

void sub_1B7CD4684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, _Unwind_Exception *exception_object, void *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char *a48)
{
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;

  v52 = *(_QWORD **)(v51 - 168);
  if (v52 == (_QWORD *)(v51 - 192))
  {
    v53 = 4;
    v52 = (_QWORD *)(v51 - 192);
  }
  else
  {
    if (!v52)
      goto LABEL_6;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_6:
  v54 = *(_QWORD **)(v51 - 232);
  if (v54 == (_QWORD *)(v51 - 256))
  {
    v55 = 4;
    v54 = (_QWORD *)(v51 - 256);
  }
  else
  {
    if (!v54)
      goto LABEL_11;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_11:

  v56 = a48;
  if (a48 == &a45)
  {
    v57 = 4;
    v56 = &a45;
  }
  else
  {
    if (!a48)
      goto LABEL_16;
    v57 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
LABEL_16:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 392);
  v2 = *(_QWORD *)(a1 + 408);
  if (v1 != (*(_QWORD *)(a1 + 416) - v2) >> 3)
  {
    v4 = (void **)(a1 + 408);
    *(_QWORD *)(a1 + 416) = v2;
    std::vector<long long>::reserve((void **)(a1 + 408), v1);
    v5 = *(_QWORD **)(a1 + 384);
    if (v5)
    {
      v6 = *(char **)(a1 + 416);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 424);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 408);
            v6 = *(char **)(a1 + 416);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 408) = v16;
          *(_QWORD *)(a1 + 416) = v9;
          *(_QWORD *)(a1 + 424) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 416) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7CD4C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  int64_t v11;
  char v12;
  char v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  id WeakRetained;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  double var0;
  uint64_t v47;
  int64_t v48;
  _BOOL4 var4;
  BOOL var5;
  double v51;
  int v52;
  int v53;
  unint64_t var3;
  _OWORD *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  void *v77;
  unint64_t v78;
  uint64_t *v79;
  BOOL v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  BOOL v95;
  int v96;
  int v97;
  int v98;
  double v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  unint64_t v103;
  uint64_t *v104;
  __int128 v105;
  char *v106;
  double v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  double **v111;
  id *location;
  void *v113;
  id v114;
  uint64_t *v115;
  int64_t v116;
  double **v117;
  char v118;
  BOOL v119;
  int64_t v120;
  void **v121;
  uint64_t v122;
  HDRawQuantitySample v123;
  __int128 v124;
  __int128 v125;
  __int16 v126;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v121 = (void **)(a1 + 96);
    v117 = (double **)(a1 + 64);
    v115 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    v111 = (double **)(a1 + 272);
    v110 = (_QWORD *)(a1 + 352);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_127:
      *(double *)(a1 + 56) = a2;
LABEL_128:
      v107 = *(double *)(a1 + 56);
      if (v107 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>, HDStatisticsTimeInterval>>]");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v108, "handleFailureInFunction:file:lineNumber:description:", v109, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v107 = *(double *)(a1 + 56);
      }
      v5 = v107;
      if (v107 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v17 = a2;
      v18 = a2;
      v19 = v5;
      v20 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v21 = *(double *)(v20 + 8);
          v22 = *(double *)(v20 + 16);
          if (v21 > v19 && v21 < v18)
            v18 = *(double *)(v20 + 8);
          if (v22 > v5)
            v24 = *(double *)(v20 + 16);
          else
            v24 = v17;
          if (v22 < v17)
          {
            v19 = v5;
            v17 = v24;
          }
          v20 += 48;
        }
        while ((__int128 *)v20 != v7);
      }
      if (v17 >= v18)
        v25 = v18;
      else
        v25 = v17;
      v26 = *(double *)(a1 + 16);
      if (v26 > 0.0)
      {
        v27 = v26 * floor(v25 / v26);
        v28 = v26 * floor((v26 + v5) / v26);
        if (v27 >= v28)
          v25 = v27;
        else
          v25 = v28;
      }
      *v121 = 0;
      v121[1] = 0;
      v121[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        v32 = *(char **)(a1 + 96);
        v31 = *(char **)(a1 + 104);
        v33 = v29;
        if (v31 != v32)
        {
          do
          {
            v34 = *((_OWORD *)v31 - 3);
            v35 = *((_OWORD *)v31 - 2);
            *(_OWORD *)(v33 - 21) = *(_OWORD *)(v31 - 21);
            *((_OWORD *)v33 - 3) = v34;
            *((_OWORD *)v33 - 2) = v35;
            v33 -= 48;
            v31 -= 48;
          }
          while (v31 != v32);
          v31 = (char *)*v121;
        }
        *(_QWORD *)(a1 + 96) = v33;
        *(_QWORD *)(a1 + 104) = v29;
        *(_QWORD *)(a1 + 112) = &v29[48 * v30];
        if (v31)
          operator delete(v31);
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      v37 = __clz(v8);
      if (WeakRetained)
      {
        *(_QWORD *)&v123.var0 = a1;
        v38 = 126 - 2 * v37;
        if ((__int128 *)v6 == v7)
          v39 = 0;
        else
          v39 = v38;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v123, v39, 1);
      }
      else
      {
        v42 = 126 - 2 * v37;
        if ((__int128 *)v6 == v7)
          v39 = 0;
        else
          v39 = v42;
      }
      std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, v39, 1);
      if (*(_BYTE *)(a1 + 25))
        v114 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v114 = 0;
      v113 = (void *)v6;
      if ((__int128 *)v6 == v7)
      {
LABEL_109:
        *(double *)(a1 + 296) = HKIntervalMask<double>::removeIntervalsBefore(v111, v25) + *(double *)(a1 + 296);
        v92 = *(_QWORD **)(a1 + 344);
        if (v92 != v110)
        {
          do
          {
            *((double *)v92 + 27) = HKIntervalMask<double>::removeIntervalsBefore((double **)v92 + 24, v25)
                                  + *((double *)v92 + 27);
            v93 = (_QWORD *)v92[1];
            if (v93)
            {
              do
              {
                v94 = v93;
                v93 = (_QWORD *)*v93;
              }
              while (v93);
            }
            else
            {
              do
              {
                v94 = (_QWORD *)v92[2];
                v95 = *v94 == (_QWORD)v92;
                v92 = v94;
              }
              while (!v95);
            }
            v92 = v94;
          }
          while (v94 != v110);
        }
        *(double *)(a1 + 56) = v25;

        if (v113)
          operator delete(v113);
        goto LABEL_128;
      }
      v116 = 0;
      v43 = 0;
      v44 = v6;
      while (2)
      {
        v45 = *(_OWORD *)(v44 + 16);
        *(_OWORD *)&v123.var0 = *(_OWORD *)v44;
        *(_OWORD *)&v123.var2 = v45;
        *(_QWORD *)&v123.var4 = *(_QWORD *)(v44 + 32);
        var0 = v123.var0;
        v47 = v45;
        if (*(double *)&v45 - v123.var1 - (v25 - v123.var1) < 0.01)
        {
          v48 = 0;
          var4 = 0;
          var5 = 0;
          v51 = 0.0;
          v47 = 0;
          if (!v123.var4)
            goto LABEL_62;
LABEL_57:
          v119 = var5;
          v120 = v48;
          HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
          v52 = *(unsigned __int8 *)(v44 + 42);
          v53 = *(unsigned __int8 *)(v44 + 41);
          v118 = *(_BYTE *)(v44 + 40);
          if (!v123.var4)
            goto LABEL_90;
          if ((v43 & 1) != 0)
          {
            var3 = v123.var3;
            if (v116 == v123.var3 || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v115, &v123, v52 == 0);
              v52 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v115, &v123, v52 == 0);
            v52 = 1;
            var3 = v123.var3;
            v116 = v123.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_89;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v65)
            goto LABEL_88;
          objc_msgSend(v114, "objectForKeyedSubscript:", v65);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = v66;
          if (v66)
          {
            if (objc_msgSend(v66, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_87:

LABEL_88:
LABEL_89:
              v43 = 1;
LABEL_90:
              if (var4)
              {
                v80 = v52 != 0;
                v82 = *(char **)(a1 + 104);
                v81 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v82 < v81)
                {
                  *(double *)v82 = var0;
                  *((double *)v82 + 1) = v51;
                  *((_QWORD *)v82 + 2) = v47;
                  *((_QWORD *)v82 + 3) = v120;
                  v82[32] = var4;
                  v82[33] = v119;
                  v82[40] = v118;
                  v82[41] = v53;
                  v59 = v82 + 48;
                  v82[42] = v80;
                  goto LABEL_107;
                }
                v76 = (char *)*v121;
                v83 = 0xAAAAAAAAAAAAAAABLL * ((v82 - (_BYTE *)*v121) >> 4);
                v84 = v83 + 1;
                if (v83 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (_QWORD)v76) >> 4);
                if (2 * v85 > v84)
                  v84 = 2 * v85;
                if (v85 >= 0x2AAAAAAAAAAAAAALL)
                  v86 = 0x555555555555555;
                else
                  v86 = v84;
                if (v86)
                {
                  v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v86);
                  v76 = *(char **)(a1 + 96);
                  v82 = *(char **)(a1 + 104);
                }
                else
                {
                  v87 = 0;
                }
                v88 = v86 + 48 * v83;
                *(double *)v88 = var0;
                *(double *)(v88 + 8) = v51;
                *(_QWORD *)(v88 + 16) = v47;
                *(_QWORD *)(v88 + 24) = v120;
                *(_BYTE *)(v88 + 32) = var4;
                *(_BYTE *)(v88 + 33) = v119;
                *(_BYTE *)(v88 + 40) = v118;
                *(_BYTE *)(v88 + 41) = v53;
                *(_BYTE *)(v88 + 42) = v80;
                v89 = v88;
                if (v82 != v76)
                {
                  do
                  {
                    v90 = *((_OWORD *)v82 - 3);
                    v91 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)(v89 - 21) = *(_OWORD *)(v82 - 21);
                    *(_OWORD *)(v89 - 48) = v90;
                    *(_OWORD *)(v89 - 32) = v91;
                    v89 -= 48;
                    v82 -= 48;
                  }
                  while (v82 != v76);
                  v76 = (char *)*v121;
                }
                v59 = (_OWORD *)(v88 + 48);
                *(_QWORD *)(a1 + 96) = v89;
                *(_QWORD *)(a1 + 104) = v88 + 48;
                *(_QWORD *)(a1 + 112) = v86 + 48 * v87;
                if (v76)
LABEL_106:
                  operator delete(v76);
                goto LABEL_107;
              }
              goto LABEL_108;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v114, "setObject:forKeyedSubscript:", v77, v65);

          }
          v78 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
          v79 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v78);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v79, &v123, v53 == 0);
          LOBYTE(v53) = 1;
          goto LABEL_87;
        }
        if (v25 - v123.var1 < 0.01)
        {
          v123.var4 = 0;
          goto LABEL_62;
        }
        v48 = v123.var3;
        var5 = v123.var5;
        v123.var2 = v25;
        v51 = v25;
        var4 = v123.var4;
        if (v123.var4)
          goto LABEL_57;
LABEL_62:
        v55 = *(_OWORD **)(a1 + 104);
        v56 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v55 < v56)
        {
          v57 = *(_OWORD *)v44;
          v58 = *(_OWORD *)(v44 + 32);
          v55[1] = *(_OWORD *)(v44 + 16);
          v55[2] = v58;
          *v55 = v57;
          v59 = v55 + 3;
          goto LABEL_107;
        }
        v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (_BYTE *)*v121) >> 4);
        v61 = v60 + 1;
        if (v60 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (_QWORD)*v121) >> 4);
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0x2AAAAAAAAAAAAAALL)
          v63 = 0x555555555555555;
        else
          v63 = v61;
        if (v63)
          v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v63);
        else
          v64 = 0;
        v68 = (_OWORD *)(v63 + 48 * v60);
        v69 = *(_OWORD *)v44;
        v70 = *(_OWORD *)(v44 + 32);
        v68[1] = *(_OWORD *)(v44 + 16);
        v68[2] = v70;
        *v68 = v69;
        v72 = *(char **)(a1 + 96);
        v71 = *(char **)(a1 + 104);
        v73 = v68;
        if (v71 != v72)
        {
          do
          {
            v74 = *((_OWORD *)v71 - 3);
            v75 = *((_OWORD *)v71 - 2);
            *(_OWORD *)((char *)v73 - 21) = *(_OWORD *)(v71 - 21);
            *(v73 - 3) = v74;
            *(v73 - 2) = v75;
            v73 -= 3;
            v71 -= 48;
          }
          while (v71 != v72);
          v71 = (char *)*v121;
        }
        v59 = v68 + 3;
        *(_QWORD *)(a1 + 96) = v73;
        *(_QWORD *)(a1 + 104) = v68 + 3;
        *(_QWORD *)(a1 + 112) = v63 + 48 * v64;
        if (v71)
        {
          v76 = v71;
          goto LABEL_106;
        }
LABEL_107:
        *(_QWORD *)(a1 + 104) = v59;
LABEL_108:
        v44 += 48;
        if ((__int128 *)v44 == v7)
          goto LABEL_109;
        continue;
      }
    }
    v9 = *(double *)(v6 + 8);
    v10 = *(double *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 24);
    v12 = *(_BYTE *)(v6 + 32);
    v13 = *(_BYTE *)(v6 + 33);
    if (a2 - v9 >= 0.01)
    {
      if (v10 - v9 - (a2 - v9) < 0.01)
      {
        v40 = 0;
        v41 = 0;
        v16 = 0.0;
        v15 = *(double *)(v6 + 16);
        v14 = *(_BYTE *)(v6 + 32);
        v10 = 0.0;
        v12 = 0;
LABEL_120:
        v96 = *(unsigned __int8 *)(v6 + 42);
        v97 = *(unsigned __int8 *)(v6 + 41);
        v98 = *(unsigned __int8 *)(v6 + 40);
        v99 = *(double *)v6;
        v123.var1 = *(double *)(v6 + 8);
        v123.var2 = v15;
        v123.var3 = v11;
        v123.var4 = v14;
        v123.var5 = v13;
        *(_DWORD *)(&v123.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v123.var5 + 5) = *(_WORD *)(v6 + 38);
        *((double *)&v124 + 1) = v16;
        *(double *)&v125 = v10;
        *((_QWORD *)&v125 + 1) = v40;
        LOBYTE(v126) = v12;
        HIBYTE(v126) = v41;
        v123.var0 = v99;
        *(double *)&v124 = v99;
        HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
        v100 = v98 != 0;
        v101 = v97 != 0;
        v102 = v96 != 0;
        if (v123.var4)
        {
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v115, &v123, v96 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v103 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v123.var3);
            v104 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v103);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(v104, &v123, v97 == 0);
          }
          v100 = 1;
          v101 = 1;
          v102 = 1;
        }
        if ((_BYTE)v126)
        {
          LOWORD(v122) = v126;
          v105 = v125;
          v106 = (char *)*v121;
          *(_OWORD *)v106 = v124;
          *((_OWORD *)v106 + 1) = v105;
          *((_QWORD *)v106 + 4) = v122;
          v106[40] = v100;
          v106[41] = v101;
          v106[42] = v102;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_127;
      }
      v15 = a2;
      v14 = *(_BYTE *)(v6 + 32);
      v16 = a2;
    }
    else
    {
      v14 = 0;
      v15 = *(double *)(v6 + 16);
      v16 = *(double *)(v6 + 8);
    }
    v40 = *(_QWORD *)(v6 + 24);
    v41 = *(_BYTE *)(v6 + 33);
    goto LABEL_120;
  }
}

void sub_1B7CD559C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  void *v8;
  _OWORD *v9;
  int v10;
  void *v11;
  _OWORD *v12;
  int v13;
  __int128 v14;
  __int128 v15;

  v5 = result;
  v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v6 = 1;
  if (v6)
  {
    if (v6 == 1)
    {
      if (!*(_DWORD *)result)
      {
        *(_DWORD *)result = 1;
        *(_OWORD *)(result + 1) = 0u;
        v12 = result + 19;
        v11 = (void *)result[19];
        *(_OWORD *)(v5 + 3) = 0u;
        *(_OWORD *)(v5 + 5) = 0u;
        *(_OWORD *)(v5 + 7) = 0u;
        *(_OWORD *)(v5 + 9) = 0u;
        *(_OWORD *)(v5 + 11) = 0u;
        *(_OWORD *)(v5 + 13) = 0u;
        *(_OWORD *)(v5 + 15) = 0u;
        *(_OWORD *)(v5 + 17) = 0u;
        if (v11)
        {
          v5[20] = (uint64_t)v11;
          operator delete(v11);
          v13 = *((unsigned __int8 *)v5 + 80);
          *v12 = 0u;
          *(_OWORD *)(v5 + 21) = 0u;
          if (v13 && *((double *)v5 + 7) > *((double *)v5 + 24))
            goto LABEL_25;
        }
        else
        {
          *v12 = 0uLL;
          *(_OWORD *)(v5 + 21) = 0uLL;
        }
        v15 = *(_OWORD *)(v5 + 25);
        *((_OWORD *)v5 + 3) = *(_OWORD *)(v5 + 23);
        *((_OWORD *)v5 + 4) = v15;
        *((_WORD *)v5 + 40) = *((_WORD *)v5 + 108);
        goto LABEL_25;
      }
    }
    else if (v6 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)(result + 1), &a2->var0, 1);
        return HDStatisticsTimeInterval::addSample(v5 + 18, a2, 1);
      }
      *(_OWORD *)(result + 1) = 0u;
      *(_DWORD *)result = 2;
      v9 = result + 19;
      v8 = (void *)result[19];
      *(_OWORD *)(v5 + 3) = 0u;
      *(_OWORD *)(v5 + 5) = 0u;
      *(_OWORD *)(v5 + 7) = 0u;
      *(_OWORD *)(v5 + 9) = 0u;
      *(_OWORD *)(v5 + 11) = 0u;
      *(_OWORD *)(v5 + 13) = 0u;
      *(_OWORD *)(v5 + 15) = 0u;
      *(_OWORD *)(v5 + 17) = 0u;
      if (v8)
      {
        v5[20] = (uint64_t)v8;
        operator delete(v8);
        v10 = *((unsigned __int8 *)v5 + 80);
        *v9 = 0u;
        *(_OWORD *)(v5 + 21) = 0u;
        if (v10 && *((double *)v5 + 7) > *((double *)v5 + 24))
          goto LABEL_25;
      }
      else
      {
        *v9 = 0uLL;
        *(_OWORD *)(v5 + 21) = 0uLL;
      }
      v14 = *(_OWORD *)(v5 + 25);
      *((_OWORD *)v5 + 3) = *(_OWORD *)(v5 + 23);
      *((_OWORD *)v5 + 4) = v14;
      *((_WORD *)v5 + 40) = *((_WORD *)v5 + 108);
LABEL_25:
      HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)(v5 + 1), &a2->var0, a3);
      v7 = v5 + 18;
      return HDStatisticsTimeInterval::addSample(v7, a2, a3);
    }
  }
  else if (!*(_DWORD *)result && !result[5])
  {
    HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)(result + 1), &a2->var0, a3);
    v7 = v5 + 18;
    return HDStatisticsTimeInterval::addSample(v7, a2, a3);
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 352);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 352);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 352) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 344);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 344), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 432), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 472);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7CD599C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 512);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7CD5A6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(uint64_t result, double *a2, int a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;

  if (!*(_BYTE *)(result + 112))
  {
    v10 = a2[2] - a2[1] + 22.5;
    v8 = *(double *)(result + 128) + v10;
    v9 = *(double *)(result + 120) + v10 * (*a2 - *(double *)(result + 120)) / v8;
    goto LABEL_5;
  }
  v3 = a2[1];
  v4 = v3 - *(double *)(result + 96);
  if (v4 > 45.0)
  {
    v5 = *(double *)(result + 128) + 22.5;
    v6 = *(double *)(result + 120) + (*(double *)(result + 80) - *(double *)(result + 120)) * 22.5 / v5;
    v7 = a2[2] - v3 + 22.5;
    v8 = v5 + v7;
    v9 = v6 + v7 * (*a2 - v6) / (v5 + v7);
LABEL_5:
    *(double *)(result + 128) = v8;
    goto LABEL_7;
  }
  v11 = v4 + *(double *)(result + 128);
  v12 = *(double *)(result + 120) + v4 * ((*a2 + *(double *)(result + 80)) * 0.5 - *(double *)(result + 120)) / v11;
  v13 = a2[2] - v3;
  v14 = v11 + v13;
  v9 = v12 + v13 * (*a2 - v12) / (v11 + v13);
  *(double *)(result + 128) = v14;
LABEL_7:
  *(double *)(result + 120) = v9;
  v15 = *(_OWORD *)a2;
  v16 = *((_OWORD *)a2 + 1);
  *(_WORD *)(result + 112) = *((_WORD *)a2 + 16);
  *(_OWORD *)(result + 80) = v15;
  *(_OWORD *)(result + 96) = v16;
  if (a3)
    ++*(_QWORD *)(result + 32);
  v17 = *(_QWORD *)(result + 24);
  if (v17)
  {
    v18 = *(double *)(result + 16);
    if (v18 >= *a2)
      v18 = *a2;
    *(double *)(result + 16) = v18;
    v19 = *(double *)(result + 8);
    if (*a2 >= v19)
      v19 = *a2;
    v20 = v17 + 1;
    *(double *)result = *(double *)result + (*a2 - *(double *)result) / (double)v20;
    *(double *)(result + 8) = v19;
  }
  else
  {
    v21 = *a2;
    *(double *)(result + 8) = *a2;
    *(double *)(result + 16) = v21;
    *(double *)result = v21;
    v20 = 1;
  }
  *(_QWORD *)(result + 24) = v20;
  return result;
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x108uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *(_OWORD *)(v9 + 232) = 0u;
    *(_OWORD *)(v9 + 248) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 408);
  v7 = *(char **)(*(_QWORD *)a4 + 416);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 408);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 408);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 416);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 408);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 416);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 408);
      v15 = *(char **)(*(_QWORD *)a4 + 416);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 416);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 416);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 408);
          v25 = *(char **)(*(_QWORD *)a4 + 416);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 416);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 416);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 408);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 408);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 416);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 408);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 416);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 408);
      v41 = *(char **)(*(_QWORD *)a4 + 416);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 416);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 416);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 408);
      v11 = *(char **)(*(_QWORD *)a3 + 416);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 416);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 416);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 408);
      v24 = *(char **)(*(_QWORD *)a3 + 416);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 416);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 416);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 408);
            v31 = *(char **)(*(_QWORD *)a3 + 416);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 416);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 416);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 408);
    v14 = *(char **)(*(_QWORD *)a5 + 416);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 416);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 416);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 408);
        v23 = *(char **)(*(_QWORD *)a5 + 416);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 416);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 416);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 408);
            v32 = *(char **)(*(_QWORD *)a5 + 416);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 416);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 416);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 408);
    v16 = *(char **)(*(_QWORD *)a6 + 416);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 416);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 416);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 408);
        v25 = *(char **)(*(_QWORD *)a6 + 416);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 416);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 416);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 408);
            v34 = *(char **)(*(_QWORD *)a6 + 416);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 416);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 416);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 408);
                v43 = *(char **)(*(_QWORD *)a6 + 416);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 416);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 416);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;

  v3 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 208);
  v4 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 120) = v4;
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 144);
  v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 72) = v3;
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  v7 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 152) = 0;
  v8 = a1 + 152;
  *(_QWORD *)(a1 + 144) = v7;
  v9 = *(const void **)(a2 + 272);
  v10 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 152), v9, v10, (v10 - (uint64_t)v9) >> 4);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(a2 + 296);
  result = *(__n128 *)(a2 + 304);
  v12 = *(_OWORD *)(a2 + 320);
  *(__n128 *)(v8 + 32) = result;
  *(_OWORD *)(v8 + 48) = v12;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(a2 + 336);
  return result;
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD *v47;
  _QWORD *v48;
  BOOL v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v53;
  unint64_t v54;
  _QWORD v55[2];
  char v56;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 344);
  v51 = (_QWORD *)(a2 + 352);
  if (v3 == (_QWORD *)(a2 + 352))
    return;
  v53 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_80;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v54 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0xF8uLL);
      v55[0] = v19;
      v55[1] = v53;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *(_OWORD *)(v19 + 184) = 0u;
      *(_OWORD *)(v19 + 200) = 0u;
      *(_OWORD *)(v19 + 216) = 0u;
      *(_OWORD *)(v19 + 232) = 0u;
      v56 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        v12 = (uint64_t *)v55[0];
        if (v37)
        {
          *(_QWORD *)v55[0] = *v37;
        }
        else
        {
          *(_QWORD *)v55[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v53;
          if (!*v12)
          {
LABEL_76:
            v55[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v55);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v53;
            if (*v53)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v53;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v50 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v50)
            operator delete(v50);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = v12[1];
      if (v13 == v8)
        break;
      if (v54 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = (id)v12[2];
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    *((_OWORD *)v12 + 2) = *((_OWORD *)v3 + 3);
    v39 = *((_OWORD *)v3 + 4);
    v40 = *((_OWORD *)v3 + 5);
    v41 = *((_OWORD *)v3 + 7);
    *((_OWORD *)v12 + 5) = *((_OWORD *)v3 + 6);
    *((_OWORD *)v12 + 6) = v41;
    *((_OWORD *)v12 + 3) = v39;
    *((_OWORD *)v12 + 4) = v40;
    v42 = *((_OWORD *)v3 + 8);
    v43 = *((_OWORD *)v3 + 9);
    v44 = *((_OWORD *)v3 + 10);
    v12[20] = v3[22];
    *((_OWORD *)v12 + 8) = v43;
    *((_OWORD *)v12 + 9) = v44;
    *((_OWORD *)v12 + 7) = v42;
    v12[21] = v3[23];
    if (v12 + 2 != v3 + 4)
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 176, (char *)v3[24], v3[25], (uint64_t)(v3[25] - v3[24]) >> 4);
    v12[25] = v3[27];
    v45 = *((_OWORD *)v3 + 14);
    v46 = *((_OWORD *)v3 + 15);
    *((_WORD *)v12 + 120) = *((_WORD *)v3 + 128);
    *((_OWORD *)v12 + 13) = v45;
    *((_OWORD *)v12 + 14) = v46;

LABEL_80:
    v47 = (_QWORD *)v3[1];
    if (v47)
    {
      do
      {
        v48 = v47;
        v47 = (_QWORD *)*v47;
      }
      while (v47);
    }
    else
    {
      do
      {
        v48 = (_QWORD *)v3[2];
        v49 = *v48 == (_QWORD)v3;
        v3 = v48;
      }
      while (!v49);
    }
    v3 = v48;
  }
  while (v48 != v51);
}

void sub_1B7CD8B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D060D0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D060D0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D060D0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7CD8D70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D060D0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 136;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D06160;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D06160;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D06160;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7CD8FA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D06160;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D061F0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D061F0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 704))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 704))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7CD92A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 680);
      v7 = *(_QWORD *)(a1 + 672);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7CD94A8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  int v12;
  char v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  double v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  int8x16_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  uint64_t **v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  double v62;
  double v63;
  unint64_t v64;
  char v65;

  v5 = a1 + 8;
  v6 = *(double *)(a1 + 8);
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = v10;
  v13 = v11;
  v14 = (unint64_t)v9;
  v15 = v8;
  v16 = v7;
  if (v6 - v7 >= 0.01)
  {
    if (v8 - v7 - (v6 - v7) >= 0.01)
    {
      v12 = *(unsigned __int8 *)(a2 + 32);
      v13 = *(_BYTE *)(a2 + 33);
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(double *)(a2 + 16);
      v16 = *(double *)(a1 + 8);
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      v16 = 0.0;
    }
  }
  v17 = *(uint64_t **)a2;
  v18 = *(double *)(a1 + 16);
  v19 = v18 - v16;
  v20 = v15 - v16 - (v18 - v16);
  if (*(_DWORD *)(a1 + 36))
  {
    if (v19 >= 0.01)
    {
      if (v20 >= 0.01)
      {
LABEL_27:
        v22 = v15;
        v64 = v14;
        v21 = v12;
        v65 = v13;
        v15 = *(double *)(a1 + 16);
        if (!v12)
          goto LABEL_28;
        goto LABEL_11;
      }
LABEL_10:
      v64 = 0;
      v21 = 0;
      v65 = 0;
      v18 = 0.0;
      v22 = 0.0;
      if (!v12)
      {
LABEL_28:
        v13 = v65;
        goto LABEL_59;
      }
LABEL_11:
      v62 = v16;
      v63 = v15;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 376, v14, v14);
      v23 = *(_QWORD *)(a1 + 112);
      if (v23 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 168) <= 0)
      {
        v28.f64[1] = *(float64_t *)(a1 + 16);
        v24 = v62;
        v25 = v63;
        v28.f64[0] = v62;
        v29.f64[0] = *(float64_t *)(a1 + 8);
        v29.f64[1] = v63;
        v30 = (int8x16_t)vcgtq_f64(v29, v28);
        v29.f64[0] = v62;
        *(int8x16_t *)(a1 + 48) = vbslq_s8(v30, *(int8x16_t *)(a1 + 8), (int8x16_t)v29);
        if (!a3)
        {
LABEL_30:
          v31 = *(_QWORD *)(a1 + 120);
          if (v23 >= v31)
          {
            v33 = *(_QWORD *)(a1 + 104);
            v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v33) >> 4);
            v35 = v34 + 1;
            if (v34 + 1 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v33) >> 4);
            if (2 * v36 > v35)
              v35 = 2 * v36;
            if (v36 >= 0x2AAAAAAAAAAAAAALL)
              v37 = 0x555555555555555;
            else
              v37 = v35;
            if (v37)
            {
              v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v37);
              v24 = v62;
              v25 = v63;
            }
            else
            {
              v38 = 0;
            }
            v39 = v37 + 48 * v34;
            v40 = v37 + 48 * v38;
            *(_QWORD *)v39 = v17;
            *(double *)(v39 + 8) = v24;
            *(double *)(v39 + 16) = v25;
            *(_QWORD *)(v39 + 24) = v14;
            *(_BYTE *)(v39 + 32) = v12;
            *(_BYTE *)(v39 + 33) = v13;
            *(_WORD *)(v39 + 40) = 0;
            *(_BYTE *)(v39 + 42) = 0;
            v32 = v39 + 48;
            v42 = *(char **)(a1 + 104);
            v41 = *(char **)(a1 + 112);
            if (v41 == v42)
            {
              v13 = v65;
            }
            else
            {
              v13 = v65;
              do
              {
                v43 = *((_OWORD *)v41 - 3);
                v44 = *((_OWORD *)v41 - 2);
                *(_OWORD *)(v39 - 21) = *(_OWORD *)(v41 - 21);
                *(_OWORD *)(v39 - 48) = v43;
                *(_OWORD *)(v39 - 32) = v44;
                v39 -= 48;
                v41 -= 48;
              }
              while (v41 != v42);
              v41 = *(char **)(a1 + 104);
            }
            *(_QWORD *)(a1 + 104) = v39;
            *(_QWORD *)(a1 + 112) = v32;
            *(_QWORD *)(a1 + 120) = v40;
            if (v41)
              operator delete(v41);
          }
          else
          {
            *(_QWORD *)v23 = v17;
            *(double *)(v23 + 8) = v24;
            *(double *)(v23 + 16) = v25;
            *(_QWORD *)(v23 + 24) = v14;
            *(_BYTE *)(v23 + 32) = v12;
            *(_BYTE *)(v23 + 33) = v13;
            *(_WORD *)(v23 + 40) = 0;
            v32 = v23 + 48;
            *(_BYTE *)(v23 + 42) = 0;
            v13 = v65;
          }
          *(_QWORD *)(a1 + 112) = v32;
          if (!*(_BYTE *)(a1 + 344) || *(double *)(a1 + 320) <= v7)
          {
            *(_QWORD *)(a1 + 312) = v17;
            *(double *)(a1 + 320) = v7;
            *(double *)(a1 + 328) = v8;
            *(_QWORD *)(a1 + 336) = v9;
            *(_BYTE *)(a1 + 344) = v10;
            *(_BYTE *)(a1 + 345) = v11;
            if (!*(_BYTE *)(a1 + 208) || *(double *)(a1 + 184) <= v7)
            {
              *(_QWORD *)(a1 + 176) = v17;
              *(double *)(a1 + 184) = v7;
              *(double *)(a1 + 192) = v8;
              *(_QWORD *)(a1 + 200) = v9;
              *(_BYTE *)(a1 + 208) = v10;
              *(_BYTE *)(a1 + 209) = v11;
            }
          }
          if (*(_BYTE *)(a1 + 33))
          {
            v45 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v14);
            v46 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsForSource(v5, v45);
            if (!*((_BYTE *)v46 + 216) || *((double *)v46 + 24) <= v7)
            {
              v46[23] = v17;
              *((double *)v46 + 24) = v7;
              *((double *)v46 + 25) = v8;
              v46[26] = v9;
              *((_BYTE *)v46 + 216) = v10;
              *((_BYTE *)v46 + 217) = v11;
              if (!*((_BYTE *)v46 + 80) || *((double *)v46 + 7) <= v7)
              {
                v46[6] = v17;
                *((double *)v46 + 7) = v7;
                *((double *)v46 + 8) = v8;
                v46[9] = v9;
                *((_BYTE *)v46 + 80) = v10;
                *((_BYTE *)v46 + 81) = v11;
              }
            }
          }
LABEL_59:
          v14 = v64;
          if (!v21)
            return;
          goto LABEL_60;
        }
      }
      else
      {
        v24 = v62;
        v25 = v63;
        if (v62 < *(double *)(a1 + 48))
        {
          v26 = *(double *)(a1 + 8);
          if (v62 >= v26)
            v26 = v62;
          *(double *)(a1 + 48) = v26;
        }
        if (v63 > *(double *)(a1 + 56))
        {
          v27 = *(double *)(a1 + 16);
          if (v27 >= v63)
            v27 = v63;
          *(double *)(a1 + 56) = v27;
        }
        if (!a3)
          goto LABEL_30;
      }
      if (v24 < *(double *)(a1 + 16))
      {
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v24);
        v24 = v62;
        v25 = v63;
        v23 = *(_QWORD *)(a1 + 112);
      }
      goto LABEL_30;
    }
  }
  else
  {
    if (v20 < 0.01)
      goto LABEL_10;
    if (v19 >= 0.01)
      goto LABEL_27;
  }
  LOBYTE(v21) = v12;
  v22 = v15;
  v18 = v16;
  if (!v12)
    return;
LABEL_60:
  v47 = *(_QWORD *)(a1 + 568);
  v48 = *(_QWORD *)(a1 + 576);
  if (v47 >= v48)
  {
    v50 = *(_QWORD *)(a1 + 560);
    v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v50) >> 3);
    v52 = v51 + 1;
    if (v51 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v50) >> 3);
    if (2 * v53 > v52)
      v52 = 2 * v53;
    if (v53 >= 0x333333333333333)
      v54 = 0x666666666666666;
    else
      v54 = v52;
    if (v54)
      v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
    else
      v55 = 0;
    v56 = v54 + 40 * v51;
    v57 = v54 + 40 * v55;
    *(_QWORD *)v56 = v17;
    *(double *)(v56 + 8) = v18;
    *(double *)(v56 + 16) = v22;
    *(_QWORD *)(v56 + 24) = v14;
    *(_BYTE *)(v56 + 32) = v21;
    *(_BYTE *)(v56 + 33) = v13;
    v49 = v56 + 40;
    v58 = *(char **)(a1 + 568);
    v59 = *(char **)(a1 + 560);
    if (v58 != v59)
    {
      do
      {
        v60 = *(_OWORD *)(v58 - 40);
        v61 = *(_OWORD *)(v58 - 24);
        *(_WORD *)(v56 - 8) = *((_WORD *)v58 - 4);
        *(_OWORD *)(v56 - 24) = v61;
        *(_OWORD *)(v56 - 40) = v60;
        v56 -= 40;
        v58 -= 40;
      }
      while (v58 != v59);
      v58 = *(char **)(a1 + 560);
    }
    *(_QWORD *)(a1 + 560) = v56;
    *(_QWORD *)(a1 + 568) = v49;
    *(_QWORD *)(a1 + 576) = v57;
    if (v58)
      operator delete(v58);
  }
  else
  {
    *(_QWORD *)v47 = v17;
    *(double *)(v47 + 8) = v18;
    *(double *)(v47 + 16) = v22;
    *(_QWORD *)(v47 + 24) = v14;
    *(_BYTE *)(v47 + 32) = v21;
    v49 = v47 + 40;
    *(_BYTE *)(v47 + 33) = v13;
  }
  *(_QWORD *)(a1 + 568) = v49;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 706))
  {
    *(_BYTE *)(a1 + 708) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 708) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7CD9AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 560), *(_QWORD *)(a1 + 568), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7CD9B94(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  __int128 v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;
  _BYTE v18[132];

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 584), *(id *)(a1 + 40));
  *((double *)v8 - 4) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v9 = 0uLL;
  memset(v18, 0, sizeof(v18));
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v18[84];
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v18[100];
  *(_OWORD *)(a1 + 248) = *(_OWORD *)&v18[116];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&v18[20];
  *(_OWORD *)(a1 + 168) = *(_OWORD *)&v18[36];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v18[52];
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v18[68];
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v18[4];
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(_QWORD *)(a1 + 288) = v10;
    operator delete(v10);
    v9 = 0uLL;
  }
  *(_WORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 312) = v9;
  *(_OWORD *)(a1 + 328) = v9;
  *(_OWORD *)(a1 + 280) = v9;
  *(_OWORD *)(a1 + 296) = v9;
  if (*(_QWORD *)(a1 + 368))
  {
    v11 = *(_QWORD **)(a1 + 352);
    v12 = *(_QWORD *)(a1 + 360);
    *(_QWORD *)(a1 + 352) = a1 + 360;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    if (v11[1])
      v13 = (_QWORD *)v11[1];
    else
      v13 = v11;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 584));
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a1 + 560);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 708))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 708) = 0;
  }

}

void sub_1B7CD9DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 704))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7CD9E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 720));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 704) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7CDA200(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C406C794F1BLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7CDA3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7CDA618(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  char v15;
  char v16;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    if (a7 - a6 - v7 >= 0.01)
    {
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  v11 = a5;
  v12 = a6;
  v13 = a7;
  v14 = a2;
  v15 = v8;
  v16 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v11, a3, a4);
  }
  else
  {
    v10 = *(double *)(a1 + 40) - a6;
    if (v10 >= 0.01)
    {
      if (a7 - a6 - v10 >= 0.01)
        a7 = *(double *)(a1 + 40);
    }
    else
    {
      v8 = 0;
    }
    v12 = a6;
    v13 = a7;
    v15 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v11, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 704))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7CDB2C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7CDB368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::archive(uint64_t a1, int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive((uint64_t)v6, (uint64_t)(a2 + 2));
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(*(int8x16_t *)(a2 + 46), *(int8x16_t *)(a2 + 46), 8uLL);
  v6[1] = *((_QWORD *)a2 + 25);
  v6[2] = *((_QWORD *)a2 + 26);
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7CDB470(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive(uint64_t a1, uint64_t a2)
{
  statistics **v4;
  _BYTE v5[208];

  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (statistics **)(a1 + 8);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::archive((uint64_t)v5, a2);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics((_QWORD *)a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(a2 + 136), (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1B7CDB538(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

int8x16_t HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::archive(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int8x16_t result;
  uint64_t v9;
  void (**v10)(statistics::RawQuantitySample *__hidden);
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  __int16 v14;
  char v15;
  int v16;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL);
  v6 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 204) = 225;
  *(_QWORD *)(a1 + 104) = v6;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v10 = &off_1E6CFF278;
  v16 = 127;
  v13 = vextq_s8(*(int8x16_t *)(a2 + 40), *(int8x16_t *)(a2 + 40), 8uLL);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v14 = 0;
  v15 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)&v10);
  PB::Base::~Base((PB::Base *)&v10);
  if (*(_BYTE *)(a2 + 112))
  {
    statistics::Statistics::makeUnfinishedDatum((_QWORD *)a1);
    v10 = &off_1E6CFF278;
    v16 = 127;
    v13 = vextq_s8(*(int8x16_t *)(a2 + 80), *(int8x16_t *)(a2 + 80), 8uLL);
    v11 = *(_QWORD *)(a2 + 96);
    v12 = *(_QWORD *)(a2 + 104);
    v14 = 0;
    v15 = 0;
    statistics::RawQuantitySample::operator=(*(_QWORD *)(a1 + 160), (uint64_t)&v10);
    PB::Base::~Base((PB::Base *)&v10);
  }
  v7 = *(_DWORD *)(a1 + 204);
  result = vextq_s8(*(int8x16_t *)(a2 + 120), *(int8x16_t *)(a2 + 120), 8uLL);
  *(int8x16_t *)(a1 + 184) = result;
  v9 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 204) = v7 | 0x6002;
  *(_QWORD *)(a1 + 32) = v9;
  return result;
}

void sub_1B7CDB6A0(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, _QWORD *a2)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[8];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  double v20;

  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  v6 = a2[16];
  if (v6)
  {
    HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive((uint64_t)v15, *(HDStatisticsTimeInterval **)(v6 + 8), *(_QWORD *)(v6 + 128));
    v7 = v17;
    *(_QWORD *)(v5 + 128) = v16;
    v8 = v15[7];
    *(_OWORD *)(v5 + 96) = v15[6];
    *(_OWORD *)(v5 + 112) = v8;
    v9 = v15[3];
    *(_OWORD *)(v5 + 32) = v15[2];
    *(_OWORD *)(v5 + 48) = v9;
    v10 = v15[5];
    *(_OWORD *)(v5 + 64) = v15[4];
    *(_OWORD *)(v5 + 80) = v10;
    v11 = v15[1];
    *(_OWORD *)v5 = v15[0];
    *(_OWORD *)(v5 + 16) = v11;
    *(_QWORD *)(a1 + 144) = v7;
    result = v20;
    v12 = v19;
    *(_OWORD *)(a1 + 152) = v18;
    *(_QWORD *)(a1 + 168) = v12;
    *(double *)(a1 + 176) = result;
  }
  *(_DWORD *)a1 = a2[17];
  v13 = a2[14];
  if (v13)
  {
    result = *(double *)(v13 + 8);
    v14 = *(_QWORD *)(v13 + 16);
    *(int8x16_t *)(a1 + 184) = vextq_s8(*(int8x16_t *)(v13 + 24), *(int8x16_t *)(v13 + 24), 8uLL);
    *(double *)(a1 + 200) = result;
    *(_QWORD *)(a1 + 208) = v14;
    *(_WORD *)(a1 + 216) = 1;
  }
  return result;
}

double HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _BYTE v11[32];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  *(_WORD *)(a1 + 112) = 0;
  *(_QWORD *)&v5 = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 58) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  if (a3)
  {
    HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::unarchive((uint64_t)v11, a3);
    v6 = v17;
    *(_OWORD *)(a1 + 96) = v16;
    *(_OWORD *)(a1 + 112) = v6;
    *(_QWORD *)(a1 + 128) = v18;
    v7 = v13;
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 48) = v7;
    v8 = v15;
    *(_OWORD *)(a1 + 64) = v14;
    *(_OWORD *)(a1 + 80) = v8;
    v5 = *(_OWORD *)&v11[16];
    *(_OWORD *)a1 = *(_OWORD *)v11;
    *(_OWORD *)(a1 + 16) = v5;
  }
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)v11);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)v11;
    *(_QWORD *)&v5 = v12;
    v9 = *(_QWORD *)&v11[24];
    *(_OWORD *)(a1 + 144) = *(_OWORD *)&v11[8];
    *(_QWORD *)(a1 + 160) = v9;
    *(_QWORD *)(a1 + 168) = v5;
  }
  return *(double *)&v5;
}

int8x16_t HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::unarchive(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t result;

  *(_WORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)(a2 + 88), *(int8x16_t *)(a2 + 88), 8uLL);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 104);
  v2 = *(_QWORD *)(a2 + 112);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *(_QWORD *)(v2 + 16);
    *(int8x16_t *)(a1 + 40) = vextq_s8(*(int8x16_t *)(v2 + 24), *(int8x16_t *)(v2 + 24), 8uLL);
    *(_QWORD *)(a1 + 56) = v3;
    *(_QWORD *)(a1 + 64) = v4;
    *(_BYTE *)(a1 + 72) = 1;
  }
  v5 = *(_QWORD *)(a2 + 160);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(_QWORD *)(v5 + 16);
    *(int8x16_t *)(a1 + 80) = vextq_s8(*(int8x16_t *)(v5 + 24), *(int8x16_t *)(v5 + 24), 8uLL);
    *(_QWORD *)(a1 + 96) = v6;
    *(_QWORD *)(a1 + 104) = v7;
    *(_WORD *)(a1 + 112) = 1;
  }
  result = vextq_s8(*(int8x16_t *)(a2 + 184), *(int8x16_t *)(a2 + 184), 8uLL);
  *(int8x16_t *)(a1 + 120) = result;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D062A0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_WORD *)(a1 + 656) = 1;
  *(_BYTE *)(a1 + 658) = 0;
  *(_BYTE *)(a1 + 660) = 0;
  *(_QWORD *)(a1 + 664) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_QWORD *)(a1 + 704) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D062A0;
  v2 = *(void **)(a1 + 688);
  if (v2)
  {
    *(_QWORD *)(a1 + 696) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 624);
  if (v3)
  {
    *(_QWORD *)(a1 + 632) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 656) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

}

void sub_1B7CDBA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 664) = v4;
    v3 = v5;
  }

}

void sub_1B7CDBAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 84, a2);
  v7 = a2;
  v4 = a1[84];
  v5 = a1[81];
  a1[81] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[81]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 272) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7CDBC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[63];

  if (*(_BYTE *)(a1 + 656))
    return 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7CDBD0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 658))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 657))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 656))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 659))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 696);
      v20 = *(_QWORD *)(a1 + 704);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 688);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 696);
        v35 = *(char **)(a1 + 688);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 688);
        }
        *(_QWORD *)(a1 + 688) = v30;
        *(_QWORD *)(a1 + 696) = v23;
        *(_QWORD *)(a1 + 704) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 696) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7CDBFAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 658))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 658) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 657))
    goto LABEL_5;
  v9 = *(void **)(a1 + 680);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_390);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 680);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 680);
  *(_QWORD *)(a1 + 680) = 0;

  *(_BYTE *)(a1 + 657) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 688);
    *(_QWORD *)(a1 + 704) = 0;
    *(_QWORD *)(a1 + 696) = 0;
    *(_QWORD *)(a1 + 688) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 688);
      v37 = *(__int128 **)(a1 + 696);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 696);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 696) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 688);
  v39 = *(_QWORD *)(a1 + 696);
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 632) != *(_QWORD *)(a1 + 624))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 632) != *(_QWORD *)(a1 + 624));
  }
  *(_BYTE *)(a1 + 658) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 660))
    {
      *(_BYTE *)(a1 + 660) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 658) = 0;
LABEL_83:

  return v7;
}

void sub_1B7CDC6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 658) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 659) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 658))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 658))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 680);
    *(_QWORD *)(a1 + 680) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 657) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 657))
  {
    v8 = *(void **)(a1 + 680);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 680);
      *(_QWORD *)(a1 + 680) = v9;

      v8 = *(void **)(a1 + 680);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7CDC9A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 656) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 656) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7CDCAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 656) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 656), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive((uint64_t)&v37, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 416);
  if (v9 != (_QWORD *)(a1 + 424))
  {
    do
    {
      HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::archive((uint64_t)&v37, (uint64_t)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 424));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 624);
  for (k = *(int8x16_t **)(a1 + 632); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7CDCE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *i;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t j;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  id v60;
  _QWORD *v61;
  uint64_t v62;
  id v63;
  __n128 v64;
  void *v65[2];
  __int128 v66;
  int8x16_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  int8x16_t v72;
  uint64_t v73;
  uint64_t v74[4];
  void *__p[2];
  _BYTE v76[88];
  __int128 v77;
  __int128 v78;
  _BYTE v79[24];
  void *v80[4];
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  int v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  int v92;
  __int128 v93;
  __int128 v94;
  int v95;
  __int128 v96;
  __int128 v97;
  int v98;
  void (**v99)(statistics::StatisticsEngine *__hidden);
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  _BYTE v106[32];
  unint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  void *v117;
  __int128 v118;
  void *v119;
  uint64_t v120;

  v60 = a2;
  *(_BYTE *)(a1 + 656) = objc_msgSend(v60, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v60;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v64.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v65 = 0u;
  v66 = 0u;
  v107 = 0;
  v63 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v106, (const unsigned __int8 *)objc_msgSend(v63, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v107));
  v99 = &off_1E6D09A88;
  v100 = 0;
  v104 = 0;
  v102 = 0;
  v103 = 0;
  v105 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v99, (PB::Reader *)v106);
  v62 = a1;
  v64.n128_u64[0] = v101;
  if (v100)
  {
    v71 = 0;
    memset(v74, 0, sizeof(v74));
    v77 = 0u;
    v78 = 0u;
    *(_WORD *)v79 = 0;
    *(_OWORD *)&v79[8] = 0u;
    memset(v80, 0, sizeof(v80));
    v84 = 0;
    v83 = 0;
    *(_OWORD *)__p = 0u;
    memset(v76, 0, 82);
    v81 = 0;
    v82 = &v83;
    v85 = 0u;
    v86 = 0u;
    v87 = 1065353216;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0;
    v92 = 1065353216;
    v93 = 0u;
    v94 = 0u;
    v95 = 1065353216;
    v96 = 0u;
    v97 = 0u;
    v98 = 1065353216;
    v67 = vextq_s8(*(int8x16_t *)(v100 + 8), *(int8x16_t *)(v100 + 8), 8uLL);
    v4 = *(_QWORD *)(v100 + 72);
    v68 = *(_QWORD *)(v100 + 64);
    v69 = *(_BYTE *)(v100 + 185);
    v70 = *(_BYTE *)(v100 + 186);
    v72 = vextq_s8(*(int8x16_t *)(v100 + 24), *(int8x16_t *)(v100 + 24), 8uLL);
    v73 = v4;
    v5 = *(_QWORD *)(v100 + 80);
    v6 = *(_QWORD *)(v100 + 88);
    v61 = (_QWORD *)v100;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= *(_QWORD *)v76)
        {
          v14 = (char *)__p[0];
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)v76 - (unint64_t)__p[0]) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)v76 - (unint64_t)__p[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v76 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = (char *)__p[1];
            v14 = (char *)__p[0];
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p[0];
          }
          v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(_QWORD *)v76 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = v61[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive((uint64_t)&v108, *(HDStatisticsTimeInterval **)(v23 + 8), *(_QWORD *)(v23 + 128));
      *(_QWORD *)&v79[16] = v116;
      v78 = v114;
      *(_OWORD *)v79 = v115;
      *(_OWORD *)&v76[40] = v110;
      *(_OWORD *)&v76[56] = v111;
      *(_OWORD *)&v76[72] = v112;
      v77 = v113;
      *(_OWORD *)&v76[8] = v108;
      *(_OWORD *)&v76[24] = v109;
      v80[0] = v117;
      if (v80[1])
      {
        v80[2] = v80[1];
        operator delete(v80[1]);
      }
      *(_OWORD *)&v80[1] = v118;
      v80[3] = v119;
      v119 = 0;
      v118 = 0uLL;
      v81 = v120;
    }
    v25 = (uint64_t *)v61[17];
    for (i = (uint64_t *)v61[18]; v25 != i; ++v25)
    {
      v26 = *v25;
      HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>::unarchive((uint64_t)&v108, *(HDStatisticsTimeInterval **)(*v25 + 8), *(_QWORD *)(*v25 + 128));
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v83;
      v29 = &v83;
      v30 = &v83;
      if (v83)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_34;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_37;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_34:
      v33 = (char *)operator new(0xD8uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      *(_OWORD *)(v33 + 200) = 0u;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v82)
      {
        v82 = (uint64_t **)*v82;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v83, v32);
      ++v84;
LABEL_37:
      *(_OWORD *)(v33 + 104) = v112;
      v34 = v110;
      *(_OWORD *)(v33 + 88) = v111;
      *(_OWORD *)(v33 + 72) = v34;
      v35 = v108;
      *(_OWORD *)(v33 + 56) = v109;
      *(_OWORD *)(v33 + 152) = v115;
      v36 = v113;
      *(_OWORD *)(v33 + 136) = v114;
      v37 = v116;
      *(_OWORD *)(v33 + 120) = v36;
      *((_QWORD *)v33 + 21) = v37;
      *(_OWORD *)(v33 + 40) = v35;
      v38 = (void *)*((_QWORD *)v33 + 23);
      *((_QWORD *)v33 + 22) = v117;
      if (v38)
      {
        *((_QWORD *)v33 + 24) = v38;
        operator delete(v38);
        *((_QWORD *)v33 + 23) = 0;
        *((_QWORD *)v33 + 24) = 0;
        *((_QWORD *)v33 + 25) = 0;
      }
      *(_OWORD *)(v33 + 184) = v118;
      *((_QWORD *)v33 + 25) = v119;
      v119 = 0;
      v118 = 0uLL;
      *((_QWORD *)v33 + 26) = v120;
    }
    v39 = v61[5];
    for (j = v61[6]; v39 != j; v39 += 8)
    {
      v42 = *(double *)(*(_QWORD *)v39 + 8);
      v41 = *(double *)(*(_QWORD *)v39 + 16);
      if (v42 >= v41)
        v43 = *(double *)(*(_QWORD *)v39 + 16);
      else
        v43 = *(double *)(*(_QWORD *)v39 + 8);
      if (v41 < v42)
        v41 = *(double *)(*(_QWORD *)v39 + 8);
      HKIntervalMask<double>::_insertInterval(v74, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((uint64_t)&v64.n128_i64[1], (uint64_t)&v67);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v67);
  }
  v44 = v102;
  v45 = v103;
  if (v102 != v103)
  {
    v46 = (char *)v65[1];
    do
    {
      v47 = *(_QWORD *)(*(_QWORD *)v44 + 24);
      v48 = *(_QWORD *)(*(_QWORD *)v44 + 32);
      v49 = *(_QWORD *)(*(_QWORD *)v44 + 8);
      v50 = *(_QWORD *)(*(_QWORD *)v44 + 16);
      if ((unint64_t)v46 >= (unint64_t)v66)
      {
        v51 = (char *)v65[0];
        v52 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - (char *)v65[0]) >> 3);
        v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) > v53)
          v53 = 0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) >= 0x333333333333333)
          v54 = 0x666666666666666;
        else
          v54 = v53;
        if (v54)
        {
          v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          v46 = (char *)v65[1];
          v51 = (char *)v65[0];
        }
        else
        {
          v55 = 0;
        }
        v56 = v54 + 40 * v52;
        *(_QWORD *)v56 = v48;
        *(_QWORD *)(v56 + 8) = v47;
        *(_QWORD *)(v56 + 16) = v49;
        *(_QWORD *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        v57 = (char *)v56;
        if (v46 != v51)
        {
          do
          {
            v58 = *(_OWORD *)(v46 - 40);
            v59 = *(_OWORD *)(v46 - 24);
            *((_WORD *)v57 - 4) = *((_WORD *)v46 - 4);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while (v46 != v51);
          v51 = (char *)v65[0];
        }
        v65[0] = v57;
        v46 = (char *)(v56 + 40);
        v65[1] = (void *)(v56 + 40);
        *(_QWORD *)&v66 = v54 + 40 * v55;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *(_QWORD *)v46 = v48;
        *((_QWORD *)v46 + 1) = v47;
        *((_QWORD *)v46 + 2) = v49;
        *((_QWORD *)v46 + 3) = v50;
        *((_WORD *)v46 + 16) = 1;
        v46 += 40;
      }
      v65[1] = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v99);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((_QWORD *)(v62 + 112), &v64);
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v64.n128_i64[1]);

}

void sub_1B7CDD62C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x420]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3D0]);
  v8 = (void *)STACK[0x3B8];
  if (STACK[0x3B8])
  {
    STACK[0x3C0] = (unint64_t)v8;
    operator delete(v8);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x390]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy((_QWORD *)STACK[0x380]);
  v9 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v9;
    operator delete(v9);
  }
  v10 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v10;
    operator delete(v10);
  }
  objc_destroyWeak((id *)&STACK[0x2A8]);
  v11 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v11;
    operator delete(v11);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x450]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_WORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 1065353216;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 512);
  if (v2)
  {
    *(_QWORD *)(a1 + 520) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 464);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 424);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 384);
  v2 = *(void **)(a1 + 360);
  if (v2)
  {
    *(_QWORD *)(a1 + 368) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 320);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 304));
  v3 = *(void **)(a1 + 264);
  if (v3)
  {
    *(_QWORD *)(a1 + 272) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    v2 = (void *)a1[23];
    if (v2)
    {
      a1[24] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[504];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[440];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 672));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 656) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7CDDB9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 64), a2 + 32);
  v4 = a2[33].n128_u64[1];
  a2[33].n128_u64[1] = 0;
  v5 = (void *)a1[67];
  a1[67] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v12 = *(_OWORD *)(a2 + 136);
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 136) = v12;
  v15 = *(_OWORD *)(a2 + 200);
  v16 = *(_OWORD *)(a2 + 216);
  v17 = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v17;
  *(_OWORD *)(a1 + 216) = v16;
  *(_OWORD *)(a1 + 200) = v15;
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 264), *(const void **)(a2 + 264), *(_QWORD *)(a2 + 272), (uint64_t)(*(_QWORD *)(a2 + 272) - *(_QWORD *)(a2 + 264)) >> 4);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v18 = (_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  v19 = *(_QWORD **)(a2 + 296);
  if (v19 != (_QWORD *)(a2 + 304))
  {
    v20 = 0;
    v21 = (_QWORD *)(a1 + 304);
    while (1)
    {
      v22 = (_QWORD *)(a1 + 304);
      if (v21 == v18)
        goto LABEL_12;
      v23 = v20;
      v24 = (_QWORD *)(a1 + 304);
      if (v20)
      {
        do
        {
          v22 = v23;
          v23 = (_QWORD *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v24[2];
          v25 = *v22 == (_QWORD)v24;
          v24 = v22;
        }
        while (v25);
      }
      v26 = v19[4];
      if (v22[4] < v26)
      {
LABEL_12:
        if (v20)
          v27 = (uint64_t **)v22;
        else
          v27 = (uint64_t **)(a1 + 304);
        if (v20)
          v28 = (uint64_t **)(v22 + 1);
        else
          v28 = (uint64_t **)(a1 + 304);
        if (!*v28)
        {
LABEL_28:
          v31 = (char *)operator new(0xD8uLL);
          *((_QWORD *)v31 + 4) = v19[4];
          *(_OWORD *)(v31 + 40) = *(_OWORD *)(v19 + 5);
          v32 = *(_OWORD *)(v19 + 7);
          v33 = *(_OWORD *)(v19 + 9);
          v34 = *(_OWORD *)(v19 + 11);
          *(_OWORD *)(v31 + 104) = *(_OWORD *)(v19 + 13);
          *(_OWORD *)(v31 + 88) = v34;
          *(_OWORD *)(v31 + 72) = v33;
          *(_OWORD *)(v31 + 56) = v32;
          v35 = *(_OWORD *)(v19 + 15);
          v36 = *(_OWORD *)(v19 + 17);
          v37 = *(_OWORD *)(v19 + 19);
          *((_QWORD *)v31 + 21) = v19[21];
          *(_OWORD *)(v31 + 152) = v37;
          *(_OWORD *)(v31 + 136) = v36;
          *(_OWORD *)(v31 + 120) = v35;
          v38 = v19[22];
          *((_QWORD *)v31 + 23) = 0;
          *((_QWORD *)v31 + 22) = v38;
          *((_QWORD *)v31 + 24) = 0;
          *((_QWORD *)v31 + 25) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v31 + 23, (const void *)v19[23], v19[24], (uint64_t)(v19[24] - v19[23]) >> 4);
          *((_QWORD *)v31 + 26) = v19[26];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 296), (uint64_t)v27, v28, (uint64_t *)v31);
        }
      }
      else
      {
        v28 = (uint64_t **)(a1 + 304);
        v27 = (uint64_t **)(a1 + 304);
        if (!v20)
          goto LABEL_28;
        v29 = v20;
        while (1)
        {
          while (1)
          {
            v27 = (uint64_t **)v29;
            v30 = v29[4];
            if (v30 <= v26)
              break;
            v29 = *v27;
            v28 = v27;
            if (!*v27)
              goto LABEL_28;
          }
          if (v30 >= v26)
            break;
          v29 = v27[1];
          if (!v29)
          {
            v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      v39 = (_QWORD *)v19[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (_QWORD *)v19[2];
          v25 = *v40 == (_QWORD)v19;
          v19 = v40;
        }
        while (!v25);
      }
      if (v40 == (_QWORD *)(a2 + 304))
        break;
      v20 = (_QWORD *)*v18;
      v21 = *(_QWORD **)(a1 + 296);
      v19 = v40;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 320, a2 + 320);
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 360), *(const void **)(a2 + 360), *(_QWORD *)(a2 + 368), (uint64_t)(*(_QWORD *)(a2 + 368) - *(_QWORD *)(a2 + 360)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 384, a2 + 384);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 424, a2 + 424);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 464, a2 + 464);
  return a1;
}

void sub_1B7CDDFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v12 + 368) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*v13);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 272) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  v13 = *(_OWORD *)(a2 + 216);
  v14 = *(_OWORD *)(a2 + 232);
  v15 = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_OWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 264, (__n128 *)(a2 + 264));
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v16 = a1 + 304;
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  v17 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 304) = v17;
  v18 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 312) = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(a2 + 296) = a2 + 304;
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(a2 + 312) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 296) = v16;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 320, (uint64_t *)(a2 + 320));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 360, (__n128 *)(a2 + 360));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 424, (uint64_t *)(a2 + 424));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 464, (uint64_t *)(a2 + 464));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v2;
  double v3;
  id v4;
  double *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  id v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t **i;
  uint64_t *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  double *v56;
  double v57;
  double v58;
  double v59;
  void *v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  double v85;
  int v86;
  double v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t **j;
  uint64_t *v103;
  void *v104;
  uint64_t v105;
  double v106;
  void *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  double v111;
  double v112;
  void *v113;
  void *v114;
  void *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  void *v123;
  id v124;
  id v125;
  id v127;
  id v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  void *__p;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[3];
  _QWORD *v145;
  _QWORD v146[3];
  _QWORD *v147;
  _QWORD v148[3];
  _QWORD *v149;
  _BYTE v150[24];
  _BYTE *v151;
  uint64_t v152;

  v2 = (uint64_t)a2;
  v152 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = (double *)(v2 + 40);
  if (v3 != -1.79769313e308)
    v5 = (double *)v2;
  v123 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  if (*(double *)(v2 + 8) == 1.79769313e308)
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(v2 + 48));
  else
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(v2 + 8));
  v7 = (void *)v6;
  v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = *(id *)(a1 + 16);
    if (objc_msgSend(v9, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v9, "underlyingSampleType");
      v10 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v10;
    }

  }
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v8, v123, v7);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v14 = *(uint64_t **)(v2 + 360);
      v15 = *(uint64_t **)(v2 + 368);
      while (v14 != v15)
      {
        v16 = *v14;
        v17 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v17, "sourceForSourceID:", v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          if ((objc_msgSend(v13, "containsObject:", v18) & 1) == 0)
            objc_msgSend(v13, "addObject:", v18);
        }

        ++v14;
      }
      v19 = (void *)objc_msgSend(v13, "copy");
      objc_msgSend(v11, "_setSources:", v19);

    }
  }

  v144[0] = &off_1E6D06490;
  v145 = v144;
  v124 = v11;
  v20 = (uint64_t)v145;
  if (!v145)
    goto LABEL_22;
  if (v145 != v144)
  {
    v20 = (*(uint64_t (**)(void))(*v145 + 16))();
LABEL_22:
    v149 = (_QWORD *)v20;
    goto LABEL_24;
  }
  v149 = v148;
  (*(void (**)(uint64_t, _QWORD *))(v144[0] + 24))((uint64_t)v144, v148);
LABEL_24:
  v151 = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E6D06370;
  v22 = v21 + 1;
  v23 = (uint64_t)v149;
  if (!v149)
  {
LABEL_27:
    v21[4] = v23;
    goto LABEL_29;
  }
  if (v149 != v148)
  {
    v23 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v149 + 16))(v149, v22);
    goto LABEL_27;
  }
  v21[4] = v22;
  (*(void (**)(_QWORD *))(v148[0] + 24))(v148);
LABEL_29:
  v151 = v21;
  v24 = v124;
  v25 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = *(_OWORD *)(v2 + 200);
  v28 = *(_OWORD *)(v2 + 232);
  v136 = *(_OWORD *)(v2 + 216);
  v137 = v28;
  v29 = *(_OWORD *)(v2 + 136);
  v30 = *(_OWORD *)(v2 + 168);
  v132 = *(_OWORD *)(v2 + 152);
  v133 = v30;
  v134 = *(_OWORD *)(v2 + 184);
  v135 = v27;
  v130 = *(_OWORD *)(v2 + 120);
  v131 = v29;
  v31 = *(_QWORD *)(v2 + 256);
  v138 = *(_QWORD *)(v2 + 248);
  v139 = v31;
  v141 = 0;
  v142 = 0;
  v32 = *(const void **)(v2 + 264);
  v33 = *(_QWORD *)(v2 + 272);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v32, v33, (v33 - (uint64_t)v32) >> 4);
  v143 = *(_QWORD *)(v2 + 288);
  if (!v151)
    std::__throw_bad_function_call[abi:ne180100]();
  v34 = (*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v151 + 48))(v151, &v130);
  v35 = *(double **)(v34 + 8);
  v36 = 0.0;
  while (v35 != *(double **)(v34 + 16))
  {
    v38 = *v35;
    v37 = v35[1];
    v35 += 2;
    v36 = v36 + v37 - v38;
  }
  objc_msgSend(v25, "quantityWithUnit:doubleValue:", v26, v36 + *(double *)(v34 + 32));
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setDuration:", v39);

  if (__p)
  {
    v141 = __p;
    operator delete(__p);
  }

  v40 = v2 + 120;
  v41 = *(_OWORD *)(v2 + 232);
  v136 = *(_OWORD *)(v2 + 216);
  v137 = v41;
  v42 = *(_QWORD *)(v2 + 248);
  v43 = *(_OWORD *)(v2 + 168);
  v132 = *(_OWORD *)(v2 + 152);
  v133 = v43;
  v44 = *(_OWORD *)(v2 + 200);
  v134 = *(_OWORD *)(v2 + 184);
  v135 = v44;
  v45 = *(_OWORD *)(v2 + 136);
  v130 = *(_OWORD *)(v2 + 120);
  v131 = v45;
  v47 = *(_QWORD *)(v2 + 256);
  v46 = *(const void **)(v2 + 264);
  v138 = v42;
  v139 = v47;
  v141 = 0;
  v142 = 0;
  v48 = *(_QWORD *)(v2 + 272);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v46, v48, (v48 - (uint64_t)v46) >> 4);
  v143 = *(_QWORD *)(v2 + 288);
  if (!v151)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v24, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v151 + 48))(v151, &v130));
  if (__p)
  {
    v141 = __p;
    operator delete(__p);
  }
  v129 = v2;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v49 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v50 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v130, v2);
    for (i = (uint64_t **)v131; i; i = (uint64_t **)*i)
    {
      v52 = i[2];
      v53 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v151)
        std::__throw_bad_function_call[abi:ne180100]();
      v55 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v151 + 48))(v151, (uint64_t *)i + 3);
      v56 = *(double **)(v55 + 8);
      v57 = 0.0;
      while (v56 != *(double **)(v55 + 16))
      {
        v59 = *v56;
        v58 = v56[1];
        v56 += 2;
        v57 = v57 + v58 - v59;
      }
      objc_msgSend(v53, "quantityWithUnit:doubleValue:", v54, v57 + *(double *)(v55 + 32));
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "setObject:forKeyedSubscript:", v60, v52);

      if (!v151)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v151 + 48))(v151, (uint64_t *)i + 3));
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "setObject:forKeyedSubscript:", v61, v52);
      v2 = v129;

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v130);
    objc_msgSend(v24, "setDurationBySource:", v49);
    objc_msgSend(v24, "setDataCountBySource:", v50);

  }
  v62 = v151;
  if (v151 == v150)
  {
    v63 = 4;
    v62 = v150;
  }
  else
  {
    if (!v151)
      goto LABEL_52;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_52:
  v64 = v149;
  if (v149 == v148)
  {
    v65 = 4;
    v64 = v148;
  }
  else
  {
    if (!v149)
      goto LABEL_57;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_57:
  v66 = (uint64_t)v145;
  if (!v145)
  {
LABEL_60:
    v147 = (_QWORD *)v66;
    goto LABEL_62;
  }
  if (v145 != v144)
  {
    v66 = (*(uint64_t (**)(void))(*v145 + 16))();
    goto LABEL_60;
  }
  v147 = v146;
  (*(void (**)(uint64_t, _QWORD *))(v144[0] + 24))((uint64_t)v144, v146);
LABEL_62:
  v151 = 0;
  v67 = operator new(0x28uLL);
  *v67 = &off_1E6D06400;
  v68 = (uint64_t)v147;
  if (!v147)
  {
LABEL_65:
    v67[4] = v68;
    goto LABEL_67;
  }
  if (v147 != v146)
  {
    v68 = (*(uint64_t (**)(void))(*v147 + 16))();
    goto LABEL_65;
  }
  v67[4] = v67 + 1;
  (*(void (**)(_QWORD *))(v146[0] + 24))(v146);
LABEL_67:
  v151 = v67;
  v128 = v24;
  v69 = *(_QWORD *)(a1 + 24);
  v70 = *(_OWORD *)(v40 + 112);
  v136 = *(_OWORD *)(v40 + 96);
  v137 = v70;
  v71 = *(_QWORD *)(v40 + 128);
  v72 = *(_OWORD *)(v40 + 48);
  v132 = *(_OWORD *)(v40 + 32);
  v133 = v72;
  v73 = *(_OWORD *)(v40 + 80);
  v134 = *(_OWORD *)(v40 + 64);
  v135 = v73;
  v74 = *(_OWORD *)(v40 + 16);
  v130 = *(_OWORD *)v40;
  v131 = v74;
  v76 = *(_QWORD *)(v2 + 256);
  v75 = *(const void **)(v2 + 264);
  v138 = v71;
  v139 = v76;
  v141 = 0;
  v142 = 0;
  v77 = *(_QWORD *)(v2 + 272);
  __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v75, v77, (v77 - (uint64_t)v75) >> 4);
  v143 = *(_QWORD *)(v2 + 288);
  if (!v151)
    std::__throw_bad_function_call[abi:ne180100]();
  v78 = (*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v151 + 48))(v151, &v130);
  v79 = *(double *)(v78 + 8);
  v80 = *(double *)(v78 + 16);
  v81 = *(_QWORD *)(v78 + 32);
  v83 = *(double *)(v78 + 40);
  v82 = *(double *)(v78 + 48);
  v84 = *(double *)(v78 + 56);
  v85 = *(double *)(v78 + 80);
  v86 = *(unsigned __int8 *)(v78 + 112);
  v87 = *(double *)(v78 + 120);
  v88 = *(double *)(v78 + 128);
  if (__p)
  {
    v141 = __p;
    operator delete(__p);
  }
  v89 = *(_QWORD *)(a1 + 24);
  v90 = _HKStatisticsOptionBaselineRelativeQuantities();
  v91 = *(void **)(a1 + 16);
  if ((v90 & v89) != 0)
    objc_msgSend(v91, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v91, "canonicalUnit");
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v69 & 2) != 0)
  {
    if (v86)
      v87 = v87 + (v85 - v87) * 22.5 / (v88 + 22.5);
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v92, v87);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v128, "setAverageQuantity:", v93);

  }
  if ((v69 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v92, v80);
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v128, "setMinimumQuantity:", v94);

  }
  if ((v69 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v92, v79);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v128, "setMaximumQuantity:", v95);

  }
  if ((v69 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v92, v83);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v128, "setMostRecentQuantity:", v96);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v82, v84);
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v128, "setMostRecentQuantityDateInterval:", v97);

  }
  objc_msgSend(v128, "setDataCount:", v81);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_122;
  if ((v69 & 2) != 0)
    v127 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v127 = 0;
  if ((v69 & 4) != 0)
    v125 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v125 = 0;
  if ((v69 & 8) != 0)
  {
    v98 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    if ((v69 & 0x20) == 0)
      goto LABEL_92;
LABEL_94:
    v100 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v99 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    goto LABEL_95;
  }
  v98 = 0;
  if ((v69 & 0x20) != 0)
    goto LABEL_94;
LABEL_92:
  v99 = 0;
  v100 = 0;
LABEL_95:
  v101 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v130, v129);
  for (j = (uint64_t **)v131; j; j = (uint64_t **)*j)
  {
    v103 = j[2];
    if ((v69 & 2) != 0)
    {
      if (!v151)
        goto LABEL_138;
      v104 = (void *)MEMORY[0x1E0CB6A28];
      v105 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v151 + 48))(v151, (uint64_t *)j + 3);
      if (*(_BYTE *)(v105 + 112))
        v106 = *(double *)(v105 + 120)
             + (*(double *)(v105 + 80) - *(double *)(v105 + 120)) * 22.5 / (*(double *)(v105 + 128) + 22.5);
      else
        v106 = *(double *)(v105 + 120);
      objc_msgSend(v104, "quantityWithUnit:doubleValue:", v92, v106);
      v107 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v127, "setObject:forKeyedSubscript:", v107, v103);

    }
    if ((v69 & 4) != 0)
    {
      if (!v151)
        goto LABEL_138;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v92, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v151 + 48))(v151, (uint64_t *)j + 3) + 16));
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v125, "setObject:forKeyedSubscript:", v108, v103);

    }
    if ((v69 & 8) != 0)
    {
      if (!v151)
        goto LABEL_138;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v92, *(double *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v151 + 48))(v151, (uint64_t *)j + 3) + 8));
      v109 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "setObject:forKeyedSubscript:", v109, v103);

    }
    if ((v69 & 0x20) != 0)
    {
      if (!v151)
        std::__throw_bad_function_call[abi:ne180100]();
      v110 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v151 + 48))(v151, (uint64_t *)j + 3);
      v111 = *(double *)(v110 + 48);
      v112 = *(double *)(v110 + 56);
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v92, *(double *)(v110 + 40));
      v113 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v100, "setObject:forKeyedSubscript:", v113, v103);

      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v111, v112);
      v114 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v99, "setObject:forKeyedSubscript:", v114, v103);

    }
    if (!v151)
LABEL_138:
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v151 + 48))(v151, (uint64_t *)j + 3) + 32));
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v101, "setObject:forKeyedSubscript:", v115, v103);

  }
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v130);
  if ((v69 & 2) != 0)
    objc_msgSend(v128, "setAverageQuantityBySource:", v127);
  if ((v69 & 4) != 0)
    objc_msgSend(v128, "setMinimumQuantityBySource:", v125);
  if ((v69 & 8) != 0)
    objc_msgSend(v128, "setMaximumQuantityBySource:", v98);
  if ((v69 & 0x20) != 0)
  {
    objc_msgSend(v128, "setMostRecentQuantityBySource:", v100);
    objc_msgSend(v128, "setMostRecentQuantityDateIntervalBySource:", v99);
  }
  objc_msgSend(v128, "setDataCountBySource:", v101);

LABEL_122:
  v116 = v151;
  if (v151 == v150)
  {
    v117 = 4;
    v116 = v150;
  }
  else
  {
    if (!v151)
      goto LABEL_127;
    v117 = 5;
  }
  (*(void (**)(void))(*v116 + 8 * v117))();
LABEL_127:
  v118 = v147;
  if (v147 == v146)
  {
    v119 = 4;
    v118 = v146;
  }
  else
  {
    if (!v147)
      goto LABEL_132;
    v119 = 5;
  }
  (*(void (**)(void))(*v118 + 8 * v119))();
LABEL_132:

  v120 = v145;
  if (v145 == v144)
  {
    v121 = 4;
    v120 = v144;
    goto LABEL_136;
  }
  if (v145)
  {
    v121 = 5;
LABEL_136:
    (*(void (**)(void))(*v120 + 8 * v121))();
  }
  return v128;
}

void sub_1B7CDEF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char *a40,char a41,uint64_t a42,uint64_t a43,char *a44)
{
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;

  v49 = *(_QWORD **)(v47 - 168);
  if (v49 == (_QWORD *)(v47 - 192))
  {
    v50 = 4;
    v49 = (_QWORD *)(v47 - 192);
  }
  else
  {
    if (!v49)
      goto LABEL_6;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_6:
  v51 = a44;
  if (a44 == &a41)
  {
    v52 = 4;
    v51 = &a41;
  }
  else
  {
    if (!a44)
      goto LABEL_11;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_11:

  v53 = a40;
  if (a40 == &a37)
  {
    v54 = 4;
    v53 = &a37;
  }
  else
  {
    if (!a40)
      goto LABEL_16;
    v54 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
LABEL_16:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 344);
  v2 = *(_QWORD *)(a1 + 360);
  if (v1 != (*(_QWORD *)(a1 + 368) - v2) >> 3)
  {
    v4 = (void **)(a1 + 360);
    *(_QWORD *)(a1 + 368) = v2;
    std::vector<long long>::reserve((void **)(a1 + 360), v1);
    v5 = *(_QWORD **)(a1 + 336);
    if (v5)
    {
      v6 = *(char **)(a1 + 368);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 376);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 360);
            v6 = *(char **)(a1 + 368);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 360) = v16;
          *(_QWORD *)(a1 + 368) = v9;
          *(_QWORD *)(a1 + 376) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 368) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7CDF43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  int64_t v11;
  char v12;
  char v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  id WeakRetained;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  double var0;
  uint64_t v47;
  int64_t v48;
  _BOOL4 var4;
  BOOL var5;
  double v51;
  int v52;
  int v53;
  unint64_t var3;
  _OWORD *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  void *v77;
  unint64_t v78;
  uint64_t **v79;
  BOOL v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  BOOL v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  double v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  _BOOL4 v104;
  unint64_t v105;
  uint64_t **v106;
  __int128 v107;
  char *v108;
  double v109;
  void *v110;
  void *v111;
  _QWORD *v112;
  double **v113;
  id *location;
  void *__p;
  id v116;
  uint64_t *v117;
  uint64_t v118;
  int64_t v119;
  double **v120;
  char v121;
  BOOL v122;
  int64_t v123;
  void **v124;
  uint64_t v125;
  HDRawQuantitySample v126;
  __int128 v127;
  __int128 v128;
  __int16 v129;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v124 = (void **)(a1 + 96);
    v120 = (double **)(a1 + 64);
    v117 = (uint64_t *)(a1 + 256);
    v118 = a1 + 120;
    location = (id *)(a1 + 88);
    v113 = (double **)(a1 + 264);
    v112 = (_QWORD *)(a1 + 304);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_127:
      *(double *)(a1 + 56) = a2;
LABEL_128:
      v109 = *(double *)(a1 + 56);
      if (v109 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>, HDStatisticsTimeInterval>]");
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v110, "handleFailureInFunction:file:lineNumber:description:", v111, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v109 = *(double *)(a1 + 56);
      }
      v5 = v109;
      if (v109 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v17 = a2;
      v18 = a2;
      v19 = v5;
      v20 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v21 = *(double *)(v20 + 8);
          v22 = *(double *)(v20 + 16);
          if (v21 > v19 && v21 < v18)
            v18 = *(double *)(v20 + 8);
          if (v22 > v5)
            v24 = *(double *)(v20 + 16);
          else
            v24 = v17;
          if (v22 < v17)
          {
            v19 = v5;
            v17 = v24;
          }
          v20 += 48;
        }
        while ((__int128 *)v20 != v7);
      }
      if (v17 >= v18)
        v25 = v18;
      else
        v25 = v17;
      v26 = *(double *)(a1 + 16);
      if (v26 > 0.0)
      {
        v27 = v26 * floor(v25 / v26);
        v28 = v26 * floor((v26 + v5) / v26);
        if (v27 >= v28)
          v25 = v27;
        else
          v25 = v28;
      }
      *v124 = 0;
      v124[1] = 0;
      v124[2] = 0;
      __p = (void *)v6;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        v32 = *(char **)(a1 + 96);
        v31 = *(char **)(a1 + 104);
        v33 = v29;
        if (v31 != v32)
        {
          do
          {
            v34 = *((_OWORD *)v31 - 3);
            v35 = *((_OWORD *)v31 - 2);
            *(_OWORD *)(v33 - 21) = *(_OWORD *)(v31 - 21);
            *((_OWORD *)v33 - 3) = v34;
            *((_OWORD *)v33 - 2) = v35;
            v33 -= 48;
            v31 -= 48;
          }
          while (v31 != v32);
          v31 = (char *)*v124;
        }
        *(_QWORD *)(a1 + 96) = v33;
        *(_QWORD *)(a1 + 104) = v29;
        *(_QWORD *)(a1 + 112) = &v29[48 * v30];
        if (v31)
          operator delete(v31);
      }
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      v37 = __clz(v8);
      if (WeakRetained)
      {
        *(_QWORD *)&v126.var0 = a1;
        v38 = 126 - 2 * v37;
        if ((__int128 *)v6 == v7)
          v39 = 0;
        else
          v39 = v38;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v126, v39, 1);
      }
      else
      {
        v42 = 126 - 2 * v37;
        if ((__int128 *)v6 == v7)
          v39 = 0;
        else
          v39 = v42;
      }
      std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, v39, 1);
      if (*(_BYTE *)(a1 + 25))
        v116 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v116 = 0;
      if ((__int128 *)v6 == v7)
      {
LABEL_109:
        *(double *)(a1 + 288) = HKIntervalMask<double>::removeIntervalsBefore(v113, v25) + *(double *)(a1 + 288);
        v92 = *(_QWORD **)(a1 + 296);
        if (v92 != v112)
        {
          do
          {
            *((double *)v92 + 26) = HKIntervalMask<double>::removeIntervalsBefore((double **)v92 + 23, v25)
                                  + *((double *)v92 + 26);
            v93 = (_QWORD *)v92[1];
            if (v93)
            {
              do
              {
                v94 = v93;
                v93 = (_QWORD *)*v93;
              }
              while (v93);
            }
            else
            {
              do
              {
                v94 = (_QWORD *)v92[2];
                v95 = *v94 == (_QWORD)v92;
                v92 = v94;
              }
              while (!v95);
            }
            v92 = v94;
          }
          while (v94 != v112);
        }
        *(double *)(a1 + 56) = v25;

        if (__p)
          operator delete(__p);
        goto LABEL_128;
      }
      v119 = 0;
      v43 = 0;
      v44 = v6;
      while (2)
      {
        v45 = *(_OWORD *)(v44 + 16);
        *(_OWORD *)&v126.var0 = *(_OWORD *)v44;
        *(_OWORD *)&v126.var2 = v45;
        *(_QWORD *)&v126.var4 = *(_QWORD *)(v44 + 32);
        var0 = v126.var0;
        v47 = v45;
        if (*(double *)&v45 - v126.var1 - (v25 - v126.var1) < 0.01)
        {
          v48 = 0;
          var4 = 0;
          var5 = 0;
          v51 = 0.0;
          v47 = 0;
          if (!v126.var4)
            goto LABEL_62;
LABEL_57:
          v122 = var5;
          v123 = v48;
          HDRawQuantitySample::applyMask((uint64_t)&v126, v120);
          v52 = *(unsigned __int8 *)(v44 + 42);
          v53 = *(unsigned __int8 *)(v44 + 41);
          v121 = *(_BYTE *)(v44 + 40);
          if (!v126.var4)
            goto LABEL_90;
          if ((v43 & 1) != 0)
          {
            var3 = v126.var3;
            if (v119 == v126.var3 || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v118, &v126.var0, v52 == 0);
              HDStatisticsTimeInterval::addSample(v117, &v126, v52 == 0);
              v52 = 1;
            }
          }
          else
          {
            HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v118, &v126.var0, v52 == 0);
            HDStatisticsTimeInterval::addSample(v117, &v126, v52 == 0);
            v52 = 1;
            var3 = v126.var3;
            v119 = v126.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_89;
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, var3);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v65)
            goto LABEL_88;
          objc_msgSend(v116, "objectForKeyedSubscript:", v65);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = v66;
          if (v66)
          {
            if (objc_msgSend(v66, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_87:

LABEL_88:
LABEL_89:
              v43 = 1;
LABEL_90:
              if (var4)
              {
                v80 = v52 != 0;
                v82 = *(char **)(a1 + 104);
                v81 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v82 < v81)
                {
                  *(double *)v82 = var0;
                  *((double *)v82 + 1) = v51;
                  *((_QWORD *)v82 + 2) = v47;
                  *((_QWORD *)v82 + 3) = v123;
                  v82[32] = var4;
                  v82[33] = v122;
                  v82[40] = v121;
                  v82[41] = v53;
                  v59 = v82 + 48;
                  v82[42] = v80;
                  goto LABEL_107;
                }
                v76 = (char *)*v124;
                v83 = 0xAAAAAAAAAAAAAAABLL * ((v82 - (_BYTE *)*v124) >> 4);
                v84 = v83 + 1;
                if (v83 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (_QWORD)v76) >> 4);
                if (2 * v85 > v84)
                  v84 = 2 * v85;
                if (v85 >= 0x2AAAAAAAAAAAAAALL)
                  v86 = 0x555555555555555;
                else
                  v86 = v84;
                if (v86)
                {
                  v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v86);
                  v76 = *(char **)(a1 + 96);
                  v82 = *(char **)(a1 + 104);
                }
                else
                {
                  v87 = 0;
                }
                v88 = v86 + 48 * v83;
                *(double *)v88 = var0;
                *(double *)(v88 + 8) = v51;
                *(_QWORD *)(v88 + 16) = v47;
                *(_QWORD *)(v88 + 24) = v123;
                *(_BYTE *)(v88 + 32) = var4;
                *(_BYTE *)(v88 + 33) = v122;
                *(_BYTE *)(v88 + 40) = v121;
                *(_BYTE *)(v88 + 41) = v53;
                *(_BYTE *)(v88 + 42) = v80;
                v89 = v88;
                if (v82 != v76)
                {
                  do
                  {
                    v90 = *((_OWORD *)v82 - 3);
                    v91 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)(v89 - 21) = *(_OWORD *)(v82 - 21);
                    *(_OWORD *)(v89 - 48) = v90;
                    *(_OWORD *)(v89 - 32) = v91;
                    v89 -= 48;
                    v82 -= 48;
                  }
                  while (v82 != v76);
                  v76 = (char *)*v124;
                }
                v59 = (_OWORD *)(v88 + 48);
                *(_QWORD *)(a1 + 96) = v89;
                *(_QWORD *)(a1 + 104) = v88 + 48;
                *(_QWORD *)(a1 + 112) = v86 + 48 * v87;
                if (v76)
LABEL_106:
                  operator delete(v76);
                goto LABEL_107;
              }
              goto LABEL_108;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v116, "setObject:forKeyedSubscript:", v77, v65);

          }
          v78 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
          v79 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v78);
          HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)v79, &v126.var0, v53 == 0);
          HDStatisticsTimeInterval::addSample((uint64_t *)v79 + 17, &v126, v53 == 0);
          LOBYTE(v53) = 1;
          goto LABEL_87;
        }
        if (v25 - v126.var1 < 0.01)
        {
          v126.var4 = 0;
          goto LABEL_62;
        }
        v48 = v126.var3;
        var5 = v126.var5;
        v126.var2 = v25;
        v51 = v25;
        var4 = v126.var4;
        if (v126.var4)
          goto LABEL_57;
LABEL_62:
        v55 = *(_OWORD **)(a1 + 104);
        v56 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v55 < v56)
        {
          v57 = *(_OWORD *)v44;
          v58 = *(_OWORD *)(v44 + 32);
          v55[1] = *(_OWORD *)(v44 + 16);
          v55[2] = v58;
          *v55 = v57;
          v59 = v55 + 3;
          goto LABEL_107;
        }
        v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (_BYTE *)*v124) >> 4);
        v61 = v60 + 1;
        if (v60 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (_QWORD)*v124) >> 4);
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0x2AAAAAAAAAAAAAALL)
          v63 = 0x555555555555555;
        else
          v63 = v61;
        if (v63)
          v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v63);
        else
          v64 = 0;
        v68 = (_OWORD *)(v63 + 48 * v60);
        v69 = *(_OWORD *)v44;
        v70 = *(_OWORD *)(v44 + 32);
        v68[1] = *(_OWORD *)(v44 + 16);
        v68[2] = v70;
        *v68 = v69;
        v72 = *(char **)(a1 + 96);
        v71 = *(char **)(a1 + 104);
        v73 = v68;
        if (v71 != v72)
        {
          do
          {
            v74 = *((_OWORD *)v71 - 3);
            v75 = *((_OWORD *)v71 - 2);
            *(_OWORD *)((char *)v73 - 21) = *(_OWORD *)(v71 - 21);
            *(v73 - 3) = v74;
            *(v73 - 2) = v75;
            v73 -= 3;
            v71 -= 48;
          }
          while (v71 != v72);
          v71 = (char *)*v124;
        }
        v59 = v68 + 3;
        *(_QWORD *)(a1 + 96) = v73;
        *(_QWORD *)(a1 + 104) = v68 + 3;
        *(_QWORD *)(a1 + 112) = v63 + 48 * v64;
        if (v71)
        {
          v76 = v71;
          goto LABEL_106;
        }
LABEL_107:
        *(_QWORD *)(a1 + 104) = v59;
LABEL_108:
        v44 += 48;
        if ((__int128 *)v44 == v7)
          goto LABEL_109;
        continue;
      }
    }
    v9 = *(double *)(v6 + 8);
    v10 = *(double *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 24);
    v12 = *(_BYTE *)(v6 + 32);
    v13 = *(_BYTE *)(v6 + 33);
    if (a2 - v9 >= 0.01)
    {
      if (v10 - v9 - (a2 - v9) < 0.01)
      {
        v40 = 0;
        v41 = 0;
        v16 = 0.0;
        v15 = *(double *)(v6 + 16);
        v14 = *(_BYTE *)(v6 + 32);
        v10 = 0.0;
        v12 = 0;
LABEL_120:
        v96 = *(_QWORD *)(a1 + 96);
        v97 = *(unsigned __int8 *)(v6 + 42);
        v98 = *(unsigned __int8 *)(v6 + 41);
        v99 = *(unsigned __int8 *)(v96 + 40);
        v100 = *(double *)v96;
        v126.var1 = v9;
        v126.var2 = v15;
        v126.var3 = v11;
        v126.var4 = v14;
        v126.var5 = v13;
        *(_DWORD *)(&v126.var5 + 1) = *(_DWORD *)(v96 + 34);
        *(_WORD *)(&v126.var5 + 5) = *(_WORD *)(v96 + 38);
        *((double *)&v127 + 1) = v16;
        *(double *)&v128 = v10;
        *((_QWORD *)&v128 + 1) = v40;
        LOBYTE(v129) = v12;
        HIBYTE(v129) = v41;
        v126.var0 = v100;
        *(double *)&v127 = v100;
        HDRawQuantitySample::applyMask((uint64_t)&v126, v120);
        v101 = v99 != 0;
        v102 = v98 != 0;
        v103 = v97 != 0;
        if (v126.var4)
        {
          v104 = v97 == 0;
          HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v118, &v126.var0, v104);
          HDStatisticsTimeInterval::addSample(v117, &v126, v104);
          if (*(_BYTE *)(a1 + 25))
          {
            v105 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v126.var3);
            v106 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v105);
            HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)v106, &v126.var0, v98 == 0);
            HDStatisticsTimeInterval::addSample((uint64_t *)v106 + 17, &v126, v98 == 0);
          }
          v101 = 1;
          v102 = 1;
          v103 = 1;
        }
        if ((_BYTE)v129)
        {
          LOWORD(v125) = v129;
          v107 = v128;
          v108 = (char *)*v124;
          *(_OWORD *)v108 = v127;
          *((_OWORD *)v108 + 1) = v107;
          *((_QWORD *)v108 + 4) = v125;
          v108[40] = v101;
          v108[41] = v102;
          v108[42] = v103;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_127;
      }
      v15 = a2;
      v14 = *(_BYTE *)(v6 + 32);
      v16 = a2;
    }
    else
    {
      v14 = 0;
      v15 = *(double *)(v6 + 16);
      v16 = *(double *)(v6 + 8);
    }
    v40 = *(_QWORD *)(v6 + 24);
    v41 = *(_BYTE *)(v6 + 33);
    goto LABEL_120;
  }
}

void sub_1B7CDFE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 304);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 304);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 304) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 296);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 296), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 384), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 424);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7CE0010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 464);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7CE00E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0xD8uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 360);
  v7 = *(char **)(*(_QWORD *)a4 + 368);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 360);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 360);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 368);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 360);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 368);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 360);
      v15 = *(char **)(*(_QWORD *)a4 + 368);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 368);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 368);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 360);
          v25 = *(char **)(*(_QWORD *)a4 + 368);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 368);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 368);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 360);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 360);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 368);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 360);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 368);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 360);
      v41 = *(char **)(*(_QWORD *)a4 + 368);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 368);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 368);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 360);
      v11 = *(char **)(*(_QWORD *)a3 + 368);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 368);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 368);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 360);
      v24 = *(char **)(*(_QWORD *)a3 + 368);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 368);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 368);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 360);
            v31 = *(char **)(*(_QWORD *)a3 + 368);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 368);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 368);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 360);
    v14 = *(char **)(*(_QWORD *)a5 + 368);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 368);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 368);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 360);
        v23 = *(char **)(*(_QWORD *)a5 + 368);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 368);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 368);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 360);
            v32 = *(char **)(*(_QWORD *)a5 + 368);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 368);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 368);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 360);
    v16 = *(char **)(*(_QWORD *)a6 + 368);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 368);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 368);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 360);
        v25 = *(char **)(*(_QWORD *)a6 + 368);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 368);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 368);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 360);
            v34 = *(char **)(*(_QWORD *)a6 + 368);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 368);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 368);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 360);
                v43 = *(char **)(*(_QWORD *)a6 + 368);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 368);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 368);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  char **v11;
  char *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  char **v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD *v45;
  _QWORD *v46;
  BOOL v47;
  void *v48;
  _QWORD *v49;
  _QWORD *v51;
  unint64_t v52;
  _QWORD v53[2];
  char v54;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 296);
  v49 = (_QWORD *)(a2 + 304);
  if (v3 == (_QWORD *)(a2 + 304))
    return;
  v51 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_80;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v52 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0xC8uLL);
      v53[0] = v19;
      v53[1] = v51;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *(_OWORD *)(v19 + 184) = 0u;
      v54 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(char ***)(*(_QWORD *)a1 + 8 * v2);
        v12 = (char *)v53[0];
        if (v37)
        {
          *(_QWORD *)v53[0] = *v37;
        }
        else
        {
          *(_QWORD *)v53[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v51;
          if (!*(_QWORD *)v12)
          {
LABEL_76:
            v53[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v53);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*(_QWORD *)v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (char **)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v51;
            if (*v51)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v51;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v48 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v48)
            operator delete(v48);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = *((_QWORD *)v12 + 1);
      if (v13 == v8)
        break;
      if (v52 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = *(char **)v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = *((id *)v12 + 2);
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v3 + 5);
    v39 = *(_OWORD *)(v3 + 7);
    v40 = *(_OWORD *)(v3 + 9);
    v41 = *(_OWORD *)(v3 + 11);
    *(_OWORD *)(v12 + 88) = *(_OWORD *)(v3 + 13);
    *(_OWORD *)(v12 + 72) = v41;
    *(_OWORD *)(v12 + 56) = v40;
    *(_OWORD *)(v12 + 40) = v39;
    v42 = *(_OWORD *)(v3 + 15);
    v43 = *(_OWORD *)(v3 + 17);
    v44 = *(_OWORD *)(v3 + 19);
    *((_QWORD *)v12 + 19) = v3[21];
    *(_OWORD *)(v12 + 136) = v44;
    *(_OWORD *)(v12 + 120) = v43;
    *(_OWORD *)(v12 + 104) = v42;
    *((_QWORD *)v12 + 20) = v3[22];
    if (v12 + 16 != (char *)(v3 + 4))
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v12 + 168, (char *)v3[23], v3[24], (uint64_t)(v3[24] - v3[23]) >> 4);
    *((_QWORD *)v12 + 24) = v3[26];

LABEL_80:
    v45 = (_QWORD *)v3[1];
    if (v45)
    {
      do
      {
        v46 = v45;
        v45 = (_QWORD *)*v45;
      }
      while (v45);
    }
    else
    {
      do
      {
        v46 = (_QWORD *)v3[2];
        v47 = *v46 == (_QWORD)v3;
        v3 = v46;
      }
      while (!v47);
    }
    v3 = v46;
  }
  while (v46 != v49);
}

void sub_1B7CE2F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D06370;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D06370;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D06370;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7CE31B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D06370;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 136;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D06400;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D06400;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D06400;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7CE33E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D06400;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D06490;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D06490;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 656))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 656))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7CE36E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 632);
      v7 = *(_QWORD *)(a1 + 624);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7CE38EC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  int v12;
  char v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  double v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  uint64_t **v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  double v63;
  double v64;
  unint64_t v65;
  char v66;

  v5 = a1 + 8;
  v6 = *(double *)(a1 + 8);
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = v10;
  v13 = v11;
  v14 = (unint64_t)v9;
  v15 = v8;
  v16 = v7;
  if (v6 - v7 >= 0.01)
  {
    if (v8 - v7 - (v6 - v7) >= 0.01)
    {
      v12 = *(unsigned __int8 *)(a2 + 32);
      v13 = *(_BYTE *)(a2 + 33);
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(double *)(a2 + 16);
      v16 = *(double *)(a1 + 8);
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      v16 = 0.0;
    }
  }
  v17 = *(uint64_t **)a2;
  v18 = *(double *)(a1 + 16);
  v19 = v18 - v16;
  v20 = v15 - v16 - (v18 - v16);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v20 < 0.01)
    {
LABEL_10:
      v65 = 0;
      v21 = 0;
      v66 = 0;
      v18 = 0.0;
      v22 = 0.0;
      if (!v12)
        goto LABEL_28;
      goto LABEL_11;
    }
    if (v19 >= 0.01)
      goto LABEL_27;
LABEL_25:
    v21 = v12;
    v28 = v14;
    v22 = v15;
    v18 = v16;
    if (!v21)
      return;
    goto LABEL_56;
  }
  if (v19 < 0.01)
    goto LABEL_25;
  if (v20 < 0.01)
    goto LABEL_10;
LABEL_27:
  v22 = v15;
  v65 = v14;
  v21 = v12;
  v66 = v13;
  v15 = *(double *)(a1 + 16);
  if (!v12)
  {
LABEL_28:
    v13 = v66;
    v28 = v65;
    if (!v21)
      return;
    goto LABEL_56;
  }
LABEL_11:
  v63 = v16;
  v64 = v15;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 328, v14, v14);
  v23 = *(_QWORD *)(a1 + 112);
  if (v23 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 160) <= 0)
  {
    v29.f64[1] = *(float64_t *)(a1 + 16);
    v24 = v63;
    v25 = v64;
    v29.f64[0] = v63;
    v30.f64[0] = *(float64_t *)(a1 + 8);
    v30.f64[1] = v64;
    v31 = (int8x16_t)vcgtq_f64(v30, v29);
    v30.f64[0] = v63;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v31, *(int8x16_t *)(a1 + 8), (int8x16_t)v30);
    if (!a3)
      goto LABEL_31;
    goto LABEL_22;
  }
  v24 = v63;
  v25 = v64;
  if (v63 < *(double *)(a1 + 48))
  {
    v26 = *(double *)(a1 + 8);
    if (v63 >= v26)
      v26 = v63;
    *(double *)(a1 + 48) = v26;
  }
  if (v64 > *(double *)(a1 + 56))
  {
    v27 = *(double *)(a1 + 16);
    if (v27 >= v64)
      v27 = v64;
    *(double *)(a1 + 56) = v27;
  }
  if (a3)
  {
LABEL_22:
    if (v24 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v24);
      v24 = v63;
      v25 = v64;
      v23 = *(_QWORD *)(a1 + 112);
    }
  }
LABEL_31:
  v32 = *(_QWORD *)(a1 + 120);
  if (v23 >= v32)
  {
    v34 = *(_QWORD *)(a1 + 104);
    v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v34) >> 4);
    v36 = v35 + 1;
    if (v35 + 1 > 0x555555555555555)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - v34) >> 4);
    if (2 * v37 > v36)
      v36 = 2 * v37;
    if (v37 >= 0x2AAAAAAAAAAAAAALL)
      v38 = 0x555555555555555;
    else
      v38 = v36;
    if (v38)
    {
      v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
      v24 = v63;
      v25 = v64;
    }
    else
    {
      v39 = 0;
    }
    v40 = v38 + 48 * v35;
    v41 = v38 + 48 * v39;
    *(_QWORD *)v40 = v17;
    *(double *)(v40 + 8) = v24;
    *(double *)(v40 + 16) = v25;
    *(_QWORD *)(v40 + 24) = v14;
    *(_BYTE *)(v40 + 32) = v12;
    *(_BYTE *)(v40 + 33) = v13;
    *(_WORD *)(v40 + 40) = 0;
    *(_BYTE *)(v40 + 42) = 0;
    v33 = v40 + 48;
    v43 = *(char **)(a1 + 104);
    v42 = *(char **)(a1 + 112);
    if (v42 == v43)
    {
      v13 = v66;
      v28 = v65;
    }
    else
    {
      v13 = v66;
      v28 = v65;
      do
      {
        v44 = *((_OWORD *)v42 - 3);
        v45 = *((_OWORD *)v42 - 2);
        *(_OWORD *)(v40 - 21) = *(_OWORD *)(v42 - 21);
        *(_OWORD *)(v40 - 48) = v44;
        *(_OWORD *)(v40 - 32) = v45;
        v40 -= 48;
        v42 -= 48;
      }
      while (v42 != v43);
      v42 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v40;
    *(_QWORD *)(a1 + 112) = v33;
    *(_QWORD *)(a1 + 120) = v41;
    if (v42)
      operator delete(v42);
  }
  else
  {
    *(_QWORD *)v23 = v17;
    *(double *)(v23 + 8) = v24;
    *(double *)(v23 + 16) = v25;
    *(_QWORD *)(v23 + 24) = v14;
    *(_BYTE *)(v23 + 32) = v12;
    *(_BYTE *)(v23 + 33) = v13;
    *(_WORD *)(v23 + 40) = 0;
    v33 = v23 + 48;
    *(_BYTE *)(v23 + 42) = 0;
    v13 = v66;
    v28 = v65;
  }
  *(_QWORD *)(a1 + 112) = v33;
  if (!*(_BYTE *)(a1 + 200) || *(double *)(a1 + 176) <= v7)
  {
    *(_QWORD *)(a1 + 168) = v17;
    *(double *)(a1 + 176) = v7;
    *(double *)(a1 + 184) = v8;
    *(_QWORD *)(a1 + 192) = v9;
    *(_BYTE *)(a1 + 200) = v10;
    *(_BYTE *)(a1 + 201) = v11;
  }
  if (*(_BYTE *)(a1 + 33)
    && ((v46 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v14), v47 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v46), !*((_BYTE *)v47 + 72))|| *((double *)v47 + 6) <= v7))
  {
    v47[5] = v17;
    *((double *)v47 + 6) = v7;
    *((double *)v47 + 7) = v8;
    v47[8] = v9;
    *((_BYTE *)v47 + 72) = v10;
    *((_BYTE *)v47 + 73) = v11;
    if (!v21)
      return;
  }
  else if (!v21)
  {
    return;
  }
LABEL_56:
  v48 = *(_QWORD *)(a1 + 520);
  v49 = *(_QWORD *)(a1 + 528);
  if (v48 >= v49)
  {
    v51 = *(_QWORD *)(a1 + 512);
    v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v51) >> 3);
    v53 = v52 + 1;
    if (v52 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v51) >> 3);
    if (2 * v54 > v53)
      v53 = 2 * v54;
    if (v54 >= 0x333333333333333)
      v55 = 0x666666666666666;
    else
      v55 = v53;
    if (v55)
      v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
    else
      v56 = 0;
    v57 = v55 + 40 * v52;
    v58 = v55 + 40 * v56;
    *(_QWORD *)v57 = v17;
    *(double *)(v57 + 8) = v18;
    *(double *)(v57 + 16) = v22;
    *(_QWORD *)(v57 + 24) = v28;
    *(_BYTE *)(v57 + 32) = v21;
    *(_BYTE *)(v57 + 33) = v13;
    v50 = v57 + 40;
    v59 = *(char **)(a1 + 520);
    v60 = *(char **)(a1 + 512);
    if (v59 != v60)
    {
      do
      {
        v61 = *(_OWORD *)(v59 - 40);
        v62 = *(_OWORD *)(v59 - 24);
        *(_WORD *)(v57 - 8) = *((_WORD *)v59 - 4);
        *(_OWORD *)(v57 - 24) = v62;
        *(_OWORD *)(v57 - 40) = v61;
        v57 -= 40;
        v59 -= 40;
      }
      while (v59 != v60);
      v59 = *(char **)(a1 + 512);
    }
    *(_QWORD *)(a1 + 512) = v57;
    *(_QWORD *)(a1 + 520) = v50;
    *(_QWORD *)(a1 + 528) = v58;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *(_QWORD *)v48 = v17;
    *(double *)(v48 + 8) = v18;
    *(double *)(v48 + 16) = v22;
    *(_QWORD *)(v48 + 24) = v28;
    *(_BYTE *)(v48 + 32) = v21;
    v50 = v48 + 40;
    *(_BYTE *)(v48 + 33) = v13;
  }
  *(_QWORD *)(a1 + 520) = v50;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 658))
  {
    *(_BYTE *)(a1 + 660) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 660) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7CE3EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 512), *(_QWORD *)(a1 + 520), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 520) - *(_QWORD *)(a1 + 512)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7CE3FA4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  __int128 v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;

  v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 536), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 64);
  v9 = 0uLL;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  v10 = *(void **)(v8 + 232);
  if (v10)
  {
    *(_QWORD *)(a1 + 280) = v10;
    operator delete(v10);
    v9 = 0uLL;
  }
  *(_OWORD *)(v8 + 232) = v9;
  *(_OWORD *)(v8 + 248) = v9;
  if (*(_QWORD *)(a1 + 320))
  {
    v11 = *(_QWORD **)(a1 + 304);
    v12 = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 304) = a1 + 312;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    if (v11[1])
      v13 = (_QWORD *)v11[1];
    else
      v13 = v11;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 536));
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a1 + 512);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 660))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 660) = 0;
  }

}

void sub_1B7CE416C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 656))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7CE4228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 672));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 656) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7CE458C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40101E088FLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7CE4738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7CE49A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  char v15;
  char v16;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    if (a7 - a6 - v7 >= 0.01)
    {
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  v11 = a5;
  v12 = a6;
  v13 = a7;
  v14 = a2;
  v15 = v8;
  v16 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v11, a3, a4);
  }
  else
  {
    v10 = *(double *)(a1 + 40) - a6;
    if (v10 >= 0.01)
    {
      if (a7 - a6 - v10 >= 0.01)
        a7 = *(double *)(a1 + 40);
    }
    else
    {
      v8 = 0;
    }
    v12 = a6;
    v13 = a7;
    v15 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v11, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 656))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7CE5654(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7CE56F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersE24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D06540;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_WORD *)(a1 + 664) = 1;
  *(_BYTE *)(a1 + 666) = 0;
  *(_BYTE *)(a1 + 668) = 0;
  *(_QWORD *)(a1 + 672) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_QWORD *)(a1 + 712) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D06540;
  v2 = *(void **)(a1 + 696);
  if (v2)
  {
    *(_QWORD *)(a1 + 704) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 632);
  if (v3)
  {
    *(_QWORD *)(a1 + 640) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 664) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_configureForStartTime(a1);

}

void sub_1B7CE5868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 672) = v4;
    v3 = v5;
  }

}

void sub_1B7CE58C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 85, a2);
  v7 = a2;
  v4 = a1[85];
  v5 = a1[82];
  a1[82] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[82]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 280) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7CE5A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[64];

  if (*(_BYTE *)(a1 + 664))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7CE5B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 666))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 665))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 664))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 667))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 704);
      v20 = *(_QWORD *)(a1 + 712);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 696);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 704);
        v35 = *(char **)(a1 + 696);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 696);
        }
        *(_QWORD *)(a1 + 696) = v30;
        *(_QWORD *)(a1 + 704) = v23;
        *(_QWORD *)(a1 + 712) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 704) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7CE5DA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 666))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 666) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 665))
    goto LABEL_5;
  v9 = *(void **)(a1 + 688);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_391);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 688);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 688);
  *(_QWORD *)(a1 + 688) = 0;

  *(_BYTE *)(a1 + 665) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 696);
    *(_QWORD *)(a1 + 712) = 0;
    *(_QWORD *)(a1 + 704) = 0;
    *(_QWORD *)(a1 + 696) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 696);
      v37 = *(__int128 **)(a1 + 704);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 704);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 704) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 696);
  v39 = *(_QWORD *)(a1 + 704);
  *(_QWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 640) != *(_QWORD *)(a1 + 632))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 640) != *(_QWORD *)(a1 + 632));
  }
  *(_BYTE *)(a1 + 666) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 668))
    {
      *(_BYTE *)(a1 + 668) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 666) = 0;
LABEL_83:

  return v7;
}

void sub_1B7CE649C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 666) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 667) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 666))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 666))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 688);
    *(_QWORD *)(a1 + 688) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 665) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 665))
  {
    v8 = *(void **)(a1 + 688);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 688);
      *(_QWORD *)(a1 + 688) = v9;

      v8 = *(void **)(a1 + 688);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7CE6798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 664) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 664) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7CE68B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 664) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 664), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::archive((uint64_t)&v37, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 424);
  if (v9 != (_QWORD *)(a1 + 432))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::archive((uint64_t)&v37, (int8x16_t *)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 432));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 632);
  for (k = *(int8x16_t **)(a1 + 640); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7CE6C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t i;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  id v64;
  _QWORD *v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  _BYTE v69[512];
  __int128 v70;
  __int128 v71;
  int8x16_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  int8x16_t v77;
  uint64_t v78;
  uint64_t v79[4];
  void *__p;
  char *v81;
  unint64_t v82;
  _BYTE v83[128];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t **v88;
  uint64_t *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  int v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  int v98;
  __int128 v99;
  __int128 v100;
  int v101;
  __int128 v102;
  __int128 v103;
  int v104;
  void (**v105)(statistics::StatisticsEngine *__hidden);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  _BYTE v112[32];
  unint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;

  v64 = a2;
  *(_BYTE *)(a1 + 664) = objc_msgSend(v64, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v64;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v69, 0, -1.79769313e308, 1.79769313e308);
  v70 = 0u;
  v71 = 0u;
  v113 = 0;
  v67 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v112, (const unsigned __int8 *)objc_msgSend(v67, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v113));
  v66 = a1;
  v105 = &off_1E6D09A88;
  v106 = 0;
  v110 = 0;
  v108 = 0;
  v109 = 0;
  v111 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v105, (PB::Reader *)v112);
  v68 = v107;
  if (v106)
  {
    v76 = 0;
    memset(v79, 0, sizeof(v79));
    memset(&v83[88], 0, 34);
    memset(&v83[8], 0, 74);
    v85 = 0u;
    v86 = 0u;
    v84 = 0u;
    LOWORD(v87) = 0;
    v90 = 0;
    __p = 0;
    *(_DWORD *)v83 = 0;
    v81 = 0;
    v82 = 0;
    v89 = 0;
    v88 = &v89;
    v91 = 0u;
    v92 = 0u;
    v93 = 1065353216;
    v97 = 0;
    v95 = 0u;
    v96 = 0u;
    v94 = 0u;
    v98 = 1065353216;
    v99 = 0u;
    v100 = 0u;
    v101 = 1065353216;
    v102 = 0u;
    v103 = 0u;
    v104 = 1065353216;
    v72 = vextq_s8(*(int8x16_t *)(v106 + 8), *(int8x16_t *)(v106 + 8), 8uLL);
    v4 = *(_QWORD *)(v106 + 72);
    v73 = *(_QWORD *)(v106 + 64);
    v74 = *(_BYTE *)(v106 + 185);
    v75 = *(_BYTE *)(v106 + 186);
    v77 = vextq_s8(*(int8x16_t *)(v106 + 24), *(int8x16_t *)(v106 + 24), 8uLL);
    v78 = v4;
    v5 = *(_QWORD *)(v106 + 80);
    v6 = *(_QWORD *)(v106 + 88);
    v65 = (_QWORD *)v106;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v82)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v82 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v82 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v81;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v81 = (char *)(v19 + 6);
          v82 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v81 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = (_QWORD *)v65[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::unarchive((uint64_t)&v114, v23);
      v84 = v122;
      v85 = v123;
      v86 = v124;
      v87 = v125;
      *(_OWORD *)&v83[64] = v118;
      *(_OWORD *)&v83[80] = v119;
      *(_OWORD *)&v83[96] = v120;
      *(_OWORD *)&v83[112] = v121;
      *(_OWORD *)v83 = v114;
      *(_OWORD *)&v83[16] = v115;
      *(_OWORD *)&v83[32] = v116;
      *(_OWORD *)&v83[48] = v117;
    }
    v24 = (_QWORD **)v65[17];
    v25 = (_QWORD **)v65[18];
    while (v24 != v25)
    {
      v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::unarchive((uint64_t)&v114, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v89;
      v29 = &v89;
      v30 = &v89;
      if (v89)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_33;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_36;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_33:
      v33 = (char *)operator new(0xE0uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      *(_OWORD *)(v33 + 200) = 0u;
      *((_QWORD *)v33 + 27) = 0;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v88)
      {
        v88 = (uint64_t **)*v88;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v89, v32);
      ++v90;
LABEL_36:
      v34 = v125;
      v35 = v124;
      v36 = v123;
      *(_OWORD *)(v33 + 168) = v122;
      *(_OWORD *)(v33 + 184) = v36;
      *(_OWORD *)(v33 + 200) = v35;
      v37 = v121;
      v38 = v120;
      v39 = v119;
      *(_OWORD *)(v33 + 104) = v118;
      *(_OWORD *)(v33 + 120) = v39;
      *(_OWORD *)(v33 + 136) = v38;
      *(_OWORD *)(v33 + 152) = v37;
      v40 = v117;
      v41 = v116;
      v42 = v115;
      *(_OWORD *)(v33 + 40) = v114;
      *((_QWORD *)v33 + 27) = v34;
      *(_OWORD *)(v33 + 56) = v42;
      *(_OWORD *)(v33 + 72) = v41;
      ++v24;
      *(_OWORD *)(v33 + 88) = v40;
    }
    v43 = v65[5];
    for (i = v65[6]; v43 != i; v43 += 8)
    {
      v46 = *(double *)(*(_QWORD *)v43 + 8);
      v45 = *(double *)(*(_QWORD *)v43 + 16);
      if (v46 >= v45)
        v47 = *(double *)(*(_QWORD *)v43 + 16);
      else
        v47 = *(double *)(*(_QWORD *)v43 + 8);
      if (v45 < v46)
        v45 = *(double *)(*(_QWORD *)v43 + 8);
      HKIntervalMask<double>::_insertInterval(v79, v47, v45);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::operator=((uint64_t)v69, (uint64_t)&v72);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)&v72);
  }
  v48 = v108;
  v49 = v109;
  if (v108 != v109)
  {
    v50 = *((_QWORD *)&v70 + 1);
    do
    {
      v51 = *(_QWORD *)(*(_QWORD *)v48 + 24);
      v52 = *(_QWORD *)(*(_QWORD *)v48 + 32);
      v53 = *(_QWORD *)(*(_QWORD *)v48 + 8);
      v54 = *(_QWORD *)(*(_QWORD *)v48 + 16);
      if (v50 >= (unint64_t)v71)
      {
        v55 = (void *)v70;
        v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v50 - v70) >> 3);
        v57 = v56 + 1;
        if (v56 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v71 - v70) >> 3) > v57)
          v57 = 0x999999999999999ALL * ((uint64_t)(v71 - v70) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v71 - v70) >> 3) >= 0x333333333333333)
          v58 = 0x666666666666666;
        else
          v58 = v57;
        if (v58)
        {
          v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v58);
          v50 = *((_QWORD *)&v70 + 1);
          v55 = (void *)v70;
        }
        else
        {
          v59 = 0;
        }
        v60 = v58 + 40 * v56;
        *(_QWORD *)v60 = v52;
        *(_QWORD *)(v60 + 8) = v51;
        *(_QWORD *)(v60 + 16) = v53;
        *(_QWORD *)(v60 + 24) = v54;
        *(_WORD *)(v60 + 32) = 1;
        v61 = v60;
        if ((void *)v50 != v55)
        {
          do
          {
            v62 = *(_OWORD *)(v50 - 40);
            v63 = *(_OWORD *)(v50 - 24);
            *(_WORD *)(v61 - 8) = *(_WORD *)(v50 - 8);
            *(_OWORD *)(v61 - 24) = v63;
            *(_OWORD *)(v61 - 40) = v62;
            v61 -= 40;
            v50 -= 40;
          }
          while ((void *)v50 != v55);
          v55 = (void *)v70;
        }
        *(_QWORD *)&v70 = v61;
        v50 = v60 + 40;
        *((_QWORD *)&v70 + 1) = v60 + 40;
        *(_QWORD *)&v71 = v58 + 40 * v59;
        if (v55)
          operator delete(v55);
      }
      else
      {
        *(_QWORD *)v50 = v52;
        *(_QWORD *)(v50 + 8) = v51;
        *(_QWORD *)(v50 + 16) = v53;
        *(_QWORD *)(v50 + 24) = v54;
        *(_WORD *)(v50 + 32) = 1;
        v50 += 40;
      }
      *((_QWORD *)&v70 + 1) = v50;
      v48 += 8;
    }
    while (v48 != v49);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v105);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::operator=((_QWORD *)(v66 + 112), (uint64_t)&v68);
  if ((_QWORD)v70)
  {
    *((_QWORD *)&v70 + 1) = v70;
    operator delete((void *)v70);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v69);

}

void sub_1B7CE7418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x478]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_WORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_WORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 504) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 520);
  if (v2)
  {
    *(_QWORD *)(a1 + 528) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 472);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 432);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 392);
  v2 = *(void **)(a1 + 368);
  if (v2)
  {
    *(_QWORD *)(a1 + 376) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 328);
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 312));
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[512];
  uint64_t v18;
  _BYTE v19[512];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[448];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 680));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 664) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7CE7910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 65), (__n128 *)(a2 + 520));
  v4 = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a2 + 544) = 0;
  v5 = (void *)a1[68];
  a1[68] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_OWORD *)(a2 + 120);
  v13 = *(_OWORD *)(a2 + 136);
  v14 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  v15 = *(_OWORD *)(a2 + 184);
  v16 = *(_OWORD *)(a2 + 200);
  v17 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v17;
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 184) = v15;
  v18 = *(_OWORD *)(a2 + 248);
  v19 = *(_OWORD *)(a2 + 280);
  v20 = *(_QWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v19;
  *(_OWORD *)(a1 + 248) = v18;
  v21 = (_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 296) = v20;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  v22 = *(_QWORD **)(a2 + 304);
  if (v22 != (_QWORD *)(a2 + 312))
  {
    v23 = 0;
    v24 = (_QWORD *)(a1 + 312);
    while (1)
    {
      v25 = v22[4];
      v26 = (_QWORD *)(a1 + 312);
      if (v24 == v21)
        goto LABEL_12;
      v27 = v23;
      v28 = (_QWORD *)(a1 + 312);
      if (v23)
      {
        do
        {
          v26 = v27;
          v27 = (_QWORD *)v27[1];
        }
        while (v27);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v28[2];
          v29 = *v26 == (_QWORD)v28;
          v28 = v26;
        }
        while (v29);
      }
      if (v26[4] < v25)
      {
LABEL_12:
        if (v23)
          v30 = (uint64_t **)v26;
        else
          v30 = (uint64_t **)(a1 + 312);
        if (v23)
          v31 = (uint64_t **)(v26 + 1);
        else
          v31 = (uint64_t **)(a1 + 312);
        if (!*v31)
        {
LABEL_28:
          v34 = (uint64_t *)operator new(0xE0uLL);
          v35 = *((_OWORD *)v22 + 2);
          v36 = *((_OWORD *)v22 + 3);
          v37 = *((_OWORD *)v22 + 5);
          *((_OWORD *)v34 + 4) = *((_OWORD *)v22 + 4);
          *((_OWORD *)v34 + 5) = v37;
          *((_OWORD *)v34 + 2) = v35;
          *((_OWORD *)v34 + 3) = v36;
          v38 = *((_OWORD *)v22 + 6);
          v39 = *((_OWORD *)v22 + 7);
          v40 = *((_OWORD *)v22 + 9);
          *((_OWORD *)v34 + 8) = *((_OWORD *)v22 + 8);
          *((_OWORD *)v34 + 9) = v40;
          *((_OWORD *)v34 + 6) = v38;
          *((_OWORD *)v34 + 7) = v39;
          v41 = *((_OWORD *)v22 + 10);
          v42 = *((_OWORD *)v22 + 11);
          v43 = *((_OWORD *)v22 + 13);
          *((_OWORD *)v34 + 12) = *((_OWORD *)v22 + 12);
          *((_OWORD *)v34 + 13) = v43;
          *((_OWORD *)v34 + 10) = v41;
          *((_OWORD *)v34 + 11) = v42;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 304), (uint64_t)v30, v31, v34);
        }
      }
      else
      {
        v31 = (uint64_t **)(a1 + 312);
        v30 = (uint64_t **)(a1 + 312);
        if (!v23)
          goto LABEL_28;
        v32 = v23;
        while (1)
        {
          while (1)
          {
            v30 = (uint64_t **)v32;
            v33 = v32[4];
            if (v33 <= v25)
              break;
            v32 = *v30;
            v31 = v30;
            if (!*v30)
              goto LABEL_28;
          }
          if (v33 >= v25)
            break;
          v32 = v30[1];
          if (!v32)
          {
            v31 = v30 + 1;
            goto LABEL_28;
          }
        }
      }
      v44 = (_QWORD *)v22[1];
      if (v44)
      {
        do
        {
          v45 = v44;
          v44 = (_QWORD *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (_QWORD *)v22[2];
          v29 = *v45 == (_QWORD)v22;
          v22 = v45;
        }
        while (!v29);
      }
      if (v45 == (_QWORD *)(a2 + 312))
        break;
      v23 = (_QWORD *)*v21;
      v24 = *(_QWORD **)(a1 + 304);
      v22 = v45;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 328, a2 + 328);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 368), *(const void **)(a2 + 368), *(_QWORD *)(a2 + 376), (uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 392, a2 + 392);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 432, a2 + 432);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 472, a2 + 472);
  return a1;
}

void sub_1B7CE7CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  v19 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 376) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 200);
  v11 = *(_OWORD *)(a2 + 216);
  v12 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 216) = v11;
  *(_OWORD *)(a1 + 200) = v10;
  v13 = *(_OWORD *)(a2 + 264);
  v14 = *(_OWORD *)(a2 + 280);
  v15 = *(_QWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 296) = v15;
  *(_OWORD *)(a1 + 264) = v13;
  *(_OWORD *)(a1 + 280) = v14;
  v16 = *(_OWORD *)(a2 + 120);
  v17 = *(_OWORD *)(a2 + 136);
  v18 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v18;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 120) = v16;
  v19 = a1 + 312;
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 312));
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v20 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 312) = v20;
  v21 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 320) = v21;
  if (v21)
  {
    *(_QWORD *)(v20 + 16) = v19;
    *(_QWORD *)(a2 + 304) = a2 + 312;
    *(_QWORD *)(a2 + 312) = 0;
    *(_QWORD *)(a2 + 320) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 304) = v19;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 328, (uint64_t *)(a2 + 328));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 368, (__n128 *)(a2 + 368));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 392, (uint64_t *)(a2 + 392));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 432, (uint64_t *)(a2 + 432));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 472, (uint64_t *)(a2 + 472));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  unint64_t v2;
  int8x8_t prime;
  double v5;
  id v6;
  double *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id WeakRetained;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  id v52;
  void *v53;
  char v54;
  float v55;
  _BOOL8 v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  _QWORD **v62;
  unint64_t v63;
  uint8x8_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t v67;
  _QWORD *i;
  unint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _QWORD *v82;
  _QWORD *v83;
  BOOL v84;
  void *v85;
  uint64_t **v86;
  uint64_t *v87;
  void *v88;
  uint64_t v89;
  double v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  double v95;
  double v96;
  void *v97;
  void *v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  void *v102;
  void *v103;
  int v104;
  void *v105;
  void *v106;
  int v107;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  unint64_t v114;
  id v115;
  uint64_t v117;
  id v118;
  id v119;
  void *v120;
  uint64_t v121;
  void *__p[2];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _QWORD v134[3];
  _QWORD *v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = objc_alloc(MEMORY[0x1E0C99D68]);
  v7 = a2 + 5;
  if (v5 != -1.79769313e308)
    v7 = a2;
  v117 = (uint64_t)a2;
  v118 = (id)objc_msgSend(v6, "initWithTimeIntervalSinceReferenceDate:", *v7);
  if (a2[1] == 1.79769313e308)
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v9 = (void *)v8;
  v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = *(id *)(a1 + 16);
    if (objc_msgSend(v11, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v11, "underlyingSampleType");
      v12 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v12;
    }

  }
  v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v10, v118, v9);
  v14 = a1;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    prime = (int8x8_t)(a1 + 48);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v2 = (unint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v16 = *(uint64_t **)(v117 + 368);
      v17 = *(uint64_t **)(v117 + 376);
      while (v16 != v17)
      {
        v18 = *v16;
        v19 = objc_loadWeakRetained(*(id **)&prime);
        objc_msgSend(v19, "sourceForSourceID:", v18);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
        {
          if ((objc_msgSend((id)v2, "containsObject:", v20) & 1) == 0)
            objc_msgSend((id)v2, "addObject:", v20);
        }

        ++v16;
      }
      prime = (int8x8_t)objc_msgSend((id)v2, "copy");
      objc_msgSend((id)v13, "_setSources:", *(_QWORD *)&prime);

      v14 = a1;
    }
  }

  v134[0] = &off_1E6D06610;
  v135 = v134;
  v119 = (id)v13;
  v121 = *(_QWORD *)(v14 + 24);
  v21 = *(_OWORD *)(v117 + 264);
  v22 = *(_OWORD *)(v117 + 280);
  v130 = *(_OWORD *)(v117 + 248);
  v131 = v21;
  v132 = v22;
  v133 = *(_QWORD *)(v117 + 296);
  v23 = *(_OWORD *)(v117 + 200);
  v126 = *(_OWORD *)(v117 + 184);
  v127 = v23;
  v24 = *(_OWORD *)(v117 + 232);
  v128 = *(_OWORD *)(v117 + 216);
  v129 = v24;
  v25 = *(_OWORD *)(v117 + 136);
  *(_OWORD *)__p = *(_OWORD *)(v117 + 120);
  v123 = v25;
  v26 = *(_OWORD *)(v117 + 168);
  v124 = *(_OWORD *)(v117 + 152);
  v125 = v26;
  if (!v135)
    std::__throw_bad_function_call[abi:ne180100]();
  v27 = (*(uint64_t (**)(_QWORD *, void **))(*v135 + 48))(v135, __p);
  v28 = *(double *)(v27 + 8);
  v29 = *(double *)(v27 + 16);
  v30 = *(_QWORD *)(v27 + 32);
  v32 = *(double *)(v27 + 40);
  v31 = *(double *)(v27 + 48);
  v33 = *(double *)(v27 + 56);
  v34 = *(double *)(v27 + 80);
  v35 = *(unsigned __int8 *)(v27 + 112);
  v36 = *(double *)(v27 + 120);
  v37 = *(double *)(v27 + 128);
  v38 = *(_QWORD *)(a1 + 24);
  v39 = _HKStatisticsOptionBaselineRelativeQuantities();
  v40 = *(void **)(a1 + 16);
  if ((v39 & v38) != 0)
    objc_msgSend(v40, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v40, "canonicalUnit");
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v121 & 2) != 0)
  {
    if (v35)
      v36 = v36 + (v34 - v36) * 22.5 / (v37 + 22.5);
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v120, v36);
    v13 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v119, "setAverageQuantity:", v13);

  }
  if ((v121 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v120, v29);
    v13 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v119, "setMinimumQuantity:", v13);

  }
  if ((v121 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v120, v28);
    v13 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v119, "setMaximumQuantity:", v13);

  }
  if ((v121 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v120, v32);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v119, "setMostRecentQuantity:", v41);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v31, v33);
    v13 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v119, "setMostRecentQuantityDateInterval:", v13);

  }
  objc_msgSend(v119, "setDataCount:", v30);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_168;
  if ((v121 & 2) != 0)
    v113 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v113 = 0;
  if ((v121 & 4) != 0)
    v112 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v112 = 0;
  if ((v121 & 8) != 0)
    v110 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v110 = 0;
  if ((v121 & 0x20) != 0)
  {
    v109 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v111 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v111 = 0;
    v109 = 0;
  }
  v115 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)__p = 0u;
  v123 = 0u;
  LODWORD(v124) = 1065353216;
  v42 = *(_QWORD **)(v117 + 304);
  if (v42 == (_QWORD *)(v117 + 312))
    goto LABEL_159;
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(v117, v42[4]);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = v43;
    if (!v43)
      goto LABEL_123;
    v45 = objc_msgSend(v43, "hash");
    v46 = v45;
    v47 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_66;
    v48 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v48.i16[0] = vaddlv_u8(v48);
    v49 = v48.u32[0];
    if (v48.u32[0] > 1uLL)
    {
      v2 = v45;
      if ((void *)v45 >= __p[1])
        v2 = v45 % (unint64_t)__p[1];
    }
    else
    {
      v2 = ((unint64_t)__p[1] - 1) & v45;
    }
    v50 = (uint64_t *)*((_QWORD *)__p[0] + v2);
    if (!v50 || (v13 = *v50) == 0)
    {
LABEL_66:
      v13 = (uint64_t)operator new(0xD0uLL);
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = v46;
      *(_QWORD *)(v13 + 16) = v44;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 152) = 0u;
      *(_OWORD *)(v13 + 168) = 0u;
      *(_OWORD *)(v13 + 184) = 0u;
      *(_QWORD *)(v13 + 200) = 0;
      v55 = (float)(unint64_t)(*((_QWORD *)&v123 + 1) + 1);
      if (v47 && (float)(*(float *)&v124 * (float)v47) >= v55)
      {
LABEL_112:
        v70 = __p[0];
        v71 = (uint64_t *)*((_QWORD *)__p[0] + v2);
        if (v71)
        {
          *(_QWORD *)v13 = *v71;
        }
        else
        {
          *(_QWORD *)v13 = v123;
          *(_QWORD *)&v123 = v13;
          v70[v2] = &v123;
          if (!*(_QWORD *)v13)
          {
LABEL_121:
            ++*((_QWORD *)&v123 + 1);
            goto LABEL_122;
          }
          v72 = *(_QWORD *)(*(_QWORD *)v13 + 8);
          if ((v47 & (v47 - 1)) != 0)
          {
            if (v72 >= v47)
              v72 %= v47;
          }
          else
          {
            v72 &= v47 - 1;
          }
          v71 = (uint64_t *)((char *)__p[0] + 8 * v72);
        }
        *v71 = v13;
        goto LABEL_121;
      }
      v56 = (v47 & (v47 - 1)) != 0;
      if (v47 < 3)
        v56 = 1;
      v57 = v56 | (2 * v47);
      v58 = vcvtps_u32_f32(v55 / *(float *)&v124);
      if (v57 <= v58)
        prime = (int8x8_t)v58;
      else
        prime = (int8x8_t)v57;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v47 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_78;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v65 = vcvtps_u32_f32((float)*((unint64_t *)&v123 + 1) / *(float *)&v124);
        if (__p[1] < (void *)3
          || (v66 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
        {
          v65 = std::__next_prime(v65);
        }
        else
        {
          v67 = 1 << -(char)__clz(v65 - 1);
          if (v65 >= 2)
            v65 = v67;
        }
        if (*(_QWORD *)&prime <= v65)
          prime = (int8x8_t)v65;
        if (*(_QWORD *)&prime >= v47)
        {
          v47 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_78:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v59 = operator new(8 * *(_QWORD *)&prime);
            v60 = __p[0];
            __p[0] = v59;
            if (v60)
              operator delete(v60);
            v61 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v61++) = 0;
            while (*(_QWORD *)&prime != v61);
            v62 = (_QWORD **)v123;
            if ((_QWORD)v123)
            {
              v63 = *(_QWORD *)(v123 + 8);
              v64 = (uint8x8_t)vcnt_s8(prime);
              v64.i16[0] = vaddlv_u8(v64);
              if (v64.u32[0] > 1uLL)
              {
                if (v63 >= *(_QWORD *)&prime)
                  v63 %= *(_QWORD *)&prime;
              }
              else
              {
                v63 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v63) = &v123;
              for (i = *v62; i; v63 = v69)
              {
                v69 = i[1];
                if (v64.u32[0] > 1uLL)
                {
                  if (v69 >= *(_QWORD *)&prime)
                    v69 %= *(_QWORD *)&prime;
                }
                else
                {
                  v69 &= *(_QWORD *)&prime - 1;
                }
                if (v69 != v63)
                {
                  if (!*((_QWORD *)__p[0] + v69))
                  {
                    *((_QWORD *)__p[0] + v69) = v62;
                    goto LABEL_103;
                  }
                  *v62 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v69);
                  **((_QWORD **)__p[0] + v69) = i;
                  i = v62;
                }
                v69 = v63;
LABEL_103:
                v62 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v47 = (unint64_t)prime;
            goto LABEL_107;
          }
          v85 = __p[0];
          __p[0] = 0;
          if (v85)
            operator delete(v85);
          v47 = 0;
          __p[1] = 0;
        }
      }
LABEL_107:
      if ((v47 & (v47 - 1)) != 0)
      {
        if (v46 >= v47)
          v2 = v46 % v47;
        else
          v2 = v46;
      }
      else
      {
        v2 = (v47 - 1) & v46;
      }
      goto LABEL_112;
    }
    v114 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v51 = *(_QWORD *)(v13 + 8);
      if (v51 == v46)
        break;
      if (v49 > 1)
      {
        if (v51 >= v47)
          v51 %= v47;
      }
      else
      {
        v51 &= v114;
      }
      if (v51 != v2)
        goto LABEL_66;
LABEL_65:
      v13 = *(_QWORD *)v13;
      if (!v13)
        goto LABEL_66;
    }
    prime = (int8x8_t)*(id *)(v13 + 16);
    v52 = v44;
    v53 = v52;
    if ((id)prime != v52)
    {
      v54 = objc_msgSend(*(id *)&prime, "isEqualToString:", v52);

      if ((v54 & 1) != 0)
        goto LABEL_122;
      goto LABEL_65;
    }

LABEL_122:
    v73 = *(_OWORD *)(v42 + 5);
    v74 = *(_OWORD *)(v42 + 7);
    v75 = *(_OWORD *)(v42 + 9);
    *(_OWORD *)(v13 + 72) = *(_OWORD *)(v42 + 11);
    *(_OWORD *)(v13 + 56) = v75;
    *(_OWORD *)(v13 + 40) = v74;
    *(_OWORD *)(v13 + 24) = v73;
    v76 = *(_OWORD *)(v42 + 13);
    v77 = *(_OWORD *)(v42 + 15);
    v78 = *(_OWORD *)(v42 + 17);
    *(_OWORD *)(v13 + 136) = *(_OWORD *)(v42 + 19);
    *(_OWORD *)(v13 + 120) = v78;
    *(_OWORD *)(v13 + 104) = v77;
    *(_OWORD *)(v13 + 88) = v76;
    v79 = *(_OWORD *)(v42 + 21);
    v80 = *(_OWORD *)(v42 + 23);
    v81 = *(_OWORD *)(v42 + 25);
    *(_QWORD *)(v13 + 200) = v42[27];
    *(_OWORD *)(v13 + 184) = v81;
    *(_OWORD *)(v13 + 168) = v80;
    *(_OWORD *)(v13 + 152) = v79;

LABEL_123:
    v82 = (_QWORD *)v42[1];
    if (v82)
    {
      do
      {
        v83 = v82;
        v82 = (_QWORD *)*v82;
      }
      while (v82);
    }
    else
    {
      do
      {
        v83 = (_QWORD *)v42[2];
        v84 = *v83 == (_QWORD)v42;
        v42 = v83;
      }
      while (!v84);
    }
    v42 = v83;
  }
  while (v83 != (_QWORD *)(v117 + 312));
  v86 = (uint64_t **)v123;
  if ((_QWORD)v123)
  {
    prime = (int8x8_t)0x1E0CB6000uLL;
    do
    {
      v87 = v86[2];
      if ((v121 & 2) != 0)
      {
        if (!v135)
          goto LABEL_189;
        v88 = (void *)MEMORY[0x1E0CB6A28];
        v89 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v135 + 48))(v135, (uint64_t *)v86 + 3);
        if (*(_BYTE *)(v89 + 112))
          v90 = *(double *)(v89 + 120)
              + (*(double *)(v89 + 80) - *(double *)(v89 + 120)) * 22.5 / (*(double *)(v89 + 128) + 22.5);
        else
          v90 = *(double *)(v89 + 120);
        objc_msgSend(v88, "quantityWithUnit:doubleValue:", v120, v90);
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v113, "setObject:forKeyedSubscript:", v91, v87);

      }
      if ((v121 & 4) != 0)
      {
        if (!v135)
          goto LABEL_189;
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v120, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v135 + 48))(v135, (uint64_t *)v86 + 3) + 16));
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v112, "setObject:forKeyedSubscript:", v92, v87);

      }
      if ((v121 & 8) != 0)
      {
        if (!v135)
          goto LABEL_189;
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v120, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v135 + 48))(v135, (uint64_t *)v86 + 3) + 8));
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v110, "setObject:forKeyedSubscript:", v93, v87);

      }
      if ((v121 & 0x20) != 0)
      {
        if (!v135)
          std::__throw_bad_function_call[abi:ne180100]();
        v94 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v135 + 48))(v135, (uint64_t *)v86 + 3);
        v95 = *(double *)(v94 + 48);
        v96 = *(double *)(v94 + 56);
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v120, *(double *)(v94 + 40));
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v109, "setObject:forKeyedSubscript:", v97, v87);

        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v95, v96);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v111, "setObject:forKeyedSubscript:", v98, v87);

      }
      if (!v135)
LABEL_189:
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v135 + 48))(v135, (uint64_t *)v86 + 3) + 32));
      v13 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v115, "setObject:forKeyedSubscript:", v13, v87);

      v86 = (uint64_t **)*v86;
    }
    while (v86);
  }
LABEL_159:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  if ((v121 & 2) != 0)
    objc_msgSend(v119, "setAverageQuantityBySource:", v113);
  if ((v121 & 4) != 0)
    objc_msgSend(v119, "setMinimumQuantityBySource:", v112);
  if ((v121 & 8) != 0)
    objc_msgSend(v119, "setMaximumQuantityBySource:", v110);
  if ((v121 & 0x20) != 0)
  {
    objc_msgSend(v119, "setMostRecentQuantityBySource:", v109);
    objc_msgSend(v119, "setMostRecentQuantityDateIntervalBySource:", v111);
  }
  objc_msgSend(v119, "setDataCountBySource:", v115);

LABEL_168:
  v99 = v135;
  if (v135 == v134)
  {
    v100 = 4;
    v99 = v134;
LABEL_172:
    (*(void (**)(void))(*v99 + 8 * v100))();
  }
  else if (v135)
  {
    v100 = 5;
    goto LABEL_172;
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v119, "averageQuantity");
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  if (v102)
  {
    objc_msgSend(v119, "averageQuantity");
    v13 = objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend((id)v13, "isCompatibleWithUnit:", v101) & 1) == 0)
    {

      goto LABEL_187;
    }
  }
  objc_msgSend(v119, "minimumQuantity");
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  if (v103)
  {
    objc_msgSend(v119, "minimumQuantity");
    prime = (int8x8_t)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(*(id *)&prime, "isCompatibleWithUnit:", v101))
    {
      v104 = 1;
      goto LABEL_181;
    }
  }
  objc_msgSend(v119, "maximumQuantity");
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  if (v105)
  {
    objc_msgSend(v119, "maximumQuantity");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = objc_msgSend(v106, "isCompatibleWithUnit:", v101);

    v104 = v107 ^ 1;
    if (v103)
      goto LABEL_181;
LABEL_185:
    if (!v102)
      goto LABEL_186;
LABEL_182:

    if ((v104 & 1) == 0)
      goto LABEL_188;
LABEL_187:
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v101);
    goto LABEL_188;
  }
  v104 = 0;
  if (!v103)
    goto LABEL_185;
LABEL_181:

  if (v102)
    goto LABEL_182;
LABEL_186:

  if (v104)
    goto LABEL_187;
LABEL_188:

  return v119;
}

void sub_1B7CE8D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 168);
  if (v25 == (_QWORD *)(v23 - 192))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 192);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 352);
  v2 = *(_QWORD *)(a1 + 368);
  if (v1 != (*(_QWORD *)(a1 + 376) - v2) >> 3)
  {
    v4 = (void **)(a1 + 368);
    *(_QWORD *)(a1 + 376) = v2;
    std::vector<long long>::reserve((void **)(a1 + 368), v1);
    v5 = *(_QWORD **)(a1 + 344);
    if (v5)
    {
      v6 = *(char **)(a1 + 376);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 384);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 368);
            v6 = *(char **)(a1 + 376);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 368) = v16;
          *(_QWORD *)(a1 + 376) = v9;
          *(_QWORD *)(a1 + 384) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 376) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7CE91A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  id WeakRetained;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  __int128 *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  double v51;
  int v52;
  int v53;
  unint64_t v54;
  __int128 *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  __int128 *v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  __int128 *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  void *v77;
  unint64_t v78;
  uint64_t **v79;
  BOOL v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  BOOL v95;
  int v96;
  int v97;
  uint64_t *v98;
  int v99;
  uint64_t v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  unint64_t v104;
  uint64_t **v105;
  __int128 v106;
  char *v107;
  double v108;
  void *v109;
  void *v110;
  _QWORD *v111;
  id *location;
  __int128 *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  double **v117;
  char v118;
  char v119;
  uint64_t v120;
  void **v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int16 v128;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v121 = (void **)(a1 + 96);
    v117 = (double **)(a1 + 64);
    v115 = a1 + 120;
    location = (id *)(a1 + 88);
    v111 = (_QWORD *)(a1 + 312);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_127:
      *(double *)(a1 + 56) = a2;
LABEL_128:
      v108 = *(double *)(a1 + 56);
      if (v108 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>]");
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v109, "handleFailureInFunction:file:lineNumber:description:", v110, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v108 = *(double *)(a1 + 56);
      }
      v5 = v108;
      if (v108 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v17 = a2;
      v18 = a2;
      v19 = v5;
      v20 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v21 = *(double *)(v20 + 8);
          v22 = *(double *)(v20 + 16);
          if (v21 > v19 && v21 < v18)
            v18 = *(double *)(v20 + 8);
          if (v22 > v5)
            v24 = *(double *)(v20 + 16);
          else
            v24 = v17;
          if (v22 < v17)
          {
            v19 = v5;
            v17 = v24;
          }
          v20 += 48;
        }
        while ((__int128 *)v20 != v7);
      }
      if (v17 >= v18)
        v25 = v18;
      else
        v25 = v17;
      v26 = *(double *)(a1 + 16);
      if (v26 > 0.0)
      {
        v27 = v26 * floor(v25 / v26);
        v28 = v26 * floor((v26 + v5) / v26);
        if (v27 >= v28)
          v25 = v27;
        else
          v25 = v28;
      }
      *v121 = 0;
      v121[1] = 0;
      v121[2] = 0;
      v113 = (__int128 *)v6;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        v32 = *(char **)(a1 + 96);
        v31 = *(char **)(a1 + 104);
        v33 = v29;
        if (v31 != v32)
        {
          do
          {
            v34 = *((_OWORD *)v31 - 3);
            v35 = *((_OWORD *)v31 - 2);
            *(_OWORD *)(v33 - 21) = *(_OWORD *)(v31 - 21);
            *((_OWORD *)v33 - 3) = v34;
            *((_OWORD *)v33 - 2) = v35;
            v33 -= 48;
            v31 -= 48;
          }
          while (v31 != v32);
          v31 = (char *)*v121;
        }
        *(_QWORD *)(a1 + 96) = v33;
        *(_QWORD *)(a1 + 104) = v29;
        *(_QWORD *)(a1 + 112) = &v29[48 * v30];
        if (v31)
          operator delete(v31);
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v123 = a1;
        v37 = 126 - 2 * __clz(v8);
        v38 = (uint64_t)v113;
        if (v113 == v7)
          v39 = 0;
        else
          v39 = v37;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*,false>((uint64_t)v113, v7, (uint64_t)&v123, v39, 1);
      }
      else
      {
        v42 = 126 - 2 * __clz(v8);
        v38 = (uint64_t)v113;
        if (v113 == v7)
          v39 = 0;
        else
          v39 = v42;
      }
      std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*,false>(v38, v7, v39, 1);
      if (*(_BYTE *)(a1 + 25))
        v114 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v114 = 0;
      if (v113 == v7)
      {
LABEL_109:
        v92 = *(_QWORD **)(a1 + 304);
        if (v92 != v111)
        {
          do
          {
            v93 = (_QWORD *)v92[1];
            if (v93)
            {
              do
              {
                v94 = v93;
                v93 = (_QWORD *)*v93;
              }
              while (v93);
            }
            else
            {
              do
              {
                v94 = (_QWORD *)v92[2];
                v95 = *v94 == (_QWORD)v92;
                v92 = v94;
              }
              while (!v95);
            }
            v92 = v94;
          }
          while (v94 != v111);
        }
        *(double *)(a1 + 56) = v25;

        if (v113)
          operator delete(v113);
        goto LABEL_128;
      }
      v116 = 0;
      v43 = 0;
      v44 = v113;
      while (2)
      {
        v45 = v44[1];
        v123 = *v44;
        v124 = v45;
        v125 = *((_QWORD *)v44 + 4);
        v46 = v123;
        v47 = v45;
        if (*(double *)&v45 - *((double *)&v123 + 1) - (v25 - *((double *)&v123 + 1)) < 0.01)
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
          v51 = 0.0;
          v47 = 0;
          if (!(_BYTE)v125)
            goto LABEL_62;
LABEL_57:
          v119 = v50;
          v120 = v48;
          HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
          v52 = *((unsigned __int8 *)v44 + 42);
          v53 = *((unsigned __int8 *)v44 + 41);
          v118 = *((_BYTE *)v44 + 40);
          if (!(_BYTE)v125)
            goto LABEL_90;
          if ((v43 & 1) != 0)
          {
            v54 = *((_QWORD *)&v124 + 1);
            if (v116 == *((_QWORD *)&v124 + 1) || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(v115, (double *)&v123, v52 == 0);
              v52 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(v115, (double *)&v123, v52 == 0);
            v52 = 1;
            v54 = *((_QWORD *)&v124 + 1);
            v116 = *((_QWORD *)&v124 + 1);
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_89;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(a1, v54);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v65)
            goto LABEL_88;
          objc_msgSend(v114, "objectForKeyedSubscript:", v65);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = v66;
          if (v66)
          {
            if (objc_msgSend(v66, "longLongValue") != v54 && !*(_BYTE *)(a1 + 24))
            {
LABEL_87:

LABEL_88:
LABEL_89:
              v43 = 1;
LABEL_90:
              if (v49)
              {
                v80 = v52 != 0;
                v82 = *(char **)(a1 + 104);
                v81 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v82 < v81)
                {
                  *(_QWORD *)v82 = v46;
                  *((double *)v82 + 1) = v51;
                  *((_QWORD *)v82 + 2) = v47;
                  *((_QWORD *)v82 + 3) = v120;
                  v82[32] = v49;
                  v82[33] = v119;
                  v82[40] = v118;
                  v82[41] = v53;
                  v59 = v82 + 48;
                  v82[42] = v80;
                  goto LABEL_107;
                }
                v76 = (char *)*v121;
                v83 = 0xAAAAAAAAAAAAAAABLL * ((v82 - (_BYTE *)*v121) >> 4);
                v84 = v83 + 1;
                if (v83 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (_QWORD)v76) >> 4);
                if (2 * v85 > v84)
                  v84 = 2 * v85;
                if (v85 >= 0x2AAAAAAAAAAAAAALL)
                  v86 = 0x555555555555555;
                else
                  v86 = v84;
                if (v86)
                {
                  v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v86);
                  v76 = *(char **)(a1 + 96);
                  v82 = *(char **)(a1 + 104);
                }
                else
                {
                  v87 = 0;
                }
                v88 = v86 + 48 * v83;
                *(_QWORD *)v88 = v46;
                *(double *)(v88 + 8) = v51;
                *(_QWORD *)(v88 + 16) = v47;
                *(_QWORD *)(v88 + 24) = v120;
                *(_BYTE *)(v88 + 32) = v49;
                *(_BYTE *)(v88 + 33) = v119;
                *(_BYTE *)(v88 + 40) = v118;
                *(_BYTE *)(v88 + 41) = v53;
                *(_BYTE *)(v88 + 42) = v80;
                v89 = v88;
                if (v82 != v76)
                {
                  do
                  {
                    v90 = *((_OWORD *)v82 - 3);
                    v91 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)(v89 - 21) = *(_OWORD *)(v82 - 21);
                    *(_OWORD *)(v89 - 48) = v90;
                    *(_OWORD *)(v89 - 32) = v91;
                    v89 -= 48;
                    v82 -= 48;
                  }
                  while (v82 != v76);
                  v76 = (char *)*v121;
                }
                v59 = (_OWORD *)(v88 + 48);
                *(_QWORD *)(a1 + 96) = v89;
                *(_QWORD *)(a1 + 104) = v88 + 48;
                *(_QWORD *)(a1 + 112) = v86 + 48 * v87;
                if (v76)
LABEL_106:
                  operator delete(v76);
                goto LABEL_107;
              }
              goto LABEL_108;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v54);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v114, "setObject:forKeyedSubscript:", v77, v65);

          }
          v78 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(a1, v54);
          v79 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsForSource(a1, v78);
          HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample((uint64_t)v79, (double *)&v123, v53 == 0);
          LOBYTE(v53) = 1;
          goto LABEL_87;
        }
        if (v25 - *((double *)&v123 + 1) < 0.01)
        {
          LOBYTE(v125) = 0;
          goto LABEL_62;
        }
        v48 = *((_QWORD *)&v124 + 1);
        v50 = BYTE1(v125);
        *(double *)&v124 = v25;
        v51 = v25;
        v49 = v125;
        if ((_BYTE)v125)
          goto LABEL_57;
LABEL_62:
        v55 = *(__int128 **)(a1 + 104);
        v56 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v55 < v56)
        {
          v57 = *v44;
          v58 = v44[2];
          v55[1] = v44[1];
          v55[2] = v58;
          *v55 = v57;
          v59 = v55 + 3;
          goto LABEL_107;
        }
        v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (_BYTE *)*v121) >> 4);
        v61 = v60 + 1;
        if (v60 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (_QWORD)*v121) >> 4);
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0x2AAAAAAAAAAAAAALL)
          v63 = 0x555555555555555;
        else
          v63 = v61;
        if (v63)
          v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v63);
        else
          v64 = 0;
        v68 = (__int128 *)(v63 + 48 * v60);
        v69 = *v44;
        v70 = v44[2];
        v68[1] = v44[1];
        v68[2] = v70;
        *v68 = v69;
        v72 = *(char **)(a1 + 96);
        v71 = *(char **)(a1 + 104);
        v73 = v68;
        if (v71 != v72)
        {
          do
          {
            v74 = *((_OWORD *)v71 - 3);
            v75 = *((_OWORD *)v71 - 2);
            *(__int128 *)((char *)v73 - 21) = *(_OWORD *)(v71 - 21);
            *(v73 - 3) = v74;
            *(v73 - 2) = v75;
            v73 -= 3;
            v71 -= 48;
          }
          while (v71 != v72);
          v71 = (char *)*v121;
        }
        v59 = v68 + 3;
        *(_QWORD *)(a1 + 96) = v73;
        *(_QWORD *)(a1 + 104) = v68 + 3;
        *(_QWORD *)(a1 + 112) = v63 + 48 * v64;
        if (v71)
        {
          v76 = v71;
          goto LABEL_106;
        }
LABEL_107:
        *(_QWORD *)(a1 + 104) = v59;
LABEL_108:
        v44 += 3;
        if (v44 == v7)
          goto LABEL_109;
        continue;
      }
    }
    v9 = *(double *)(v6 + 8);
    v10 = *(double *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 24);
    v12 = *(_BYTE *)(v6 + 32);
    v13 = *(_BYTE *)(v6 + 33);
    if (a2 - v9 >= 0.01)
    {
      if (v10 - v9 - (a2 - v9) < 0.01)
      {
        v40 = 0;
        v41 = 0;
        v16 = 0.0;
        v15 = *(double *)(v6 + 16);
        v14 = *(_BYTE *)(v6 + 32);
        v10 = 0.0;
        v12 = 0;
LABEL_120:
        v96 = *(unsigned __int8 *)(v6 + 42);
        v97 = *(unsigned __int8 *)(v6 + 41);
        v98 = *(uint64_t **)(a1 + 96);
        v99 = *(unsigned __int8 *)(v6 + 40);
        v100 = *v98;
        *((double *)&v123 + 1) = v9;
        *(double *)&v124 = v15;
        *((_QWORD *)&v124 + 1) = v11;
        LOBYTE(v125) = v14;
        BYTE1(v125) = v13;
        *(_DWORD *)((char *)&v125 + 2) = *(_DWORD *)((char *)v98 + 34);
        HIWORD(v125) = *((_WORD *)v98 + 19);
        *((double *)&v126 + 1) = v16;
        *(double *)&v127 = v10;
        *((_QWORD *)&v127 + 1) = v40;
        LOBYTE(v128) = v12;
        HIBYTE(v128) = v41;
        *(_QWORD *)&v123 = v100;
        *(_QWORD *)&v126 = v100;
        HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
        v101 = v99 != 0;
        v102 = v97 != 0;
        v103 = v96 != 0;
        if ((_BYTE)v125)
        {
          HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(v115, (double *)&v123, v96 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v104 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v124 + 1));
            v105 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsForSource(a1, v104);
            HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample((uint64_t)v105, (double *)&v123, v97 == 0);
          }
          v101 = 1;
          v102 = 1;
          v103 = 1;
        }
        if ((_BYTE)v128)
        {
          LOWORD(v122) = v128;
          v106 = v127;
          v107 = (char *)*v121;
          *(_OWORD *)v107 = v126;
          *((_OWORD *)v107 + 1) = v106;
          *((_QWORD *)v107 + 4) = v122;
          v107[40] = v101;
          v107[41] = v102;
          v107[42] = v103;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_127;
      }
      v15 = a2;
      v14 = *(_BYTE *)(v6 + 32);
      v16 = a2;
    }
    else
    {
      v14 = 0;
      v15 = *(double *)(v6 + 16);
      v16 = *(double *)(v6 + 8);
    }
    v40 = *(_QWORD *)(v6 + 24);
    v41 = *(_BYTE *)(v6 + 33);
    goto LABEL_120;
  }
}

void sub_1B7CE9AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(uint64_t result, double *a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;

  v3 = 2 * (*a2 != -1.79769313e308);
  if (*a2 == 1.79769313e308)
    v3 = 1;
  if (v3)
  {
    if (v3 == 1)
    {
      if (!*(_DWORD *)result)
      {
        v5 = 1;
        goto LABEL_16;
      }
    }
    else if (v3 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        v4 = result + 8;
        a3 = 1;
        return HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v4, a2, a3);
      }
      v5 = 2;
LABEL_16:
      *(_DWORD *)result = v5;
      *(_OWORD *)(result + 72) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 24) = 0u;
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 104) = 0u;
      *(_OWORD *)(result + 120) = 0u;
      *(_QWORD *)(result + 136) = 0;
      *(_OWORD *)(result + 8) = 0u;
      *(_WORD *)(result + 80) = *(_WORD *)(result + 176);
      v6 = *(_OWORD *)(result + 160);
      *(_OWORD *)(result + 48) = *(_OWORD *)(result + 144);
      *(_OWORD *)(result + 64) = v6;
      v4 = result + 8;
      return HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v4, a2, a3);
    }
  }
  else if (!*(_DWORD *)result && !*(_QWORD *)(result + 40))
  {
    v4 = result + 8;
    return HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v4, a2, a3);
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 312);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 312);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 312) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 304);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 304), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 392), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 432);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7CE9D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 472);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7CE9E68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0xE0uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *((_QWORD *)v9 + 27) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 368);
  v7 = *(char **)(*(_QWORD *)a4 + 376);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 368);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 368);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 376);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 368);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 376);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 368);
      v15 = *(char **)(*(_QWORD *)a4 + 376);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 376);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 376);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 368);
          v25 = *(char **)(*(_QWORD *)a4 + 376);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 376);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 376);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 368);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 368);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 376);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 368);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 376);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 368);
      v41 = *(char **)(*(_QWORD *)a4 + 376);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 376);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 376);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 368);
      v11 = *(char **)(*(_QWORD *)a3 + 376);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 376);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 376);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 368);
      v24 = *(char **)(*(_QWORD *)a3 + 376);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 376);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 376);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 368);
            v31 = *(char **)(*(_QWORD *)a3 + 376);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 376);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 376);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 368);
    v14 = *(char **)(*(_QWORD *)a5 + 376);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 376);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 376);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 368);
        v23 = *(char **)(*(_QWORD *)a5 + 376);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 376);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 376);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 368);
            v32 = *(char **)(*(_QWORD *)a5 + 376);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 376);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 376);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 368);
    v16 = *(char **)(*(_QWORD *)a6 + 376);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 376);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 376);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 368);
        v25 = *(char **)(*(_QWORD *)a6 + 376);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 376);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 376);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 368);
            v34 = *(char **)(*(_QWORD *)a6 + 376);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 376);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 376);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 368);
                v43 = *(char **)(*(_QWORD *)a6 + 376);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 376);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 376);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D06610;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D06610;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 664))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 664))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7CEC960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 640);
      v7 = *(_QWORD *)(a1 + 632);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7CECB68(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  int v12;
  char v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  double v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  int8x16_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  uint64_t **v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  double v62;
  double v63;
  unint64_t v64;
  char v65;

  v5 = a1 + 8;
  v6 = *(double *)(a1 + 8);
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = v10;
  v13 = v11;
  v14 = (unint64_t)v9;
  v15 = v8;
  v16 = v7;
  if (v6 - v7 >= 0.01)
  {
    if (v8 - v7 - (v6 - v7) >= 0.01)
    {
      v12 = *(unsigned __int8 *)(a2 + 32);
      v13 = *(_BYTE *)(a2 + 33);
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(double *)(a2 + 16);
      v16 = *(double *)(a1 + 8);
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      v16 = 0.0;
    }
  }
  v17 = *(uint64_t **)a2;
  v18 = *(double *)(a1 + 16);
  v19 = v18 - v16;
  v20 = v15 - v16 - (v18 - v16);
  if (*(_DWORD *)(a1 + 36))
  {
    if (v19 >= 0.01)
    {
      if (v20 >= 0.01)
      {
LABEL_27:
        v22 = v15;
        v64 = v14;
        v21 = v12;
        v65 = v13;
        v15 = *(double *)(a1 + 16);
        if (!v12)
          goto LABEL_28;
        goto LABEL_11;
      }
LABEL_10:
      v64 = 0;
      v21 = 0;
      v65 = 0;
      v18 = 0.0;
      v22 = 0.0;
      if (!v12)
      {
LABEL_28:
        v13 = v65;
        goto LABEL_59;
      }
LABEL_11:
      v62 = v16;
      v63 = v15;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 336, v14, v14);
      v23 = *(_QWORD *)(a1 + 112);
      if (v23 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 168) <= 0)
      {
        v28.f64[1] = *(float64_t *)(a1 + 16);
        v24 = v62;
        v25 = v63;
        v28.f64[0] = v62;
        v29.f64[0] = *(float64_t *)(a1 + 8);
        v29.f64[1] = v63;
        v30 = (int8x16_t)vcgtq_f64(v29, v28);
        v29.f64[0] = v62;
        *(int8x16_t *)(a1 + 48) = vbslq_s8(v30, *(int8x16_t *)(a1 + 8), (int8x16_t)v29);
        if (!a3)
        {
LABEL_30:
          v31 = *(_QWORD *)(a1 + 120);
          if (v23 >= v31)
          {
            v33 = *(_QWORD *)(a1 + 104);
            v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v33) >> 4);
            v35 = v34 + 1;
            if (v34 + 1 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v33) >> 4);
            if (2 * v36 > v35)
              v35 = 2 * v36;
            if (v36 >= 0x2AAAAAAAAAAAAAALL)
              v37 = 0x555555555555555;
            else
              v37 = v35;
            if (v37)
            {
              v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v37);
              v24 = v62;
              v25 = v63;
            }
            else
            {
              v38 = 0;
            }
            v39 = v37 + 48 * v34;
            v40 = v37 + 48 * v38;
            *(_QWORD *)v39 = v17;
            *(double *)(v39 + 8) = v24;
            *(double *)(v39 + 16) = v25;
            *(_QWORD *)(v39 + 24) = v14;
            *(_BYTE *)(v39 + 32) = v12;
            *(_BYTE *)(v39 + 33) = v13;
            *(_WORD *)(v39 + 40) = 0;
            *(_BYTE *)(v39 + 42) = 0;
            v32 = v39 + 48;
            v42 = *(char **)(a1 + 104);
            v41 = *(char **)(a1 + 112);
            if (v41 == v42)
            {
              v13 = v65;
            }
            else
            {
              v13 = v65;
              do
              {
                v43 = *((_OWORD *)v41 - 3);
                v44 = *((_OWORD *)v41 - 2);
                *(_OWORD *)(v39 - 21) = *(_OWORD *)(v41 - 21);
                *(_OWORD *)(v39 - 48) = v43;
                *(_OWORD *)(v39 - 32) = v44;
                v39 -= 48;
                v41 -= 48;
              }
              while (v41 != v42);
              v41 = *(char **)(a1 + 104);
            }
            *(_QWORD *)(a1 + 104) = v39;
            *(_QWORD *)(a1 + 112) = v32;
            *(_QWORD *)(a1 + 120) = v40;
            if (v41)
              operator delete(v41);
          }
          else
          {
            *(_QWORD *)v23 = v17;
            *(double *)(v23 + 8) = v24;
            *(double *)(v23 + 16) = v25;
            *(_QWORD *)(v23 + 24) = v14;
            *(_BYTE *)(v23 + 32) = v12;
            *(_BYTE *)(v23 + 33) = v13;
            *(_WORD *)(v23 + 40) = 0;
            v32 = v23 + 48;
            *(_BYTE *)(v23 + 42) = 0;
            v13 = v65;
          }
          *(_QWORD *)(a1 + 112) = v32;
          if (!*(_BYTE *)(a1 + 304) || *(double *)(a1 + 280) <= v7)
          {
            *(_QWORD *)(a1 + 272) = v17;
            *(double *)(a1 + 280) = v7;
            *(double *)(a1 + 288) = v8;
            *(_QWORD *)(a1 + 296) = v9;
            *(_BYTE *)(a1 + 304) = v10;
            *(_BYTE *)(a1 + 305) = v11;
            if (!*(_BYTE *)(a1 + 208) || *(double *)(a1 + 184) <= v7)
            {
              *(_QWORD *)(a1 + 176) = v17;
              *(double *)(a1 + 184) = v7;
              *(double *)(a1 + 192) = v8;
              *(_QWORD *)(a1 + 200) = v9;
              *(_BYTE *)(a1 + 208) = v10;
              *(_BYTE *)(a1 + 209) = v11;
            }
          }
          if (*(_BYTE *)(a1 + 33))
          {
            v45 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_canonicalSourceIDForSourceID(v5, v14);
            v46 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsForSource(v5, v45);
            if (!*((_BYTE *)v46 + 176) || *((double *)v46 + 19) <= v7)
            {
              v46[18] = v17;
              *((double *)v46 + 19) = v7;
              *((double *)v46 + 20) = v8;
              v46[21] = v9;
              *((_BYTE *)v46 + 176) = v10;
              *((_BYTE *)v46 + 177) = v11;
              if (!*((_BYTE *)v46 + 80) || *((double *)v46 + 7) <= v7)
              {
                v46[6] = v17;
                *((double *)v46 + 7) = v7;
                *((double *)v46 + 8) = v8;
                v46[9] = v9;
                *((_BYTE *)v46 + 80) = v10;
                *((_BYTE *)v46 + 81) = v11;
              }
            }
          }
LABEL_59:
          v14 = v64;
          if (!v21)
            return;
          goto LABEL_60;
        }
      }
      else
      {
        v24 = v62;
        v25 = v63;
        if (v62 < *(double *)(a1 + 48))
        {
          v26 = *(double *)(a1 + 8);
          if (v62 >= v26)
            v26 = v62;
          *(double *)(a1 + 48) = v26;
        }
        if (v63 > *(double *)(a1 + 56))
        {
          v27 = *(double *)(a1 + 16);
          if (v27 >= v63)
            v27 = v63;
          *(double *)(a1 + 56) = v27;
        }
        if (!a3)
          goto LABEL_30;
      }
      if (v24 < *(double *)(a1 + 16))
      {
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime(v5, v24);
        v24 = v62;
        v25 = v63;
        v23 = *(_QWORD *)(a1 + 112);
      }
      goto LABEL_30;
    }
  }
  else
  {
    if (v20 < 0.01)
      goto LABEL_10;
    if (v19 >= 0.01)
      goto LABEL_27;
  }
  LOBYTE(v21) = v12;
  v22 = v15;
  v18 = v16;
  if (!v12)
    return;
LABEL_60:
  v47 = *(_QWORD *)(a1 + 528);
  v48 = *(_QWORD *)(a1 + 536);
  if (v47 >= v48)
  {
    v50 = *(_QWORD *)(a1 + 520);
    v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v50) >> 3);
    v52 = v51 + 1;
    if (v51 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v50) >> 3);
    if (2 * v53 > v52)
      v52 = 2 * v53;
    if (v53 >= 0x333333333333333)
      v54 = 0x666666666666666;
    else
      v54 = v52;
    if (v54)
      v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
    else
      v55 = 0;
    v56 = v54 + 40 * v51;
    v57 = v54 + 40 * v55;
    *(_QWORD *)v56 = v17;
    *(double *)(v56 + 8) = v18;
    *(double *)(v56 + 16) = v22;
    *(_QWORD *)(v56 + 24) = v14;
    *(_BYTE *)(v56 + 32) = v21;
    *(_BYTE *)(v56 + 33) = v13;
    v49 = v56 + 40;
    v58 = *(char **)(a1 + 528);
    v59 = *(char **)(a1 + 520);
    if (v58 != v59)
    {
      do
      {
        v60 = *(_OWORD *)(v58 - 40);
        v61 = *(_OWORD *)(v58 - 24);
        *(_WORD *)(v56 - 8) = *((_WORD *)v58 - 4);
        *(_OWORD *)(v56 - 24) = v61;
        *(_OWORD *)(v56 - 40) = v60;
        v56 -= 40;
        v58 -= 40;
      }
      while (v58 != v59);
      v58 = *(char **)(a1 + 520);
    }
    *(_QWORD *)(a1 + 520) = v56;
    *(_QWORD *)(a1 + 528) = v49;
    *(_QWORD *)(a1 + 536) = v57;
    if (v58)
      operator delete(v58);
  }
  else
  {
    *(_QWORD *)v47 = v17;
    *(double *)(v47 + 8) = v18;
    *(double *)(v47 + 16) = v22;
    *(_QWORD *)(v47 + 24) = v14;
    *(_BYTE *)(v47 + 32) = v21;
    v49 = v47 + 40;
    *(_BYTE *)(v47 + 33) = v13;
  }
  *(_QWORD *)(a1 + 528) = v49;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 666))
  {
    *(_BYTE *)(a1 + 668) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 668) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7CED168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 520), *(_QWORD *)(a1 + 528), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 528) - *(_QWORD *)(a1 + 520)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7CED254(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *i;
  _QWORD *v15;
  _OWORD v16[6];

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 544), *(id *)(a1 + 40));
  *((double *)v8 - 4) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_WORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 210) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 226) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_QWORD *)(a1 + 242) = *((_QWORD *)&v16[5] + 1);
  *(_OWORD *)(a1 + 250) = v16[0];
  *(_OWORD *)(a1 + 266) = v16[1];
  *(_OWORD *)(a1 + 282) = v16[2];
  *(_QWORD *)(a1 + 298) = *(_QWORD *)&v16[3];
  *(_WORD *)(a1 + 310) = 0;
  *(_DWORD *)(a1 + 306) = 0;
  if (*(_QWORD *)(a1 + 328))
  {
    v9 = *(_QWORD **)(a1 + 312);
    v10 = *(_QWORD *)(a1 + 320);
    *(_QWORD *)(a1 + 312) = a1 + 320;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    if (v9[1])
      v11 = (_QWORD *)v9[1];
    else
      v11 = v9;
    if (v11)
    {
      v12 = (_QWORD *)v11[2];
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if ((_QWORD *)*v12 == v11)
        {
          *v12 = 0;
          while (1)
          {
            v15 = (_QWORD *)v12[1];
            if (!v15)
              break;
            do
            {
              v12 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; v13 = (_QWORD *)v12[1])
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (i = (_QWORD *)v12[2]; i; i = (_QWORD *)i[2])
          v12 = i;
        v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong(v8, *(id *)(a1 + 544));
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a1 + 520);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 668))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 668) = 0;
  }

}

void sub_1B7CED498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 664))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7CED554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 680));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 664) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7CED8B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C408224355FLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7CEDA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7CEDCD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  char v15;
  char v16;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    if (a7 - a6 - v7 >= 0.01)
    {
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  v11 = a5;
  v12 = a6;
  v13 = a7;
  v14 = a2;
  v15 = v8;
  v16 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v11, a3, a4);
  }
  else
  {
    v10 = *(double *)(a1 + 40) - a6;
    if (v10 >= 0.01)
    {
      if (a7 - a6 - v10 >= 0.01)
        a7 = *(double *)(a1 + 40);
    }
    else
    {
      v8 = 0;
    }
    v12 = a6;
    v13 = a7;
    v15 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v11, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 664))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7CEE980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7CEEA20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::archive(uint64_t a1, int8x16_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::archive((uint64_t)v6, (uint64_t)&a2->i64[1]);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = a2->i32[0];
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(a2[9], a2[9], 8uLL);
  v6[1] = a2[10].i64[0];
  v6[2] = a2[10].i64[1];
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7CEEB28(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::unarchive(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v13[8];
  uint64_t v14;

  *(_QWORD *)&v4 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  v6 = a2[16];
  if (v6)
  {
    HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::unarchive((uint64_t)v13, v6);
    v7 = v13[7];
    *(_OWORD *)(v5 + 96) = v13[6];
    *(_OWORD *)(v5 + 112) = v7;
    *(_QWORD *)(v5 + 128) = v14;
    v8 = v13[3];
    *(_OWORD *)(v5 + 32) = v13[2];
    *(_OWORD *)(v5 + 48) = v8;
    v9 = v13[5];
    *(_OWORD *)(v5 + 64) = v13[4];
    *(_OWORD *)(v5 + 80) = v9;
    v4 = v13[1];
    *(_OWORD *)v5 = v13[0];
    *(_OWORD *)(v5 + 16) = v4;
  }
  *(_DWORD *)a1 = a2[17];
  v10 = a2[14];
  if (v10)
  {
    *(_QWORD *)&v4 = *(_QWORD *)(v10 + 8);
    v11 = *(_QWORD *)(v10 + 16);
    *(int8x16_t *)(a1 + 144) = vextq_s8(*(int8x16_t *)(v10 + 24), *(int8x16_t *)(v10 + 24), 8uLL);
    *(_QWORD *)(a1 + 160) = v4;
    *(_QWORD *)(a1 + 168) = v11;
    *(_WORD *)(a1 + 176) = 1;
  }
  return *(double *)&v4;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D066C0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_WORD *)(a1 + 616) = 1;
  *(_BYTE *)(a1 + 618) = 0;
  *(_BYTE *)(a1 + 620) = 0;
  *(_QWORD *)(a1 + 624) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 664) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D066C0;
  v2 = *(void **)(a1 + 648);
  if (v2)
  {
    *(_QWORD *)(a1 + 656) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 584);
  if (v3)
  {
    *(_QWORD *)(a1 + 592) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 616) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_configureForStartTime(a1);

}

void sub_1B7CEED78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 624) = v4;
    v3 = v5;
  }

}

void sub_1B7CEEDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 79, a2);
  v7 = a2;
  v4 = a1[79];
  v5 = a1[76];
  a1[76] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[76]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 272) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7CEEF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[58];

  if (*(_BYTE *)(a1 + 616))
    return 0;
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7CEF014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 618))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 617))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 616))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 619))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 656);
      v20 = *(_QWORD *)(a1 + 664);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 648);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 656);
        v35 = *(char **)(a1 + 648);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 648);
        }
        *(_QWORD *)(a1 + 648) = v30;
        *(_QWORD *)(a1 + 656) = v23;
        *(_QWORD *)(a1 + 664) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 656) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7CEF2B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 618))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 618) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 617))
    goto LABEL_5;
  v9 = *(void **)(a1 + 640);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_392);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 640);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 640);
  *(_QWORD *)(a1 + 640) = 0;

  *(_BYTE *)(a1 + 617) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 648);
    *(_QWORD *)(a1 + 664) = 0;
    *(_QWORD *)(a1 + 656) = 0;
    *(_QWORD *)(a1 + 648) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 648);
      v37 = *(__int128 **)(a1 + 656);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 656);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 656) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 648);
  v39 = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 584))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 584));
  }
  *(_BYTE *)(a1 + 618) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 620))
    {
      *(_BYTE *)(a1 + 620) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 618) = 0;
LABEL_83:

  return v7;
}

void sub_1B7CEF9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 618) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 619) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 618))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 618))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 640);
    *(_QWORD *)(a1 + 640) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 617) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 617))
  {
    v8 = *(void **)(a1 + 640);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 640);
      *(_QWORD *)(a1 + 640) = v9;

      v8 = *(void **)(a1 + 640);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7CEFCA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 616) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 616) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7CEFDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 616) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 616), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::archive((uint64_t)&v37, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 376);
  if (v9 != (_QWORD *)(a1 + 384))
  {
    do
    {
      HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::archive((uint64_t)&v37, (uint64_t)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 384));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 584);
  for (k = *(int8x16_t **)(a1 + 592); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7CF0160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t i;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  id v62;
  _QWORD *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  _BYTE v67[464];
  __int128 v68;
  __int128 v69;
  int8x16_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  int8x16_t v75;
  uint64_t v76;
  uint64_t v77[4];
  __int128 __p;
  _BYTE v79[88];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t **v84;
  uint64_t *v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  __int128 v95;
  __int128 v96;
  int v97;
  __int128 v98;
  __int128 v99;
  int v100;
  void (**v101)(statistics::StatisticsEngine *__hidden);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  _BYTE v108[32];
  unint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v62 = a2;
  *(_BYTE *)(a1 + 616) = objc_msgSend(v62, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v62;
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v67, 0, -1.79769313e308, 1.79769313e308);
  v68 = 0u;
  v69 = 0u;
  v109 = 0;
  v65 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v108, (const unsigned __int8 *)objc_msgSend(v65, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v109));
  v64 = a1;
  v101 = &off_1E6D09A88;
  v102 = 0;
  v106 = 0;
  v104 = 0;
  v105 = 0;
  v107 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v101, (PB::Reader *)v108);
  v66 = v103;
  if (v102)
  {
    v74 = 0;
    memset(v77, 0, sizeof(v77));
    v80 = 0u;
    v81 = 0u;
    LOWORD(v82) = 0;
    v83 = 0;
    *((_QWORD *)&v82 + 1) = 0;
    v86 = 0;
    __p = 0u;
    memset(v79, 0, 82);
    v85 = 0;
    v84 = &v85;
    v87 = 0u;
    v88 = 0u;
    v89 = 1065353216;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0;
    v94 = 1065353216;
    v95 = 0u;
    v96 = 0u;
    v97 = 1065353216;
    v98 = 0u;
    v99 = 0u;
    v100 = 1065353216;
    v70 = vextq_s8(*(int8x16_t *)(v102 + 8), *(int8x16_t *)(v102 + 8), 8uLL);
    v4 = *(_QWORD *)(v102 + 72);
    v71 = *(_QWORD *)(v102 + 64);
    v72 = *(_BYTE *)(v102 + 185);
    v73 = *(_BYTE *)(v102 + 186);
    v75 = vextq_s8(*(int8x16_t *)(v102 + 24), *(int8x16_t *)(v102 + 24), 8uLL);
    v76 = v4;
    v5 = *(_QWORD *)(v102 + 80);
    v6 = *(_QWORD *)(v102 + 88);
    v63 = (_QWORD *)v102;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= *(_QWORD *)v79)
        {
          v14 = (_QWORD *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - __p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)v79 - __p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)v79 - __p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v79 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = (_QWORD *)*((_QWORD *)&__p + 1);
            v14 = (_QWORD *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)((char *)v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 6;
            }
            while (v7 != v14);
            v14 = (_QWORD *)__p;
          }
          v7 = (_QWORD *)(v19 + 48);
          *(_QWORD *)&__p = v20;
          *((_QWORD *)&__p + 1) = v19 + 48;
          *(_QWORD *)v79 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v7 = v9;
          v7[1] = v8;
          v7[2] = v10;
          v7[3] = v11;
          *((_WORD *)v7 + 16) = 1;
          *((_BYTE *)v7 + 40) = 0;
          *((_BYTE *)v7 + 41) = v12;
          *((_BYTE *)v7 + 42) = v13;
          v7 += 6;
        }
        *((_QWORD *)&__p + 1) = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = v63[13];
    if (v23)
    {
      HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::unarchive((uint64_t)&v110, v23);
      v81 = v116;
      v82 = v117;
      v83 = v118;
      *(_OWORD *)&v79[40] = v112;
      *(_OWORD *)&v79[56] = v113;
      *(_OWORD *)&v79[72] = v114;
      v80 = v115;
      *(_OWORD *)&v79[8] = v110;
      *(_OWORD *)&v79[24] = v111;
    }
    v24 = (uint64_t *)v63[17];
    v25 = (uint64_t *)v63[18];
    while (v24 != v25)
    {
      v26 = *v24;
      HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::unarchive((uint64_t)&v110, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v85;
      v29 = &v85;
      v30 = &v85;
      if (v85)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_33;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_36;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_33:
      v33 = (char *)operator new(0xB0uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *((_QWORD *)v33 + 21) = 0;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v84)
      {
        v84 = (uint64_t **)*v84;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v85, v32);
      ++v86;
LABEL_36:
      v34 = v118;
      v35 = v117;
      v36 = v116;
      v37 = v114;
      *(_OWORD *)(v33 + 120) = v115;
      *(_OWORD *)(v33 + 136) = v36;
      *(_OWORD *)(v33 + 152) = v35;
      v38 = v113;
      v39 = v112;
      v40 = v110;
      *(_OWORD *)(v33 + 56) = v111;
      *(_OWORD *)(v33 + 72) = v39;
      *((_QWORD *)v33 + 21) = v34;
      *(_OWORD *)(v33 + 88) = v38;
      *(_OWORD *)(v33 + 104) = v37;
      ++v24;
      *(_OWORD *)(v33 + 40) = v40;
    }
    v41 = v63[5];
    for (i = v63[6]; v41 != i; v41 += 8)
    {
      v44 = *(double *)(*(_QWORD *)v41 + 8);
      v43 = *(double *)(*(_QWORD *)v41 + 16);
      if (v44 >= v43)
        v45 = *(double *)(*(_QWORD *)v41 + 16);
      else
        v45 = *(double *)(*(_QWORD *)v41 + 8);
      if (v43 < v44)
        v43 = *(double *)(*(_QWORD *)v41 + 8);
      HKIntervalMask<double>::_insertInterval(v77, v45, v43);
    }
    HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::operator=((uint64_t)v67, (uint64_t)&v70);
    HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)&v70);
  }
  v46 = v104;
  v47 = v105;
  if (v104 != v105)
  {
    v48 = *((_QWORD *)&v68 + 1);
    do
    {
      v49 = *(_QWORD *)(*(_QWORD *)v46 + 24);
      v50 = *(_QWORD *)(*(_QWORD *)v46 + 32);
      v51 = *(_QWORD *)(*(_QWORD *)v46 + 8);
      v52 = *(_QWORD *)(*(_QWORD *)v46 + 16);
      if (v48 >= (unint64_t)v69)
      {
        v53 = (void *)v68;
        v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v68) >> 3);
        v55 = v54 + 1;
        if (v54 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v69 - v68) >> 3) > v55)
          v55 = 0x999999999999999ALL * ((uint64_t)(v69 - v68) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v69 - v68) >> 3) >= 0x333333333333333)
          v56 = 0x666666666666666;
        else
          v56 = v55;
        if (v56)
        {
          v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v56);
          v48 = *((_QWORD *)&v68 + 1);
          v53 = (void *)v68;
        }
        else
        {
          v57 = 0;
        }
        v58 = v56 + 40 * v54;
        *(_QWORD *)v58 = v50;
        *(_QWORD *)(v58 + 8) = v49;
        *(_QWORD *)(v58 + 16) = v51;
        *(_QWORD *)(v58 + 24) = v52;
        *(_WORD *)(v58 + 32) = 1;
        v59 = v58;
        if ((void *)v48 != v53)
        {
          do
          {
            v60 = *(_OWORD *)(v48 - 40);
            v61 = *(_OWORD *)(v48 - 24);
            *(_WORD *)(v59 - 8) = *(_WORD *)(v48 - 8);
            *(_OWORD *)(v59 - 24) = v61;
            *(_OWORD *)(v59 - 40) = v60;
            v59 -= 40;
            v48 -= 40;
          }
          while ((void *)v48 != v53);
          v53 = (void *)v68;
        }
        v48 = v58 + 40;
        *(_QWORD *)&v68 = v59;
        *((_QWORD *)&v68 + 1) = v58 + 40;
        *(_QWORD *)&v69 = v56 + 40 * v57;
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v48 = v50;
        *(_QWORD *)(v48 + 8) = v49;
        *(_QWORD *)(v48 + 16) = v51;
        *(_QWORD *)(v48 + 24) = v52;
        *(_WORD *)(v48 + 32) = 1;
        v48 += 40;
      }
      *((_QWORD *)&v68 + 1) = v48;
      v46 += 8;
    }
    while (v46 != v47);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v101);

  HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::operator=((_QWORD *)(v64 + 112), (uint64_t)&v66);
  if ((_QWORD)v68)
  {
    *((_QWORD *)&v68 + 1) = v68;
    operator delete((void *)v68);
  }
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v67);

}

void sub_1B7CF08C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x408]);
  HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_WORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(_QWORD *)(a1 + 480) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 424);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 384);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 344);
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 280);
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 264));
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[464];
  uint64_t v18;
  _BYTE v19[464];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[400];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 632));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 616) = 0;
  return HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7CF0DAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 59), (__n128 *)(a2 + 472));
  v4 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a2 + 496) = 0;
  v5 = (void *)a1[62];
  a1[62] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v12 = *(_OWORD *)(a2 + 136);
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 136) = v12;
  v15 = *(_OWORD *)(a2 + 200);
  v16 = *(_OWORD *)(a2 + 216);
  v17 = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v16;
  *(_OWORD *)(a1 + 200) = v15;
  v18 = (_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 248) = v17;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  v19 = *(_QWORD **)(a2 + 256);
  if (v19 != (_QWORD *)(a2 + 264))
  {
    v20 = 0;
    v21 = (_QWORD *)(a1 + 264);
    while (1)
    {
      v22 = v19[4];
      v23 = (_QWORD *)(a1 + 264);
      if (v21 == v18)
        goto LABEL_12;
      v24 = v20;
      v25 = (_QWORD *)(a1 + 264);
      if (v20)
      {
        do
        {
          v23 = v24;
          v24 = (_QWORD *)v24[1];
        }
        while (v24);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v25[2];
          v26 = *v23 == (_QWORD)v25;
          v25 = v23;
        }
        while (v26);
      }
      if (v23[4] < v22)
      {
LABEL_12:
        if (v20)
          v27 = (uint64_t **)v23;
        else
          v27 = (uint64_t **)(a1 + 264);
        if (v20)
          v28 = (uint64_t **)(v23 + 1);
        else
          v28 = (uint64_t **)(a1 + 264);
        if (!*v28)
        {
LABEL_28:
          v31 = (uint64_t *)operator new(0xB0uLL);
          *((_OWORD *)v31 + 2) = *((_OWORD *)v19 + 2);
          v32 = *((_OWORD *)v19 + 3);
          v33 = *((_OWORD *)v19 + 4);
          v34 = *((_OWORD *)v19 + 6);
          *((_OWORD *)v31 + 5) = *((_OWORD *)v19 + 5);
          *((_OWORD *)v31 + 6) = v34;
          *((_OWORD *)v31 + 3) = v32;
          *((_OWORD *)v31 + 4) = v33;
          v35 = *((_OWORD *)v19 + 7);
          v36 = *((_OWORD *)v19 + 8);
          v37 = *((_OWORD *)v19 + 10);
          *((_OWORD *)v31 + 9) = *((_OWORD *)v19 + 9);
          *((_OWORD *)v31 + 10) = v37;
          *((_OWORD *)v31 + 7) = v35;
          *((_OWORD *)v31 + 8) = v36;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 256), (uint64_t)v27, v28, v31);
        }
      }
      else
      {
        v28 = (uint64_t **)(a1 + 264);
        v27 = (uint64_t **)(a1 + 264);
        if (!v20)
          goto LABEL_28;
        v29 = v20;
        while (1)
        {
          while (1)
          {
            v27 = (uint64_t **)v29;
            v30 = v29[4];
            if (v30 <= v22)
              break;
            v29 = *v27;
            v28 = v27;
            if (!*v27)
              goto LABEL_28;
          }
          if (v30 >= v22)
            break;
          v29 = v27[1];
          if (!v29)
          {
            v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      v38 = (_QWORD *)v19[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v19[2];
          v26 = *v39 == (_QWORD)v19;
          v19 = v39;
        }
        while (!v26);
      }
      if (v39 == (_QWORD *)(a2 + 264))
        break;
      v20 = (_QWORD *)*v18;
      v21 = *(_QWORD **)(a1 + 256);
      v19 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 280, a2 + 280);
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 320), *(const void **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 384, a2 + 384);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 424, a2 + 424);
  return a1;
}

void sub_1B7CF1170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  v19 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 328) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  v13 = *(_OWORD *)(a2 + 216);
  v14 = *(_OWORD *)(a2 + 232);
  v15 = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_OWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v16 = a1 + 264;
  std::__tree<long>::destroy(*(_QWORD **)(a1 + 264));
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v17 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 264) = v17;
  v18 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 272) = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(a2 + 256) = a2 + 264;
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 272) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 256) = v16;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 280, (uint64_t *)(a2 + 280));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 320, (__n128 *)(a2 + 320));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 424, (uint64_t *)(a2 + 424));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  double v26;
  double v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  unint64_t v51;
  void **v52;
  char *v53;
  unint64_t v54;
  id v55;
  id v56;
  void *v57;
  char v58;
  float v59;
  _BOOL8 v60;
  unint64_t v61;
  unint64_t v62;
  int8x8_t prime;
  void *v64;
  void *v65;
  uint64_t v66;
  _QWORD **v67;
  unint64_t v68;
  uint8x8_t v69;
  unint64_t v70;
  uint8x8_t v71;
  uint64_t v72;
  _QWORD *i;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD *v84;
  _QWORD *v85;
  BOOL v86;
  void *v87;
  uint64_t **j;
  uint64_t *v89;
  void *v90;
  uint64_t v91;
  double v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  double v97;
  double v98;
  void *v99;
  void *v100;
  void *v101;
  _QWORD *v102;
  uint64_t v103;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  unint64_t v110;
  id v111;
  id v112;
  id v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  void *__p[2];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _QWORD v126[3];
  _QWORD *v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = a2 + 5;
  if (v4 != -1.79769313e308)
    v6 = a2;
  v112 = (id)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  v114 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v112, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(v114 + 320);
      v16 = *(uint64_t **)(v114 + 328);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v20 = (void *)objc_msgSend(v14, "copy");
      objc_msgSend(v12, "_setSources:", v20);

    }
  }

  v126[0] = &off_1E6D06790;
  v127 = v126;
  v113 = v12;
  v116 = *(_QWORD *)(a1 + 24);
  v21 = *(_OWORD *)(v114 + 200);
  v22 = *(_OWORD *)(v114 + 232);
  v123 = *(_OWORD *)(v114 + 216);
  v124 = v22;
  v125 = *(_QWORD *)(v114 + 248);
  v23 = *(_OWORD *)(v114 + 136);
  v24 = *(_OWORD *)(v114 + 168);
  v119 = *(_OWORD *)(v114 + 152);
  v120 = v24;
  v121 = *(_OWORD *)(v114 + 184);
  v122 = v21;
  *(_OWORD *)__p = *(_OWORD *)(v114 + 120);
  v118 = v23;
  if (!v127)
    std::__throw_bad_function_call[abi:ne180100]();
  v25 = (*(uint64_t (**)(_QWORD *, void **))(*v127 + 48))(v127, __p);
  v26 = *(double *)(v25 + 8);
  v27 = *(double *)(v25 + 16);
  v28 = *(_QWORD *)(v25 + 32);
  v30 = *(double *)(v25 + 40);
  v29 = *(double *)(v25 + 48);
  v31 = *(double *)(v25 + 56);
  v32 = *(double *)(v25 + 80);
  v33 = *(unsigned __int8 *)(v25 + 112);
  v34 = *(double *)(v25 + 120);
  v35 = *(double *)(v25 + 128);
  v36 = *(_QWORD *)(a1 + 24);
  v37 = _HKStatisticsOptionBaselineRelativeQuantities();
  v38 = *(void **)(a1 + 16);
  if ((v37 & v36) != 0)
    objc_msgSend(v38, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v38, "canonicalUnit");
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v116 & 2) != 0)
  {
    if (v33)
      v34 = v34 + (v32 - v34) * 22.5 / (v35 + 22.5);
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v115, v34);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v113, "setAverageQuantity:", v39);

  }
  if ((v116 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v115, v27);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v113, "setMinimumQuantity:", v40);

  }
  if ((v116 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v115, v26);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v113, "setMaximumQuantity:", v41);

  }
  if ((v116 & 0x20) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v115, v30);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v113, "setMostRecentQuantity:", v42);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v29, v31);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v113, "setMostRecentQuantityDateInterval:", v43);

  }
  objc_msgSend(v113, "setDataCount:", v28);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_167;
  if ((v116 & 2) != 0)
    v109 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v109 = 0;
  if ((v116 & 4) != 0)
    v108 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v108 = 0;
  if ((v116 & 8) != 0)
    v106 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v106 = 0;
  if ((v116 & 0x20) != 0)
  {
    v105 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v107 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v107 = 0;
    v105 = 0;
  }
  v111 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)__p = 0u;
  v118 = 0u;
  LODWORD(v119) = 1065353216;
  v44 = *(_QWORD **)(v114 + 256);
  if (v44 == (_QWORD *)(v114 + 264))
    goto LABEL_158;
  do
  {
    HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(v114, v44[4]);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = v45;
    if (!v45)
      goto LABEL_123;
    v47 = objc_msgSend(v45, "hash");
    v48 = v47;
    v49 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_66;
    v50 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v50.i16[0] = vaddlv_u8(v50);
    v51 = v50.u32[0];
    if (v50.u32[0] > 1uLL)
    {
      v28 = v47;
      if ((void *)v47 >= __p[1])
        v28 = v47 % (unint64_t)__p[1];
    }
    else
    {
      v28 = ((unint64_t)__p[1] - 1) & v47;
    }
    v52 = (void **)*((_QWORD *)__p[0] + v28);
    if (!v52 || (v53 = (char *)*v52) == 0)
    {
LABEL_66:
      v53 = (char *)operator new(0xA0uLL);
      *(_QWORD *)v53 = 0;
      *((_QWORD *)v53 + 1) = v48;
      *((_QWORD *)v53 + 2) = v46;
      *(_OWORD *)(v53 + 24) = 0u;
      *(_OWORD *)(v53 + 40) = 0u;
      *(_OWORD *)(v53 + 56) = 0u;
      *(_OWORD *)(v53 + 72) = 0u;
      *(_OWORD *)(v53 + 88) = 0u;
      *(_OWORD *)(v53 + 104) = 0u;
      *(_OWORD *)(v53 + 120) = 0u;
      *(_OWORD *)(v53 + 136) = 0u;
      *((_QWORD *)v53 + 19) = 0;
      v59 = (float)(unint64_t)(*((_QWORD *)&v118 + 1) + 1);
      if (v49 && (float)(*(float *)&v119 * (float)v49) >= v59)
      {
LABEL_112:
        v75 = __p[0];
        v76 = (_QWORD *)*((_QWORD *)__p[0] + v28);
        if (v76)
        {
          *(_QWORD *)v53 = *v76;
        }
        else
        {
          *(_QWORD *)v53 = v118;
          *(_QWORD *)&v118 = v53;
          v75[v28] = &v118;
          if (!*(_QWORD *)v53)
          {
LABEL_121:
            ++*((_QWORD *)&v118 + 1);
            goto LABEL_122;
          }
          v77 = *(_QWORD *)(*(_QWORD *)v53 + 8);
          if ((v49 & (v49 - 1)) != 0)
          {
            if (v77 >= v49)
              v77 %= v49;
          }
          else
          {
            v77 &= v49 - 1;
          }
          v76 = (char *)__p[0] + 8 * v77;
        }
        *v76 = v53;
        goto LABEL_121;
      }
      v60 = (v49 & (v49 - 1)) != 0;
      if (v49 < 3)
        v60 = 1;
      v61 = v60 | (2 * v49);
      v62 = vcvtps_u32_f32(v59 / *(float *)&v119);
      if (v61 <= v62)
        prime = (int8x8_t)v62;
      else
        prime = (int8x8_t)v61;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v49 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_78;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v70 = vcvtps_u32_f32((float)*((unint64_t *)&v118 + 1) / *(float *)&v119);
        if (__p[1] < (void *)3
          || (v71 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
        {
          v70 = std::__next_prime(v70);
        }
        else
        {
          v72 = 1 << -(char)__clz(v70 - 1);
          if (v70 >= 2)
            v70 = v72;
        }
        if (*(_QWORD *)&prime <= v70)
          prime = (int8x8_t)v70;
        if (*(_QWORD *)&prime >= v49)
        {
          v49 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_78:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v64 = operator new(8 * *(_QWORD *)&prime);
            v65 = __p[0];
            __p[0] = v64;
            if (v65)
              operator delete(v65);
            v66 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v66++) = 0;
            while (*(_QWORD *)&prime != v66);
            v67 = (_QWORD **)v118;
            if ((_QWORD)v118)
            {
              v68 = *(_QWORD *)(v118 + 8);
              v69 = (uint8x8_t)vcnt_s8(prime);
              v69.i16[0] = vaddlv_u8(v69);
              if (v69.u32[0] > 1uLL)
              {
                if (v68 >= *(_QWORD *)&prime)
                  v68 %= *(_QWORD *)&prime;
              }
              else
              {
                v68 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v68) = &v118;
              for (i = *v67; i; v68 = v74)
              {
                v74 = i[1];
                if (v69.u32[0] > 1uLL)
                {
                  if (v74 >= *(_QWORD *)&prime)
                    v74 %= *(_QWORD *)&prime;
                }
                else
                {
                  v74 &= *(_QWORD *)&prime - 1;
                }
                if (v74 != v68)
                {
                  if (!*((_QWORD *)__p[0] + v74))
                  {
                    *((_QWORD *)__p[0] + v74) = v67;
                    goto LABEL_103;
                  }
                  *v67 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v74);
                  **((_QWORD **)__p[0] + v74) = i;
                  i = v67;
                }
                v74 = v68;
LABEL_103:
                v67 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v49 = (unint64_t)prime;
            goto LABEL_107;
          }
          v87 = __p[0];
          __p[0] = 0;
          if (v87)
            operator delete(v87);
          v49 = 0;
          __p[1] = 0;
        }
      }
LABEL_107:
      if ((v49 & (v49 - 1)) != 0)
      {
        if (v48 >= v49)
          v28 = v48 % v49;
        else
          v28 = v48;
      }
      else
      {
        v28 = (v49 - 1) & v48;
      }
      goto LABEL_112;
    }
    v110 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v54 = *((_QWORD *)v53 + 1);
      if (v54 == v48)
        break;
      if (v51 > 1)
      {
        if (v54 >= v49)
          v54 %= v49;
      }
      else
      {
        v54 &= v110;
      }
      if (v54 != v28)
        goto LABEL_66;
LABEL_65:
      v53 = *(char **)v53;
      if (!v53)
        goto LABEL_66;
    }
    v55 = *((id *)v53 + 2);
    v56 = v46;
    v57 = v56;
    if (v55 != v56)
    {
      v58 = objc_msgSend(v55, "isEqualToString:", v56);

      if ((v58 & 1) != 0)
        goto LABEL_122;
      goto LABEL_65;
    }

LABEL_122:
    *(_OWORD *)(v53 + 24) = *(_OWORD *)(v44 + 5);
    v78 = *(_OWORD *)(v44 + 7);
    v79 = *(_OWORD *)(v44 + 9);
    v80 = *(_OWORD *)(v44 + 11);
    *(_OWORD *)(v53 + 88) = *(_OWORD *)(v44 + 13);
    *(_OWORD *)(v53 + 72) = v80;
    *(_OWORD *)(v53 + 56) = v79;
    *(_OWORD *)(v53 + 40) = v78;
    v81 = *(_OWORD *)(v44 + 15);
    v82 = *(_OWORD *)(v44 + 17);
    v83 = *(_OWORD *)(v44 + 19);
    *((_QWORD *)v53 + 19) = v44[21];
    *(_OWORD *)(v53 + 136) = v83;
    *(_OWORD *)(v53 + 120) = v82;
    *(_OWORD *)(v53 + 104) = v81;

LABEL_123:
    v84 = (_QWORD *)v44[1];
    if (v84)
    {
      do
      {
        v85 = v84;
        v84 = (_QWORD *)*v84;
      }
      while (v84);
    }
    else
    {
      do
      {
        v85 = (_QWORD *)v44[2];
        v86 = *v85 == (_QWORD)v44;
        v44 = v85;
      }
      while (!v86);
    }
    v44 = v85;
  }
  while (v85 != (_QWORD *)(v114 + 264));
  for (j = (uint64_t **)v118; j; j = (uint64_t **)*j)
  {
    v89 = j[2];
    if ((v116 & 2) != 0)
    {
      if (!v127)
        goto LABEL_173;
      v90 = (void *)MEMORY[0x1E0CB6A28];
      v91 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v127 + 48))(v127, (uint64_t *)j + 3);
      if (*(_BYTE *)(v91 + 112))
        v92 = *(double *)(v91 + 120)
            + (*(double *)(v91 + 80) - *(double *)(v91 + 120)) * 22.5 / (*(double *)(v91 + 128) + 22.5);
      else
        v92 = *(double *)(v91 + 120);
      objc_msgSend(v90, "quantityWithUnit:doubleValue:", v115, v92);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v109, "setObject:forKeyedSubscript:", v93, v89);

    }
    if ((v116 & 4) != 0)
    {
      if (!v127)
        goto LABEL_173;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v115, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v127 + 48))(v127, (uint64_t *)j + 3) + 16));
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v108, "setObject:forKeyedSubscript:", v94, v89);

    }
    if ((v116 & 8) != 0)
    {
      if (!v127)
        goto LABEL_173;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v115, *(double *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v127 + 48))(v127, (uint64_t *)j + 3) + 8));
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v106, "setObject:forKeyedSubscript:", v95, v89);

    }
    if ((v116 & 0x20) != 0)
    {
      if (!v127)
        std::__throw_bad_function_call[abi:ne180100]();
      v96 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v127 + 48))(v127, (uint64_t *)j + 3);
      v97 = *(double *)(v96 + 48);
      v98 = *(double *)(v96 + 56);
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v115, *(double *)(v96 + 40));
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v105, "setObject:forKeyedSubscript:", v99, v89);

      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v97, v98);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v107, "setObject:forKeyedSubscript:", v100, v89);

    }
    if (!v127)
LABEL_173:
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v127 + 48))(v127, (uint64_t *)j + 3) + 32));
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v111, "setObject:forKeyedSubscript:", v101, v89);

  }
LABEL_158:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  if ((v116 & 2) != 0)
    objc_msgSend(v113, "setAverageQuantityBySource:", v109);
  if ((v116 & 4) != 0)
    objc_msgSend(v113, "setMinimumQuantityBySource:", v108);
  if ((v116 & 8) != 0)
    objc_msgSend(v113, "setMaximumQuantityBySource:", v106);
  if ((v116 & 0x20) != 0)
  {
    objc_msgSend(v113, "setMostRecentQuantityBySource:", v105);
    objc_msgSend(v113, "setMostRecentQuantityDateIntervalBySource:", v107);
  }
  objc_msgSend(v113, "setDataCountBySource:", v111);

LABEL_167:
  v102 = v127;
  if (v127 == v126)
  {
    v103 = 4;
    v102 = v126;
LABEL_171:
    (*(void (**)(void))(*v102 + 8 * v103))();
  }
  else if (v127)
  {
    v103 = 5;
    goto LABEL_171;
  }
  return v113;
}

void sub_1B7CF2058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;

  v23 = *(_QWORD **)(v21 - 168);
  if (v23 == (_QWORD *)(v21 - 192))
  {
    v24 = 4;
    v23 = (_QWORD *)(v21 - 192);
  }
  else
  {
    if (!v23)
      goto LABEL_2;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_2:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 304);
  v2 = *(_QWORD *)(a1 + 320);
  if (v1 != (*(_QWORD *)(a1 + 328) - v2) >> 3)
  {
    v4 = (void **)(a1 + 320);
    *(_QWORD *)(a1 + 328) = v2;
    std::vector<long long>::reserve((void **)(a1 + 320), v1);
    v5 = *(_QWORD **)(a1 + 296);
    if (v5)
    {
      v6 = *(char **)(a1 + 328);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 336);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 320);
            v6 = *(char **)(a1 + 328);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 320) = v16;
          *(_QWORD *)(a1 + 328) = v9;
          *(_QWORD *)(a1 + 336) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 328) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7CF23E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  id WeakRetained;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  __int128 *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  double v51;
  int v52;
  int v53;
  unint64_t v54;
  __int128 *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  __int128 *v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  __int128 *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  void *v77;
  unint64_t v78;
  uint64_t **v79;
  BOOL v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  BOOL v95;
  int v96;
  int v97;
  uint64_t *v98;
  int v99;
  uint64_t v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  unint64_t v104;
  uint64_t **v105;
  __int128 v106;
  char *v107;
  double v108;
  void *v109;
  void *v110;
  _QWORD *v111;
  id *location;
  __int128 *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  double **v117;
  char v118;
  char v119;
  uint64_t v120;
  void **v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int16 v128;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v121 = (void **)(a1 + 96);
    v117 = (double **)(a1 + 64);
    v115 = a1 + 120;
    location = (id *)(a1 + 88);
    v111 = (_QWORD *)(a1 + 264);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_127:
      *(double *)(a1 + 56) = a2;
LABEL_128:
      v108 = *(double *)(a1 + 56);
      if (v108 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime(double) [Statistics = HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>]");
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v109, "handleFailureInFunction:file:lineNumber:description:", v110, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v108 = *(double *)(a1 + 56);
      }
      v5 = v108;
      if (v108 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v17 = a2;
      v18 = a2;
      v19 = v5;
      v20 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v21 = *(double *)(v20 + 8);
          v22 = *(double *)(v20 + 16);
          if (v21 > v19 && v21 < v18)
            v18 = *(double *)(v20 + 8);
          if (v22 > v5)
            v24 = *(double *)(v20 + 16);
          else
            v24 = v17;
          if (v22 < v17)
          {
            v19 = v5;
            v17 = v24;
          }
          v20 += 48;
        }
        while ((__int128 *)v20 != v7);
      }
      if (v17 >= v18)
        v25 = v18;
      else
        v25 = v17;
      v26 = *(double *)(a1 + 16);
      if (v26 > 0.0)
      {
        v27 = v26 * floor(v25 / v26);
        v28 = v26 * floor((v26 + v5) / v26);
        if (v27 >= v28)
          v25 = v27;
        else
          v25 = v28;
      }
      *v121 = 0;
      v121[1] = 0;
      v121[2] = 0;
      v113 = (__int128 *)v6;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4));
        v32 = *(char **)(a1 + 96);
        v31 = *(char **)(a1 + 104);
        v33 = v29;
        if (v31 != v32)
        {
          do
          {
            v34 = *((_OWORD *)v31 - 3);
            v35 = *((_OWORD *)v31 - 2);
            *(_OWORD *)(v33 - 21) = *(_OWORD *)(v31 - 21);
            *((_OWORD *)v33 - 3) = v34;
            *((_OWORD *)v33 - 2) = v35;
            v33 -= 48;
            v31 -= 48;
          }
          while (v31 != v32);
          v31 = (char *)*v121;
        }
        *(_QWORD *)(a1 + 96) = v33;
        *(_QWORD *)(a1 + 104) = v29;
        *(_QWORD *)(a1 + 112) = &v29[48 * v30];
        if (v31)
          operator delete(v31);
      }
      HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v123 = a1;
        v37 = 126 - 2 * __clz(v8);
        v38 = (uint64_t)v113;
        if (v113 == v7)
          v39 = 0;
        else
          v39 = v37;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*,false>((uint64_t)v113, v7, (uint64_t)&v123, v39, 1);
      }
      else
      {
        v42 = 126 - 2 * __clz(v8);
        v38 = (uint64_t)v113;
        if (v113 == v7)
          v39 = 0;
        else
          v39 = v42;
      }
      std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*,false>(v38, v7, v39, 1);
      if (*(_BYTE *)(a1 + 25))
        v114 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v114 = 0;
      if (v113 == v7)
      {
LABEL_109:
        v92 = *(_QWORD **)(a1 + 256);
        if (v92 != v111)
        {
          do
          {
            v93 = (_QWORD *)v92[1];
            if (v93)
            {
              do
              {
                v94 = v93;
                v93 = (_QWORD *)*v93;
              }
              while (v93);
            }
            else
            {
              do
              {
                v94 = (_QWORD *)v92[2];
                v95 = *v94 == (_QWORD)v92;
                v92 = v94;
              }
              while (!v95);
            }
            v92 = v94;
          }
          while (v94 != v111);
        }
        *(double *)(a1 + 56) = v25;

        if (v113)
          operator delete(v113);
        goto LABEL_128;
      }
      v116 = 0;
      v43 = 0;
      v44 = v113;
      while (2)
      {
        v45 = v44[1];
        v123 = *v44;
        v124 = v45;
        v125 = *((_QWORD *)v44 + 4);
        v46 = v123;
        v47 = v45;
        if (*(double *)&v45 - *((double *)&v123 + 1) - (v25 - *((double *)&v123 + 1)) < 0.01)
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
          v51 = 0.0;
          v47 = 0;
          if (!(_BYTE)v125)
            goto LABEL_62;
LABEL_57:
          v119 = v50;
          v120 = v48;
          HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
          v52 = *((unsigned __int8 *)v44 + 42);
          v53 = *((unsigned __int8 *)v44 + 41);
          v118 = *((_BYTE *)v44 + 40);
          if (!(_BYTE)v125)
            goto LABEL_90;
          if ((v43 & 1) != 0)
          {
            v54 = *((_QWORD *)&v124 + 1);
            if (v116 == *((_QWORD *)&v124 + 1) || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v115, (double *)&v123, v52 == 0);
              v52 = 1;
            }
          }
          else
          {
            HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v115, (double *)&v123, v52 == 0);
            v52 = 1;
            v54 = *((_QWORD *)&v124 + 1);
            v116 = *((_QWORD *)&v124 + 1);
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_89;
          HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(a1, v54);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v65)
            goto LABEL_88;
          objc_msgSend(v114, "objectForKeyedSubscript:", v65);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = v66;
          if (v66)
          {
            if (objc_msgSend(v66, "longLongValue") != v54 && !*(_BYTE *)(a1 + 24))
            {
LABEL_87:

LABEL_88:
LABEL_89:
              v43 = 1;
LABEL_90:
              if (v49)
              {
                v80 = v52 != 0;
                v82 = *(char **)(a1 + 104);
                v81 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v82 < v81)
                {
                  *(_QWORD *)v82 = v46;
                  *((double *)v82 + 1) = v51;
                  *((_QWORD *)v82 + 2) = v47;
                  *((_QWORD *)v82 + 3) = v120;
                  v82[32] = v49;
                  v82[33] = v119;
                  v82[40] = v118;
                  v82[41] = v53;
                  v59 = v82 + 48;
                  v82[42] = v80;
                  goto LABEL_107;
                }
                v76 = (char *)*v121;
                v83 = 0xAAAAAAAAAAAAAAABLL * ((v82 - (_BYTE *)*v121) >> 4);
                v84 = v83 + 1;
                if (v83 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (_QWORD)v76) >> 4);
                if (2 * v85 > v84)
                  v84 = 2 * v85;
                if (v85 >= 0x2AAAAAAAAAAAAAALL)
                  v86 = 0x555555555555555;
                else
                  v86 = v84;
                if (v86)
                {
                  v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v86);
                  v76 = *(char **)(a1 + 96);
                  v82 = *(char **)(a1 + 104);
                }
                else
                {
                  v87 = 0;
                }
                v88 = v86 + 48 * v83;
                *(_QWORD *)v88 = v46;
                *(double *)(v88 + 8) = v51;
                *(_QWORD *)(v88 + 16) = v47;
                *(_QWORD *)(v88 + 24) = v120;
                *(_BYTE *)(v88 + 32) = v49;
                *(_BYTE *)(v88 + 33) = v119;
                *(_BYTE *)(v88 + 40) = v118;
                *(_BYTE *)(v88 + 41) = v53;
                *(_BYTE *)(v88 + 42) = v80;
                v89 = v88;
                if (v82 != v76)
                {
                  do
                  {
                    v90 = *((_OWORD *)v82 - 3);
                    v91 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)(v89 - 21) = *(_OWORD *)(v82 - 21);
                    *(_OWORD *)(v89 - 48) = v90;
                    *(_OWORD *)(v89 - 32) = v91;
                    v89 -= 48;
                    v82 -= 48;
                  }
                  while (v82 != v76);
                  v76 = (char *)*v121;
                }
                v59 = (_OWORD *)(v88 + 48);
                *(_QWORD *)(a1 + 96) = v89;
                *(_QWORD *)(a1 + 104) = v88 + 48;
                *(_QWORD *)(a1 + 112) = v86 + 48 * v87;
                if (v76)
LABEL_106:
                  operator delete(v76);
                goto LABEL_107;
              }
              goto LABEL_108;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v54);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v114, "setObject:forKeyedSubscript:", v77, v65);

          }
          v78 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(a1, v54);
          v79 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(a1, v78);
          HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)v79, (double *)&v123, v53 == 0);
          LOBYTE(v53) = 1;
          goto LABEL_87;
        }
        if (v25 - *((double *)&v123 + 1) < 0.01)
        {
          LOBYTE(v125) = 0;
          goto LABEL_62;
        }
        v48 = *((_QWORD *)&v124 + 1);
        v50 = BYTE1(v125);
        *(double *)&v124 = v25;
        v51 = v25;
        v49 = v125;
        if ((_BYTE)v125)
          goto LABEL_57;
LABEL_62:
        v55 = *(__int128 **)(a1 + 104);
        v56 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v55 < v56)
        {
          v57 = *v44;
          v58 = v44[2];
          v55[1] = v44[1];
          v55[2] = v58;
          *v55 = v57;
          v59 = v55 + 3;
          goto LABEL_107;
        }
        v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (_BYTE *)*v121) >> 4);
        v61 = v60 + 1;
        if (v60 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (_QWORD)*v121) >> 4);
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0x2AAAAAAAAAAAAAALL)
          v63 = 0x555555555555555;
        else
          v63 = v61;
        if (v63)
          v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v63);
        else
          v64 = 0;
        v68 = (__int128 *)(v63 + 48 * v60);
        v69 = *v44;
        v70 = v44[2];
        v68[1] = v44[1];
        v68[2] = v70;
        *v68 = v69;
        v72 = *(char **)(a1 + 96);
        v71 = *(char **)(a1 + 104);
        v73 = v68;
        if (v71 != v72)
        {
          do
          {
            v74 = *((_OWORD *)v71 - 3);
            v75 = *((_OWORD *)v71 - 2);
            *(__int128 *)((char *)v73 - 21) = *(_OWORD *)(v71 - 21);
            *(v73 - 3) = v74;
            *(v73 - 2) = v75;
            v73 -= 3;
            v71 -= 48;
          }
          while (v71 != v72);
          v71 = (char *)*v121;
        }
        v59 = v68 + 3;
        *(_QWORD *)(a1 + 96) = v73;
        *(_QWORD *)(a1 + 104) = v68 + 3;
        *(_QWORD *)(a1 + 112) = v63 + 48 * v64;
        if (v71)
        {
          v76 = v71;
          goto LABEL_106;
        }
LABEL_107:
        *(_QWORD *)(a1 + 104) = v59;
LABEL_108:
        v44 += 3;
        if (v44 == v7)
          goto LABEL_109;
        continue;
      }
    }
    v9 = *(double *)(v6 + 8);
    v10 = *(double *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 24);
    v12 = *(_BYTE *)(v6 + 32);
    v13 = *(_BYTE *)(v6 + 33);
    if (a2 - v9 >= 0.01)
    {
      if (v10 - v9 - (a2 - v9) < 0.01)
      {
        v40 = 0;
        v41 = 0;
        v16 = 0.0;
        v15 = *(double *)(v6 + 16);
        v14 = *(_BYTE *)(v6 + 32);
        v10 = 0.0;
        v12 = 0;
LABEL_120:
        v96 = *(unsigned __int8 *)(v6 + 42);
        v97 = *(unsigned __int8 *)(v6 + 41);
        v98 = *(uint64_t **)(a1 + 96);
        v99 = *(unsigned __int8 *)(v6 + 40);
        v100 = *v98;
        *((double *)&v123 + 1) = v9;
        *(double *)&v124 = v15;
        *((_QWORD *)&v124 + 1) = v11;
        LOBYTE(v125) = v14;
        BYTE1(v125) = v13;
        *(_DWORD *)((char *)&v125 + 2) = *(_DWORD *)((char *)v98 + 34);
        HIWORD(v125) = *((_WORD *)v98 + 19);
        *((double *)&v126 + 1) = v16;
        *(double *)&v127 = v10;
        *((_QWORD *)&v127 + 1) = v40;
        LOBYTE(v128) = v12;
        HIBYTE(v128) = v41;
        *(_QWORD *)&v123 = v100;
        *(_QWORD *)&v126 = v100;
        HDRawQuantitySample::applyMask((uint64_t)&v123, v117);
        v101 = v99 != 0;
        v102 = v97 != 0;
        v103 = v96 != 0;
        if ((_BYTE)v125)
        {
          HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample(v115, (double *)&v123, v96 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v104 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(a1, *((unint64_t *)&v124 + 1));
            v105 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(a1, v104);
            HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>::addSample((uint64_t)v105, (double *)&v123, v97 == 0);
          }
          v101 = 1;
          v102 = 1;
          v103 = 1;
        }
        if ((_BYTE)v128)
        {
          LOWORD(v122) = v128;
          v106 = v127;
          v107 = (char *)*v121;
          *(_OWORD *)v107 = v126;
          *((_OWORD *)v107 + 1) = v106;
          *((_QWORD *)v107 + 4) = v122;
          v107[40] = v101;
          v107[41] = v102;
          v107[42] = v103;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_127;
      }
      v15 = a2;
      v14 = *(_BYTE *)(v6 + 32);
      v16 = a2;
    }
    else
    {
      v14 = 0;
      v15 = *(double *)(v6 + 16);
      v16 = *(double *)(v6 + 8);
    }
    v40 = *(_QWORD *)(v6 + 24);
    v41 = *(_BYTE *)(v6 + 33);
    goto LABEL_120;
  }
}

void sub_1B7CF2D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 264);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 264);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 264) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 256);
    std::__tree<std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 256), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 344), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 384);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7CF2F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 424);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7CF2FDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0xB0uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *((_QWORD *)v9 + 21) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 320);
  v7 = *(char **)(*(_QWORD *)a4 + 328);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 320);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 320);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 328);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 320);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 328);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 320);
      v15 = *(char **)(*(_QWORD *)a4 + 328);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 328);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 328);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 320);
          v25 = *(char **)(*(_QWORD *)a4 + 328);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 328);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 328);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 320);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 320);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 328);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 320);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 328);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 320);
      v41 = *(char **)(*(_QWORD *)a4 + 328);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 328);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 328);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 320);
      v11 = *(char **)(*(_QWORD *)a3 + 328);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 328);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 328);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 320);
      v24 = *(char **)(*(_QWORD *)a3 + 328);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 328);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 328);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 320);
            v31 = *(char **)(*(_QWORD *)a3 + 328);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 328);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 328);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 320);
    v14 = *(char **)(*(_QWORD *)a5 + 328);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 328);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 328);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 320);
        v23 = *(char **)(*(_QWORD *)a5 + 328);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 328);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 328);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 320);
            v32 = *(char **)(*(_QWORD *)a5 + 328);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 328);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 328);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 320);
    v16 = *(char **)(*(_QWORD *)a6 + 328);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 328);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 328);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 320);
        v25 = *(char **)(*(_QWORD *)a6 + 328);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 328);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 328);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 320);
            v34 = *(char **)(*(_QWORD *)a6 + 328);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 328);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 328);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 320);
                v43 = *(char **)(*(_QWORD *)a6 + 328);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 328);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 328);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D06790;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D06790;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addStatisticsFromFinishedBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>(HKStatistics *,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>> const&)::{lambda(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)#1}>,HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const& ()(HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 616))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 616))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7CF5AC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 592);
      v7 = *(_QWORD *)(a1 + 584);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7CF5CD0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  int v12;
  char v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  double v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  uint64_t **v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  double v63;
  double v64;
  unint64_t v65;
  char v66;

  v5 = a1 + 8;
  v6 = *(double *)(a1 + 8);
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = v10;
  v13 = v11;
  v14 = (unint64_t)v9;
  v15 = v8;
  v16 = v7;
  if (v6 - v7 >= 0.01)
  {
    if (v8 - v7 - (v6 - v7) >= 0.01)
    {
      v12 = *(unsigned __int8 *)(a2 + 32);
      v13 = *(_BYTE *)(a2 + 33);
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(double *)(a2 + 16);
      v16 = *(double *)(a1 + 8);
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      v16 = 0.0;
    }
  }
  v17 = *(uint64_t **)a2;
  v18 = *(double *)(a1 + 16);
  v19 = v18 - v16;
  v20 = v15 - v16 - (v18 - v16);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v20 < 0.01)
    {
LABEL_10:
      v65 = 0;
      v21 = 0;
      v66 = 0;
      v18 = 0.0;
      v22 = 0.0;
      if (!v12)
        goto LABEL_28;
      goto LABEL_11;
    }
    if (v19 >= 0.01)
      goto LABEL_27;
LABEL_25:
    v21 = v12;
    v28 = v14;
    v22 = v15;
    v18 = v16;
    if (!v21)
      return;
    goto LABEL_56;
  }
  if (v19 < 0.01)
    goto LABEL_25;
  if (v20 < 0.01)
    goto LABEL_10;
LABEL_27:
  v22 = v15;
  v65 = v14;
  v21 = v12;
  v66 = v13;
  v15 = *(double *)(a1 + 16);
  if (!v12)
  {
LABEL_28:
    v13 = v66;
    v28 = v65;
    if (!v21)
      return;
    goto LABEL_56;
  }
LABEL_11:
  v63 = v16;
  v64 = v15;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 288, v14, v14);
  v23 = *(_QWORD *)(a1 + 112);
  if (v23 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 160) <= 0)
  {
    v29.f64[1] = *(float64_t *)(a1 + 16);
    v24 = v63;
    v25 = v64;
    v29.f64[0] = v63;
    v30.f64[0] = *(float64_t *)(a1 + 8);
    v30.f64[1] = v64;
    v31 = (int8x16_t)vcgtq_f64(v30, v29);
    v30.f64[0] = v63;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v31, *(int8x16_t *)(a1 + 8), (int8x16_t)v30);
    if (!a3)
      goto LABEL_31;
    goto LABEL_22;
  }
  v24 = v63;
  v25 = v64;
  if (v63 < *(double *)(a1 + 48))
  {
    v26 = *(double *)(a1 + 8);
    if (v63 >= v26)
      v26 = v63;
    *(double *)(a1 + 48) = v26;
  }
  if (v64 > *(double *)(a1 + 56))
  {
    v27 = *(double *)(a1 + 16);
    if (v27 >= v64)
      v27 = v64;
    *(double *)(a1 + 56) = v27;
  }
  if (a3)
  {
LABEL_22:
    if (v24 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime(v5, v24);
      v24 = v63;
      v25 = v64;
      v23 = *(_QWORD *)(a1 + 112);
    }
  }
LABEL_31:
  v32 = *(_QWORD *)(a1 + 120);
  if (v23 >= v32)
  {
    v34 = *(_QWORD *)(a1 + 104);
    v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v34) >> 4);
    v36 = v35 + 1;
    if (v35 + 1 > 0x555555555555555)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - v34) >> 4);
    if (2 * v37 > v36)
      v36 = 2 * v37;
    if (v37 >= 0x2AAAAAAAAAAAAAALL)
      v38 = 0x555555555555555;
    else
      v38 = v36;
    if (v38)
    {
      v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
      v24 = v63;
      v25 = v64;
    }
    else
    {
      v39 = 0;
    }
    v40 = v38 + 48 * v35;
    v41 = v38 + 48 * v39;
    *(_QWORD *)v40 = v17;
    *(double *)(v40 + 8) = v24;
    *(double *)(v40 + 16) = v25;
    *(_QWORD *)(v40 + 24) = v14;
    *(_BYTE *)(v40 + 32) = v12;
    *(_BYTE *)(v40 + 33) = v13;
    *(_WORD *)(v40 + 40) = 0;
    *(_BYTE *)(v40 + 42) = 0;
    v33 = v40 + 48;
    v43 = *(char **)(a1 + 104);
    v42 = *(char **)(a1 + 112);
    if (v42 == v43)
    {
      v13 = v66;
      v28 = v65;
    }
    else
    {
      v13 = v66;
      v28 = v65;
      do
      {
        v44 = *((_OWORD *)v42 - 3);
        v45 = *((_OWORD *)v42 - 2);
        *(_OWORD *)(v40 - 21) = *(_OWORD *)(v42 - 21);
        *(_OWORD *)(v40 - 48) = v44;
        *(_OWORD *)(v40 - 32) = v45;
        v40 -= 48;
        v42 -= 48;
      }
      while (v42 != v43);
      v42 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v40;
    *(_QWORD *)(a1 + 112) = v33;
    *(_QWORD *)(a1 + 120) = v41;
    if (v42)
      operator delete(v42);
  }
  else
  {
    *(_QWORD *)v23 = v17;
    *(double *)(v23 + 8) = v24;
    *(double *)(v23 + 16) = v25;
    *(_QWORD *)(v23 + 24) = v14;
    *(_BYTE *)(v23 + 32) = v12;
    *(_BYTE *)(v23 + 33) = v13;
    *(_WORD *)(v23 + 40) = 0;
    v33 = v23 + 48;
    *(_BYTE *)(v23 + 42) = 0;
    v13 = v66;
    v28 = v65;
  }
  *(_QWORD *)(a1 + 112) = v33;
  if (!*(_BYTE *)(a1 + 200) || *(double *)(a1 + 176) <= v7)
  {
    *(_QWORD *)(a1 + 168) = v17;
    *(double *)(a1 + 176) = v7;
    *(double *)(a1 + 184) = v8;
    *(_QWORD *)(a1 + 192) = v9;
    *(_BYTE *)(a1 + 200) = v10;
    *(_BYTE *)(a1 + 201) = v11;
  }
  if (*(_BYTE *)(a1 + 33)
    && ((v46 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_canonicalSourceIDForSourceID(v5, v14), v47 = HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsForSource(v5, v46), !*((_BYTE *)v47 + 72))|| *((double *)v47 + 6) <= v7))
  {
    v47[5] = v17;
    *((double *)v47 + 6) = v7;
    *((double *)v47 + 7) = v8;
    v47[8] = v9;
    *((_BYTE *)v47 + 72) = v10;
    *((_BYTE *)v47 + 73) = v11;
    if (!v21)
      return;
  }
  else if (!v21)
  {
    return;
  }
LABEL_56:
  v48 = *(_QWORD *)(a1 + 480);
  v49 = *(_QWORD *)(a1 + 488);
  if (v48 >= v49)
  {
    v51 = *(_QWORD *)(a1 + 472);
    v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v51) >> 3);
    v53 = v52 + 1;
    if (v52 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v51) >> 3);
    if (2 * v54 > v53)
      v53 = 2 * v54;
    if (v54 >= 0x333333333333333)
      v55 = 0x666666666666666;
    else
      v55 = v53;
    if (v55)
      v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
    else
      v56 = 0;
    v57 = v55 + 40 * v52;
    v58 = v55 + 40 * v56;
    *(_QWORD *)v57 = v17;
    *(double *)(v57 + 8) = v18;
    *(double *)(v57 + 16) = v22;
    *(_QWORD *)(v57 + 24) = v28;
    *(_BYTE *)(v57 + 32) = v21;
    *(_BYTE *)(v57 + 33) = v13;
    v50 = v57 + 40;
    v60 = *(char **)(a1 + 472);
    v59 = *(char **)(a1 + 480);
    if (v59 != v60)
    {
      do
      {
        v61 = *(_OWORD *)(v59 - 40);
        v62 = *(_OWORD *)(v59 - 24);
        *(_WORD *)(v57 - 8) = *((_WORD *)v59 - 4);
        *(_OWORD *)(v57 - 24) = v62;
        *(_OWORD *)(v57 - 40) = v61;
        v57 -= 40;
        v59 -= 40;
      }
      while (v59 != v60);
      v59 = *(char **)(a1 + 472);
    }
    *(_QWORD *)(a1 + 472) = v57;
    *(_QWORD *)(a1 + 480) = v50;
    *(_QWORD *)(a1 + 488) = v58;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *(_QWORD *)v48 = v17;
    *(double *)(v48 + 8) = v18;
    *(double *)(v48 + 16) = v22;
    *(_QWORD *)(v48 + 24) = v28;
    *(_BYTE *)(v48 + 32) = v21;
    v50 = v48 + 40;
    *(_BYTE *)(v48 + 33) = v13;
  }
  *(_QWORD *)(a1 + 480) = v50;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 618))
  {
    *(_BYTE *)(a1 + 620) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 620) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7CF6290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 472), *(_QWORD *)(a1 + 480), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 480) - *(_QWORD *)(a1 + 472)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7CF6378(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *i;
  _QWORD *v15;

  v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 496), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 64);
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_QWORD *)(v8 + 216) = 0;
  if (*(_QWORD *)(v8 + 240))
  {
    v9 = *(_QWORD **)(a1 + 264);
    v10 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 264) = a1 + 272;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    if (v9[1])
      v11 = (_QWORD *)v9[1];
    else
      v11 = v9;
    if (v11)
    {
      v12 = (_QWORD *)v11[2];
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if ((_QWORD *)*v12 == v11)
        {
          *v12 = 0;
          while (1)
          {
            v15 = (_QWORD *)v12[1];
            if (!v15)
              break;
            do
            {
              v12 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; v13 = (_QWORD *)v12[1])
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (i = (_QWORD *)v12[2]; i; i = (_QWORD *)i[2])
          v12 = i;
        v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 496));
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 620))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 620) = 0;
  }

}

void sub_1B7CF6524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 616))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7CF65E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 632));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 616) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7CF6944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40D51310DCLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7CF6AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7CF6D5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  char v15;
  char v16;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    if (a7 - a6 - v7 >= 0.01)
    {
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  v11 = a5;
  v12 = a6;
  v13 = a7;
  v14 = a2;
  v15 = v8;
  v16 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v11, a3, a4);
  }
  else
  {
    v10 = *(double *)(a1 + 40) - a6;
    if (v10 >= 0.01)
    {
      if (a7 - a6 - v10 >= 0.01)
        a7 = *(double *)(a1 + 40);
    }
    else
    {
      v8 = 0;
    }
    v12 = a6;
    v13 = a7;
    v15 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v11, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 616))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7CF7A0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7CF7AAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI38HDStatisticsTemporallyWeightedDiscreteI48HDStatisticsTemporallyWeightedDiscreteParametersEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D06840;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_WORD *)(a1 + 608) = 1;
  *(_BYTE *)(a1 + 610) = 0;
  *(_BYTE *)(a1 + 612) = 0;
  *(_QWORD *)(a1 + 616) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D06840;
  v2 = *(void **)(a1 + 640);
  if (v2)
  {
    *(_QWORD *)(a1 + 648) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 576);
  if (v3)
  {
    *(_QWORD *)(a1 + 584) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 608) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

}

void sub_1B7CF7C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 616) = v4;
    v3 = v5;
  }

}

void sub_1B7CF7C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 78, a2);
  v7 = a2;
  v4 = a1[78];
  v5 = a1[75];
  a1[75] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[75]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7CF7E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  void *v3;
  _BYTE v4[8];
  double v5;

  if (*(_BYTE *)(a1 + 608))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v5);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7CF7EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 610))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 609))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 611))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 648);
    v18 = *(_QWORD *)(a1 + 656);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 640);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 648);
      v33 = *(char **)(a1 + 640);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 640);
      }
      *(_QWORD *)(a1 + 640) = v28;
      *(_QWORD *)(a1 + 648) = v21;
      *(_QWORD *)(a1 + 656) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 648) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7CF8108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 610))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 610) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 609))
    goto LABEL_5;
  v9 = *(void **)(a1 + 632);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_393);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 632);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 632);
  *(_QWORD *)(a1 + 632) = 0;

  *(_BYTE *)(a1 + 609) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 640);
    *(_QWORD *)(a1 + 656) = 0;
    *(_QWORD *)(a1 + 648) = 0;
    *(_QWORD *)(a1 + 640) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 640);
      v37 = *(__int128 **)(a1 + 648);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 648);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 648) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 640);
  v39 = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 584) != *(_QWORD *)(a1 + 576))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 584) != *(_QWORD *)(a1 + 576));
  }
  *(_BYTE *)(a1 + 610) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 612))
    {
      *(_BYTE *)(a1 + 612) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 610) = 0;
LABEL_83:

  return v7;
}

void sub_1B7CF8800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 610) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 611) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 610))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 610))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 632);
    *(_QWORD *)(a1 + 632) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 609) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 609))
  {
    v8 = *(void **)(a1 + 632);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 632);
      *(_QWORD *)(a1 + 632) = v9;

      v8 = *(void **)(a1 + 632);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7CF8AFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 608) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 608) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7CF8C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 608) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 608), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(int **)(a1 + 368);
  if (v9 != (int *)(a1 + 376))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, v9 + 10);
      v10 = *((_QWORD *)v9 + 4);
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (int *)*((_QWORD *)v9 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(int **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (int *)*((_QWORD *)v9 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (int *)(a1 + 376));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 576);
  for (k = *(int8x16_t **)(a1 + 584); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7CF8FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  void *v24;
  _QWORD **i;
  _QWORD **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  void *v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t j;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  __n128 v63;
  void *v64[2];
  __int128 v65;
  int8x16_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  uint64_t v73[4];
  void *__p;
  char *v75;
  unint64_t v76;
  int v77;
  void *v78[4];
  __int128 v79;
  void *v80[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int16 v84;
  uint64_t **v85;
  uint64_t *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  __int128 v97;
  int v98;
  __int128 v99;
  __int128 v100;
  int v101;
  void (**v102)(statistics::StatisticsEngine *__hidden);
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _BYTE v109[32];
  unint64_t v110;
  int v111;
  void *v112;
  __int128 v113;
  void *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int16 v120;
  _QWORD v121[2];
  char v122;

  v59 = a2;
  *(_BYTE *)(a1 + 608) = objc_msgSend(v59, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v59;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v63.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v64 = 0u;
  v65 = 0u;
  v110 = 0;
  v62 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v109, (const unsigned __int8 *)objc_msgSend(v62, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v110));
  v61 = a1;
  v102 = &off_1E6D09A88;
  v103 = 0;
  v107 = 0;
  v105 = 0;
  v106 = 0;
  v108 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v102, (PB::Reader *)v109);
  v63.n128_u64[0] = v104;
  if (v103)
  {
    v70 = 0;
    memset(v73, 0, sizeof(v73));
    __p = 0;
    memset(v78, 0, sizeof(v78));
    v79 = 0u;
    *(_OWORD *)v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0;
    v87 = 0;
    v76 = 0;
    v75 = 0;
    v77 = 0;
    v86 = 0;
    v85 = &v86;
    v88 = 0u;
    v89 = 0u;
    v90 = 1065353216;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0;
    v95 = 1065353216;
    v96 = 0u;
    v97 = 0u;
    v98 = 1065353216;
    v99 = 0u;
    v100 = 0u;
    v101 = 1065353216;
    v66 = vextq_s8(*(int8x16_t *)(v103 + 8), *(int8x16_t *)(v103 + 8), 8uLL);
    v4 = *(_QWORD *)(v103 + 72);
    v67 = *(_QWORD *)(v103 + 64);
    v68 = *(_BYTE *)(v103 + 185);
    v69 = *(_BYTE *)(v103 + 186);
    v71 = vextq_s8(*(int8x16_t *)(v103 + 24), *(int8x16_t *)(v103 + 24), 8uLL);
    v72 = v4;
    v5 = *(_QWORD *)(v103 + 80);
    v6 = *(_QWORD *)(v103 + 88);
    v60 = (_QWORD *)v103;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v76)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v76 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v76 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v75;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v75 = (char *)(v19 + 6);
          v76 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v75 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = (_QWORD *)v60[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v111, v23);
      v77 = v111;
      v78[0] = v112;
      if (v78[1])
      {
        v78[2] = v78[1];
        operator delete(v78[1]);
      }
      *(_OWORD *)&v78[1] = v113;
      v78[3] = v114;
      v114 = 0;
      v113 = 0uLL;
      v79 = v115;
      v24 = v80[0];
      if (v80[0])
      {
        v80[1] = v80[0];
        operator delete(v80[0]);
        v24 = (void *)v113;
      }
      *(_OWORD *)v80 = v116;
      v81 = v117;
      *(_QWORD *)&v117 = 0;
      v116 = 0uLL;
      v82 = v118;
      v83 = v119;
      v84 = v120;
      if (v24)
      {
        *((_QWORD *)&v113 + 1) = v24;
        operator delete(v24);
      }
    }
    v26 = (_QWORD **)v60[17];
    for (i = (_QWORD **)v60[18]; v26 != i; ++v26)
    {
      v27 = (uint64_t)*v26;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v111, *v26);
      v28 = *(_QWORD *)(v27 + 144);
      v29 = v86;
      v30 = &v86;
      v31 = &v86;
      if (v86)
      {
        do
        {
          while (1)
          {
            v31 = (uint64_t **)v29;
            v32 = v29[4];
            if (v32 <= v28)
              break;
            v29 = *v31;
            v30 = v31;
            if (!*v31)
              goto LABEL_37;
          }
          if (v32 >= v28)
          {
            v34 = (char *)v31;
            goto LABEL_40;
          }
          v29 = v31[1];
        }
        while (v29);
        v30 = v31 + 1;
      }
LABEL_37:
      v34 = (char *)operator new(0xA8uLL);
      v121[1] = &v86;
      *((_QWORD *)v34 + 4) = v28;
      *(_OWORD *)(v34 + 40) = 0u;
      *(_OWORD *)(v34 + 56) = 0u;
      *(_OWORD *)(v34 + 72) = 0u;
      *(_OWORD *)(v34 + 88) = 0u;
      *(_OWORD *)(v34 + 104) = 0u;
      *(_OWORD *)(v34 + 120) = 0u;
      *(_OWORD *)(v34 + 136) = 0u;
      *(_OWORD *)(v34 + 152) = 0u;
      v122 = 1;
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      *((_QWORD *)v34 + 2) = v31;
      *v30 = (uint64_t *)v34;
      v33 = (uint64_t *)v34;
      if (*v85)
      {
        v85 = (uint64_t **)*v85;
        v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v86, v33);
      ++v87;
      v121[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v121);
LABEL_40:
      v35 = (void *)*((_QWORD *)v34 + 7);
      *((_DWORD *)v34 + 10) = v111;
      *((_QWORD *)v34 + 6) = v112;
      if (v35)
      {
        *((_QWORD *)v34 + 8) = v35;
        operator delete(v35);
        *((_QWORD *)v34 + 7) = 0;
        *((_QWORD *)v34 + 8) = 0;
        *((_QWORD *)v34 + 9) = 0;
      }
      v36 = (void *)*((_QWORD *)v34 + 12);
      *(_OWORD *)(v34 + 56) = v113;
      *((_QWORD *)v34 + 9) = v114;
      v114 = 0;
      v113 = 0uLL;
      *((_OWORD *)v34 + 5) = v115;
      if (v36)
      {
        *((_QWORD *)v34 + 13) = v36;
        operator delete(v36);
        *((_QWORD *)v34 + 12) = 0;
        *((_QWORD *)v34 + 13) = 0;
        *((_QWORD *)v34 + 14) = 0;
        v36 = (void *)v113;
      }
      *((_OWORD *)v34 + 6) = v116;
      *((_QWORD *)v34 + 14) = v117;
      *(_QWORD *)&v117 = 0;
      v116 = 0uLL;
      *((_QWORD *)v34 + 15) = *((_QWORD *)&v117 + 1);
      v37 = v119;
      *((_OWORD *)v34 + 8) = v118;
      *((_OWORD *)v34 + 9) = v37;
      *((_WORD *)v34 + 80) = v120;
      if (v36)
      {
        *((_QWORD *)&v113 + 1) = v36;
        operator delete(v36);
      }
    }
    v38 = v60[5];
    for (j = v60[6]; v38 != j; v38 += 8)
    {
      v41 = *(double *)(*(_QWORD *)v38 + 8);
      v40 = *(double *)(*(_QWORD *)v38 + 16);
      if (v41 >= v40)
        v42 = *(double *)(*(_QWORD *)v38 + 16);
      else
        v42 = *(double *)(*(_QWORD *)v38 + 8);
      if (v40 < v41)
        v40 = *(double *)(*(_QWORD *)v38 + 8);
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::operator=((uint64_t)&v63.n128_i64[1], (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  v43 = v105;
  v44 = v106;
  if (v105 != v106)
  {
    v45 = (char *)v64[1];
    do
    {
      v46 = *(_QWORD *)(*(_QWORD *)v43 + 24);
      v47 = *(_QWORD *)(*(_QWORD *)v43 + 32);
      v48 = *(_QWORD *)(*(_QWORD *)v43 + 8);
      v49 = *(_QWORD *)(*(_QWORD *)v43 + 16);
      if ((unint64_t)v45 >= (unint64_t)v65)
      {
        v50 = (char *)v64[0];
        v51 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)v64[0]) >> 3);
        v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) > v52)
          v52 = 0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) >= 0x333333333333333)
          v53 = 0x666666666666666;
        else
          v53 = v52;
        if (v53)
        {
          v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          v45 = (char *)v64[1];
          v50 = (char *)v64[0];
        }
        else
        {
          v54 = 0;
        }
        v55 = v53 + 40 * v51;
        *(_QWORD *)v55 = v47;
        *(_QWORD *)(v55 + 8) = v46;
        *(_QWORD *)(v55 + 16) = v48;
        *(_QWORD *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        v56 = (char *)v55;
        if (v45 != v50)
        {
          do
          {
            v57 = *(_OWORD *)(v45 - 40);
            v58 = *(_OWORD *)(v45 - 24);
            *((_WORD *)v56 - 4) = *((_WORD *)v45 - 4);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while (v45 != v50);
          v50 = (char *)v64[0];
        }
        v45 = (char *)(v55 + 40);
        v64[0] = v56;
        v64[1] = (void *)(v55 + 40);
        *(_QWORD *)&v65 = v53 + 40 * v54;
        if (v50)
          operator delete(v50);
      }
      else
      {
        *(_QWORD *)v45 = v47;
        *((_QWORD *)v45 + 1) = v46;
        *((_QWORD *)v45 + 2) = v48;
        *((_QWORD *)v45 + 3) = v49;
        *((_WORD *)v45 + 16) = 1;
        v45 += 40;
      }
      v64[1] = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v102);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(v61 + 112), &v63);
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v63.n128_i64[1]);

}

void sub_1B7CF97E0(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x3C0]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x370]);
  v8 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v8;
    operator delete(v8);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x330]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy((_QWORD *)STACK[0x320]);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsRelative(&STACK[0x298]);
  v9 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v9;
    operator delete(v9);
  }
  objc_destroyWeak((id *)&STACK[0x278]);
  v10 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v10;
    operator delete(v10);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3E8]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_WORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 1065353216;
  return a1;
}

_QWORD *HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::~HDStatisticsCombined(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 464);
  if (v2)
  {
    *(_QWORD *)(a1 + 472) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 416);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 376);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 336);
  v2 = *(void **)(a1 + 312);
  if (v2)
  {
    *(_QWORD *)(a1 + 320) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 272);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 256));
  v3 = *(void **)(a1 + 176);
  if (v3)
  {
    *(_QWORD *)(a1 + 184) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 136);
  if (v4)
  {
    *(_QWORD *)(a1 + 144) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(_QWORD *)(a1 + 104) = v5;
    operator delete(v5);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v6 = *(void **)(a1 + 64);
  if (v6)
  {
    *(_QWORD *)(a1 + 72) = v6;
    operator delete(v6);
  }

  return a1;
}

_QWORD *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsRelative(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,0>(a1 + 4);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[456];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[392];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 624));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 608) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7CF9E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 58), a2 + 29);
  v4 = a2[30].n128_u64[1];
  a2[30].n128_u64[1] = 0;
  v5 = (void *)a1[61];
  a1[61] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t **v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD v39[2];
  char v40;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_DWORD *)(a2 + 120);
  v13 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 128) = v13;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 136), *(const void **)(a2 + 136), *(_QWORD *)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4);
  v14 = *(_QWORD *)(a2 + 160);
  v15 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = v14;
  *(_QWORD *)(a1 + 168) = v15;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 4);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v16 = *(_OWORD *)(a2 + 208);
  v17 = *(_OWORD *)(a2 + 224);
  v18 = *(_QWORD *)(a2 + 240);
  v19 = (uint64_t **)(a1 + 256);
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_QWORD *)(a1 + 240) = v18;
  *(_OWORD *)(a1 + 224) = v17;
  *(_OWORD *)(a1 + 208) = v16;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  v20 = *(_QWORD **)(a2 + 248);
  if (v20 != (_QWORD *)(a2 + 256))
  {
    do
    {
      v21 = *v19;
      v22 = (uint64_t *)(a1 + 256);
      if (*(uint64_t ***)(a1 + 248) == v19)
        goto LABEL_11;
      v23 = *v19;
      v24 = (uint64_t *)(a1 + 256);
      if (v21)
      {
        do
        {
          v22 = v23;
          v23 = (uint64_t *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          v22 = (uint64_t *)v24[2];
          v25 = *v22 == (_QWORD)v24;
          v24 = v22;
        }
        while (v25);
      }
      v26 = v20[4];
      if (v22[4] < v26)
      {
LABEL_11:
        if (v21)
          v27 = (uint64_t **)v22;
        else
          v27 = (uint64_t **)(a1 + 256);
        if (v21)
          v28 = (uint64_t **)(v22 + 1);
        else
          v28 = (uint64_t **)(a1 + 256);
        if (*v28)
          goto LABEL_28;
      }
      else
      {
        v28 = (uint64_t **)(a1 + 256);
        v27 = (uint64_t **)(a1 + 256);
        if (v21)
        {
          v29 = *v19;
          while (1)
          {
            while (1)
            {
              v27 = (uint64_t **)v29;
              v30 = v29[4];
              if (v30 <= v26)
                break;
              v29 = *v27;
              v28 = v27;
              if (!*v27)
                goto LABEL_27;
            }
            if (v30 >= v26)
              goto LABEL_28;
            v29 = v27[1];
            if (!v29)
            {
              v28 = v27 + 1;
              break;
            }
          }
        }
      }
LABEL_27:
      v31 = operator new(0xA8uLL);
      v39[0] = v31;
      v39[1] = a1 + 256;
      v40 = 0;
      v31[4] = v20[4];
      *((_DWORD *)v31 + 10) = *((_DWORD *)v20 + 10);
      v31[6] = v20[6];
      v31[7] = 0;
      v31[8] = 0;
      v31[9] = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v31 + 7, (const void *)v20[7], v20[8], (uint64_t)(v20[8] - v20[7]) >> 4);
      v32 = v20[10];
      v33 = v20[11];
      v31[12] = 0;
      v31[10] = v32;
      v31[11] = v33;
      v31[13] = 0;
      v31[14] = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v31 + 12, (const void *)v20[12], v20[13], (uint64_t)(v20[13] - v20[12]) >> 4);
      v31[15] = v20[15];
      v34 = *((_OWORD *)v20 + 8);
      v35 = *((_OWORD *)v20 + 9);
      v31[20] = v20[20];
      *((_OWORD *)v31 + 8) = v34;
      *((_OWORD *)v31 + 9) = v35;
      v40 = 1;
      std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 248), (uint64_t)v27, v28, v31);
      v39[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
LABEL_28:
      v36 = (_QWORD *)v20[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v20[2];
          v25 = *v37 == (_QWORD)v20;
          v20 = v37;
        }
        while (!v25);
      }
      v20 = v37;
    }
    while (v37 != (_QWORD *)(a2 + 256));
  }
  std::unordered_set<long long>::unordered_set(a1 + 272, a2 + 272);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 336, a2 + 336);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 376, a2 + 376);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 416, a2 + 416);
  return a1;
}

void sub_1B7CFA270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, void **a11, id *location, void **a13, char a14)
{
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  void *v22;
  void *v23;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v19);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v18);
  v21 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v14 + 320) = v21;
    operator delete(v21);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(*v15);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsRelative(a10);
  v22 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v14 + 104) = v22;
    operator delete(v22);
  }
  objc_destroyWeak(location);
  v23 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v14 + 72) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,0>(v1 + 4);
    operator delete(v1);
  }
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 136, (__n128 *)(a2 + 136));
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 176, (__n128 *)(a2 + 176));
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v10 = *(_OWORD *)(a2 + 208);
  v11 = *(_OWORD *)(a2 + 224);
  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(_OWORD *)(a1 + 208) = v10;
  *(_OWORD *)(a1 + 224) = v11;
  v12 = a1 + 256;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 256));
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v13 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 256) = v13;
  v14 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 264) = v14;
  if (v14)
  {
    *(_QWORD *)(v13 + 16) = v12;
    *(_QWORD *)(a2 + 248) = a2 + 256;
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 264) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 248) = v12;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 272, (uint64_t *)(a2 + 272));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 312, (__n128 *)(a2 + 312));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 336, (uint64_t *)(a2 + 336));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 376, (uint64_t *)(a2 + 376));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 416, (uint64_t *)(a2 + 416));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  double v5;
  id v6;
  double *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  void *v41;
  void *v42;
  int v43;
  void *v45;
  void *v46;
  _QWORD v47[3];
  _QWORD *v48;
  _QWORD v49[3];
  _QWORD *v50;
  _QWORD v51[3];
  _QWORD *v52;
  _BYTE v53[24];
  _BYTE *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v5 = *(double *)a2;
  v6 = objc_alloc(MEMORY[0x1E0C99D68]);
  v7 = (double *)(a2 + 40);
  if (v5 != -1.79769313e308)
    v7 = (double *)a2;
  v8 = (void *)objc_msgSend(v6, "initWithTimeIntervalSinceReferenceDate:", *v7);
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v10 = (void *)v9;
  v11 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v12 = *(id *)(a1 + 16);
    if (objc_msgSend(v12, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v12, "underlyingSampleType");
      WeakRetained = (id)objc_claimAutoreleasedReturnValue();

      v11 = WeakRetained;
    }

  }
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v11, v8, v10);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v45 = v10;
      v46 = v8;
      WeakRetained = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(a2 + 312);
      v14 = *(uint64_t **)(a2 + 320);
      while (v15 != v14)
      {
        v16 = *v15;
        v17 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v17, "sourceForSourceID:", v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          if ((objc_msgSend(WeakRetained, "containsObject:", v18) & 1) == 0)
            objc_msgSend(WeakRetained, "addObject:", v18);
        }

        ++v15;
      }
      v19 = (void *)objc_msgSend(WeakRetained, "copy");
      v10 = v45;
      v8 = v46;
      objc_msgSend(v13, "_setSources:", v19);

    }
  }

  v47[0] = &off_1E6D06A20;
  v48 = v47;
  v20 = v13;
  v21 = (uint64_t)v48;
  if (!v48)
    goto LABEL_22;
  if (v48 != v47)
  {
    v21 = (*(uint64_t (**)(void))(*v48 + 16))();
LABEL_22:
    v52 = (_QWORD *)v21;
    goto LABEL_24;
  }
  v52 = v51;
  (*(void (**)(uint64_t, _QWORD *))(v47[0] + 24))((uint64_t)v47, v51);
LABEL_24:
  v54 = 0;
  v22 = operator new(0x28uLL);
  *v22 = &off_1E6D06910;
  v23 = (uint64_t)v52;
  if (!v52)
  {
LABEL_27:
    v22[4] = v23;
    goto LABEL_29;
  }
  if (v52 != v51)
  {
    v23 = (*(uint64_t (**)(void))(*v52 + 16))();
    goto LABEL_27;
  }
  v22[4] = v22 + 1;
  (*(void (**)(_QWORD *))(v51[0] + 24))(v51);
LABEL_29:
  v54 = v22;
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket(a1, v20, a2, (uint64_t)v53);
  v24 = v54;
  if (v54 == v53)
  {
    v25 = 4;
    v24 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_34;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_34:
  v26 = v52;
  if (v52 == v51)
  {
    v27 = 4;
    v26 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_39;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_39:
  v28 = (uint64_t)v48;
  if (!v48)
  {
LABEL_42:
    v50 = (_QWORD *)v28;
    goto LABEL_44;
  }
  if (v48 != v47)
  {
    v28 = (*(uint64_t (**)(void))(*v48 + 16))();
    goto LABEL_42;
  }
  v50 = v49;
  (*(void (**)(uint64_t, _QWORD *))(v47[0] + 24))((uint64_t)v47, v49);
LABEL_44:
  v54 = 0;
  v29 = operator new(0x28uLL);
  *v29 = &off_1E6D069A0;
  v30 = (uint64_t)v50;
  if (!v50)
  {
LABEL_47:
    v29[4] = v30;
    goto LABEL_49;
  }
  if (v50 != v49)
  {
    v30 = (*(uint64_t (**)(void))(*v50 + 16))();
    goto LABEL_47;
  }
  v29[4] = v29 + 1;
  (*(void (**)(_QWORD *))(v49[0] + 24))(v49);
LABEL_49:
  v54 = v29;
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket(a1, v20, a2, (uint64_t)v53);
  v31 = v54;
  if (v54 == v53)
  {
    v32 = 4;
    v31 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_54;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_54:
  v33 = v50;
  if (v50 == v49)
  {
    v34 = 4;
    v33 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_59;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_59:

  v35 = v48;
  if (v48 == v47)
  {
    v36 = 4;
    v35 = v47;
    goto LABEL_63;
  }
  if (v48)
  {
    v36 = 5;
LABEL_63:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "averageQuantity");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  if (v38)
  {
    objc_msgSend(v20, "averageQuantity");
    v11 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v11, "isCompatibleWithUnit:", v37) & 1) == 0)
    {

LABEL_78:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v37);
      goto LABEL_79;
    }
  }
  objc_msgSend(v20, "minimumQuantity");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  if (v39)
  {
    objc_msgSend(v20, "minimumQuantity");
    WeakRetained = (id)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(WeakRetained, "isCompatibleWithUnit:", v37))
    {
      v40 = 1;
      goto LABEL_72;
    }
  }
  objc_msgSend(v20, "maximumQuantity");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  if (v41)
  {
    objc_msgSend(v20, "maximumQuantity");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend(v42, "isCompatibleWithUnit:", v37);

    v40 = v43 ^ 1;
    if (v39)
      goto LABEL_72;
  }
  else
  {
    v40 = 0;
    if (v39)
    {
LABEL_72:

      if (v38)
        goto LABEL_73;
      goto LABEL_77;
    }
  }
  if (v38)
  {
LABEL_73:

    if ((v40 & 1) == 0)
      goto LABEL_79;
    goto LABEL_78;
  }
LABEL_77:

  if (v40)
    goto LABEL_78;
LABEL_79:

  return v20;
}

void sub_1B7CFAB08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (v4)
  if (v2)

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 296);
  v2 = *(_QWORD *)(a1 + 312);
  if (v1 != (*(_QWORD *)(a1 + 320) - v2) >> 3)
  {
    v4 = (void **)(a1 + 312);
    *(_QWORD *)(a1 + 320) = v2;
    std::vector<long long>::reserve((void **)(a1 + 312), v1);
    v5 = *(_QWORD **)(a1 + 288);
    if (v5)
    {
      v6 = *(char **)(a1 + 320);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 328);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 312);
            v6 = *(char **)(a1 + 320);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 312) = v16;
          *(_QWORD *)(a1 + 320) = v9;
          *(_QWORD *)(a1 + 328) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 320) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7CFAEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  int64_t v12;
  char v13;
  char v14;
  double v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  id WeakRetained;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  double v49;
  int64_t v50;
  _BOOL4 var4;
  BOOL var5;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  unint64_t var3;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  char *v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  void *v81;
  unint64_t v82;
  uint64_t *v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  double v100;
  int v101;
  int v102;
  int v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  unint64_t v107;
  uint64_t *v108;
  __int128 v109;
  char *v110;
  double v111;
  void *v112;
  void *v113;
  _QWORD *v114;
  double **v115;
  double **v116;
  id *location;
  void *v118;
  id v119;
  uint64_t *v120;
  int64_t v121;
  double **v122;
  char v123;
  BOOL v124;
  int64_t v125;
  void **v126;
  uint64_t v127;
  HDRawQuantitySample v128;
  __int128 v129;
  __int128 v130;
  __int16 v131;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v126 = (void **)(a1 + 96);
    v122 = (double **)(a1 + 64);
    v120 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    v115 = (double **)(a1 + 176);
    v116 = (double **)(a1 + 136);
    v114 = (_QWORD *)(a1 + 256);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_124:
      *(double *)(a1 + 56) = a2;
LABEL_125:
      v111 = *(double *)(a1 + 56);
      if (v111 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval, HDStatisticsTimeInterval>>]");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v112, "handleFailureInFunction:file:lineNumber:description:", v113, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v111 = *(double *)(a1 + 56);
      }
      v5 = v111;
      if (v111 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v20 = a2;
      v21 = a2;
      v22 = v5;
      v23 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v24 = *(double *)(v23 + 8);
          v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21)
            v21 = *(double *)(v23 + 8);
          if (v25 > v5)
            v27 = *(double *)(v23 + 16);
          else
            v27 = v20;
          if (v25 < v20)
          {
            v22 = v5;
            v20 = v27;
          }
          v23 += 48;
        }
        while ((__int128 *)v23 != v7);
      }
      if (v20 >= v21)
        v28 = v21;
      else
        v28 = v20;
      v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        v30 = v29 * floor(v28 / v29);
        v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31)
          v28 = v30;
        else
          v28 = v31;
      }
      *v126 = 0;
      v126[1] = 0;
      v126[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        v35 = *(char **)(a1 + 96);
        v34 = *(char **)(a1 + 104);
        v36 = v32;
        if (v34 != v35)
        {
          do
          {
            v37 = *((_OWORD *)v34 - 3);
            v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          v34 = (char *)*v126;
        }
        *(_QWORD *)(a1 + 96) = v36;
        *(_QWORD *)(a1 + 104) = v32;
        *(_QWORD *)(a1 + 112) = &v32[48 * v33];
        if (v34)
          operator delete(v34);
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v128.var0 = a1;
        v40 = 126 - 2 * __clz(v8);
        if ((__int128 *)v6 == v7)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v128, v41, 1);
      }
      if (*(_BYTE *)(a1 + 25))
        v119 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v119 = 0;
      v118 = (void *)v6;
      if ((__int128 *)v6 == v7)
      {
LABEL_106:
        *(double *)(a1 + 160) = HKIntervalMask<double>::removeIntervalsBefore(v116, v28) + *(double *)(a1 + 160);
        *(double *)(a1 + 200) = HKIntervalMask<double>::removeIntervalsBefore(v115, v28) + *(double *)(a1 + 200);
        v96 = *(_QWORD **)(a1 + 248);
        if (v96 != v114)
        {
          do
          {
            *((double *)v96 + 10) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 7, v28)
                                  + *((double *)v96 + 10);
            *((double *)v96 + 15) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 12, v28)
                                  + *((double *)v96 + 15);
            v97 = (_QWORD *)v96[1];
            if (v97)
            {
              do
              {
                v98 = v97;
                v97 = (_QWORD *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                v98 = (_QWORD *)v96[2];
                v99 = *v98 == (_QWORD)v96;
                v96 = v98;
              }
              while (!v99);
            }
            v96 = v98;
          }
          while (v98 != v114);
        }
        *(double *)(a1 + 56) = v28;

        if (v118)
          operator delete(v118);
        goto LABEL_125;
      }
      v121 = 0;
      v44 = 0;
      v45 = v6;
      while (2)
      {
        v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v128.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v128.var2 = v46;
        *(_QWORD *)&v128.var4 = *(_QWORD *)(v45 + 32);
        v47 = v46;
        v48 = v28 - v128.var1;
        v49 = *(double *)&v46 - v128.var1;
        if (v49 - (v28 - v128.var1) < 0.01)
        {
          v50 = 0;
          var4 = 0;
          var5 = 0;
          v53 = 0.0;
          v47 = 0;
          v54 = 0.0;
          if (!v128.var4)
            goto LABEL_59;
LABEL_54:
          v124 = var5;
          v125 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v128, v122);
          v56 = *(unsigned __int8 *)(v45 + 42);
          v57 = *(unsigned __int8 *)(v45 + 41);
          v123 = *(_BYTE *)(v45 + 40);
          if (!v128.var4)
            goto LABEL_87;
          if ((v44 & 1) != 0)
          {
            var3 = v128.var3;
            if (v121 == v128.var3 || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(v120, &v128, v56 == 0);
              v56 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(v120, &v128, v56 == 0);
            v56 = 1;
            var3 = v128.var3;
            v121 = v128.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_86;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v69)
            goto LABEL_85;
          objc_msgSend(v119, "objectForKeyedSubscript:", v69);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v71 = v70;
          if (v70)
          {
            if (objc_msgSend(v70, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              v44 = 1;
LABEL_87:
              if (var4)
              {
                v84 = v56 != 0;
                v86 = *(char **)(a1 + 104);
                v85 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((_QWORD *)v86 + 2) = v47;
                  *((_QWORD *)v86 + 3) = v125;
                  v86[32] = var4;
                  v86[33] = v124;
                  v86[40] = v123;
                  v86[41] = v57;
                  v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                v80 = (char *)*v126;
                v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (_BYTE *)*v126) >> 4);
                v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (_QWORD)v80) >> 4);
                if (2 * v89 > v88)
                  v88 = 2 * v89;
                if (v89 >= 0x2AAAAAAAAAAAAAALL)
                  v90 = 0x555555555555555;
                else
                  v90 = v88;
                if (v90)
                {
                  v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  v80 = *(char **)(a1 + 96);
                  v86 = *(char **)(a1 + 104);
                }
                else
                {
                  v91 = 0;
                }
                v92 = v90 + 48 * v87;
                *(double *)v92 = v54;
                *(double *)(v92 + 8) = v53;
                *(_QWORD *)(v92 + 16) = v47;
                *(_QWORD *)(v92 + 24) = v125;
                *(_BYTE *)(v92 + 32) = var4;
                *(_BYTE *)(v92 + 33) = v124;
                *(_BYTE *)(v92 + 40) = v123;
                *(_BYTE *)(v92 + 41) = v57;
                *(_BYTE *)(v92 + 42) = v84;
                v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    v94 = *((_OWORD *)v86 - 3);
                    v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 48) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  v80 = (char *)*v126;
                }
                v63 = (_OWORD *)(v92 + 48);
                *(_QWORD *)(a1 + 96) = v93;
                *(_QWORD *)(a1 + 104) = v92 + 48;
                *(_QWORD *)(a1 + 112) = v90 + 48 * v91;
                if (v80)
LABEL_103:
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v119, "setObject:forKeyedSubscript:", v81, v69);

          }
          v82 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
          v83 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v82);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(v83, &v128, v57 == 0);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          v128.var4 = 0;
          goto LABEL_59;
        }
        v55 = v48 / v49 * v128.var0;
        v50 = v128.var3;
        var5 = v128.var5;
        v54 = v128.var0 - v55;
        v128.var0 = v55;
        v128.var2 = v28;
        v53 = v28;
        var4 = v128.var4;
        if (v128.var4)
          goto LABEL_54;
LABEL_59:
        v59 = *(_OWORD **)(a1 + 104);
        v60 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          v61 = *(_OWORD *)v45;
          v62 = *(_OWORD *)(v45 + 32);
          v59[1] = *(_OWORD *)(v45 + 16);
          v59[2] = v62;
          *v59 = v61;
          v63 = v59 + 3;
          goto LABEL_104;
        }
        v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (_BYTE *)*v126) >> 4);
        v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (_QWORD)*v126) >> 4);
        if (2 * v66 > v65)
          v65 = 2 * v66;
        if (v66 >= 0x2AAAAAAAAAAAAAALL)
          v67 = 0x555555555555555;
        else
          v67 = v65;
        if (v67)
          v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        else
          v68 = 0;
        v72 = (_OWORD *)(v67 + 48 * v64);
        v73 = *(_OWORD *)v45;
        v74 = *(_OWORD *)(v45 + 32);
        v72[1] = *(_OWORD *)(v45 + 16);
        v72[2] = v74;
        *v72 = v73;
        v76 = *(char **)(a1 + 96);
        v75 = *(char **)(a1 + 104);
        v77 = v72;
        if (v75 != v76)
        {
          do
          {
            v78 = *((_OWORD *)v75 - 3);
            v79 = *((_OWORD *)v75 - 2);
            *(_OWORD *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          v75 = (char *)*v126;
        }
        v63 = v72 + 3;
        *(_QWORD *)(a1 + 96) = v77;
        *(_QWORD *)(a1 + 104) = v72 + 3;
        *(_QWORD *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(_QWORD *)(a1 + 104) = v63;
LABEL_105:
        v45 += 48;
        if ((__int128 *)v45 == v7)
          goto LABEL_106;
        continue;
      }
    }
    v10 = *(double *)v6;
    v9 = *(double *)(v6 + 8);
    v11 = *(double *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 24);
    v13 = *(_BYTE *)(v6 + 32);
    v14 = *(_BYTE *)(v6 + 33);
    v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        v42 = 0;
        v43 = 0;
        v18 = 0.0;
        v17 = *(double *)(v6 + 16);
        v16 = *(_BYTE *)(v6 + 32);
        v19 = 0.0;
        v11 = 0.0;
        v13 = 0;
LABEL_117:
        v101 = *(unsigned __int8 *)(v6 + 42);
        v102 = *(unsigned __int8 *)(v6 + 41);
        v103 = *(unsigned __int8 *)(v6 + 40);
        v128.var0 = v10;
        v128.var1 = v9;
        v128.var2 = v17;
        v128.var3 = v12;
        v128.var4 = v16;
        v128.var5 = v14;
        *(_DWORD *)(&v128.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v128.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&v129 = v18;
        *((double *)&v129 + 1) = v19;
        *(double *)&v130 = v11;
        *((_QWORD *)&v130 + 1) = v42;
        LOBYTE(v131) = v13;
        HIBYTE(v131) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v128, v122);
        v104 = v103 != 0;
        v105 = v102 != 0;
        v106 = v101 != 0;
        if (v128.var4)
        {
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(v120, &v128, v101 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v107 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v128.var3);
            v108 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v107);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(v108, &v128, v102 == 0);
          }
          v104 = 1;
          v105 = 1;
          v106 = 1;
        }
        if ((_BYTE)v131)
        {
          LOWORD(v127) = v131;
          v109 = v130;
          v110 = (char *)*v126;
          *(_OWORD *)v110 = v129;
          *((_OWORD *)v110 + 1) = v109;
          *((_QWORD *)v110 + 4) = v127;
          v110[40] = v104;
          v110[41] = v105;
          v110[42] = v106;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_124;
      }
      v100 = v10 * (v15 / (v11 - v9));
      v17 = a2;
      v16 = *(_BYTE *)(v6 + 32);
      v18 = v10 - v100;
      v10 = v100;
      v19 = a2;
    }
    else
    {
      v16 = 0;
      v17 = *(double *)(v6 + 16);
      v18 = *(double *)v6;
      v19 = *(double *)(v6 + 8);
    }
    v42 = *(_QWORD *)(v6 + 24);
    v43 = *(_BYTE *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1B7CFB864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  int v8;
  void *v9;
  _OWORD *v10;
  void *v11;
  __int128 v12;

  v5 = result;
  v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v6 = 1;
  if (v6)
  {
    if (v6 == 1)
    {
      if (!*(_DWORD *)result)
      {
        v8 = 1;
LABEL_15:
        *(_DWORD *)result = v8;
        result[1] = 0;
        v10 = result + 2;
        v9 = (void *)result[2];
        if (v9)
        {
          v5[3] = (uint64_t)v9;
          operator delete(v9);
        }
        v11 = (void *)v5[7];
        v5[6] = 0;
        v12 = 0uLL;
        *v10 = 0u;
        *((_OWORD *)v5 + 2) = 0u;
        if (v11)
        {
          v5[8] = (uint64_t)v11;
          operator delete(v11);
          v12 = 0uLL;
        }
        *(_OWORD *)(v5 + 7) = v12;
        *(_OWORD *)(v5 + 9) = v12;
        HDStatisticsTimeInterval::addSample(v5 + 1, a2, a3);
        v7 = v5 + 6;
        return HDStatisticsTimeInterval::addSample(v7, a2, a3);
      }
    }
    else if (v6 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        HDStatisticsTimeInterval::addSample(result + 1, a2, 1);
        return HDStatisticsTimeInterval::addSample(v5 + 6, a2, 1);
      }
      v8 = 2;
      goto LABEL_15;
    }
  }
  else if (!*(_DWORD *)result)
  {
    ++result;
    if (!v5[1])
    {
      HDStatisticsTimeInterval::addSample(result, a2, a3);
      v7 = v5 + 6;
      return HDStatisticsTimeInterval::addSample(v7, a2, a3);
    }
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 256);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 256);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 256) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 248);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 248), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 336), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 376);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7CFBBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 416);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7CFBC70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v10 = (char *)operator new(0xA8uLL);
    v12[1] = v6;
    *((_QWORD *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    v13 = 1;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 312);
  v7 = *(char **)(*(_QWORD *)a4 + 320);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 312);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 312);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 320);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 312);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 320);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 312);
      v15 = *(char **)(*(_QWORD *)a4 + 320);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 320);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 320);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 312);
          v25 = *(char **)(*(_QWORD *)a4 + 320);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 320);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 320);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 312);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 312);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 320);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 312);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 320);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 312);
      v41 = *(char **)(*(_QWORD *)a4 + 320);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 320);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 320);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 312);
      v11 = *(char **)(*(_QWORD *)a3 + 320);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 320);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 320);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 312);
      v24 = *(char **)(*(_QWORD *)a3 + 320);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 320);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 320);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 312);
            v31 = *(char **)(*(_QWORD *)a3 + 320);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 320);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 320);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 312);
    v14 = *(char **)(*(_QWORD *)a5 + 320);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 320);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 320);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 312);
        v23 = *(char **)(*(_QWORD *)a5 + 320);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 320);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 320);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 312);
            v32 = *(char **)(*(_QWORD *)a5 + 320);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 320);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 320);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 312);
    v16 = *(char **)(*(_QWORD *)a6 + 320);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 320);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 320);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 312);
        v25 = *(char **)(*(_QWORD *)a6 + 320);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 320);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 320);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 312);
            v34 = *(char **)(*(_QWORD *)a6 + 320);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 320);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 320);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 312);
                v43 = *(char **)(*(_QWORD *)a6 + 320);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 320);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 320);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  id v7;
  void *v8;
  void *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  __n128 v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  char **v28;
  char *v29;
  unint64_t v30;
  id v31;
  id v32;
  void *v33;
  char v34;
  char *v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  int8x8_t prime;
  void *v41;
  void *v42;
  uint64_t v43;
  _QWORD **v44;
  unint64_t v45;
  uint8x8_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  _QWORD *i;
  unint64_t v51;
  char **v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;
  _QWORD *v57;
  BOOL v58;
  void *v59;
  id *v60;
  id v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  unint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  _QWORD *v78;
  void *v80[2];
  void *v81[2];
  float v82;
  void *__p;
  void *v84;
  _QWORD v85[2];
  char v86;

  v7 = a2;
  v8 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v77 = a3;
  v10 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v80, a3);
  v11 = *(_QWORD *)(a4 + 24);
  if (!v11)
    std::__throw_bad_function_call[abi:ne180100]();
  v12 = (*(uint64_t (**)(uint64_t, void **, __n128))(*(_QWORD *)v11 + 48))(v11, v80, v10);
  v13 = *(double **)(v12 + 8);
  v14 = 0.0;
  while (v13 != *(double **)(v12 + 16))
  {
    v16 = *v13;
    v15 = v13[1];
    v13 += 2;
    v14 = v14 + v15 - v16;
  }
  objc_msgSend(v8, "quantityWithUnit:doubleValue:", v9, v14 + *(double *)(v12 + 32));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setDuration:", v17);

  if (__p)
  {
    v84 = __p;
    operator delete(__p);
  }
  if (v81[0])
  {
    v81[1] = v81[0];
    operator delete(v81[0]);
  }

  v18 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v80, a3);
  v19 = *(_QWORD *)(a4 + 24);
  if (!v19)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v7, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(uint64_t, void **, __n128))(*(_QWORD *)v19 + 48))(v19, v80, v18));
  if (__p)
  {
    v84 = __p;
    operator delete(__p);
  }
  if (v81[0])
  {
    v81[1] = v81[0];
    operator delete(v81[0]);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_119;
  v73 = v7;
  v76 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v75 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)v80 = 0u;
  *(_OWORD *)v81 = 0u;
  v82 = 1.0;
  v20 = *(_QWORD **)(a3 + 248);
  v78 = (_QWORD *)(a3 + 256);
  if (v20 == (_QWORD *)(a3 + 256))
    goto LABEL_118;
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a3, v20[4]);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (!v21)
      goto LABEL_94;
    v23 = objc_msgSend(v21, "hash");
    v24 = v23;
    v25 = (unint64_t)v80[1];
    if (!v80[1])
      goto LABEL_35;
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)v80[1]);
    v26.i16[0] = vaddlv_u8(v26);
    v27 = v26.u32[0];
    if (v26.u32[0] > 1uLL)
    {
      v4 = v23;
      if ((void *)v23 >= v80[1])
        v4 = v23 % (unint64_t)v80[1];
    }
    else
    {
      v4 = ((unint64_t)v80[1] - 1) & v23;
    }
    v28 = (char **)*((_QWORD *)v80[0] + v4);
    if (!v28 || (v29 = *v28) == 0)
    {
LABEL_35:
      v35 = (char *)operator new(0x98uLL);
      v85[0] = v35;
      v85[1] = v81;
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = v24;
      *((_QWORD *)v35 + 2) = v22;
      *(_OWORD *)(v35 + 24) = 0u;
      *(_OWORD *)(v35 + 40) = 0u;
      *(_OWORD *)(v35 + 56) = 0u;
      *(_OWORD *)(v35 + 72) = 0u;
      *(_OWORD *)(v35 + 88) = 0u;
      *(_OWORD *)(v35 + 104) = 0u;
      *(_OWORD *)(v35 + 120) = 0u;
      *(_OWORD *)(v35 + 136) = 0u;
      v86 = 1;
      v36 = (float)((unint64_t)v81[1] + 1);
      if (v25 && (float)(v82 * (float)v25) >= v36)
      {
LABEL_81:
        v52 = (char **)*((_QWORD *)v80[0] + v4);
        v29 = (char *)v85[0];
        if (v52)
        {
          *(_QWORD *)v85[0] = *v52;
        }
        else
        {
          *(_QWORD *)v85[0] = v81[0];
          v81[0] = v29;
          *((_QWORD *)v80[0] + v4) = v81;
          if (!*(_QWORD *)v29)
          {
LABEL_90:
            v85[0] = 0;
            ++v81[1];
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v85);
            goto LABEL_91;
          }
          v53 = *(_QWORD *)(*(_QWORD *)v29 + 8);
          if ((v25 & (v25 - 1)) != 0)
          {
            if (v53 >= v25)
              v53 %= v25;
          }
          else
          {
            v53 &= v25 - 1;
          }
          v52 = (char **)((char *)v80[0] + 8 * v53);
        }
        *v52 = v29;
        goto LABEL_90;
      }
      v37 = (v25 & (v25 - 1)) != 0;
      if (v25 < 3)
        v37 = 1;
      v38 = v37 | (2 * v25);
      v39 = vcvtps_u32_f32(v36 / v82);
      if (v38 <= v39)
        prime = (int8x8_t)v39;
      else
        prime = (int8x8_t)v38;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v25 = (unint64_t)v80[1];
      if ((void *)*(_QWORD *)&prime > v80[1])
        goto LABEL_47;
      if ((void *)*(_QWORD *)&prime < v80[1])
      {
        v47 = vcvtps_u32_f32((float)(unint64_t)v81[1] / v82);
        if (v80[1] < (void *)3
          || (v48 = (uint8x8_t)vcnt_s8((int8x8_t)v80[1]), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
        {
          v47 = std::__next_prime(v47);
        }
        else
        {
          v49 = 1 << -(char)__clz(v47 - 1);
          if (v47 >= 2)
            v47 = v49;
        }
        if (*(_QWORD *)&prime <= v47)
          prime = (int8x8_t)v47;
        if (*(_QWORD *)&prime >= v25)
        {
          v25 = (unint64_t)v80[1];
        }
        else
        {
          if (prime)
          {
LABEL_47:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v41 = operator new(8 * *(_QWORD *)&prime);
            v42 = v80[0];
            v80[0] = v41;
            if (v42)
              operator delete(v42);
            v43 = 0;
            v80[1] = (void *)prime;
            do
              *((_QWORD *)v80[0] + v43++) = 0;
            while (*(_QWORD *)&prime != v43);
            v44 = (_QWORD **)v81[0];
            if (v81[0])
            {
              v45 = *((_QWORD *)v81[0] + 1);
              v46 = (uint8x8_t)vcnt_s8(prime);
              v46.i16[0] = vaddlv_u8(v46);
              if (v46.u32[0] > 1uLL)
              {
                if (v45 >= *(_QWORD *)&prime)
                  v45 %= *(_QWORD *)&prime;
              }
              else
              {
                v45 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)v80[0] + v45) = v81;
              for (i = *v44; i; v45 = v51)
              {
                v51 = i[1];
                if (v46.u32[0] > 1uLL)
                {
                  if (v51 >= *(_QWORD *)&prime)
                    v51 %= *(_QWORD *)&prime;
                }
                else
                {
                  v51 &= *(_QWORD *)&prime - 1;
                }
                if (v51 != v45)
                {
                  if (!*((_QWORD *)v80[0] + v51))
                  {
                    *((_QWORD *)v80[0] + v51) = v44;
                    goto LABEL_72;
                  }
                  *v44 = (_QWORD *)*i;
                  *i = **((_QWORD **)v80[0] + v51);
                  **((_QWORD **)v80[0] + v51) = i;
                  i = v44;
                }
                v51 = v45;
LABEL_72:
                v44 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v25 = (unint64_t)prime;
            goto LABEL_76;
          }
          v59 = v80[0];
          v80[0] = 0;
          if (v59)
            operator delete(v59);
          v25 = 0;
          v80[1] = 0;
        }
      }
LABEL_76:
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v24 >= v25)
          v4 = v24 % v25;
        else
          v4 = v24;
      }
      else
      {
        v4 = (v25 - 1) & v24;
      }
      goto LABEL_81;
    }
    v74 = (unint64_t)v80[1] - 1;
    while (1)
    {
      v30 = *((_QWORD *)v29 + 1);
      if (v30 == v24)
        break;
      if (v27 > 1)
      {
        if (v30 >= v25)
          v30 %= v25;
      }
      else
      {
        v30 &= v74;
      }
      if (v30 != v4)
        goto LABEL_35;
LABEL_34:
      v29 = *(char **)v29;
      if (!v29)
        goto LABEL_35;
    }
    v31 = *((id *)v29 + 2);
    v32 = v22;
    v33 = v32;
    if (v31 != v32)
    {
      v34 = objc_msgSend(v31, "isEqualToString:", v32);

      if ((v34 & 1) != 0)
        goto LABEL_91;
      goto LABEL_34;
    }

LABEL_91:
    *((_DWORD *)v29 + 6) = *((_DWORD *)v20 + 10);
    *((_QWORD *)v29 + 4) = v20[6];
    if (v29 + 16 != (char *)(v20 + 4))
    {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v29 + 40, (char *)v20[7], v20[8], (uint64_t)(v20[8] - v20[7]) >> 4);
      *((_QWORD *)v29 + 8) = v20[10];
      *((_QWORD *)v29 + 9) = v20[11];
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v29 + 80, (char *)v20[12], v20[13], (uint64_t)(v20[13] - v20[12]) >> 4);
    }
    *((_QWORD *)v29 + 13) = v20[15];
    v54 = *((_OWORD *)v20 + 8);
    v55 = *((_OWORD *)v20 + 9);
    *((_WORD *)v29 + 72) = *((_WORD *)v20 + 80);
    *((_OWORD *)v29 + 7) = v54;
    *((_OWORD *)v29 + 8) = v55;

    a3 = v77;
LABEL_94:
    v56 = (_QWORD *)v20[1];
    if (v56)
    {
      do
      {
        v57 = v56;
        v56 = (_QWORD *)*v56;
      }
      while (v56);
    }
    else
    {
      do
      {
        v57 = (_QWORD *)v20[2];
        v58 = *v57 == (_QWORD)v20;
        v20 = v57;
      }
      while (!v58);
    }
    v20 = v57;
  }
  while (v57 != v78);
  v60 = (id *)v81[0];
  if (v81[0])
  {
    do
    {
      v61 = v60[2];
      v62 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      v64 = *(_QWORD *)(a4 + 24);
      if (!v64)
        std::__throw_bad_function_call[abi:ne180100]();
      v65 = (*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)v64 + 48))(v64, v60 + 3);
      v66 = *(double **)(v65 + 8);
      v67 = 0.0;
      while (v66 != *(double **)(v65 + 16))
      {
        v69 = *v66;
        v68 = v66[1];
        v66 += 2;
        v67 = v67 + v68 - v69;
      }
      objc_msgSend(v62, "quantityWithUnit:doubleValue:", v63, v67 + *(double *)(v65 + 32));
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v70, v61);

      v71 = *(_QWORD *)(a4 + 24);
      if (!v71)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)v71 + 48))(v71, v60 + 3));
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "setObject:forKeyedSubscript:", v72, v61);

      v60 = (id *)*v60;
    }
    while (v60);
  }
LABEL_118:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v80);
  v7 = v73;
  objc_msgSend(v73, "setDurationBySource:", v76);
  objc_msgSend(v73, "setDataCountBySource:", v75);

LABEL_119:
}

void sub_1B7CFE310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  __n128 result;
  __int128 v9;

  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(_QWORD *)(a2 + 128);
  v4 = *(const void **)(a2 + 136);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 16), v4, *(_QWORD *)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - (_QWORD)v4) >> 4);
  v6 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(const void **)(a2 + 176);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 56), v7, *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - (_QWORD)v7) >> 4);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 200);
  result = *(__n128 *)(a2 + 208);
  v9 = *(_OWORD *)(a2 + 224);
  *(__n128 *)(a1 + 88) = result;
  *(_OWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 240);
  return result;
}

void sub_1B7CFE4A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsCombined>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsCombined>>>,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsCombined>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D06910;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D06910;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D06910;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7CFE6AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D06910;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 40;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D069A0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D069A0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D069A0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7CFE8DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D069A0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D06A20;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D06A20;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 608))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7CFEBA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 608))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 584);
      v7 = *(_QWORD *)(a1 + 576);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7CFEE28(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  double v12;
  int v13;
  unint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int8x16_t v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t **v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  double v67;
  double v68;
  unint64_t v69;
  char v70;

  v5 = a1 + 8;
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = *(double *)(a1 + 8) - v7;
  v13 = v10;
  v14 = (unint64_t)v9;
  v15 = v11;
  v16 = v8;
  v17 = v7;
  v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      v13 = *(unsigned __int8 *)(a2 + 32);
      v18 = v6 - v6 * (v12 / (v8 - v7));
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 33);
      v16 = *(double *)(a2 + 16);
      v17 = *(double *)(a1 + 8);
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0.0;
      v17 = 0.0;
      v18 = 0.0;
    }
  }
  v19 = *(double *)(a1 + 16);
  v20 = v19 - v17;
  v21 = v16 - v17;
  v22 = v16 - v17 - (v19 - v17);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v22 < 0.01)
      goto LABEL_10;
    if (v20 >= 0.01)
      goto LABEL_24;
LABEL_22:
    v23 = v13;
    v31 = v14;
    v25 = v16;
    v19 = v17;
    v24 = v18;
    if (!v23)
      return;
    goto LABEL_60;
  }
  if (v20 < 0.01)
    goto LABEL_22;
  if (v22 >= 0.01)
  {
LABEL_24:
    v25 = v16;
    v69 = v14;
    v24 = v18 - v18 * (v20 / v21);
    v23 = v13;
    v70 = v15;
    v16 = *(double *)(a1 + 16);
    v18 = v18 * (v20 / v21);
    if (!v13)
    {
LABEL_25:
      v15 = v70;
      v31 = v69;
      if (!v23)
        return;
      goto LABEL_60;
    }
    goto LABEL_11;
  }
LABEL_10:
  v69 = 0;
  v23 = 0;
  v70 = 0;
  v24 = 0.0;
  v19 = 0.0;
  v25 = 0.0;
  if (!v13)
    goto LABEL_25;
LABEL_11:
  v67 = v17;
  v68 = v16;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 280, v14, v14);
  v26 = *(_QWORD *)(a1 + 112);
  if (v26 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
  {
    v32.f64[1] = *(float64_t *)(a1 + 16);
    v28 = v67;
    v27 = v68;
    v32.f64[0] = v67;
    v33.f64[0] = *(float64_t *)(a1 + 8);
    v33.f64[1] = v68;
    v34 = (int8x16_t)vcgtq_f64(v33, v32);
    v33.f64[0] = v67;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v34, *(int8x16_t *)(a1 + 8), (int8x16_t)v33);
  }
  else
  {
    v28 = v67;
    v27 = v68;
    if (v67 < *(double *)(a1 + 48))
    {
      v29 = *(double *)(a1 + 8);
      if (v67 >= v29)
        v29 = v67;
      *(double *)(a1 + 48) = v29;
    }
    if (v68 > *(double *)(a1 + 56))
    {
      v30 = *(double *)(a1 + 16);
      if (v30 >= v68)
        v30 = v68;
      *(double *)(a1 + 56) = v30;
    }
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v35 = *(double *)(a1 + 64);
    if (v28 < v35)
      v35 = v28;
    *(double *)(a1 + 64) = v35;
  }
  if (a3 && v28 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v28);
    v28 = v67;
    v27 = v68;
    v26 = *(_QWORD *)(a1 + 112);
  }
  v36 = *(_QWORD *)(a1 + 120);
  if (v26 >= v36)
  {
    v38 = *(_QWORD *)(a1 + 104);
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v38) >> 4);
    v40 = v39 + 1;
    if (v39 + 1 > 0x555555555555555)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v38) >> 4);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0x2AAAAAAAAAAAAAALL)
      v42 = 0x555555555555555;
    else
      v42 = v40;
    if (v42)
    {
      v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v42);
      v28 = v67;
      v27 = v68;
    }
    else
    {
      v43 = 0;
    }
    v44 = v42 + 48 * v39;
    v45 = v42 + 48 * v43;
    *(double *)v44 = v18;
    *(double *)(v44 + 8) = v28;
    *(double *)(v44 + 16) = v27;
    *(_QWORD *)(v44 + 24) = v14;
    *(_BYTE *)(v44 + 32) = v13;
    *(_BYTE *)(v44 + 33) = v15;
    *(_WORD *)(v44 + 40) = 0;
    *(_BYTE *)(v44 + 42) = 0;
    v37 = v44 + 48;
    v47 = *(char **)(a1 + 104);
    v46 = *(char **)(a1 + 112);
    if (v46 == v47)
    {
      v15 = v70;
      v31 = v69;
    }
    else
    {
      v15 = v70;
      v31 = v69;
      do
      {
        v48 = *((_OWORD *)v46 - 3);
        v49 = *((_OWORD *)v46 - 2);
        *(_OWORD *)(v44 - 21) = *(_OWORD *)(v46 - 21);
        *(_OWORD *)(v44 - 48) = v48;
        *(_OWORD *)(v44 - 32) = v49;
        v44 -= 48;
        v46 -= 48;
      }
      while (v46 != v47);
      v46 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v44;
    *(_QWORD *)(a1 + 112) = v37;
    *(_QWORD *)(a1 + 120) = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *(double *)v26 = v18;
    *(double *)(v26 + 8) = v28;
    *(double *)(v26 + 16) = v27;
    *(_QWORD *)(v26 + 24) = v14;
    *(_BYTE *)(v26 + 32) = v13;
    *(_BYTE *)(v26 + 33) = v15;
    *(_WORD *)(v26 + 40) = 0;
    v37 = v26 + 48;
    *(_BYTE *)(v26 + 42) = 0;
    v15 = v70;
    v31 = v69;
  }
  *(_QWORD *)(a1 + 112) = v37;
  if (!*(_BYTE *)(a1 + 248) || *(double *)(a1 + 224) <= v7)
  {
    *(double *)(a1 + 216) = v6;
    *(double *)(a1 + 224) = v7;
    *(double *)(a1 + 232) = v8;
    *(_QWORD *)(a1 + 240) = v9;
    *(_BYTE *)(a1 + 248) = v10;
    *(_BYTE *)(a1 + 249) = v11;
  }
  if (*(_BYTE *)(a1 + 33)
    && ((v50 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v14), v51 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsForSource(v5, v50), !*((_BYTE *)v51 + 120))|| *((double *)v51 + 12) <= v7))
  {
    *((double *)v51 + 11) = v6;
    *((double *)v51 + 12) = v7;
    *((double *)v51 + 13) = v8;
    v51[14] = v9;
    *((_BYTE *)v51 + 120) = v10;
    *((_BYTE *)v51 + 121) = v11;
    if (!v23)
      return;
  }
  else if (!v23)
  {
    return;
  }
LABEL_60:
  v52 = *(_QWORD *)(a1 + 472);
  v53 = *(_QWORD *)(a1 + 480);
  if (v52 >= v53)
  {
    v55 = *(_QWORD *)(a1 + 464);
    v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v55) >> 3);
    v57 = v56 + 1;
    if (v56 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v55) >> 3);
    if (2 * v58 > v57)
      v57 = 2 * v58;
    if (v58 >= 0x333333333333333)
      v59 = 0x666666666666666;
    else
      v59 = v57;
    if (v59)
      v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
    else
      v60 = 0;
    v61 = v59 + 40 * v56;
    v62 = v59 + 40 * v60;
    *(double *)v61 = v24;
    *(double *)(v61 + 8) = v19;
    *(double *)(v61 + 16) = v25;
    *(_QWORD *)(v61 + 24) = v31;
    *(_BYTE *)(v61 + 32) = v23;
    *(_BYTE *)(v61 + 33) = v15;
    v54 = v61 + 40;
    v64 = *(char **)(a1 + 464);
    v63 = *(char **)(a1 + 472);
    if (v63 != v64)
    {
      do
      {
        v65 = *(_OWORD *)(v63 - 40);
        v66 = *(_OWORD *)(v63 - 24);
        *(_WORD *)(v61 - 8) = *((_WORD *)v63 - 4);
        *(_OWORD *)(v61 - 24) = v66;
        *(_OWORD *)(v61 - 40) = v65;
        v61 -= 40;
        v63 -= 40;
      }
      while (v63 != v64);
      v63 = *(char **)(a1 + 464);
    }
    *(_QWORD *)(a1 + 464) = v61;
    *(_QWORD *)(a1 + 472) = v54;
    *(_QWORD *)(a1 + 480) = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *(double *)v52 = v24;
    *(double *)(v52 + 8) = v19;
    *(double *)(v52 + 16) = v25;
    *(_QWORD *)(v52 + 24) = v31;
    *(_BYTE *)(v52 + 32) = v23;
    v54 = v52 + 40;
    *(_BYTE *)(v52 + 33) = v15;
  }
  *(_QWORD *)(a1 + 472) = v54;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 610))
  {
    *(_BYTE *)(a1 + 612) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 612) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7CFF434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 464), *(_QWORD *)(a1 + 472), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7CFF51C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  void *v9;
  void *v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *i;
  _QWORD *v18;

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 488), *(id *)(a1 + 40));
  v9 = *(void **)(a1 + 144);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 152) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 176) = 0;
  v11 = 0uLL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  if (v10)
  {
    *(_QWORD *)(a1 + 192) = v10;
    operator delete(v10);
    v11 = 0uLL;
  }
  *(_WORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 216) = v11;
  *(_OWORD *)(a1 + 232) = v11;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 200) = v11;
  if (*(_QWORD *)(a1 + 272))
  {
    v12 = *(_QWORD **)(a1 + 256);
    v13 = *(_QWORD *)(a1 + 264);
    *(_QWORD *)(a1 + 256) = a1 + 264;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    if (v12[1])
      v14 = (_QWORD *)v12[1];
    else
      v14 = v12;
    if (v14)
    {
      v15 = (_QWORD *)v14[2];
      if (v15)
      {
        v16 = (_QWORD *)*v15;
        if ((_QWORD *)*v15 == v14)
        {
          *v15 = 0;
          while (1)
          {
            v18 = (_QWORD *)v15[1];
            if (!v18)
              break;
            do
            {
              v15 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
        }
        else
        {
          for (v15[1] = 0; v16; v16 = (_QWORD *)v15[1])
          {
            do
            {
              v15 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(v14);
        for (i = (_QWORD *)v15[2]; i; i = (_QWORD *)i[2])
          v15 = i;
        v14 = v15;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>>::destroy(v14);
  }
  objc_storeStrong(v8, *(id *)(a1 + 488));
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a1 + 464);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 612))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 612) = 0;
  }

}

void sub_1B7CFF6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 608))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7CFF7B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 624));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 608) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7CFFB14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C4035A84447);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7CFFCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7CFFF2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  double v11;
  double v12;
  _QWORD v13[2];
  double v14;
  uint64_t v15;
  char v16;
  char v17;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  *(double *)v13 = a5;
  *(double *)&v13[1] = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  else
  {
    v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      v8 = 0;
    }
    *(double *)v13 = a5;
    v14 = a7;
    v16 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 608))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D00BF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D00C98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS2_EEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::archive(uint64_t a1, int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::archive((uint64_t)v6, (uint64_t)(a2 + 2));
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(*(int8x16_t *)(a2 + 22), *(int8x16_t *)(a2 + 22), 8uLL);
  v6[1] = *((_QWORD *)a2 + 13);
  v6[2] = *((_QWORD *)a2 + 14);
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7D00DA0(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::archive(uint64_t a1, uint64_t a2)
{
  statistics **v4;
  _BYTE v5[208];

  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (statistics **)(a1 + 8);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)a2, (uint64_t)v5);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics((_QWORD *)a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(a2 + 40), (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1B7D00E68(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, _QWORD *a2)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  double v19;

  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_WORD *)(a1 + 120) = 0;
  v5 = a2[16];
  if (v5)
  {
    HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::unarchive((uint64_t)&v12, v5);
    *(_QWORD *)(a1 + 8) = v12;
    v6 = v16;
    v7 = v15;
    v8 = v14;
    *(_OWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v6;
    result = v19;
    v9 = v18;
    *(_OWORD *)(a1 + 56) = v17;
    *(_QWORD *)(a1 + 72) = v9;
    *(double *)(a1 + 80) = result;
  }
  *(_DWORD *)a1 = a2[17];
  v10 = a2[14];
  if (v10)
  {
    result = *(double *)(v10 + 8);
    v11 = *(_QWORD *)(v10 + 16);
    *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)(v10 + 24), *(int8x16_t *)(v10 + 24), 8uLL);
    *(double *)(a1 + 104) = result;
    *(_QWORD *)(a1 + 112) = v11;
    *(_WORD *)(a1 + 120) = 1;
  }
  return result;
}

void sub_1B7D00F58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsRelative(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::unarchive(uint64_t a1, uint64_t a2)
{
  double result;
  HDStatisticsTimeInterval *v5;
  uint64_t v6;
  HDStatisticsTimeInterval *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  double v12;

  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v5 = *(HDStatisticsTimeInterval **)(a2 + 128);
  if (v5)
  {
    HDStatisticsTimeInterval::unarchive(v5, (uint64_t)&v9);
    *(_QWORD *)a1 = v9;
    result = v12;
    v6 = v11;
    *(_OWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 24) = v6;
    *(double *)(a1 + 32) = result;
  }
  v7 = *(HDStatisticsTimeInterval **)(a2 + 8);
  if (v7)
  {
    HDStatisticsTimeInterval::unarchive(v7, (uint64_t)&v9);
    *(_QWORD *)(a1 + 40) = v9;
    result = v12;
    v8 = v11;
    *(_OWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 64) = v8;
    *(double *)(a1 + 72) = result;
  }
  return result;
}

void sub_1B7D01004(_Unwind_Exception *a1)
{
  _QWORD *v1;

  HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::~HDStatisticsCombined(v1);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D06AD0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_WORD *)(a1 + 560) = 1;
  *(_BYTE *)(a1 + 562) = 0;
  *(_BYTE *)(a1 + 564) = 0;
  *(_QWORD *)(a1 + 568) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D06AD0;
  v2 = *(void **)(a1 + 592);
  if (v2)
  {
    *(_QWORD *)(a1 + 600) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 528);
  if (v3)
  {
    *(_QWORD *)(a1 + 536) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 560) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

}

void sub_1B7D01170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 568) = v4;
    v3 = v5;
  }

}

void sub_1B7D011D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 72, a2);
  v7 = a2;
  v4 = a1[72];
  v5 = a1[69];
  a1[69] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[69]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 240) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D01364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  void *v3;
  _BYTE v4[8];
  double v5;

  if (*(_BYTE *)(a1 + 560))
    return 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v5);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D0140C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 562))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 561))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 563))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 600);
    v18 = *(_QWORD *)(a1 + 608);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 592);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 600);
      v33 = *(char **)(a1 + 592);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 592);
      }
      *(_QWORD *)(a1 + 592) = v28;
      *(_QWORD *)(a1 + 600) = v21;
      *(_QWORD *)(a1 + 608) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 600) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D01660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 562))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 562) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 561))
    goto LABEL_5;
  v9 = *(void **)(a1 + 584);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_394);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 584);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 584);
  *(_QWORD *)(a1 + 584) = 0;

  *(_BYTE *)(a1 + 561) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 592);
    *(_QWORD *)(a1 + 608) = 0;
    *(_QWORD *)(a1 + 600) = 0;
    *(_QWORD *)(a1 + 592) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 592);
      v37 = *(__int128 **)(a1 + 600);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 600);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 600) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 592);
  v39 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 536) != *(_QWORD *)(a1 + 528))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 536) != *(_QWORD *)(a1 + 528));
  }
  *(_BYTE *)(a1 + 562) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 564))
    {
      *(_BYTE *)(a1 + 564) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 562) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D01D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 562) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 563) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 562))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 562))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 584);
    *(_QWORD *)(a1 + 584) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 561) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 561))
  {
    v8 = *(void **)(a1 + 584);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 584);
      *(_QWORD *)(a1 + 584) = v9;

      v8 = *(void **)(a1 + 584);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D02054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 560) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 560) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D02174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 560) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 560), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::archive((uint64_t)&v37, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 320);
  if (v9 != (_QWORD *)(a1 + 328))
  {
    do
    {
      HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::archive((uint64_t)&v37, (uint64_t)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 328));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 528);
  for (k = *(int8x16_t **)(a1 + 536); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D0250C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  uint64_t *i;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **j;
  uint64_t **v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t k;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  id v58;
  _QWORD *v59;
  uint64_t v60;
  id v61;
  __n128 v62;
  void *v63[2];
  __int128 v64;
  int8x16_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  int8x16_t v70;
  uint64_t v71;
  uint64_t v72[4];
  void *__p[2];
  __int128 v74;
  void *v75[2];
  __int128 v76;
  void *v77[4];
  uint64_t v78;
  uint64_t **v79;
  uint64_t *v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  __int128 v90;
  __int128 v91;
  int v92;
  __int128 v93;
  __int128 v94;
  int v95;
  void (**v96)(statistics::StatisticsEngine *__hidden);
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  _BYTE v103[32];
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  void *v108;
  __int128 v109;
  void *v110;
  uint64_t v111;
  _QWORD v112[2];
  char v113;

  v58 = a2;
  *(_BYTE *)(a1 + 560) = objc_msgSend(v58, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v58;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v62.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v63 = 0u;
  v64 = 0u;
  v104 = 0;
  v61 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v103, (const unsigned __int8 *)objc_msgSend(v61, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v104));
  v60 = a1;
  v96 = &off_1E6D09A88;
  v97 = 0;
  v101 = 0;
  v99 = 0;
  v100 = 0;
  v102 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v96, (PB::Reader *)v103);
  v62.n128_u64[0] = v98;
  if (v97)
  {
    v69 = 0;
    memset(v72, 0, sizeof(v72));
    v81 = 0;
    v80 = 0;
    *(_OWORD *)__p = 0u;
    v74 = 0u;
    *(_OWORD *)v75 = 0u;
    v76 = 0u;
    memset(v77, 0, sizeof(v77));
    v78 = 0;
    v79 = &v80;
    v82 = 0u;
    v83 = 0u;
    v84 = 1065353216;
    v86 = 0u;
    v87 = 0u;
    v85 = 0u;
    v88 = 0;
    v89 = 1065353216;
    v90 = 0u;
    v91 = 0u;
    v92 = 1065353216;
    v93 = 0u;
    v94 = 0u;
    v95 = 1065353216;
    v65 = vextq_s8(*(int8x16_t *)(v97 + 8), *(int8x16_t *)(v97 + 8), 8uLL);
    v4 = *(_QWORD *)(v97 + 72);
    v66 = *(_QWORD *)(v97 + 64);
    v67 = *(_BYTE *)(v97 + 185);
    v68 = *(_BYTE *)(v97 + 186);
    v70 = vextq_s8(*(int8x16_t *)(v97 + 24), *(int8x16_t *)(v97 + 24), 8uLL);
    v71 = v4;
    v5 = *(_QWORD *)(v97 + 80);
    v6 = *(_QWORD *)(v97 + 88);
    v59 = (_QWORD *)v97;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= (unint64_t)v74)
        {
          v14 = (char *)__p[0];
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v74 - (unint64_t)__p[0]) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v74 - (unint64_t)__p[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = (char *)__p[1];
            v14 = (char *)__p[0];
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p[0];
          }
          v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(_QWORD *)&v74 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = v59[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::unarchive((uint64_t)&v105, v23);
      *((_QWORD *)&v74 + 1) = v105;
      if (v75[0])
      {
        v75[1] = v75[0];
        operator delete(v75[0]);
      }
      *(_OWORD *)v75 = v106;
      v76 = v107;
      *(_QWORD *)&v107 = 0;
      v106 = 0uLL;
      v77[0] = v108;
      v24 = v77[1];
      if (v77[1])
      {
        v77[2] = v77[1];
        operator delete(v77[1]);
        v24 = (void *)v106;
      }
      *(_OWORD *)&v77[1] = v109;
      v77[3] = v110;
      v110 = 0;
      v109 = 0uLL;
      v78 = v111;
      if (v24)
      {
        *((_QWORD *)&v106 + 1) = v24;
        operator delete(v24);
      }
    }
    v26 = (uint64_t *)v59[17];
    for (i = (uint64_t *)v59[18]; v26 != i; ++v26)
    {
      v27 = *v26;
      HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::unarchive((uint64_t)&v105, *v26);
      v28 = *(_QWORD *)(v27 + 144);
      v29 = v80;
      for (j = &v80; ; v29 = *j)
      {
        v31 = j;
        if (!v29)
          break;
        while (1)
        {
          j = (uint64_t **)v29;
          v32 = v29[4];
          if (v32 > v28)
            break;
          if (v32 >= v28)
          {
            v33 = (char *)j;
            goto LABEL_40;
          }
          v29 = j[1];
          if (!v29)
          {
            v31 = j + 1;
            goto LABEL_37;
          }
        }
      }
LABEL_37:
      v33 = (char *)operator new(0x78uLL);
      v112[1] = &v80;
      *((_QWORD *)v33 + 4) = v28;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      v113 = 1;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = j;
      *v31 = (uint64_t *)v33;
      v34 = (uint64_t *)v33;
      if (*v79)
      {
        v79 = (uint64_t **)*v79;
        v34 = *v31;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v80, v34);
      ++v81;
      v112[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v112);
LABEL_40:
      v35 = (void *)*((_QWORD *)v33 + 6);
      *((_QWORD *)v33 + 5) = v105;
      if (v35)
      {
        *((_QWORD *)v33 + 7) = v35;
        operator delete(v35);
        *((_QWORD *)v33 + 6) = 0;
        *((_QWORD *)v33 + 7) = 0;
        *((_QWORD *)v33 + 8) = 0;
      }
      v36 = (void *)*((_QWORD *)v33 + 11);
      *((_OWORD *)v33 + 3) = v106;
      *((_QWORD *)v33 + 8) = v107;
      *(_QWORD *)&v107 = 0;
      v106 = 0uLL;
      *((_QWORD *)v33 + 9) = *((_QWORD *)&v107 + 1);
      *((_QWORD *)v33 + 10) = v108;
      if (v36)
      {
        *((_QWORD *)v33 + 12) = v36;
        operator delete(v36);
        *((_QWORD *)v33 + 11) = 0;
        *((_QWORD *)v33 + 12) = 0;
        *((_QWORD *)v33 + 13) = 0;
        v36 = (void *)v106;
      }
      *(_OWORD *)(v33 + 88) = v109;
      *((_QWORD *)v33 + 13) = v110;
      v110 = 0;
      v109 = 0uLL;
      *((_QWORD *)v33 + 14) = v111;
      if (v36)
      {
        *((_QWORD *)&v106 + 1) = v36;
        operator delete(v36);
      }
    }
    v37 = v59[5];
    for (k = v59[6]; v37 != k; v37 += 8)
    {
      v40 = *(double *)(*(_QWORD *)v37 + 8);
      v39 = *(double *)(*(_QWORD *)v37 + 16);
      if (v40 >= v39)
        v41 = *(double *)(*(_QWORD *)v37 + 16);
      else
        v41 = *(double *)(*(_QWORD *)v37 + 8);
      if (v39 < v40)
        v39 = *(double *)(*(_QWORD *)v37 + 8);
      HKIntervalMask<double>::_insertInterval(v72, v41, v39);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::operator=((uint64_t)&v62.n128_i64[1], (uint64_t)&v65);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v65);
  }
  v42 = v99;
  v43 = v100;
  if (v99 != v100)
  {
    v44 = (char *)v63[1];
    do
    {
      v45 = *(_QWORD *)(*(_QWORD *)v42 + 24);
      v46 = *(_QWORD *)(*(_QWORD *)v42 + 32);
      v47 = *(_QWORD *)(*(_QWORD *)v42 + 8);
      v48 = *(_QWORD *)(*(_QWORD *)v42 + 16);
      if ((unint64_t)v44 >= (unint64_t)v64)
      {
        v49 = (char *)v63[0];
        v50 = 0xCCCCCCCCCCCCCCCDLL * ((v44 - (char *)v63[0]) >> 3);
        v51 = v50 + 1;
        if (v50 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v64 - (unint64_t)v63[0]) >> 3) > v51)
          v51 = 0x999999999999999ALL * ((uint64_t)(v64 - (unint64_t)v63[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v64 - (unint64_t)v63[0]) >> 3) >= 0x333333333333333)
          v52 = 0x666666666666666;
        else
          v52 = v51;
        if (v52)
        {
          v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v52);
          v49 = (char *)v63[0];
          v44 = (char *)v63[1];
        }
        else
        {
          v53 = 0;
        }
        v54 = v52 + 40 * v50;
        *(_QWORD *)v54 = v46;
        *(_QWORD *)(v54 + 8) = v45;
        *(_QWORD *)(v54 + 16) = v47;
        *(_QWORD *)(v54 + 24) = v48;
        *(_WORD *)(v54 + 32) = 1;
        v55 = (char *)v54;
        if (v44 != v49)
        {
          do
          {
            v56 = *(_OWORD *)(v44 - 40);
            v57 = *(_OWORD *)(v44 - 24);
            *((_WORD *)v55 - 4) = *((_WORD *)v44 - 4);
            *(_OWORD *)(v55 - 24) = v57;
            *(_OWORD *)(v55 - 40) = v56;
            v55 -= 40;
            v44 -= 40;
          }
          while (v44 != v49);
          v49 = (char *)v63[0];
        }
        v44 = (char *)(v54 + 40);
        v63[0] = v55;
        v63[1] = (void *)(v54 + 40);
        *(_QWORD *)&v64 = v52 + 40 * v53;
        if (v49)
          operator delete(v49);
      }
      else
      {
        *(_QWORD *)v44 = v46;
        *((_QWORD *)v44 + 1) = v45;
        *((_QWORD *)v44 + 2) = v47;
        *((_QWORD *)v44 + 3) = v48;
        *((_WORD *)v44 + 16) = 1;
        v44 += 40;
      }
      v63[1] = v44;
      v42 += 8;
    }
    while (v42 != v43);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v96);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::operator=((_QWORD *)(v60 + 112), &v62);
  if (v63[0])
  {
    v63[1] = v63[0];
    operator delete(v63[0]);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v62.n128_i64[1]);

}

void sub_1B7D02CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x370]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x320]);
  v10 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2E0]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy((_QWORD *)STACK[0x2D0]);
  HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::~HDStatisticsCombined(&STACK[0x278]);
  v11 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x258]);
  v12 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x398]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 416);
  if (v2)
  {
    *(_QWORD *)(a1 + 424) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 368);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 328);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 288);
  v2 = *(void **)(a1 + 264);
  if (v2)
  {
    *(_QWORD *)(a1 + 272) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 224);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 208));
  v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(_QWORD *)(a1 + 176) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(_QWORD *)(a1 + 136) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(_QWORD *)(a1 + 104) = v5;
    operator delete(v5);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v6 = *(void **)(a1 + 64);
  if (v6)
  {
    *(_QWORD *)(a1 + 72) = v6;
    operator delete(v6);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,0>(a1 + 4);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[408];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[344];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 576));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 560) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7D03274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 52), a2 + 26);
  v4 = a2[27].n128_u64[1];
  a2[27].n128_u64[1] = 0;
  v5 = (void *)a1[55];
  a1[55] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD v33[2];
  char v34;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 4);
  v12 = *(_QWORD *)(a2 + 152);
  v13 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = v12;
  *(_QWORD *)(a1 + 160) = v13;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 168), *(const void **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 4);
  v14 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = 0;
  v15 = (uint64_t **)(a1 + 208);
  *(_QWORD *)(a1 + 192) = v14;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v16 = *(_QWORD **)(a2 + 200);
  if (v16 != (_QWORD *)(a2 + 208))
  {
    do
    {
      v17 = *v15;
      v18 = (uint64_t *)(a1 + 208);
      if (*(uint64_t ***)(a1 + 200) == v15)
        goto LABEL_11;
      v19 = *v15;
      v20 = (uint64_t *)(a1 + 208);
      if (v17)
      {
        do
        {
          v18 = v19;
          v19 = (uint64_t *)v19[1];
        }
        while (v19);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v20[2];
          v21 = *v18 == (_QWORD)v20;
          v20 = v18;
        }
        while (v21);
      }
      v22 = v16[4];
      if (v18[4] < v22)
      {
LABEL_11:
        if (v17)
          v23 = (uint64_t **)v18;
        else
          v23 = (uint64_t **)(a1 + 208);
        if (v17)
          v24 = (uint64_t **)(v18 + 1);
        else
          v24 = (uint64_t **)(a1 + 208);
        if (*v24)
          goto LABEL_28;
      }
      else
      {
        v24 = (uint64_t **)(a1 + 208);
        v23 = (uint64_t **)(a1 + 208);
        if (v17)
        {
          v25 = *v15;
          while (1)
          {
            while (1)
            {
              v23 = (uint64_t **)v25;
              v26 = v25[4];
              if (v26 <= v22)
                break;
              v25 = *v23;
              v24 = v23;
              if (!*v23)
                goto LABEL_27;
            }
            if (v26 >= v22)
              goto LABEL_28;
            v25 = v23[1];
            if (!v25)
            {
              v24 = v23 + 1;
              break;
            }
          }
        }
      }
LABEL_27:
      v27 = operator new(0x78uLL);
      v33[0] = v27;
      v33[1] = a1 + 208;
      v34 = 0;
      v27[2] = *((_OWORD *)v16 + 2);
      *((_QWORD *)v27 + 6) = 0;
      *((_QWORD *)v27 + 7) = 0;
      *((_QWORD *)v27 + 8) = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v27 + 6, (const void *)v16[6], v16[7], (uint64_t)(v16[7] - v16[6]) >> 4);
      v28 = v16[9];
      v29 = v16[10];
      *((_QWORD *)v27 + 11) = 0;
      *((_QWORD *)v27 + 9) = v28;
      *((_QWORD *)v27 + 10) = v29;
      *((_QWORD *)v27 + 12) = 0;
      *((_QWORD *)v27 + 13) = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v27 + 11, (const void *)v16[11], v16[12], (uint64_t)(v16[12] - v16[11]) >> 4);
      *((_QWORD *)v27 + 14) = v16[14];
      v34 = 1;
      std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 200), (uint64_t)v23, v24, (uint64_t *)v27);
      v33[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v33);
LABEL_28:
      v30 = (_QWORD *)v16[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v16[2];
          v21 = *v31 == (_QWORD)v16;
          v16 = v31;
        }
        while (!v21);
      }
      v16 = v31;
    }
    while (v31 != (_QWORD *)(a2 + 208));
  }
  std::unordered_set<long long>::unordered_set(a1 + 224, a2 + 224);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 264), *(const void **)(a2 + 264), *(_QWORD *)(a2 + 272), (uint64_t)(*(_QWORD *)(a2 + 272) - *(_QWORD *)(a2 + 264)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 288, a2 + 288);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 328, a2 + 328);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 368, a2 + 368);
  return a1;
}

void sub_1B7D0369C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, void **a11, id *location, void **a13, char a14)
{
  _QWORD **v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  void *v22;
  void *v23;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v19);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v18);
  v21 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v15 + 272) = v21;
    operator delete(v21);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(*v14);
  HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>::~HDStatisticsCombined(a10);
  v22 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v15 + 104) = v22;
    operator delete(v22);
  }
  objc_destroyWeak(location);
  v23 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v15 + 72) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,0>(v1 + 4);
    operator delete(v1);
  }
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v10;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 128, (__n128 *)(a2 + 128));
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 168, (__n128 *)(a2 + 168));
  v12 = a1 + 208;
  v11 = *(_QWORD **)(a1 + 208);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(v11);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v13 = (_QWORD *)(a2 + 208);
  v14 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 208) = v14;
  v15 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 216) = v15;
  if (v15)
  {
    *(_QWORD *)(v14 + 16) = v12;
    *(_QWORD *)(a2 + 200) = v13;
    *v13 = 0;
    *(_QWORD *)(a2 + 216) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 200) = v12;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 224, (uint64_t *)(a2 + 224));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 264, (__n128 *)(a2 + 264));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 288, (uint64_t *)(a2 + 288));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 328, (uint64_t *)(a2 + 328));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  double v4;
  id v5;
  double *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id WeakRetained;
  id v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void *v40;
  void *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  _BYTE v48[24];
  _BYTE *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308)
    v6 = (double *)a2;
  v7 = (void *)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v9 = (void *)v8;
  v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = *(id *)(a1 + 16);
    if (objc_msgSend(v11, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v11, "underlyingSampleType");
      v12 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v12;
    }

  }
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v10, v7, v9);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v40 = v9;
      v41 = v7;
      v15 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v16 = *(uint64_t **)(a2 + 264);
      v17 = *(uint64_t **)(a2 + 272);
      while (v16 != v17)
      {
        v18 = *v16;
        v19 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v19, "sourceForSourceID:", v18);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
        {
          if ((objc_msgSend(v15, "containsObject:", v20) & 1) == 0)
            objc_msgSend(v15, "addObject:", v20);
        }

        ++v16;
      }
      v21 = (void *)objc_msgSend(v15, "copy");
      v9 = v40;
      v7 = v41;
      objc_msgSend(v13, "_setSources:", v21);

    }
  }

  v42[0] = &off_1E6D06CB0;
  v43 = v42;
  v22 = v13;
  v23 = (uint64_t)v43;
  if (!v43)
    goto LABEL_22;
  if (v43 != v42)
  {
    v23 = (*(uint64_t (**)(void))(*v43 + 16))();
LABEL_22:
    v47 = (_QWORD *)v23;
    goto LABEL_24;
  }
  v47 = v46;
  (*(void (**)(uint64_t, _QWORD *))(v42[0] + 24))((uint64_t)v42, v46);
LABEL_24:
  v49 = 0;
  v24 = operator new(0x28uLL);
  *v24 = &off_1E6D06BA0;
  v25 = (uint64_t)v47;
  if (!v47)
  {
LABEL_27:
    v24[4] = v25;
    goto LABEL_29;
  }
  if (v47 != v46)
  {
    v25 = (*(uint64_t (**)(void))(*v47 + 16))();
    goto LABEL_27;
  }
  v24[4] = v24 + 1;
  (*(void (**)(_QWORD *))(v46[0] + 24))(v46);
LABEL_29:
  v49 = v24;
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket(a1, v22, a2, (uint64_t)v48);
  v26 = v49;
  if (v49 == v48)
  {
    v27 = 4;
    v26 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_34;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_34:
  v28 = v47;
  if (v47 == v46)
  {
    v29 = 4;
    v28 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_39:
  v30 = (uint64_t)v43;
  if (!v43)
  {
LABEL_42:
    v45 = (_QWORD *)v30;
    goto LABEL_44;
  }
  if (v43 != v42)
  {
    v30 = (*(uint64_t (**)(void))(*v43 + 16))();
    goto LABEL_42;
  }
  v45 = v44;
  (*(void (**)(uint64_t, _QWORD *))(v42[0] + 24))((uint64_t)v42, v44);
LABEL_44:
  v49 = 0;
  v31 = operator new(0x28uLL);
  *v31 = &off_1E6D06C30;
  v32 = (uint64_t)v45;
  if (!v45)
  {
LABEL_47:
    v31[4] = v32;
    goto LABEL_49;
  }
  if (v45 != v44)
  {
    v32 = (*(uint64_t (**)(void))(*v45 + 16))();
    goto LABEL_47;
  }
  v31[4] = v31 + 1;
  (*(void (**)(_QWORD *))(v44[0] + 24))(v44);
LABEL_49:
  v49 = v31;
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket(a1, v22, a2, (uint64_t)v48);
  v33 = v49;
  if (v49 == v48)
  {
    v34 = 4;
    v33 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_54;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_54:
  v35 = v45;
  if (v45 == v44)
  {
    v36 = 4;
    v35 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_59;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_59:

  v37 = v43;
  if (v43 == v42)
  {
    v38 = 4;
    v37 = v42;
    goto LABEL_63;
  }
  if (v43)
  {
    v38 = 5;
LABEL_63:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  return v22;
}

void sub_1B7D03DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 248);
  v2 = *(_QWORD *)(a1 + 264);
  if (v1 != (*(_QWORD *)(a1 + 272) - v2) >> 3)
  {
    v4 = (void **)(a1 + 264);
    *(_QWORD *)(a1 + 272) = v2;
    std::vector<long long>::reserve((void **)(a1 + 264), v1);
    v5 = *(_QWORD **)(a1 + 240);
    if (v5)
    {
      v6 = *(char **)(a1 + 272);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 280);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 264);
            v6 = *(char **)(a1 + 272);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 264) = v16;
          *(_QWORD *)(a1 + 272) = v9;
          *(_QWORD *)(a1 + 280) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 272) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D040FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  int64_t v12;
  char v13;
  char v14;
  double v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  id WeakRetained;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  double v49;
  int64_t var3;
  _BOOL4 var4;
  BOOL var5;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  unint64_t v58;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  unint64_t v72;
  uint64_t *v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  char *v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  char *v82;
  void *v83;
  unint64_t v84;
  BOOL v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  BOOL v100;
  double v101;
  int v102;
  int v103;
  int v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  _BOOL4 v108;
  unint64_t v109;
  uint64_t *v110;
  __int128 v111;
  char *v112;
  double v113;
  void *v114;
  void *v115;
  _QWORD *v116;
  double **v117;
  double **v118;
  id *location;
  void *v120;
  id v121;
  uint64_t *v122;
  uint64_t *v123;
  int64_t v124;
  double **v125;
  char v126;
  BOOL v127;
  int64_t v128;
  _QWORD *v129;
  uint64_t v130;
  HDRawQuantitySample v131;
  __int128 v132;
  __int128 v133;
  __int16 v134;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v129 = (_QWORD *)(a1 + 96);
    v125 = (double **)(a1 + 64);
    v122 = (uint64_t *)(a1 + 160);
    v123 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    v117 = (double **)(a1 + 168);
    v118 = (double **)(a1 + 128);
    v116 = (_QWORD *)(a1 + 208);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_125:
      *(double *)(a1 + 56) = a2;
LABEL_126:
      v113 = *(double *)(a1 + 56);
      if (v113 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsTimeInterval, HDStatisticsTimeInterval>]");
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v114, "handleFailureInFunction:file:lineNumber:description:", v115, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v113 = *(double *)(a1 + 56);
      }
      v5 = v113;
      if (v113 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v20 = a2;
      v21 = a2;
      v22 = v5;
      v23 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v24 = *(double *)(v23 + 8);
          v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21)
            v21 = *(double *)(v23 + 8);
          if (v25 > v5)
            v27 = *(double *)(v23 + 16);
          else
            v27 = v20;
          if (v25 < v20)
          {
            v22 = v5;
            v20 = v27;
          }
          v23 += 48;
        }
        while ((__int128 *)v23 != v7);
      }
      if (v20 >= v21)
        v28 = v21;
      else
        v28 = v20;
      v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        v30 = v29 * floor(v28 / v29);
        v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31)
          v28 = v30;
        else
          v28 = v31;
      }
      *v129 = 0;
      v129[1] = 0;
      v129[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        v35 = *(char **)(a1 + 96);
        v34 = *(char **)(a1 + 104);
        v36 = v32;
        if (v34 != v35)
        {
          do
          {
            v37 = *((_OWORD *)v34 - 3);
            v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          v34 = (char *)*v129;
        }
        *(_QWORD *)(a1 + 96) = v36;
        *(_QWORD *)(a1 + 104) = v32;
        *(_QWORD *)(a1 + 112) = &v32[48 * v33];
        if (v34)
          operator delete(v34);
      }
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v131.var0 = a1;
        v40 = 126 - 2 * __clz(v8);
        if ((__int128 *)v6 == v7)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v131, v41, 1);
      }
      if (*(_BYTE *)(a1 + 25))
        v121 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v121 = 0;
      v120 = (void *)v6;
      if ((__int128 *)v6 == v7)
      {
LABEL_107:
        *(double *)(a1 + 152) = HKIntervalMask<double>::removeIntervalsBefore(v118, v28) + *(double *)(a1 + 152);
        *(double *)(a1 + 192) = HKIntervalMask<double>::removeIntervalsBefore(v117, v28) + *(double *)(a1 + 192);
        v97 = *(_QWORD **)(a1 + 200);
        if (v97 != v116)
        {
          do
          {
            *((double *)v97 + 9) = HKIntervalMask<double>::removeIntervalsBefore((double **)v97 + 6, v28)
                                 + *((double *)v97 + 9);
            *((double *)v97 + 14) = HKIntervalMask<double>::removeIntervalsBefore((double **)v97 + 11, v28)
                                  + *((double *)v97 + 14);
            v98 = (_QWORD *)v97[1];
            if (v98)
            {
              do
              {
                v99 = v98;
                v98 = (_QWORD *)*v98;
              }
              while (v98);
            }
            else
            {
              do
              {
                v99 = (_QWORD *)v97[2];
                v100 = *v99 == (_QWORD)v97;
                v97 = v99;
              }
              while (!v100);
            }
            v97 = v99;
          }
          while (v99 != v116);
        }
        *(double *)(a1 + 56) = v28;

        if (v120)
          operator delete(v120);
        goto LABEL_126;
      }
      v124 = 0;
      v44 = 0;
      v45 = v6;
      while (2)
      {
        v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v131.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v131.var2 = v46;
        *(_QWORD *)&v131.var4 = *(_QWORD *)(v45 + 32);
        v47 = v46;
        v48 = v28 - v131.var1;
        v49 = *(double *)&v46 - v131.var1;
        if (v49 - (v28 - v131.var1) >= 0.01)
        {
          if (v48 < 0.01)
          {
            v131.var4 = 0;
            goto LABEL_59;
          }
          v55 = v48 / v49 * v131.var0;
          var3 = v131.var3;
          var5 = v131.var5;
          v54 = v131.var0 - v55;
          v131.var0 = v55;
          v131.var2 = v28;
          v53 = v28;
          var4 = v131.var4;
          if (v131.var4)
            goto LABEL_54;
LABEL_59:
          v59 = *(_OWORD **)(a1 + 104);
          v60 = *(_QWORD *)(a1 + 112);
          if ((unint64_t)v59 < v60)
          {
            v61 = *(_OWORD *)v45;
            v62 = *(_OWORD *)(v45 + 32);
            v59[1] = *(_OWORD *)(v45 + 16);
            v59[2] = v62;
            *v59 = v61;
            v63 = v59 + 3;
            goto LABEL_105;
          }
          v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v59 - *v129) >> 4);
          v65 = v64 + 1;
          if (v64 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v129) >> 4);
          if (2 * v66 > v65)
            v65 = 2 * v66;
          if (v66 >= 0x2AAAAAAAAAAAAAALL)
            v67 = 0x555555555555555;
          else
            v67 = v65;
          if (v67)
            v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
          else
            v68 = 0;
          v74 = (_OWORD *)(v67 + 48 * v64);
          v75 = *(_OWORD *)v45;
          v76 = *(_OWORD *)(v45 + 32);
          v74[1] = *(_OWORD *)(v45 + 16);
          v74[2] = v76;
          *v74 = v75;
          v78 = *(char **)(a1 + 96);
          v77 = *(char **)(a1 + 104);
          v79 = v74;
          if (v77 != v78)
          {
            do
            {
              v80 = *((_OWORD *)v77 - 3);
              v81 = *((_OWORD *)v77 - 2);
              *(_OWORD *)((char *)v79 - 21) = *(_OWORD *)(v77 - 21);
              *(v79 - 3) = v80;
              *(v79 - 2) = v81;
              v79 -= 3;
              v77 -= 48;
            }
            while (v77 != v78);
            v77 = (char *)*v129;
          }
          v63 = v74 + 3;
          *(_QWORD *)(a1 + 96) = v79;
          *(_QWORD *)(a1 + 104) = v74 + 3;
          *(_QWORD *)(a1 + 112) = v67 + 48 * v68;
          if (v77)
          {
            v82 = v77;
            goto LABEL_104;
          }
LABEL_105:
          *(_QWORD *)(a1 + 104) = v63;
        }
        else
        {
          var3 = 0;
          var4 = 0;
          var5 = 0;
          v53 = 0.0;
          v47 = 0;
          v54 = 0.0;
          if (!v131.var4)
            goto LABEL_59;
LABEL_54:
          v127 = var5;
          v128 = var3;
          HDRawQuantitySample::applyMask((uint64_t)&v131, v125);
          v56 = *(unsigned __int8 *)(v45 + 42);
          v57 = *(unsigned __int8 *)(v45 + 41);
          v126 = *(_BYTE *)(v45 + 40);
          if (v131.var4)
          {
            if ((v44 & 1) != 0)
            {
              v58 = v131.var3;
              if (v124 == v131.var3 || *(_BYTE *)(a1 + 24))
              {
                HDStatisticsTimeInterval::addSample(v123, &v131, v56 == 0);
                HDStatisticsTimeInterval::addSample(v122, &v131, v56 == 0);
                v56 = 1;
              }
            }
            else
            {
              HDStatisticsTimeInterval::addSample(v123, &v131, v56 == 0);
              HDStatisticsTimeInterval::addSample(v122, &v131, v56 == 0);
              v56 = 1;
              v58 = v131.var3;
              v124 = v131.var3;
            }
            if (*(_BYTE *)(a1 + 25))
            {
              HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, v58);
              v69 = (void *)objc_claimAutoreleasedReturnValue();
              if (v69)
              {
                objc_msgSend(v121, "objectForKeyedSubscript:", v69);
                v70 = (void *)objc_claimAutoreleasedReturnValue();
                v71 = v70;
                if (v70)
                {
                  if (objc_msgSend(v70, "longLongValue") == v58 || *(_BYTE *)(a1 + 24))
                  {
                    v72 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v58);
                    v73 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v72);
                    HDStatisticsTimeInterval::addSample(v73, &v131, v57 == 0);
                    goto LABEL_83;
                  }
                }
                else
                {
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v58);
                  v83 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v121, "setObject:forKeyedSubscript:", v83, v69);

                  v84 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v58);
                  v73 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v84);
                  HDStatisticsTimeInterval::addSample(v73, &v131, v57 == 0);
LABEL_83:
                  HDStatisticsTimeInterval::addSample(v73 + 5, &v131, v57 == 0);
                  LOBYTE(v57) = 1;
                }

              }
            }
            v44 = 1;
          }
          if (var4)
          {
            v85 = v56 != 0;
            v87 = *(char **)(a1 + 104);
            v86 = *(_QWORD *)(a1 + 112);
            if ((unint64_t)v87 < v86)
            {
              *(double *)v87 = v54;
              *((double *)v87 + 1) = v53;
              *((_QWORD *)v87 + 2) = v47;
              *((_QWORD *)v87 + 3) = v128;
              v87[32] = var4;
              v87[33] = v127;
              v87[40] = v126;
              v87[41] = v57;
              v63 = v87 + 48;
              v87[42] = v85;
              goto LABEL_105;
            }
            v82 = (char *)*v129;
            v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v87[-*v129] >> 4);
            v89 = v88 + 1;
            if (v88 + 1 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - (_QWORD)v82) >> 4);
            if (2 * v90 > v89)
              v89 = 2 * v90;
            if (v90 >= 0x2AAAAAAAAAAAAAALL)
              v91 = 0x555555555555555;
            else
              v91 = v89;
            if (v91)
            {
              v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v91);
              v82 = *(char **)(a1 + 96);
              v87 = *(char **)(a1 + 104);
            }
            else
            {
              v92 = 0;
            }
            v93 = v91 + 48 * v88;
            *(double *)v93 = v54;
            *(double *)(v93 + 8) = v53;
            *(_QWORD *)(v93 + 16) = v47;
            *(_QWORD *)(v93 + 24) = v128;
            *(_BYTE *)(v93 + 32) = var4;
            *(_BYTE *)(v93 + 33) = v127;
            *(_BYTE *)(v93 + 40) = v126;
            *(_BYTE *)(v93 + 41) = v57;
            *(_BYTE *)(v93 + 42) = v85;
            v94 = v93;
            if (v87 != v82)
            {
              do
              {
                v95 = *((_OWORD *)v87 - 3);
                v96 = *((_OWORD *)v87 - 2);
                *(_OWORD *)(v94 - 21) = *(_OWORD *)(v87 - 21);
                *(_OWORD *)(v94 - 48) = v95;
                *(_OWORD *)(v94 - 32) = v96;
                v94 -= 48;
                v87 -= 48;
              }
              while (v87 != v82);
              v82 = (char *)*v129;
            }
            v63 = (_OWORD *)(v93 + 48);
            *(_QWORD *)(a1 + 96) = v94;
            *(_QWORD *)(a1 + 104) = v93 + 48;
            *(_QWORD *)(a1 + 112) = v91 + 48 * v92;
            if (v82)
LABEL_104:
              operator delete(v82);
            goto LABEL_105;
          }
        }
        v45 += 48;
        if ((__int128 *)v45 == v7)
          goto LABEL_107;
        continue;
      }
    }
    v10 = *(double *)v6;
    v9 = *(double *)(v6 + 8);
    v11 = *(double *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 24);
    v13 = *(_BYTE *)(v6 + 32);
    v14 = *(_BYTE *)(v6 + 33);
    v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        v42 = 0;
        v43 = 0;
        v18 = 0.0;
        v17 = *(double *)(v6 + 16);
        v16 = *(_BYTE *)(v6 + 32);
        v19 = 0.0;
        v11 = 0.0;
        v13 = 0;
LABEL_118:
        v102 = *(unsigned __int8 *)(v6 + 42);
        v103 = *(unsigned __int8 *)(v6 + 41);
        v104 = *(unsigned __int8 *)(v6 + 40);
        v131.var0 = v10;
        v131.var1 = v9;
        v131.var2 = v17;
        v131.var3 = v12;
        v131.var4 = v16;
        v131.var5 = v14;
        *(_DWORD *)(&v131.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v131.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&v132 = v18;
        *((double *)&v132 + 1) = v19;
        *(double *)&v133 = v11;
        *((_QWORD *)&v133 + 1) = v42;
        LOBYTE(v134) = v13;
        HIBYTE(v134) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v131, v125);
        v105 = v104 != 0;
        v106 = v103 != 0;
        v107 = v102 != 0;
        if (v131.var4)
        {
          v108 = v102 == 0;
          HDStatisticsTimeInterval::addSample(v123, &v131, v108);
          HDStatisticsTimeInterval::addSample(v122, &v131, v108);
          if (*(_BYTE *)(a1 + 25))
          {
            v109 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v131.var3);
            v110 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v109);
            HDStatisticsTimeInterval::addSample(v110, &v131, v103 == 0);
            HDStatisticsTimeInterval::addSample(v110 + 5, &v131, v103 == 0);
          }
          v105 = 1;
          v106 = 1;
          v107 = 1;
        }
        if ((_BYTE)v134)
        {
          LOWORD(v130) = v134;
          v111 = v133;
          v112 = (char *)*v129;
          *(_OWORD *)v112 = v132;
          *((_OWORD *)v112 + 1) = v111;
          *((_QWORD *)v112 + 4) = v130;
          v112[40] = v105;
          v112[41] = v106;
          v112[42] = v107;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_125;
      }
      v101 = v10 * (v15 / (v11 - v9));
      v17 = a2;
      v16 = *(_BYTE *)(v6 + 32);
      v18 = v10 - v101;
      v10 = v101;
      v19 = a2;
    }
    else
    {
      v16 = 0;
      v17 = *(double *)(v6 + 16);
      v18 = *(double *)v6;
      v19 = *(double *)(v6 + 8);
    }
    v42 = *(_QWORD *)(v6 + 24);
    v43 = *(_BYTE *)(v6 + 33);
    goto LABEL_118;
  }
}

void sub_1B7D04B4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v12;

  v12 = a2;
  v5 = *(_QWORD **)(a1 + 208);
  v3 = (uint64_t **)(a1 + 208);
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = (uint64_t **)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    v6 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 288), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 328);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D04D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 368);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D04DF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v10 = (char *)operator new(0x78uLL);
    v12[1] = v6;
    *((_QWORD *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    v13 = 1;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 264);
  v7 = *(char **)(*(_QWORD *)a4 + 272);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 264);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 264);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 272);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 264);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 272);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 264);
      v15 = *(char **)(*(_QWORD *)a4 + 272);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 272);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 272);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 264);
          v25 = *(char **)(*(_QWORD *)a4 + 272);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 272);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 272);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 264);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 264);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 272);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 264);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 272);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 264);
      v41 = *(char **)(*(_QWORD *)a4 + 272);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 272);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 272);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 264);
      v11 = *(char **)(*(_QWORD *)a3 + 272);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 272);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 272);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 264);
      v24 = *(char **)(*(_QWORD *)a3 + 272);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 272);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 272);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 264);
            v31 = *(char **)(*(_QWORD *)a3 + 272);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 272);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 272);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 264);
    v14 = *(char **)(*(_QWORD *)a5 + 272);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 272);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 272);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 264);
        v23 = *(char **)(*(_QWORD *)a5 + 272);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 272);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 272);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 264);
            v32 = *(char **)(*(_QWORD *)a5 + 272);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 272);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 272);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 264);
    v16 = *(char **)(*(_QWORD *)a6 + 272);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 272);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 272);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 264);
        v25 = *(char **)(*(_QWORD *)a6 + 272);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 272);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 272);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 264);
            v34 = *(char **)(*(_QWORD *)a6 + 272);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 272);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 272);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 264);
                v43 = *(char **)(*(_QWORD *)a6 + 272);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 272);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 272);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  id v7;
  void *v8;
  void *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  char **v28;
  char *v29;
  unint64_t v30;
  id v31;
  id v32;
  void *v33;
  char v34;
  char *v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  int8x8_t prime;
  void *v41;
  void *v42;
  uint64_t v43;
  _QWORD **v44;
  unint64_t v45;
  uint8x8_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  _QWORD *i;
  unint64_t v51;
  char **v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  BOOL v56;
  void *v57;
  uint64_t **j;
  uint64_t *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  double *v64;
  double v65;
  double v66;
  double v67;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  unint64_t v72;
  id v73;
  id v74;
  uint64_t v75;
  _QWORD *v76;
  void *v78[2];
  __int128 v79;
  float v80;
  void *__p;
  void *v82;
  _QWORD v83[2];
  char v84;

  v7 = a2;
  v8 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = a3;
  v10 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::overallStatistics((uint64_t)v78, a3);
  v11 = *(_QWORD *)(a4 + 24);
  if (!v11)
    std::__throw_bad_function_call[abi:ne180100]();
  v12 = (*(uint64_t (**)(uint64_t, void **, double))(*(_QWORD *)v11 + 48))(v11, v78, v10);
  v13 = *(double **)(v12 + 8);
  v14 = 0.0;
  while (v13 != *(double **)(v12 + 16))
  {
    v16 = *v13;
    v15 = v13[1];
    v13 += 2;
    v14 = v14 + v15 - v16;
  }
  objc_msgSend(v8, "quantityWithUnit:doubleValue:", v9, v14 + *(double *)(v12 + 32));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setDuration:", v17);

  if (__p)
  {
    v82 = __p;
    operator delete(__p);
  }
  if (v78[1])
  {
    *(void **)&v79 = v78[1];
    operator delete(v78[1]);
  }

  v18 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::overallStatistics((uint64_t)v78, a3);
  v19 = *(_QWORD *)(a4 + 24);
  if (!v19)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v7, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(uint64_t, void **, double))(*(_QWORD *)v19 + 48))(v19, v78, v18));
  if (__p)
  {
    v82 = __p;
    operator delete(__p);
  }
  if (v78[1])
  {
    *(void **)&v79 = v78[1];
    operator delete(v78[1]);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_120;
  v71 = v7;
  v74 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v73 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)v78 = 0u;
  v79 = 0u;
  v80 = 1.0;
  v20 = *(_QWORD **)(a3 + 200);
  v76 = (_QWORD *)(a3 + 208);
  if (v20 == (_QWORD *)(a3 + 208))
    goto LABEL_119;
  do
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a3, v20[4]);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (!v21)
      goto LABEL_95;
    v23 = objc_msgSend(v21, "hash");
    v24 = v23;
    v25 = (unint64_t)v78[1];
    if (!v78[1])
      goto LABEL_35;
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]);
    v26.i16[0] = vaddlv_u8(v26);
    v27 = v26.u32[0];
    if (v26.u32[0] > 1uLL)
    {
      v4 = v23;
      if ((void *)v23 >= v78[1])
        v4 = v23 % (unint64_t)v78[1];
    }
    else
    {
      v4 = ((unint64_t)v78[1] - 1) & v23;
    }
    v28 = (char **)*((_QWORD *)v78[0] + v4);
    if (!v28 || (v29 = *v28) == 0)
    {
LABEL_35:
      v35 = (char *)operator new(0x68uLL);
      v83[0] = v35;
      v83[1] = &v79;
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = v24;
      *((_QWORD *)v35 + 2) = v22;
      *(_OWORD *)(v35 + 24) = 0u;
      *(_OWORD *)(v35 + 40) = 0u;
      *(_OWORD *)(v35 + 56) = 0u;
      *(_OWORD *)(v35 + 72) = 0u;
      *(_OWORD *)(v35 + 88) = 0u;
      v84 = 1;
      v36 = (float)(unint64_t)(*((_QWORD *)&v79 + 1) + 1);
      if (v25 && (float)(v80 * (float)v25) >= v36)
      {
LABEL_81:
        v52 = (char **)*((_QWORD *)v78[0] + v4);
        v29 = (char *)v83[0];
        if (v52)
        {
          *(_QWORD *)v83[0] = *v52;
        }
        else
        {
          *(_QWORD *)v83[0] = v79;
          *(_QWORD *)&v79 = v29;
          *((_QWORD *)v78[0] + v4) = &v79;
          if (!*(_QWORD *)v29)
          {
LABEL_90:
            v83[0] = 0;
            ++*((_QWORD *)&v79 + 1);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v83);
            goto LABEL_91;
          }
          v53 = *(_QWORD *)(*(_QWORD *)v29 + 8);
          if ((v25 & (v25 - 1)) != 0)
          {
            if (v53 >= v25)
              v53 %= v25;
          }
          else
          {
            v53 &= v25 - 1;
          }
          v52 = (char **)((char *)v78[0] + 8 * v53);
        }
        *v52 = v29;
        goto LABEL_90;
      }
      v37 = (v25 & (v25 - 1)) != 0;
      if (v25 < 3)
        v37 = 1;
      v38 = v37 | (2 * v25);
      v39 = vcvtps_u32_f32(v36 / v80);
      if (v38 <= v39)
        prime = (int8x8_t)v39;
      else
        prime = (int8x8_t)v38;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v25 = (unint64_t)v78[1];
      if ((void *)*(_QWORD *)&prime > v78[1])
        goto LABEL_47;
      if ((void *)*(_QWORD *)&prime < v78[1])
      {
        v47 = vcvtps_u32_f32((float)*((unint64_t *)&v79 + 1) / v80);
        if (v78[1] < (void *)3
          || (v48 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
        {
          v47 = std::__next_prime(v47);
        }
        else
        {
          v49 = 1 << -(char)__clz(v47 - 1);
          if (v47 >= 2)
            v47 = v49;
        }
        if (*(_QWORD *)&prime <= v47)
          prime = (int8x8_t)v47;
        if (*(_QWORD *)&prime >= v25)
        {
          v25 = (unint64_t)v78[1];
        }
        else
        {
          if (prime)
          {
LABEL_47:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v41 = operator new(8 * *(_QWORD *)&prime);
            v42 = v78[0];
            v78[0] = v41;
            if (v42)
              operator delete(v42);
            v43 = 0;
            v78[1] = (void *)prime;
            do
              *((_QWORD *)v78[0] + v43++) = 0;
            while (*(_QWORD *)&prime != v43);
            v44 = (_QWORD **)v79;
            if ((_QWORD)v79)
            {
              v45 = *(_QWORD *)(v79 + 8);
              v46 = (uint8x8_t)vcnt_s8(prime);
              v46.i16[0] = vaddlv_u8(v46);
              if (v46.u32[0] > 1uLL)
              {
                if (v45 >= *(_QWORD *)&prime)
                  v45 %= *(_QWORD *)&prime;
              }
              else
              {
                v45 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)v78[0] + v45) = &v79;
              for (i = *v44; i; v45 = v51)
              {
                v51 = i[1];
                if (v46.u32[0] > 1uLL)
                {
                  if (v51 >= *(_QWORD *)&prime)
                    v51 %= *(_QWORD *)&prime;
                }
                else
                {
                  v51 &= *(_QWORD *)&prime - 1;
                }
                if (v51 != v45)
                {
                  if (!*((_QWORD *)v78[0] + v51))
                  {
                    *((_QWORD *)v78[0] + v51) = v44;
                    goto LABEL_72;
                  }
                  *v44 = (_QWORD *)*i;
                  *i = **((_QWORD **)v78[0] + v51);
                  **((_QWORD **)v78[0] + v51) = i;
                  i = v44;
                }
                v51 = v45;
LABEL_72:
                v44 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v25 = (unint64_t)prime;
            goto LABEL_76;
          }
          v57 = v78[0];
          v78[0] = 0;
          if (v57)
            operator delete(v57);
          v25 = 0;
          v78[1] = 0;
        }
      }
LABEL_76:
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v24 >= v25)
          v4 = v24 % v25;
        else
          v4 = v24;
      }
      else
      {
        v4 = (v25 - 1) & v24;
      }
      goto LABEL_81;
    }
    v72 = (unint64_t)v78[1] - 1;
    while (1)
    {
      v30 = *((_QWORD *)v29 + 1);
      if (v30 == v24)
        break;
      if (v27 > 1)
      {
        if (v30 >= v25)
          v30 %= v25;
      }
      else
      {
        v30 &= v72;
      }
      if (v30 != v4)
        goto LABEL_35;
LABEL_34:
      v29 = *(char **)v29;
      if (!v29)
        goto LABEL_35;
    }
    v31 = *((id *)v29 + 2);
    v32 = v22;
    v33 = v32;
    if (v31 != v32)
    {
      v34 = objc_msgSend(v31, "isEqualToString:", v32);

      if ((v34 & 1) != 0)
        goto LABEL_91;
      goto LABEL_34;
    }

LABEL_91:
    *((_QWORD *)v29 + 3) = v20[5];
    if (v29 + 16 == (char *)(v20 + 4))
    {
      *((_QWORD *)v29 + 7) = v20[9];
      *((_QWORD *)v29 + 8) = v20[10];
    }
    else
    {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v29 + 32, (char *)v20[6], v20[7], (uint64_t)(v20[7] - v20[6]) >> 4);
      *((_QWORD *)v29 + 7) = v20[9];
      *((_QWORD *)v29 + 8) = v20[10];
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v29 + 72, (char *)v20[11], v20[12], (uint64_t)(v20[12] - v20[11]) >> 4);
    }
    *((_QWORD *)v29 + 12) = v20[14];

    a3 = v75;
LABEL_95:
    v54 = (_QWORD *)v20[1];
    if (v54)
    {
      do
      {
        v55 = v54;
        v54 = (_QWORD *)*v54;
      }
      while (v54);
    }
    else
    {
      do
      {
        v55 = (_QWORD *)v20[2];
        v56 = *v55 == (_QWORD)v20;
        v20 = v55;
      }
      while (!v56);
    }
    v20 = v55;
  }
  while (v55 != v76);
  for (j = (uint64_t **)v79; j; j = (uint64_t **)*j)
  {
    v59 = j[2];
    v60 = (void *)MEMORY[0x1E0CB6A28];
    objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    v62 = *(_QWORD *)(a4 + 24);
    if (!v62)
      std::__throw_bad_function_call[abi:ne180100]();
    v63 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v62 + 48))(v62, (uint64_t *)j + 3);
    v64 = *(double **)(v63 + 8);
    v65 = 0.0;
    while (v64 != *(double **)(v63 + 16))
    {
      v67 = *v64;
      v66 = v64[1];
      v64 += 2;
      v65 = v65 + v66 - v67;
    }
    objc_msgSend(v60, "quantityWithUnit:doubleValue:", v61, v65 + *(double *)(v63 + 32));
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "setObject:forKeyedSubscript:", v68, v59);

    v69 = *(_QWORD *)(a4 + 24);
    if (!v69)
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v69 + 48))(v69, (uint64_t *)j + 3));
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v73, "setObject:forKeyedSubscript:", v70, v59);

  }
LABEL_119:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)v78);
  v7 = v71;
  objc_msgSend(v71, "setDurationBySource:", v74);
  objc_msgSend(v71, "setDataCountBySource:", v73);

LABEL_120:
}

void sub_1B7D07478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

double HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  double result;

  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(_QWORD *)(a2 + 120);
  v4 = *(const void **)(a2 + 128);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 8), v4, *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - (_QWORD)v4) >> 4);
  v6 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(const void **)(a2 + 168);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 48), v7, *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - (_QWORD)v7) >> 4);
  result = *(double *)(a2 + 192);
  *(double *)(a1 + 72) = result;
  return result;
}

void sub_1B7D075F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsCombined>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsCombined>>,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = v3;
    operator delete(v3);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsCombined>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D06BA0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D06BA0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D06BA0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D077F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D06BA0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 40;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D06C30;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D06C30;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D06C30;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D07A28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D06C30;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsTimeInterval,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D06CB0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D06CB0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 560))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D07CEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 560))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 536);
      v7 = *(_QWORD *)(a1 + 528);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D07F74(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  unint64_t v10;
  int v11;
  char v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unint64_t v19;
  int v20;
  char v21;
  double v22;
  double v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  double v63;
  double v64;

  v5 = a1 + 8;
  v6 = *(double *)(a1 + 8);
  v8 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v9 = *(double *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(unsigned __int8 *)(a2 + 32);
  v12 = *(_BYTE *)(a2 + 33);
  v13 = v6 - v7;
  if (v6 - v7 >= 0.01)
  {
    v14 = v9 - v7;
    if (v14 - v13 >= 0.01)
    {
      v8 = v8 - v8 * (v13 / v14);
    }
    else
    {
      v11 = 0;
      v10 = 0;
      v12 = 0;
      v9 = 0.0;
      v6 = 0.0;
      v8 = 0.0;
    }
  }
  else
  {
    v6 = *(double *)(a2 + 8);
  }
  v15 = *(double *)(a1 + 16);
  v16 = v15 - v6;
  v17 = v9 - v6;
  v18 = v9 - v6 - (v15 - v6);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v18 < 0.01)
    {
LABEL_11:
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0.0;
      v15 = 0.0;
      v23 = 0.0;
      if (!v11)
        goto LABEL_52;
      goto LABEL_16;
    }
    if (v16 >= 0.01)
      goto LABEL_15;
LABEL_14:
    v21 = v12;
    v20 = v11;
    v19 = v10;
    v23 = v9;
    v15 = v6;
    v22 = v8;
    goto LABEL_52;
  }
  if (v16 < 0.01)
    goto LABEL_14;
  if (v18 < 0.01)
    goto LABEL_11;
LABEL_15:
  v23 = v9;
  v19 = v10;
  v22 = v8 - v8 * (v16 / v17);
  v20 = v11;
  v21 = v12;
  v9 = *(double *)(a1 + 16);
  v8 = v8 * (v16 / v17);
  if (!v11)
    goto LABEL_52;
LABEL_16:
  v63 = v6;
  v64 = v9;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 232, v10, v10);
  v24 = *(_QWORD *)(a1 + 112);
  if (v24 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 128) <= 0)
  {
    v29.f64[1] = *(float64_t *)(a1 + 16);
    v26 = v63;
    v25 = v64;
    v29.f64[0] = v63;
    v30.f64[0] = *(float64_t *)(a1 + 8);
    v30.f64[1] = v64;
    v31 = (int8x16_t)vcgtq_f64(v30, v29);
    v30.f64[0] = v63;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v31, *(int8x16_t *)(a1 + 8), (int8x16_t)v30);
  }
  else
  {
    v26 = v63;
    v25 = v64;
    if (v63 < *(double *)(a1 + 48))
    {
      v27 = *(double *)(a1 + 8);
      if (v63 >= v27)
        v27 = v63;
      *(double *)(a1 + 48) = v27;
    }
    if (v64 > *(double *)(a1 + 56))
    {
      v28 = *(double *)(a1 + 16);
      if (v28 >= v64)
        v28 = v64;
      *(double *)(a1 + 56) = v28;
    }
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v32 = *(double *)(a1 + 64);
    if (v26 < v32)
      v32 = v26;
    *(double *)(a1 + 64) = v32;
  }
  if (a3 && v26 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v26);
    v26 = v63;
    v25 = v64;
    v24 = *(_QWORD *)(a1 + 112);
  }
  v33 = *(_QWORD *)(a1 + 120);
  if (v24 >= v33)
  {
    v35 = *(_QWORD *)(a1 + 104);
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v35) >> 4);
    v37 = v36 + 1;
    if (v36 + 1 > 0x555555555555555)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - v35) >> 4);
    if (2 * v38 > v37)
      v37 = 2 * v38;
    if (v38 >= 0x2AAAAAAAAAAAAAALL)
      v39 = 0x555555555555555;
    else
      v39 = v37;
    if (v39)
    {
      v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v39);
      v26 = v63;
      v25 = v64;
    }
    else
    {
      v40 = 0;
    }
    v41 = v39 + 48 * v36;
    v42 = v39 + 48 * v40;
    *(double *)v41 = v8;
    *(double *)(v41 + 8) = v26;
    *(double *)(v41 + 16) = v25;
    *(_QWORD *)(v41 + 24) = v10;
    *(_BYTE *)(v41 + 32) = v11;
    *(_BYTE *)(v41 + 33) = v12;
    *(_WORD *)(v41 + 40) = 0;
    *(_BYTE *)(v41 + 42) = 0;
    v34 = v41 + 48;
    v44 = *(char **)(a1 + 104);
    v43 = *(char **)(a1 + 112);
    if (v43 != v44)
    {
      do
      {
        v45 = *((_OWORD *)v43 - 3);
        v46 = *((_OWORD *)v43 - 2);
        *(_OWORD *)(v41 - 21) = *(_OWORD *)(v43 - 21);
        *(_OWORD *)(v41 - 48) = v45;
        *(_OWORD *)(v41 - 32) = v46;
        v41 -= 48;
        v43 -= 48;
      }
      while (v43 != v44);
      v43 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v41;
    *(_QWORD *)(a1 + 112) = v34;
    *(_QWORD *)(a1 + 120) = v42;
    if (v43)
      operator delete(v43);
  }
  else
  {
    *(double *)v24 = v8;
    *(double *)(v24 + 8) = v26;
    *(double *)(v24 + 16) = v25;
    *(_QWORD *)(v24 + 24) = v10;
    *(_BYTE *)(v24 + 32) = v11;
    *(_BYTE *)(v24 + 33) = v12;
    *(_WORD *)(v24 + 40) = 0;
    v34 = v24 + 48;
    *(_BYTE *)(v24 + 42) = 0;
  }
  *(_QWORD *)(a1 + 112) = v34;
  if (*(_BYTE *)(a1 + 33))
  {
    v47 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v10);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v47);
  }
LABEL_52:
  if (v20)
  {
    v48 = *(_QWORD *)(a1 + 424);
    v49 = *(_QWORD *)(a1 + 432);
    if (v48 >= v49)
    {
      v51 = *(_QWORD *)(a1 + 416);
      v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v51) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v51) >> 3);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0x333333333333333)
        v55 = 0x666666666666666;
      else
        v55 = v53;
      if (v55)
        v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
      else
        v56 = 0;
      v57 = v55 + 40 * v52;
      v58 = v55 + 40 * v56;
      *(double *)v57 = v22;
      *(double *)(v57 + 8) = v15;
      *(double *)(v57 + 16) = v23;
      *(_QWORD *)(v57 + 24) = v19;
      *(_BYTE *)(v57 + 32) = v20;
      *(_BYTE *)(v57 + 33) = v21;
      v50 = v57 + 40;
      v60 = *(char **)(a1 + 416);
      v59 = *(char **)(a1 + 424);
      if (v59 != v60)
      {
        do
        {
          v61 = *(_OWORD *)(v59 - 40);
          v62 = *(_OWORD *)(v59 - 24);
          *(_WORD *)(v57 - 8) = *((_WORD *)v59 - 4);
          *(_OWORD *)(v57 - 24) = v62;
          *(_OWORD *)(v57 - 40) = v61;
          v57 -= 40;
          v59 -= 40;
        }
        while (v59 != v60);
        v59 = *(char **)(a1 + 416);
      }
      *(_QWORD *)(a1 + 416) = v57;
      *(_QWORD *)(a1 + 424) = v50;
      *(_QWORD *)(a1 + 432) = v58;
      if (v59)
        operator delete(v59);
    }
    else
    {
      *(double *)v48 = v22;
      *(double *)(v48 + 8) = v15;
      *(double *)(v48 + 16) = v23;
      *(_QWORD *)(v48 + 24) = v19;
      *(_BYTE *)(v48 + 32) = v20;
      v50 = v48 + 40;
      *(_BYTE *)(v48 + 33) = v21;
    }
    *(_QWORD *)(a1 + 424) = v50;
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 562))
  {
    *(_BYTE *)(a1 + 564) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 564) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D084CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 416), *(_QWORD *)(a1 + 424), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 424) - *(_QWORD *)(a1 + 416)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D085B4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  void *v9;
  void *v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *i;
  _QWORD *v18;

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 440), *(id *)(a1 + 40));
  v9 = *(void **)(a1 + 136);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 128) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 144) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = 0;
  v11 = 0uLL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  if (v10)
  {
    *(_QWORD *)(a1 + 184) = v10;
    operator delete(v10);
    v11 = 0uLL;
  }
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 192) = v11;
  if (*(_QWORD *)(a1 + 224))
  {
    v12 = *(_QWORD *)(a1 + 216);
    v13 = *(_QWORD **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = a1 + 216;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    if (v13[1])
      v14 = (_QWORD *)v13[1];
    else
      v14 = v13;
    if (v14)
    {
      v15 = (_QWORD *)v14[2];
      if (v15)
      {
        v16 = (_QWORD *)*v15;
        if ((_QWORD *)*v15 == v14)
        {
          *v15 = 0;
          while (1)
          {
            v18 = (_QWORD *)v15[1];
            if (!v18)
              break;
            do
            {
              v15 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
        }
        else
        {
          for (v15[1] = 0; v16; v16 = (_QWORD *)v15[1])
          {
            do
            {
              v15 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(v14);
        for (i = (_QWORD *)v15[2]; i; i = (_QWORD *)i[2])
          v15 = i;
        v14 = v15;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>>>::destroy(v14);
  }
  objc_storeStrong(v8, *(id *)(a1 + 440));
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a1 + 416);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 564))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 564) = 0;
  }

}

void sub_1B7D08784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 560))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D08840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 576));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 560) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D08BA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C402E380188);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D08D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D08FBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  double v11;
  double v12;
  _QWORD v13[2];
  double v14;
  uint64_t v15;
  char v16;
  char v17;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  *(double *)v13 = a5;
  *(double *)&v13[1] = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  else
  {
    v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      v8 = 0;
    }
    *(double *)v13 = a5;
    v14 = a7;
    v16 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 560))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D09C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D09D28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI24HDStatisticsTimeIntervalS1_EE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsTimeInterval,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D06D60;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_WORD *)(a1 + 568) = 1;
  *(_BYTE *)(a1 + 570) = 0;
  *(_BYTE *)(a1 + 572) = 0;
  *(_QWORD *)(a1 + 576) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_QWORD *)(a1 + 616) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D06D60;
  v2 = *(void **)(a1 + 600);
  if (v2)
  {
    *(_QWORD *)(a1 + 608) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 536);
  if (v3)
  {
    *(_QWORD *)(a1 + 544) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 568) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_configureForStartTime(a1);

}

void sub_1B7D09E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 576) = v4;
    v3 = v5;
  }

}

void sub_1B7D09EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 73, a2);
  v7 = a2;
  v4 = a1[73];
  v5 = a1[70];
  a1[70] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[70]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 248) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D0A090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[52];

  if (*(_BYTE *)(a1 + 568))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D0A138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 570))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 569))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 571))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 608);
    v18 = *(_QWORD *)(a1 + 616);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 600);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 608);
      v33 = *(char **)(a1 + 600);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 600);
      }
      *(_QWORD *)(a1 + 600) = v28;
      *(_QWORD *)(a1 + 608) = v21;
      *(_QWORD *)(a1 + 616) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 608) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D0A38C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 570))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 570) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 569))
    goto LABEL_5;
  v9 = *(void **)(a1 + 592);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_395);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 592);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 592);
  *(_QWORD *)(a1 + 592) = 0;

  *(_BYTE *)(a1 + 569) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 600);
    *(_QWORD *)(a1 + 616) = 0;
    *(_QWORD *)(a1 + 608) = 0;
    *(_QWORD *)(a1 + 600) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 600);
      v37 = *(__int128 **)(a1 + 608);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 608);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 608) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 600);
  v39 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536));
  }
  *(_BYTE *)(a1 + 570) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 572))
    {
      *(_BYTE *)(a1 + 572) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 570) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D0AA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 570) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 571) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 570))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 570))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 592);
    *(_QWORD *)(a1 + 592) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 569) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 569))
  {
    v8 = *(void **)(a1 + 592);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 592);
      *(_QWORD *)(a1 + 592) = v9;

      v8 = *(void **)(a1 + 592);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D0AD80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 568) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 568) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D0AEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 568) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 568), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsTimeInterval>::archive((uint64_t)&v37, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 328);
  if (v9 != (_QWORD *)(a1 + 336))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsTimeInterval>::archive((uint64_t)&v37, (int8x16_t *)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 336));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 536);
  for (k = *(int8x16_t **)(a1 + 544); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D0B238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD **i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t j;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  id v57;
  _QWORD *v58;
  id v59;
  uint64_t v60;
  _BYTE v61[416];
  __int128 v62;
  __int128 v63;
  int8x16_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  int8x16_t v69;
  uint64_t v70;
  uint64_t v71[4];
  void *__p;
  char *v73;
  unint64_t v74;
  int v75;
  _QWORD v76[10];
  uint64_t **v77;
  uint64_t *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  int v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 v91;
  __int128 v92;
  int v93;
  void (**v94)(statistics::StatisticsEngine *__hidden);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _BYTE v101[32];
  uint64_t v102;
  int v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int16 v110;

  v57 = a2;
  *(_BYTE *)(a1 + 568) = objc_msgSend(v57, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v57;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v61, 0, -1.79769313e308, 1.79769313e308);
  v62 = 0u;
  v63 = 0u;
  v102 = 0;
  v59 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v101, (const unsigned __int8 *)objc_msgSend(v59, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v102));
  v94 = &off_1E6D09A88;
  v95 = 0;
  v99 = 0;
  v97 = 0;
  v98 = 0;
  v100 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v94, (PB::Reader *)v101);
  v60 = v96;
  if (v95)
  {
    v68 = 0;
    memset(v71, 0, sizeof(v71));
    __p = 0;
    memset(v76, 0, 74);
    v79 = 0;
    v74 = 0;
    v73 = 0;
    v75 = 0;
    v78 = 0;
    v77 = &v78;
    v81 = 0u;
    v80 = 0u;
    v82 = 1065353216;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0;
    v87 = 1065353216;
    v88 = 0u;
    v89 = 0u;
    v90 = 1065353216;
    v91 = 0u;
    v92 = 0u;
    v93 = 1065353216;
    v64 = vextq_s8(*(int8x16_t *)(v95 + 8), *(int8x16_t *)(v95 + 8), 8uLL);
    v4 = *(_QWORD *)(v95 + 72);
    v65 = *(_QWORD *)(v95 + 64);
    v66 = *(_BYTE *)(v95 + 185);
    v67 = *(_BYTE *)(v95 + 186);
    v69 = vextq_s8(*(int8x16_t *)(v95 + 24), *(int8x16_t *)(v95 + 24), 8uLL);
    v70 = v4;
    v6 = *(_QWORD *)(v95 + 80);
    v5 = *(_QWORD *)(v95 + 88);
    v58 = (_QWORD *)v95;
    if (v6 != v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v7 >= v74)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v74 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v74 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v73;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v73 = (char *)(v19 + 6);
          v74 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v73 = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    v23 = (_QWORD *)v58[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, v23);
      v75 = v103;
      v76[0] = v104;
      if (v76[1])
      {
        v76[2] = v76[1];
        operator delete((void *)v76[1]);
      }
      *(_OWORD *)&v76[1] = v105;
      v76[4] = v107;
      *(_OWORD *)&v76[5] = v108;
      v76[3] = v106;
      v106 = 0;
      v105 = 0uLL;
      *(_OWORD *)&v76[7] = v109;
      LOWORD(v76[9]) = v110;
    }
    v24 = (_QWORD **)v58[17];
    for (i = (_QWORD **)v58[18]; v24 != i; ++v24)
    {
      v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *v24);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v78;
      v29 = &v78;
      v30 = &v78;
      if (v78)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_34;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_37;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_34:
      v33 = (char *)operator new(0x80uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *((_QWORD *)v33 + 15) = 0;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v77)
      {
        v77 = (uint64_t **)*v77;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v32);
      ++v79;
LABEL_37:
      v34 = (void *)*((_QWORD *)v33 + 7);
      *((_DWORD *)v33 + 10) = v103;
      *((_QWORD *)v33 + 6) = v104;
      if (v34)
      {
        *((_QWORD *)v33 + 8) = v34;
        operator delete(v34);
        *((_QWORD *)v33 + 7) = 0;
        *((_QWORD *)v33 + 8) = 0;
        *((_QWORD *)v33 + 9) = 0;
      }
      *(_OWORD *)(v33 + 56) = v105;
      *((_QWORD *)v33 + 9) = v106;
      *((_QWORD *)v33 + 10) = v107;
      v35 = v109;
      *(_OWORD *)(v33 + 88) = v108;
      v106 = 0;
      v105 = 0uLL;
      *(_OWORD *)(v33 + 104) = v35;
      *((_WORD *)v33 + 60) = v110;
    }
    v36 = v58[5];
    for (j = v58[6]; v36 != j; v36 += 8)
    {
      v39 = *(double *)(*(_QWORD *)v36 + 8);
      v38 = *(double *)(*(_QWORD *)v36 + 16);
      if (v39 >= v38)
        v40 = *(double *)(*(_QWORD *)v36 + 16);
      else
        v40 = *(double *)(*(_QWORD *)v36 + 8);
      if (v38 < v39)
        v38 = *(double *)(*(_QWORD *)v36 + 8);
      HKIntervalMask<double>::_insertInterval(v71, v40, v38);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::operator=((uint64_t)v61, (uint64_t)&v64);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v64);
  }
  v41 = v97;
  v42 = v98;
  if (v97 != v98)
  {
    v43 = *((_QWORD *)&v62 + 1);
    do
    {
      v44 = *(_QWORD *)(*(_QWORD *)v41 + 24);
      v45 = *(_QWORD *)(*(_QWORD *)v41 + 32);
      v46 = *(_QWORD *)(*(_QWORD *)v41 + 8);
      v47 = *(_QWORD *)(*(_QWORD *)v41 + 16);
      if (v43 >= (unint64_t)v63)
      {
        v48 = (void *)v62;
        v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v43 - v62) >> 3);
        v50 = v49 + 1;
        if (v49 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v63 - v62) >> 3) > v50)
          v50 = 0x999999999999999ALL * ((uint64_t)(v63 - v62) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v63 - v62) >> 3) >= 0x333333333333333)
          v51 = 0x666666666666666;
        else
          v51 = v50;
        if (v51)
        {
          v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v51);
          v43 = *((_QWORD *)&v62 + 1);
          v48 = (void *)v62;
        }
        else
        {
          v52 = 0;
        }
        v53 = v51 + 40 * v49;
        *(_QWORD *)v53 = v45;
        *(_QWORD *)(v53 + 8) = v44;
        *(_QWORD *)(v53 + 16) = v46;
        *(_QWORD *)(v53 + 24) = v47;
        *(_WORD *)(v53 + 32) = 1;
        v54 = v53;
        if ((void *)v43 != v48)
        {
          do
          {
            v55 = *(_OWORD *)(v43 - 40);
            v56 = *(_OWORD *)(v43 - 24);
            *(_WORD *)(v54 - 8) = *(_WORD *)(v43 - 8);
            *(_OWORD *)(v54 - 24) = v56;
            *(_OWORD *)(v54 - 40) = v55;
            v54 -= 40;
            v43 -= 40;
          }
          while ((void *)v43 != v48);
          v48 = (void *)v62;
        }
        v43 = v53 + 40;
        *(_QWORD *)&v62 = v54;
        *((_QWORD *)&v62 + 1) = v53 + 40;
        *(_QWORD *)&v63 = v51 + 40 * v52;
        if (v48)
          operator delete(v48);
      }
      else
      {
        *(_QWORD *)v43 = v45;
        *(_QWORD *)(v43 + 8) = v44;
        *(_QWORD *)(v43 + 16) = v46;
        *(_QWORD *)(v43 + 24) = v47;
        *(_WORD *)(v43 + 32) = 1;
        v43 += 40;
      }
      *((_QWORD *)&v62 + 1) = v43;
      v41 += 8;
    }
    while (v41 != v42);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v94);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v60);
  if ((_QWORD)v62)
  {
    *((_QWORD *)&v62 + 1) = v62;
    operator delete((void *)v62);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v61);

}

void sub_1B7D0B98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a3);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x350]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x328]);
  v9 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v9;
    operator delete(v9);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2E8]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy((_QWORD *)STACK[0x2D8]);
  v10 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v10;
    operator delete(v10);
  }
  v11 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x258]);
  v12 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3A8]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 424);
  if (v2)
  {
    *(_QWORD *)(a1 + 432) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 376);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 336);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 296);
  v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(_QWORD *)(a1 + 280) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 232);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 216));
  v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    v2 = (void *)a1[7];
    if (v2)
    {
      a1[8] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[416];
  uint64_t v18;
  _BYTE v19[416];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[352];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 584));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 568) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7D0BEF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 53), (__n128 *)(a2 + 424));
  v4 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a2 + 448) = 0;
  v5 = (void *)a1[56];
  a1[56] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD *v37;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_DWORD *)(a2 + 120);
  v13 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 128) = v13;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 136), *(const void **)(a2 + 136), *(_QWORD *)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v14 = *(_OWORD *)(a2 + 168);
  v15 = *(_OWORD *)(a2 + 184);
  v16 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = 0;
  v17 = (_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_QWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 168) = v14;
  *(_QWORD *)(a1 + 224) = 0;
  v18 = *(_QWORD **)(a2 + 208);
  if (v18 != (_QWORD *)(a2 + 216))
  {
    v19 = 0;
    v20 = (_QWORD *)(a1 + 216);
    while (1)
    {
      v21 = (_QWORD *)(a1 + 216);
      if (v20 == v17)
        goto LABEL_12;
      v22 = v19;
      v23 = (_QWORD *)(a1 + 216);
      if (v19)
      {
        do
        {
          v21 = v22;
          v22 = (_QWORD *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v23[2];
          v24 = *v21 == (_QWORD)v23;
          v23 = v21;
        }
        while (v24);
      }
      v25 = v18[4];
      if (v21[4] < v25)
      {
LABEL_12:
        if (v19)
          v26 = (uint64_t **)v21;
        else
          v26 = (uint64_t **)(a1 + 216);
        if (v19)
          v27 = (uint64_t **)(v21 + 1);
        else
          v27 = (uint64_t **)(a1 + 216);
        if (!*v27)
        {
LABEL_28:
          v30 = (char *)operator new(0x80uLL);
          v31 = v18[4];
          v32 = *((_DWORD *)v18 + 10);
          v33 = v18[6];
          *((_QWORD *)v30 + 7) = 0;
          *((_QWORD *)v30 + 4) = v31;
          *((_DWORD *)v30 + 10) = v32;
          *((_QWORD *)v30 + 6) = v33;
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v30 + 7, (const void *)v18[7], v18[8], (uint64_t)(v18[8] - v18[7]) >> 4);
          *((_QWORD *)v30 + 10) = v18[10];
          v34 = *(_OWORD *)(v18 + 11);
          v35 = *(_OWORD *)(v18 + 13);
          *((_QWORD *)v30 + 15) = v18[15];
          *(_OWORD *)(v30 + 104) = v35;
          *(_OWORD *)(v30 + 88) = v34;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 208), (uint64_t)v26, v27, (uint64_t *)v30);
        }
      }
      else
      {
        v27 = (uint64_t **)(a1 + 216);
        v26 = (uint64_t **)(a1 + 216);
        if (!v19)
          goto LABEL_28;
        v28 = v19;
        while (1)
        {
          while (1)
          {
            v26 = (uint64_t **)v28;
            v29 = v28[4];
            if (v29 <= v25)
              break;
            v28 = *v26;
            v27 = v26;
            if (!*v26)
              goto LABEL_28;
          }
          if (v29 >= v25)
            break;
          v28 = v26[1];
          if (!v28)
          {
            v27 = v26 + 1;
            goto LABEL_28;
          }
        }
      }
      v36 = (_QWORD *)v18[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v18[2];
          v24 = *v37 == (_QWORD)v18;
          v18 = v37;
        }
        while (!v24);
      }
      if (v37 == (_QWORD *)(a2 + 216))
        break;
      v19 = (_QWORD *)*v17;
      v20 = *(_QWORD **)(a1 + 208);
      v18 = v37;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 232, a2 + 232);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 272), *(const void **)(a2 + 272), *(_QWORD *)(a2 + 280), (uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 296, a2 + 296);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 336, a2 + 336);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 376, a2 + 376);
  return a1;
}

void sub_1B7D0C2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v13 + 280) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(*v12);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v13 + 144) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 136, (__n128 *)(a2 + 136));
  v11 = a1 + 216;
  v10 = *(_QWORD **)(a1 + 216);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v12 = *(_OWORD *)(a2 + 168);
  v13 = *(_OWORD *)(a2 + 184);
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 184) = v13;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(v10);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v14 = (_QWORD *)(a2 + 216);
  v15 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 216) = v15;
  v16 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 224) = v16;
  if (v16)
  {
    *(_QWORD *)(v15 + 16) = v11;
    *(_QWORD *)(a2 + 208) = v14;
    *v14 = 0;
    *(_QWORD *)(a2 + 224) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 208) = v11;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 232, (uint64_t *)(a2 + 232));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 272, (__n128 *)(a2 + 272));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 296, (uint64_t *)(a2 + 296));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 336, (uint64_t *)(a2 + 336));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 376, (uint64_t *)(a2 + 376));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  unint64_t WeakRetained;
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  const void *v20;
  __int128 v21;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  unint64_t v27;
  const void *v28;
  __int128 v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  uint64_t **v37;
  uint64_t *v38;
  unint64_t v39;
  id v40;
  id v41;
  void *v42;
  char v43;
  char *v44;
  float v45;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  int8x8_t prime;
  void *v50;
  void *v51;
  uint64_t v52;
  _QWORD **v53;
  unint64_t v54;
  uint8x8_t v55;
  unint64_t v56;
  uint8x8_t v57;
  uint64_t v58;
  _QWORD *i;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  _QWORD *v65;
  _QWORD *v66;
  BOOL v67;
  void *v68;
  id *v69;
  id v70;
  void *v71;
  void *v72;
  uint64_t v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  void *v78;
  void *v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  int v85;
  void *v86;
  void *v87;
  int v88;
  unint64_t v91;
  id v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  void *v97[2];
  void *__p[2];
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _QWORD v104[2];
  char v105;
  _QWORD v106[3];
  _QWORD *v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308)
    v6 = (double *)a2;
  v94 = (id)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  v96 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      WeakRetained = objc_claimAutoreleasedReturnValue();

      v9 = (id)WeakRetained;
    }

  }
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v94, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = (unint64_t)objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      WeakRetained = (unint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v12 = *(uint64_t **)(a2 + 272);
      v13 = *(uint64_t **)(a2 + 280);
      while (v12 != v13)
      {
        v14 = *v12;
        v15 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v15, "sourceForSourceID:", v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        if (v16)
        {
          if ((objc_msgSend((id)WeakRetained, "containsObject:", v16) & 1) == 0)
            objc_msgSend((id)WeakRetained, "addObject:", v16);
        }

        ++v12;
      }
      v17 = (void *)objc_msgSend((id)WeakRetained, "copy");
      objc_msgSend(v11, "_setSources:", v17);

    }
  }

  v106[0] = &off_1E6D06E30;
  v107 = v106;
  v95 = v11;
  v18 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v97[0]) = *(_DWORD *)(v96 + 120);
  v20 = *(const void **)(v96 + 136);
  v97[1] = *(void **)(v96 + 128);
  __p[0] = 0;
  __p[1] = 0;
  v99 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(__p, v20, *(_QWORD *)(v96 + 144), (uint64_t)(*(_QWORD *)(v96 + 144) - (_QWORD)v20) >> 4);
  v100 = *(_QWORD *)(v96 + 160);
  v21 = *(_OWORD *)(v96 + 184);
  v101 = *(_OWORD *)(v96 + 168);
  v102 = v21;
  v103 = *(_QWORD *)(v96 + 200);
  if (!v107)
    std::__throw_bad_function_call[abi:ne180100]();
  v22 = (*(uint64_t (**)(_QWORD *, void **))(*v107 + 48))(v107, v97);
  v23 = *(double **)(v22 + 8);
  v24 = 0.0;
  while (v23 != *(double **)(v22 + 16))
  {
    v26 = *v23;
    v25 = v23[1];
    v23 += 2;
    v24 = v24 + v25 - v26;
  }
  objc_msgSend(v18, "quantityWithUnit:doubleValue:", v19, v24 + *(double *)(v22 + 32));
  v27 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v95, "setDuration:", v27);

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  LODWORD(v97[0]) = *(_DWORD *)(v96 + 120);
  v28 = *(const void **)(v96 + 136);
  v97[1] = *(void **)(v96 + 128);
  __p[0] = 0;
  __p[1] = 0;
  v99 = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(__p, v28, *(_QWORD *)(v96 + 144), (uint64_t)(*(_QWORD *)(v96 + 144) - (_QWORD)v28) >> 4);
  v100 = *(_QWORD *)(v96 + 160);
  v29 = *(_OWORD *)(v96 + 184);
  v101 = *(_OWORD *)(v96 + 168);
  v102 = v29;
  v103 = *(_QWORD *)(v96 + 200);
  if (!v107)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v95, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_QWORD *, void **))(*v107 + 48))(v107, v97));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_133;
  v93 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v92 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)v97 = 0u;
  *(_OWORD *)__p = 0u;
  LODWORD(v99) = 1065353216;
  v30 = *(_QWORD **)(v96 + 208);
  if (v30 == (_QWORD *)(v96 + 216))
    goto LABEL_132;
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(v96, v30[4]);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v31;
    if (!v31)
      goto LABEL_108;
    v33 = objc_msgSend(v31, "hash");
    v34 = v33;
    v27 = (unint64_t)v97[1];
    if (!v97[1])
      goto LABEL_49;
    v35 = (uint8x8_t)vcnt_s8((int8x8_t)v97[1]);
    v35.i16[0] = vaddlv_u8(v35);
    v36 = v35.u32[0];
    if (v35.u32[0] > 1uLL)
    {
      WeakRetained = v33;
      if ((void *)v33 >= v97[1])
        WeakRetained = v33 % (unint64_t)v97[1];
    }
    else
    {
      WeakRetained = ((unint64_t)v97[1] - 1) & v33;
    }
    v37 = (uint64_t **)*((_QWORD *)v97[0] + WeakRetained);
    if (!v37 || (v38 = *v37) == 0)
    {
LABEL_49:
      v44 = (char *)operator new(0x70uLL);
      v104[0] = v44;
      v104[1] = __p;
      *(_QWORD *)v44 = 0;
      *((_QWORD *)v44 + 1) = v34;
      *((_QWORD *)v44 + 2) = v32;
      *(_OWORD *)(v44 + 24) = 0u;
      *(_OWORD *)(v44 + 40) = 0u;
      *(_OWORD *)(v44 + 56) = 0u;
      *(_OWORD *)(v44 + 72) = 0u;
      *(_OWORD *)(v44 + 88) = 0u;
      *((_QWORD *)v44 + 13) = 0;
      v105 = 1;
      v45 = (float)((unint64_t)__p[1] + 1);
      if (v27 && (float)(*(float *)&v99 * (float)v27) >= v45)
      {
LABEL_95:
        v61 = (_QWORD *)*((_QWORD *)v97[0] + WeakRetained);
        v38 = (uint64_t *)v104[0];
        if (v61)
        {
          *(_QWORD *)v104[0] = *v61;
        }
        else
        {
          *(_QWORD *)v104[0] = __p[0];
          __p[0] = v38;
          *((_QWORD *)v97[0] + WeakRetained) = __p;
          if (!*v38)
          {
LABEL_104:
            v104[0] = 0;
            ++__p[1];
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v104);
            goto LABEL_105;
          }
          v62 = *(_QWORD *)(*v38 + 8);
          if ((v27 & (v27 - 1)) != 0)
          {
            if (v62 >= v27)
              v62 %= v27;
          }
          else
          {
            v62 &= v27 - 1;
          }
          v61 = (char *)v97[0] + 8 * v62;
        }
        *v61 = v38;
        goto LABEL_104;
      }
      v46 = (v27 & (v27 - 1)) != 0;
      if (v27 < 3)
        v46 = 1;
      v47 = v46 | (2 * v27);
      v48 = vcvtps_u32_f32(v45 / *(float *)&v99);
      if (v47 <= v48)
        prime = (int8x8_t)v48;
      else
        prime = (int8x8_t)v47;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v27 = (unint64_t)v97[1];
      if ((void *)*(_QWORD *)&prime > v97[1])
        goto LABEL_61;
      if ((void *)*(_QWORD *)&prime < v97[1])
      {
        v56 = vcvtps_u32_f32((float)(unint64_t)__p[1] / *(float *)&v99);
        if (v97[1] < (void *)3
          || (v57 = (uint8x8_t)vcnt_s8((int8x8_t)v97[1]), v57.i16[0] = vaddlv_u8(v57), v57.u32[0] > 1uLL))
        {
          v56 = std::__next_prime(v56);
        }
        else
        {
          v58 = 1 << -(char)__clz(v56 - 1);
          if (v56 >= 2)
            v56 = v58;
        }
        if (*(_QWORD *)&prime <= v56)
          prime = (int8x8_t)v56;
        if (*(_QWORD *)&prime >= v27)
        {
          v27 = (unint64_t)v97[1];
        }
        else
        {
          if (prime)
          {
LABEL_61:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v50 = operator new(8 * *(_QWORD *)&prime);
            v51 = v97[0];
            v97[0] = v50;
            if (v51)
              operator delete(v51);
            v52 = 0;
            v97[1] = (void *)prime;
            do
              *((_QWORD *)v97[0] + v52++) = 0;
            while (*(_QWORD *)&prime != v52);
            v53 = (_QWORD **)__p[0];
            if (__p[0])
            {
              v54 = *((_QWORD *)__p[0] + 1);
              v55 = (uint8x8_t)vcnt_s8(prime);
              v55.i16[0] = vaddlv_u8(v55);
              if (v55.u32[0] > 1uLL)
              {
                if (v54 >= *(_QWORD *)&prime)
                  v54 %= *(_QWORD *)&prime;
              }
              else
              {
                v54 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)v97[0] + v54) = __p;
              for (i = *v53; i; v54 = v60)
              {
                v60 = i[1];
                if (v55.u32[0] > 1uLL)
                {
                  if (v60 >= *(_QWORD *)&prime)
                    v60 %= *(_QWORD *)&prime;
                }
                else
                {
                  v60 &= *(_QWORD *)&prime - 1;
                }
                if (v60 != v54)
                {
                  if (!*((_QWORD *)v97[0] + v60))
                  {
                    *((_QWORD *)v97[0] + v60) = v53;
                    goto LABEL_86;
                  }
                  *v53 = (_QWORD *)*i;
                  *i = **((_QWORD **)v97[0] + v60);
                  **((_QWORD **)v97[0] + v60) = i;
                  i = v53;
                }
                v60 = v54;
LABEL_86:
                v53 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v27 = (unint64_t)prime;
            goto LABEL_90;
          }
          v68 = v97[0];
          v97[0] = 0;
          if (v68)
            operator delete(v68);
          v27 = 0;
          v97[1] = 0;
        }
      }
LABEL_90:
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v34 >= v27)
          WeakRetained = v34 % v27;
        else
          WeakRetained = v34;
      }
      else
      {
        WeakRetained = (v27 - 1) & v34;
      }
      goto LABEL_95;
    }
    v91 = (unint64_t)v97[1] - 1;
    while (1)
    {
      v39 = v38[1];
      if (v39 == v34)
        break;
      if (v36 > 1)
      {
        if (v39 >= v27)
          v39 %= v27;
      }
      else
      {
        v39 &= v91;
      }
      if (v39 != WeakRetained)
        goto LABEL_49;
LABEL_48:
      v38 = (uint64_t *)*v38;
      if (!v38)
        goto LABEL_49;
    }
    v40 = (id)v38[2];
    v41 = v32;
    v42 = v41;
    if (v40 != v41)
    {
      v43 = objc_msgSend(v40, "isEqualToString:", v41);

      if ((v43 & 1) != 0)
        goto LABEL_105;
      goto LABEL_48;
    }

LABEL_105:
    *((_DWORD *)v38 + 6) = *((_DWORD *)v30 + 10);
    v38[4] = v30[6];
    if (v38 + 2 != v30 + 4)
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v38 + 40, (char *)v30[7], v30[8], (uint64_t)(v30[8] - v30[7]) >> 4);
    v38[8] = v30[10];
    v63 = *(_OWORD *)(v30 + 11);
    v64 = *(_OWORD *)(v30 + 13);
    *((_WORD *)v38 + 52) = *((_WORD *)v30 + 60);
    *(_OWORD *)(v38 + 11) = v64;
    *(_OWORD *)(v38 + 9) = v63;

LABEL_108:
    v65 = (_QWORD *)v30[1];
    if (v65)
    {
      do
      {
        v66 = v65;
        v65 = (_QWORD *)*v65;
      }
      while (v65);
    }
    else
    {
      do
      {
        v66 = (_QWORD *)v30[2];
        v67 = *v66 == (_QWORD)v30;
        v30 = v66;
      }
      while (!v67);
    }
    v30 = v66;
  }
  while (v66 != (_QWORD *)(v96 + 216));
  v69 = (id *)__p[0];
  if (__p[0])
  {
    do
    {
      v70 = v69[2];
      v71 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v107)
        std::__throw_bad_function_call[abi:ne180100]();
      WeakRetained = (unint64_t)(v69 + 3);
      v73 = (*(uint64_t (**)(_QWORD *, id *))(*v107 + 48))(v107, v69 + 3);
      v74 = *(double **)(v73 + 8);
      v75 = 0.0;
      while (v74 != *(double **)(v73 + 16))
      {
        v77 = *v74;
        v76 = v74[1];
        v74 += 2;
        v75 = v75 + v76 - v77;
      }
      objc_msgSend(v71, "quantityWithUnit:doubleValue:", v72, v75 + *(double *)(v73 + 32));
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v93, "setObject:forKeyedSubscript:", v78, v70);

      if (!v107)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_QWORD *, id *))(*v107 + 48))(v107, v69 + 3));
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v92, "setObject:forKeyedSubscript:", v79, v70);

      v69 = (id *)*v69;
    }
    while (v69);
  }
LABEL_132:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)v97);
  objc_msgSend(v95, "setDurationBySource:", v93);
  objc_msgSend(v95, "setDataCountBySource:", v92);

LABEL_133:
  v80 = v107;
  if (v107 == v106)
  {
    v81 = 4;
    v80 = v106;
LABEL_137:
    (*(void (**)(void))(*v80 + 8 * v81))();
  }
  else if (v107)
  {
    v81 = 5;
    goto LABEL_137;
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v95, "averageQuantity");
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  if (v83)
  {
    objc_msgSend(v95, "averageQuantity");
    v27 = objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend((id)v27, "isCompatibleWithUnit:", v82) & 1) == 0)
    {

      goto LABEL_152;
    }
  }
  objc_msgSend(v95, "minimumQuantity");
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  if (v84)
  {
    objc_msgSend(v95, "minimumQuantity");
    WeakRetained = objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend((id)WeakRetained, "isCompatibleWithUnit:", v82))
    {
      v85 = 1;
      goto LABEL_146;
    }
  }
  objc_msgSend(v95, "maximumQuantity");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  if (v86)
  {
    objc_msgSend(v95, "maximumQuantity");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    v88 = objc_msgSend(v87, "isCompatibleWithUnit:", v82);

    v85 = v88 ^ 1;
    if (v84)
      goto LABEL_146;
LABEL_150:
    if (!v83)
      goto LABEL_151;
LABEL_147:

    if ((v85 & 1) == 0)
      goto LABEL_153;
LABEL_152:
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v82);
    goto LABEL_153;
  }
  v85 = 0;
  if (!v84)
    goto LABEL_150;
LABEL_146:

  if (v83)
    goto LABEL_147;
LABEL_151:

  if (v85)
    goto LABEL_152;
LABEL_153:

  return v95;
}

void sub_1B7D0D0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  if (v33)
  if (v31)

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 256);
  v2 = *(_QWORD *)(a1 + 272);
  if (v1 != (*(_QWORD *)(a1 + 280) - v2) >> 3)
  {
    v4 = (void **)(a1 + 272);
    *(_QWORD *)(a1 + 280) = v2;
    std::vector<long long>::reserve((void **)(a1 + 272), v1);
    v5 = *(_QWORD **)(a1 + 248);
    if (v5)
    {
      v6 = *(char **)(a1 + 280);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 288);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 272);
            v6 = *(char **)(a1 + 280);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 272) = v16;
          *(_QWORD *)(a1 + 280) = v9;
          *(_QWORD *)(a1 + 288) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 280) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D0D474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  int64_t v12;
  char v13;
  char v14;
  double v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  id WeakRetained;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  double v49;
  int64_t v50;
  _BOOL4 var4;
  BOOL var5;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  unint64_t var3;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  char *v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  void *v81;
  unint64_t v82;
  uint64_t *v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  double v100;
  int v101;
  int v102;
  int v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  unint64_t v107;
  uint64_t *v108;
  __int128 v109;
  char *v110;
  double v111;
  void *v112;
  void *v113;
  _QWORD *v114;
  double **v115;
  id *location;
  void *v117;
  id v118;
  uint64_t *v119;
  int64_t v120;
  double **v121;
  char v122;
  BOOL v123;
  int64_t v124;
  void **v125;
  uint64_t v126;
  HDRawQuantitySample v127;
  __int128 v128;
  __int128 v129;
  __int16 v130;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v125 = (void **)(a1 + 96);
    v121 = (double **)(a1 + 64);
    v119 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    v115 = (double **)(a1 + 136);
    v114 = (_QWORD *)(a1 + 216);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_124:
      *(double *)(a1 + 56) = a2;
LABEL_125:
      v111 = *(double *)(a1 + 56);
      if (v111 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsTimeInterval>]");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v112, "handleFailureInFunction:file:lineNumber:description:", v113, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v111 = *(double *)(a1 + 56);
      }
      v5 = v111;
      if (v111 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v20 = a2;
      v21 = a2;
      v22 = v5;
      v23 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v24 = *(double *)(v23 + 8);
          v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21)
            v21 = *(double *)(v23 + 8);
          if (v25 > v5)
            v27 = *(double *)(v23 + 16);
          else
            v27 = v20;
          if (v25 < v20)
          {
            v22 = v5;
            v20 = v27;
          }
          v23 += 48;
        }
        while ((__int128 *)v23 != v7);
      }
      if (v20 >= v21)
        v28 = v21;
      else
        v28 = v20;
      v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        v30 = v29 * floor(v28 / v29);
        v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31)
          v28 = v30;
        else
          v28 = v31;
      }
      *v125 = 0;
      v125[1] = 0;
      v125[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        v35 = *(char **)(a1 + 96);
        v34 = *(char **)(a1 + 104);
        v36 = v32;
        if (v34 != v35)
        {
          do
          {
            v37 = *((_OWORD *)v34 - 3);
            v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          v34 = (char *)*v125;
        }
        *(_QWORD *)(a1 + 96) = v36;
        *(_QWORD *)(a1 + 104) = v32;
        *(_QWORD *)(a1 + 112) = &v32[48 * v33];
        if (v34)
          operator delete(v34);
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v127.var0 = a1;
        v40 = 126 - 2 * __clz(v8);
        if ((__int128 *)v6 == v7)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v127, v41, 1);
      }
      if (*(_BYTE *)(a1 + 25))
        v118 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v118 = 0;
      v117 = (void *)v6;
      if ((__int128 *)v6 == v7)
      {
LABEL_106:
        *(double *)(a1 + 160) = HKIntervalMask<double>::removeIntervalsBefore(v115, v28) + *(double *)(a1 + 160);
        v96 = *(_QWORD **)(a1 + 208);
        if (v96 != v114)
        {
          do
          {
            *((double *)v96 + 10) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 7, v28)
                                  + *((double *)v96 + 10);
            v97 = (_QWORD *)v96[1];
            if (v97)
            {
              do
              {
                v98 = v97;
                v97 = (_QWORD *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                v98 = (_QWORD *)v96[2];
                v99 = *v98 == (_QWORD)v96;
                v96 = v98;
              }
              while (!v99);
            }
            v96 = v98;
          }
          while (v98 != v114);
        }
        *(double *)(a1 + 56) = v28;

        if (v117)
          operator delete(v117);
        goto LABEL_125;
      }
      v120 = 0;
      v44 = 0;
      v45 = v6;
      while (2)
      {
        v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v127.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v127.var2 = v46;
        *(_QWORD *)&v127.var4 = *(_QWORD *)(v45 + 32);
        v47 = v46;
        v48 = v28 - v127.var1;
        v49 = *(double *)&v46 - v127.var1;
        if (v49 - (v28 - v127.var1) < 0.01)
        {
          v50 = 0;
          var4 = 0;
          var5 = 0;
          v53 = 0.0;
          v47 = 0;
          v54 = 0.0;
          if (!v127.var4)
            goto LABEL_59;
LABEL_54:
          v123 = var5;
          v124 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
          v56 = *(unsigned __int8 *)(v45 + 42);
          v57 = *(unsigned __int8 *)(v45 + 41);
          v122 = *(_BYTE *)(v45 + 40);
          if (!v127.var4)
            goto LABEL_87;
          if ((v44 & 1) != 0)
          {
            var3 = v127.var3;
            if (v120 == v127.var3 || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsTimeInterval>::addSample(v119, &v127, v56 == 0);
              v56 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsTimeInterval>::addSample(v119, &v127, v56 == 0);
            v56 = 1;
            var3 = v127.var3;
            v120 = v127.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_86;
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, var3);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v69)
            goto LABEL_85;
          objc_msgSend(v118, "objectForKeyedSubscript:", v69);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v71 = v70;
          if (v70)
          {
            if (objc_msgSend(v70, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              v44 = 1;
LABEL_87:
              if (var4)
              {
                v84 = v56 != 0;
                v86 = *(char **)(a1 + 104);
                v85 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((_QWORD *)v86 + 2) = v47;
                  *((_QWORD *)v86 + 3) = v124;
                  v86[32] = var4;
                  v86[33] = v123;
                  v86[40] = v122;
                  v86[41] = v57;
                  v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                v80 = (char *)*v125;
                v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (_BYTE *)*v125) >> 4);
                v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (_QWORD)v80) >> 4);
                if (2 * v89 > v88)
                  v88 = 2 * v89;
                if (v89 >= 0x2AAAAAAAAAAAAAALL)
                  v90 = 0x555555555555555;
                else
                  v90 = v88;
                if (v90)
                {
                  v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  v80 = *(char **)(a1 + 96);
                  v86 = *(char **)(a1 + 104);
                }
                else
                {
                  v91 = 0;
                }
                v92 = v90 + 48 * v87;
                *(double *)v92 = v54;
                *(double *)(v92 + 8) = v53;
                *(_QWORD *)(v92 + 16) = v47;
                *(_QWORD *)(v92 + 24) = v124;
                *(_BYTE *)(v92 + 32) = var4;
                *(_BYTE *)(v92 + 33) = v123;
                *(_BYTE *)(v92 + 40) = v122;
                *(_BYTE *)(v92 + 41) = v57;
                *(_BYTE *)(v92 + 42) = v84;
                v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    v94 = *((_OWORD *)v86 - 3);
                    v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 48) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  v80 = (char *)*v125;
                }
                v63 = (_OWORD *)(v92 + 48);
                *(_QWORD *)(a1 + 96) = v93;
                *(_QWORD *)(a1 + 104) = v92 + 48;
                *(_QWORD *)(a1 + 112) = v90 + 48 * v91;
                if (v80)
LABEL_103:
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v118, "setObject:forKeyedSubscript:", v81, v69);

          }
          v82 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
          v83 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(a1, v82);
          HDStatisticsRelative<HDStatisticsTimeInterval>::addSample(v83, &v127, v57 == 0);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          v127.var4 = 0;
          goto LABEL_59;
        }
        v55 = v48 / v49 * v127.var0;
        v50 = v127.var3;
        var5 = v127.var5;
        v54 = v127.var0 - v55;
        v127.var0 = v55;
        v127.var2 = v28;
        v53 = v28;
        var4 = v127.var4;
        if (v127.var4)
          goto LABEL_54;
LABEL_59:
        v59 = *(_OWORD **)(a1 + 104);
        v60 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          v61 = *(_OWORD *)v45;
          v62 = *(_OWORD *)(v45 + 32);
          v59[1] = *(_OWORD *)(v45 + 16);
          v59[2] = v62;
          *v59 = v61;
          v63 = v59 + 3;
          goto LABEL_104;
        }
        v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (_BYTE *)*v125) >> 4);
        v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (_QWORD)*v125) >> 4);
        if (2 * v66 > v65)
          v65 = 2 * v66;
        if (v66 >= 0x2AAAAAAAAAAAAAALL)
          v67 = 0x555555555555555;
        else
          v67 = v65;
        if (v67)
          v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        else
          v68 = 0;
        v72 = (_OWORD *)(v67 + 48 * v64);
        v73 = *(_OWORD *)v45;
        v74 = *(_OWORD *)(v45 + 32);
        v72[1] = *(_OWORD *)(v45 + 16);
        v72[2] = v74;
        *v72 = v73;
        v76 = *(char **)(a1 + 96);
        v75 = *(char **)(a1 + 104);
        v77 = v72;
        if (v75 != v76)
        {
          do
          {
            v78 = *((_OWORD *)v75 - 3);
            v79 = *((_OWORD *)v75 - 2);
            *(_OWORD *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          v75 = (char *)*v125;
        }
        v63 = v72 + 3;
        *(_QWORD *)(a1 + 96) = v77;
        *(_QWORD *)(a1 + 104) = v72 + 3;
        *(_QWORD *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(_QWORD *)(a1 + 104) = v63;
LABEL_105:
        v45 += 48;
        if ((__int128 *)v45 == v7)
          goto LABEL_106;
        continue;
      }
    }
    v10 = *(double *)v6;
    v9 = *(double *)(v6 + 8);
    v11 = *(double *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 24);
    v13 = *(_BYTE *)(v6 + 32);
    v14 = *(_BYTE *)(v6 + 33);
    v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        v42 = 0;
        v43 = 0;
        v18 = 0.0;
        v17 = *(double *)(v6 + 16);
        v16 = *(_BYTE *)(v6 + 32);
        v19 = 0.0;
        v11 = 0.0;
        v13 = 0;
LABEL_117:
        v101 = *(unsigned __int8 *)(v6 + 42);
        v102 = *(unsigned __int8 *)(v6 + 41);
        v103 = *(unsigned __int8 *)(v6 + 40);
        v127.var0 = v10;
        v127.var1 = v9;
        v127.var2 = v17;
        v127.var3 = v12;
        v127.var4 = v16;
        v127.var5 = v14;
        *(_DWORD *)(&v127.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v127.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&v128 = v18;
        *((double *)&v128 + 1) = v19;
        *(double *)&v129 = v11;
        *((_QWORD *)&v129 + 1) = v42;
        LOBYTE(v130) = v13;
        HIBYTE(v130) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
        v104 = v103 != 0;
        v105 = v102 != 0;
        v106 = v101 != 0;
        if (v127.var4)
        {
          HDStatisticsRelative<HDStatisticsTimeInterval>::addSample(v119, &v127, v101 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v107 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v127.var3);
            v108 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(a1, v107);
            HDStatisticsRelative<HDStatisticsTimeInterval>::addSample(v108, &v127, v102 == 0);
          }
          v104 = 1;
          v105 = 1;
          v106 = 1;
        }
        if ((_BYTE)v130)
        {
          LOWORD(v126) = v130;
          v109 = v129;
          v110 = (char *)*v125;
          *(_OWORD *)v110 = v128;
          *((_OWORD *)v110 + 1) = v109;
          *((_QWORD *)v110 + 4) = v126;
          v110[40] = v104;
          v110[41] = v105;
          v110[42] = v106;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_124;
      }
      v100 = v10 * (v15 / (v11 - v9));
      v17 = a2;
      v16 = *(_BYTE *)(v6 + 32);
      v18 = v10 - v100;
      v10 = v100;
      v19 = a2;
    }
    else
    {
      v16 = 0;
      v17 = *(double *)(v6 + 16);
      v18 = *(double *)v6;
      v19 = *(double *)(v6 + 8);
    }
    v42 = *(_QWORD *)(v6 + 24);
    v43 = *(_BYTE *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1B7D0DDF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsTimeInterval>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  HDRawQuantitySample *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  void *v10;
  _OWORD *v11;

  v4 = a2;
  v5 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v5 = 1;
  if (v5)
  {
    if (v5 == 1)
    {
      if (!*(_DWORD *)result)
      {
        v8 = 1;
LABEL_15:
        *(_DWORD *)result = v8;
        result[1] = 0;
        v9 = result + 1;
        v11 = result + 2;
        v10 = (void *)result[2];
        if (v10)
        {
          result[3] = (uint64_t)v10;
          operator delete(v10);
        }
        *v11 = 0u;
        v11[1] = 0u;
        result = v9;
        goto LABEL_18;
      }
    }
    else if (v5 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        ++result;
        v6 = 1;
        return HDStatisticsTimeInterval::addSample(result, a2, v6);
      }
      v8 = 2;
      goto LABEL_15;
    }
  }
  else if (!*(_DWORD *)result)
  {
    v7 = result[1];
    ++result;
    if (!v7)
    {
LABEL_18:
      a2 = v4;
      v6 = a3;
      return HDStatisticsTimeInterval::addSample(result, a2, v6);
    }
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v12;

  v12 = a2;
  v5 = *(_QWORD **)(a1 + 216);
  v3 = (uint64_t **)(a1 + 216);
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = (uint64_t **)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    v6 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 296), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 336);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D0E0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 376);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D0E18C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x80uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_QWORD *)v9 + 15) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 272);
  v7 = *(char **)(*(_QWORD *)a4 + 280);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 272);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 272);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 280);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 272);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 280);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 272);
      v15 = *(char **)(*(_QWORD *)a4 + 280);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 280);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 280);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 272);
          v25 = *(char **)(*(_QWORD *)a4 + 280);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 280);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 280);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 272);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 272);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 280);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 272);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 280);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 272);
      v41 = *(char **)(*(_QWORD *)a4 + 280);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 280);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 280);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 272);
      v11 = *(char **)(*(_QWORD *)a3 + 280);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 280);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 280);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 272);
      v24 = *(char **)(*(_QWORD *)a3 + 280);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 280);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 280);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 272);
            v31 = *(char **)(*(_QWORD *)a3 + 280);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 280);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 280);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 272);
    v14 = *(char **)(*(_QWORD *)a5 + 280);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 280);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 280);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 272);
        v23 = *(char **)(*(_QWORD *)a5 + 280);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 280);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 280);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 272);
            v32 = *(char **)(*(_QWORD *)a5 + 280);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 280);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 280);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 272);
    v16 = *(char **)(*(_QWORD *)a6 + 280);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 280);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 280);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 272);
        v25 = *(char **)(*(_QWORD *)a6 + 280);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 280);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 280);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 272);
            v34 = *(char **)(*(_QWORD *)a6 + 280);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 280);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 280);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 272);
                v43 = *(char **)(*(_QWORD *)a6 + 280);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 280);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 280);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D06E30;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D06E30;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsRelative<HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsTimeInterval> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 568))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D10270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 568))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 544);
      v7 = *(_QWORD *)(a1 + 536);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D104F8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  unsigned __int8 v10;
  char v11;
  double v12;
  int v13;
  unint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int8x16_t v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t **v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  double v67;
  double v68;
  unint64_t v69;
  char v70;

  v5 = a1 + 8;
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 33);
  v12 = *(double *)(a1 + 8) - v7;
  v13 = v10;
  v14 = (unint64_t)v9;
  v15 = v11;
  v16 = v8;
  v17 = v7;
  v18 = *(double *)a2;
  if (v12 >= 0.01)
  {
    if (v8 - v7 - v12 >= 0.01)
    {
      v13 = *(unsigned __int8 *)(a2 + 32);
      v18 = v6 - v6 * (v12 / (v8 - v7));
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(_BYTE *)(a2 + 33);
      v16 = *(double *)(a2 + 16);
      v17 = *(double *)(a1 + 8);
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0.0;
      v17 = 0.0;
      v18 = 0.0;
    }
  }
  v19 = *(double *)(a1 + 16);
  v20 = v19 - v17;
  v21 = v16 - v17;
  v22 = v16 - v17 - (v19 - v17);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v22 < 0.01)
      goto LABEL_10;
    if (v20 >= 0.01)
      goto LABEL_24;
LABEL_22:
    v23 = v13;
    v31 = v14;
    v25 = v16;
    v19 = v17;
    v24 = v18;
    if (!v23)
      return;
    goto LABEL_60;
  }
  if (v20 < 0.01)
    goto LABEL_22;
  if (v22 >= 0.01)
  {
LABEL_24:
    v25 = v16;
    v69 = v14;
    v24 = v18 - v18 * (v20 / v21);
    v23 = v13;
    v70 = v15;
    v16 = *(double *)(a1 + 16);
    v18 = v18 * (v20 / v21);
    if (!v13)
    {
LABEL_25:
      v15 = v70;
      v31 = v69;
      if (!v23)
        return;
      goto LABEL_60;
    }
    goto LABEL_11;
  }
LABEL_10:
  v69 = 0;
  v23 = 0;
  v70 = 0;
  v24 = 0.0;
  v19 = 0.0;
  v25 = 0.0;
  if (!v13)
    goto LABEL_25;
LABEL_11:
  v67 = v17;
  v68 = v16;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 240, v14, v14);
  v26 = *(_QWORD *)(a1 + 112);
  if (v26 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 136) <= 0)
  {
    v32.f64[1] = *(float64_t *)(a1 + 16);
    v28 = v67;
    v27 = v68;
    v32.f64[0] = v67;
    v33.f64[0] = *(float64_t *)(a1 + 8);
    v33.f64[1] = v68;
    v34 = (int8x16_t)vcgtq_f64(v33, v32);
    v33.f64[0] = v67;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v34, *(int8x16_t *)(a1 + 8), (int8x16_t)v33);
  }
  else
  {
    v28 = v67;
    v27 = v68;
    if (v67 < *(double *)(a1 + 48))
    {
      v29 = *(double *)(a1 + 8);
      if (v67 >= v29)
        v29 = v67;
      *(double *)(a1 + 48) = v29;
    }
    if (v68 > *(double *)(a1 + 56))
    {
      v30 = *(double *)(a1 + 16);
      if (v30 >= v68)
        v30 = v68;
      *(double *)(a1 + 56) = v30;
    }
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v35 = *(double *)(a1 + 64);
    if (v28 < v35)
      v35 = v28;
    *(double *)(a1 + 64) = v35;
  }
  if (a3 && v28 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v28);
    v28 = v67;
    v27 = v68;
    v26 = *(_QWORD *)(a1 + 112);
  }
  v36 = *(_QWORD *)(a1 + 120);
  if (v26 >= v36)
  {
    v38 = *(_QWORD *)(a1 + 104);
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v38) >> 4);
    v40 = v39 + 1;
    if (v39 + 1 > 0x555555555555555)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v38) >> 4);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0x2AAAAAAAAAAAAAALL)
      v42 = 0x555555555555555;
    else
      v42 = v40;
    if (v42)
    {
      v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v42);
      v28 = v67;
      v27 = v68;
    }
    else
    {
      v43 = 0;
    }
    v44 = v42 + 48 * v39;
    v45 = v42 + 48 * v43;
    *(double *)v44 = v18;
    *(double *)(v44 + 8) = v28;
    *(double *)(v44 + 16) = v27;
    *(_QWORD *)(v44 + 24) = v14;
    *(_BYTE *)(v44 + 32) = v13;
    *(_BYTE *)(v44 + 33) = v15;
    *(_WORD *)(v44 + 40) = 0;
    *(_BYTE *)(v44 + 42) = 0;
    v37 = v44 + 48;
    v47 = *(char **)(a1 + 104);
    v46 = *(char **)(a1 + 112);
    if (v46 == v47)
    {
      v15 = v70;
      v31 = v69;
    }
    else
    {
      v15 = v70;
      v31 = v69;
      do
      {
        v48 = *((_OWORD *)v46 - 3);
        v49 = *((_OWORD *)v46 - 2);
        *(_OWORD *)(v44 - 21) = *(_OWORD *)(v46 - 21);
        *(_OWORD *)(v44 - 48) = v48;
        *(_OWORD *)(v44 - 32) = v49;
        v44 -= 48;
        v46 -= 48;
      }
      while (v46 != v47);
      v46 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v44;
    *(_QWORD *)(a1 + 112) = v37;
    *(_QWORD *)(a1 + 120) = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *(double *)v26 = v18;
    *(double *)(v26 + 8) = v28;
    *(double *)(v26 + 16) = v27;
    *(_QWORD *)(v26 + 24) = v14;
    *(_BYTE *)(v26 + 32) = v13;
    *(_BYTE *)(v26 + 33) = v15;
    *(_WORD *)(v26 + 40) = 0;
    v37 = v26 + 48;
    *(_BYTE *)(v26 + 42) = 0;
    v15 = v70;
    v31 = v69;
  }
  *(_QWORD *)(a1 + 112) = v37;
  if (!*(_BYTE *)(a1 + 208) || *(double *)(a1 + 184) <= v7)
  {
    *(double *)(a1 + 176) = v6;
    *(double *)(a1 + 184) = v7;
    *(double *)(a1 + 192) = v8;
    *(_QWORD *)(a1 + 200) = v9;
    *(_BYTE *)(a1 + 208) = v10;
    *(_BYTE *)(a1 + 209) = v11;
  }
  if (*(_BYTE *)(a1 + 33)
    && ((v50 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v14), v51 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsForSource(v5, v50), !*((_BYTE *)v51 + 80))|| *((double *)v51 + 7) <= v7))
  {
    *((double *)v51 + 6) = v6;
    *((double *)v51 + 7) = v7;
    *((double *)v51 + 8) = v8;
    v51[9] = v9;
    *((_BYTE *)v51 + 80) = v10;
    *((_BYTE *)v51 + 81) = v11;
    if (!v23)
      return;
  }
  else if (!v23)
  {
    return;
  }
LABEL_60:
  v52 = *(_QWORD *)(a1 + 432);
  v53 = *(_QWORD *)(a1 + 440);
  if (v52 >= v53)
  {
    v55 = *(_QWORD *)(a1 + 424);
    v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v55) >> 3);
    v57 = v56 + 1;
    if (v56 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v55) >> 3);
    if (2 * v58 > v57)
      v57 = 2 * v58;
    if (v58 >= 0x333333333333333)
      v59 = 0x666666666666666;
    else
      v59 = v57;
    if (v59)
      v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v59);
    else
      v60 = 0;
    v61 = v59 + 40 * v56;
    v62 = v59 + 40 * v60;
    *(double *)v61 = v24;
    *(double *)(v61 + 8) = v19;
    *(double *)(v61 + 16) = v25;
    *(_QWORD *)(v61 + 24) = v31;
    *(_BYTE *)(v61 + 32) = v23;
    *(_BYTE *)(v61 + 33) = v15;
    v54 = v61 + 40;
    v64 = *(char **)(a1 + 424);
    v63 = *(char **)(a1 + 432);
    if (v63 != v64)
    {
      do
      {
        v65 = *(_OWORD *)(v63 - 40);
        v66 = *(_OWORD *)(v63 - 24);
        *(_WORD *)(v61 - 8) = *((_WORD *)v63 - 4);
        *(_OWORD *)(v61 - 24) = v66;
        *(_OWORD *)(v61 - 40) = v65;
        v61 -= 40;
        v63 -= 40;
      }
      while (v63 != v64);
      v63 = *(char **)(a1 + 424);
    }
    *(_QWORD *)(a1 + 424) = v61;
    *(_QWORD *)(a1 + 432) = v54;
    *(_QWORD *)(a1 + 440) = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *(double *)v52 = v24;
    *(double *)(v52 + 8) = v19;
    *(double *)(v52 + 16) = v25;
    *(_QWORD *)(v52 + 24) = v31;
    *(_BYTE *)(v52 + 32) = v23;
    v54 = v52 + 40;
    *(_BYTE *)(v52 + 33) = v15;
  }
  *(_QWORD *)(a1 + 432) = v54;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 570))
  {
    *(_BYTE *)(a1 + 572) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 572) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D10B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 424), *(_QWORD *)(a1 + 432), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 432) - *(_QWORD *)(a1 + 424)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D10BEC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *i;
  _QWORD *v16;

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 448), *(id *)(a1 + 40));
  v9 = *(void **)(a1 + 144);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 152) = v9;
    operator delete(v9);
  }
  *(_WORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  if (*(_QWORD *)(a1 + 232))
  {
    v10 = *(_QWORD *)(a1 + 224);
    v11 = *(_QWORD **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = a1 + 224;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    if (v11[1])
      v12 = (_QWORD *)v11[1];
    else
      v12 = v11;
    if (v12)
    {
      v13 = (_QWORD *)v12[2];
      if (v13)
      {
        v14 = (_QWORD *)*v13;
        if ((_QWORD *)*v13 == v12)
        {
          *v13 = 0;
          while (1)
          {
            v16 = (_QWORD *)v13[1];
            if (!v16)
              break;
            do
            {
              v13 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
        else
        {
          for (v13[1] = 0; v14; v14 = (_QWORD *)v13[1])
          {
            do
            {
              v13 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(v12);
        for (i = (_QWORD *)v13[2]; i; i = (_QWORD *)i[2])
          v13 = i;
        v12 = v13;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsTimeInterval>>>>::destroy(v12);
  }
  objc_storeStrong(v8, *(id *)(a1 + 448));
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a1 + 424);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 572))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 572) = 0;
  }

}

void sub_1B7D10DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 568))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D10E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 584));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 568) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D111C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40B37A3886);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D1136C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D115D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  double v11;
  double v12;
  _QWORD v13[2];
  double v14;
  uint64_t v15;
  char v16;
  char v17;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  *(double *)v13 = a5;
  *(double *)&v13[1] = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  else
  {
    v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      v8 = 0;
    }
    *(double *)v13 = a5;
    v14 = a7;
    v16 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 568))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D122A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D12344(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsTimeInterval>::archive(uint64_t a1, int8x16_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)&a2->u64[1], (uint64_t)v6);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = a2->i32[0];
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(a2[3], a2[3], 8uLL);
  v6[1] = a2[4].i64[0];
  v6[2] = a2[4].i64[1];
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7D1244C(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsTimeInterval>::unarchive(uint64_t a1, _QWORD *a2)
{
  double result;
  HDStatisticsTimeInterval *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  double v12;

  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  v5 = (HDStatisticsTimeInterval *)a2[16];
  if (v5)
  {
    HDStatisticsTimeInterval::unarchive(v5, (uint64_t)&v9);
    *(_QWORD *)(a1 + 8) = v9;
    result = v12;
    v6 = v11;
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = v6;
    *(double *)(a1 + 40) = result;
  }
  *(_DWORD *)a1 = a2[17];
  v7 = a2[14];
  if (v7)
  {
    result = *(double *)(v7 + 8);
    v8 = *(_QWORD *)(v7 + 16);
    *(int8x16_t *)(a1 + 48) = vextq_s8(*(int8x16_t *)(v7 + 24), *(int8x16_t *)(v7 + 24), 8uLL);
    *(double *)(a1 + 64) = result;
    *(_QWORD *)(a1 + 72) = v8;
    *(_WORD *)(a1 + 80) = 1;
  }
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D06EE0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_WORD *)(a1 + 520) = 1;
  *(_BYTE *)(a1 + 522) = 0;
  *(_BYTE *)(a1 + 524) = 0;
  *(_QWORD *)(a1 + 528) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_QWORD *)(a1 + 568) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D06EE0;
  v2 = *(void **)(a1 + 552);
  if (v2)
  {
    *(_QWORD *)(a1 + 560) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 488);
  if (v3)
  {
    *(_QWORD *)(a1 + 496) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 520) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_configureForStartTime(a1);

}

void sub_1B7D12668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 528) = v4;
    v3 = v5;
  }

}

void sub_1B7D126C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 67, a2);
  v7 = a2;
  v4 = a1[67];
  v5 = a1[64];
  a1[64] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[64]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 240) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D1285C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[46];

  if (*(_BYTE *)(a1 + 520))
    return 0;
  HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D12904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 522))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 521))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 523))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 560);
    v18 = *(_QWORD *)(a1 + 568);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 552);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 560);
      v33 = *(char **)(a1 + 552);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 552);
      }
      *(_QWORD *)(a1 + 552) = v28;
      *(_QWORD *)(a1 + 560) = v21;
      *(_QWORD *)(a1 + 568) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 560) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D12B58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 522))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 522) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 521))
    goto LABEL_5;
  v9 = *(void **)(a1 + 544);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_396);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 544);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 544);
  *(_QWORD *)(a1 + 544) = 0;

  *(_BYTE *)(a1 + 521) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 552);
    *(_QWORD *)(a1 + 568) = 0;
    *(_QWORD *)(a1 + 560) = 0;
    *(_QWORD *)(a1 + 552) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 552);
      v37 = *(__int128 **)(a1 + 560);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 560);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 560) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 552);
  v39 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 496) != *(_QWORD *)(a1 + 488))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 496) != *(_QWORD *)(a1 + 488));
  }
  *(_BYTE *)(a1 + 522) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 524))
    {
      *(_BYTE *)(a1 + 524) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 522) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D13248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 522) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 523) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 522))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 522))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 544);
    *(_QWORD *)(a1 + 544) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 521) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 521))
  {
    v8 = *(void **)(a1 + 544);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 544);
      *(_QWORD *)(a1 + 544) = v9;

      v8 = *(void **)(a1 + 544);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D13544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 520) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 520) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D13664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::reset(uint64_t result)
{
  *(_BYTE *)(result + 520) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 520), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(a1 + 240), (uint64_t)&v37);
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 280);
  if (v9 != (_QWORD *)(a1 + 288))
  {
    do
    {
      HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(v9 + 5), (uint64_t)&v37);
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 288));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 488);
  for (k = *(int8x16_t **)(a1 + 496); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D139F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  HDStatisticsTimeInterval *v23;
  HDStatisticsTimeInterval **v24;
  HDStatisticsTimeInterval **i;
  HDStatisticsTimeInterval *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t j;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  id v56;
  _QWORD *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  _BYTE v61[368];
  __int128 v62;
  __int128 v63;
  int8x16_t v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  int8x16_t v68;
  uint64_t v69;
  uint64_t v70[4];
  __int128 __p;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t **v75;
  uint64_t *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  int v85;
  __int128 v86;
  __int128 v87;
  int v88;
  __int128 v89;
  __int128 v90;
  int v91;
  void (**v92)(statistics::StatisticsEngine *__hidden);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  _BYTE v99[32];
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;

  v56 = a2;
  *(_BYTE *)(a1 + 520) = objc_msgSend(v56, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v56;
  HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket((uint64_t)v61, 0, -1.79769313e308, 1.79769313e308);
  v62 = 0u;
  v63 = 0u;
  v100 = 0;
  v59 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v99, (const unsigned __int8 *)objc_msgSend(v59, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v100));
  v58 = a1;
  v92 = &off_1E6D09A88;
  v93 = 0;
  v97 = 0;
  v95 = 0;
  v96 = 0;
  v98 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v92, (PB::Reader *)v99);
  v60 = v94;
  if (v93)
  {
    v67 = 0;
    memset(v70, 0, sizeof(v70));
    v77 = 0;
    v76 = 0;
    __p = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = &v76;
    v78 = 0u;
    v79 = 0u;
    v80 = 1065353216;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0;
    v85 = 1065353216;
    v86 = 0u;
    v87 = 0u;
    v88 = 1065353216;
    v89 = 0u;
    v90 = 0u;
    v91 = 1065353216;
    v64 = vextq_s8(*(int8x16_t *)(v93 + 8), *(int8x16_t *)(v93 + 8), 8uLL);
    v4 = *(_QWORD *)(v93 + 72);
    v65 = *(_QWORD *)(v93 + 64);
    v66 = *(_WORD *)(v93 + 185);
    v68 = vextq_s8(*(int8x16_t *)(v93 + 24), *(int8x16_t *)(v93 + 24), 8uLL);
    v69 = v4;
    v6 = *(_QWORD *)(v93 + 80);
    v5 = *(_QWORD *)(v93 + 88);
    v57 = (_QWORD *)v93;
    if (v6 != v5)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if (v7 >= (unint64_t)v72)
        {
          v14 = (void *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - __p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v72 - __p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v72 - __p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = *((_QWORD *)&__p + 1);
            v14 = (void *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = v17 + 48 * v15;
          *(_QWORD *)v19 = v9;
          *(_QWORD *)(v19 + 8) = v8;
          *(_QWORD *)(v19 + 16) = v10;
          *(_QWORD *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(_BYTE *)(v19 + 40) = 0;
          *(_BYTE *)(v19 + 41) = v12;
          *(_BYTE *)(v19 + 42) = v13;
          v20 = v19;
          if ((void *)v7 != v14)
          {
            do
            {
              v21 = *(_OWORD *)(v7 - 48);
              v22 = *(_OWORD *)(v7 - 32);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *(_OWORD *)(v20 - 48) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while ((void *)v7 != v14);
            v14 = (void *)__p;
          }
          v7 = v19 + 48;
          *(_QWORD *)&__p = v20;
          *((_QWORD *)&__p + 1) = v19 + 48;
          *(_QWORD *)&v72 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *(_QWORD *)(v7 + 8) = v8;
          *(_QWORD *)(v7 + 16) = v10;
          *(_QWORD *)(v7 + 24) = v11;
          *(_WORD *)(v7 + 32) = 1;
          *(_BYTE *)(v7 + 40) = 0;
          *(_BYTE *)(v7 + 41) = v12;
          *(_BYTE *)(v7 + 42) = v13;
          v7 += 48;
        }
        *((_QWORD *)&__p + 1) = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    v23 = (HDStatisticsTimeInterval *)v57[13];
    if (v23)
    {
      HDStatisticsTimeInterval::unarchive(v23, (uint64_t)&v101);
      *((_QWORD *)&v72 + 1) = v101;
      if ((_QWORD)v73)
      {
        *((_QWORD *)&v73 + 1) = v73;
        operator delete((void *)v73);
      }
      v73 = v102;
      v74 = v103;
      *(_QWORD *)&v103 = 0;
      v102 = 0uLL;
    }
    v24 = (HDStatisticsTimeInterval **)v57[17];
    for (i = (HDStatisticsTimeInterval **)v57[18]; v24 != i; ++v24)
    {
      v26 = *v24;
      HDStatisticsTimeInterval::unarchive(*v24, (uint64_t)&v101);
      v27 = *((_QWORD *)v26 + 18);
      v28 = v76;
      v29 = &v76;
      v30 = &v76;
      if (v76)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v27)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_34;
          }
          if (v31 >= v27)
          {
            v33 = (char *)v30;
            goto LABEL_37;
          }
          v28 = v30[1];
        }
        while (v28);
        v29 = v30 + 1;
      }
LABEL_34:
      v33 = (char *)operator new(0x50uLL);
      *((_QWORD *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *((_QWORD *)v33 + 9) = 0;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v30;
      *v29 = (uint64_t *)v33;
      v32 = (uint64_t *)v33;
      if (*v75)
      {
        v75 = (uint64_t **)*v75;
        v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v76, v32);
      ++v77;
LABEL_37:
      v34 = (void *)*((_QWORD *)v33 + 6);
      *((_QWORD *)v33 + 5) = v101;
      if (v34)
      {
        *((_QWORD *)v33 + 7) = v34;
        operator delete(v34);
        *((_QWORD *)v33 + 6) = 0;
        *((_QWORD *)v33 + 7) = 0;
        *((_QWORD *)v33 + 8) = 0;
      }
      *((_OWORD *)v33 + 3) = v102;
      *((_QWORD *)v33 + 8) = v103;
      *(_QWORD *)&v103 = 0;
      v102 = 0uLL;
      *((_QWORD *)v33 + 9) = *((_QWORD *)&v103 + 1);
    }
    v35 = v57[5];
    for (j = v57[6]; v35 != j; v35 += 8)
    {
      v38 = *(double *)(*(_QWORD *)v35 + 8);
      v37 = *(double *)(*(_QWORD *)v35 + 16);
      if (v38 >= v37)
        v39 = *(double *)(*(_QWORD *)v35 + 16);
      else
        v39 = *(double *)(*(_QWORD *)v35 + 8);
      if (v37 < v38)
        v37 = *(double *)(*(_QWORD *)v35 + 8);
      HKIntervalMask<double>::_insertInterval(v70, v39, v37);
    }
    HDStatisticsBucket<HDStatisticsTimeInterval>::operator=((uint64_t)v61, (uint64_t)&v64);
    HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket((uint64_t)&v64);
  }
  v40 = v95;
  v41 = v96;
  if (v95 != v96)
  {
    v42 = *((_QWORD *)&v62 + 1);
    do
    {
      v43 = *(_QWORD *)(*(_QWORD *)v40 + 24);
      v44 = *(_QWORD *)(*(_QWORD *)v40 + 32);
      v45 = *(_QWORD *)(*(_QWORD *)v40 + 8);
      v46 = *(_QWORD *)(*(_QWORD *)v40 + 16);
      if (v42 >= (unint64_t)v63)
      {
        v47 = (void *)v62;
        v48 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v42 - v62) >> 3);
        v49 = v48 + 1;
        if (v48 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v63 - v62) >> 3) > v49)
          v49 = 0x999999999999999ALL * ((uint64_t)(v63 - v62) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v63 - v62) >> 3) >= 0x333333333333333)
          v50 = 0x666666666666666;
        else
          v50 = v49;
        if (v50)
        {
          v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v50);
          v42 = *((_QWORD *)&v62 + 1);
          v47 = (void *)v62;
        }
        else
        {
          v51 = 0;
        }
        v52 = v50 + 40 * v48;
        *(_QWORD *)v52 = v44;
        *(_QWORD *)(v52 + 8) = v43;
        *(_QWORD *)(v52 + 16) = v45;
        *(_QWORD *)(v52 + 24) = v46;
        *(_WORD *)(v52 + 32) = 1;
        v53 = v52;
        if ((void *)v42 != v47)
        {
          do
          {
            v54 = *(_OWORD *)(v42 - 40);
            v55 = *(_OWORD *)(v42 - 24);
            *(_WORD *)(v53 - 8) = *(_WORD *)(v42 - 8);
            *(_OWORD *)(v53 - 24) = v55;
            *(_OWORD *)(v53 - 40) = v54;
            v53 -= 40;
            v42 -= 40;
          }
          while ((void *)v42 != v47);
          v47 = (void *)v62;
        }
        v42 = v52 + 40;
        *(_QWORD *)&v62 = v53;
        *((_QWORD *)&v62 + 1) = v52 + 40;
        *(_QWORD *)&v63 = v50 + 40 * v51;
        if (v47)
          operator delete(v47);
      }
      else
      {
        *(_QWORD *)v42 = v44;
        *(_QWORD *)(v42 + 8) = v43;
        *(_QWORD *)(v42 + 16) = v45;
        *(_QWORD *)(v42 + 24) = v46;
        *(_WORD *)(v42 + 32) = 1;
        v42 += 40;
      }
      *((_QWORD *)&v62 + 1) = v42;
      v40 += 8;
    }
    while (v40 != v41);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v92);

  HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::operator=((_QWORD *)(v58 + 112), (uint64_t)&v60);
  if ((_QWORD)v62)
  {
    *((_QWORD *)&v62 + 1) = v62;
    operator delete((void *)v62);
  }
  HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket((uint64_t)v61);

}

void sub_1B7D140E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x2F0]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x2C8]);
  v72 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v72;
    operator delete(v72);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x288]);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy((_QWORD *)STACK[0x278]);
  v73 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v73;
    operator delete(v73);
  }
  v74 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v74;
    operator delete(v74);
  }
  objc_destroyWeak((id *)&STACK[0x228]);
  v75 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v75;
    operator delete(v75);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x348]);
  HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::~HDStatisticsCollectionEngine((uint64_t)&a16);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 376);
  if (v2)
  {
    *(_QWORD *)(a1 + 384) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 328);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 288);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 248);
  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 184);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(*(_QWORD **)(a1 + 168));
  v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(_QWORD *)(a1 + 136) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(a1[1]);
    v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[368];
  uint64_t v18;
  _BYTE v19[368];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[304];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 536));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 520) = 0;
  return HDStatisticsBucket<HDStatisticsTimeInterval>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7D14648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsTimeInterval>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 47), (__n128 *)(a2 + 376));
  v4 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a2 + 400) = 0;
  v5 = (void *)a1[50];
  a1[50] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsTimeInterval>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  v12 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 4);
  v13 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = 0;
  v14 = (_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 152) = v13;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  v15 = *(_QWORD **)(a2 + 160);
  if (v15 != (_QWORD *)(a2 + 168))
  {
    v16 = 0;
    v17 = (_QWORD *)(a1 + 168);
    while (1)
    {
      v18 = (_QWORD *)(a1 + 168);
      if (v17 == v14)
        goto LABEL_12;
      v19 = v16;
      v20 = (_QWORD *)(a1 + 168);
      if (v16)
      {
        do
        {
          v18 = v19;
          v19 = (_QWORD *)v19[1];
        }
        while (v19);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v20[2];
          v21 = *v18 == (_QWORD)v20;
          v20 = v18;
        }
        while (v21);
      }
      v22 = v15[4];
      if (v18[4] < v22)
      {
LABEL_12:
        if (v16)
          v23 = (uint64_t **)v18;
        else
          v23 = (uint64_t **)(a1 + 168);
        if (v16)
          v24 = (uint64_t **)(v18 + 1);
        else
          v24 = (uint64_t **)(a1 + 168);
        if (!*v24)
        {
LABEL_28:
          v27 = operator new(0x50uLL);
          v28 = *((_OWORD *)v15 + 2);
          v27[6] = 0;
          *((_OWORD *)v27 + 2) = v28;
          v27[7] = 0;
          v27[8] = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27 + 6, (const void *)v15[6], v15[7], (uint64_t)(v15[7] - v15[6]) >> 4);
          v27[9] = v15[9];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 160), (uint64_t)v23, v24, v27);
        }
      }
      else
      {
        v24 = (uint64_t **)(a1 + 168);
        v23 = (uint64_t **)(a1 + 168);
        if (!v16)
          goto LABEL_28;
        v25 = v16;
        while (1)
        {
          while (1)
          {
            v23 = (uint64_t **)v25;
            v26 = v25[4];
            if (v26 <= v22)
              break;
            v25 = *v23;
            v24 = v23;
            if (!*v23)
              goto LABEL_28;
          }
          if (v26 >= v22)
            break;
          v25 = v23[1];
          if (!v25)
          {
            v24 = v23 + 1;
            goto LABEL_28;
          }
        }
      }
      v29 = (_QWORD *)v15[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v15[2];
          v21 = *v30 == (_QWORD)v15;
          v15 = v30;
        }
        while (!v21);
      }
      if (v30 == (_QWORD *)(a2 + 168))
        break;
      v16 = (_QWORD *)*v14;
      v17 = *(_QWORD **)(a1 + 160);
      v15 = v30;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 184, a2 + 184);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 224), *(const void **)(a2 + 224), *(_QWORD *)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 248, a2 + 248);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 288, a2 + 288);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 328, a2 + 328);
  return a1;
}

void sub_1B7D149F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v13 + 232) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(*v12);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v13 + 136) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsTimeInterval>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v10;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 128, (__n128 *)(a2 + 128));
  v12 = a1 + 168;
  v11 = *(_QWORD **)(a1 + 168);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(v11);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v13 = (_QWORD *)(a2 + 168);
  v14 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v14;
  v15 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v15;
  if (v15)
  {
    *(_QWORD *)(v14 + 16) = v12;
    *(_QWORD *)(a2 + 160) = v13;
    *v13 = 0;
    *(_QWORD *)(a2 + 176) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 160) = v12;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 184, (uint64_t *)(a2 + 184));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 224, (__n128 *)(a2 + 224));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 248, (uint64_t *)(a2 + 248));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 288, (uint64_t *)(a2 + 288));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 328, (uint64_t *)(a2 + 328));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  const void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  char **v39;
  char *v40;
  unint64_t v41;
  id v42;
  id v43;
  void *v44;
  char v45;
  char *v46;
  float v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  int8x8_t prime;
  void *v52;
  void *v53;
  uint64_t v54;
  _QWORD **v55;
  unint64_t v56;
  uint8x8_t v57;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t v60;
  _QWORD *i;
  unint64_t v62;
  char **v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  BOOL v67;
  void *v68;
  uint64_t **j;
  uint64_t *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  void *v78;
  void *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v83;
  id v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  void *__p[2];
  __int128 v90;
  uint64_t v91;
  _QWORD v92[2];
  char v93;
  _QWORD v94[3];
  _QWORD *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308)
    v6 = (double *)a2;
  v86 = (id)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  v88 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v86, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(a2 + 224);
      v16 = *(uint64_t **)(a2 + 232);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v20 = (void *)objc_msgSend(v14, "copy");
      objc_msgSend((id)v12, "_setSources:", v20);

    }
  }

  v94[0] = &off_1E6D06FB0;
  v95 = v94;
  v87 = (id)v12;
  v21 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = *(const void **)(v88 + 128);
  __p[0] = *(void **)(v88 + 120);
  __p[1] = 0;
  v90 = 0uLL;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p[1], v23, *(_QWORD *)(v88 + 136), (uint64_t)(*(_QWORD *)(v88 + 136) - (_QWORD)v23) >> 4);
  v91 = *(_QWORD *)(v88 + 152);
  if (!v95)
    std::__throw_bad_function_call[abi:ne180100]();
  v24 = (*(uint64_t (**)(_QWORD *, void **))(*v95 + 48))(v95, __p);
  v25 = *(double **)(v24 + 8);
  v26 = 0.0;
  while (v25 != *(double **)(v24 + 16))
  {
    v28 = *v25;
    v27 = v25[1];
    v25 += 2;
    v26 = v26 + v27 - v28;
  }
  objc_msgSend(v21, "quantityWithUnit:doubleValue:", v22, v26 + *(double *)(v24 + 32));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v87, "setDuration:", v29);

  if (__p[1])
  {
    *(void **)&v90 = __p[1];
    operator delete(__p[1]);
  }

  v30 = *(const void **)(v88 + 128);
  __p[0] = *(void **)(v88 + 120);
  __p[1] = 0;
  v90 = 0uLL;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p[1], v30, *(_QWORD *)(v88 + 136), (uint64_t)(*(_QWORD *)(v88 + 136) - (_QWORD)v30) >> 4);
  v91 = *(_QWORD *)(v88 + 152);
  if (!v95)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v87, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_QWORD *, void **))(*v95 + 48))(v95, __p));
  if (__p[1])
  {
    *(void **)&v90 = __p[1];
    operator delete(__p[1]);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_133;
  v85 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v84 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)__p = 0u;
  v90 = 0u;
  LODWORD(v91) = 1065353216;
  v31 = *(_QWORD **)(v88 + 160);
  if (v31 == (_QWORD *)(v88 + 168))
    goto LABEL_132;
  do
  {
    HDStatisticsBucket<HDStatisticsTimeInterval>::_bundleIdentifierForSourceID(v88, v31[4]);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = v32;
    if (!v32)
      goto LABEL_108;
    v34 = objc_msgSend(v32, "hash");
    v35 = v34;
    v36 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_49;
    v37 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v37.i16[0] = vaddlv_u8(v37);
    v38 = v37.u32[0];
    if (v37.u32[0] > 1uLL)
    {
      v12 = v34;
      if ((void *)v34 >= __p[1])
        v12 = v34 % (unint64_t)__p[1];
    }
    else
    {
      v12 = ((unint64_t)__p[1] - 1) & v34;
    }
    v39 = (char **)*((_QWORD *)__p[0] + v12);
    if (!v39 || (v40 = *v39) == 0)
    {
LABEL_49:
      v46 = (char *)operator new(0x40uLL);
      v92[0] = v46;
      v92[1] = &v90;
      *(_QWORD *)v46 = 0;
      *((_QWORD *)v46 + 1) = v35;
      *((_QWORD *)v46 + 2) = v33;
      *(_OWORD *)(v46 + 24) = 0u;
      *(_OWORD *)(v46 + 40) = 0u;
      *((_QWORD *)v46 + 7) = 0;
      v93 = 1;
      v47 = (float)(unint64_t)(*((_QWORD *)&v90 + 1) + 1);
      if (v36 && (float)(*(float *)&v91 * (float)v36) >= v47)
      {
LABEL_95:
        v63 = (char **)*((_QWORD *)__p[0] + v12);
        v40 = (char *)v92[0];
        if (v63)
        {
          *(_QWORD *)v92[0] = *v63;
        }
        else
        {
          *(_QWORD *)v92[0] = v90;
          *(_QWORD *)&v90 = v40;
          *((_QWORD *)__p[0] + v12) = &v90;
          if (!*(_QWORD *)v40)
          {
LABEL_104:
            v92[0] = 0;
            ++*((_QWORD *)&v90 + 1);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,void *>>>>::reset[abi:ne180100]((uint64_t)v92);
            goto LABEL_105;
          }
          v64 = *(_QWORD *)(*(_QWORD *)v40 + 8);
          if ((v36 & (v36 - 1)) != 0)
          {
            if (v64 >= v36)
              v64 %= v36;
          }
          else
          {
            v64 &= v36 - 1;
          }
          v63 = (char **)((char *)__p[0] + 8 * v64);
        }
        *v63 = v40;
        goto LABEL_104;
      }
      v48 = (v36 & (v36 - 1)) != 0;
      if (v36 < 3)
        v48 = 1;
      v49 = v48 | (2 * v36);
      v50 = vcvtps_u32_f32(v47 / *(float *)&v91);
      if (v49 <= v50)
        prime = (int8x8_t)v50;
      else
        prime = (int8x8_t)v49;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v36 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_61;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v58 = vcvtps_u32_f32((float)*((unint64_t *)&v90 + 1) / *(float *)&v91);
        if (__p[1] < (void *)3
          || (v59 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
        {
          v58 = std::__next_prime(v58);
        }
        else
        {
          v60 = 1 << -(char)__clz(v58 - 1);
          if (v58 >= 2)
            v58 = v60;
        }
        if (*(_QWORD *)&prime <= v58)
          prime = (int8x8_t)v58;
        if (*(_QWORD *)&prime >= v36)
        {
          v36 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_61:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v52 = operator new(8 * *(_QWORD *)&prime);
            v53 = __p[0];
            __p[0] = v52;
            if (v53)
              operator delete(v53);
            v54 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v54++) = 0;
            while (*(_QWORD *)&prime != v54);
            v55 = (_QWORD **)v90;
            if ((_QWORD)v90)
            {
              v56 = *(_QWORD *)(v90 + 8);
              v57 = (uint8x8_t)vcnt_s8(prime);
              v57.i16[0] = vaddlv_u8(v57);
              if (v57.u32[0] > 1uLL)
              {
                if (v56 >= *(_QWORD *)&prime)
                  v56 %= *(_QWORD *)&prime;
              }
              else
              {
                v56 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v56) = &v90;
              for (i = *v55; i; v56 = v62)
              {
                v62 = i[1];
                if (v57.u32[0] > 1uLL)
                {
                  if (v62 >= *(_QWORD *)&prime)
                    v62 %= *(_QWORD *)&prime;
                }
                else
                {
                  v62 &= *(_QWORD *)&prime - 1;
                }
                if (v62 != v56)
                {
                  if (!*((_QWORD *)__p[0] + v62))
                  {
                    *((_QWORD *)__p[0] + v62) = v55;
                    goto LABEL_86;
                  }
                  *v55 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v62);
                  **((_QWORD **)__p[0] + v62) = i;
                  i = v55;
                }
                v62 = v56;
LABEL_86:
                v55 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v36 = (unint64_t)prime;
            goto LABEL_90;
          }
          v68 = __p[0];
          __p[0] = 0;
          if (v68)
            operator delete(v68);
          v36 = 0;
          __p[1] = 0;
        }
      }
LABEL_90:
      if ((v36 & (v36 - 1)) != 0)
      {
        if (v35 >= v36)
          v12 = v35 % v36;
        else
          v12 = v35;
      }
      else
      {
        v12 = (v36 - 1) & v35;
      }
      goto LABEL_95;
    }
    v83 = (unint64_t)__p[1] - 1;
    while (1)
    {
      v41 = *((_QWORD *)v40 + 1);
      if (v41 == v35)
        break;
      if (v38 > 1)
      {
        if (v41 >= v36)
          v41 %= v36;
      }
      else
      {
        v41 &= v83;
      }
      if (v41 != v12)
        goto LABEL_49;
LABEL_48:
      v40 = *(char **)v40;
      if (!v40)
        goto LABEL_49;
    }
    v42 = *((id *)v40 + 2);
    v43 = v33;
    v44 = v43;
    if (v42 != v43)
    {
      v45 = objc_msgSend(v42, "isEqualToString:", v43);

      if ((v45 & 1) != 0)
        goto LABEL_105;
      goto LABEL_48;
    }

LABEL_105:
    *((_QWORD *)v40 + 3) = v31[5];
    if (v40 + 16 != (char *)(v31 + 4))
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v40 + 32, (char *)v31[6], v31[7], (uint64_t)(v31[7] - v31[6]) >> 4);
    *((_QWORD *)v40 + 7) = v31[9];

LABEL_108:
    v65 = (_QWORD *)v31[1];
    if (v65)
    {
      do
      {
        v66 = v65;
        v65 = (_QWORD *)*v65;
      }
      while (v65);
    }
    else
    {
      do
      {
        v66 = (_QWORD *)v31[2];
        v67 = *v66 == (_QWORD)v31;
        v31 = v66;
      }
      while (!v67);
    }
    v31 = v66;
  }
  while (v66 != (_QWORD *)(v88 + 168));
  for (j = (uint64_t **)v90; j; j = (uint64_t **)*j)
  {
    v70 = j[2];
    v71 = (void *)MEMORY[0x1E0CB6A28];
    objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v95)
      std::__throw_bad_function_call[abi:ne180100]();
    v73 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v95 + 48))(v95, (uint64_t *)j + 3);
    v74 = *(double **)(v73 + 8);
    v75 = 0.0;
    while (v74 != *(double **)(v73 + 16))
    {
      v77 = *v74;
      v76 = v74[1];
      v74 += 2;
      v75 = v75 + v76 - v77;
    }
    objc_msgSend(v71, "quantityWithUnit:doubleValue:", v72, v75 + *(double *)(v73 + 32));
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "setObject:forKeyedSubscript:", v78, v70);

    if (!v95)
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v95 + 48))(v95, (uint64_t *)j + 3));
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v84, "setObject:forKeyedSubscript:", v79, v70);

  }
LABEL_132:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>>>::~__hash_table((uint64_t)__p);
  objc_msgSend(v87, "setDurationBySource:", v85);
  objc_msgSend(v87, "setDataCountBySource:", v84);

LABEL_133:
  v80 = v95;
  if (v95 == v94)
  {
    v81 = 4;
    v80 = v94;
LABEL_137:
    (*(void (**)(void))(*v80 + 8 * v81))();
  }
  else if (v95)
  {
    v81 = 5;
    goto LABEL_137;
  }
  return v87;
}

void sub_1B7D1560C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  unint64_t v3;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v2 = (void **)(a1 + 224);
  v1 = *(_QWORD *)(a1 + 224);
  v3 = *(_QWORD *)(a1 + 208);
  if (v3 != (*(_QWORD *)(a1 + 232) - v1) >> 3)
  {
    *(_QWORD *)(a1 + 232) = v1;
    std::vector<long long>::reserve((void **)(a1 + 224), v3);
    v5 = *(_QWORD **)(a1 + 200);
    if (v5)
    {
      v6 = *(char **)(a1 + 232);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 240);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v2;
          v11 = (v6 - (_BYTE *)*v2) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 224);
            v6 = *(char **)(a1 + 232);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 224) = v16;
          *(_QWORD *)(a1 + 232) = v9;
          *(_QWORD *)(a1 + 240) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 232) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v2);

    }
  }
}

void sub_1B7D1591C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  int64_t v12;
  char v13;
  char v14;
  double v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  id WeakRetained;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  double v49;
  int64_t v50;
  _BOOL4 var4;
  BOOL var5;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  unint64_t var3;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  char *v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  void *v81;
  unint64_t v82;
  uint64_t *v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  double v100;
  int v101;
  int v102;
  int v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  unint64_t v107;
  uint64_t *v108;
  __int128 v109;
  char *v110;
  double v111;
  void *v112;
  void *v113;
  _QWORD *v114;
  double **v115;
  id *location;
  void *v117;
  id v118;
  uint64_t *v119;
  int64_t v120;
  double **v121;
  char v122;
  BOOL v123;
  int64_t v124;
  void **v125;
  uint64_t v126;
  HDRawQuantitySample v127;
  __int128 v128;
  __int128 v129;
  __int16 v130;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v125 = (void **)(a1 + 96);
    v121 = (double **)(a1 + 64);
    v119 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    v115 = (double **)(a1 + 128);
    v114 = (_QWORD *)(a1 + 168);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
        break;
LABEL_124:
      *(double *)(a1 + 56) = a2;
LABEL_125:
      v111 = *(double *)(a1 + 56);
      if (v111 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(double) [Statistics = HDStatisticsTimeInterval]");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v112, "handleFailureInFunction:file:lineNumber:description:", v113, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v111 = *(double *)(a1 + 56);
      }
      v5 = v111;
      if (v111 >= a2)
        return;
    }
    if (v8 != 1)
    {
      v20 = a2;
      v21 = a2;
      v22 = v5;
      v23 = *(_QWORD *)(a1 + 96);
      if ((__int128 *)v6 != v7)
      {
        do
        {
          v24 = *(double *)(v23 + 8);
          v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21)
            v21 = *(double *)(v23 + 8);
          if (v25 > v5)
            v27 = *(double *)(v23 + 16);
          else
            v27 = v20;
          if (v25 < v20)
          {
            v22 = v5;
            v20 = v27;
          }
          v23 += 48;
        }
        while ((__int128 *)v23 != v7);
      }
      if (v20 >= v21)
        v28 = v21;
      else
        v28 = v20;
      v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        v30 = v29 * floor(v28 / v29);
        v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31)
          v28 = v30;
        else
          v28 = v31;
      }
      *v125 = 0;
      v125[1] = 0;
      v125[2] = 0;
      if ((__int128 *)v6 != v7)
      {
        if (v8 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        v35 = *(char **)(a1 + 96);
        v34 = *(char **)(a1 + 104);
        v36 = v32;
        if (v34 != v35)
        {
          do
          {
            v37 = *((_OWORD *)v34 - 3);
            v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          v34 = (char *)*v125;
        }
        *(_QWORD *)(a1 + 96) = v36;
        *(_QWORD *)(a1 + 104) = v32;
        *(_QWORD *)(a1 + 112) = &v32[48 * v33];
        if (v34)
          operator delete(v34);
      }
      HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder(a1);
      WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(_QWORD *)&v127.var0 = a1;
        v40 = 126 - 2 * __clz(v8);
        if ((__int128 *)v6 == v7)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v127, v41, 1);
      }
      if (*(_BYTE *)(a1 + 25))
        v118 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      else
        v118 = 0;
      v117 = (void *)v6;
      if ((__int128 *)v6 == v7)
      {
LABEL_106:
        *(double *)(a1 + 152) = HKIntervalMask<double>::removeIntervalsBefore(v115, v28) + *(double *)(a1 + 152);
        v96 = *(_QWORD **)(a1 + 160);
        if (v96 != v114)
        {
          do
          {
            *((double *)v96 + 9) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 6, v28)
                                 + *((double *)v96 + 9);
            v97 = (_QWORD *)v96[1];
            if (v97)
            {
              do
              {
                v98 = v97;
                v97 = (_QWORD *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                v98 = (_QWORD *)v96[2];
                v99 = *v98 == (_QWORD)v96;
                v96 = v98;
              }
              while (!v99);
            }
            v96 = v98;
          }
          while (v98 != v114);
        }
        *(double *)(a1 + 56) = v28;

        if (v117)
          operator delete(v117);
        goto LABEL_125;
      }
      v120 = 0;
      v44 = 0;
      v45 = v6;
      while (2)
      {
        v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v127.var0 = *(_OWORD *)v45;
        *(_OWORD *)&v127.var2 = v46;
        *(_QWORD *)&v127.var4 = *(_QWORD *)(v45 + 32);
        v47 = v46;
        v48 = v28 - v127.var1;
        v49 = *(double *)&v46 - v127.var1;
        if (v49 - (v28 - v127.var1) < 0.01)
        {
          v50 = 0;
          var4 = 0;
          var5 = 0;
          v53 = 0.0;
          v47 = 0;
          v54 = 0.0;
          if (!v127.var4)
            goto LABEL_59;
LABEL_54:
          v123 = var5;
          v124 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
          v56 = *(unsigned __int8 *)(v45 + 42);
          v57 = *(unsigned __int8 *)(v45 + 41);
          v122 = *(_BYTE *)(v45 + 40);
          if (!v127.var4)
            goto LABEL_87;
          if ((v44 & 1) != 0)
          {
            var3 = v127.var3;
            if (v120 == v127.var3 || *(_BYTE *)(a1 + 24))
            {
              HDStatisticsTimeInterval::addSample(v119, &v127, v56 == 0);
              v56 = 1;
            }
          }
          else
          {
            HDStatisticsTimeInterval::addSample(v119, &v127, v56 == 0);
            v56 = 1;
            var3 = v127.var3;
            v120 = v127.var3;
          }
          if (!*(_BYTE *)(a1 + 25))
            goto LABEL_86;
          HDStatisticsBucket<HDStatisticsTimeInterval>::_bundleIdentifierForSourceID(a1, var3);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v69)
            goto LABEL_85;
          objc_msgSend(v118, "objectForKeyedSubscript:", v69);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v71 = v70;
          if (v70)
          {
            if (objc_msgSend(v70, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              v44 = 1;
LABEL_87:
              if (var4)
              {
                v84 = v56 != 0;
                v86 = *(char **)(a1 + 104);
                v85 = *(_QWORD *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((_QWORD *)v86 + 2) = v47;
                  *((_QWORD *)v86 + 3) = v124;
                  v86[32] = var4;
                  v86[33] = v123;
                  v86[40] = v122;
                  v86[41] = v57;
                  v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                v80 = (char *)*v125;
                v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (_BYTE *)*v125) >> 4);
                v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (_QWORD)v80) >> 4);
                if (2 * v89 > v88)
                  v88 = 2 * v89;
                if (v89 >= 0x2AAAAAAAAAAAAAALL)
                  v90 = 0x555555555555555;
                else
                  v90 = v88;
                if (v90)
                {
                  v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  v80 = *(char **)(a1 + 96);
                  v86 = *(char **)(a1 + 104);
                }
                else
                {
                  v91 = 0;
                }
                v92 = v90 + 48 * v87;
                *(double *)v92 = v54;
                *(double *)(v92 + 8) = v53;
                *(_QWORD *)(v92 + 16) = v47;
                *(_QWORD *)(v92 + 24) = v124;
                *(_BYTE *)(v92 + 32) = var4;
                *(_BYTE *)(v92 + 33) = v123;
                *(_BYTE *)(v92 + 40) = v122;
                *(_BYTE *)(v92 + 41) = v57;
                *(_BYTE *)(v92 + 42) = v84;
                v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    v94 = *((_OWORD *)v86 - 3);
                    v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 48) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  v80 = (char *)*v125;
                }
                v63 = (_OWORD *)(v92 + 48);
                *(_QWORD *)(a1 + 96) = v93;
                *(_QWORD *)(a1 + 104) = v92 + 48;
                *(_QWORD *)(a1 + 112) = v90 + 48 * v91;
                if (v80)
LABEL_103:
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v118, "setObject:forKeyedSubscript:", v81, v69);

          }
          v82 = HDStatisticsBucket<HDStatisticsTimeInterval>::_canonicalSourceIDForSourceID(a1, var3);
          v83 = (uint64_t *)HDStatisticsBucket<HDStatisticsTimeInterval>::_statisticsForSource(a1, v82);
          HDStatisticsTimeInterval::addSample(v83, &v127, v57 == 0);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          v127.var4 = 0;
          goto LABEL_59;
        }
        v55 = v48 / v49 * v127.var0;
        v50 = v127.var3;
        var5 = v127.var5;
        v54 = v127.var0 - v55;
        v127.var0 = v55;
        v127.var2 = v28;
        v53 = v28;
        var4 = v127.var4;
        if (v127.var4)
          goto LABEL_54;
LABEL_59:
        v59 = *(_OWORD **)(a1 + 104);
        v60 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          v61 = *(_OWORD *)v45;
          v62 = *(_OWORD *)(v45 + 32);
          v59[1] = *(_OWORD *)(v45 + 16);
          v59[2] = v62;
          *v59 = v61;
          v63 = v59 + 3;
          goto LABEL_104;
        }
        v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (_BYTE *)*v125) >> 4);
        v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (_QWORD)*v125) >> 4);
        if (2 * v66 > v65)
          v65 = 2 * v66;
        if (v66 >= 0x2AAAAAAAAAAAAAALL)
          v67 = 0x555555555555555;
        else
          v67 = v65;
        if (v67)
          v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        else
          v68 = 0;
        v72 = (_OWORD *)(v67 + 48 * v64);
        v73 = *(_OWORD *)v45;
        v74 = *(_OWORD *)(v45 + 32);
        v72[1] = *(_OWORD *)(v45 + 16);
        v72[2] = v74;
        *v72 = v73;
        v76 = *(char **)(a1 + 96);
        v75 = *(char **)(a1 + 104);
        v77 = v72;
        if (v75 != v76)
        {
          do
          {
            v78 = *((_OWORD *)v75 - 3);
            v79 = *((_OWORD *)v75 - 2);
            *(_OWORD *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          v75 = (char *)*v125;
        }
        v63 = v72 + 3;
        *(_QWORD *)(a1 + 96) = v77;
        *(_QWORD *)(a1 + 104) = v72 + 3;
        *(_QWORD *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(_QWORD *)(a1 + 104) = v63;
LABEL_105:
        v45 += 48;
        if ((__int128 *)v45 == v7)
          goto LABEL_106;
        continue;
      }
    }
    v10 = *(double *)v6;
    v9 = *(double *)(v6 + 8);
    v11 = *(double *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 24);
    v13 = *(_BYTE *)(v6 + 32);
    v14 = *(_BYTE *)(v6 + 33);
    v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        v42 = 0;
        v43 = 0;
        v18 = 0.0;
        v17 = *(double *)(v6 + 16);
        v16 = *(_BYTE *)(v6 + 32);
        v19 = 0.0;
        v11 = 0.0;
        v13 = 0;
LABEL_117:
        v101 = *(unsigned __int8 *)(v6 + 42);
        v102 = *(unsigned __int8 *)(v6 + 41);
        v103 = *(unsigned __int8 *)(v6 + 40);
        v127.var0 = v10;
        v127.var1 = v9;
        v127.var2 = v17;
        v127.var3 = v12;
        v127.var4 = v16;
        v127.var5 = v14;
        *(_DWORD *)(&v127.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v127.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&v128 = v18;
        *((double *)&v128 + 1) = v19;
        *(double *)&v129 = v11;
        *((_QWORD *)&v129 + 1) = v42;
        LOBYTE(v130) = v13;
        HIBYTE(v130) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
        v104 = v103 != 0;
        v105 = v102 != 0;
        v106 = v101 != 0;
        if (v127.var4)
        {
          HDStatisticsTimeInterval::addSample(v119, &v127, v101 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v107 = HDStatisticsBucket<HDStatisticsTimeInterval>::_canonicalSourceIDForSourceID(a1, v127.var3);
            v108 = (uint64_t *)HDStatisticsBucket<HDStatisticsTimeInterval>::_statisticsForSource(a1, v107);
            HDStatisticsTimeInterval::addSample(v108, &v127, v102 == 0);
          }
          v104 = 1;
          v105 = 1;
          v106 = 1;
        }
        if ((_BYTE)v130)
        {
          LOWORD(v126) = v130;
          v109 = v129;
          v110 = (char *)*v125;
          *(_OWORD *)v110 = v128;
          *((_OWORD *)v110 + 1) = v109;
          *((_QWORD *)v110 + 4) = v126;
          v110[40] = v104;
          v110[41] = v105;
          v110[42] = v106;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
        goto LABEL_124;
      }
      v100 = v10 * (v15 / (v11 - v9));
      v17 = a2;
      v16 = *(_BYTE *)(v6 + 32);
      v18 = v10 - v100;
      v10 = v100;
      v19 = a2;
    }
    else
    {
      v16 = 0;
      v17 = *(double *)(v6 + 16);
      v18 = *(double *)v6;
      v19 = *(double *)(v6 + 8);
    }
    v42 = *(_QWORD *)(v6 + 24);
    v43 = *(_BYTE *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1B7D1629C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsTimeInterval>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v12;

  v12 = a2;
  v5 = *(_QWORD **)(a1 + 168);
  v3 = (uint64_t **)(a1 + 168);
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = (uint64_t **)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    v6 = std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsTimeInterval>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 248), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsTimeInterval>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 288);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D16474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsTimeInterval>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 328);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D16544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x50uLL);
    *((_QWORD *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((_QWORD *)v9 + 9) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[24];

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a1 + 3);
  if (v4 == v5)
    goto LABEL_23;
  v6 = *(char **)(*(_QWORD *)a4 + 224);
  v7 = *(char **)(*(_QWORD *)a4 + 232);
  if (v6 == v7)
  {
    v9 = *(char **)(*(_QWORD *)a4 + 224);
    v8 = v9;
  }
  else
  {
    v8 = *(char **)(*(_QWORD *)a4 + 224);
    while (*(_QWORD *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(*(_QWORD *)a4 + 232);
        break;
      }
    }
    v9 = *(char **)(*(_QWORD *)a4 + 224);
    while (*(_QWORD *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        v9 = *(char **)(*(_QWORD *)a4 + 232);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    v13 = *((_QWORD *)a3 + 3);
    if (v13 != v4)
    {
      v14 = *(char **)(*(_QWORD *)a4 + 224);
      v15 = *(char **)(*(_QWORD *)a4 + 232);
      v16 = v14;
      v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(_QWORD *)v17 == v13)
            goto LABEL_28;
          v17 += 8;
        }
        while (v17 != v15);
        v17 = *(char **)(*(_QWORD *)a4 + 232);
LABEL_28:
        while (*(_QWORD *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            v16 = *(char **)(*(_QWORD *)a4 + 232);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        v18 = *a2;
        *(_OWORD *)v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        v19 = *(__int128 *)((char *)a3 + 27);
        v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(__int128 *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        result = *(__n128 *)&v46[11];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        v22 = *((_QWORD *)a2 + 3);
        v23 = *((_QWORD *)a1 + 3);
        if (v22 != v23)
        {
          v24 = *(char **)(*(_QWORD *)a4 + 224);
          v25 = *(char **)(*(_QWORD *)a4 + 232);
          v26 = v24;
          v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(_QWORD *)v27 == v22)
                goto LABEL_37;
              v27 += 8;
            }
            while (v27 != v25);
            v27 = *(char **)(*(_QWORD *)a4 + 232);
LABEL_37:
            while (*(_QWORD *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                v26 = *(char **)(*(_QWORD *)a4 + 232);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            v28 = *a1;
            *(_OWORD *)v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            v29 = *(__int128 *)((char *)a2 + 27);
            v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(__int128 *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            result = *(__n128 *)&v47[11];
            *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        v12 = *(char **)(*(_QWORD *)a4 + 224);
        v11 = v12;
      }
      else
      {
        v11 = *(char **)(*(_QWORD *)a4 + 224);
        while (*(_QWORD *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            v11 = *(char **)(*(_QWORD *)a4 + 232);
            break;
          }
        }
        v12 = *(char **)(*(_QWORD *)a4 + 224);
        while (*(_QWORD *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            v12 = *(char **)(*(_QWORD *)a4 + 232);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        v31 = a1[1];
        v32 = *a1;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        v33 = *(__int128 *)((char *)a3 + 27);
        v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(__int128 *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        result = *(__n128 *)&v49[3];
        *(__int128 *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    v35 = *a1;
    *(_OWORD *)v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    v36 = *(__int128 *)((char *)a2 + 27);
    v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(__int128 *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    result = *(__n128 *)&v48[11];
    *(__int128 *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    v38 = *((_QWORD *)a3 + 3);
    v39 = *((_QWORD *)a2 + 3);
    if (v38 != v39)
    {
      v40 = *(char **)(*(_QWORD *)a4 + 224);
      v41 = *(char **)(*(_QWORD *)a4 + 232);
      v42 = v40;
      v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(_QWORD *)v43 == v38)
            goto LABEL_50;
          v43 += 8;
        }
        while (v43 != v41);
        v43 = *(char **)(*(_QWORD *)a4 + 232);
LABEL_50:
        while (*(_QWORD *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            v42 = *(char **)(*(_QWORD *)a4 + 232);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        v31 = a2[1];
        v32 = *a2;
        *(_QWORD *)v49 = *((_QWORD *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        v44 = *(__int128 *)((char *)a3 + 27);
        v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(__int128 *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 224);
      v11 = *(char **)(*(_QWORD *)a3 + 232);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 232);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 232);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 224);
      v24 = *(char **)(*(_QWORD *)a3 + 232);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 232);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 232);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 224);
            v31 = *(char **)(*(_QWORD *)a3 + 232);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 232);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 232);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5).n128_u64[0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v11 != v12)
  {
    v13 = *(char **)(*(_QWORD *)a5 + 224);
    v14 = *(char **)(*(_QWORD *)a5 + 232);
    v15 = v13;
    v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(_QWORD *)v16 == v11)
          goto LABEL_6;
        v16 += 8;
      }
      while (v16 != v14);
      v16 = *(char **)(*(_QWORD *)a5 + 232);
LABEL_6:
      while (*(_QWORD *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          v15 = *(char **)(*(_QWORD *)a5 + 232);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a4 + 27);
      v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v38;
      result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_QWORD *)(a2 + 24);
      if (v20 != v21)
      {
        v22 = *(char **)(*(_QWORD *)a5 + 224);
        v23 = *(char **)(*(_QWORD *)a5 + 232);
        v24 = v22;
        v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(_QWORD *)v25 == v20)
              goto LABEL_15;
            v25 += 8;
          }
          while (v25 != v23);
          v25 = *(char **)(*(_QWORD *)a5 + 232);
LABEL_15:
          while (*(_QWORD *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              v24 = *(char **)(*(_QWORD *)a5 + 232);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          v26 = *(_OWORD *)a2;
          *(_OWORD *)v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          v27 = *(_OWORD *)(a3 + 27);
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 16) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v39;
          result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          v29 = *(_QWORD *)(a2 + 24);
          v30 = *(_QWORD *)(a1 + 24);
          if (v29 != v30)
          {
            v31 = *(char **)(*(_QWORD *)a5 + 224);
            v32 = *(char **)(*(_QWORD *)a5 + 232);
            v33 = v31;
            v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(_QWORD *)v34 == v29)
                  goto LABEL_24;
                v34 += 8;
              }
              while (v34 != v32);
              v34 = *(char **)(*(_QWORD *)a5 + 232);
LABEL_24:
              while (*(_QWORD *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  v33 = *(char **)(*(_QWORD *)a5 + 232);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              v35 = *(_OWORD *)a1;
              *(_OWORD *)v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              v36 = *(_OWORD *)(a2 + 27);
              v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 16) = *(_OWORD *)v40;
              result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTimeInterval>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v13 != v14)
  {
    v15 = *(char **)(*(_QWORD *)a6 + 224);
    v16 = *(char **)(*(_QWORD *)a6 + 232);
    v17 = v15;
    v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(_QWORD *)v18 == v13)
          goto LABEL_6;
        v18 += 8;
      }
      while (v18 != v16);
      v18 = *(char **)(*(_QWORD *)a6 + 232);
LABEL_6:
      while (*(_QWORD *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          v17 = *(char **)(*(_QWORD *)a6 + 232);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      v19 = *(_OWORD *)a4;
      *(_OWORD *)v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a5 + 27);
      v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 16) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v49;
      result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      v22 = *(_QWORD *)(a4 + 24);
      v23 = *(_QWORD *)(a3 + 24);
      if (v22 != v23)
      {
        v24 = *(char **)(*(_QWORD *)a6 + 224);
        v25 = *(char **)(*(_QWORD *)a6 + 232);
        v26 = v24;
        v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(_QWORD *)v27 == v22)
              goto LABEL_15;
            v27 += 8;
          }
          while (v27 != v25);
          v27 = *(char **)(*(_QWORD *)a6 + 232);
LABEL_15:
          while (*(_QWORD *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              v26 = *(char **)(*(_QWORD *)a6 + 232);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          v28 = *(_OWORD *)a3;
          *(_OWORD *)v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          v29 = *(_OWORD *)(a4 + 27);
          v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 16) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v50;
          result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          v31 = *(_QWORD *)(a3 + 24);
          v32 = *(_QWORD *)(a2 + 24);
          if (v31 != v32)
          {
            v33 = *(char **)(*(_QWORD *)a6 + 224);
            v34 = *(char **)(*(_QWORD *)a6 + 232);
            v35 = v33;
            v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(_QWORD *)v36 == v31)
                  goto LABEL_24;
                v36 += 8;
              }
              while (v36 != v34);
              v36 = *(char **)(*(_QWORD *)a6 + 232);
LABEL_24:
              while (*(_QWORD *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  v35 = *(char **)(*(_QWORD *)a6 + 232);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              v37 = *(_OWORD *)a2;
              *(_OWORD *)v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              v38 = *(_OWORD *)(a3 + 27);
              v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 16) = *(_OWORD *)v51;
              result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              v40 = *(_QWORD *)(a2 + 24);
              v41 = *(_QWORD *)(a1 + 24);
              if (v40 != v41)
              {
                v42 = *(char **)(*(_QWORD *)a6 + 224);
                v43 = *(char **)(*(_QWORD *)a6 + 232);
                v44 = v42;
                v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(_QWORD *)v45 == v40)
                      goto LABEL_33;
                    v45 += 8;
                  }
                  while (v45 != v43);
                  v45 = *(char **)(*(_QWORD *)a6 + 232);
LABEL_33:
                  while (*(_QWORD *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      v44 = *(char **)(*(_QWORD *)a6 + 232);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  v46 = *(_OWORD *)a1;
                  *(_OWORD *)v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  v47 = *(_OWORD *)(a2 + 27);
                  v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 16) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 16) = *(_OWORD *)v52;
                  result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsTimeInterval>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsTimeInterval>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsTimeInterval>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsTimeInterval>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D06FB0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D06FB0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addStatisticsFromFinishedBucket<HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsTimeInterval> const&)::{lambda(HDStatisticsTimeInterval const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsTimeInterval const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 520))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(_QWORD *)(a1 + 40) && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, a4);

  }
  return v10;
}

void sub_1B7D1861C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  double v1;
  double result;

  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_BYTE *)(a1 + 520))
    {
      v1 = *(double *)(a1 + 176);
      result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        v1 = -1.79769313e308;
      }
      else if (*(_BYTE *)(a1 + 144))
      {
        v1 = -1.79769313e308;
      }
      if (v1 >= result)
        return v1;
      return result;
    }
    return -1.79769313e308;
  }
  result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120))
    return -1.79769313e308;
  if (*(_BYTE *)(a1 + 144))
    return -1.79769313e308;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 488);
      v7 = *(_QWORD *)(a1 + 496);
      if (v7 == v6)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_didChangeBucket(a1, v9);
      if (v7 != v6)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D188A0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  unint64_t v10;
  int v11;
  char v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unint64_t v19;
  int v20;
  char v21;
  double v22;
  double v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  double v63;
  double v64;

  v5 = a1 + 8;
  v6 = *(double *)(a1 + 8);
  v8 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v9 = *(double *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(unsigned __int8 *)(a2 + 32);
  v12 = *(_BYTE *)(a2 + 33);
  v13 = v6 - v7;
  if (v6 - v7 >= 0.01)
  {
    v14 = v9 - v7;
    if (v14 - v13 >= 0.01)
    {
      v8 = v8 - v8 * (v13 / v14);
    }
    else
    {
      v11 = 0;
      v10 = 0;
      v12 = 0;
      v9 = 0.0;
      v6 = 0.0;
      v8 = 0.0;
    }
  }
  else
  {
    v6 = *(double *)(a2 + 8);
  }
  v15 = *(double *)(a1 + 16);
  v16 = v15 - v6;
  v17 = v9 - v6;
  v18 = v9 - v6 - (v15 - v6);
  if (!*(_DWORD *)(a1 + 36))
  {
    if (v18 < 0.01)
    {
LABEL_11:
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0.0;
      v15 = 0.0;
      v23 = 0.0;
      if (!v11)
        goto LABEL_52;
      goto LABEL_16;
    }
    if (v16 >= 0.01)
      goto LABEL_15;
LABEL_14:
    v21 = v12;
    v20 = v11;
    v19 = v10;
    v23 = v9;
    v15 = v6;
    v22 = v8;
    goto LABEL_52;
  }
  if (v16 < 0.01)
    goto LABEL_14;
  if (v18 < 0.01)
    goto LABEL_11;
LABEL_15:
  v23 = v9;
  v19 = v10;
  v22 = v8 - v8 * (v16 / v17);
  v20 = v11;
  v21 = v12;
  v9 = *(double *)(a1 + 16);
  v8 = v8 * (v16 / v17);
  if (!v11)
    goto LABEL_52;
LABEL_16:
  v63 = v6;
  v64 = v9;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 192, v10, v10);
  v24 = *(_QWORD *)(a1 + 112);
  if (v24 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 128) <= 0)
  {
    v29.f64[1] = *(float64_t *)(a1 + 16);
    v26 = v63;
    v25 = v64;
    v29.f64[0] = v63;
    v30.f64[0] = *(float64_t *)(a1 + 8);
    v30.f64[1] = v64;
    v31 = (int8x16_t)vcgtq_f64(v30, v29);
    v30.f64[0] = v63;
    *(int8x16_t *)(a1 + 48) = vbslq_s8(v31, *(int8x16_t *)(a1 + 8), (int8x16_t)v30);
  }
  else
  {
    v26 = v63;
    v25 = v64;
    if (v63 < *(double *)(a1 + 48))
    {
      v27 = *(double *)(a1 + 8);
      if (v63 >= v27)
        v27 = v63;
      *(double *)(a1 + 48) = v27;
    }
    if (v64 > *(double *)(a1 + 56))
    {
      v28 = *(double *)(a1 + 16);
      if (v28 >= v64)
        v28 = v64;
      *(double *)(a1 + 56) = v28;
    }
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v32 = *(double *)(a1 + 64);
    if (v26 < v32)
      v32 = v26;
    *(double *)(a1 + 64) = v32;
  }
  if (a3 && v26 < *(double *)(a1 + 16))
  {
    HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(v5, v26);
    v26 = v63;
    v25 = v64;
    v24 = *(_QWORD *)(a1 + 112);
  }
  v33 = *(_QWORD *)(a1 + 120);
  if (v24 >= v33)
  {
    v35 = *(_QWORD *)(a1 + 104);
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v35) >> 4);
    v37 = v36 + 1;
    if (v36 + 1 > 0x555555555555555)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - v35) >> 4);
    if (2 * v38 > v37)
      v37 = 2 * v38;
    if (v38 >= 0x2AAAAAAAAAAAAAALL)
      v39 = 0x555555555555555;
    else
      v39 = v37;
    if (v39)
    {
      v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v39);
      v26 = v63;
      v25 = v64;
    }
    else
    {
      v40 = 0;
    }
    v41 = v39 + 48 * v36;
    v42 = v39 + 48 * v40;
    *(double *)v41 = v8;
    *(double *)(v41 + 8) = v26;
    *(double *)(v41 + 16) = v25;
    *(_QWORD *)(v41 + 24) = v10;
    *(_BYTE *)(v41 + 32) = v11;
    *(_BYTE *)(v41 + 33) = v12;
    *(_WORD *)(v41 + 40) = 0;
    *(_BYTE *)(v41 + 42) = 0;
    v34 = v41 + 48;
    v44 = *(char **)(a1 + 104);
    v43 = *(char **)(a1 + 112);
    if (v43 != v44)
    {
      do
      {
        v45 = *((_OWORD *)v43 - 3);
        v46 = *((_OWORD *)v43 - 2);
        *(_OWORD *)(v41 - 21) = *(_OWORD *)(v43 - 21);
        *(_OWORD *)(v41 - 48) = v45;
        *(_OWORD *)(v41 - 32) = v46;
        v41 -= 48;
        v43 -= 48;
      }
      while (v43 != v44);
      v43 = *(char **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v41;
    *(_QWORD *)(a1 + 112) = v34;
    *(_QWORD *)(a1 + 120) = v42;
    if (v43)
      operator delete(v43);
  }
  else
  {
    *(double *)v24 = v8;
    *(double *)(v24 + 8) = v26;
    *(double *)(v24 + 16) = v25;
    *(_QWORD *)(v24 + 24) = v10;
    *(_BYTE *)(v24 + 32) = v11;
    *(_BYTE *)(v24 + 33) = v12;
    *(_WORD *)(v24 + 40) = 0;
    v34 = v24 + 48;
    *(_BYTE *)(v24 + 42) = 0;
  }
  *(_QWORD *)(a1 + 112) = v34;
  if (*(_BYTE *)(a1 + 33))
  {
    v47 = HDStatisticsBucket<HDStatisticsTimeInterval>::_canonicalSourceIDForSourceID(v5, v10);
    HDStatisticsBucket<HDStatisticsTimeInterval>::_statisticsForSource(v5, v47);
  }
LABEL_52:
  if (v20)
  {
    v48 = *(_QWORD *)(a1 + 384);
    v49 = *(_QWORD *)(a1 + 392);
    if (v48 >= v49)
    {
      v51 = *(_QWORD *)(a1 + 376);
      v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v51) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v51) >> 3);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0x333333333333333)
        v55 = 0x666666666666666;
      else
        v55 = v53;
      if (v55)
        v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
      else
        v56 = 0;
      v57 = v55 + 40 * v52;
      v58 = v55 + 40 * v56;
      *(double *)v57 = v22;
      *(double *)(v57 + 8) = v15;
      *(double *)(v57 + 16) = v23;
      *(_QWORD *)(v57 + 24) = v19;
      *(_BYTE *)(v57 + 32) = v20;
      *(_BYTE *)(v57 + 33) = v21;
      v50 = v57 + 40;
      v60 = *(char **)(a1 + 376);
      v59 = *(char **)(a1 + 384);
      if (v59 != v60)
      {
        do
        {
          v61 = *(_OWORD *)(v59 - 40);
          v62 = *(_OWORD *)(v59 - 24);
          *(_WORD *)(v57 - 8) = *((_WORD *)v59 - 4);
          *(_OWORD *)(v57 - 24) = v62;
          *(_OWORD *)(v57 - 40) = v61;
          v57 -= 40;
          v59 -= 40;
        }
        while (v59 != v60);
        v59 = *(char **)(a1 + 376);
      }
      *(_QWORD *)(a1 + 376) = v57;
      *(_QWORD *)(a1 + 384) = v50;
      *(_QWORD *)(a1 + 392) = v58;
      if (v59)
        operator delete(v59);
    }
    else
    {
      *(double *)v48 = v22;
      *(double *)(v48 + 8) = v15;
      *(double *)(v48 + 16) = v23;
      *(_QWORD *)(v48 + 24) = v19;
      *(_BYTE *)(v48 + 32) = v20;
      v50 = v48 + 40;
      *(_BYTE *)(v48 + 33) = v21;
    }
    *(_QWORD *)(a1 + 384) = v50;
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 522))
  {
    *(_BYTE *)(a1 + 524) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 524) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D18DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 376), *(_QWORD *)(a1 + 384), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 384) - *(_QWORD *)(a1 + 376)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D18EE0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *i;
  _QWORD *v16;

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 400), *(id *)(a1 + 40));
  v9 = *(void **)(a1 + 136);
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 128) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 144) = v9;
    operator delete(v9);
  }
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  if (*(_QWORD *)(a1 + 184))
  {
    v10 = *(_QWORD *)(a1 + 176);
    v11 = *(_QWORD **)(a1 + 168);
    *(_QWORD *)(a1 + 168) = a1 + 176;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    if (v11[1])
      v12 = (_QWORD *)v11[1];
    else
      v12 = v11;
    if (v12)
    {
      v13 = (_QWORD *)v12[2];
      if (v13)
      {
        v14 = (_QWORD *)*v13;
        if ((_QWORD *)*v13 == v12)
        {
          *v13 = 0;
          while (1)
          {
            v16 = (_QWORD *)v13[1];
            if (!v16)
              break;
            do
            {
              v13 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
        else
        {
          for (v13[1] = 0; v14; v14 = (_QWORD *)v13[1])
          {
            do
            {
              v13 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(v12);
        for (i = (_QWORD *)v13[2]; i; i = (_QWORD *)i[2])
          v13 = i;
        v12 = v13;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsTimeInterval>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsTimeInterval>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsTimeInterval>>>::destroy(v12);
  }
  objc_storeStrong(v8, *(id *)(a1 + 400));
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a1 + 376);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 524))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 524) = 0;
  }

}

void sub_1B7D19088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_currentBucketInterval(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 520))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D19144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 536));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 520) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D194A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40258158D0);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D19654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsTimeInterval>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsTimeInterval>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D198C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  double v11;
  double v12;
  _QWORD v13[2];
  double v14;
  uint64_t v15;
  char v16;
  char v17;

  v7 = *(double *)(a1 + 32) - a6;
  if (v7 >= 0.01)
  {
    v9 = a7 - a6;
    if (v9 - v7 >= 0.01)
    {
      a5 = a5 - v7 / v9 * a5;
      v8 = 1;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = 1;
  }
  *(double *)v13 = a5;
  *(double *)&v13[1] = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  else
  {
    v11 = *(double *)(a1 + 40) - a6;
    if (v11 >= 0.01)
    {
      v12 = a7 - a6;
      if (v12 - v11 >= 0.01)
      {
        a5 = a5 * (v11 / v12);
        a7 = *(double *)(a1 + 40);
      }
    }
    else
    {
      v8 = 0;
    }
    *(double *)v13 = a5;
    v14 = a7;
    v16 = v8;
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)v13, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 520))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsTimeInterval>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D1A58C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D1A62C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI24HDStatisticsTimeIntervalE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTimeInterval>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D07060;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 104) = 0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_WORD *)(a1 + 664) = 1;
  *(_BYTE *)(a1 + 666) = 0;
  *(_BYTE *)(a1 + 668) = 0;
  *(_QWORD *)(a1 + 672) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  return a1;
}

void sub_1B7D1A6F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;
  id *v3;
  void *v5;

  v3 = v2;
  objc_destroyWeak(v3);

  v5 = *(void **)(v1 + 72);
  if (v5)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)v1);
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D07060;
  v2 = *(void **)(a1 + 696);
  if (v2)
  {
    *(_QWORD *)(a1 + 704) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 632);
  if (v3)
  {
    *(_QWORD *)(a1 + 640) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 664) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

}

void sub_1B7D1A7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 672) = v4;
    v3 = v5;
  }

}

void sub_1B7D1A850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 85, a2);
  v7 = a2;
  v4 = a1[85];
  v5 = a1[82];
  a1[82] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[82]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 280) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D1A9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[64];

  if (*(_BYTE *)(a1 + 664))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D1AA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 666))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 665))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 664))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 667))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 704);
      v20 = *(_QWORD *)(a1 + 712);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 696);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 704);
        v35 = *(char **)(a1 + 696);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 696);
        }
        *(_QWORD *)(a1 + 696) = v30;
        *(_QWORD *)(a1 + 704) = v23;
        *(_QWORD *)(a1 + 712) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 704) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7D1AD2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 666))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 666) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 665))
    goto LABEL_5;
  v9 = *(void **)(a1 + 688);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_398);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 688);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 688);
  *(_QWORD *)(a1 + 688) = 0;

  *(_BYTE *)(a1 + 665) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 696);
    *(_QWORD *)(a1 + 712) = 0;
    *(_QWORD *)(a1 + 704) = 0;
    *(_QWORD *)(a1 + 696) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 696);
      v37 = *(__int128 **)(a1 + 704);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 704);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 704) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 696);
  v39 = *(_QWORD *)(a1 + 704);
  *(_QWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 640) != *(_QWORD *)(a1 + 632))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 640) != *(_QWORD *)(a1 + 632));
  }
  *(_BYTE *)(a1 + 666) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 668))
    {
      *(_BYTE *)(a1 + 668) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 666) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D1B424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 666) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 667) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 666))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 666))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 688);
    *(_QWORD *)(a1 + 688) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 665) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 665))
  {
    v8 = *(void **)(a1 + 688);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 688);
      *(_QWORD *)(a1 + 688) = v9;

      v8 = *(void **)(a1 + 688);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D1B720(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 664) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 664) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D1B840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 664) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 664), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 424);
  if (v9 != (_QWORD *)(a1 + 432))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, (int8x16_t *)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 432));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 632);
  for (k = *(int8x16_t **)(a1 + 640); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D1BBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD **i;
  _QWORD **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **j;
  uint64_t **v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  id v40;
  __int128 v41;
  uint64_t v42;
  uint64_t k;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _BYTE *v63;
  _BYTE *v64;
  id v65;
  id v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[512];
  __int128 v71;
  __int128 v72;
  int8x16_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  int8x16_t v77;
  uint64_t v78;
  uint64_t v79[4];
  void *__p;
  char *v81;
  unint64_t v82;
  int v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[2];
  HDQuantitySampleOverlapProcessor *v88;
  __int16 v89;
  _QWORD v90[10];
  uint64_t **v91;
  uint64_t *v92;
  uint64_t v93;
  _BYTE v94[32];
  int v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  int v100;
  __int128 v101;
  __int128 v102;
  int v103;
  _BYTE v104[32];
  int v105;
  void (**v106)(statistics::StatisticsEngine *__hidden);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  _BYTE v113[32];
  unint64_t v114;
  int v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _OWORD v119[2];
  id obj;
  __int16 v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int16 v128;
  _QWORD v129[2];
  char v130;

  v66 = a2;
  *(_BYTE *)(a1 + 664) = objc_msgSend(v66, "decodeBoolForKey:", CFSTR("needs_config"));
  v65 = v66;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v70, 0, -1.79769313e308, 1.79769313e308);
  v71 = 0u;
  v72 = 0u;
  v114 = 0;
  v3 = objc_retainAutorelease(v65);
  PB::Reader::Reader((PB::Reader *)v113, (const unsigned __int8 *)objc_msgSend(v3, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v114));
  v106 = &off_1E6D09A88;
  v107 = 0;
  v111 = 0;
  v109 = 0;
  v110 = 0;
  v112 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v106, (PB::Reader *)v113);
  v68 = v3;
  v4 = v107;
  v69 = v108;
  if (v107)
  {
    v76 = 0;
    memset(v79, 0, sizeof(v79));
    __p = 0;
    v84 = 0u;
    v85 = 0u;
    v86 = 0u;
    memset(v87, 0, 26);
    v82 = 0;
    v81 = 0;
    v83 = 0;
    v88 = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
    v89 = 257;
    memset(v90, 0, 74);
    v93 = 0;
    v92 = 0;
    v91 = &v92;
    memset(v94, 0, sizeof(v94));
    v64 = v94;
    v95 = 1065353216;
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    v99 = 0;
    v100 = 1065353216;
    v101 = 0u;
    v102 = 0u;
    v103 = 1065353216;
    memset(v104, 0, sizeof(v104));
    v63 = v104;
    v105 = 1065353216;
    v73 = vextq_s8(*(int8x16_t *)(v4 + 8), *(int8x16_t *)(v4 + 8), 8uLL);
    v5 = *(_QWORD *)(v4 + 72);
    v74 = *(_QWORD *)(v4 + 64);
    v75 = *(_WORD *)(v4 + 185);
    v77 = vextq_s8(*(int8x16_t *)(v4 + 24), *(int8x16_t *)(v4 + 24), 8uLL);
    v78 = v5;
    v67 = (_QWORD *)v4;
    v6 = *(_QWORD *)(v4 + 80);
    v7 = *(_QWORD *)(v4 + 88);
    if (v6 != v7)
    {
      v8 = v81;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v12 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v14 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v8 >= v82)
        {
          v15 = (char *)__p;
          v16 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)__p) >> 4);
          v17 = v16 + 1;
          if (v16 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v82 - (_QWORD)__p) >> 4) > v17)
            v17 = 0x5555555555555556 * ((uint64_t)(v82 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v18 = 0x555555555555555;
          else
            v18 = v17;
          if (v18)
          {
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v18);
            v8 = v81;
            v15 = (char *)__p;
          }
          else
          {
            v19 = 0;
          }
          v20 = (_QWORD *)(v18 + 48 * v16);
          *v20 = v10;
          v20[1] = v9;
          v20[2] = v11;
          v20[3] = v12;
          *((_WORD *)v20 + 16) = 1;
          *((_BYTE *)v20 + 40) = 0;
          *((_BYTE *)v20 + 41) = v13;
          *((_BYTE *)v20 + 42) = v14;
          v21 = (char *)v20;
          if (v8 != v15)
          {
            do
            {
              v22 = *((_OWORD *)v8 - 3);
              v23 = *((_OWORD *)v8 - 2);
              *(_OWORD *)(v21 - 21) = *(_OWORD *)(v8 - 21);
              *((_OWORD *)v21 - 3) = v22;
              *((_OWORD *)v21 - 2) = v23;
              v21 -= 48;
              v8 -= 48;
            }
            while (v8 != v15);
            v15 = (char *)__p;
          }
          v8 = (char *)(v20 + 6);
          __p = v21;
          v81 = (char *)(v20 + 6);
          v82 = v18 + 48 * v19;
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v8 = v10;
          *((_QWORD *)v8 + 1) = v9;
          *((_QWORD *)v8 + 2) = v11;
          *((_QWORD *)v8 + 3) = v12;
          *((_WORD *)v8 + 16) = 1;
          v8[40] = 0;
          v8[41] = v13;
          v8[42] = v14;
          v8 += 48;
        }
        v81 = v8;
        v6 += 8;
      }
      while (v6 != v7);
    }
    v24 = (_QWORD *)v67[13];
    if (v24)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v115, v24);
      v83 = v115;
      v86 = v118;
      v87[0] = v119[0];
      *(_OWORD *)((char *)v87 + 10) = *(_OWORD *)((char *)v119 + 10);
      v84 = v116;
      v85 = v117;
      objc_storeStrong((id *)&v88, obj);
      v89 = v121;
      v90[0] = v122;
      if (v90[1])
      {
        v90[2] = v90[1];
        operator delete((void *)v90[1]);
      }
      *(_OWORD *)&v90[1] = v123;
      v90[3] = v124;
      v124 = 0;
      v123 = 0uLL;
      v90[4] = v125;
      *(_OWORD *)&v90[5] = v126;
      *(_OWORD *)&v90[7] = v127;
      LOWORD(v90[9]) = v128;

    }
    v26 = (_QWORD **)v67[17];
    for (i = (_QWORD **)v67[18]; v26 != i; ++v26)
    {
      v27 = (uint64_t)*v26;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v115, *v26);
      v28 = *(_QWORD *)(v27 + 144);
      v29 = v92;
      for (j = &v92; ; v29 = *j)
      {
        v31 = j;
        if (!v29)
          break;
        while (1)
        {
          j = (uint64_t **)v29;
          v32 = v29[4];
          if (v32 > v28)
            break;
          if (v32 >= v28)
          {
            v33 = (char *)j;
            goto LABEL_37;
          }
          v29 = j[1];
          if (!v29)
          {
            v31 = j + 1;
            goto LABEL_34;
          }
        }
      }
LABEL_34:
      v33 = (char *)operator new(0xE0uLL);
      v129[0] = v33;
      v129[1] = &v92;
      v130 = 0;
      *((_QWORD *)v33 + 4) = v28;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 136) = 0u;
      *(_OWORD *)(v33 + 152) = 0u;
      *(_OWORD *)(v33 + 168) = 0u;
      *(_OWORD *)(v33 + 184) = 0u;
      *(_OWORD *)(v33 + 200) = 0u;
      *((_QWORD *)v33 + 27) = 0;
      *((_QWORD *)v33 + 16) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1, v63, v64, v65);
      *((_WORD *)v33 + 68) = 257;
      *((_OWORD *)v33 + 9) = 0u;
      *((_OWORD *)v33 + 10) = 0u;
      *((_OWORD *)v33 + 11) = 0u;
      *((_OWORD *)v33 + 12) = 0u;
      *(_OWORD *)(v33 + 202) = 0u;
      v130 = 1;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = j;
      *v31 = (uint64_t *)v33;
      v34 = (uint64_t *)v33;
      if (*v91)
      {
        v91 = (uint64_t **)*v91;
        v34 = *v31;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v92, v34);
      ++v93;
      v129[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v129);
LABEL_37:
      *((_DWORD *)v33 + 10) = v115;
      v35 = v117;
      *((_OWORD *)v33 + 3) = v116;
      v36 = *(_OWORD *)((char *)v119 + 10);
      v38 = v118;
      v37 = v119[0];
      *((_OWORD *)v33 + 4) = v35;
      *((_OWORD *)v33 + 5) = v38;
      *((_OWORD *)v33 + 6) = v37;
      *(_OWORD *)(v33 + 106) = v36;
      objc_storeStrong((id *)v33 + 16, obj);
      v39 = (void *)*((_QWORD *)v33 + 19);
      *((_WORD *)v33 + 68) = v121;
      *((_QWORD *)v33 + 18) = v122;
      if (v39)
      {
        *((_QWORD *)v33 + 20) = v39;
        operator delete(v39);
        *((_QWORD *)v33 + 19) = 0;
        *((_QWORD *)v33 + 20) = 0;
        *((_QWORD *)v33 + 21) = 0;
      }
      *(_OWORD *)(v33 + 152) = v123;
      v40 = obj;
      *((_QWORD *)v33 + 21) = v124;
      *((_QWORD *)v33 + 22) = v125;
      v41 = v127;
      *(_OWORD *)(v33 + 184) = v126;
      *((_WORD *)v33 + 108) = v128;
      v124 = 0;
      v123 = 0uLL;
      *(_OWORD *)(v33 + 200) = v41;

    }
    v42 = v67[5];
    for (k = v67[6]; v42 != k; v42 += 8)
    {
      v45 = *(double *)(*(_QWORD *)v42 + 8);
      v44 = *(double *)(*(_QWORD *)v42 + 16);
      if (v45 >= v44)
        v46 = *(double *)(*(_QWORD *)v42 + 16);
      else
        v46 = *(double *)(*(_QWORD *)v42 + 8);
      if (v44 < v45)
        v44 = *(double *)(*(_QWORD *)v42 + 8);
      HKIntervalMask<double>::_insertInterval(v79, v46, v44);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::operator=((uint64_t)v70, (uint64_t)&v73);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v73);
  }
  v47 = v109;
  v48 = v110;
  if (v109 != v110)
  {
    v49 = *((_QWORD *)&v71 + 1);
    do
    {
      v50 = *(_QWORD *)(*(_QWORD *)v47 + 24);
      v51 = *(_QWORD *)(*(_QWORD *)v47 + 32);
      v52 = *(_QWORD *)(*(_QWORD *)v47 + 8);
      v53 = *(_QWORD *)(*(_QWORD *)v47 + 16);
      if (v49 >= (unint64_t)v72)
      {
        v54 = (void *)v71;
        v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v71) >> 3);
        v56 = v55 + 1;
        if (v55 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v72 - v71) >> 3) > v56)
          v56 = 0x999999999999999ALL * ((uint64_t)(v72 - v71) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v72 - v71) >> 3) >= 0x333333333333333)
          v57 = 0x666666666666666;
        else
          v57 = v56;
        if (v57)
        {
          v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v57);
          v49 = *((_QWORD *)&v71 + 1);
          v54 = (void *)v71;
        }
        else
        {
          v58 = 0;
        }
        v59 = v57 + 40 * v55;
        *(_QWORD *)v59 = v51;
        *(_QWORD *)(v59 + 8) = v50;
        *(_QWORD *)(v59 + 16) = v52;
        *(_QWORD *)(v59 + 24) = v53;
        *(_WORD *)(v59 + 32) = 1;
        v60 = v59;
        if ((void *)v49 != v54)
        {
          do
          {
            v61 = *(_OWORD *)(v49 - 40);
            v62 = *(_OWORD *)(v49 - 24);
            *(_WORD *)(v60 - 8) = *(_WORD *)(v49 - 8);
            *(_OWORD *)(v60 - 24) = v62;
            *(_OWORD *)(v60 - 40) = v61;
            v60 -= 40;
            v49 -= 40;
          }
          while ((void *)v49 != v54);
          v54 = (void *)v71;
        }
        *(_QWORD *)&v71 = v60;
        v49 = v59 + 40;
        *((_QWORD *)&v71 + 1) = v59 + 40;
        *(_QWORD *)&v72 = v57 + 40 * v58;
        if (v54)
          operator delete(v54);
      }
      else
      {
        *(_QWORD *)v49 = v51;
        *(_QWORD *)(v49 + 8) = v50;
        *(_QWORD *)(v49 + 16) = v52;
        *(_QWORD *)(v49 + 24) = v53;
        *(_WORD *)(v49 + 32) = 1;
        v49 += 40;
      }
      *((_QWORD *)&v71 + 1) = v49;
      v47 += 8;
    }
    while (v47 != v48);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v106);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v69);
  if ((_QWORD)v71)
  {
    *((_QWORD *)&v71 + 1) = v71;
    operator delete((void *)v71);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v70);

}

void sub_1B7D1C458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a10);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a2);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x420]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3F8]);
  v11 = (void *)STACK[0x3E0];
  if (STACK[0x3E0])
  {
    STACK[0x3E8] = (unint64_t)v11;
    operator delete(v11);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a3);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy((_QWORD *)STACK[0x3A8]);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsRelative((uint64_t)&STACK[0x2E8]);
  v12 = (void *)STACK[0x2D0];
  if (STACK[0x2D0])
  {
    STACK[0x2D8] = (unint64_t)v12;
    operator delete(v12);
  }
  objc_destroyWeak((id *)&STACK[0x2C8]);
  v13 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v13;
    operator delete(v13);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x470]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 208) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *(_WORD *)(a1 + 216) = 257;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 504) = 1065353216;
  return a1;
}

void sub_1B7D1C678(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;
  void **v3;
  id *v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;

  v6 = v3;
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 104) = v8;
    operator delete(v8);
  }
  objc_destroyWeak(v2);
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 72) = v9;
    operator delete(v9);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::~HDStatisticsCombined(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 520);
  if (v2)
  {
    *(_QWORD *)(a1 + 528) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 472);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 432);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 392);
  v2 = *(void **)(a1 + 368);
  if (v2)
  {
    *(_QWORD *)(a1 + 376) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 328);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 312));
  v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(_QWORD *)(a1 + 240) = v3;
    operator delete(v3);
  }

  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

uint64_t HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsRelative(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }

}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[512];
  uint64_t v18;
  _BYTE v19[512];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  id v27;
  char v28[448];
  uint64_t v29;

  v29 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v27, *(id *)(a1 + 680));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 664) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7D1CB08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 65), (__n128 *)(a2 + 520));
  v4 = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a2 + 544) = 0;
  v5 = (void *)a1[68];
  a1[68] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t **v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD v34[2];
  char v35;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(a1 + 128), (const HDStatisticsNoiseLevel *)(a2 + 128));
  v12 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = v12;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 232), *(const void **)(a2 + 232), *(_QWORD *)(a2 + 240), (uint64_t)(*(_QWORD *)(a2 + 240) - *(_QWORD *)(a2 + 232)) >> 4);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v13 = *(_OWORD *)(a2 + 280);
  v14 = *(_QWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v13;
  v15 = (uint64_t **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 296) = v14;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  v16 = *(_QWORD **)(a2 + 304);
  if (v16 != (_QWORD *)(a2 + 312))
  {
    do
    {
      v17 = *v15;
      v18 = (uint64_t *)(a1 + 312);
      if (*(uint64_t ***)(a1 + 304) == v15)
        goto LABEL_11;
      v19 = *v15;
      v20 = (uint64_t *)(a1 + 312);
      if (v17)
      {
        do
        {
          v18 = v19;
          v19 = (uint64_t *)v19[1];
        }
        while (v19);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v20[2];
          v21 = *v18 == (_QWORD)v20;
          v20 = v18;
        }
        while (v21);
      }
      v22 = v16[4];
      if (v18[4] < v22)
      {
LABEL_11:
        if (v17)
          v23 = (uint64_t **)v18;
        else
          v23 = (uint64_t **)(a1 + 312);
        if (v17)
          v24 = (uint64_t **)(v18 + 1);
        else
          v24 = (uint64_t **)(a1 + 312);
        if (*v24)
          goto LABEL_28;
      }
      else
      {
        v24 = (uint64_t **)(a1 + 312);
        v23 = (uint64_t **)(a1 + 312);
        if (v17)
        {
          v25 = *v15;
          while (1)
          {
            while (1)
            {
              v23 = (uint64_t **)v25;
              v26 = v25[4];
              if (v26 <= v22)
                break;
              v25 = *v23;
              v24 = v23;
              if (!*v23)
                goto LABEL_27;
            }
            if (v26 >= v22)
              goto LABEL_28;
            v25 = v23[1];
            if (!v25)
            {
              v24 = v23 + 1;
              break;
            }
          }
        }
      }
LABEL_27:
      v27 = (char *)operator new(0xE0uLL);
      v34[0] = v27;
      v34[1] = a1 + 312;
      v35 = 0;
      *((_QWORD *)v27 + 4) = v16[4];
      *((_DWORD *)v27 + 10) = *((_DWORD *)v16 + 10);
      HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(v27 + 48), (const HDStatisticsNoiseLevel *)(v16 + 6));
      v28 = v16[18];
      *((_QWORD *)v27 + 19) = 0;
      *((_QWORD *)v27 + 18) = v28;
      *((_QWORD *)v27 + 20) = 0;
      *((_QWORD *)v27 + 21) = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)v27 + 19, (const void *)v16[19], v16[20], (uint64_t)(v16[20] - v16[19]) >> 4);
      *((_QWORD *)v27 + 22) = v16[22];
      v29 = *(_OWORD *)(v16 + 23);
      v30 = *(_OWORD *)(v16 + 25);
      *((_QWORD *)v27 + 27) = v16[27];
      *(_OWORD *)(v27 + 200) = v30;
      *(_OWORD *)(v27 + 184) = v29;
      v35 = 1;
      std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 304), (uint64_t)v23, v24, (uint64_t *)v27);
      v34[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v34);
LABEL_28:
      v31 = (_QWORD *)v16[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v16[2];
          v21 = *v32 == (_QWORD)v16;
          v16 = v32;
        }
        while (!v21);
      }
      v16 = v32;
    }
    while (v32 != (_QWORD *)(a2 + 312));
  }
  std::unordered_set<long long>::unordered_set(a1 + 328, a2 + 328);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 368), *(const void **)(a2 + 368), *(_QWORD *)(a2 + 376), (uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 392, a2 + 392);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 432, a2 + 432);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 472, a2 + 472);
  return a1;
}

void sub_1B7D1CF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, id *location, void **a13, char a14)
{
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  void *v22;
  void *v23;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v19);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v18);
  v21 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v14 + 376) = v21;
    operator delete(v21);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(*v15);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsRelative(a10);
  v22 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v14 + 104) = v22;
    operator delete(v22);
  }
  objc_destroyWeak(location);
  v23 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v14 + 72) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

void HDStatisticsNoiseLevel::HDStatisticsNoiseLevel(HDStatisticsNoiseLevel *this, const HDStatisticsNoiseLevel *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  HDQuantitySampleOverlapProcessor *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _BYTE v12[5152];

  v2 = MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v5 = v2;
  *(_OWORD *)(v2 + 58) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 80) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *(_WORD *)(v5 + 88) = 257;
  *(_OWORD *)v5 = *(_OWORD *)v4;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v4 + 16);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v4 + 32);
  v6 = *(_OWORD *)(v4 + 40);
  v7 = *(_OWORD *)(v4 + 56);
  *(_WORD *)(v5 + 72) = *(_WORD *)(v4 + 72);
  *(_OWORD *)(v5 + 56) = v7;
  *(_OWORD *)(v5 + 40) = v6;
  *(_BYTE *)(v5 + 88) = *(_BYTE *)(v4 + 88);
  v8 = [HDQuantitySampleOverlapProcessor alloc];
  v9 = *(void **)(v4 + 80);
  if (v9)
    objc_msgSend(v9, "exportCurrentState");
  else
    bzero(v12, 0x1420uLL);
  v10 = -[HDQuantitySampleOverlapProcessor initWithState:](v8, "initWithState:", v12);
  v11 = *(void **)(v5 + 80);
  *(_QWORD *)(v5 + 80) = v10;

}

void sub_1B7D1D110(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  v10 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 160);
  v13 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 186) = *(_OWORD *)(a2 + 186);
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 144) = v11;
  objc_storeStrong((id *)(a1 + 208), *(id *)(a2 + 208));
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 232, (__n128 *)(a2 + 232));
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v14 = *(_OWORD *)(a2 + 264);
  v15 = *(_OWORD *)(a2 + 280);
  *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
  *(_OWORD *)(a1 + 264) = v14;
  *(_OWORD *)(a1 + 280) = v15;
  v16 = a1 + 312;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(*(_QWORD **)(a1 + 312));
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v17 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 312) = v17;
  v18 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 320) = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(a2 + 304) = a2 + 312;
    *(_QWORD *)(a2 + 312) = 0;
    *(_QWORD *)(a2 + 320) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 304) = v16;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 328, (uint64_t *)(a2 + 328));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 368, (__n128 *)(a2 + 368));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 392, (uint64_t *)(a2 + 392));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 432, (uint64_t *)(a2 + 432));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 472, (uint64_t *)(a2 + 472));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  double v3;
  id v4;
  double *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  __n128 v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  void *v35;
  __n128 v36;
  id v37;
  id v38;
  double i;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  void *v48;
  void *v49;
  double *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  __n128 v57;
  const HDStatisticsNoiseLevel *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  double v63;
  void *v64;
  void *v65;
  void *v66;
  double v67;
  double v68;
  void *v69;
  void *v70;
  id v71;
  id v72;
  uint64_t **j;
  uint64_t *v74;
  const HDStatisticsNoiseLevel *v75;
  double v76;
  double v77;
  double v78;
  void *v79;
  void *v80;
  void *v81;
  double v82;
  double v83;
  void *v84;
  void *v85;
  void *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  void *v95;
  int v96;
  void *v97;
  void *v98;
  int v99;
  id v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  id v107;
  id v108;
  _BYTE v109[16];
  uint64_t **v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  id v118;
  id v119;
  void *__p;
  void *v121;
  _QWORD v122[3];
  _QWORD *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  _QWORD v128[3];
  _QWORD *v129;
  double v130;
  double v131;
  double v132;
  double *v133;
  uint64_t v134;
  double v135;
  double v136;
  double v137;
  id v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = a2 + 5;
  if (v3 != -1.79769313e308)
    v5 = a2;
  v6 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  v105 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v6, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(v105 + 368);
      v16 = *(uint64_t **)(v105 + 376);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v20 = (void *)objc_msgSend(v14, "copy");
      objc_msgSend(v12, "_setSources:", v20);

    }
  }

  v122[0] = &off_1E6D07250;
  v123 = v122;
  v21 = v12;
  v22 = (uint64_t)v123;
  if (!v123)
    goto LABEL_22;
  if (v123 != v122)
  {
    v22 = (*(uint64_t (**)(void))(*v123 + 16))();
LABEL_22:
    v129 = (_QWORD *)v22;
    goto LABEL_24;
  }
  v129 = v128;
  (*(void (**)(uint64_t, _QWORD *))(v122[0] + 24))((uint64_t)v122, v128);
LABEL_24:
  v133 = 0;
  v23 = operator new(0x28uLL);
  *v23 = &off_1E6D07130;
  v24 = v23 + 1;
  v25 = (uint64_t)v129;
  if (!v129)
  {
LABEL_27:
    v23[4] = v25;
    goto LABEL_29;
  }
  if (v129 != v128)
  {
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v129 + 16))(v129, v24);
    goto LABEL_27;
  }
  v23[4] = v24;
  (*(void (**)(_QWORD *))(v128[0] + 24))(v128);
LABEL_29:
  v133 = (double *)v23;
  v107 = v21;
  v26 = (void *)0x1E0CB6000;
  v27 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)&v111, v105);
  if (!v133)
    std::__throw_bad_function_call[abi:ne180100]();
  v30 = (*(uint64_t (**)(double *, double *, __n128))(*(_QWORD *)v133 + 48))(v133, &v111, v29);
  v31 = *(double **)(v30 + 8);
  v32 = 0.0;
  while (v31 != *(double **)(v30 + 16))
  {
    v34 = *v31;
    v33 = v31[1];
    v31 += 2;
    v32 = v32 + v33 - v34;
  }
  objc_msgSend(v27, "quantityWithUnit:doubleValue:", v28, v32 + *(double *)(v30 + 32));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v107, "setDuration:", v35);

  if (__p)
  {
    v121 = __p;
    operator delete(__p);
  }

  v36 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)&v111, v105);
  if (!v133)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v107, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(double *, double *, __n128))(*(_QWORD *)v133 + 48))(v133, &v111, v36));
  if (__p)
  {
    v121 = __p;
    operator delete(__p);
  }

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v37 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v38 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)&v111, v105);
    for (i = v113; i != 0.0; i = **(double **)&i)
    {
      v40 = *(id *)(*(_QWORD *)&i + 16);
      v41 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v133)
        std::__throw_bad_function_call[abi:ne180100]();
      v43 = (*(uint64_t (**)(double *, uint64_t))(*(_QWORD *)v133 + 48))(v133, *(_QWORD *)&i + 24);
      v44 = *(double **)(v43 + 8);
      v45 = 0.0;
      while (v44 != *(double **)(v43 + 16))
      {
        v47 = *v44;
        v46 = v44[1];
        v44 += 2;
        v45 = v45 + v46 - v47;
      }
      objc_msgSend(v41, "quantityWithUnit:doubleValue:", v42, v45 + *(double *)(v43 + 32));
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "setObject:forKeyedSubscript:", v48, v40);

      if (!v133)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(double *, uint64_t))(*(_QWORD *)v133 + 48))(v133, *(_QWORD *)&i + 24));
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "setObject:forKeyedSubscript:", v49, v40);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)&v111);
    objc_msgSend(v107, "setDurationBySource:", v37);
    objc_msgSend(v107, "setDataCountBySource:", v38);

  }
  v50 = v133;
  if (v133 == &v130)
  {
    v51 = 4;
    v50 = &v130;
  }
  else
  {
    if (!v133)
      goto LABEL_52;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_52:
  v52 = v129;
  if (v129 == v128)
  {
    v53 = 4;
    v52 = v128;
  }
  else
  {
    if (!v129)
      goto LABEL_57;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_57:
  v54 = (uint64_t)v123;
  if (!v123)
  {
LABEL_60:
    v125 = (_QWORD *)v54;
    goto LABEL_62;
  }
  if (v123 != v122)
  {
    v54 = (*(uint64_t (**)(void))(*v123 + 16))();
    goto LABEL_60;
  }
  v125 = v124;
  (*(void (**)(uint64_t, _QWORD *))(v122[0] + 24))((uint64_t)v122, v124);
LABEL_62:
  v127 = 0;
  v55 = operator new(0x28uLL);
  *v55 = &off_1E6D071C0;
  v56 = (uint64_t)v125;
  if (!v125)
  {
LABEL_65:
    v55[4] = v56;
    goto LABEL_67;
  }
  if (v125 != v124)
  {
    v56 = (*(uint64_t (**)(void))(*v125 + 16))();
    goto LABEL_65;
  }
  v55[4] = v55 + 1;
  (*(void (**)(_QWORD *))(v124[0] + 24))(v124);
LABEL_67:
  v127 = v55;
  v108 = v107;
  v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)&v111, v105);
  if (!v127)
    std::__throw_bad_function_call[abi:ne180100]();
  v58 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(_BYTE *, double *, __n128))(*(_QWORD *)v127 + 48))(v127, &v111, v57);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v130, v58);
  if (__p)
  {
    v121 = __p;
    operator delete(__p);
  }

  HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v130);
  v59 = *(_QWORD *)(a1 + 24);
  v60 = _HKStatisticsOptionBaselineRelativeQuantities();
  v61 = *(void **)(a1 + 16);
  if ((v60 & v59) != 0)
    objc_msgSend(v61, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v61, "canonicalUnit");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v59 & 2) != 0)
  {
    v63 = 0.0;
    if (v131 > 0.0 && v130 > 0.0)
      v63 = log10(v130 / v131) * 10.0;
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v62, v63);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v108, "setAverageQuantity:", v64);

  }
  if ((v59 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v62, *(double *)&v133);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v108, "setMinimumQuantity:", v65);

  }
  if ((v59 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v62, v132);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v108, "setMaximumQuantity:", v66);

  }
  if ((v59 & 0x20) != 0)
  {
    v67 = v136;
    v68 = v137;
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v62, v135);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v108, "setMostRecentQuantity:", v69);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v67, v68);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v108, "setMostRecentQuantityDateInterval:", v70);

  }
  objc_msgSend(v108, "setDataCount:", v134);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((v59 & 2) != 0)
      v104 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    else
      v104 = 0;
    if ((v59 & 4) != 0)
      v103 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    else
      v103 = 0;
    if ((v59 & 8) != 0)
      v102 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    else
      v102 = 0;
    if ((v59 & 0x20) != 0)
    {
      v101 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v71 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    }
    else
    {
      v71 = 0;
      v101 = 0;
    }
    v72 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v109, v105);
    for (j = v110; j; j = (uint64_t **)*j)
    {
      v74 = j[2];
      if (!v127)
        std::__throw_bad_function_call[abi:ne180100]();
      v75 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v127 + 48))(v127, (uint64_t *)j + 3);
      HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v111, v75);
      HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v111);
      if ((v59 & 2) != 0)
      {
        v77 = v112;
        v78 = 0.0;
        if (v112 > 0.0)
        {
          v76 = v111;
          if (v111 > 0.0)
            v78 = log10(v111 / v112) * 10.0;
        }
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v62, v78, v77, v76);
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v104, "setObject:forKeyedSubscript:", v79, v74);

      }
      if ((v59 & 4) != 0)
      {
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v62, v114);
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v103, "setObject:forKeyedSubscript:", v80, v74);

      }
      if ((v59 & 8) != 0)
      {
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v62, v113);
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v102, "setObject:forKeyedSubscript:", v81, v74);

      }
      if ((v59 & 0x20) != 0)
      {
        v82 = v116;
        v83 = v117;
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v62, v115);
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v101, "setObject:forKeyedSubscript:", v84, v74);

        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v82, v83);
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v71, "setObject:forKeyedSubscript:", v85, v74);

      }
      if (!v127)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v127 + 48))(v127, (uint64_t *)j + 3) + 32));
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v72, "setObject:forKeyedSubscript:", v86, v74);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v109);
    if ((v59 & 2) != 0)
      objc_msgSend(v108, "setAverageQuantityBySource:", v104);
    if ((v59 & 4) != 0)
      objc_msgSend(v108, "setMinimumQuantityBySource:", v103);
    if ((v59 & 8) != 0)
      objc_msgSend(v108, "setMaximumQuantityBySource:", v102);
    if ((v59 & 0x20) != 0)
    {
      objc_msgSend(v108, "setMostRecentQuantityBySource:", v101);
      objc_msgSend(v108, "setMostRecentQuantityDateIntervalBySource:", v71);
    }
    objc_msgSend(v108, "setDataCountBySource:", v72);

  }
  v87 = v127;
  if (v127 == v126)
  {
    v88 = 4;
    v87 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_126;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_126:
  v89 = v125;
  if (v125 == v124)
  {
    v90 = 4;
    v89 = v124;
  }
  else
  {
    if (!v125)
      goto LABEL_131;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_131:

  v91 = v123;
  if (v123 == v122)
  {
    v92 = 4;
    v91 = v122;
    goto LABEL_135;
  }
  if (v123)
  {
    v92 = 5;
LABEL_135:
    (*(void (**)(void))(*v91 + 8 * v92))();
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v108, "averageQuantity");
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  if (v94)
  {
    objc_msgSend(v108, "averageQuantity");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v62, "isCompatibleWithUnit:", v93) & 1) == 0)
    {

LABEL_150:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v93);
      goto LABEL_151;
    }
  }
  objc_msgSend(v108, "minimumQuantity");
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  if (v95)
  {
    objc_msgSend(v108, "minimumQuantity");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v26, "isCompatibleWithUnit:", v93))
    {
      v96 = 1;
      goto LABEL_144;
    }
  }
  objc_msgSend(v108, "maximumQuantity");
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  if (v97)
  {
    objc_msgSend(v108, "maximumQuantity");
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    v99 = objc_msgSend(v98, "isCompatibleWithUnit:", v93);

    v96 = v99 ^ 1;
    if (v95)
      goto LABEL_144;
  }
  else
  {
    v96 = 0;
    if (v95)
    {
LABEL_144:

      if (v94)
        goto LABEL_145;
      goto LABEL_149;
    }
  }
  if (v94)
  {
LABEL_145:

    if ((v96 & 1) == 0)
      goto LABEL_151;
    goto LABEL_150;
  }
LABEL_149:

  if (v96)
    goto LABEL_150;
LABEL_151:

  return v108;
}

void sub_1B7D1E024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char *a50,char a51,uint64_t a52,uint64_t a53,char *a54,char a55,uint64_t a56,uint64_t a57,char *a58)
{
  void *v58;
  uint64_t v59;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;

  v61 = a58;
  if (a58 == &a55)
  {
    v62 = 4;
    v61 = &a55;
  }
  else
  {
    if (!a58)
      goto LABEL_6;
    v62 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v61 + 8 * v62))();
LABEL_6:
  v63 = a54;
  if (a54 == &a51)
  {
    v64 = 4;
    v63 = &a51;
  }
  else
  {
    if (!a54)
      goto LABEL_11;
    v64 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v63 + 8 * v64))();
LABEL_11:

  v65 = a50;
  if (a50 == &a47)
  {
    v66 = 4;
    v65 = &a47;
  }
  else
  {
    if (!a50)
      goto LABEL_16;
    v66 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v65 + 8 * v66))();
LABEL_16:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 352);
  v2 = *(_QWORD *)(a1 + 368);
  if (v1 != (*(_QWORD *)(a1 + 376) - v2) >> 3)
  {
    v4 = (void **)(a1 + 368);
    *(_QWORD *)(a1 + 376) = v2;
    std::vector<long long>::reserve((void **)(a1 + 368), v1);
    v5 = *(_QWORD **)(a1 + 344);
    if (v5)
    {
      v6 = *(char **)(a1 + 376);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 384);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 368);
            v6 = *(char **)(a1 + 376);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 368) = v16;
          *(_QWORD *)(a1 + 376) = v9;
          *(_QWORD *)(a1 + 384) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 376) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D1E5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double *v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  int64_t v11;
  char v12;
  char v13;
  BOOL v14;
  BOOL v15;
  double v16;
  char v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  char *v39;
  uint64_t v40;
  double *v41;
  double *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  id WeakRetained;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  unint64_t v55;
  uint64_t *v56;
  __int128 v57;
  double *v58;
  unint64_t v59;
  char v60;
  double *v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  _OWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  double var2;
  _BOOL4 v74;
  double v75;
  double var0;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  double *v80;
  double *v81;
  _OWORD *v82;
  __int128 v83;
  __int128 v84;
  double *v85;
  int v86;
  unint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  unint64_t v92;
  uint64_t *v93;
  BOOL v94;
  unint64_t v95;
  double *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  BOOL v109;
  double v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  double **v114;
  id *location;
  uint64_t *v116;
  int64_t v117;
  id v118;
  _QWORD *v119;
  char v120;
  int64_t var3;
  BOOL var5;
  int v123;
  double **v124;
  uint64_t v125;
  HDRawQuantitySample v126;
  __int128 v127;
  __int128 v128;
  __int16 v129;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v124 = (double **)(a1 + 96);
    v119 = (_QWORD *)(a1 + 64);
    v116 = (uint64_t *)(a1 + 120);
    v114 = (double **)(a1 + 232);
    location = (id *)(a1 + 88);
    v113 = (_QWORD *)(a1 + 312);
    do
    {
      v6 = *(double **)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          v27 = a2;
          v28 = a2;
          v29 = v5;
          v30 = *(_QWORD *)(a1 + 96);
          if (v6 != (double *)v7)
          {
            do
            {
              v31 = *(double *)(v30 + 8);
              v32 = *(double *)(v30 + 16);
              if (v31 > v29 && v31 < v28)
                v28 = *(double *)(v30 + 8);
              if (v32 > v5)
                v34 = *(double *)(v30 + 16);
              else
                v34 = v27;
              if (v32 < v27)
              {
                v29 = v5;
                v27 = v34;
              }
              v30 += 48;
            }
            while ((__int128 *)v30 != v7);
          }
          if (v27 >= v28)
            v35 = v28;
          else
            v35 = v27;
          v36 = *(double *)(a1 + 16);
          if (v36 > 0.0)
          {
            v37 = v36 * floor(v35 / v36);
            v38 = v36 * floor((v36 + v5) / v36);
            if (v37 >= v38)
              v35 = v37;
            else
              v35 = v38;
          }
          *v124 = 0;
          v124[1] = 0;
          v124[2] = 0;
          if (v6 != (double *)v7)
          {
            if (v8 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            v42 = *(double **)(a1 + 96);
            v41 = *(double **)(a1 + 104);
            v43 = v39;
            if (v41 != v42)
            {
              do
              {
                v44 = *((_OWORD *)v41 - 3);
                v45 = *((_OWORD *)v41 - 2);
                *(_OWORD *)(v43 - 21) = *(_OWORD *)((char *)v41 - 21);
                *((_OWORD *)v43 - 3) = v44;
                *((_OWORD *)v43 - 2) = v45;
                v43 -= 48;
                v41 -= 6;
              }
              while (v41 != v42);
              v41 = *v124;
            }
            *(_QWORD *)(a1 + 96) = v43;
            *(_QWORD *)(a1 + 104) = v39;
            *(_QWORD *)(a1 + 112) = &v39[48 * v40];
            if (v41)
              operator delete(v41);
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v126.var0 = a1;
            v47 = 126 - 2 * __clz(v8);
            if (v6 == (double *)v7)
              v48 = 0;
            else
              v48 = v47;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>((uint64_t)v6, v7, (uint64_t)&v126, v48, 1);
          }
          else
          {
            v59 = 126 - 2 * __clz(v8);
            if (v6 == (double *)v7)
              v48 = 0;
            else
              v48 = v59;
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>((uint64_t)v6, v7, v48, 1);
          if (*(_BYTE *)(a1 + 25))
            v118 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v118 = 0;
          if (v6 == (double *)v7)
          {
LABEL_155:
            *(double *)(a1 + 256) = HKIntervalMask<double>::removeIntervalsBefore(v114, v35) + *(double *)(a1 + 256);
            v106 = *(_QWORD **)(a1 + 304);
            if (v106 != v113)
            {
              do
              {
                *((double *)v106 + 22) = HKIntervalMask<double>::removeIntervalsBefore((double **)v106 + 19, v35)
                                       + *((double *)v106 + 22);
                v107 = (_QWORD *)v106[1];
                if (v107)
                {
                  do
                  {
                    v108 = v107;
                    v107 = (_QWORD *)*v107;
                  }
                  while (v107);
                }
                else
                {
                  do
                  {
                    v108 = (_QWORD *)v106[2];
                    v109 = *v108 == (_QWORD)v106;
                    v106 = v108;
                  }
                  while (!v109);
                }
                v106 = v108;
              }
              while (v108 != v113);
            }
            *(double *)(a1 + 56) = v35;

            if (v6)
              operator delete(v6);
            goto LABEL_164;
          }
          v117 = 0;
          v60 = 0;
          v61 = v6;
          while (2)
          {
            v62 = *((_OWORD *)v61 + 1);
            *(_OWORD *)&v126.var0 = *(_OWORD *)v61;
            *(_OWORD *)&v126.var2 = v62;
            *(double *)&v126.var4 = v61[4];
            if (!v126.var4 || v126.var1 > v35)
            {
LABEL_96:
              v63 = *(_OWORD **)(a1 + 104);
              v64 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v63 < v64)
              {
                v65 = *(_OWORD *)v61;
                v66 = *((_OWORD *)v61 + 2);
                v63[1] = *((_OWORD *)v61 + 1);
                v63[2] = v66;
                *v63 = v65;
                v67 = v63 + 3;
                goto LABEL_116;
              }
              v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)*v124) >> 4);
              v69 = v68 + 1;
              if (v68 + 1 > 0x555555555555555)
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (_QWORD)*v124) >> 4);
              if (2 * v70 > v69)
                v69 = 2 * v70;
              if (v70 >= 0x2AAAAAAAAAAAAAALL)
                v71 = 0x555555555555555;
              else
                v71 = v69;
              if (v71)
                v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v71);
              else
                v72 = 0;
              v77 = (_OWORD *)(v71 + 48 * v68);
              v78 = *(_OWORD *)v61;
              v79 = *((_OWORD *)v61 + 2);
              v77[1] = *((_OWORD *)v61 + 1);
              v77[2] = v79;
              *v77 = v78;
              v81 = *(double **)(a1 + 96);
              v80 = *(double **)(a1 + 104);
              v82 = v77;
              if (v80 != v81)
              {
                do
                {
                  v83 = *((_OWORD *)v80 - 3);
                  v84 = *((_OWORD *)v80 - 2);
                  *(_OWORD *)((char *)v82 - 21) = *(_OWORD *)((char *)v80 - 21);
                  *(v82 - 3) = v83;
                  *(v82 - 2) = v84;
                  v82 -= 3;
                  v80 -= 6;
                }
                while (v80 != v81);
                v80 = *v124;
              }
              v67 = v77 + 3;
              *(_QWORD *)(a1 + 96) = v82;
              *(_QWORD *)(a1 + 104) = v77 + 3;
              *(_QWORD *)(a1 + 112) = v71 + 48 * v72;
              if (v80)
              {
                v85 = v80;
                goto LABEL_115;
              }
              goto LABEL_116;
            }
            var2 = v126.var2;
            if (v126.var2 >= v35)
            {
              var0 = v126.var0;
              v126.var2 = v35;
              v74 = var2 > v35;
              v126.var4 = v126.var1 < v35;
              if (v126.var1 >= v35)
                goto LABEL_96;
              var3 = v126.var3;
              var5 = v126.var5;
              v75 = v35;
            }
            else
            {
              v126.var4 = v126.var2 > v126.var1;
              if (v126.var2 <= v126.var1)
                goto LABEL_96;
              v74 = 0;
              var3 = 0;
              var5 = 0;
              var2 = 0.0;
              v75 = 0.0;
              var0 = 0.0;
            }
            HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v126, v119);
            v86 = *((unsigned __int8 *)v61 + 42);
            v123 = *((unsigned __int8 *)v61 + 41);
            v120 = *((_BYTE *)v61 + 40);
            if (!v126.var4)
              goto LABEL_138;
            if ((v60 & 1) != 0)
            {
              v87 = v126.var3;
              if (v117 == v126.var3 || *(_BYTE *)(a1 + 24))
              {
                HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(v116, &v126, v86 == 0);
                v86 = 1;
              }
            }
            else
            {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(v116, &v126, v86 == 0);
              v86 = 1;
              v87 = v126.var3;
              v117 = v126.var3;
            }
            if (!*(_BYTE *)(a1 + 25))
              goto LABEL_137;
            HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, v87);
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v88)
              goto LABEL_136;
            objc_msgSend(v118, "objectForKeyedSubscript:", v88);
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            v90 = v89;
            if (v89)
            {
              if (objc_msgSend(v89, "longLongValue") != v87 && !*(_BYTE *)(a1 + 24))
              {
LABEL_135:

LABEL_136:
LABEL_137:
                v60 = 1;
LABEL_138:
                if (v74)
                {
                  v94 = v86 != 0;
                  v96 = *(double **)(a1 + 104);
                  v95 = *(_QWORD *)(a1 + 112);
                  if ((unint64_t)v96 >= v95)
                  {
                    v85 = *v124;
                    v97 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)*v124) >> 4);
                    v98 = v97 + 1;
                    if (v97 + 1 > 0x555555555555555)
                      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                    v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - (_QWORD)v85) >> 4);
                    if (2 * v99 > v98)
                      v98 = 2 * v99;
                    if (v99 >= 0x2AAAAAAAAAAAAAALL)
                      v100 = 0x555555555555555;
                    else
                      v100 = v98;
                    if (v100)
                    {
                      v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v100);
                      v85 = *(double **)(a1 + 96);
                      v96 = *(double **)(a1 + 104);
                    }
                    else
                    {
                      v101 = 0;
                    }
                    v102 = v100 + 48 * v97;
                    *(double *)v102 = var0;
                    *(double *)(v102 + 8) = v75;
                    *(double *)(v102 + 16) = var2;
                    *(_QWORD *)(v102 + 24) = var3;
                    *(_BYTE *)(v102 + 32) = v74;
                    *(_BYTE *)(v102 + 33) = var5;
                    *(_BYTE *)(v102 + 40) = v120;
                    *(_BYTE *)(v102 + 41) = v123;
                    *(_BYTE *)(v102 + 42) = v94;
                    v103 = v102;
                    if (v96 != v85)
                    {
                      do
                      {
                        v104 = *((_OWORD *)v96 - 3);
                        v105 = *((_OWORD *)v96 - 2);
                        *(_OWORD *)(v103 - 21) = *(_OWORD *)((char *)v96 - 21);
                        *(_OWORD *)(v103 - 48) = v104;
                        *(_OWORD *)(v103 - 32) = v105;
                        v103 -= 48;
                        v96 -= 6;
                      }
                      while (v96 != v85);
                      v85 = *v124;
                    }
                    v67 = (_OWORD *)(v102 + 48);
                    *(_QWORD *)(a1 + 96) = v103;
                    *(_QWORD *)(a1 + 104) = v102 + 48;
                    *(_QWORD *)(a1 + 112) = v100 + 48 * v101;
                    if (v85)
LABEL_115:
                      operator delete(v85);
                  }
                  else
                  {
                    *v96 = var0;
                    v96[1] = v75;
                    v96[2] = var2;
                    *((_QWORD *)v96 + 3) = var3;
                    *((_BYTE *)v96 + 32) = v74;
                    *((_BYTE *)v96 + 33) = var5;
                    *((_BYTE *)v96 + 40) = v120;
                    *((_BYTE *)v96 + 41) = v123;
                    v67 = v96 + 6;
                    *((_BYTE *)v96 + 42) = v94;
                  }
LABEL_116:
                  *(_QWORD *)(a1 + 104) = v67;
                }
                v61 += 6;
                if (v61 == (double *)v7)
                  goto LABEL_155;
                continue;
              }
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v87);
              v91 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v118, "setObject:forKeyedSubscript:", v91, v88);

            }
            break;
          }
          v92 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v87);
          v93 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v92);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(v93, &v126, v123 == 0);
          LOBYTE(v123) = 1;
          goto LABEL_135;
        }
        v9 = v6[1];
        v10 = v6[2];
        v11 = *((_QWORD *)v6 + 3);
        v12 = *((_BYTE *)v6 + 32);
        v13 = *((_BYTE *)v6 + 33);
        if (v12)
        {
          v14 = v9 < a2;
          v15 = v10 > a2;
          if (v10 < a2)
            v16 = v6[2];
          else
            v16 = a2;
          if (v10 >= a2)
          {
            v17 = *((_BYTE *)v6 + 33);
          }
          else
          {
            v14 = v10 > v9;
            v17 = 0;
          }
          if (v10 < a2)
            v18 = 0.0;
          else
            v18 = *v6;
          if (v10 < a2)
            v19 = 0.0;
          else
            v19 = a2;
          if (v10 < a2)
            v20 = 0.0;
          else
            v20 = v6[2];
          if (v10 < a2)
            v21 = 0;
          else
            v21 = *((_QWORD *)v6 + 3);
          if (v10 < a2)
            v15 = 0;
          v22 = v10 > v9;
          if (v9 <= a2)
          {
            v10 = v16;
            v23 = v14;
          }
          else
          {
            v20 = v6[2];
            v23 = 0;
          }
          if (v9 > a2)
            v12 = *((_BYTE *)v6 + 33);
          else
            v12 = v17;
          if (v9 > a2)
            v24 = *v6;
          else
            v24 = v18;
          if (v9 > a2)
            v25 = v6[1];
          else
            v25 = v19;
          if (v9 > a2)
            v26 = *((_QWORD *)v6 + 3);
          else
            v26 = v21;
          if (v9 > a2)
            v15 = v22;
        }
        else
        {
          v23 = 0;
          v26 = 0;
          v15 = 0;
          v24 = 0.0;
          v25 = 0.0;
          v20 = 0.0;
        }
        v49 = *((unsigned __int8 *)v6 + 42);
        v50 = *((unsigned __int8 *)v6 + 41);
        v51 = *((unsigned __int8 *)v6 + 40);
        v126.var0 = *v6;
        v126.var1 = v9;
        v126.var2 = v10;
        v126.var3 = v11;
        v126.var4 = v23;
        v126.var5 = v13;
        *(_DWORD *)(&v126.var5 + 1) = *(_DWORD *)((char *)v6 + 34);
        *(_WORD *)(&v126.var5 + 5) = *((_WORD *)v6 + 19);
        *(double *)&v127 = v24;
        *((double *)&v127 + 1) = v25;
        *(double *)&v128 = v20;
        *((_QWORD *)&v128 + 1) = v26;
        LOBYTE(v129) = v15;
        HIBYTE(v129) = v12;
        HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v126, v119);
        v52 = v51 != 0;
        v53 = v50 != 0;
        v54 = v49 != 0;
        if (v126.var4)
        {
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(v116, &v126, v49 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v55 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v126.var3);
            v56 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v55);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(v56, &v126, v50 == 0);
          }
          v52 = 1;
          v53 = 1;
          v54 = 1;
        }
        if ((_BYTE)v129)
        {
          LOWORD(v125) = v129;
          v57 = v128;
          v58 = *v124;
          *(_OWORD *)v58 = v127;
          *((_OWORD *)v58 + 1) = v57;
          *((_QWORD *)v58 + 4) = v125;
          *((_BYTE *)v58 + 40) = v52;
          *((_BYTE *)v58 + 41) = v53;
          *((_BYTE *)v58 + 42) = v54;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_164:
      v110 = *(double *)(a1 + 56);
      if (v110 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel, HDStatisticsTimeInterval>>]");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v111, "handleFailureInFunction:file:lineNumber:description:", v112, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v110 = *(double *)(a1 + 56);
      }
      v5 = v110;
    }
    while (v110 < a2);
  }
}

void sub_1B7D1EF94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  HDQuantitySampleOverlapProcessor *v8;
  void *v9;
  HDQuantitySampleOverlapProcessor *v10;
  void *v11;
  __int128 v12;

  v5 = result;
  v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v6 = 1;
  if (v6)
  {
    if (v6 == 1)
    {
      if (!*(_DWORD *)result)
      {
        *(_DWORD *)result = 1;
LABEL_15:
        v8 = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
        *(_OWORD *)(v5 + 1) = 0u;
        *(_OWORD *)(v5 + 3) = 0u;
        *(_OWORD *)(v5 + 5) = 0u;
        *(_OWORD *)(v5 + 7) = 0u;
        *(_OWORD *)((char *)v5 + 66) = 0u;
        v9 = (void *)v5[11];
        v5[11] = (uint64_t)v8;
        v10 = v8;

        v11 = (void *)v5[14];
        *((_WORD *)v5 + 48) = 257;
        v5[13] = 0;
        if (v11)
        {
          v5[15] = (uint64_t)v11;
          operator delete(v11);
        }
        *((_OWORD *)v5 + 7) = 0u;
        *((_OWORD *)v5 + 8) = 0u;

        if (!*((_BYTE *)v5 + 80) || *((double *)v5 + 7) <= *((double *)v5 + 19))
        {
          v12 = *((_OWORD *)v5 + 10);
          *((_OWORD *)v5 + 3) = *((_OWORD *)v5 + 9);
          *((_OWORD *)v5 + 4) = v12;
          *((_WORD *)v5 + 40) = *((_WORD *)v5 + 88);
        }
        HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)(v5 + 1), a2, a3);
        v7 = v5 + 13;
        return HDStatisticsTimeInterval::addSample(v7, a2, a3);
      }
    }
    else if (v6 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)(result + 1), a2, 1);
        return HDStatisticsTimeInterval::addSample(v5 + 13, a2, 1);
      }
      *(_DWORD *)result = 2;
      goto LABEL_15;
    }
  }
  else if (!*(_DWORD *)result && !result[5])
  {
    HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)(result + 1), a2, a3);
    v7 = v5 + 13;
    return HDStatisticsTimeInterval::addSample(v7, a2, a3);
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 312);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 312);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 312) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 304);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 304), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 392), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 432);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D1F328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 472);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D1F3F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v10 = (char *)operator new(0xE0uLL);
    v12[0] = v10;
    v12[1] = v6;
    v13 = 0;
    *((_QWORD *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 184) = 0u;
    *(_OWORD *)(v10 + 200) = 0u;
    *((_QWORD *)v10 + 27) = 0;
    *((_QWORD *)v10 + 16) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
    *((_WORD *)v10 + 68) = 257;
    *((_OWORD *)v10 + 9) = 0u;
    *((_OWORD *)v10 + 10) = 0u;
    *((_OWORD *)v10 + 11) = 0u;
    *((_OWORD *)v10 + 12) = 0u;
    *(_OWORD *)(v10 + 202) = 0u;
    v13 = 1;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1B7D1F540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 368);
      v11 = *(char **)(*(_QWORD *)a3 + 376);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 376);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 376);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 368);
      v24 = *(char **)(*(_QWORD *)a3 + 376);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 376);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 376);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 368);
            v31 = *(char **)(*(_QWORD *)a3 + 376);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 376);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 376);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  const void *v4;
  __n128 result;
  __int128 v6;

  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(a1 + 8), (const HDStatisticsNoiseLevel *)(a2 + 128));
  *(_QWORD *)(a1 + 112) = 0;
  v4 = *(const void **)(a2 + 232);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 112), v4, *(_QWORD *)(a2 + 240), (uint64_t)(*(_QWORD *)(a2 + 240) - (_QWORD)v4) >> 4);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 296);
  result = *(__n128 *)(a2 + 264);
  v6 = *(_OWORD *)(a2 + 280);
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v6;
  return result;
}

void sub_1B7D2161C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  void *v47;
  _QWORD *v48;
  _QWORD *v50;
  unint64_t v51;
  _QWORD v52[2];
  char v53;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 304);
  v48 = (_QWORD *)(a2 + 312);
  if (v3 == (_QWORD *)(a2 + 312))
    return;
  v50 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_81;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v51 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0xD0uLL);
      v52[0] = v19;
      v52[1] = v50;
      v53 = 0;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *(_OWORD *)(v19 + 184) = 0u;
      *((_QWORD *)v19 + 25) = 0;
      *((_QWORD *)v19 + 14) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
      *((_WORD *)v19 + 60) = 257;
      *((_OWORD *)v19 + 8) = 0u;
      *((_OWORD *)v19 + 9) = 0u;
      *((_OWORD *)v19 + 10) = 0u;
      *((_OWORD *)v19 + 11) = 0u;
      *(_OWORD *)(v19 + 186) = 0u;
      v53 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_68:
        v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        v12 = (uint64_t *)v52[0];
        if (v37)
        {
          *(_QWORD *)v52[0] = *v37;
        }
        else
        {
          *(_QWORD *)v52[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v50;
          if (!*v12)
          {
LABEL_77:
            v52[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v52);
            goto LABEL_78;
          }
          v38 = *(_QWORD *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_77;
      }
      v22 = v9 < 3 || (v9 & (v9 - 1)) != 0;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_34;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_34:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v50;
            if (*v50)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v50;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_59;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_59:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_63;
          }
          v47 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v47)
            operator delete(v47);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_63:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_68;
    }
    while (1)
    {
      v13 = v12[1];
      if (v13 == v8)
        break;
      if (v51 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = v8;
    v15 = (id)v12[2];
    v16 = v6;
    v17 = v16;
    if (v15 != v16)
    {
      v18 = objc_msgSend(v15, "isEqualToString:", v16);

      v8 = v14;
      if ((v18 & 1) != 0)
        goto LABEL_78;
      goto LABEL_20;
    }

LABEL_78:
    v2 = (unint64_t)(v12 + 2);
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    *((_OWORD *)v12 + 2) = *((_OWORD *)v3 + 3);
    v39 = *((_OWORD *)v3 + 4);
    v40 = *((_OWORD *)v3 + 5);
    v41 = *((_OWORD *)v3 + 6);
    *(_OWORD *)((char *)v12 + 90) = *(_OWORD *)((char *)v3 + 106);
    *((_OWORD *)v12 + 4) = v40;
    *((_OWORD *)v12 + 5) = v41;
    *((_OWORD *)v12 + 3) = v39;
    objc_storeStrong((id *)v12 + 14, (id)v3[16]);
    *((_WORD *)v12 + 60) = *((_WORD *)v3 + 68);
    v12[16] = v3[18];
    if (v12 + 2 != v3 + 4)
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 136, (char *)v3[19], v3[20], (uint64_t)(v3[20] - v3[19]) >> 4);
    v12[20] = v3[22];
    v42 = *(_OWORD *)(v3 + 23);
    v43 = *(_OWORD *)(v3 + 25);
    *((_WORD *)v12 + 100) = *((_WORD *)v3 + 108);
    *(_OWORD *)(v12 + 23) = v43;
    *(_OWORD *)(v12 + 21) = v42;

LABEL_81:
    v44 = (_QWORD *)v3[1];
    if (v44)
    {
      do
      {
        v45 = v44;
        v44 = (_QWORD *)*v44;
      }
      while (v44);
    }
    else
    {
      do
      {
        v45 = (_QWORD *)v3[2];
        v46 = *v45 == (_QWORD)v3;
        v3 = v45;
      }
      while (!v46);
    }
    v3 = v45;
  }
  while (v45 != v48);
}

void sub_1B7D21C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D07130;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D07130;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D07130;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D21E40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D07130;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 96;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D071C0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D071C0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D071C0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D22070(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D071C0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D07250;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D07250;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 664))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 664))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7D22370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 640);
      v7 = *(_QWORD *)(a1 + 632);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D22578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v6;
  double v7;
  uint64_t *v8;
  double v9;
  double v10;
  unint64_t v11;
  char v12;
  double v13;
  double v14;
  _BOOL4 v15;
  unint64_t v16;
  char v17;
  double v18;
  double v19;
  uint64_t *v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  int8x16_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t **v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  double v60;
  double v61;
  double v62;

  v3 = *(_BYTE *)(a2 + 32);
  if (!v3)
    return;
  v6 = a1 + 8;
  v7 = *(double *)(a1 + 8);
  v8 = *(uint64_t **)a2;
  v9 = *(double *)(a2 + 8);
  v10 = *(double *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_BYTE *)(a2 + 33);
  v13 = v9;
  if (v9 <= v7)
  {
    v13 = *(double *)(a1 + 8);
    if (v10 < v7)
      return;
  }
  if (v10 <= v13)
    return;
  v14 = *(double *)(a1 + 16);
  if (v13 <= v14)
  {
    if (v10 >= v14)
    {
      v15 = v10 > v14;
      v16 = *(_QWORD *)(a2 + 24);
      v18 = *(double *)(a2 + 16);
      v19 = *(double *)(a1 + 16);
      v20 = *(uint64_t **)a2;
      v17 = *(_BYTE *)(a2 + 33);
      if (v13 >= v14)
      {
        v16 = *(_QWORD *)(a2 + 24);
        v18 = *(double *)(a2 + 16);
        v19 = *(double *)(a1 + 16);
        v20 = *(uint64_t **)a2;
        v17 = *(_BYTE *)(a2 + 33);
        goto LABEL_52;
      }
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0.0;
      v14 = *(double *)(a2 + 16);
      v19 = 0.0;
      v20 = 0;
    }
    v60 = v14;
    v61 = v13;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 336, v11, v11);
    v21 = *(_QWORD *)(a1 + 112);
    if (v21 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 168) <= 0)
    {
      v26.f64[1] = *(float64_t *)(a1 + 16);
      v23 = v60;
      v22 = v61;
      v26.f64[0] = v61;
      v27.f64[0] = *(float64_t *)(a1 + 8);
      v27.f64[1] = v60;
      v28 = (int8x16_t)vcgtq_f64(v27, v26);
      v27.f64[0] = v61;
      *(int8x16_t *)(a1 + 48) = vbslq_s8(v28, *(int8x16_t *)(a1 + 8), (int8x16_t)v27);
      if (!a3)
      {
LABEL_25:
        v29 = *(_QWORD *)(a1 + 120);
        if (v21 >= v29)
        {
          v31 = *(_QWORD *)(a1 + 104);
          v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v31) >> 4);
          v33 = v32 + 1;
          if (v32 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v31) >> 4);
          if (2 * v34 > v33)
            v33 = 2 * v34;
          if (v34 >= 0x2AAAAAAAAAAAAAALL)
            v35 = 0x555555555555555;
          else
            v35 = v33;
          if (v35)
          {
            v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v35);
            v23 = v60;
            v22 = v61;
          }
          else
          {
            v36 = 0;
          }
          v37 = v35 + 48 * v32;
          v38 = v35 + 48 * v36;
          *(_QWORD *)v37 = v8;
          *(double *)(v37 + 8) = v22;
          *(double *)(v37 + 16) = v23;
          *(_QWORD *)(v37 + 24) = v11;
          *(_BYTE *)(v37 + 32) = 1;
          *(_BYTE *)(v37 + 33) = v12;
          *(_WORD *)(v37 + 40) = 0;
          *(_BYTE *)(v37 + 42) = 0;
          v30 = v37 + 48;
          v40 = *(char **)(a1 + 104);
          v39 = *(char **)(a1 + 112);
          if (v39 != v40)
          {
            do
            {
              v41 = *((_OWORD *)v39 - 3);
              v42 = *((_OWORD *)v39 - 2);
              *(_OWORD *)(v37 - 21) = *(_OWORD *)(v39 - 21);
              *(_OWORD *)(v37 - 48) = v41;
              *(_OWORD *)(v37 - 32) = v42;
              v37 -= 48;
              v39 -= 48;
            }
            while (v39 != v40);
            v39 = *(char **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 104) = v37;
          *(_QWORD *)(a1 + 112) = v30;
          *(_QWORD *)(a1 + 120) = v38;
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v21 = v8;
          *(double *)(v21 + 8) = v22;
          *(double *)(v21 + 16) = v23;
          *(_QWORD *)(v21 + 24) = v11;
          *(_BYTE *)(v21 + 32) = 1;
          *(_BYTE *)(v21 + 33) = v12;
          *(_WORD *)(v21 + 40) = 0;
          v30 = v21 + 48;
          *(_BYTE *)(v21 + 42) = 0;
        }
        *(_QWORD *)(a1 + 112) = v30;
        if (!*(_BYTE *)(a1 + 304) || *(double *)(a1 + 280) <= v9)
        {
          *(_QWORD *)(a1 + 272) = v8;
          *(double *)(a1 + 280) = v9;
          *(double *)(a1 + 288) = v10;
          *(_QWORD *)(a1 + 296) = v11;
          *(_BYTE *)(a1 + 304) = v3;
          *(_BYTE *)(a1 + 305) = v12;
          if (!*(_BYTE *)(a1 + 208) || *(double *)(a1 + 184) <= v9)
          {
            *(_QWORD *)(a1 + 176) = v8;
            *(double *)(a1 + 184) = v9;
            *(double *)(a1 + 192) = v10;
            *(_QWORD *)(a1 + 200) = v11;
            *(_BYTE *)(a1 + 208) = v3;
            *(_BYTE *)(a1 + 209) = v12;
          }
        }
        if (*(_BYTE *)(a1 + 33))
        {
          v43 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v6, v11);
          v44 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsForSource(v6, v43);
          if (!*((_BYTE *)v44 + 176) || *((double *)v44 + 19) <= v9)
          {
            v44[18] = v8;
            *((double *)v44 + 19) = v9;
            *((double *)v44 + 20) = v10;
            v44[21] = (uint64_t *)v11;
            *((_BYTE *)v44 + 176) = v3;
            *((_BYTE *)v44 + 177) = v12;
            if (!*((_BYTE *)v44 + 80) || *((double *)v44 + 7) <= v9)
            {
              v44[6] = v8;
              *((double *)v44 + 7) = v9;
              *((double *)v44 + 8) = v10;
              v44[9] = (uint64_t *)v11;
              *((_BYTE *)v44 + 80) = v3;
              *((_BYTE *)v44 + 81) = v12;
            }
          }
        }
LABEL_52:
        v12 = v17;
        v8 = v20;
        v13 = v19;
        v10 = v18;
        v11 = v16;
        if (!v15)
          return;
        goto LABEL_53;
      }
    }
    else
    {
      v23 = v60;
      v22 = v61;
      if (v61 < *(double *)(a1 + 48))
      {
        v24 = *(double *)(a1 + 8);
        if (v61 >= v24)
          v24 = v61;
        *(double *)(a1 + 48) = v24;
      }
      if (v60 > *(double *)(a1 + 56))
      {
        v25 = *(double *)(a1 + 16);
        if (v25 >= v60)
          v25 = v60;
        *(double *)(a1 + 56) = v25;
      }
      if (!a3)
        goto LABEL_25;
    }
    if (v22 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime(v6, v22);
      v23 = v60;
      v22 = v61;
      v21 = *(_QWORD *)(a1 + 112);
    }
    goto LABEL_25;
  }
  LOBYTE(v15) = 1;
LABEL_53:
  v45 = *(_QWORD *)(a1 + 528);
  v46 = *(_QWORD *)(a1 + 536);
  if (v45 >= v46)
  {
    v48 = *(_QWORD *)(a1 + 520);
    v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v48) >> 3);
    v50 = v49 + 1;
    if (v49 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v48) >> 3);
    if (2 * v51 > v50)
      v50 = 2 * v51;
    if (v51 >= 0x333333333333333)
      v52 = 0x666666666666666;
    else
      v52 = v50;
    if (v52)
    {
      v62 = v13;
      v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v52);
      v13 = v62;
    }
    else
    {
      v53 = 0;
    }
    v54 = v52 + 40 * v49;
    v55 = v52 + 40 * v53;
    *(_QWORD *)v54 = v8;
    *(double *)(v54 + 8) = v13;
    *(double *)(v54 + 16) = v10;
    *(_QWORD *)(v54 + 24) = v11;
    *(_BYTE *)(v54 + 32) = v15;
    *(_BYTE *)(v54 + 33) = v12;
    v47 = v54 + 40;
    v56 = *(char **)(a1 + 528);
    v57 = *(char **)(a1 + 520);
    if (v56 != v57)
    {
      do
      {
        v58 = *(_OWORD *)(v56 - 40);
        v59 = *(_OWORD *)(v56 - 24);
        *(_WORD *)(v54 - 8) = *((_WORD *)v56 - 4);
        *(_OWORD *)(v54 - 24) = v59;
        *(_OWORD *)(v54 - 40) = v58;
        v54 -= 40;
        v56 -= 40;
      }
      while (v56 != v57);
      v56 = *(char **)(a1 + 520);
    }
    *(_QWORD *)(a1 + 520) = v54;
    *(_QWORD *)(a1 + 528) = v47;
    *(_QWORD *)(a1 + 536) = v55;
    if (v56)
      operator delete(v56);
  }
  else
  {
    *(_QWORD *)v45 = v8;
    *(double *)(v45 + 8) = v13;
    *(double *)(v45 + 16) = v10;
    *(_QWORD *)(v45 + 24) = v11;
    *(_BYTE *)(v45 + 32) = v15;
    v47 = v45 + 40;
    *(_BYTE *)(v45 + 33) = v12;
  }
  *(_QWORD *)(a1 + 528) = v47;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 666))
  {
    *(_BYTE *)(a1 + 668) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 668) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D22B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 520), *(_QWORD *)(a1 + 528), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 528) - *(_QWORD *)(a1 + 520)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D22C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id *v8;
  HDQuantitySampleOverlapProcessor *v9;
  void *v10;
  HDQuantitySampleOverlapProcessor *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *i;
  _QWORD *v19;

  v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 544), *(id *)(a1 + 40));
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v9 = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 194) = 0u;
  v10 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v9;
  v11 = v9;

  v12 = *(void **)(a1 + 240);
  *(_WORD *)(a1 + 224) = 257;
  *(_QWORD *)(a1 + 232) = 0;
  if (v12)
  {
    *(_QWORD *)(a1 + 248) = v12;
    operator delete(v12);
  }
  *(_WORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;

  if (*(_QWORD *)(a1 + 328))
  {
    v13 = *(_QWORD **)(a1 + 312);
    v14 = *(_QWORD *)(a1 + 320);
    *(_QWORD *)(a1 + 312) = a1 + 320;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    if (v13[1])
      v15 = (_QWORD *)v13[1];
    else
      v15 = v13;
    if (v15)
    {
      v16 = (_QWORD *)v15[2];
      if (v16)
      {
        v17 = (_QWORD *)*v16;
        if ((_QWORD *)*v16 == v15)
        {
          *v16 = 0;
          while (1)
          {
            v19 = (_QWORD *)v16[1];
            if (!v19)
              break;
            do
            {
              v16 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
        }
        else
        {
          for (v16[1] = 0; v17; v17 = (_QWORD *)v16[1])
          {
            do
            {
              v16 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(v15);
        for (i = (_QWORD *)v16[2]; i; i = (_QWORD *)i[2])
          v16 = i;
        v15 = v16;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>>::destroy(v15);
  }
  objc_storeStrong(v8, *(id *)(a1 + 544));
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a1 + 520);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 668))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 668) = 0;
  }

}

void sub_1B7D22E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D22EB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 680));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 664) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D23218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C4035D4FF1CLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D233C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D23630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  _BOOL4 v8;
  int v9;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  BOOL v16;
  char v17;

  v7 = *(double *)(a1 + 32);
  if (v7 >= a6)
  {
    if (v7 <= a7)
    {
      v8 = v7 < a7;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = a7 > a6;
  }
  v12 = a5;
  v13 = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  v9 = *(unsigned __int8 *)(a1 + 56);
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v12, a3, a4);
  }
  else
  {
    if (v8)
    {
      v11 = *(double *)(a1 + 40);
      if (a6 <= v11)
      {
        if (a7 >= v11)
        {
          v9 = a6 < v11;
          a7 = *(double *)(a1 + 40);
        }
        else
        {
          v9 = a7 > a6;
        }
      }
    }
    v13 = a6;
    v14 = a7;
    v16 = v9;
    if (v9)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v12, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 664))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D242DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D2437C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::archive(uint64_t a1, int8x16_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::archive((uint64_t)v6, (uint64_t)&a2->i64[1]);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = a2->i32[0];
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(a2[9], a2[9], 8uLL);
  v6[1] = a2[10].i64[0];
  v6[2] = a2[10].i64[1];
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7D24484(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::archive(uint64_t a1, uint64_t a2)
{
  statistics **v4;
  _BYTE v5[208];

  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (statistics **)(a1 + 8);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsNoiseLevel::archive((HDStatisticsNoiseLevel *)a2, (uint64_t)v5);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics((_QWORD *)a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)(a2 + 96), (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1B7D2454C(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  HDQuantitySampleOverlapProcessor *v5;
  double result;
  uint64_t v7;
  HDQuantitySampleOverlapProcessor *v8;
  __int128 v9;
  __int128 v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[3];
  _OWORD v17[2];
  id v18;
  __int16 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  v5 = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *(_QWORD *)(a1 + 88) = v5;
  *(_WORD *)(a1 + 96) = 257;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 162) = 0u;
  v7 = a2[16];
  if (v7)
  {
    v8 = v5;
    HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::unarchive((uint64_t)v16, v7);
    v9 = v17[0];
    v4[2] = v16[2];
    v4[3] = v9;
    *(_OWORD *)((char *)v4 + 58) = *(_OWORD *)((char *)v17 + 10);
    v10 = v16[1];
    *v4 = v16[0];
    v4[1] = v10;
    *(_QWORD *)(a1 + 88) = v18;

    *(_WORD *)(a1 + 96) = v19;
    *(_QWORD *)(a1 + 104) = v20;
    v11 = v18;
    v12 = v23;
    v13 = v22;
    *(_OWORD *)(a1 + 112) = v21;
    *(_QWORD *)(a1 + 128) = v13;
    v22 = 0;
    v21 = 0uLL;
    *(_QWORD *)(a1 + 136) = v12;

  }
  *(_DWORD *)a1 = a2[17];
  v14 = a2[14];
  if (v14)
  {
    result = *(double *)(v14 + 8);
    v15 = *(_QWORD *)(v14 + 16);
    *(int8x16_t *)(a1 + 144) = vextq_s8(*(int8x16_t *)(v14 + 24), *(int8x16_t *)(v14 + 24), 8uLL);
    *(double *)(a1 + 160) = result;
    *(_QWORD *)(a1 + 168) = v15;
    *(_WORD *)(a1 + 176) = 1;
  }
  return result;
}

void sub_1B7D246A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsRelative(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::unarchive(uint64_t a1, uint64_t a2)
{
  const statistics::Statistics *v4;
  HDQuantitySampleOverlapProcessor *v5;
  double result;
  HDStatisticsNoiseLevel *v7;
  __int128 v8;
  __int128 v9;
  HDStatisticsTimeInterval *v10;
  uint64_t v11;
  _BYTE v12[32];
  __int128 v13;
  _OWORD v14[2];
  id v15;
  __int16 v16;

  *(_OWORD *)(a1 + 58) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *(_QWORD *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 88) = 257;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  v7 = *(HDStatisticsNoiseLevel **)(a2 + 128);
  if (v7)
  {
    HDStatisticsNoiseLevel::unarchive(v7, v4);
    v8 = v14[0];
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 58) = *(_OWORD *)((char *)v14 + 10);
    v9 = *(_OWORD *)&v12[16];
    *(_OWORD *)a1 = *(_OWORD *)v12;
    *(_OWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 80) = v15;

    *(_WORD *)(a1 + 88) = v16;
  }
  v10 = *(HDStatisticsTimeInterval **)(a2 + 8);
  if (v10)
  {
    HDStatisticsTimeInterval::unarchive(v10, (uint64_t)v12);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)v12;
    result = *(double *)&v13;
    v11 = *(_QWORD *)&v12[24];
    *(_OWORD *)(a1 + 104) = *(_OWORD *)&v12[8];
    *(_QWORD *)(a1 + 120) = v11;
    *(double *)(a1 + 128) = result;
  }
  return result;
}

void sub_1B7D2479C(_Unwind_Exception *a1)
{
  uint64_t v1;

  HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::~HDStatisticsCombined(v1);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D07300;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 104) = 0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_WORD *)(a1 + 616) = 1;
  *(_BYTE *)(a1 + 618) = 0;
  *(_BYTE *)(a1 + 620) = 0;
  *(_QWORD *)(a1 + 624) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  return a1;
}

void sub_1B7D24868(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;
  id *v3;
  void *v5;

  v3 = v2;
  objc_destroyWeak(v3);

  v5 = *(void **)(v1 + 72);
  if (v5)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)v1);
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D07300;
  v2 = *(void **)(a1 + 648);
  if (v2)
  {
    *(_QWORD *)(a1 + 656) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 584);
  if (v3)
  {
    *(_QWORD *)(a1 + 592) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 616) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

}

void sub_1B7D24960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 624) = v4;
    v3 = v5;
  }

}

void sub_1B7D249C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;

  objc_storeStrong((id *)(a1 + 632), a2);
  v7 = a2;
  v4 = *(id *)(a1 + 632);
  v5 = *(void **)(a1 + 608);
  *(_QWORD *)(a1 + 608) = v4;
  v6 = v4;

  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setStatisticsConfiguration(a1 + 120, *(void **)(a1 + 608));
}

void sub_1B7D24A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 272) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D24B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[58];

  if (*(_BYTE *)(a1 + 616))
    return 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D24C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 618))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 617))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 616))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 619))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 656);
      v20 = *(_QWORD *)(a1 + 664);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 648);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 656);
        v35 = *(char **)(a1 + 648);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 648);
        }
        *(_QWORD *)(a1 + 648) = v30;
        *(_QWORD *)(a1 + 656) = v23;
        *(_QWORD *)(a1 + 664) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 656) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7D24EB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 618))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 618) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 617))
    goto LABEL_5;
  v9 = *(void **)(a1 + 640);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_399);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 640);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 640);
  *(_QWORD *)(a1 + 640) = 0;

  *(_BYTE *)(a1 + 617) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 648);
    *(_QWORD *)(a1 + 664) = 0;
    *(_QWORD *)(a1 + 656) = 0;
    *(_QWORD *)(a1 + 648) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 648);
      v37 = *(__int128 **)(a1 + 656);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 656);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 656) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 648);
  v39 = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 584))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 584));
  }
  *(_BYTE *)(a1 + 618) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 620))
    {
      *(_BYTE *)(a1 + 620) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 618) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D255AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 618) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 619) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 618))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 618))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 640);
    *(_QWORD *)(a1 + 640) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 617) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 617))
  {
    v8 = *(void **)(a1 + 640);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 640);
      *(_QWORD *)(a1 + 640) = v9;

      v8 = *(void **)(a1 + 640);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D258A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 616) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 616) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D259C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 616) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 616), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::archive((uint64_t)&v37, a1 + 240);
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 376);
  if (v9 != (_QWORD *)(a1 + 384))
  {
    do
    {
      HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::archive((uint64_t)&v37, (uint64_t)(v9 + 5));
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 384));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 584);
  for (k = *(int8x16_t **)(a1 + 592); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D25D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *i;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t j;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  _BYTE *v62;
  _BYTE *v63;
  id v64;
  id v65;
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[464];
  __int128 v71;
  __int128 v72;
  int8x16_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  int8x16_t v77;
  uint64_t v78;
  uint64_t v79[4];
  __int128 __p;
  _QWORD v81[11];
  HDQuantitySampleOverlapProcessor *v82;
  __int16 v83;
  _QWORD v84[4];
  uint64_t v85;
  uint64_t **v86;
  uint64_t *v87;
  uint64_t v88;
  _BYTE v89[32];
  int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  __int128 v97;
  int v98;
  _BYTE v99[32];
  int v100;
  void (**v101)(statistics::StatisticsEngine *__hidden);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  _BYTE v108[32];
  unint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _OWORD v113[2];
  id obj;
  __int16 v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[2];
  char v121;

  v65 = a2;
  *(_BYTE *)(a1 + 616) = objc_msgSend(v65, "decodeBoolForKey:", CFSTR("needs_config"));
  v64 = v65;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v70, 0, -1.79769313e308, 1.79769313e308);
  v71 = 0u;
  v72 = 0u;
  v109 = 0;
  v3 = objc_retainAutorelease(v64);
  PB::Reader::Reader((PB::Reader *)v108, (const unsigned __int8 *)objc_msgSend(v3, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v109));
  v68 = a1;
  v101 = &off_1E6D09A88;
  v102 = 0;
  v106 = 0;
  v104 = 0;
  v105 = 0;
  v107 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v101, (PB::Reader *)v108);
  v67 = v3;
  v4 = v102;
  v69 = v103;
  if (v102)
  {
    v76 = 0;
    memset(v79, 0, sizeof(v79));
    __p = 0u;
    memset(v81, 0, 82);
    v82 = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
    v83 = 257;
    memset(v84, 0, sizeof(v84));
    v88 = 0;
    v87 = 0;
    v85 = 0;
    v86 = &v87;
    memset(v89, 0, sizeof(v89));
    v63 = v89;
    v90 = 1065353216;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0;
    v95 = 1065353216;
    v96 = 0u;
    v97 = 0u;
    v98 = 1065353216;
    memset(v99, 0, sizeof(v99));
    v62 = v99;
    v100 = 1065353216;
    v73 = vextq_s8(*(int8x16_t *)(v4 + 8), *(int8x16_t *)(v4 + 8), 8uLL);
    v5 = *(_QWORD *)(v4 + 72);
    v74 = *(_QWORD *)(v4 + 64);
    v75 = *(_WORD *)(v4 + 185);
    v77 = vextq_s8(*(int8x16_t *)(v4 + 24), *(int8x16_t *)(v4 + 24), 8uLL);
    v66 = (_QWORD *)v4;
    v78 = v5;
    v6 = *(_QWORD *)(v4 + 80);
    v7 = *(_QWORD *)(v4 + 88);
    if (v6 != v7)
    {
      v8 = (_QWORD *)*((_QWORD *)&__p + 1);
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v12 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v14 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v8 >= v81[0])
        {
          v15 = (_QWORD *)__p;
          v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v8 - __p) >> 4);
          v17 = v16 + 1;
          if (v16 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v81[0] - __p) >> 4) > v17)
            v17 = 0x5555555555555556 * ((uint64_t)(v81[0] - __p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81[0] - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v18 = 0x555555555555555;
          else
            v18 = v17;
          if (v18)
          {
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v18);
            v8 = (_QWORD *)*((_QWORD *)&__p + 1);
            v15 = (_QWORD *)__p;
          }
          else
          {
            v19 = 0;
          }
          v20 = v18 + 48 * v16;
          *(_QWORD *)v20 = v10;
          *(_QWORD *)(v20 + 8) = v9;
          *(_QWORD *)(v20 + 16) = v11;
          *(_QWORD *)(v20 + 24) = v12;
          *(_WORD *)(v20 + 32) = 1;
          *(_BYTE *)(v20 + 40) = 0;
          *(_BYTE *)(v20 + 41) = v13;
          *(_BYTE *)(v20 + 42) = v14;
          v21 = v20;
          if (v8 != v15)
          {
            do
            {
              v22 = *((_OWORD *)v8 - 3);
              v23 = *((_OWORD *)v8 - 2);
              *(_OWORD *)(v21 - 21) = *(_OWORD *)((char *)v8 - 21);
              *(_OWORD *)(v21 - 48) = v22;
              *(_OWORD *)(v21 - 32) = v23;
              v21 -= 48;
              v8 -= 6;
            }
            while (v8 != v15);
            v15 = (_QWORD *)__p;
          }
          v8 = (_QWORD *)(v20 + 48);
          *(_QWORD *)&__p = v21;
          *((_QWORD *)&__p + 1) = v20 + 48;
          v81[0] = v18 + 48 * v19;
          if (v15)
            operator delete(v15);
        }
        else
        {
          *v8 = v10;
          v8[1] = v9;
          v8[2] = v11;
          v8[3] = v12;
          *((_WORD *)v8 + 16) = 1;
          *((_BYTE *)v8 + 40) = 0;
          *((_BYTE *)v8 + 41) = v13;
          *((_BYTE *)v8 + 42) = v14;
          v8 += 6;
        }
        *((_QWORD *)&__p + 1) = v8;
        v6 += 8;
      }
      while (v6 != v7);
    }
    v24 = v66[13];
    if (v24)
    {
      HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::unarchive((uint64_t)&v110, v24);
      *(_OWORD *)&v81[5] = v112;
      *(_OWORD *)&v81[7] = v113[0];
      *(_OWORD *)((char *)&v81[8] + 2) = *(_OWORD *)((char *)v113 + 10);
      *(_OWORD *)&v81[1] = v110;
      *(_OWORD *)&v81[3] = v111;
      objc_storeStrong((id *)&v82, obj);
      v83 = v115;
      v84[0] = v116;
      if (v84[1])
      {
        v84[2] = v84[1];
        operator delete((void *)v84[1]);
      }
      *(_OWORD *)&v84[1] = v117;
      v84[3] = v118;
      v118 = 0;
      v117 = 0uLL;
      v85 = v119;

    }
    v26 = (uint64_t *)v66[17];
    for (i = (uint64_t *)v66[18]; v26 != i; ++v26)
    {
      v27 = *v26;
      HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::unarchive((uint64_t)&v110, *v26);
      v28 = *(_QWORD *)(v27 + 144);
      v29 = v87;
      v30 = &v87;
      v31 = &v87;
      if (v87)
      {
        do
        {
          while (1)
          {
            v31 = (uint64_t **)v29;
            v32 = v29[4];
            if (v32 <= v28)
              break;
            v29 = *v31;
            v30 = v31;
            if (!*v31)
              goto LABEL_34;
          }
          if (v32 >= v28)
          {
            v34 = (char *)v31;
            goto LABEL_37;
          }
          v29 = v31[1];
        }
        while (v29);
        v30 = v31 + 1;
      }
LABEL_34:
      v34 = (char *)operator new(0xB0uLL);
      v120[0] = v34;
      v120[1] = &v87;
      v121 = 0;
      *((_QWORD *)v34 + 4) = v28;
      *(_OWORD *)(v34 + 40) = 0u;
      *(_OWORD *)(v34 + 56) = 0u;
      *(_OWORD *)(v34 + 72) = 0u;
      *(_OWORD *)(v34 + 88) = 0u;
      *(_OWORD *)(v34 + 104) = 0u;
      *(_OWORD *)(v34 + 120) = 0u;
      *(_OWORD *)(v34 + 136) = 0u;
      *(_OWORD *)(v34 + 152) = 0u;
      *((_QWORD *)v34 + 21) = 0;
      *((_QWORD *)v34 + 15) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1, v62, v63, v64);
      *((_WORD *)v34 + 64) = 257;
      *(_OWORD *)(v34 + 136) = 0u;
      *(_OWORD *)(v34 + 152) = 0u;
      *((_QWORD *)v34 + 21) = 0;
      v121 = 1;
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      *((_QWORD *)v34 + 2) = v31;
      *v30 = (uint64_t *)v34;
      v33 = (uint64_t *)v34;
      if (*v86)
      {
        v86 = (uint64_t **)*v86;
        v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v87, v33);
      ++v88;
      v120[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v120);
LABEL_37:
      v35 = *(_OWORD *)((char *)v113 + 10);
      v37 = v112;
      v36 = v113[0];
      v38 = v110;
      *(_OWORD *)(v34 + 56) = v111;
      *(_OWORD *)(v34 + 72) = v37;
      *(_OWORD *)(v34 + 88) = v36;
      *(_OWORD *)(v34 + 98) = v35;
      *(_OWORD *)(v34 + 40) = v38;
      objc_storeStrong((id *)v34 + 15, obj);
      v39 = (void *)*((_QWORD *)v34 + 18);
      *((_WORD *)v34 + 64) = v115;
      *((_QWORD *)v34 + 17) = v116;
      if (v39)
      {
        *((_QWORD *)v34 + 19) = v39;
        operator delete(v39);
        *((_QWORD *)v34 + 18) = 0;
        *((_QWORD *)v34 + 19) = 0;
        *((_QWORD *)v34 + 20) = 0;
      }
      *((_OWORD *)v34 + 9) = v117;
      v40 = obj;
      *((_QWORD *)v34 + 20) = v118;
      v118 = 0;
      v117 = 0uLL;
      *((_QWORD *)v34 + 21) = v119;

    }
    v41 = v66[5];
    for (j = v66[6]; v41 != j; v41 += 8)
    {
      v44 = *(double *)(*(_QWORD *)v41 + 8);
      v43 = *(double *)(*(_QWORD *)v41 + 16);
      if (v44 >= v43)
        v45 = *(double *)(*(_QWORD *)v41 + 16);
      else
        v45 = *(double *)(*(_QWORD *)v41 + 8);
      if (v43 < v44)
        v43 = *(double *)(*(_QWORD *)v41 + 8);
      HKIntervalMask<double>::_insertInterval(v79, v45, v43);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::operator=((uint64_t)v70, (uint64_t)&v73);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v73);
  }
  v46 = v104;
  v47 = v105;
  if (v104 != v105)
  {
    v48 = *((_QWORD *)&v71 + 1);
    do
    {
      v49 = *(_QWORD *)(*(_QWORD *)v46 + 24);
      v50 = *(_QWORD *)(*(_QWORD *)v46 + 32);
      v51 = *(_QWORD *)(*(_QWORD *)v46 + 8);
      v52 = *(_QWORD *)(*(_QWORD *)v46 + 16);
      if (v48 >= (unint64_t)v72)
      {
        v53 = (void *)v71;
        v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v71) >> 3);
        v55 = v54 + 1;
        if (v54 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v72 - v71) >> 3) > v55)
          v55 = 0x999999999999999ALL * ((uint64_t)(v72 - v71) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v72 - v71) >> 3) >= 0x333333333333333)
          v56 = 0x666666666666666;
        else
          v56 = v55;
        if (v56)
        {
          v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v56);
          v48 = *((_QWORD *)&v71 + 1);
          v53 = (void *)v71;
        }
        else
        {
          v57 = 0;
        }
        v58 = v56 + 40 * v54;
        *(_QWORD *)v58 = v50;
        *(_QWORD *)(v58 + 8) = v49;
        *(_QWORD *)(v58 + 16) = v51;
        *(_QWORD *)(v58 + 24) = v52;
        *(_WORD *)(v58 + 32) = 1;
        v59 = v58;
        if ((void *)v48 != v53)
        {
          do
          {
            v60 = *(_OWORD *)(v48 - 40);
            v61 = *(_OWORD *)(v48 - 24);
            *(_WORD *)(v59 - 8) = *(_WORD *)(v48 - 8);
            *(_OWORD *)(v59 - 24) = v61;
            *(_OWORD *)(v59 - 40) = v60;
            v59 -= 40;
            v48 -= 40;
          }
          while ((void *)v48 != v53);
          v53 = (void *)v71;
        }
        v48 = v58 + 40;
        *(_QWORD *)&v71 = v59;
        *((_QWORD *)&v71 + 1) = v58 + 40;
        *(_QWORD *)&v72 = v56 + 40 * v57;
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v48 = v50;
        *(_QWORD *)(v48 + 8) = v49;
        *(_QWORD *)(v48 + 16) = v51;
        *(_QWORD *)(v48 + 24) = v52;
        *(_WORD *)(v48 + 32) = 1;
        v48 += 40;
      }
      *((_QWORD *)&v71 + 1) = v48;
      v46 += 8;
    }
    while (v46 != v47);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v101);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::operator=((_QWORD *)(v68 + 112), (uint64_t)&v69);
  if ((_QWORD)v71)
  {
    *((_QWORD *)&v71 + 1) = v71;
    operator delete((void *)v71);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v70);

}

void sub_1B7D26584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a10);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a2);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table((uint64_t)&STACK[0x3C0]);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x398]);
  v11 = (void *)STACK[0x380];
  if (STACK[0x380])
  {
    STACK[0x388] = (unint64_t)v11;
    operator delete(v11);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a3);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy((_QWORD *)STACK[0x348]);
  HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::~HDStatisticsCombined(a6);
  v12 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v12;
    operator delete(v12);
  }
  objc_destroyWeak((id *)&STACK[0x298]);
  v13 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v13;
    operator delete(v13);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x410]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *(_WORD *)(a1 + 208) = 257;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  return a1;
}

void sub_1B7D2678C(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;
  void **v3;
  id *v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;

  v6 = v3;
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 104) = v8;
    operator delete(v8);
  }
  objc_destroyWeak(v2);
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 72) = v9;
    operator delete(v9);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(_QWORD *)(a1 + 480) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 424);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 384);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 344);
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 280);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 264));
  v3 = *(void **)(a1 + 224);
  if (v3)
  {
    *(_QWORD *)(a1 + 232) = v3;
    operator delete(v3);
  }

  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }

}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  uint64_t v15;
  _BYTE v17[464];
  uint64_t v18;
  _BYTE v19[464];
  __int128 __p;
  __int128 v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  char v27[400];
  uint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v24 = 1;
  v23 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setStatisticsConfiguration((uint64_t)v22, *(void **)(a1 + 632));
  if (!*(_QWORD *)(a1 + 40))
    v26 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  v18 = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  __p = 0u;
  v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::operator=((_QWORD *)(a1 + 112), (uint64_t)&v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 616) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1B7D26BAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  HDStatisticsNoiseLevelConfiguration *v4;

  objc_storeStrong((id *)(a1 + 32), a2);
  v4 = a2;
  HDStatisticsNoiseLevel::configure((id *)(a1 + 120), v4);

}

void sub_1B7D26C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 59), (__n128 *)(a2 + 472));
  v4 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a2 + 496) = 0;
  v5 = (void *)a1[62];
  a1[62] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD v30[2];
  char v31;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(a1 + 120), (const HDStatisticsNoiseLevel *)(a2 + 120));
  v12 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = v12;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 224), *(const void **)(a2 + 224), *(_QWORD *)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 4);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v13 = (uint64_t **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  v14 = *(_QWORD **)(a2 + 256);
  if (v14 != (_QWORD *)(a2 + 264))
  {
    do
    {
      v15 = *v13;
      v16 = (uint64_t *)(a1 + 264);
      if (*(uint64_t ***)(a1 + 256) == v13)
        goto LABEL_11;
      v17 = *v13;
      v18 = (uint64_t *)(a1 + 264);
      if (v15)
      {
        do
        {
          v16 = v17;
          v17 = (uint64_t *)v17[1];
        }
        while (v17);
      }
      else
      {
        do
        {
          v16 = (uint64_t *)v18[2];
          v19 = *v16 == (_QWORD)v18;
          v18 = v16;
        }
        while (v19);
      }
      v20 = v14[4];
      if (v16[4] < v20)
      {
LABEL_11:
        if (v15)
          v21 = (uint64_t **)v16;
        else
          v21 = (uint64_t **)(a1 + 264);
        if (v15)
          v22 = (uint64_t **)(v16 + 1);
        else
          v22 = (uint64_t **)(a1 + 264);
        if (*v22)
          goto LABEL_28;
      }
      else
      {
        v22 = (uint64_t **)(a1 + 264);
        v21 = (uint64_t **)(a1 + 264);
        if (v15)
        {
          v23 = *v13;
          while (1)
          {
            while (1)
            {
              v21 = (uint64_t **)v23;
              v24 = v23[4];
              if (v24 <= v20)
                break;
              v23 = *v21;
              v22 = v21;
              if (!*v21)
                goto LABEL_27;
            }
            if (v24 >= v20)
              goto LABEL_28;
            v23 = v21[1];
            if (!v23)
            {
              v22 = v21 + 1;
              break;
            }
          }
        }
      }
LABEL_27:
      v25 = (uint64_t *)operator new(0xB0uLL);
      v30[0] = v25;
      v30[1] = a1 + 264;
      v31 = 0;
      v25[4] = v14[4];
      HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(v25 + 5), (const HDStatisticsNoiseLevel *)(v14 + 5));
      v26 = v14[17];
      v25[18] = 0;
      v25[17] = v26;
      v25[19] = 0;
      v25[20] = 0;
      std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v25 + 18, (const void *)v14[18], v14[19], (uint64_t)(v14[19] - v14[18]) >> 4);
      v25[21] = v14[21];
      v31 = 1;
      std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 256), (uint64_t)v21, v22, v25);
      v30[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
LABEL_28:
      v27 = (_QWORD *)v14[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v14[2];
          v19 = *v28 == (_QWORD)v14;
          v14 = v28;
        }
        while (!v19);
      }
      v14 = v28;
    }
    while (v28 != (_QWORD *)(a2 + 264));
  }
  std::unordered_set<long long>::unordered_set(a1 + 280, a2 + 280);
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 320), *(const void **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 384, a2 + 384);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 424, a2 + 424);
  return a1;
}

void sub_1B7D26FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, id *location, void **a13, char a14)
{
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  void *v22;
  void *v23;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v19);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v18);
  v21 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v14 + 328) = v21;
    operator delete(v21);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(*v15);
  HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>::~HDStatisticsCombined(a10);
  v22 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v14 + 104) = v22;
    operator delete(v22);
  }
  objc_destroyWeak(location);
  v23 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v14 + 72) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<long long const,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_OWORD *)(a2 + 178);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 178) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  objc_storeStrong((id *)(a1 + 200), *(id *)(a2 + 200));
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 224, (__n128 *)(a2 + 224));
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v13 = a1 + 264;
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(*(_QWORD **)(a1 + 264));
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v14 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 264) = v14;
  v15 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 272) = v15;
  if (v15)
  {
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(a2 + 256) = a2 + 264;
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 272) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 256) = v13;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 280, (uint64_t *)(a2 + 280));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 320, (__n128 *)(a2 + 320));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 424, (uint64_t *)(a2 + 424));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  double v3;
  id v4;
  double *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  double v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  double v35;
  id v36;
  id v37;
  double i;
  id v39;
  void *v40;
  void *v41;
  uint64_t v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  void *v47;
  void *v48;
  double *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  double v56;
  const HDStatisticsNoiseLevel *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  double v62;
  void *v63;
  void *v64;
  void *v65;
  double v66;
  double v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  uint64_t **j;
  uint64_t *v73;
  const HDStatisticsNoiseLevel *v74;
  double v75;
  double v76;
  double v77;
  void *v78;
  void *v79;
  void *v80;
  double v81;
  double v82;
  void *v83;
  void *v84;
  void *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  id v98;
  id v99;
  id v100;
  _BYTE v101[16];
  uint64_t **v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  id v110;
  void *__p;
  void *v112;
  _QWORD v113[3];
  _QWORD *v114;
  _QWORD v115[3];
  _QWORD *v116;
  _BYTE v117[24];
  _BYTE *v118;
  _QWORD v119[3];
  _QWORD *v120;
  double v121;
  double v122;
  double v123;
  double *v124;
  uint64_t v125;
  double v126;
  double v127;
  double v128;
  id v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v3 = *(double *)a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308)
    v5 = (double *)a2;
  v6 = (void *)objc_msgSend(v4, "initWithTimeIntervalSinceReferenceDate:", *v5);
  v96 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v6, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(a2 + 320);
      v16 = *(uint64_t **)(v96 + 328);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v20 = (void *)objc_msgSend(v14, "copy");
      objc_msgSend(v12, "_setSources:", v20);

    }
  }

  v113[0] = &off_1E6D074F0;
  v114 = v113;
  v21 = v12;
  v22 = (uint64_t)v114;
  if (!v114)
    goto LABEL_22;
  if (v114 != v113)
  {
    v22 = (*(uint64_t (**)(void))(*v114 + 16))();
LABEL_22:
    v120 = (_QWORD *)v22;
    goto LABEL_24;
  }
  v120 = v119;
  (*(void (**)(uint64_t, _QWORD *))(v113[0] + 24))((uint64_t)v113, v119);
LABEL_24:
  v124 = 0;
  v23 = operator new(0x28uLL);
  *v23 = &off_1E6D073D0;
  v24 = v23 + 1;
  v25 = (uint64_t)v120;
  if (!v120)
  {
LABEL_27:
    v23[4] = v25;
    goto LABEL_29;
  }
  if (v120 != v119)
  {
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v120 + 16))(v120, v24);
    goto LABEL_27;
  }
  v23[4] = v24;
  (*(void (**)(_QWORD *))(v119[0] + 24))(v119);
LABEL_29:
  v124 = (double *)v23;
  v99 = v21;
  v26 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::overallStatistics(&v103, v96);
  if (!v124)
    std::__throw_bad_function_call[abi:ne180100]();
  v29 = (*(uint64_t (**)(double *, double *, double))(*(_QWORD *)v124 + 48))(v124, &v103, v28);
  v30 = *(double **)(v29 + 8);
  v31 = 0.0;
  while (v30 != *(double **)(v29 + 16))
  {
    v33 = *v30;
    v32 = v30[1];
    v30 += 2;
    v31 = v31 + v32 - v33;
  }
  objc_msgSend(v26, "quantityWithUnit:doubleValue:", v27, v31 + *(double *)(v29 + 32));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v99, "setDuration:", v34);

  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }

  v35 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::overallStatistics(&v103, v96);
  if (!v124)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v99, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(double *, double *, double))(*(_QWORD *)v124 + 48))(v124, &v103, v35));
  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v36 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v37 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v103, v96);
    for (i = v105; i != 0.0; i = **(double **)&i)
    {
      v39 = *(id *)(*(_QWORD *)&i + 16);
      v40 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v124)
        std::__throw_bad_function_call[abi:ne180100]();
      v42 = (*(uint64_t (**)(double *, uint64_t))(*(_QWORD *)v124 + 48))(v124, *(_QWORD *)&i + 24);
      v43 = *(double **)(v42 + 8);
      v44 = 0.0;
      while (v43 != *(double **)(v42 + 16))
      {
        v46 = *v43;
        v45 = v43[1];
        v43 += 2;
        v44 = v44 + v45 - v46;
      }
      objc_msgSend(v40, "quantityWithUnit:doubleValue:", v41, v44 + *(double *)(v42 + 32));
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "setObject:forKeyedSubscript:", v47, v39);

      if (!v124)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(double *, uint64_t))(*(_QWORD *)v124 + 48))(v124, *(_QWORD *)&i + 24));
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "setObject:forKeyedSubscript:", v48, v39);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v103);
    objc_msgSend(v99, "setDurationBySource:", v36);
    objc_msgSend(v99, "setDataCountBySource:", v37);

  }
  v49 = v124;
  if (v124 == &v121)
  {
    v50 = 4;
    v49 = &v121;
  }
  else
  {
    if (!v124)
      goto LABEL_52;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_52:
  v51 = v120;
  if (v120 == v119)
  {
    v52 = 4;
    v51 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_57;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_57:
  v53 = (uint64_t)v114;
  if (!v114)
  {
LABEL_60:
    v116 = (_QWORD *)v53;
    goto LABEL_62;
  }
  if (v114 != v113)
  {
    v53 = (*(uint64_t (**)(void))(*v114 + 16))();
    goto LABEL_60;
  }
  v116 = v115;
  (*(void (**)(uint64_t, _QWORD *))(v113[0] + 24))((uint64_t)v113, v115);
LABEL_62:
  v118 = 0;
  v54 = operator new(0x28uLL);
  *v54 = &off_1E6D07460;
  v55 = (uint64_t)v116;
  if (!v116)
  {
LABEL_65:
    v54[4] = v55;
    goto LABEL_67;
  }
  if (v116 != v115)
  {
    v55 = (*(uint64_t (**)(void))(*v116 + 16))();
    goto LABEL_65;
  }
  v54[4] = v54 + 1;
  (*(void (**)(_QWORD *))(v115[0] + 24))(v115);
LABEL_67:
  v118 = v54;
  v100 = v99;
  v56 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::overallStatistics(&v103, v96);
  if (!v118)
    std::__throw_bad_function_call[abi:ne180100]();
  v57 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(_BYTE *, double *, double))(*(_QWORD *)v118 + 48))(v118, &v103, v56);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v121, v57);
  if (__p)
  {
    v112 = __p;
    operator delete(__p);
  }

  HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v121);
  v58 = *(_QWORD *)(a1 + 24);
  v59 = _HKStatisticsOptionBaselineRelativeQuantities();
  v60 = *(void **)(a1 + 16);
  if ((v59 & v58) != 0)
    objc_msgSend(v60, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v60, "canonicalUnit");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v58 & 2) != 0)
  {
    v62 = 0.0;
    if (v122 > 0.0 && v121 > 0.0)
      v62 = log10(v121 / v122) * 10.0;
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v61, v62);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "setAverageQuantity:", v63);

  }
  if ((v58 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v61, *(double *)&v124);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "setMinimumQuantity:", v64);

  }
  if ((v58 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v61, v123);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "setMaximumQuantity:", v65);

  }
  if ((v58 & 0x20) != 0)
  {
    v66 = v127;
    v67 = v128;
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v61, v126);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "setMostRecentQuantity:", v68);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v66, v67);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "setMostRecentQuantityDateInterval:", v69);

  }
  objc_msgSend(v100, "setDataCount:", v125);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((v58 & 2) != 0)
      v98 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    else
      v98 = 0;
    if ((v58 & 4) != 0)
      v95 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    else
      v95 = 0;
    if ((v58 & 8) != 0)
      v94 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    else
      v94 = 0;
    if ((v58 & 0x20) != 0)
    {
      v93 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v70 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    }
    else
    {
      v70 = 0;
      v93 = 0;
    }
    v71 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)v101, v96);
    for (j = v102; j; j = (uint64_t **)*j)
    {
      v73 = j[2];
      if (!v118)
        std::__throw_bad_function_call[abi:ne180100]();
      v74 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v118 + 48))(v118, (uint64_t *)j + 3);
      HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v103, v74);
      HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v103);
      if ((v58 & 2) != 0)
      {
        v76 = v104;
        v77 = 0.0;
        if (v104 > 0.0)
        {
          v75 = v103;
          if (v103 > 0.0)
            v77 = log10(v103 / v104) * 10.0;
        }
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v61, v77, v76, v75);
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "setObject:forKeyedSubscript:", v78, v73);

      }
      if ((v58 & 4) != 0)
      {
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v61, v106);
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v95, "setObject:forKeyedSubscript:", v79, v73);

      }
      if ((v58 & 8) != 0)
      {
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v61, v105);
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v94, "setObject:forKeyedSubscript:", v80, v73);

      }
      if ((v58 & 0x20) != 0)
      {
        v81 = v108;
        v82 = v109;
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v61, v107);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v93, "setObject:forKeyedSubscript:", v83, v73);

        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v81, v82);
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v70, "setObject:forKeyedSubscript:", v84, v73);

      }
      if (!v118)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v118 + 48))(v118, (uint64_t *)j + 3) + 32));
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v71, "setObject:forKeyedSubscript:", v85, v73);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)v101);
    if ((v58 & 2) != 0)
      objc_msgSend(v100, "setAverageQuantityBySource:", v98);
    if ((v58 & 4) != 0)
      objc_msgSend(v100, "setMinimumQuantityBySource:", v95);
    if ((v58 & 8) != 0)
      objc_msgSend(v100, "setMaximumQuantityBySource:", v94);
    if ((v58 & 0x20) != 0)
    {
      objc_msgSend(v100, "setMostRecentQuantityBySource:", v93);
      objc_msgSend(v100, "setMostRecentQuantityDateIntervalBySource:", v70);
    }
    objc_msgSend(v100, "setDataCountBySource:", v71);

  }
  v86 = v118;
  if (v118 == v117)
  {
    v87 = 4;
    v86 = v117;
  }
  else
  {
    if (!v118)
      goto LABEL_126;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_126:
  v88 = v116;
  if (v116 == v115)
  {
    v89 = 4;
    v88 = v115;
  }
  else
  {
    if (!v116)
      goto LABEL_131;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_131:

  v90 = v114;
  if (v114 == v113)
  {
    v91 = 4;
    v90 = v113;
    goto LABEL_135;
  }
  if (v114)
  {
    v91 = 5;
LABEL_135:
    (*(void (**)(void))(*v90 + 8 * v91))();
  }
  return v100;
}

void sub_1B7D27E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char *a42,char a43,uint64_t a44,uint64_t a45,char *a46,char a47,uint64_t a48,uint64_t a49,char *a50)
{
  void *v50;
  uint64_t v51;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;

  v53 = a50;
  if (a50 == &a47)
  {
    v54 = 4;
    v53 = &a47;
  }
  else
  {
    if (!a50)
      goto LABEL_6;
    v54 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
LABEL_6:
  v55 = a46;
  if (a46 == &a43)
  {
    v56 = 4;
    v55 = &a43;
  }
  else
  {
    if (!a46)
      goto LABEL_11;
    v56 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v55 + 8 * v56))();
LABEL_11:

  v57 = a42;
  if (a42 == &a39)
  {
    v58 = 4;
    v57 = &a39;
  }
  else
  {
    if (!a42)
      goto LABEL_16;
    v58 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
LABEL_16:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 304);
  v2 = *(_QWORD *)(a1 + 320);
  if (v1 != (*(_QWORD *)(a1 + 328) - v2) >> 3)
  {
    v4 = (void **)(a1 + 320);
    *(_QWORD *)(a1 + 328) = v2;
    std::vector<long long>::reserve((void **)(a1 + 320), v1);
    v5 = *(_QWORD **)(a1 + 296);
    if (v5)
    {
      v6 = *(char **)(a1 + 328);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 336);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 320);
            v6 = *(char **)(a1 + 328);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 320) = v16;
          *(_QWORD *)(a1 + 328) = v9;
          *(_QWORD *)(a1 + 336) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 328) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D28394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double *v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  int64_t v11;
  char v12;
  char v13;
  BOOL v14;
  BOOL v15;
  double v16;
  char v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  char *v39;
  uint64_t v40;
  double *v41;
  double *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  id WeakRetained;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  _BOOL4 v56;
  unint64_t v57;
  uint64_t *v58;
  __int128 v59;
  double *v60;
  uint64_t v61;
  char v62;
  double *v63;
  __int128 v64;
  _OWORD *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  _OWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  double var2;
  _BOOL4 v76;
  double v77;
  double var0;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  double *v82;
  double *v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  double *v87;
  int v88;
  unint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  unint64_t v93;
  uint64_t *v94;
  void *v95;
  unint64_t v96;
  BOOL v97;
  unint64_t v98;
  double *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  BOOL v112;
  double v113;
  void *v114;
  void *v115;
  _QWORD *v116;
  double **v117;
  id *location;
  uint64_t *v119;
  HDStatisticsNoiseLevel *v120;
  int64_t v121;
  id v122;
  _QWORD *v123;
  char v124;
  BOOL var5;
  int64_t var3;
  int v127;
  double **v128;
  uint64_t v129;
  HDRawQuantitySample v130;
  __int128 v131;
  __int128 v132;
  __int16 v133;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v128 = (double **)(a1 + 96);
    v123 = (_QWORD *)(a1 + 64);
    v120 = (HDStatisticsNoiseLevel *)(a1 + 120);
    v119 = (uint64_t *)(a1 + 216);
    v117 = (double **)(a1 + 224);
    location = (id *)(a1 + 88);
    v116 = (_QWORD *)(a1 + 264);
    do
    {
      v6 = *(double **)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          v27 = a2;
          v28 = a2;
          v29 = v5;
          v30 = *(_QWORD *)(a1 + 96);
          if (v6 != (double *)v7)
          {
            do
            {
              v31 = *(double *)(v30 + 8);
              v32 = *(double *)(v30 + 16);
              if (v31 > v29 && v31 < v28)
                v28 = *(double *)(v30 + 8);
              if (v32 > v5)
                v34 = *(double *)(v30 + 16);
              else
                v34 = v27;
              if (v32 < v27)
              {
                v29 = v5;
                v27 = v34;
              }
              v30 += 48;
            }
            while ((__int128 *)v30 != v7);
          }
          if (v27 >= v28)
            v35 = v28;
          else
            v35 = v27;
          v36 = *(double *)(a1 + 16);
          if (v36 > 0.0)
          {
            v37 = v36 * floor(v35 / v36);
            v38 = v36 * floor((v36 + v5) / v36);
            if (v37 >= v38)
              v35 = v37;
            else
              v35 = v38;
          }
          *v128 = 0;
          v128[1] = 0;
          v128[2] = 0;
          if (v6 != (double *)v7)
          {
            if (v8 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            v42 = *(double **)(a1 + 96);
            v41 = *(double **)(a1 + 104);
            v43 = v39;
            if (v41 != v42)
            {
              do
              {
                v44 = *((_OWORD *)v41 - 3);
                v45 = *((_OWORD *)v41 - 2);
                *(_OWORD *)(v43 - 21) = *(_OWORD *)((char *)v41 - 21);
                *((_OWORD *)v43 - 3) = v44;
                *((_OWORD *)v43 - 2) = v45;
                v43 -= 48;
                v41 -= 6;
              }
              while (v41 != v42);
              v41 = *v128;
            }
            *(_QWORD *)(a1 + 96) = v43;
            *(_QWORD *)(a1 + 104) = v39;
            *(_QWORD *)(a1 + 112) = &v39[48 * v40];
            if (v41)
              operator delete(v41);
          }
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          v47 = __clz(v8);
          if (WeakRetained)
          {
            *(_QWORD *)&v130.var0 = a1;
            v48 = 126 - 2 * v47;
            if (v6 == (double *)v7)
              v49 = 0;
            else
              v49 = v48;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*,false>((uint64_t)v6, v7, (uint64_t)&v130, v49, 1);
          }
          else
          {
            v61 = 126 - 2 * v47;
            if (v6 == (double *)v7)
              v49 = 0;
            else
              v49 = v61;
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*,false>((uint64_t)v6, v7, v49, 1);
          if (*(_BYTE *)(a1 + 25))
            v122 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v122 = 0;
          if (v6 == (double *)v7)
          {
LABEL_156:
            *(double *)(a1 + 248) = HKIntervalMask<double>::removeIntervalsBefore(v117, v35) + *(double *)(a1 + 248);
            v109 = *(_QWORD **)(a1 + 256);
            if (v109 != v116)
            {
              do
              {
                *((double *)v109 + 21) = HKIntervalMask<double>::removeIntervalsBefore((double **)v109 + 18, v35)
                                       + *((double *)v109 + 21);
                v110 = (_QWORD *)v109[1];
                if (v110)
                {
                  do
                  {
                    v111 = v110;
                    v110 = (_QWORD *)*v110;
                  }
                  while (v110);
                }
                else
                {
                  do
                  {
                    v111 = (_QWORD *)v109[2];
                    v112 = *v111 == (_QWORD)v109;
                    v109 = v111;
                  }
                  while (!v112);
                }
                v109 = v111;
              }
              while (v111 != v116);
            }
            *(double *)(a1 + 56) = v35;

            if (v6)
              operator delete(v6);
            goto LABEL_165;
          }
          v121 = 0;
          v62 = 0;
          v63 = v6;
          while (2)
          {
            v64 = *((_OWORD *)v63 + 1);
            *(_OWORD *)&v130.var0 = *(_OWORD *)v63;
            *(_OWORD *)&v130.var2 = v64;
            *(double *)&v130.var4 = v63[4];
            if (!v130.var4 || v130.var1 > v35)
            {
LABEL_96:
              v65 = *(_OWORD **)(a1 + 104);
              v66 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v65 < v66)
              {
                v67 = *(_OWORD *)v63;
                v68 = *((_OWORD *)v63 + 2);
                v65[1] = *((_OWORD *)v63 + 1);
                v65[2] = v68;
                *v65 = v67;
                v69 = v65 + 3;
                goto LABEL_116;
              }
              v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - (char *)*v128) >> 4);
              v71 = v70 + 1;
              if (v70 + 1 > 0x555555555555555)
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (_QWORD)*v128) >> 4);
              if (2 * v72 > v71)
                v71 = 2 * v72;
              if (v72 >= 0x2AAAAAAAAAAAAAALL)
                v73 = 0x555555555555555;
              else
                v73 = v71;
              if (v73)
                v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v73);
              else
                v74 = 0;
              v79 = (_OWORD *)(v73 + 48 * v70);
              v80 = *(_OWORD *)v63;
              v81 = *((_OWORD *)v63 + 2);
              v79[1] = *((_OWORD *)v63 + 1);
              v79[2] = v81;
              *v79 = v80;
              v83 = *(double **)(a1 + 96);
              v82 = *(double **)(a1 + 104);
              v84 = v79;
              if (v82 != v83)
              {
                do
                {
                  v85 = *((_OWORD *)v82 - 3);
                  v86 = *((_OWORD *)v82 - 2);
                  *(_OWORD *)((char *)v84 - 21) = *(_OWORD *)((char *)v82 - 21);
                  *(v84 - 3) = v85;
                  *(v84 - 2) = v86;
                  v84 -= 3;
                  v82 -= 6;
                }
                while (v82 != v83);
                v82 = *v128;
              }
              v69 = v79 + 3;
              *(_QWORD *)(a1 + 96) = v84;
              *(_QWORD *)(a1 + 104) = v79 + 3;
              *(_QWORD *)(a1 + 112) = v73 + 48 * v74;
              if (v82)
              {
                v87 = v82;
                goto LABEL_115;
              }
              goto LABEL_116;
            }
            var2 = v130.var2;
            if (v130.var2 >= v35)
            {
              var0 = v130.var0;
              var3 = v130.var3;
              v130.var2 = v35;
              v76 = var2 > v35;
              v130.var4 = v130.var1 < v35;
              if (v130.var1 >= v35)
                goto LABEL_96;
              var5 = v130.var5;
              v77 = v35;
            }
            else
            {
              v130.var4 = v130.var2 > v130.var1;
              if (v130.var2 <= v130.var1)
                goto LABEL_96;
              v76 = 0;
              var3 = 0;
              var5 = 0;
              var2 = 0.0;
              v77 = 0.0;
              var0 = 0.0;
            }
            HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v130, v123);
            v88 = *((unsigned __int8 *)v63 + 42);
            v127 = *((unsigned __int8 *)v63 + 41);
            v124 = *((_BYTE *)v63 + 40);
            if (v130.var4)
            {
              if ((v62 & 1) != 0)
              {
                v89 = v130.var3;
                if (v121 == v130.var3 || *(_BYTE *)(a1 + 24))
                {
                  HDStatisticsNoiseLevel::addSample(v120, &v130, v88 == 0);
                  HDStatisticsTimeInterval::addSample(v119, &v130, v88 == 0);
                  v88 = 1;
                }
              }
              else
              {
                HDStatisticsNoiseLevel::addSample(v120, &v130, v88 == 0);
                HDStatisticsTimeInterval::addSample(v119, &v130, v88 == 0);
                v88 = 1;
                v89 = v130.var3;
                v121 = v130.var3;
              }
              if (*(_BYTE *)(a1 + 25))
              {
                HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, v89);
                v90 = (void *)objc_claimAutoreleasedReturnValue();
                if (v90)
                {
                  objc_msgSend(v122, "objectForKeyedSubscript:", v90);
                  v91 = (void *)objc_claimAutoreleasedReturnValue();
                  v92 = v91;
                  if (v91)
                  {
                    if (objc_msgSend(v91, "longLongValue") == v89 || *(_BYTE *)(a1 + 24))
                    {
                      v93 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v89);
                      v94 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v93);
                      HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)v94, &v130, v127 == 0);
                      goto LABEL_134;
                    }
                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v89);
                    v95 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v122, "setObject:forKeyedSubscript:", v95, v90);

                    v96 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v89);
                    v94 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v96);
                    HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)v94, &v130, v127 == 0);
LABEL_134:
                    HDStatisticsTimeInterval::addSample(v94 + 12, &v130, v127 == 0);
                    LOBYTE(v127) = 1;
                  }

                }
              }
              v62 = 1;
            }
            if (v76)
            {
              v97 = v88 != 0;
              v99 = *(double **)(a1 + 104);
              v98 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v99 >= v98)
              {
                v87 = *v128;
                v100 = 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (char *)*v128) >> 4);
                v101 = v100 + 1;
                if (v100 + 1 > 0x555555555555555)
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (_QWORD)v87) >> 4);
                if (2 * v102 > v101)
                  v101 = 2 * v102;
                if (v102 >= 0x2AAAAAAAAAAAAAALL)
                  v103 = 0x555555555555555;
                else
                  v103 = v101;
                if (v103)
                {
                  v103 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v103);
                  v87 = *(double **)(a1 + 96);
                  v99 = *(double **)(a1 + 104);
                }
                else
                {
                  v104 = 0;
                }
                v105 = v103 + 48 * v100;
                *(double *)v105 = var0;
                *(double *)(v105 + 8) = v77;
                *(double *)(v105 + 16) = var2;
                *(_QWORD *)(v105 + 24) = var3;
                *(_BYTE *)(v105 + 32) = v76;
                *(_BYTE *)(v105 + 33) = var5;
                *(_BYTE *)(v105 + 40) = v124;
                *(_BYTE *)(v105 + 41) = v127;
                *(_BYTE *)(v105 + 42) = v97;
                v106 = v105;
                if (v99 != v87)
                {
                  do
                  {
                    v107 = *((_OWORD *)v99 - 3);
                    v108 = *((_OWORD *)v99 - 2);
                    *(_OWORD *)(v106 - 21) = *(_OWORD *)((char *)v99 - 21);
                    *(_OWORD *)(v106 - 48) = v107;
                    *(_OWORD *)(v106 - 32) = v108;
                    v106 -= 48;
                    v99 -= 6;
                  }
                  while (v99 != v87);
                  v87 = *v128;
                }
                v69 = (_OWORD *)(v105 + 48);
                *(_QWORD *)(a1 + 96) = v106;
                *(_QWORD *)(a1 + 104) = v105 + 48;
                *(_QWORD *)(a1 + 112) = v103 + 48 * v104;
                if (v87)
LABEL_115:
                  operator delete(v87);
              }
              else
              {
                *v99 = var0;
                v99[1] = v77;
                v99[2] = var2;
                *((_QWORD *)v99 + 3) = var3;
                *((_BYTE *)v99 + 32) = v76;
                *((_BYTE *)v99 + 33) = var5;
                *((_BYTE *)v99 + 40) = v124;
                *((_BYTE *)v99 + 41) = v127;
                v69 = v99 + 6;
                *((_BYTE *)v99 + 42) = v97;
              }
LABEL_116:
              *(_QWORD *)(a1 + 104) = v69;
            }
            v63 += 6;
            if (v63 == (double *)v7)
              goto LABEL_156;
            continue;
          }
        }
        v9 = v6[1];
        v10 = v6[2];
        v11 = *((_QWORD *)v6 + 3);
        v12 = *((_BYTE *)v6 + 32);
        v13 = *((_BYTE *)v6 + 33);
        if (v12)
        {
          v14 = v9 < a2;
          v15 = v10 > a2;
          if (v10 < a2)
            v16 = v6[2];
          else
            v16 = a2;
          if (v10 >= a2)
          {
            v17 = *((_BYTE *)v6 + 33);
          }
          else
          {
            v14 = v10 > v9;
            v17 = 0;
          }
          if (v10 < a2)
            v18 = 0.0;
          else
            v18 = *v6;
          if (v10 < a2)
            v19 = 0.0;
          else
            v19 = a2;
          if (v10 < a2)
            v20 = 0.0;
          else
            v20 = v6[2];
          if (v10 < a2)
            v21 = 0;
          else
            v21 = *((_QWORD *)v6 + 3);
          if (v10 < a2)
            v15 = 0;
          v22 = v10 > v9;
          if (v9 <= a2)
          {
            v10 = v16;
            v23 = v14;
          }
          else
          {
            v20 = v6[2];
            v23 = 0;
          }
          if (v9 > a2)
            v12 = *((_BYTE *)v6 + 33);
          else
            v12 = v17;
          if (v9 > a2)
            v24 = *v6;
          else
            v24 = v18;
          if (v9 > a2)
            v25 = v6[1];
          else
            v25 = v19;
          if (v9 > a2)
            v26 = *((_QWORD *)v6 + 3);
          else
            v26 = v21;
          if (v9 > a2)
            v15 = v22;
        }
        else
        {
          v23 = 0;
          v26 = 0;
          v15 = 0;
          v24 = 0.0;
          v25 = 0.0;
          v20 = 0.0;
        }
        v50 = *((unsigned __int8 *)v6 + 42);
        v51 = *((unsigned __int8 *)v6 + 41);
        v52 = *((unsigned __int8 *)v6 + 40);
        v130.var0 = *v6;
        v130.var1 = v9;
        v130.var2 = v10;
        v130.var3 = v11;
        v130.var4 = v23;
        v130.var5 = v13;
        *(_DWORD *)(&v130.var5 + 1) = *(_DWORD *)((char *)v6 + 34);
        *(_WORD *)(&v130.var5 + 5) = *((_WORD *)v6 + 19);
        *(double *)&v131 = v24;
        *((double *)&v131 + 1) = v25;
        *(double *)&v132 = v20;
        *((_QWORD *)&v132 + 1) = v26;
        LOBYTE(v133) = v15;
        HIBYTE(v133) = v12;
        HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v130, v123);
        v53 = v52 != 0;
        v54 = v51 != 0;
        v55 = v50 != 0;
        if (v130.var4)
        {
          v56 = v50 == 0;
          HDStatisticsNoiseLevel::addSample(v120, &v130, v56);
          HDStatisticsTimeInterval::addSample(v119, &v130, v56);
          if (*(_BYTE *)(a1 + 25))
          {
            v57 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v130.var3);
            v58 = (uint64_t *)HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v57);
            HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)v58, &v130, v51 == 0);
            HDStatisticsTimeInterval::addSample(v58 + 12, &v130, v51 == 0);
          }
          v53 = 1;
          v54 = 1;
          v55 = 1;
        }
        if ((_BYTE)v133)
        {
          LOWORD(v129) = v133;
          v59 = v132;
          v60 = *v128;
          *(_OWORD *)v60 = v131;
          *((_OWORD *)v60 + 1) = v59;
          *((_QWORD *)v60 + 4) = v129;
          *((_BYTE *)v60 + 40) = v53;
          *((_BYTE *)v60 + 41) = v54;
          *((_BYTE *)v60 + 42) = v55;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_165:
      v113 = *(double *)(a1 + 56);
      if (v113 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsNoiseLevel, HDStatisticsTimeInterval>]");
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v114, "handleFailureInFunction:file:lineNumber:description:", v115, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v113 = *(double *)(a1 + 56);
      }
      v5 = v113;
    }
    while (v113 < a2);
  }
}

void sub_1B7D28DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v12;

  v12 = a2;
  v4 = *(_QWORD **)(a1 + 264);
  if (!v4)
    goto LABEL_11;
  v5 = (uint64_t **)(a1 + 264);
  v6 = (uint64_t **)(a1 + 264);
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = (uint64_t **)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v5 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 256), a2, &v12);
    HDStatisticsNoiseLevel::configure((id *)v10 + 5, *(HDStatisticsNoiseLevelConfiguration **)(a1 + 32));
    v6 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 256), a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 344), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 384);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D28FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 424);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D290B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v10 = (char *)operator new(0xB0uLL);
    v12[0] = v10;
    v12[1] = v6;
    v13 = 0;
    *((_QWORD *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *((_QWORD *)v10 + 21) = 0;
    *((_QWORD *)v10 + 15) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
    *((_WORD *)v10 + 64) = 257;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *((_QWORD *)v10 + 21) = 0;
    v13 = 1;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1B7D291F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 320);
      v11 = *(char **)(*(_QWORD *)a3 + 328);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 328);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 328);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 320);
      v24 = *(char **)(*(_QWORD *)a3 + 328);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 328);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 328);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 320);
            v31 = *(char **)(*(_QWORD *)a3 + 328);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 328);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 328);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

double HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::overallStatistics(double *a1, uint64_t a2)
{
  _QWORD *v4;
  const void *v5;
  double result;

  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)a1, (const HDStatisticsNoiseLevel *)(a2 + 120));
  v4[13] = 0;
  v4 += 13;
  v5 = *(const void **)(a2 + 224);
  *(v4 - 1) = *(_QWORD *)(a2 + 216);
  v4[1] = 0;
  v4[2] = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v4, v5, *(_QWORD *)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - (_QWORD)v5) >> 4);
  result = *(double *)(a2 + 248);
  a1[16] = result;
  return result;
}

void sub_1B7D2B2AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  BOOL v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v48;
  unint64_t v49;
  _QWORD v50[2];
  char v51;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 256);
  v46 = (_QWORD *)(a2 + 264);
  if (v3 == (_QWORD *)(a2 + 264))
    return;
  v48 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_80;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v49 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0xA0uLL);
      v50[0] = v19;
      v50[1] = v48;
      v51 = 0;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *((_QWORD *)v19 + 19) = 0;
      *((_QWORD *)v19 + 13) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
      *((_WORD *)v19 + 56) = 257;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *((_QWORD *)v19 + 19) = 0;
      v51 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        v12 = (uint64_t *)v50[0];
        if (v37)
        {
          *(_QWORD *)v50[0] = *v37;
        }
        else
        {
          *(_QWORD *)v50[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v48;
          if (!*v12)
          {
LABEL_76:
            v50[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v50);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v48;
            if (*v48)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v48;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v45 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v45)
            operator delete(v45);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = v12[1];
      if (v13 == v8)
        break;
      if (v49 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = v8;
    v15 = (id)v12[2];
    v16 = v6;
    v17 = v16;
    if (v15 != v16)
    {
      v18 = objc_msgSend(v15, "isEqualToString:", v16);

      v8 = v14;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

LABEL_77:
    v2 = (unint64_t)(v12 + 2);
    *(_OWORD *)(v12 + 3) = *(_OWORD *)(v3 + 5);
    v39 = *(_OWORD *)(v3 + 7);
    v40 = *(_OWORD *)(v3 + 9);
    v41 = *(_OWORD *)(v3 + 11);
    *(_OWORD *)((char *)v12 + 82) = *(_OWORD *)((char *)v3 + 98);
    *(_OWORD *)(v12 + 9) = v41;
    *(_OWORD *)(v12 + 7) = v40;
    *(_OWORD *)(v12 + 5) = v39;
    objc_storeStrong((id *)v12 + 13, (id)v3[15]);
    *((_WORD *)v12 + 56) = *((_WORD *)v3 + 64);
    v12[15] = v3[17];
    if (v12 + 2 != v3 + 4)
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 128, (char *)v3[18], v3[19], (uint64_t)(v3[19] - v3[18]) >> 4);
    v12[19] = v3[21];

LABEL_80:
    v42 = (_QWORD *)v3[1];
    if (v42)
    {
      do
      {
        v43 = v42;
        v42 = (_QWORD *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        v43 = (_QWORD *)v3[2];
        v44 = *v43 == (_QWORD)v3;
        v3 = v43;
      }
      while (!v44);
    }
    v3 = v43;
  }
  while (v43 != v46);
}

void sub_1B7D2B874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D073D0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D073D0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D073D0;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D2BAA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D073D0;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 96;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D07460;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D07460;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D07460;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D2BCD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D07460;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsNoiseLevel const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D074F0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D074F0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 616))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 616))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7D2BFD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = a1 + 120;
    do
    {
      v6 = *(_QWORD *)(a1 + 592);
      v7 = *(_QWORD *)(a1 + 584);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D2C1E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v6;
  double v7;
  uint64_t *v8;
  double v9;
  double v10;
  unint64_t v11;
  char v12;
  double v13;
  double v14;
  _BOOL4 v15;
  unint64_t v16;
  char v17;
  double v18;
  double v19;
  uint64_t *v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  int8x16_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t **v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  double v60;
  double v61;
  double v62;

  v3 = *(_BYTE *)(a2 + 32);
  if (!v3)
    return;
  v6 = a1 + 8;
  v7 = *(double *)(a1 + 8);
  v8 = *(uint64_t **)a2;
  v9 = *(double *)(a2 + 8);
  v10 = *(double *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_BYTE *)(a2 + 33);
  v13 = v9;
  if (v9 <= v7)
  {
    v13 = *(double *)(a1 + 8);
    if (v10 < v7)
      return;
  }
  if (v10 <= v13)
    return;
  v14 = *(double *)(a1 + 16);
  if (v13 <= v14)
  {
    if (v10 >= v14)
    {
      v15 = v10 > v14;
      v16 = *(_QWORD *)(a2 + 24);
      v18 = *(double *)(a2 + 16);
      v19 = *(double *)(a1 + 16);
      v20 = *(uint64_t **)a2;
      v17 = *(_BYTE *)(a2 + 33);
      if (v13 >= v14)
      {
        v16 = *(_QWORD *)(a2 + 24);
        v18 = *(double *)(a2 + 16);
        v19 = *(double *)(a1 + 16);
        v20 = *(uint64_t **)a2;
        v17 = *(_BYTE *)(a2 + 33);
        goto LABEL_48;
      }
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0.0;
      v14 = *(double *)(a2 + 16);
      v19 = 0.0;
      v20 = 0;
    }
    v60 = v14;
    v61 = v13;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 288, v11, v11);
    v21 = *(_QWORD *)(a1 + 112);
    if (v21 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 160) <= 0)
    {
      v26.f64[1] = *(float64_t *)(a1 + 16);
      v23 = v60;
      v22 = v61;
      v26.f64[0] = v61;
      v27.f64[0] = *(float64_t *)(a1 + 8);
      v27.f64[1] = v60;
      v28 = (int8x16_t)vcgtq_f64(v27, v26);
      v27.f64[0] = v61;
      *(int8x16_t *)(a1 + 48) = vbslq_s8(v28, *(int8x16_t *)(a1 + 8), (int8x16_t)v27);
      if (!a3)
      {
LABEL_25:
        v29 = *(_QWORD *)(a1 + 120);
        if (v21 >= v29)
        {
          v31 = *(_QWORD *)(a1 + 104);
          v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v31) >> 4);
          v33 = v32 + 1;
          if (v32 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v31) >> 4);
          if (2 * v34 > v33)
            v33 = 2 * v34;
          if (v34 >= 0x2AAAAAAAAAAAAAALL)
            v35 = 0x555555555555555;
          else
            v35 = v33;
          if (v35)
          {
            v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v35);
            v23 = v60;
            v22 = v61;
          }
          else
          {
            v36 = 0;
          }
          v37 = v35 + 48 * v32;
          v38 = v35 + 48 * v36;
          *(_QWORD *)v37 = v8;
          *(double *)(v37 + 8) = v22;
          *(double *)(v37 + 16) = v23;
          *(_QWORD *)(v37 + 24) = v11;
          *(_BYTE *)(v37 + 32) = 1;
          *(_BYTE *)(v37 + 33) = v12;
          *(_WORD *)(v37 + 40) = 0;
          *(_BYTE *)(v37 + 42) = 0;
          v30 = v37 + 48;
          v40 = *(char **)(a1 + 104);
          v39 = *(char **)(a1 + 112);
          if (v39 != v40)
          {
            do
            {
              v41 = *((_OWORD *)v39 - 3);
              v42 = *((_OWORD *)v39 - 2);
              *(_OWORD *)(v37 - 21) = *(_OWORD *)(v39 - 21);
              *(_OWORD *)(v37 - 48) = v41;
              *(_OWORD *)(v37 - 32) = v42;
              v37 -= 48;
              v39 -= 48;
            }
            while (v39 != v40);
            v39 = *(char **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 104) = v37;
          *(_QWORD *)(a1 + 112) = v30;
          *(_QWORD *)(a1 + 120) = v38;
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v21 = v8;
          *(double *)(v21 + 8) = v22;
          *(double *)(v21 + 16) = v23;
          *(_QWORD *)(v21 + 24) = v11;
          *(_BYTE *)(v21 + 32) = 1;
          *(_BYTE *)(v21 + 33) = v12;
          *(_WORD *)(v21 + 40) = 0;
          v30 = v21 + 48;
          *(_BYTE *)(v21 + 42) = 0;
        }
        *(_QWORD *)(a1 + 112) = v30;
        if (!*(_BYTE *)(a1 + 200) || *(double *)(a1 + 176) <= v9)
        {
          *(_QWORD *)(a1 + 168) = v8;
          *(double *)(a1 + 176) = v9;
          *(double *)(a1 + 184) = v10;
          *(_QWORD *)(a1 + 192) = v11;
          *(_BYTE *)(a1 + 200) = v3;
          *(_BYTE *)(a1 + 201) = v12;
        }
        if (*(_BYTE *)(a1 + 33))
        {
          v43 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v6, v11);
          v44 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsForSource(v6, v43);
          if (!*((_BYTE *)v44 + 72) || *((double *)v44 + 6) <= v9)
          {
            v44[5] = v8;
            *((double *)v44 + 6) = v9;
            *((double *)v44 + 7) = v10;
            v44[8] = (uint64_t *)v11;
            *((_BYTE *)v44 + 72) = v3;
            *((_BYTE *)v44 + 73) = v12;
          }
        }
LABEL_48:
        v12 = v17;
        v8 = v20;
        v13 = v19;
        v10 = v18;
        v11 = v16;
        if (!v15)
          return;
        goto LABEL_49;
      }
    }
    else
    {
      v23 = v60;
      v22 = v61;
      if (v61 < *(double *)(a1 + 48))
      {
        v24 = *(double *)(a1 + 8);
        if (v61 >= v24)
          v24 = v61;
        *(double *)(a1 + 48) = v24;
      }
      if (v60 > *(double *)(a1 + 56))
      {
        v25 = *(double *)(a1 + 16);
        if (v25 >= v60)
          v25 = v60;
        *(double *)(a1 + 56) = v25;
      }
      if (!a3)
        goto LABEL_25;
    }
    if (v22 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime(v6, v22);
      v23 = v60;
      v22 = v61;
      v21 = *(_QWORD *)(a1 + 112);
    }
    goto LABEL_25;
  }
  LOBYTE(v15) = 1;
LABEL_49:
  v45 = *(_QWORD *)(a1 + 480);
  v46 = *(_QWORD *)(a1 + 488);
  if (v45 >= v46)
  {
    v48 = *(_QWORD *)(a1 + 472);
    v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v48) >> 3);
    v50 = v49 + 1;
    if (v49 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v48) >> 3);
    if (2 * v51 > v50)
      v50 = 2 * v51;
    if (v51 >= 0x333333333333333)
      v52 = 0x666666666666666;
    else
      v52 = v50;
    if (v52)
    {
      v62 = v13;
      v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v52);
      v13 = v62;
    }
    else
    {
      v53 = 0;
    }
    v54 = v52 + 40 * v49;
    v55 = v52 + 40 * v53;
    *(_QWORD *)v54 = v8;
    *(double *)(v54 + 8) = v13;
    *(double *)(v54 + 16) = v10;
    *(_QWORD *)(v54 + 24) = v11;
    *(_BYTE *)(v54 + 32) = v15;
    *(_BYTE *)(v54 + 33) = v12;
    v47 = v54 + 40;
    v57 = *(char **)(a1 + 472);
    v56 = *(char **)(a1 + 480);
    if (v56 != v57)
    {
      do
      {
        v58 = *(_OWORD *)(v56 - 40);
        v59 = *(_OWORD *)(v56 - 24);
        *(_WORD *)(v54 - 8) = *((_WORD *)v56 - 4);
        *(_OWORD *)(v54 - 24) = v59;
        *(_OWORD *)(v54 - 40) = v58;
        v54 -= 40;
        v56 -= 40;
      }
      while (v56 != v57);
      v56 = *(char **)(a1 + 472);
    }
    *(_QWORD *)(a1 + 472) = v54;
    *(_QWORD *)(a1 + 480) = v47;
    *(_QWORD *)(a1 + 488) = v55;
    if (v56)
      operator delete(v56);
  }
  else
  {
    *(_QWORD *)v45 = v8;
    *(double *)(v45 + 8) = v13;
    *(double *)(v45 + 16) = v10;
    *(_QWORD *)(v45 + 24) = v11;
    *(_BYTE *)(v45 + 32) = v15;
    v47 = v45 + 40;
    *(_BYTE *)(v45 + 33) = v12;
  }
  *(_QWORD *)(a1 + 480) = v47;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 618))
  {
    *(_BYTE *)(a1 + 620) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 620) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D2C740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 472), *(_QWORD *)(a1 + 480), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 480) - *(_QWORD *)(a1 + 472)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D2C828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  HDQuantitySampleOverlapProcessor *v8;
  void *v9;
  HDQuantitySampleOverlapProcessor *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *i;
  _QWORD *v18;

  objc_storeStrong((id *)(a1 + 496), *(id *)(a1 + 40));
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v8 = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  v9 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v8;
  v10 = v8;

  v11 = *(void **)(a1 + 232);
  *(_WORD *)(a1 + 216) = 257;
  *(_QWORD *)(a1 + 224) = 0;
  if (v11)
  {
    *(_QWORD *)(a1 + 240) = v11;
    operator delete(v11);
  }
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;

  if (*(_QWORD *)(a1 + 280))
  {
    v12 = *(_QWORD **)(a1 + 264);
    v13 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 264) = a1 + 272;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    if (v12[1])
      v14 = (_QWORD *)v12[1];
    else
      v14 = v12;
    if (v14)
    {
      v15 = (_QWORD *)v14[2];
      if (v15)
      {
        v16 = (_QWORD *)*v15;
        if ((_QWORD *)*v15 == v14)
        {
          *v15 = 0;
          while (1)
          {
            v18 = (_QWORD *)v15[1];
            if (!v18)
              break;
            do
            {
              v15 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
        }
        else
        {
          for (v15[1] = 0; v16; v16 = (_QWORD *)v15[1])
          {
            do
            {
              v15 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(v14);
        for (i = (_QWORD *)v15[2]; i; i = (_QWORD *)i[2])
          v15 = i;
        v14 = v15;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>>>::destroy(v14);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::setStatisticsConfiguration(a1 + 8, *(void **)(a1 + 496));
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 620))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 620) = 0;
  }

}

void sub_1B7D2CA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D2CAAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsTemporallyWeightedDiscrete<HDStatisticsTemporallyWeightedDiscreteParameters>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 632));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 616) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D2CE10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40067036FCLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D2CFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D2D228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  _BOOL4 v8;
  int v9;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  BOOL v16;
  char v17;

  v7 = *(double *)(a1 + 32);
  if (v7 >= a6)
  {
    if (v7 <= a7)
    {
      v8 = v7 < a7;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = a7 > a6;
  }
  v12 = a5;
  v13 = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  v9 = *(unsigned __int8 *)(a1 + 56);
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v12, a3, a4);
  }
  else
  {
    if (v8)
    {
      v11 = *(double *)(a1 + 40);
      if (a6 <= v11)
      {
        if (a7 >= v11)
        {
          v9 = a6 < v11;
          a7 = *(double *)(a1 + 40);
        }
        else
        {
          v9 = a7 > a6;
        }
      }
    }
    v13 = a6;
    v14 = a7;
    v16 = v9;
    if (v9)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v12, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 616))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D2DED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D2DF74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI22HDStatisticsNoiseLevel24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsNoiseLevel,HDStatisticsTimeInterval>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D075A0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 104) = 0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_WORD *)(a1 + 624) = 1;
  *(_BYTE *)(a1 + 626) = 0;
  *(_BYTE *)(a1 + 628) = 0;
  *(_QWORD *)(a1 + 632) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 672) = 0;
  return a1;
}

void sub_1B7D2E038(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;
  id *v3;
  void *v5;

  v3 = v2;
  objc_destroyWeak(v3);

  v5 = *(void **)(v1 + 72);
  if (v5)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)v1);
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D075A0;
  v2 = *(void **)(a1 + 656);
  if (v2)
  {
    *(_QWORD *)(a1 + 664) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 592);
  if (v3)
  {
    *(_QWORD *)(a1 + 600) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 624) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_configureForStartTime(a1);

}

void sub_1B7D2E130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 632) = v4;
    v3 = v5;
  }

}

void sub_1B7D2E190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 80, a2);
  v7 = a2;
  v4 = a1[80];
  v5 = a1[77];
  a1[77] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[77]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 280) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D2E324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[59];

  if (*(_BYTE *)(a1 + 624))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D2E3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 626))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 625))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 624))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 627))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 664);
      v20 = *(_QWORD *)(a1 + 672);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 656);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 664);
        v35 = *(char **)(a1 + 656);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 656);
        }
        *(_QWORD *)(a1 + 656) = v30;
        *(_QWORD *)(a1 + 664) = v23;
        *(_QWORD *)(a1 + 672) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 664) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7D2E66C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 626))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 626) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 625))
    goto LABEL_5;
  v9 = *(void **)(a1 + 648);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_400);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 648);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 648);
  *(_QWORD *)(a1 + 648) = 0;

  *(_BYTE *)(a1 + 625) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 656);
    *(_QWORD *)(a1 + 672) = 0;
    *(_QWORD *)(a1 + 664) = 0;
    *(_QWORD *)(a1 + 656) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 656);
      v37 = *(__int128 **)(a1 + 664);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 664);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 664) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 656);
  v39 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 600) != *(_QWORD *)(a1 + 592))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 600) != *(_QWORD *)(a1 + 592));
  }
  *(_BYTE *)(a1 + 626) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 628))
    {
      *(_BYTE *)(a1 + 628) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 626) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D2ED64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 626) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 627) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 626))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 626))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 648);
    *(_QWORD *)(a1 + 648) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 625) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 625))
  {
    v8 = *(void **)(a1 + 648);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 648);
      *(_QWORD *)(a1 + 648) = v9;

      v8 = *(void **)(a1 + 648);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D2F060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 624) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 624) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D2F180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 624) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 624), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsNoiseLevel>::archive((uint64_t)&v37, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(int **)(a1 + 384);
  if (v9 != (int *)(a1 + 392))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsNoiseLevel>::archive((uint64_t)&v37, v9 + 10);
      v10 = *((_QWORD *)v9 + 4);
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (int *)*((_QWORD *)v9 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(int **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (int *)*((_QWORD *)v9 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (int *)(a1 + 392));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 592);
  for (k = *(int8x16_t **)(a1 + 600); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D2F518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  id v25;
  _QWORD **v26;
  _QWORD **i;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  id v40;
  __int128 v41;
  uint64_t v42;
  uint64_t j;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  id v63;
  id v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  __n128 v68;
  void *v69[2];
  __int128 v70;
  int8x16_t v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  int8x16_t v75;
  uint64_t v76;
  uint64_t v77[4];
  void *__p;
  char *v79;
  unint64_t v80;
  int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _OWORD v85[2];
  HDQuantitySampleOverlapProcessor *v86;
  __int16 v87;
  __int128 v88;
  __int128 v89;
  __int16 v90;
  uint64_t **v91;
  uint64_t *v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  int v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  int v101;
  __int128 v102;
  __int128 v103;
  int v104;
  __int128 v105;
  __int128 v106;
  int v107;
  void (**v108)(statistics::StatisticsEngine *__hidden);
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  _BYTE v115[32];
  unint64_t v116;
  int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _OWORD v121[2];
  id obj;
  __int16 v123;
  __int128 v124;
  __int128 v125;
  __int16 v126;

  v64 = a2;
  *(_BYTE *)(a1 + 624) = objc_msgSend(v64, "decodeBoolForKey:", CFSTR("needs_config"));
  v63 = v64;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket((uint64_t)&v68.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v69 = 0u;
  v70 = 0u;
  v116 = 0;
  v3 = objc_retainAutorelease(v63);
  PB::Reader::Reader((PB::Reader *)v115, (const unsigned __int8 *)objc_msgSend(v3, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v116));
  v66 = v3;
  v67 = a1;
  v108 = &off_1E6D09A88;
  v109 = 0;
  v113 = 0;
  v111 = 0;
  v112 = 0;
  v114 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v108, (PB::Reader *)v115);
  v4 = v109;
  v68.n128_u64[0] = v110;
  if (v109)
  {
    v74 = 0;
    memset(v77, 0, sizeof(v77));
    __p = 0;
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    memset(v85, 0, 26);
    v80 = 0;
    v79 = 0;
    v81 = 0;
    v86 = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
    v87 = 257;
    v88 = 0u;
    v89 = 0u;
    v90 = 0;
    v93 = 0;
    v92 = 0;
    v91 = &v92;
    v94 = 0u;
    v95 = 0u;
    v96 = 1065353216;
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v100 = 0;
    v101 = 1065353216;
    v102 = 0u;
    v103 = 0u;
    v104 = 1065353216;
    v105 = 0u;
    v106 = 0u;
    v107 = 1065353216;
    v71 = vextq_s8(*(int8x16_t *)(v4 + 8), *(int8x16_t *)(v4 + 8), 8uLL);
    v5 = *(_QWORD *)(v4 + 72);
    v72 = *(_QWORD *)(v4 + 64);
    v73 = *(_WORD *)(v4 + 185);
    v75 = vextq_s8(*(int8x16_t *)(v4 + 24), *(int8x16_t *)(v4 + 24), 8uLL);
    v76 = v5;
    v6 = *(_QWORD *)(v4 + 80);
    v7 = *(_QWORD *)(v4 + 88);
    v65 = (_QWORD *)v4;
    if (v6 != v7)
    {
      v8 = v79;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 24);
        v10 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v11 = *(_QWORD *)(*(_QWORD *)v6 + 8);
        v12 = *(_QWORD *)(*(_QWORD *)v6 + 16);
        v13 = *(_BYTE *)(*(_QWORD *)v6 + 41);
        v14 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        if ((unint64_t)v8 >= v80)
        {
          v15 = (char *)__p;
          v16 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)__p) >> 4);
          v17 = v16 + 1;
          if (v16 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v80 - (_QWORD)__p) >> 4) > v17)
            v17 = 0x5555555555555556 * ((uint64_t)(v80 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v18 = 0x555555555555555;
          else
            v18 = v17;
          if (v18)
          {
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v18);
            v8 = v79;
            v15 = (char *)__p;
          }
          else
          {
            v19 = 0;
          }
          v20 = (_QWORD *)(v18 + 48 * v16);
          *v20 = v10;
          v20[1] = v9;
          v20[2] = v11;
          v20[3] = v12;
          *((_WORD *)v20 + 16) = 1;
          *((_BYTE *)v20 + 40) = 0;
          *((_BYTE *)v20 + 41) = v13;
          *((_BYTE *)v20 + 42) = v14;
          v21 = (char *)v20;
          if (v8 != v15)
          {
            do
            {
              v22 = *((_OWORD *)v8 - 3);
              v23 = *((_OWORD *)v8 - 2);
              *(_OWORD *)(v21 - 21) = *(_OWORD *)(v8 - 21);
              *((_OWORD *)v21 - 3) = v22;
              *((_OWORD *)v21 - 2) = v23;
              v21 -= 48;
              v8 -= 48;
            }
            while (v8 != v15);
            v15 = (char *)__p;
          }
          v8 = (char *)(v20 + 6);
          __p = v21;
          v79 = (char *)(v20 + 6);
          v80 = v18 + 48 * v19;
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v8 = v10;
          *((_QWORD *)v8 + 1) = v9;
          *((_QWORD *)v8 + 2) = v11;
          *((_QWORD *)v8 + 3) = v12;
          *((_WORD *)v8 + 16) = 1;
          v8[40] = 0;
          v8[41] = v13;
          v8[42] = v14;
          v8 += 48;
        }
        v79 = v8;
        v6 += 8;
      }
      while (v6 != v7);
    }
    v24 = (_QWORD *)v65[13];
    if (v24)
    {
      HDStatisticsRelative<HDStatisticsNoiseLevel>::unarchive((uint64_t)&v117, v24);
      v81 = v117;
      v84 = v120;
      v85[0] = v121[0];
      *(_OWORD *)((char *)v85 + 10) = *(_OWORD *)((char *)v121 + 10);
      v82 = v118;
      v83 = v119;
      v25 = obj;
      objc_storeStrong((id *)&v86, obj);
      v87 = v123;
      v88 = v124;
      v89 = v125;
      v90 = v126;

    }
    v26 = (_QWORD **)v65[17];
    for (i = (_QWORD **)v65[18]; v26 != i; ++v26)
    {
      v28 = (uint64_t)*v26;
      HDStatisticsRelative<HDStatisticsNoiseLevel>::unarchive((uint64_t)&v117, *v26);
      v29 = *(_QWORD *)(v28 + 144);
      v30 = v92;
      v31 = &v92;
      v32 = &v92;
      if (v92)
      {
        do
        {
          while (1)
          {
            v32 = (uint64_t **)v30;
            v33 = v30[4];
            if (v33 <= v29)
              break;
            v30 = *v32;
            v31 = v32;
            if (!*v32)
              goto LABEL_32;
          }
          if (v33 >= v29)
          {
            v35 = (char *)v32;
            goto LABEL_35;
          }
          v30 = v32[1];
        }
        while (v30);
        v31 = v32 + 1;
      }
LABEL_32:
      v35 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v35 + 4) = v29;
      *(_OWORD *)(v35 + 40) = 0u;
      *(_OWORD *)(v35 + 56) = 0u;
      *(_OWORD *)(v35 + 72) = 0u;
      *(_OWORD *)(v35 + 88) = 0u;
      *(_OWORD *)(v35 + 104) = 0u;
      *(_OWORD *)(v35 + 120) = 0u;
      *(_OWORD *)(v35 + 136) = 0u;
      *(_OWORD *)(v35 + 152) = 0u;
      *(_OWORD *)(v35 + 168) = 0u;
      *((_QWORD *)v35 + 16) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
      *((_WORD *)v35 + 68) = 257;
      *((_OWORD *)v35 + 9) = 0u;
      *((_OWORD *)v35 + 10) = 0u;
      *((_WORD *)v35 + 88) = 0;
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = v32;
      *v31 = (uint64_t *)v35;
      v34 = (uint64_t *)v35;
      if (*v91)
      {
        v91 = (uint64_t **)*v91;
        v34 = *v31;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v92, v34);
      ++v93;
LABEL_35:
      *((_DWORD *)v35 + 10) = v117;
      v36 = v119;
      *((_OWORD *)v35 + 3) = v118;
      v37 = *(_OWORD *)((char *)v121 + 10);
      v39 = v120;
      v38 = v121[0];
      *((_OWORD *)v35 + 4) = v36;
      *((_OWORD *)v35 + 5) = v39;
      *((_OWORD *)v35 + 6) = v38;
      *(_OWORD *)(v35 + 106) = v37;
      v40 = obj;
      objc_storeStrong((id *)v35 + 16, obj);
      *((_WORD *)v35 + 68) = v123;
      v41 = v125;
      *((_OWORD *)v35 + 9) = v124;
      *((_OWORD *)v35 + 10) = v41;
      *((_WORD *)v35 + 88) = v126;

    }
    v42 = v65[5];
    for (j = v65[6]; v42 != j; v42 += 8)
    {
      v45 = *(double *)(*(_QWORD *)v42 + 8);
      v44 = *(double *)(*(_QWORD *)v42 + 16);
      if (v45 >= v44)
        v46 = *(double *)(*(_QWORD *)v42 + 16);
      else
        v46 = *(double *)(*(_QWORD *)v42 + 8);
      if (v44 < v45)
        v44 = *(double *)(*(_QWORD *)v42 + 8);
      HKIntervalMask<double>::_insertInterval(v77, v46, v44);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::operator=((uint64_t)&v68.n128_i64[1], (uint64_t)&v71);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)&v71);
  }
  v47 = v111;
  v48 = v112;
  if (v111 != v112)
  {
    v49 = (char *)v69[1];
    do
    {
      v50 = *(_QWORD *)(*(_QWORD *)v47 + 24);
      v51 = *(_QWORD *)(*(_QWORD *)v47 + 32);
      v52 = *(_QWORD *)(*(_QWORD *)v47 + 8);
      v53 = *(_QWORD *)(*(_QWORD *)v47 + 16);
      if ((unint64_t)v49 >= (unint64_t)v70)
      {
        v54 = (char *)v69[0];
        v55 = 0xCCCCCCCCCCCCCCCDLL * ((v49 - (char *)v69[0]) >> 3);
        v56 = v55 + 1;
        if (v55 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v70 - (unint64_t)v69[0]) >> 3) > v56)
          v56 = 0x999999999999999ALL * ((uint64_t)(v70 - (unint64_t)v69[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v70 - (unint64_t)v69[0]) >> 3) >= 0x333333333333333)
          v57 = 0x666666666666666;
        else
          v57 = v56;
        if (v57)
        {
          v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v57);
          v49 = (char *)v69[1];
          v54 = (char *)v69[0];
        }
        else
        {
          v58 = 0;
        }
        v59 = v57 + 40 * v55;
        *(_QWORD *)v59 = v51;
        *(_QWORD *)(v59 + 8) = v50;
        *(_QWORD *)(v59 + 16) = v52;
        *(_QWORD *)(v59 + 24) = v53;
        *(_WORD *)(v59 + 32) = 1;
        v60 = (char *)v59;
        if (v49 != v54)
        {
          do
          {
            v61 = *(_OWORD *)(v49 - 40);
            v62 = *(_OWORD *)(v49 - 24);
            *((_WORD *)v60 - 4) = *((_WORD *)v49 - 4);
            *(_OWORD *)(v60 - 24) = v62;
            *(_OWORD *)(v60 - 40) = v61;
            v60 -= 40;
            v49 -= 40;
          }
          while (v49 != v54);
          v54 = (char *)v69[0];
        }
        v49 = (char *)(v59 + 40);
        v69[0] = v60;
        v69[1] = (void *)(v59 + 40);
        *(_QWORD *)&v70 = v57 + 40 * v58;
        if (v54)
          operator delete(v54);
      }
      else
      {
        *(_QWORD *)v49 = v51;
        *((_QWORD *)v49 + 1) = v50;
        *((_QWORD *)v49 + 2) = v52;
        *((_QWORD *)v49 + 3) = v53;
        *((_WORD *)v49 + 16) = 1;
        v49 += 40;
      }
      v69[1] = v49;
      v47 += 8;
    }
    while (v47 != v48);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v108);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::operator=((_QWORD *)(v67 + 112), &v68);
  if (v69[0])
  {
    v69[1] = v69[0];
    operator delete(v69[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)&v68.n128_i64[1]);

}

void sub_1B7D2FCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x3F0]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3A0]);
  v10 = (void *)STACK[0x388];
  if (STACK[0x388])
  {
    STACK[0x390] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x360]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy((_QWORD *)STACK[0x350]);

  v11 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x298]);
  v12 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x420]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 208) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *(_WORD *)(a1 + 216) = 257;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_WORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_QWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  return a1;
}

void sub_1B7D2FED8(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;
  void **v3;
  id *v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;

  v6 = v3;
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 104) = v8;
    operator delete(v8);
  }
  objc_destroyWeak(v2);
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 72) = v9;
    operator delete(v9);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 480);
  if (v2)
  {
    *(_QWORD *)(a1 + 488) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 432);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 392);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 352);
  v2 = *(void **)(a1 + 328);
  if (v2)
  {
    *(_QWORD *)(a1 + 336) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 288);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(*(_QWORD **)(a1 + 272));

  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[472];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[408];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 640));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 624) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7D302B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 60), a2 + 30);
  v4 = a2[31].n128_u64[1];
  a2[31].n128_u64[1] = 0;
  v5 = (void *)a1[63];
  a1[63] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(a1 + 128), (const HDStatisticsNoiseLevel *)(a2 + 128));
  v12 = *(_OWORD *)(a2 + 240);
  v13 = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v12;
  v14 = (_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 256) = v13;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  v15 = *(_QWORD **)(a2 + 264);
  if (v15 != (_QWORD *)(a2 + 272))
  {
    v16 = 0;
    v17 = (_QWORD *)(a1 + 272);
    while (1)
    {
      v18 = (_QWORD *)(a1 + 272);
      if (v17 == v14)
        goto LABEL_12;
      v19 = v16;
      v20 = (_QWORD *)(a1 + 272);
      if (v16)
      {
        do
        {
          v18 = v19;
          v19 = (_QWORD *)v19[1];
        }
        while (v19);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v20[2];
          v21 = *v18 == (_QWORD)v20;
          v20 = v18;
        }
        while (v21);
      }
      v22 = v15[4];
      if (v18[4] < v22)
      {
LABEL_12:
        if (v16)
          v23 = (uint64_t **)v18;
        else
          v23 = (uint64_t **)(a1 + 272);
        if (v16)
          v24 = (uint64_t **)(v18 + 1);
        else
          v24 = (uint64_t **)(a1 + 272);
        if (!*v24)
        {
LABEL_28:
          v27 = operator new(0xB8uLL);
          v27[4] = v15[4];
          *((_DWORD *)v27 + 10) = *((_DWORD *)v15 + 10);
          HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(v27 + 6), (const HDStatisticsNoiseLevel *)(v15 + 6));
          v28 = *((_OWORD *)v15 + 9);
          v29 = *((_OWORD *)v15 + 10);
          v27[22] = v15[22];
          *((_OWORD *)v27 + 9) = v28;
          *((_OWORD *)v27 + 10) = v29;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 264), (uint64_t)v23, v24, v27);
        }
      }
      else
      {
        v24 = (uint64_t **)(a1 + 272);
        v23 = (uint64_t **)(a1 + 272);
        if (!v16)
          goto LABEL_28;
        v25 = v16;
        while (1)
        {
          while (1)
          {
            v23 = (uint64_t **)v25;
            v26 = v25[4];
            if (v26 <= v22)
              break;
            v25 = *v23;
            v24 = v23;
            if (!*v23)
              goto LABEL_28;
          }
          if (v26 >= v22)
            break;
          v25 = v23[1];
          if (!v25)
          {
            v24 = v23 + 1;
            goto LABEL_28;
          }
        }
      }
      v30 = (_QWORD *)v15[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v15[2];
          v21 = *v31 == (_QWORD)v15;
          v15 = v31;
        }
        while (!v21);
      }
      if (v31 == (_QWORD *)(a2 + 272))
        break;
      v16 = (_QWORD *)*v14;
      v17 = *(_QWORD **)(a1 + 264);
      v15 = v31;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 288, a2 + 288);
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 328), *(const void **)(a2 + 328), *(_QWORD *)(a2 + 336), (uint64_t)(*(_QWORD *)(a2 + 336) - *(_QWORD *)(a2 + 328)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 352, a2 + 352);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 392, a2 + 392);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 432, a2 + 432);
  return a1;
}

void sub_1B7D30660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v12 + 336) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(*v13);

  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 144);
  v11 = *(_OWORD *)(a2 + 160);
  v12 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 186) = *(_OWORD *)(a2 + 186);
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  objc_storeStrong((id *)(a1 + 208), *(id *)(a2 + 208));
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  v13 = *(_OWORD *)(a2 + 224);
  v14 = *(_OWORD *)(a2 + 240);
  *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v13;
  *(_OWORD *)(a1 + 240) = v14;
  v15 = a1 + 272;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(*(_QWORD **)(a1 + 272));
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v16 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 272) = v16;
  v17 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 280) = v17;
  if (v17)
  {
    *(_QWORD *)(v16 + 16) = v15;
    *(_QWORD *)(a2 + 264) = a2 + 272;
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(a2 + 280) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 264) = v15;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 288, (uint64_t *)(a2 + 288));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 328, (__n128 *)(a2 + 328));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 352, (uint64_t *)(a2 + 352));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 392, (uint64_t *)(a2 + 392));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 432, (uint64_t *)(a2 + 432));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  unint64_t v2;
  unint64_t v3;
  double v5;
  id v6;
  double *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id WeakRetained;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  __int128 v20;
  const HDStatisticsNoiseLevel *v21;
  uint64_t v22;
  void *v23;
  double v24;
  void *v25;
  void *v26;
  void *v27;
  double v28;
  double v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  id v41;
  id v42;
  void *v43;
  char v44;
  float v45;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  int8x8_t prime;
  void *v50;
  void *v51;
  uint64_t v52;
  _QWORD **v53;
  unint64_t v54;
  uint8x8_t v55;
  unint64_t v56;
  uint8x8_t v57;
  uint64_t v58;
  _QWORD *i;
  unint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD *v69;
  _QWORD *v70;
  BOOL v71;
  void *v72;
  uint64_t **v73;
  uint64_t *v74;
  const HDStatisticsNoiseLevel *v75;
  double v76;
  double v77;
  double v78;
  void *v79;
  void *v80;
  void *v81;
  double v82;
  double v83;
  void *v84;
  void *v85;
  _QWORD *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  int v91;
  void *v92;
  void *v93;
  int v94;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v103;
  id v104;
  id v105;
  void *v106;
  uint64_t v107;
  void *__p[2];
  __int128 v109;
  float v110;
  double v111;
  double v112[12];
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  double v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  double v121;
  double v122;
  double v123;
  id v124;
  _QWORD v125[3];
  _QWORD *v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = objc_alloc(MEMORY[0x1E0C99D68]);
  v7 = a2 + 5;
  if (v5 != -1.79769313e308)
    v7 = a2;
  v103 = (uint64_t)a2;
  v104 = (id)objc_msgSend(v6, "initWithTimeIntervalSinceReferenceDate:", *v7);
  if (a2[1] == 1.79769313e308)
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v9 = (void *)v8;
  v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = *(id *)(a1 + 16);
    if (objc_msgSend(v11, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v11, "underlyingSampleType");
      v12 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v12;
    }

  }
  v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v10, v104, v9);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v2 = (unint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(v103 + 328);
      v3 = *(_QWORD *)(v103 + 336);
      while (v15 != (uint64_t *)v3)
      {
        v16 = *v15;
        v17 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v17, "sourceForSourceID:", v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          if ((objc_msgSend((id)v2, "containsObject:", v18) & 1) == 0)
            objc_msgSend((id)v2, "addObject:", v18);
        }

        ++v15;
      }
      v19 = (void *)objc_msgSend((id)v2, "copy");
      objc_msgSend((id)v13, "_setSources:", v19);

    }
  }

  v125[0] = &off_1E6D07670;
  v126 = v125;
  v105 = (id)v13;
  LODWORD(v111) = *(_DWORD *)(v103 + 120);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)v112, (const HDStatisticsNoiseLevel *)(v103 + 128));
  v20 = *(_OWORD *)(v103 + 240);
  v113 = *(_OWORD *)(v103 + 224);
  v114 = v20;
  v115 = *(_QWORD *)(v103 + 256);
  if (!v126)
    std::__throw_bad_function_call[abi:ne180100]();
  v21 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(_QWORD *, double *))(*v126 + 48))(v126, &v111);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v116, v21);

  HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v116);
  v107 = *(_QWORD *)(a1 + 24);
  v22 = _HKStatisticsOptionBaselineRelativeQuantities();
  v23 = *(void **)(a1 + 16);
  if ((v22 & v107) != 0)
    objc_msgSend(v23, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v23, "canonicalUnit");
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v107 & 2) != 0)
  {
    v24 = 0.0;
    if (v117 > 0.0 && v116 > 0.0)
      v24 = log10(v116 / v117) * 10.0;
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v106, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setAverageQuantity:", v25);

  }
  if ((v107 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v106, v119);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setMinimumQuantity:", v26);

  }
  if ((v107 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v106, v118);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setMaximumQuantity:", v27);

  }
  if ((v107 & 0x20) != 0)
  {
    v28 = v122;
    v29 = v123;
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v106, v121);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setMostRecentQuantity:", v30);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v28, v29);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "setMostRecentQuantityDateInterval:", v31);

  }
  objc_msgSend(v105, "setDataCount:", v120);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_165;
  if ((v107 & 2) != 0)
    v100 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v100 = 0;
  if ((v107 & 4) != 0)
    v98 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v98 = 0;
  if ((v107 & 8) != 0)
    v96 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v96 = 0;
  if ((v107 & 0x20) != 0)
  {
    v97 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v99 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v99 = 0;
    v97 = 0;
  }
  v101 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)__p = 0u;
  v109 = 0u;
  v110 = 1.0;
  v32 = *(_QWORD **)(v103 + 264);
  if (v32 == (_QWORD *)(v103 + 272))
    goto LABEL_156;
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_bundleIdentifierForSourceID(v103, v32[4]);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = v33;
    if (!v33)
      goto LABEL_123;
    v35 = objc_msgSend(v33, "hash");
    v3 = v35;
    v36 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_66;
    v37 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v37.i16[0] = vaddlv_u8(v37);
    v38 = v37.u32[0];
    if (v37.u32[0] > 1uLL)
    {
      v2 = v35;
      if ((void *)v35 >= __p[1])
        v2 = v35 % (unint64_t)__p[1];
    }
    else
    {
      v2 = ((unint64_t)__p[1] - 1) & v35;
    }
    v39 = (uint64_t *)*((_QWORD *)__p[0] + v2);
    if (!v39 || (v13 = *v39) == 0)
    {
LABEL_66:
      v13 = (uint64_t)operator new(0xA8uLL);
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = v3;
      *(_QWORD *)(v13 + 16) = v34;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 152) = 0u;
      *(_QWORD *)(v13 + 112) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
      *(_WORD *)(v13 + 120) = 257;
      *(_OWORD *)(v13 + 128) = 0u;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_WORD *)(v13 + 160) = 0;
      v45 = (float)(unint64_t)(*((_QWORD *)&v109 + 1) + 1);
      if (v36 && (float)(v110 * (float)v36) >= v45)
      {
LABEL_112:
        v61 = __p[0];
        v62 = (uint64_t *)*((_QWORD *)__p[0] + v2);
        if (v62)
        {
          *(_QWORD *)v13 = *v62;
        }
        else
        {
          *(_QWORD *)v13 = v109;
          *(_QWORD *)&v109 = v13;
          v61[v2] = &v109;
          if (!*(_QWORD *)v13)
          {
LABEL_121:
            ++*((_QWORD *)&v109 + 1);
            goto LABEL_122;
          }
          v63 = *(_QWORD *)(*(_QWORD *)v13 + 8);
          if ((v36 & (v36 - 1)) != 0)
          {
            if (v63 >= v36)
              v63 %= v36;
          }
          else
          {
            v63 &= v36 - 1;
          }
          v62 = (uint64_t *)((char *)__p[0] + 8 * v63);
        }
        *v62 = v13;
        goto LABEL_121;
      }
      v46 = (v36 & (v36 - 1)) != 0;
      if (v36 < 3)
        v46 = 1;
      v47 = v46 | (2 * v36);
      v48 = vcvtps_u32_f32(v45 / v110);
      if (v47 <= v48)
        prime = (int8x8_t)v48;
      else
        prime = (int8x8_t)v47;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v36 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_78;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v56 = vcvtps_u32_f32((float)*((unint64_t *)&v109 + 1) / v110);
        if (__p[1] < (void *)3
          || (v57 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v57.i16[0] = vaddlv_u8(v57), v57.u32[0] > 1uLL))
        {
          v56 = std::__next_prime(v56);
        }
        else
        {
          v58 = 1 << -(char)__clz(v56 - 1);
          if (v56 >= 2)
            v56 = v58;
        }
        if (*(_QWORD *)&prime <= v56)
          prime = (int8x8_t)v56;
        if ((void *)*(_QWORD *)&prime >= __p[1])
        {
          v36 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_78:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v50 = operator new(8 * *(_QWORD *)&prime);
            v51 = __p[0];
            __p[0] = v50;
            if (v51)
              operator delete(v51);
            v52 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v52++) = 0;
            while (*(_QWORD *)&prime != v52);
            v53 = (_QWORD **)v109;
            if ((_QWORD)v109)
            {
              v54 = *(_QWORD *)(v109 + 8);
              v55 = (uint8x8_t)vcnt_s8(prime);
              v55.i16[0] = vaddlv_u8(v55);
              if (v55.u32[0] > 1uLL)
              {
                if (v54 >= *(_QWORD *)&prime)
                  v54 %= *(_QWORD *)&prime;
              }
              else
              {
                v54 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v54) = &v109;
              for (i = *v53; i; v54 = v60)
              {
                v60 = i[1];
                if (v55.u32[0] > 1uLL)
                {
                  if (v60 >= *(_QWORD *)&prime)
                    v60 %= *(_QWORD *)&prime;
                }
                else
                {
                  v60 &= *(_QWORD *)&prime - 1;
                }
                if (v60 != v54)
                {
                  if (!*((_QWORD *)__p[0] + v60))
                  {
                    *((_QWORD *)__p[0] + v60) = v53;
                    goto LABEL_103;
                  }
                  *v53 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v60);
                  **((_QWORD **)__p[0] + v60) = i;
                  i = v53;
                }
                v60 = v54;
LABEL_103:
                v53 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v36 = (unint64_t)prime;
            goto LABEL_107;
          }
          v72 = __p[0];
          __p[0] = 0;
          if (v72)
            operator delete(v72);
          v36 = 0;
          __p[1] = 0;
        }
      }
LABEL_107:
      if ((v36 & (v36 - 1)) != 0)
      {
        if (v3 >= v36)
          v2 = v3 % v36;
        else
          v2 = v3;
      }
      else
      {
        v2 = (v36 - 1) & v3;
      }
      goto LABEL_112;
    }
    while (1)
    {
      v40 = *(_QWORD *)(v13 + 8);
      if (v40 == v3)
        break;
      if (v38 > 1)
      {
        if ((void *)v40 >= __p[1])
          v40 %= (unint64_t)__p[1];
      }
      else
      {
        v40 &= (unint64_t)__p[1] - 1;
      }
      if (v40 != v2)
        goto LABEL_66;
LABEL_65:
      v13 = *(_QWORD *)v13;
      if (!v13)
        goto LABEL_66;
    }
    v41 = *(id *)(v13 + 16);
    v42 = v34;
    v43 = v42;
    if (v41 != v42)
    {
      v44 = objc_msgSend(v41, "isEqualToString:", v42);

      if ((v44 & 1) != 0)
        goto LABEL_122;
      goto LABEL_65;
    }

LABEL_122:
    *(_DWORD *)(v13 + 24) = *((_DWORD *)v32 + 10);
    *(_OWORD *)(v13 + 32) = *((_OWORD *)v32 + 3);
    v64 = *((_OWORD *)v32 + 4);
    v65 = *((_OWORD *)v32 + 5);
    v66 = *((_OWORD *)v32 + 6);
    *(_OWORD *)(v13 + 90) = *(_OWORD *)((char *)v32 + 106);
    *(_OWORD *)(v13 + 64) = v65;
    *(_OWORD *)(v13 + 80) = v66;
    *(_OWORD *)(v13 + 48) = v64;
    objc_storeStrong((id *)(v13 + 112), (id)v32[16]);
    *(_WORD *)(v13 + 120) = *((_WORD *)v32 + 68);
    v67 = *((_OWORD *)v32 + 9);
    v68 = *((_OWORD *)v32 + 10);
    *(_WORD *)(v13 + 160) = *((_WORD *)v32 + 88);
    *(_OWORD *)(v13 + 128) = v67;
    *(_OWORD *)(v13 + 144) = v68;

LABEL_123:
    v69 = (_QWORD *)v32[1];
    if (v69)
    {
      do
      {
        v70 = v69;
        v69 = (_QWORD *)*v69;
      }
      while (v69);
    }
    else
    {
      do
      {
        v70 = (_QWORD *)v32[2];
        v71 = *v70 == (_QWORD)v32;
        v32 = v70;
      }
      while (!v71);
    }
    v32 = v70;
  }
  while (v70 != (_QWORD *)(v103 + 272));
  v73 = (uint64_t **)v109;
  if ((_QWORD)v109)
  {
    v3 = 0x1E0CB3000uLL;
    do
    {
      v74 = v73[2];
      if (!v126)
        std::__throw_bad_function_call[abi:ne180100]();
      v75 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v126 + 48))(v126, (uint64_t *)v73 + 3);
      HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v111, v75);
      HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v111);
      if ((v107 & 2) != 0)
      {
        v77 = v112[0];
        v78 = 0.0;
        if (v112[0] > 0.0)
        {
          v76 = v111;
          if (v111 > 0.0)
            v78 = log10(v111 / v112[0]) * 10.0;
        }
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v106, v78, v77, v76);
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v100, "setObject:forKeyedSubscript:", v79, v74);

      }
      if ((v107 & 4) != 0)
      {
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v106, v112[2]);
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "setObject:forKeyedSubscript:", v80, v74);

      }
      if ((v107 & 8) != 0)
      {
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v106, v112[1]);
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v96, "setObject:forKeyedSubscript:", v81, v74);

      }
      if ((v107 & 0x20) != 0)
      {
        v82 = v112[5];
        v83 = v112[6];
        objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v106, v112[4]);
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v97, "setObject:forKeyedSubscript:", v84, v74);

        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v82, v83);
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v99, "setObject:forKeyedSubscript:", v85, v74);

      }
      if (!v126)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v126 + 48))(v126, (uint64_t *)v73 + 3) + 32));
      v13 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v101, "setObject:forKeyedSubscript:", v13, v74);

      v73 = (uint64_t **)*v73;
    }
    while (v73);
  }
LABEL_156:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::~__hash_table((uint64_t)__p);
  if ((v107 & 2) != 0)
    objc_msgSend(v105, "setAverageQuantityBySource:", v100);
  if ((v107 & 4) != 0)
    objc_msgSend(v105, "setMinimumQuantityBySource:", v98);
  if ((v107 & 8) != 0)
    objc_msgSend(v105, "setMaximumQuantityBySource:", v96);
  if ((v107 & 0x20) != 0)
  {
    objc_msgSend(v105, "setMostRecentQuantityBySource:", v97);
    objc_msgSend(v105, "setMostRecentQuantityDateIntervalBySource:", v99);
  }
  objc_msgSend(v105, "setDataCountBySource:", v101);

LABEL_165:
  v86 = v126;
  if (v126 == v125)
  {
    v87 = 4;
    v86 = v125;
LABEL_169:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  else if (v126)
  {
    v87 = 5;
    goto LABEL_169;
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v105, "averageQuantity");
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  if (v89)
  {
    objc_msgSend(v105, "averageQuantity");
    v13 = objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend((id)v13, "isCompatibleWithUnit:", v88) & 1) == 0)
    {

      goto LABEL_184;
    }
  }
  objc_msgSend(v105, "minimumQuantity");
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  if (v90)
  {
    objc_msgSend(v105, "minimumQuantity");
    v3 = objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend((id)v3, "isCompatibleWithUnit:", v88))
    {
      v91 = 1;
      goto LABEL_178;
    }
  }
  objc_msgSend(v105, "maximumQuantity");
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  if (v92)
  {
    objc_msgSend(v105, "maximumQuantity");
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    v94 = objc_msgSend(v93, "isCompatibleWithUnit:", v88);

    v91 = v94 ^ 1;
    if (v90)
      goto LABEL_178;
LABEL_182:
    if (!v89)
      goto LABEL_183;
LABEL_179:

    if ((v91 & 1) == 0)
      goto LABEL_185;
LABEL_184:
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v88);
    goto LABEL_185;
  }
  v91 = 0;
  if (!v90)
    goto LABEL_182;
LABEL_178:

  if (v89)
    goto LABEL_179;
LABEL_183:

  if (v91)
    goto LABEL_184;
LABEL_185:

  return v105;
}

void sub_1B7D316B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  uint64_t v58;
  _QWORD *v60;
  uint64_t v61;

  v60 = *(_QWORD **)(v58 - 144);
  if (v60 == (_QWORD *)(v58 - 168))
  {
    v61 = 4;
    v60 = (_QWORD *)(v58 - 168);
  }
  else
  {
    if (!v60)
      goto LABEL_6;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_6:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 312);
  v2 = *(_QWORD *)(a1 + 328);
  if (v1 != (*(_QWORD *)(a1 + 336) - v2) >> 3)
  {
    v4 = (void **)(a1 + 328);
    *(_QWORD *)(a1 + 336) = v2;
    std::vector<long long>::reserve((void **)(a1 + 328), v1);
    v5 = *(_QWORD **)(a1 + 304);
    if (v5)
    {
      v6 = *(char **)(a1 + 336);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 344);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 328);
            v6 = *(char **)(a1 + 336);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 328) = v16;
          *(_QWORD *)(a1 + 336) = v9;
          *(_QWORD *)(a1 + 344) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 336) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D31B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double *v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  int64_t v11;
  char v12;
  char v13;
  BOOL v14;
  BOOL v15;
  double v16;
  char v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  char *v39;
  uint64_t v40;
  double *v41;
  double *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  id WeakRetained;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  unint64_t v55;
  uint64_t **v56;
  __int128 v57;
  double *v58;
  unint64_t v59;
  char v60;
  double *v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  _OWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  double var2;
  _BOOL4 v74;
  double v75;
  double var0;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  double *v80;
  double *v81;
  _OWORD *v82;
  __int128 v83;
  __int128 v84;
  double *v85;
  int v86;
  unint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  unint64_t v92;
  uint64_t **v93;
  BOOL v94;
  unint64_t v95;
  double *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  BOOL v109;
  double v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  id *location;
  uint64_t v115;
  int64_t v116;
  id v117;
  _QWORD *v118;
  char v119;
  int64_t var3;
  BOOL var5;
  int v122;
  double **v123;
  uint64_t v124;
  HDRawQuantitySample v125;
  __int128 v126;
  __int128 v127;
  __int16 v128;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v123 = (double **)(a1 + 96);
    v118 = (_QWORD *)(a1 + 64);
    v115 = a1 + 120;
    location = (id *)(a1 + 88);
    v113 = (_QWORD *)(a1 + 272);
    do
    {
      v6 = *(double **)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          v27 = a2;
          v28 = a2;
          v29 = v5;
          v30 = *(_QWORD *)(a1 + 96);
          if (v6 != (double *)v7)
          {
            do
            {
              v31 = *(double *)(v30 + 8);
              v32 = *(double *)(v30 + 16);
              if (v31 > v29 && v31 < v28)
                v28 = *(double *)(v30 + 8);
              if (v32 > v5)
                v34 = *(double *)(v30 + 16);
              else
                v34 = v27;
              if (v32 < v27)
              {
                v29 = v5;
                v27 = v34;
              }
              v30 += 48;
            }
            while ((__int128 *)v30 != v7);
          }
          if (v27 >= v28)
            v35 = v28;
          else
            v35 = v27;
          v36 = *(double *)(a1 + 16);
          if (v36 > 0.0)
          {
            v37 = v36 * floor(v35 / v36);
            v38 = v36 * floor((v36 + v5) / v36);
            if (v37 >= v38)
              v35 = v37;
            else
              v35 = v38;
          }
          *v123 = 0;
          v123[1] = 0;
          v123[2] = 0;
          if (v6 != (double *)v7)
          {
            if (v8 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            v42 = *(double **)(a1 + 96);
            v41 = *(double **)(a1 + 104);
            v43 = v39;
            if (v41 != v42)
            {
              do
              {
                v44 = *((_OWORD *)v41 - 3);
                v45 = *((_OWORD *)v41 - 2);
                *(_OWORD *)(v43 - 21) = *(_OWORD *)((char *)v41 - 21);
                *((_OWORD *)v43 - 3) = v44;
                *((_OWORD *)v43 - 2) = v45;
                v43 -= 48;
                v41 -= 6;
              }
              while (v41 != v42);
              v41 = *v123;
            }
            *(_QWORD *)(a1 + 96) = v43;
            *(_QWORD *)(a1 + 104) = v39;
            *(_QWORD *)(a1 + 112) = &v39[48 * v40];
            if (v41)
              operator delete(v41);
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v125.var0 = a1;
            v47 = 126 - 2 * __clz(v8);
            if (v6 == (double *)v7)
              v48 = 0;
            else
              v48 = v47;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*,false>((uint64_t)v6, v7, (uint64_t)&v125, v48, 1);
          }
          else
          {
            v59 = 126 - 2 * __clz(v8);
            if (v6 == (double *)v7)
              v48 = 0;
            else
              v48 = v59;
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*,false>((uint64_t)v6, v7, v48, 1);
          if (*(_BYTE *)(a1 + 25))
            v117 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v117 = 0;
          if (v6 == (double *)v7)
          {
LABEL_155:
            v106 = *(_QWORD **)(a1 + 264);
            if (v106 != v113)
            {
              do
              {
                v107 = (_QWORD *)v106[1];
                if (v107)
                {
                  do
                  {
                    v108 = v107;
                    v107 = (_QWORD *)*v107;
                  }
                  while (v107);
                }
                else
                {
                  do
                  {
                    v108 = (_QWORD *)v106[2];
                    v109 = *v108 == (_QWORD)v106;
                    v106 = v108;
                  }
                  while (!v109);
                }
                v106 = v108;
              }
              while (v108 != v113);
            }
            *(double *)(a1 + 56) = v35;

            if (v6)
              operator delete(v6);
            goto LABEL_164;
          }
          v116 = 0;
          v60 = 0;
          v61 = v6;
          while (2)
          {
            v62 = *((_OWORD *)v61 + 1);
            *(_OWORD *)&v125.var0 = *(_OWORD *)v61;
            *(_OWORD *)&v125.var2 = v62;
            *(double *)&v125.var4 = v61[4];
            if (!v125.var4 || v125.var1 > v35)
            {
LABEL_96:
              v63 = *(_OWORD **)(a1 + 104);
              v64 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v63 < v64)
              {
                v65 = *(_OWORD *)v61;
                v66 = *((_OWORD *)v61 + 2);
                v63[1] = *((_OWORD *)v61 + 1);
                v63[2] = v66;
                *v63 = v65;
                v67 = v63 + 3;
                goto LABEL_116;
              }
              v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)*v123) >> 4);
              v69 = v68 + 1;
              if (v68 + 1 > 0x555555555555555)
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (_QWORD)*v123) >> 4);
              if (2 * v70 > v69)
                v69 = 2 * v70;
              if (v70 >= 0x2AAAAAAAAAAAAAALL)
                v71 = 0x555555555555555;
              else
                v71 = v69;
              if (v71)
                v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v71);
              else
                v72 = 0;
              v77 = (_OWORD *)(v71 + 48 * v68);
              v78 = *(_OWORD *)v61;
              v79 = *((_OWORD *)v61 + 2);
              v77[1] = *((_OWORD *)v61 + 1);
              v77[2] = v79;
              *v77 = v78;
              v81 = *(double **)(a1 + 96);
              v80 = *(double **)(a1 + 104);
              v82 = v77;
              if (v80 != v81)
              {
                do
                {
                  v83 = *((_OWORD *)v80 - 3);
                  v84 = *((_OWORD *)v80 - 2);
                  *(_OWORD *)((char *)v82 - 21) = *(_OWORD *)((char *)v80 - 21);
                  *(v82 - 3) = v83;
                  *(v82 - 2) = v84;
                  v82 -= 3;
                  v80 -= 6;
                }
                while (v80 != v81);
                v80 = *v123;
              }
              v67 = v77 + 3;
              *(_QWORD *)(a1 + 96) = v82;
              *(_QWORD *)(a1 + 104) = v77 + 3;
              *(_QWORD *)(a1 + 112) = v71 + 48 * v72;
              if (v80)
              {
                v85 = v80;
                goto LABEL_115;
              }
              goto LABEL_116;
            }
            var2 = v125.var2;
            if (v125.var2 >= v35)
            {
              var0 = v125.var0;
              v125.var2 = v35;
              v74 = var2 > v35;
              v125.var4 = v125.var1 < v35;
              if (v125.var1 >= v35)
                goto LABEL_96;
              var3 = v125.var3;
              var5 = v125.var5;
              v75 = v35;
            }
            else
            {
              v125.var4 = v125.var2 > v125.var1;
              if (v125.var2 <= v125.var1)
                goto LABEL_96;
              v74 = 0;
              var3 = 0;
              var5 = 0;
              var2 = 0.0;
              v75 = 0.0;
              var0 = 0.0;
            }
            HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v125, v118);
            v86 = *((unsigned __int8 *)v61 + 42);
            v122 = *((unsigned __int8 *)v61 + 41);
            v119 = *((_BYTE *)v61 + 40);
            if (!v125.var4)
              goto LABEL_138;
            if ((v60 & 1) != 0)
            {
              v87 = v125.var3;
              if (v116 == v125.var3 || *(_BYTE *)(a1 + 24))
              {
                HDStatisticsRelative<HDStatisticsNoiseLevel>::addSample(v115, &v125, v86 == 0);
                v86 = 1;
              }
            }
            else
            {
              HDStatisticsRelative<HDStatisticsNoiseLevel>::addSample(v115, &v125, v86 == 0);
              v86 = 1;
              v87 = v125.var3;
              v116 = v125.var3;
            }
            if (!*(_BYTE *)(a1 + 25))
              goto LABEL_137;
            HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_bundleIdentifierForSourceID(a1, v87);
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v88)
              goto LABEL_136;
            objc_msgSend(v117, "objectForKeyedSubscript:", v88);
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            v90 = v89;
            if (v89)
            {
              if (objc_msgSend(v89, "longLongValue") != v87 && !*(_BYTE *)(a1 + 24))
              {
LABEL_135:

LABEL_136:
LABEL_137:
                v60 = 1;
LABEL_138:
                if (v74)
                {
                  v94 = v86 != 0;
                  v96 = *(double **)(a1 + 104);
                  v95 = *(_QWORD *)(a1 + 112);
                  if ((unint64_t)v96 >= v95)
                  {
                    v85 = *v123;
                    v97 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)*v123) >> 4);
                    v98 = v97 + 1;
                    if (v97 + 1 > 0x555555555555555)
                      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                    v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - (_QWORD)v85) >> 4);
                    if (2 * v99 > v98)
                      v98 = 2 * v99;
                    if (v99 >= 0x2AAAAAAAAAAAAAALL)
                      v100 = 0x555555555555555;
                    else
                      v100 = v98;
                    if (v100)
                    {
                      v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v100);
                      v85 = *(double **)(a1 + 96);
                      v96 = *(double **)(a1 + 104);
                    }
                    else
                    {
                      v101 = 0;
                    }
                    v102 = v100 + 48 * v97;
                    *(double *)v102 = var0;
                    *(double *)(v102 + 8) = v75;
                    *(double *)(v102 + 16) = var2;
                    *(_QWORD *)(v102 + 24) = var3;
                    *(_BYTE *)(v102 + 32) = v74;
                    *(_BYTE *)(v102 + 33) = var5;
                    *(_BYTE *)(v102 + 40) = v119;
                    *(_BYTE *)(v102 + 41) = v122;
                    *(_BYTE *)(v102 + 42) = v94;
                    v103 = v102;
                    if (v96 != v85)
                    {
                      do
                      {
                        v104 = *((_OWORD *)v96 - 3);
                        v105 = *((_OWORD *)v96 - 2);
                        *(_OWORD *)(v103 - 21) = *(_OWORD *)((char *)v96 - 21);
                        *(_OWORD *)(v103 - 48) = v104;
                        *(_OWORD *)(v103 - 32) = v105;
                        v103 -= 48;
                        v96 -= 6;
                      }
                      while (v96 != v85);
                      v85 = *v123;
                    }
                    v67 = (_OWORD *)(v102 + 48);
                    *(_QWORD *)(a1 + 96) = v103;
                    *(_QWORD *)(a1 + 104) = v102 + 48;
                    *(_QWORD *)(a1 + 112) = v100 + 48 * v101;
                    if (v85)
LABEL_115:
                      operator delete(v85);
                  }
                  else
                  {
                    *v96 = var0;
                    v96[1] = v75;
                    v96[2] = var2;
                    *((_QWORD *)v96 + 3) = var3;
                    *((_BYTE *)v96 + 32) = v74;
                    *((_BYTE *)v96 + 33) = var5;
                    *((_BYTE *)v96 + 40) = v119;
                    *((_BYTE *)v96 + 41) = v122;
                    v67 = v96 + 6;
                    *((_BYTE *)v96 + 42) = v94;
                  }
LABEL_116:
                  *(_QWORD *)(a1 + 104) = v67;
                }
                v61 += 6;
                if (v61 == (double *)v7)
                  goto LABEL_155;
                continue;
              }
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v87);
              v91 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v117, "setObject:forKeyedSubscript:", v91, v88);

            }
            break;
          }
          v92 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_canonicalSourceIDForSourceID(a1, v87);
          v93 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsForSource(a1, v92);
          HDStatisticsRelative<HDStatisticsNoiseLevel>::addSample((uint64_t)v93, &v125, v122 == 0);
          LOBYTE(v122) = 1;
          goto LABEL_135;
        }
        v9 = v6[1];
        v10 = v6[2];
        v11 = *((_QWORD *)v6 + 3);
        v12 = *((_BYTE *)v6 + 32);
        v13 = *((_BYTE *)v6 + 33);
        if (v12)
        {
          v14 = v9 < a2;
          v15 = v10 > a2;
          if (v10 < a2)
            v16 = v6[2];
          else
            v16 = a2;
          if (v10 >= a2)
          {
            v17 = *((_BYTE *)v6 + 33);
          }
          else
          {
            v14 = v10 > v9;
            v17 = 0;
          }
          if (v10 < a2)
            v18 = 0.0;
          else
            v18 = *v6;
          if (v10 < a2)
            v19 = 0.0;
          else
            v19 = a2;
          if (v10 < a2)
            v20 = 0.0;
          else
            v20 = v6[2];
          if (v10 < a2)
            v21 = 0;
          else
            v21 = *((_QWORD *)v6 + 3);
          if (v10 < a2)
            v15 = 0;
          v22 = v10 > v9;
          if (v9 <= a2)
          {
            v10 = v16;
            v23 = v14;
          }
          else
          {
            v20 = v6[2];
            v23 = 0;
          }
          if (v9 > a2)
            v12 = *((_BYTE *)v6 + 33);
          else
            v12 = v17;
          if (v9 > a2)
            v24 = *v6;
          else
            v24 = v18;
          if (v9 > a2)
            v25 = v6[1];
          else
            v25 = v19;
          if (v9 > a2)
            v26 = *((_QWORD *)v6 + 3);
          else
            v26 = v21;
          if (v9 > a2)
            v15 = v22;
        }
        else
        {
          v23 = 0;
          v26 = 0;
          v15 = 0;
          v24 = 0.0;
          v25 = 0.0;
          v20 = 0.0;
        }
        v49 = *((unsigned __int8 *)v6 + 42);
        v50 = *((unsigned __int8 *)v6 + 41);
        v51 = *((unsigned __int8 *)v6 + 40);
        v125.var0 = *v6;
        v125.var1 = v9;
        v125.var2 = v10;
        v125.var3 = v11;
        v125.var4 = v23;
        v125.var5 = v13;
        *(_DWORD *)(&v125.var5 + 1) = *(_DWORD *)((char *)v6 + 34);
        *(_WORD *)(&v125.var5 + 5) = *((_WORD *)v6 + 19);
        *(double *)&v126 = v24;
        *((double *)&v126 + 1) = v25;
        *(double *)&v127 = v20;
        *((_QWORD *)&v127 + 1) = v26;
        LOBYTE(v128) = v15;
        HIBYTE(v128) = v12;
        HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v125, v118);
        v52 = v51 != 0;
        v53 = v50 != 0;
        v54 = v49 != 0;
        if (v125.var4)
        {
          HDStatisticsRelative<HDStatisticsNoiseLevel>::addSample(v115, &v125, v49 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v55 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_canonicalSourceIDForSourceID(a1, v125.var3);
            v56 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsForSource(a1, v55);
            HDStatisticsRelative<HDStatisticsNoiseLevel>::addSample((uint64_t)v56, &v125, v50 == 0);
          }
          v52 = 1;
          v53 = 1;
          v54 = 1;
        }
        if ((_BYTE)v128)
        {
          LOWORD(v124) = v128;
          v57 = v127;
          v58 = *v123;
          *(_OWORD *)v58 = v126;
          *((_OWORD *)v58 + 1) = v57;
          *((_QWORD *)v58 + 4) = v124;
          *((_BYTE *)v58 + 40) = v52;
          *((_BYTE *)v58 + 41) = v53;
          *((_BYTE *)v58 + 42) = v54;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_164:
      v110 = *(double *)(a1 + 56);
      if (v110 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsNoiseLevel>]");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v111, "handleFailureInFunction:file:lineNumber:description:", v112, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v110 = *(double *)(a1 + 56);
      }
      v5 = v110;
    }
    while (v110 < a2);
  }
}

void sub_1B7D324A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void HDStatisticsRelative<HDStatisticsNoiseLevel>::addSample(uint64_t a1, HDRawQuantitySample *a2, char a3)
{
  HDRawQuantitySample *v4;
  int v6;
  HDStatisticsNoiseLevel *v7;
  char v8;
  HDQuantitySampleOverlapProcessor *v9;
  void *v10;
  HDQuantitySampleOverlapProcessor *v11;
  __int128 v12;

  v4 = a2;
  v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v6 = 1;
  if (v6)
  {
    if (v6 == 1)
    {
      if (!*(_DWORD *)a1)
      {
        *(_DWORD *)a1 = 1;
LABEL_15:
        v9 = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
        *(_OWORD *)(a1 + 8) = 0u;
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        *(_OWORD *)(a1 + 66) = 0u;
        v10 = *(void **)(a1 + 88);
        *(_QWORD *)(a1 + 88) = v9;
        v11 = v9;

        *(_WORD *)(a1 + 96) = 257;
        if (!*(_BYTE *)(a1 + 80) || *(double *)(a1 + 56) <= *(double *)(a1 + 112))
        {
          v12 = *(_OWORD *)(a1 + 120);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a1 + 104);
          *(_OWORD *)(a1 + 64) = v12;
          *(_WORD *)(a1 + 80) = *(_WORD *)(a1 + 136);
        }
        v7 = (HDStatisticsNoiseLevel *)(a1 + 8);
        goto LABEL_19;
      }
    }
    else if (v6 == 2)
    {
      if (*(_DWORD *)a1 == 2)
      {
        v7 = (HDStatisticsNoiseLevel *)(a1 + 8);
        v8 = 1;
LABEL_20:
        HDStatisticsNoiseLevel::addSample(v7, a2, v8);
        return;
      }
      *(_DWORD *)a1 = 2;
      goto LABEL_15;
    }
  }
  else if (!*(_DWORD *)a1 && !*(_QWORD *)(a1 + 40))
  {
    v7 = (HDStatisticsNoiseLevel *)(a1 + 8);
LABEL_19:
    a2 = v4;
    v8 = a3;
    goto LABEL_20;
  }
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD **)(a1 + 272);
  if (!v3)
    goto LABEL_11;
  v4 = (uint64_t **)(a1 + 272);
  do
  {
    v5 = v3[4];
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (!v6)
      v4 = (uint64_t **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 272) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    v8 = (uint64_t **)(a1 + 264);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 264), a2, &v10);
    v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 352), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 392);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D327CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 432);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D3289C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= a2)
        return v7;
      v5 = v7[1];
    }
    while (v5);
    v6 = v7 + 1;
  }
  else
  {
    v7 = a1 + 1;
  }
LABEL_10:
  v9 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v9 + 4) = *a3;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *((_QWORD *)v9 + 16) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *((_WORD *)v9 + 68) = 257;
  *((_OWORD *)v9 + 9) = 0u;
  *((_OWORD *)v9 + 10) = 0u;
  *((_WORD *)v9 + 88) = 0;
  std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
  return (uint64_t **)v9;
}

void sub_1B7D329B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 328);
      v11 = *(char **)(*(_QWORD *)a3 + 336);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 336);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 336);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 328);
      v24 = *(char **)(*(_QWORD *)a3 + 336);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 336);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 336);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 328);
            v31 = *(char **)(*(_QWORD *)a3 + 336);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 336);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 336);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::~__hash_table(uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D07670;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D07670;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>> const&)::{lambda(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsRelative<HDStatisticsNoiseLevel> const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 624))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 624))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7D34CB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 600);
      v7 = *(_QWORD *)(a1 + 592);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D34EB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v6;
  double v7;
  uint64_t *v8;
  double v9;
  double v10;
  unint64_t v11;
  char v12;
  double v13;
  double v14;
  _BOOL4 v15;
  unint64_t v16;
  char v17;
  double v18;
  double v19;
  uint64_t *v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  int8x16_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t **v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  double v60;
  double v61;
  double v62;

  v3 = *(_BYTE *)(a2 + 32);
  if (!v3)
    return;
  v6 = a1 + 8;
  v7 = *(double *)(a1 + 8);
  v8 = *(uint64_t **)a2;
  v9 = *(double *)(a2 + 8);
  v10 = *(double *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_BYTE *)(a2 + 33);
  v13 = v9;
  if (v9 <= v7)
  {
    v13 = *(double *)(a1 + 8);
    if (v10 < v7)
      return;
  }
  if (v10 <= v13)
    return;
  v14 = *(double *)(a1 + 16);
  if (v13 <= v14)
  {
    if (v10 >= v14)
    {
      v15 = v10 > v14;
      v16 = *(_QWORD *)(a2 + 24);
      v18 = *(double *)(a2 + 16);
      v19 = *(double *)(a1 + 16);
      v20 = *(uint64_t **)a2;
      v17 = *(_BYTE *)(a2 + 33);
      if (v13 >= v14)
      {
        v16 = *(_QWORD *)(a2 + 24);
        v18 = *(double *)(a2 + 16);
        v19 = *(double *)(a1 + 16);
        v20 = *(uint64_t **)a2;
        v17 = *(_BYTE *)(a2 + 33);
        goto LABEL_52;
      }
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0.0;
      v14 = *(double *)(a2 + 16);
      v19 = 0.0;
      v20 = 0;
    }
    v60 = v14;
    v61 = v13;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 296, v11, v11);
    v21 = *(_QWORD *)(a1 + 112);
    if (v21 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 168) <= 0)
    {
      v26.f64[1] = *(float64_t *)(a1 + 16);
      v23 = v60;
      v22 = v61;
      v26.f64[0] = v61;
      v27.f64[0] = *(float64_t *)(a1 + 8);
      v27.f64[1] = v60;
      v28 = (int8x16_t)vcgtq_f64(v27, v26);
      v27.f64[0] = v61;
      *(int8x16_t *)(a1 + 48) = vbslq_s8(v28, *(int8x16_t *)(a1 + 8), (int8x16_t)v27);
      if (!a3)
      {
LABEL_25:
        v29 = *(_QWORD *)(a1 + 120);
        if (v21 >= v29)
        {
          v31 = *(_QWORD *)(a1 + 104);
          v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v31) >> 4);
          v33 = v32 + 1;
          if (v32 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v31) >> 4);
          if (2 * v34 > v33)
            v33 = 2 * v34;
          if (v34 >= 0x2AAAAAAAAAAAAAALL)
            v35 = 0x555555555555555;
          else
            v35 = v33;
          if (v35)
          {
            v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v35);
            v23 = v60;
            v22 = v61;
          }
          else
          {
            v36 = 0;
          }
          v37 = v35 + 48 * v32;
          v38 = v35 + 48 * v36;
          *(_QWORD *)v37 = v8;
          *(double *)(v37 + 8) = v22;
          *(double *)(v37 + 16) = v23;
          *(_QWORD *)(v37 + 24) = v11;
          *(_BYTE *)(v37 + 32) = 1;
          *(_BYTE *)(v37 + 33) = v12;
          *(_WORD *)(v37 + 40) = 0;
          *(_BYTE *)(v37 + 42) = 0;
          v30 = v37 + 48;
          v40 = *(char **)(a1 + 104);
          v39 = *(char **)(a1 + 112);
          if (v39 != v40)
          {
            do
            {
              v41 = *((_OWORD *)v39 - 3);
              v42 = *((_OWORD *)v39 - 2);
              *(_OWORD *)(v37 - 21) = *(_OWORD *)(v39 - 21);
              *(_OWORD *)(v37 - 48) = v41;
              *(_OWORD *)(v37 - 32) = v42;
              v37 -= 48;
              v39 -= 48;
            }
            while (v39 != v40);
            v39 = *(char **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 104) = v37;
          *(_QWORD *)(a1 + 112) = v30;
          *(_QWORD *)(a1 + 120) = v38;
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v21 = v8;
          *(double *)(v21 + 8) = v22;
          *(double *)(v21 + 16) = v23;
          *(_QWORD *)(v21 + 24) = v11;
          *(_BYTE *)(v21 + 32) = 1;
          *(_BYTE *)(v21 + 33) = v12;
          *(_WORD *)(v21 + 40) = 0;
          v30 = v21 + 48;
          *(_BYTE *)(v21 + 42) = 0;
        }
        *(_QWORD *)(a1 + 112) = v30;
        if (!*(_BYTE *)(a1 + 264) || *(double *)(a1 + 240) <= v9)
        {
          *(_QWORD *)(a1 + 232) = v8;
          *(double *)(a1 + 240) = v9;
          *(double *)(a1 + 248) = v10;
          *(_QWORD *)(a1 + 256) = v11;
          *(_BYTE *)(a1 + 264) = v3;
          *(_BYTE *)(a1 + 265) = v12;
          if (!*(_BYTE *)(a1 + 208) || *(double *)(a1 + 184) <= v9)
          {
            *(_QWORD *)(a1 + 176) = v8;
            *(double *)(a1 + 184) = v9;
            *(double *)(a1 + 192) = v10;
            *(_QWORD *)(a1 + 200) = v11;
            *(_BYTE *)(a1 + 208) = v3;
            *(_BYTE *)(a1 + 209) = v12;
          }
        }
        if (*(_BYTE *)(a1 + 33))
        {
          v43 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_canonicalSourceIDForSourceID(v6, v11);
          v44 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsForSource(v6, v43);
          if (!*((_BYTE *)v44 + 136) || *((double *)v44 + 14) <= v9)
          {
            v44[13] = v8;
            *((double *)v44 + 14) = v9;
            *((double *)v44 + 15) = v10;
            v44[16] = (uint64_t *)v11;
            *((_BYTE *)v44 + 136) = v3;
            *((_BYTE *)v44 + 137) = v12;
            if (!*((_BYTE *)v44 + 80) || *((double *)v44 + 7) <= v9)
            {
              v44[6] = v8;
              *((double *)v44 + 7) = v9;
              *((double *)v44 + 8) = v10;
              v44[9] = (uint64_t *)v11;
              *((_BYTE *)v44 + 80) = v3;
              *((_BYTE *)v44 + 81) = v12;
            }
          }
        }
LABEL_52:
        v12 = v17;
        v8 = v20;
        v13 = v19;
        v10 = v18;
        v11 = v16;
        if (!v15)
          return;
        goto LABEL_53;
      }
    }
    else
    {
      v23 = v60;
      v22 = v61;
      if (v61 < *(double *)(a1 + 48))
      {
        v24 = *(double *)(a1 + 8);
        if (v61 >= v24)
          v24 = v61;
        *(double *)(a1 + 48) = v24;
      }
      if (v60 > *(double *)(a1 + 56))
      {
        v25 = *(double *)(a1 + 16);
        if (v25 >= v60)
          v25 = v60;
        *(double *)(a1 + 56) = v25;
      }
      if (!a3)
        goto LABEL_25;
    }
    if (v22 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime(v6, v22);
      v23 = v60;
      v22 = v61;
      v21 = *(_QWORD *)(a1 + 112);
    }
    goto LABEL_25;
  }
  LOBYTE(v15) = 1;
LABEL_53:
  v45 = *(_QWORD *)(a1 + 488);
  v46 = *(_QWORD *)(a1 + 496);
  if (v45 >= v46)
  {
    v48 = *(_QWORD *)(a1 + 480);
    v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v48) >> 3);
    v50 = v49 + 1;
    if (v49 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v48) >> 3);
    if (2 * v51 > v50)
      v50 = 2 * v51;
    if (v51 >= 0x333333333333333)
      v52 = 0x666666666666666;
    else
      v52 = v50;
    if (v52)
    {
      v62 = v13;
      v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v52);
      v13 = v62;
    }
    else
    {
      v53 = 0;
    }
    v54 = v52 + 40 * v49;
    v55 = v52 + 40 * v53;
    *(_QWORD *)v54 = v8;
    *(double *)(v54 + 8) = v13;
    *(double *)(v54 + 16) = v10;
    *(_QWORD *)(v54 + 24) = v11;
    *(_BYTE *)(v54 + 32) = v15;
    *(_BYTE *)(v54 + 33) = v12;
    v47 = v54 + 40;
    v57 = *(char **)(a1 + 480);
    v56 = *(char **)(a1 + 488);
    if (v56 != v57)
    {
      do
      {
        v58 = *(_OWORD *)(v56 - 40);
        v59 = *(_OWORD *)(v56 - 24);
        *(_WORD *)(v54 - 8) = *((_WORD *)v56 - 4);
        *(_OWORD *)(v54 - 24) = v59;
        *(_OWORD *)(v54 - 40) = v58;
        v54 -= 40;
        v56 -= 40;
      }
      while (v56 != v57);
      v56 = *(char **)(a1 + 480);
    }
    *(_QWORD *)(a1 + 480) = v54;
    *(_QWORD *)(a1 + 488) = v47;
    *(_QWORD *)(a1 + 496) = v55;
    if (v56)
      operator delete(v56);
  }
  else
  {
    *(_QWORD *)v45 = v8;
    *(double *)(v45 + 8) = v13;
    *(double *)(v45 + 16) = v10;
    *(_QWORD *)(v45 + 24) = v11;
    *(_BYTE *)(v45 + 32) = v15;
    v47 = v45 + 40;
    *(_BYTE *)(v45 + 33) = v12;
  }
  *(_QWORD *)(a1 + 488) = v47;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 626))
  {
    *(_BYTE *)(a1 + 628) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 628) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D35468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 480), *(_QWORD *)(a1 + 488), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 488) - *(_QWORD *)(a1 + 480)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D35550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  HDQuantitySampleOverlapProcessor *v9;
  void *v10;
  HDQuantitySampleOverlapProcessor *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *i;
  _QWORD *v18;

  v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 504), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 64);
  v9 = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *(_DWORD *)(v8 + 88) = 0;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 154) = 0u;
  v10 = *(void **)(v8 + 176);
  *(_QWORD *)(v8 + 176) = v9;
  v11 = v9;

  *(_WORD *)(v8 + 184) = 257;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_WORD *)(v8 + 224) = 0;

  if (*(_QWORD *)(v8 + 248))
  {
    v12 = *(_QWORD **)(a1 + 272);
    v13 = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a1 + 272) = a1 + 280;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    if (v12[1])
      v14 = (_QWORD *)v12[1];
    else
      v14 = v12;
    if (v14)
    {
      v15 = (_QWORD *)v14[2];
      if (v15)
      {
        v16 = (_QWORD *)*v15;
        if ((_QWORD *)*v15 == v14)
        {
          *v15 = 0;
          while (1)
          {
            v18 = (_QWORD *)v15[1];
            if (!v18)
              break;
            do
            {
              v15 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
        }
        else
        {
          for (v15[1] = 0; v16; v16 = (_QWORD *)v15[1])
          {
            do
            {
              v15 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(v14);
        for (i = (_QWORD *)v15[2]; i; i = (_QWORD *)i[2])
          v15 = i;
        v14 = v15;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsNoiseLevel>>>>::destroy(v14);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 504));
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 480);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 628))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 628) = 0;
  }

}

void sub_1B7D3573C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D357C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 640));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 624) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D35B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40A217D420);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D35CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsNoiseLevel>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D35F3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  _BOOL4 v8;
  int v9;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  BOOL v16;
  char v17;

  v7 = *(double *)(a1 + 32);
  if (v7 >= a6)
  {
    if (v7 <= a7)
    {
      v8 = v7 < a7;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = a7 > a6;
  }
  v12 = a5;
  v13 = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  v9 = *(unsigned __int8 *)(a1 + 56);
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v12, a3, a4);
  }
  else
  {
    if (v8)
    {
      v11 = *(double *)(a1 + 40);
      if (a6 <= v11)
      {
        if (a7 >= v11)
        {
          v9 = a6 < v11;
          a7 = *(double *)(a1 + 40);
        }
        else
        {
          v9 = a7 > a6;
        }
      }
    }
    v13 = a6;
    v14 = a7;
    v16 = v9;
    if (v9)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v12, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 624))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D36BE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D36C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI22HDStatisticsNoiseLevelEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsNoiseLevel>>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void HDStatisticsRelative<HDStatisticsNoiseLevel>::archive(uint64_t a1, int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[3];
  int8x16_t v7;
  __int16 v8;
  char v9;
  int v10;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E6CEA528;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  statistics::Statistics::makePrimaryStatistics((_QWORD *)a1);
  HDStatisticsNoiseLevel::archive((HDStatisticsNoiseLevel *)(a2 + 2), (uint64_t)v6);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(_QWORD *)(a1 + 136) = v5;
  statistics::Statistics::makeMostRecentDatum((_QWORD *)a1);
  v6[0] = &off_1E6CFF278;
  v10 = 127;
  v7 = vextq_s8(*(int8x16_t *)(a2 + 26), *(int8x16_t *)(a2 + 26), 8uLL);
  v6[1] = *((_QWORD *)a2 + 15);
  v6[2] = *((_QWORD *)a2 + 16);
  v8 = 0;
  v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1B7D36D90(_Unwind_Exception *a1)
{
  statistics::Statistics *v1;

  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsNoiseLevel>::unarchive(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  const statistics::Statistics *v5;
  HDQuantitySampleOverlapProcessor *v6;
  double result;
  HDStatisticsNoiseLevel *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[26];
  void *v15;
  __int16 v16;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  v6 = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *(_QWORD *)(a1 + 88) = v6;
  *(_WORD *)(a1 + 96) = 257;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_WORD *)(a1 + 136) = 0;
  v8 = (HDStatisticsNoiseLevel *)a2[16];
  if (v8)
  {
    HDStatisticsNoiseLevel::unarchive(v8, v5);
    v4[2] = v13;
    v4[3] = *(_OWORD *)v14;
    *(_OWORD *)((char *)v4 + 58) = *(_OWORD *)&v14[10];
    *v4 = v11;
    v4[1] = v12;
    *(_QWORD *)(a1 + 88) = v15;

    *(_WORD *)(a1 + 96) = v16;
  }
  *(_DWORD *)a1 = a2[17];
  v9 = a2[14];
  if (v9)
  {
    result = *(double *)(v9 + 8);
    v10 = *(_QWORD *)(v9 + 16);
    *(int8x16_t *)(a1 + 104) = vextq_s8(*(int8x16_t *)(v9 + 24), *(int8x16_t *)(v9 + 24), 8uLL);
    *(double *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 128) = v10;
    *(_WORD *)(a1 + 136) = 1;
  }
  return result;
}

void sub_1B7D36EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D07720;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 104) = 0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_WORD *)(a1 + 576) = 1;
  *(_BYTE *)(a1 + 578) = 0;
  *(_BYTE *)(a1 + 580) = 0;
  *(_QWORD *)(a1 + 584) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_QWORD *)(a1 + 624) = 0;
  return a1;
}

void sub_1B7D36F64(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;
  id *v3;
  void *v5;

  v3 = v2;
  objc_destroyWeak(v3);

  v5 = *(void **)(v1 + 72);
  if (v5)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)v1);
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D07720;
  v2 = *(void **)(a1 + 608);
  if (v2)
  {
    *(_QWORD *)(a1 + 616) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 544);
  if (v3)
  {
    *(_QWORD *)(a1 + 552) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 576) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_configureForStartTime(a1);

}

void sub_1B7D3705C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 584) = v4;
    v3 = v5;
  }

}

void sub_1B7D370BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;

  objc_storeStrong((id *)(a1 + 592), a2);
  v7 = a2;
  v4 = *(id *)(a1 + 592);
  v5 = *(void **)(a1 + 568);
  *(_QWORD *)(a1 + 568) = v4;
  v6 = v4;

  HDStatisticsBucket<HDStatisticsNoiseLevel>::setStatisticsConfiguration(a1 + 120, *(void **)(a1 + 568));
}

void sub_1B7D37140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 272) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D37268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::currentStatistics(uint64_t a1)
{
  void *v3;
  double v4[53];

  if (*(_BYTE *)(a1 + 576))
    return 0;
  HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime((uint64_t)v4, v4[1]);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_statisticsFromFinishedBucket(a1, v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D37310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (!v6)
    goto LABEL_4;
  objc_msgSend(v6, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  if (v9 > *(double *)(a2 + 16))
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "endDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;
  v13 = *(double *)(a2 + 8);

  if (v12 >= v13)
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 578))
      goto LABEL_21;
    if (!*(_BYTE *)(a1 + 577))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 576))
        {
          v14 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(a1 + 176);
          v14 = *(double *)(a1 + 120);
          if (v16 <= v14)
            v16 = -1.79769313e308;
          if (v16 >= v14)
            v14 = v16;
        }
      }
      else
      {
        v14 = -1.79769313e308;
        if (*(double *)(a1 + 176) > *(double *)(a1 + 120))
          v14 = *(double *)(a1 + 176);
      }
      if (v14 > *(double *)(a2 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17, a3);

        goto LABEL_22;
      }
      if (*(_BYTE *)(a1 + 579))
      {
LABEL_21:
        v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveAddSample(a1, a2, 1, a3);
        goto LABEL_22;
      }
      v19 = *(_QWORD *)(a1 + 616);
      v20 = *(_QWORD *)(a1 + 624);
      if (v19 >= v20)
      {
        v24 = *(_QWORD *)(a1 + 608);
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v24) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v31 = v28 + 40 * v29;
        v32 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v30 = v32;
        *(_OWORD *)(v30 + 16) = v33;
        v23 = v30 + 40;
        v34 = *(char **)(a1 + 616);
        v35 = *(char **)(a1 + 608);
        if (v34 != v35)
        {
          do
          {
            v36 = *(_OWORD *)(v34 - 40);
            v37 = *(_OWORD *)(v34 - 24);
            *(_WORD *)(v30 - 8) = *((_WORD *)v34 - 4);
            *(_OWORD *)(v30 - 24) = v37;
            *(_OWORD *)(v30 - 40) = v36;
            v30 -= 40;
            v34 -= 40;
          }
          while (v34 != v35);
          v34 = *(char **)(a1 + 608);
        }
        *(_QWORD *)(a1 + 608) = v30;
        *(_QWORD *)(a1 + 616) = v23;
        *(_QWORD *)(a1 + 624) = v31;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v21 = *(_OWORD *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v23 = v19 + 40;
      }
      *(_QWORD *)(a1 + 616) = v23;
    }
  }
LABEL_10:
  v15 = 1;
LABEL_22:

  return v15;
}

void sub_1B7D375B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 578))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 578) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 577))
    goto LABEL_5;
  v9 = *(void **)(a1 + 600);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_401);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 600);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;

  *(_BYTE *)(a1 + 577) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 608);
    *(_QWORD *)(a1 + 624) = 0;
    *(_QWORD *)(a1 + 616) = 0;
    *(_QWORD *)(a1 + 608) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 608);
      v37 = *(__int128 **)(a1 + 616);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 616);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 616) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 608);
  v39 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 552) != *(_QWORD *)(a1 + 544))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 552) != *(_QWORD *)(a1 + 544));
  }
  *(_BYTE *)(a1 + 578) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 580))
    {
      *(_BYTE *)(a1 + 580) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 578) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D37CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 578) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 579) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 578))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 578))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 600);
    *(_QWORD *)(a1 + 600) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 577) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 577))
  {
    v8 = *(void **)(a1 + 600);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 600);
      *(_QWORD *)(a1 + 600) = v9;

      v8 = *(void **)(a1 + 600);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D37FA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 576) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 576) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D380C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::reset(uint64_t result)
{
  *(_BYTE *)(result + 576) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 576), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsNoiseLevel::archive((HDStatisticsNoiseLevel *)(a1 + 240), (uint64_t)&v37);
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(_QWORD **)(a1 + 336);
  if (v9 != (_QWORD *)(a1 + 344))
  {
    do
    {
      HDStatisticsNoiseLevel::archive((HDStatisticsNoiseLevel *)(v9 + 5), (uint64_t)&v37);
      v10 = v9[4];
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 344));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 544);
  for (k = *(int8x16_t **)(a1 + 552); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D3845C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const statistics::Statistics *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  HDStatisticsNoiseLevel *v24;
  HDStatisticsNoiseLevel **v25;
  HDStatisticsNoiseLevel **i;
  HDStatisticsNoiseLevel *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t j;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  id v60;
  id v61;
  void *v62;
  uint64_t v63;
  __n128 v64;
  void *v65[2];
  __int128 v66;
  int8x16_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  int8x16_t v72;
  uint64_t v73;
  uint64_t v74[4];
  void *__p[2];
  _BYTE v76[82];
  HDQuantitySampleOverlapProcessor *v77;
  __int16 v78;
  uint64_t **v79;
  uint64_t *v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  __int128 v90;
  __int128 v91;
  int v92;
  __int128 v93;
  __int128 v94;
  int v95;
  void (**v96)(statistics::StatisticsEngine *__hidden);
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  _BYTE v103[32];
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _OWORD v108[2];
  id v109;
  __int16 v110;

  v61 = a2;
  *(_BYTE *)(a1 + 576) = objc_msgSend(v61, "decodeBoolForKey:", CFSTR("needs_config"));
  v60 = v61;
  HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket((uint64_t)&v64.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v65 = 0u;
  v66 = 0u;
  v104 = 0;
  v3 = objc_retainAutorelease(v60);
  PB::Reader::Reader((PB::Reader *)v103, (const unsigned __int8 *)objc_msgSend(v3, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v104));
  v62 = v3;
  v63 = a1;
  v96 = &off_1E6D09A88;
  v97 = 0;
  v101 = 0;
  v99 = 0;
  v100 = 0;
  v102 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v96, (PB::Reader *)v103);
  v4 = v97;
  v64.n128_u64[0] = v98;
  if (v97)
  {
    v71 = 0;
    memset(v74, 0, sizeof(v74));
    *(_OWORD *)__p = 0u;
    memset(v76, 0, sizeof(v76));
    v77 = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
    v78 = 257;
    v81 = 0;
    v80 = 0;
    v79 = &v80;
    v82 = 0u;
    v83 = 0u;
    v84 = 1065353216;
    v85 = 0u;
    v86 = 0u;
    v87 = 0u;
    v88 = 0;
    v89 = 1065353216;
    v90 = 0u;
    v91 = 0u;
    v92 = 1065353216;
    v93 = 0u;
    v94 = 0u;
    v95 = 1065353216;
    v67 = vextq_s8(*(int8x16_t *)(v4 + 8), *(int8x16_t *)(v4 + 8), 8uLL);
    v6 = *(_QWORD *)(v4 + 72);
    v68 = *(_QWORD *)(v4 + 64);
    v69 = *(_BYTE *)(v4 + 185);
    v70 = *(_BYTE *)(v4 + 186);
    v72 = vextq_s8(*(int8x16_t *)(v4 + 24), *(int8x16_t *)(v4 + 24), 8uLL);
    v73 = v6;
    v7 = *(_QWORD *)(v4 + 80);
    v8 = *(_QWORD *)(v4 + 88);
    if (v7 != v8)
    {
      v9 = (char *)__p[1];
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)v7 + 24);
        v11 = *(_QWORD *)(*(_QWORD *)v7 + 32);
        v12 = *(_QWORD *)(*(_QWORD *)v7 + 8);
        v13 = *(_QWORD *)(*(_QWORD *)v7 + 16);
        v14 = *(_BYTE *)(*(_QWORD *)v7 + 41);
        v15 = *(_BYTE *)(*(_QWORD *)v7 + 40);
        if ((unint64_t)v9 >= *(_QWORD *)v76)
        {
          v16 = (char *)__p[0];
          v17 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (char *)__p[0]) >> 4);
          v18 = v17 + 1;
          if (v17 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)v76 - (unint64_t)__p[0]) >> 4) > v18)
            v18 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)v76 - (unint64_t)__p[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v76 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v19 = 0x555555555555555;
          else
            v19 = v18;
          if (v19)
          {
            v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v19);
            v9 = (char *)__p[1];
            v16 = (char *)__p[0];
          }
          else
          {
            v5 = 0;
          }
          v20 = v19 + 48 * v17;
          *(_QWORD *)v20 = v11;
          *(_QWORD *)(v20 + 8) = v10;
          *(_QWORD *)(v20 + 16) = v12;
          *(_QWORD *)(v20 + 24) = v13;
          *(_WORD *)(v20 + 32) = 1;
          *(_BYTE *)(v20 + 40) = 0;
          *(_BYTE *)(v20 + 41) = v14;
          *(_BYTE *)(v20 + 42) = v15;
          v21 = (char *)v20;
          if (v9 != v16)
          {
            do
            {
              v22 = *((_OWORD *)v9 - 3);
              v23 = *((_OWORD *)v9 - 2);
              *(_OWORD *)(v21 - 21) = *(_OWORD *)(v9 - 21);
              *((_OWORD *)v21 - 3) = v22;
              *((_OWORD *)v21 - 2) = v23;
              v21 -= 48;
              v9 -= 48;
            }
            while (v9 != v16);
            v16 = (char *)__p[0];
          }
          v9 = (char *)(v20 + 48);
          __p[0] = v21;
          __p[1] = (void *)(v20 + 48);
          *(_QWORD *)v76 = v19 + 48 * (_QWORD)v5;
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v9 = v11;
          *((_QWORD *)v9 + 1) = v10;
          *((_QWORD *)v9 + 2) = v12;
          *((_QWORD *)v9 + 3) = v13;
          *((_WORD *)v9 + 16) = 1;
          v9[40] = 0;
          v9[41] = v14;
          v9[42] = v15;
          v9 += 48;
        }
        __p[1] = v9;
        v7 += 8;
      }
      while (v7 != v8);
    }
    v24 = *(HDStatisticsNoiseLevel **)(v4 + 104);
    if (v24)
    {
      HDStatisticsNoiseLevel::unarchive(v24, v5);
      *(_OWORD *)&v76[40] = v107;
      *(_OWORD *)&v76[56] = v108[0];
      *(_OWORD *)&v76[66] = *(_OWORD *)((char *)v108 + 10);
      *(_OWORD *)&v76[8] = v105;
      *(_OWORD *)&v76[24] = v106;
      objc_storeStrong((id *)&v77, v109);
      v78 = v110;

    }
    v25 = *(HDStatisticsNoiseLevel ***)(v4 + 136);
    for (i = *(HDStatisticsNoiseLevel ***)(v4 + 144); v25 != i; ++v25)
    {
      v27 = *v25;
      HDStatisticsNoiseLevel::unarchive(*v25, v5);
      v28 = *((_QWORD *)v27 + 18);
      v29 = v80;
      v30 = &v80;
      v31 = &v80;
      if (v80)
      {
        do
        {
          while (1)
          {
            v31 = (uint64_t **)v29;
            v32 = v29[4];
            if (v32 <= v28)
              break;
            v29 = *v31;
            v30 = v31;
            if (!*v31)
              goto LABEL_32;
          }
          if (v32 >= v28)
          {
            v34 = (char *)v31;
            goto LABEL_35;
          }
          v29 = v31[1];
        }
        while (v29);
        v30 = v31 + 1;
      }
LABEL_32:
      v34 = (char *)operator new(0x88uLL);
      *((_QWORD *)v34 + 4) = v28;
      *(_OWORD *)(v34 + 40) = 0u;
      *(_OWORD *)(v34 + 56) = 0u;
      *(_OWORD *)(v34 + 72) = 0u;
      *(_OWORD *)(v34 + 88) = 0u;
      *(_OWORD *)(v34 + 104) = 0u;
      *(_OWORD *)(v34 + 120) = 0u;
      *((_QWORD *)v34 + 15) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
      *((_WORD *)v34 + 64) = 257;
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      *((_QWORD *)v34 + 2) = v31;
      *v30 = (uint64_t *)v34;
      v33 = (uint64_t *)v34;
      if (*v79)
      {
        v79 = (uint64_t **)*v79;
        v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v80, v33);
      ++v81;
LABEL_35:
      v35 = *(_OWORD *)((char *)v108 + 10);
      v37 = v107;
      v36 = v108[0];
      v38 = v105;
      *(_OWORD *)(v34 + 56) = v106;
      *(_OWORD *)(v34 + 72) = v37;
      *(_OWORD *)(v34 + 88) = v36;
      *(_OWORD *)(v34 + 98) = v35;
      *(_OWORD *)(v34 + 40) = v38;
      objc_storeStrong((id *)v34 + 15, v109);
      *((_WORD *)v34 + 64) = v110;

    }
    v39 = *(_QWORD *)(v4 + 40);
    for (j = *(_QWORD *)(v4 + 48); v39 != j; v39 += 8)
    {
      v42 = *(double *)(*(_QWORD *)v39 + 8);
      v41 = *(double *)(*(_QWORD *)v39 + 16);
      if (v42 >= v41)
        v43 = *(double *)(*(_QWORD *)v39 + 16);
      else
        v43 = *(double *)(*(_QWORD *)v39 + 8);
      if (v41 < v42)
        v41 = *(double *)(*(_QWORD *)v39 + 8);
      HKIntervalMask<double>::_insertInterval(v74, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsNoiseLevel>::operator=((uint64_t)&v64.n128_i64[1], (uint64_t)&v67);
    HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)&v67);
  }
  v44 = v99;
  v45 = v100;
  if (v99 != v100)
  {
    v46 = (char *)v65[1];
    do
    {
      v47 = *(_QWORD *)(*(_QWORD *)v44 + 24);
      v48 = *(_QWORD *)(*(_QWORD *)v44 + 32);
      v49 = *(_QWORD *)(*(_QWORD *)v44 + 8);
      v50 = *(_QWORD *)(*(_QWORD *)v44 + 16);
      if ((unint64_t)v46 >= (unint64_t)v66)
      {
        v51 = (char *)v65[0];
        v52 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - (char *)v65[0]) >> 3);
        v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) > v53)
          v53 = 0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) >= 0x333333333333333)
          v54 = 0x666666666666666;
        else
          v54 = v53;
        if (v54)
        {
          v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          v51 = (char *)v65[0];
          v46 = (char *)v65[1];
        }
        else
        {
          v55 = 0;
        }
        v56 = v54 + 40 * v52;
        *(_QWORD *)v56 = v48;
        *(_QWORD *)(v56 + 8) = v47;
        *(_QWORD *)(v56 + 16) = v49;
        *(_QWORD *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        v57 = (char *)v56;
        if (v46 != v51)
        {
          do
          {
            v58 = *(_OWORD *)(v46 - 40);
            v59 = *(_OWORD *)(v46 - 24);
            *((_WORD *)v57 - 4) = *((_WORD *)v46 - 4);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while (v46 != v51);
          v51 = (char *)v65[0];
        }
        v46 = (char *)(v56 + 40);
        v65[0] = v57;
        v65[1] = (void *)(v56 + 40);
        *(_QWORD *)&v66 = v54 + 40 * v55;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *(_QWORD *)v46 = v48;
        *((_QWORD *)v46 + 1) = v47;
        *((_QWORD *)v46 + 2) = v49;
        *((_QWORD *)v46 + 3) = v50;
        *((_WORD *)v46 + 16) = 1;
        v46 += 40;
      }
      v65[1] = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v96);

  HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::operator=((_QWORD *)(v63 + 112), &v64);
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)&v64.n128_i64[1]);

}

void sub_1B7D38B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x390]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x340]);
  v10 = (void *)STACK[0x328];
  if (STACK[0x328])
  {
    STACK[0x330] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x300]);
  std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy((_QWORD *)STACK[0x2F0]);

  v11 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v11;
    operator delete(v11);
  }
  objc_destroyWeak((id *)&STACK[0x268]);
  v12 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v12;
    operator delete(v12);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3C0]);
  HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *(_WORD *)(a1 + 208) = 257;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  return a1;
}

void sub_1B7D38D98(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;
  void **v3;
  id *v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;

  v6 = v3;
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 104) = v8;
    operator delete(v8);
  }
  objc_destroyWeak(v2);
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 72) = v9;
    operator delete(v9);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(_QWORD *)(a1 + 440) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 384);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 344);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 304);
  v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(_QWORD *)(a1 + 288) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 240);
  std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(*(_QWORD **)(a1 + 224));

  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[424];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  char v26[360];
  unint64_t v27;

  v27 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v27);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v26 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v26, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  HDStatisticsBucket<HDStatisticsNoiseLevel>::setStatisticsConfiguration((uint64_t)v21, *(void **)(a1 + 592));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v27;
  HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 576) = 0;
  return HDStatisticsBucket<HDStatisticsNoiseLevel>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7D39178(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsNoiseLevel>::setStatisticsConfiguration(uint64_t a1, void *a2)
{
  HDStatisticsNoiseLevelConfiguration *v4;

  objc_storeStrong((id *)(a1 + 32), a2);
  v4 = a2;
  HDStatisticsNoiseLevel::configure((id *)(a1 + 120), v4);

}

void sub_1B7D39220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::operator=(_QWORD *a1, __n128 *a2)
{
  unint64_t v4;
  void *v5;

  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsNoiseLevel>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 54), a2 + 27);
  v4 = a2[28].n128_u64[1];
  a2[28].n128_u64[1] = 0;
  v5 = (void *)a1[57];
  a1[57] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsNoiseLevel>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(a1 + 120), (const HDStatisticsNoiseLevel *)(a2 + 120));
  *(_QWORD *)(a1 + 224) = 0;
  v12 = (_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_QWORD *)(a1 + 232) = 0;
  v13 = *(_QWORD **)(a2 + 216);
  if (v13 != (_QWORD *)(a2 + 224))
  {
    v14 = 0;
    v15 = (_QWORD *)(a1 + 224);
    while (1)
    {
      v16 = (_QWORD *)(a1 + 224);
      if (v15 == v12)
        goto LABEL_12;
      v17 = v14;
      v18 = (_QWORD *)(a1 + 224);
      if (v14)
      {
        do
        {
          v16 = v17;
          v17 = (_QWORD *)v17[1];
        }
        while (v17);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v18[2];
          v19 = *v16 == (_QWORD)v18;
          v18 = v16;
        }
        while (v19);
      }
      v20 = v13[4];
      if (v16[4] < v20)
      {
LABEL_12:
        if (v14)
          v21 = (uint64_t **)v16;
        else
          v21 = (uint64_t **)(a1 + 224);
        if (v14)
          v22 = (uint64_t **)(v16 + 1);
        else
          v22 = (uint64_t **)(a1 + 224);
        if (!*v22)
        {
LABEL_28:
          v25 = (uint64_t *)operator new(0x88uLL);
          v25[4] = v13[4];
          HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)(v25 + 5), (const HDStatisticsNoiseLevel *)(v13 + 5));
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 216), (uint64_t)v21, v22, v25);
        }
      }
      else
      {
        v22 = (uint64_t **)(a1 + 224);
        v21 = (uint64_t **)(a1 + 224);
        if (!v14)
          goto LABEL_28;
        v23 = v14;
        while (1)
        {
          while (1)
          {
            v21 = (uint64_t **)v23;
            v24 = v23[4];
            if (v24 <= v20)
              break;
            v23 = *v21;
            v22 = v21;
            if (!*v21)
              goto LABEL_28;
          }
          if (v24 >= v20)
            break;
          v23 = v21[1];
          if (!v23)
          {
            v22 = v21 + 1;
            goto LABEL_28;
          }
        }
      }
      v26 = (_QWORD *)v13[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v13[2];
          v19 = *v27 == (_QWORD)v13;
          v13 = v27;
        }
        while (!v19);
      }
      if (v27 == (_QWORD *)(a2 + 224))
        break;
      v14 = (_QWORD *)*v12;
      v15 = *(_QWORD **)(a1 + 216);
      v13 = v27;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 240, a2 + 240);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 280), *(const void **)(a2 + 280), *(_QWORD *)(a2 + 288), (uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 304, a2 + 304);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 344, a2 + 344);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 384, a2 + 384);
  return a1;
}

void sub_1B7D39554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v13 + 288) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(*v12);

  v20 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v13 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  v21 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v13 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsNoiseLevel>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id WeakRetained;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;

  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_OWORD *)(a2 + 178);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 178) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  objc_storeStrong((id *)(a1 + 200), *(id *)(a2 + 200));
  v14 = a1 + 224;
  v13 = *(_QWORD **)(a1 + 224);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(v13);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v15 = (_QWORD *)(a2 + 224);
  v16 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 224) = v16;
  v17 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 232) = v17;
  if (v17)
  {
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(a2 + 216) = v15;
    *v15 = 0;
    *(_QWORD *)(a2 + 232) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 216) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 240, (uint64_t *)(a2 + 240));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 280, (__n128 *)(a2 + 280));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 344, (uint64_t *)(a2 + 344));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 384, (uint64_t *)(a2 + 384));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  const HDStatisticsNoiseLevel *v21;
  uint64_t v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  double *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  void **v36;
  char *v37;
  unint64_t v38;
  id v39;
  id v40;
  void *v41;
  char v42;
  float v43;
  _BOOL8 v44;
  unint64_t v45;
  unint64_t v46;
  int8x8_t prime;
  void *v48;
  void *v49;
  uint64_t v50;
  _QWORD **v51;
  unint64_t v52;
  uint8x8_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  _QWORD *i;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  double *v65;
  double *v66;
  BOOL v67;
  void *v68;
  uint64_t **j;
  uint64_t *v70;
  const HDStatisticsNoiseLevel *v71;
  double v72;
  double v73;
  double v74;
  void *v75;
  void *v76;
  void *v77;
  double v78;
  double v79;
  void *v80;
  void *v81;
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  double *v94;
  void *v95;
  uint64_t v96;
  void *__p[2];
  __int128 v98;
  float v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  id v107;
  double v108;
  double v109;
  double v110;
  double v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  id v116;
  _QWORD v117[3];
  _QWORD *v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = a2 + 5;
  if (v4 != -1.79769313e308)
    v6 = a2;
  v92 = (id)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  v94 = a2;
  if (a2[1] == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[6]);
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a2[1]);
  v8 = (void *)v7;
  v9 = (unint64_t)*(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v92, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = (uint64_t *)*((_QWORD *)v94 + 35);
      v16 = (uint64_t *)*((_QWORD *)v94 + 36);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v20 = (void *)objc_msgSend(v14, "copy");
      objc_msgSend(v12, "_setSources:", v20);

    }
  }

  v117[0] = &off_1E6D077F0;
  v118 = v117;
  v93 = v12;
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v100, (const HDStatisticsNoiseLevel *)(v94 + 15));
  if (!v118)
    std::__throw_bad_function_call[abi:ne180100]();
  v21 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(_QWORD *, double *))(*v118 + 48))(v118, &v100);
  HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v108, v21);

  HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v108);
  v96 = *(_QWORD *)(a1 + 24);
  v22 = _HKStatisticsOptionBaselineRelativeQuantities();
  v23 = *(void **)(a1 + 16);
  if ((v22 & v96) != 0)
    objc_msgSend(v23, "_unitForChangeInCanonicalUnit");
  else
    objc_msgSend(v23, "canonicalUnit");
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v96 & 2) != 0)
  {
    v24 = 0.0;
    if (v109 > 0.0 && v108 > 0.0)
      v24 = log10(v108 / v109) * 10.0;
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v95, v24);
    v9 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v93, "setAverageQuantity:", v9);

  }
  if ((v96 & 4) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v95, v111);
    v9 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v93, "setMinimumQuantity:", v9);

  }
  if ((v96 & 8) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v95, v110);
    v9 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v93, "setMaximumQuantity:", v9);

  }
  if ((v96 & 0x20) != 0)
  {
    v25 = v114;
    v26 = v115;
    objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v95, v113);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v93, "setMostRecentQuantity:", v27);

    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v25, v26);
    v9 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v93, "setMostRecentQuantityDateInterval:", v9);

  }
  objc_msgSend(v93, "setDataCount:", v112);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    goto LABEL_164;
  if ((v96 & 2) != 0)
    v90 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v90 = 0;
  if ((v96 & 4) != 0)
    v88 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v88 = 0;
  if ((v96 & 8) != 0)
    v86 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v86 = 0;
  if ((v96 & 0x20) != 0)
  {
    v87 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v89 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {
    v89 = 0;
    v87 = 0;
  }
  v91 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_OWORD *)__p = 0u;
  v98 = 0u;
  v99 = 1.0;
  v28 = (double *)*((_QWORD *)v94 + 27);
  if (v28 == v94 + 28)
    goto LABEL_155;
  do
  {
    HDStatisticsBucket<HDStatisticsNoiseLevel>::_bundleIdentifierForSourceID((uint64_t)v94, *((_QWORD *)v28 + 4));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = v29;
    if (!v29)
      goto LABEL_123;
    v31 = objc_msgSend(v29, "hash");
    v32 = v31;
    v33 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_66;
    v34 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v34.i16[0] = vaddlv_u8(v34);
    v35 = v34.u32[0];
    if (v34.u32[0] > 1uLL)
    {
      v9 = v31;
      if ((void *)v31 >= __p[1])
        v9 = v31 % (unint64_t)__p[1];
    }
    else
    {
      v9 = ((unint64_t)__p[1] - 1) & v31;
    }
    v36 = (void **)*((_QWORD *)__p[0] + v9);
    if (!v36 || (v37 = (char *)*v36) == 0)
    {
LABEL_66:
      v37 = (char *)operator new(0x78uLL);
      *(_QWORD *)v37 = 0;
      *((_QWORD *)v37 + 1) = v32;
      *((_QWORD *)v37 + 2) = v30;
      *(_OWORD *)(v37 + 24) = 0u;
      *(_OWORD *)(v37 + 40) = 0u;
      *(_OWORD *)(v37 + 56) = 0u;
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *((_QWORD *)v37 + 13) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
      *((_WORD *)v37 + 56) = 257;
      v43 = (float)(unint64_t)(*((_QWORD *)&v98 + 1) + 1);
      if (v33 && (float)(v99 * (float)v33) >= v43)
      {
LABEL_112:
        v59 = __p[0];
        v60 = (_QWORD *)*((_QWORD *)__p[0] + v9);
        if (v60)
        {
          *(_QWORD *)v37 = *v60;
        }
        else
        {
          *(_QWORD *)v37 = v98;
          *(_QWORD *)&v98 = v37;
          v59[v9] = &v98;
          if (!*(_QWORD *)v37)
          {
LABEL_121:
            ++*((_QWORD *)&v98 + 1);
            goto LABEL_122;
          }
          v61 = *(_QWORD *)(*(_QWORD *)v37 + 8);
          if ((v33 & (v33 - 1)) != 0)
          {
            if (v61 >= v33)
              v61 %= v33;
          }
          else
          {
            v61 &= v33 - 1;
          }
          v60 = (char *)__p[0] + 8 * v61;
        }
        *v60 = v37;
        goto LABEL_121;
      }
      v44 = (v33 & (v33 - 1)) != 0;
      if (v33 < 3)
        v44 = 1;
      v45 = v44 | (2 * v33);
      v46 = vcvtps_u32_f32(v43 / v99);
      if (v45 <= v46)
        prime = (int8x8_t)v46;
      else
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v33 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_78;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v54 = vcvtps_u32_f32((float)*((unint64_t *)&v98 + 1) / v99);
        if (__p[1] < (void *)3
          || (v55 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
        {
          v54 = std::__next_prime(v54);
        }
        else
        {
          v56 = 1 << -(char)__clz(v54 - 1);
          if (v54 >= 2)
            v54 = v56;
        }
        if (*(_QWORD *)&prime <= v54)
          prime = (int8x8_t)v54;
        if ((void *)*(_QWORD *)&prime >= __p[1])
        {
          v33 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_78:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v48 = operator new(8 * *(_QWORD *)&prime);
            v49 = __p[0];
            __p[0] = v48;
            if (v49)
              operator delete(v49);
            v50 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v50++) = 0;
            while (*(_QWORD *)&prime != v50);
            v51 = (_QWORD **)v98;
            if ((_QWORD)v98)
            {
              v52 = *(_QWORD *)(v98 + 8);
              v53 = (uint8x8_t)vcnt_s8(prime);
              v53.i16[0] = vaddlv_u8(v53);
              if (v53.u32[0] > 1uLL)
              {
                if (v52 >= *(_QWORD *)&prime)
                  v52 %= *(_QWORD *)&prime;
              }
              else
              {
                v52 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v52) = &v98;
              for (i = *v51; i; v52 = v58)
              {
                v58 = i[1];
                if (v53.u32[0] > 1uLL)
                {
                  if (v58 >= *(_QWORD *)&prime)
                    v58 %= *(_QWORD *)&prime;
                }
                else
                {
                  v58 &= *(_QWORD *)&prime - 1;
                }
                if (v58 != v52)
                {
                  if (!*((_QWORD *)__p[0] + v58))
                  {
                    *((_QWORD *)__p[0] + v58) = v51;
                    goto LABEL_103;
                  }
                  *v51 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v58);
                  **((_QWORD **)__p[0] + v58) = i;
                  i = v51;
                }
                v58 = v52;
LABEL_103:
                v51 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v33 = (unint64_t)prime;
            goto LABEL_107;
          }
          v68 = __p[0];
          __p[0] = 0;
          if (v68)
            operator delete(v68);
          v33 = 0;
          __p[1] = 0;
        }
      }
LABEL_107:
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v32 >= v33)
          v9 = v32 % v33;
        else
          v9 = v32;
      }
      else
      {
        v9 = (v33 - 1) & v32;
      }
      goto LABEL_112;
    }
    while (1)
    {
      v38 = *((_QWORD *)v37 + 1);
      if (v38 == v32)
        break;
      if (v35 > 1)
      {
        if ((void *)v38 >= __p[1])
          v38 %= (unint64_t)__p[1];
      }
      else
      {
        v38 &= (unint64_t)__p[1] - 1;
      }
      if (v38 != v9)
        goto LABEL_66;
LABEL_65:
      v37 = *(char **)v37;
      if (!v37)
        goto LABEL_66;
    }
    v39 = *((id *)v37 + 2);
    v40 = v30;
    v41 = v40;
    if (v39 != v40)
    {
      v42 = objc_msgSend(v39, "isEqualToString:", v40);

      if ((v42 & 1) != 0)
        goto LABEL_122;
      goto LABEL_65;
    }

LABEL_122:
    *(_OWORD *)(v37 + 24) = *(_OWORD *)(v28 + 5);
    v62 = *(_OWORD *)(v28 + 7);
    v63 = *(_OWORD *)(v28 + 9);
    v64 = *(_OWORD *)(v28 + 11);
    *(_OWORD *)(v37 + 82) = *(_OWORD *)((char *)v28 + 98);
    *(_OWORD *)(v37 + 72) = v64;
    *(_OWORD *)(v37 + 56) = v63;
    *(_OWORD *)(v37 + 40) = v62;
    objc_storeStrong((id *)v37 + 13, *((id *)v28 + 15));
    *((_WORD *)v37 + 56) = *((_WORD *)v28 + 64);

LABEL_123:
    v65 = (double *)*((_QWORD *)v28 + 1);
    if (v65)
    {
      do
      {
        v66 = v65;
        v65 = *(double **)v65;
      }
      while (v65);
    }
    else
    {
      do
      {
        v66 = (double *)*((_QWORD *)v28 + 2);
        v67 = *(_QWORD *)v66 == (_QWORD)v28;
        v28 = v66;
      }
      while (!v67);
    }
    v28 = v66;
  }
  while (v66 != v94 + 28);
  for (j = (uint64_t **)v98; j; j = (uint64_t **)*j)
  {
    v70 = j[2];
    if (!v118)
      std::__throw_bad_function_call[abi:ne180100]();
    v71 = (const HDStatisticsNoiseLevel *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*v118 + 48))(v118, (uint64_t *)j + 3);
    HDStatisticsNoiseLevel::HDStatisticsNoiseLevel((HDStatisticsNoiseLevel *)&v100, v71);
    HDStatisticsNoiseLevel::finalizeSamples((HDStatisticsNoiseLevel *)&v100);
    if ((v96 & 2) != 0)
    {
      v73 = v101;
      v74 = 0.0;
      if (v101 > 0.0)
      {
        v72 = v100;
        if (v100 > 0.0)
          v74 = log10(v100 / v101) * 10.0;
      }
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v95, v74, v73, v72);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v90, "setObject:forKeyedSubscript:", v75, v70);

    }
    if ((v96 & 4) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v95, v103);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "setObject:forKeyedSubscript:", v76, v70);

    }
    if ((v96 & 8) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v95, v102);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "setObject:forKeyedSubscript:", v77, v70);

    }
    if ((v96 & 0x20) != 0)
    {
      v78 = v105;
      v79 = v106;
      objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v95, v104);
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v87, "setObject:forKeyedSubscript:", v80, v70);

      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v78, v79);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v89, "setObject:forKeyedSubscript:", v81, v70);

    }
    if (!v118)
      std::__throw_bad_function_call[abi:ne180100]();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t *))(*v118 + 48))(v118, (uint64_t *)j + 3) + 32));
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v91, "setObject:forKeyedSubscript:", v82, v70);

  }
LABEL_155:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>>>::~__hash_table((uint64_t)__p);
  if ((v96 & 2) != 0)
    objc_msgSend(v93, "setAverageQuantityBySource:", v90);
  if ((v96 & 4) != 0)
    objc_msgSend(v93, "setMinimumQuantityBySource:", v88);
  if ((v96 & 8) != 0)
    objc_msgSend(v93, "setMaximumQuantityBySource:", v86);
  if ((v96 & 0x20) != 0)
  {
    objc_msgSend(v93, "setMostRecentQuantityBySource:", v87);
    objc_msgSend(v93, "setMostRecentQuantityDateIntervalBySource:", v89);
  }
  objc_msgSend(v93, "setDataCountBySource:", v91);

LABEL_164:
  v83 = v118;
  if (v118 == v117)
  {
    v84 = 4;
    v83 = v117;
LABEL_168:
    (*(void (**)(void))(*v83 + 8 * v84))();
  }
  else if (v118)
  {
    v84 = 5;
    goto LABEL_168;
  }
  return v93;
}

void sub_1B7D3A3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  uint64_t v51;
  _QWORD *v53;
  uint64_t v54;

  v53 = *(_QWORD **)(v51 - 136);
  if (v53 == (_QWORD *)(v51 - 160))
  {
    v54 = 4;
    v53 = (_QWORD *)(v51 - 160);
  }
  else
  {
    if (!v53)
      goto LABEL_2;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_2:

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 264);
  v2 = *(_QWORD *)(a1 + 280);
  if (v1 != (*(_QWORD *)(a1 + 288) - v2) >> 3)
  {
    v4 = (void **)(a1 + 280);
    *(_QWORD *)(a1 + 288) = v2;
    std::vector<long long>::reserve((void **)(a1 + 280), v1);
    v5 = *(_QWORD **)(a1 + 256);
    if (v5)
    {
      v6 = *(char **)(a1 + 288);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 280);
            v6 = *(char **)(a1 + 288);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 280) = v16;
          *(_QWORD *)(a1 + 288) = v9;
          *(_QWORD *)(a1 + 296) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 288) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D3A7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double *v6;
  __int128 *v7;
  unint64_t v8;
  double v9;
  double v10;
  int64_t v11;
  char v12;
  char v13;
  BOOL v14;
  BOOL v15;
  double v16;
  char v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  char *v39;
  uint64_t v40;
  double *v41;
  double *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  id WeakRetained;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  unint64_t v55;
  uint64_t **v56;
  __int128 v57;
  double *v58;
  unint64_t v59;
  char v60;
  double *v61;
  __int128 v62;
  _OWORD *v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  _OWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  double var2;
  _BOOL4 v74;
  double v75;
  double var0;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  double *v80;
  double *v81;
  _OWORD *v82;
  __int128 v83;
  __int128 v84;
  double *v85;
  int v86;
  unint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  unint64_t v92;
  uint64_t **v93;
  BOOL v94;
  unint64_t v95;
  double *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  BOOL v109;
  double v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  id *location;
  HDStatisticsNoiseLevel *v115;
  int64_t v116;
  id v117;
  _QWORD *v118;
  char v119;
  int64_t var3;
  BOOL var5;
  int v122;
  double **v123;
  uint64_t v124;
  HDRawQuantitySample v125;
  __int128 v126;
  __int128 v127;
  __int16 v128;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v123 = (double **)(a1 + 96);
    v118 = (_QWORD *)(a1 + 64);
    v115 = (HDStatisticsNoiseLevel *)(a1 + 120);
    location = (id *)(a1 + 88);
    v113 = (_QWORD *)(a1 + 224);
    do
    {
      v6 = *(double **)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          v27 = a2;
          v28 = a2;
          v29 = v5;
          v30 = *(_QWORD *)(a1 + 96);
          if (v6 != (double *)v7)
          {
            do
            {
              v31 = *(double *)(v30 + 8);
              v32 = *(double *)(v30 + 16);
              if (v31 > v29 && v31 < v28)
                v28 = *(double *)(v30 + 8);
              if (v32 > v5)
                v34 = *(double *)(v30 + 16);
              else
                v34 = v27;
              if (v32 < v27)
              {
                v29 = v5;
                v27 = v34;
              }
              v30 += 48;
            }
            while ((__int128 *)v30 != v7);
          }
          if (v27 >= v28)
            v35 = v28;
          else
            v35 = v27;
          v36 = *(double *)(a1 + 16);
          if (v36 > 0.0)
          {
            v37 = v36 * floor(v35 / v36);
            v38 = v36 * floor((v36 + v5) / v36);
            if (v37 >= v38)
              v35 = v37;
            else
              v35 = v38;
          }
          *v123 = 0;
          v123[1] = 0;
          v123[2] = 0;
          if (v6 != (double *)v7)
          {
            if (v8 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            v42 = *(double **)(a1 + 96);
            v41 = *(double **)(a1 + 104);
            v43 = v39;
            if (v41 != v42)
            {
              do
              {
                v44 = *((_OWORD *)v41 - 3);
                v45 = *((_OWORD *)v41 - 2);
                *(_OWORD *)(v43 - 21) = *(_OWORD *)((char *)v41 - 21);
                *((_OWORD *)v43 - 3) = v44;
                *((_OWORD *)v43 - 2) = v45;
                v43 -= 48;
                v41 -= 6;
              }
              while (v41 != v42);
              v41 = *v123;
            }
            *(_QWORD *)(a1 + 96) = v43;
            *(_QWORD *)(a1 + 104) = v39;
            *(_QWORD *)(a1 + 112) = &v39[48 * v40];
            if (v41)
              operator delete(v41);
          }
          HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v125.var0 = a1;
            v47 = 126 - 2 * __clz(v8);
            if (v6 == (double *)v7)
              v48 = 0;
            else
              v48 = v47;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*,false>((uint64_t)v6, v7, (uint64_t)&v125, v48, 1);
          }
          else
          {
            v59 = 126 - 2 * __clz(v8);
            if (v6 == (double *)v7)
              v48 = 0;
            else
              v48 = v59;
          }
          std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*,false>((uint64_t)v6, v7, v48, 1);
          if (*(_BYTE *)(a1 + 25))
            v117 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v117 = 0;
          if (v6 == (double *)v7)
          {
LABEL_155:
            v106 = *(_QWORD **)(a1 + 216);
            if (v106 != v113)
            {
              do
              {
                v107 = (_QWORD *)v106[1];
                if (v107)
                {
                  do
                  {
                    v108 = v107;
                    v107 = (_QWORD *)*v107;
                  }
                  while (v107);
                }
                else
                {
                  do
                  {
                    v108 = (_QWORD *)v106[2];
                    v109 = *v108 == (_QWORD)v106;
                    v106 = v108;
                  }
                  while (!v109);
                }
                v106 = v108;
              }
              while (v108 != v113);
            }
            *(double *)(a1 + 56) = v35;

            if (v6)
              operator delete(v6);
            goto LABEL_164;
          }
          v116 = 0;
          v60 = 0;
          v61 = v6;
          while (2)
          {
            v62 = *((_OWORD *)v61 + 1);
            *(_OWORD *)&v125.var0 = *(_OWORD *)v61;
            *(_OWORD *)&v125.var2 = v62;
            *(double *)&v125.var4 = v61[4];
            if (!v125.var4 || v125.var1 > v35)
            {
LABEL_96:
              v63 = *(_OWORD **)(a1 + 104);
              v64 = *(_QWORD *)(a1 + 112);
              if ((unint64_t)v63 < v64)
              {
                v65 = *(_OWORD *)v61;
                v66 = *((_OWORD *)v61 + 2);
                v63[1] = *((_OWORD *)v61 + 1);
                v63[2] = v66;
                *v63 = v65;
                v67 = v63 + 3;
                goto LABEL_116;
              }
              v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)*v123) >> 4);
              v69 = v68 + 1;
              if (v68 + 1 > 0x555555555555555)
                std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
              v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (_QWORD)*v123) >> 4);
              if (2 * v70 > v69)
                v69 = 2 * v70;
              if (v70 >= 0x2AAAAAAAAAAAAAALL)
                v71 = 0x555555555555555;
              else
                v71 = v69;
              if (v71)
                v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v71);
              else
                v72 = 0;
              v77 = (_OWORD *)(v71 + 48 * v68);
              v78 = *(_OWORD *)v61;
              v79 = *((_OWORD *)v61 + 2);
              v77[1] = *((_OWORD *)v61 + 1);
              v77[2] = v79;
              *v77 = v78;
              v81 = *(double **)(a1 + 96);
              v80 = *(double **)(a1 + 104);
              v82 = v77;
              if (v80 != v81)
              {
                do
                {
                  v83 = *((_OWORD *)v80 - 3);
                  v84 = *((_OWORD *)v80 - 2);
                  *(_OWORD *)((char *)v82 - 21) = *(_OWORD *)((char *)v80 - 21);
                  *(v82 - 3) = v83;
                  *(v82 - 2) = v84;
                  v82 -= 3;
                  v80 -= 6;
                }
                while (v80 != v81);
                v80 = *v123;
              }
              v67 = v77 + 3;
              *(_QWORD *)(a1 + 96) = v82;
              *(_QWORD *)(a1 + 104) = v77 + 3;
              *(_QWORD *)(a1 + 112) = v71 + 48 * v72;
              if (v80)
              {
                v85 = v80;
                goto LABEL_115;
              }
              goto LABEL_116;
            }
            var2 = v125.var2;
            if (v125.var2 >= v35)
            {
              var0 = v125.var0;
              v125.var2 = v35;
              v74 = var2 > v35;
              v125.var4 = v125.var1 < v35;
              if (v125.var1 >= v35)
                goto LABEL_96;
              var3 = v125.var3;
              var5 = v125.var5;
              v75 = v35;
            }
            else
            {
              v125.var4 = v125.var2 > v125.var1;
              if (v125.var2 <= v125.var1)
                goto LABEL_96;
              v74 = 0;
              var3 = 0;
              var5 = 0;
              var2 = 0.0;
              v75 = 0.0;
              var0 = 0.0;
            }
            HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v125, v118);
            v86 = *((unsigned __int8 *)v61 + 42);
            v122 = *((unsigned __int8 *)v61 + 41);
            v119 = *((_BYTE *)v61 + 40);
            if (!v125.var4)
              goto LABEL_138;
            if ((v60 & 1) != 0)
            {
              v87 = v125.var3;
              if (v116 == v125.var3 || *(_BYTE *)(a1 + 24))
              {
                HDStatisticsNoiseLevel::addSample(v115, &v125, v86 == 0);
                v86 = 1;
              }
            }
            else
            {
              HDStatisticsNoiseLevel::addSample(v115, &v125, v86 == 0);
              v86 = 1;
              v87 = v125.var3;
              v116 = v125.var3;
            }
            if (!*(_BYTE *)(a1 + 25))
              goto LABEL_137;
            HDStatisticsBucket<HDStatisticsNoiseLevel>::_bundleIdentifierForSourceID(a1, v87);
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v88)
              goto LABEL_136;
            objc_msgSend(v117, "objectForKeyedSubscript:", v88);
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            v90 = v89;
            if (v89)
            {
              if (objc_msgSend(v89, "longLongValue") != v87 && !*(_BYTE *)(a1 + 24))
              {
LABEL_135:

LABEL_136:
LABEL_137:
                v60 = 1;
LABEL_138:
                if (v74)
                {
                  v94 = v86 != 0;
                  v96 = *(double **)(a1 + 104);
                  v95 = *(_QWORD *)(a1 + 112);
                  if ((unint64_t)v96 >= v95)
                  {
                    v85 = *v123;
                    v97 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)*v123) >> 4);
                    v98 = v97 + 1;
                    if (v97 + 1 > 0x555555555555555)
                      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                    v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - (_QWORD)v85) >> 4);
                    if (2 * v99 > v98)
                      v98 = 2 * v99;
                    if (v99 >= 0x2AAAAAAAAAAAAAALL)
                      v100 = 0x555555555555555;
                    else
                      v100 = v98;
                    if (v100)
                    {
                      v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v100);
                      v85 = *(double **)(a1 + 96);
                      v96 = *(double **)(a1 + 104);
                    }
                    else
                    {
                      v101 = 0;
                    }
                    v102 = v100 + 48 * v97;
                    *(double *)v102 = var0;
                    *(double *)(v102 + 8) = v75;
                    *(double *)(v102 + 16) = var2;
                    *(_QWORD *)(v102 + 24) = var3;
                    *(_BYTE *)(v102 + 32) = v74;
                    *(_BYTE *)(v102 + 33) = var5;
                    *(_BYTE *)(v102 + 40) = v119;
                    *(_BYTE *)(v102 + 41) = v122;
                    *(_BYTE *)(v102 + 42) = v94;
                    v103 = v102;
                    if (v96 != v85)
                    {
                      do
                      {
                        v104 = *((_OWORD *)v96 - 3);
                        v105 = *((_OWORD *)v96 - 2);
                        *(_OWORD *)(v103 - 21) = *(_OWORD *)((char *)v96 - 21);
                        *(_OWORD *)(v103 - 48) = v104;
                        *(_OWORD *)(v103 - 32) = v105;
                        v103 -= 48;
                        v96 -= 6;
                      }
                      while (v96 != v85);
                      v85 = *v123;
                    }
                    v67 = (_OWORD *)(v102 + 48);
                    *(_QWORD *)(a1 + 96) = v103;
                    *(_QWORD *)(a1 + 104) = v102 + 48;
                    *(_QWORD *)(a1 + 112) = v100 + 48 * v101;
                    if (v85)
LABEL_115:
                      operator delete(v85);
                  }
                  else
                  {
                    *v96 = var0;
                    v96[1] = v75;
                    v96[2] = var2;
                    *((_QWORD *)v96 + 3) = var3;
                    *((_BYTE *)v96 + 32) = v74;
                    *((_BYTE *)v96 + 33) = var5;
                    *((_BYTE *)v96 + 40) = v119;
                    *((_BYTE *)v96 + 41) = v122;
                    v67 = v96 + 6;
                    *((_BYTE *)v96 + 42) = v94;
                  }
LABEL_116:
                  *(_QWORD *)(a1 + 104) = v67;
                }
                v61 += 6;
                if (v61 == (double *)v7)
                  goto LABEL_155;
                continue;
              }
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v87);
              v91 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v117, "setObject:forKeyedSubscript:", v91, v88);

            }
            break;
          }
          v92 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_canonicalSourceIDForSourceID(a1, v87);
          v93 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_statisticsForSource(a1, v92);
          HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)v93, &v125, v122 == 0);
          LOBYTE(v122) = 1;
          goto LABEL_135;
        }
        v9 = v6[1];
        v10 = v6[2];
        v11 = *((_QWORD *)v6 + 3);
        v12 = *((_BYTE *)v6 + 32);
        v13 = *((_BYTE *)v6 + 33);
        if (v12)
        {
          v14 = v9 < a2;
          v15 = v10 > a2;
          if (v10 < a2)
            v16 = v6[2];
          else
            v16 = a2;
          if (v10 >= a2)
          {
            v17 = *((_BYTE *)v6 + 33);
          }
          else
          {
            v14 = v10 > v9;
            v17 = 0;
          }
          if (v10 < a2)
            v18 = 0.0;
          else
            v18 = *v6;
          if (v10 < a2)
            v19 = 0.0;
          else
            v19 = a2;
          if (v10 < a2)
            v20 = 0.0;
          else
            v20 = v6[2];
          if (v10 < a2)
            v21 = 0;
          else
            v21 = *((_QWORD *)v6 + 3);
          if (v10 < a2)
            v15 = 0;
          v22 = v10 > v9;
          if (v9 <= a2)
          {
            v10 = v16;
            v23 = v14;
          }
          else
          {
            v20 = v6[2];
            v23 = 0;
          }
          if (v9 > a2)
            v12 = *((_BYTE *)v6 + 33);
          else
            v12 = v17;
          if (v9 > a2)
            v24 = *v6;
          else
            v24 = v18;
          if (v9 > a2)
            v25 = v6[1];
          else
            v25 = v19;
          if (v9 > a2)
            v26 = *((_QWORD *)v6 + 3);
          else
            v26 = v21;
          if (v9 > a2)
            v15 = v22;
        }
        else
        {
          v23 = 0;
          v26 = 0;
          v15 = 0;
          v24 = 0.0;
          v25 = 0.0;
          v20 = 0.0;
        }
        v49 = *((unsigned __int8 *)v6 + 42);
        v50 = *((unsigned __int8 *)v6 + 41);
        v51 = *((unsigned __int8 *)v6 + 40);
        v125.var0 = *v6;
        v125.var1 = v9;
        v125.var2 = v10;
        v125.var3 = v11;
        v125.var4 = v23;
        v125.var5 = v13;
        *(_DWORD *)(&v125.var5 + 1) = *(_DWORD *)((char *)v6 + 34);
        *(_WORD *)(&v125.var5 + 5) = *((_WORD *)v6 + 19);
        *(double *)&v126 = v24;
        *((double *)&v126 + 1) = v25;
        *(double *)&v127 = v20;
        *((_QWORD *)&v127 + 1) = v26;
        LOBYTE(v128) = v15;
        HIBYTE(v128) = v12;
        HDStatisticsNoiseLevel::applyMaskToSample((uint64_t)&v125, v118);
        v52 = v51 != 0;
        v53 = v50 != 0;
        v54 = v49 != 0;
        if (v125.var4)
        {
          HDStatisticsNoiseLevel::addSample(v115, &v125, v49 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v55 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_canonicalSourceIDForSourceID(a1, v125.var3);
            v56 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_statisticsForSource(a1, v55);
            HDStatisticsNoiseLevel::addSample((HDStatisticsNoiseLevel *)v56, &v125, v50 == 0);
          }
          v52 = 1;
          v53 = 1;
          v54 = 1;
        }
        if ((_BYTE)v128)
        {
          LOWORD(v124) = v128;
          v57 = v127;
          v58 = *v123;
          *(_OWORD *)v58 = v126;
          *((_OWORD *)v58 + 1) = v57;
          *((_QWORD *)v58 + 4) = v124;
          *((_BYTE *)v58 + 40) = v52;
          *((_BYTE *)v58 + 41) = v53;
          *((_BYTE *)v58 + 42) = v54;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
        }
      }
      *(double *)(a1 + 56) = a2;
LABEL_164:
      v110 = *(double *)(a1 + 56);
      if (v110 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime(double) [Statistics = HDStatisticsNoiseLevel]");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v111, "handleFailureInFunction:file:lineNumber:description:", v112, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v110 = *(double *)(a1 + 56);
      }
      v5 = v110;
    }
    while (v110 < a2);
  }
}

void sub_1B7D3B150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsNoiseLevel>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v13;

  v13 = a2;
  v4 = (uint64_t **)(a1 + 224);
  v5 = *(_QWORD **)(a1 + 224);
  if (!v5)
    goto LABEL_11;
  v6 = (uint64_t **)(a1 + 224);
  do
  {
    v7 = v5[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (!v8)
      v6 = (uint64_t **)v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v4 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    v10 = v4 - 1;
    v11 = std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v4 - 1, a2, &v13);
    HDStatisticsNoiseLevel::configure((id *)v11 + 5, *(HDStatisticsNoiseLevelConfiguration **)(a1 + 32));
    v6 = std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v13);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsNoiseLevel>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 304), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsNoiseLevel>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 344);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D3B330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsNoiseLevel>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 384);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D3B400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= a2)
        return v7;
      v5 = v7[1];
    }
    while (v5);
    v6 = v7 + 1;
  }
  else
  {
    v7 = a1 + 1;
  }
LABEL_10:
  v9 = (char *)operator new(0x88uLL);
  *((_QWORD *)v9 + 4) = *a3;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *((_QWORD *)v9 + 15) = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *((_WORD *)v9 + 64) = 257;
  std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
  return (uint64_t **)v9;
}

void sub_1B7D3B500(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 280);
      v11 = *(char **)(*(_QWORD *)a3 + 288);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 288);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 288);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 280);
      v24 = *(char **)(*(_QWORD *)a3 + 288);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 288);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 288);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 280);
            v31 = *(char **)(*(_QWORD *)a3 + 288);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 288);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 288);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  double v25;
  __int128 *v26;
  double v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  __int128 *v41;
  __int128 *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  __int128 *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 *v96;
  double v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  double v101;
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[32];
  _BYTE v110[32];
  __int128 v111;
  _BYTE v112[32];
  _BYTE v113[32];
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsNoiseLevel>::_SampleRemainder*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[32];
  _BYTE v20[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 40) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 21);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 27) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v20;
        *(_OWORD *)(a2 - 21) = *(_OWORD *)&v20[11];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#2} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsTemporalBucketWeightedDiscrete<HDStatisticsTemporalBucketWeightedDiscreteParameters>,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      *(_OWORD *)v19 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(v10 + 32);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 112);
        *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + v15 + 96);
        *(_OWORD *)(v16 + 160) = v17;
        *(_OWORD *)(v16 + 171) = *(_OWORD *)(a1 + v15 + 123);
        if (v15 == -96)
          break;
        v15 -= 48;
        if (v13 >= *(double *)(v16 + 56))
        {
          v18 = a1 + v15 + 144;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 27) = *(_OWORD *)&v19[11];
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsNoiseLevel>>>::~__hash_table(uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::~__func()
{
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6D077F0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D077F0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addStatisticsFromFinishedBucket<HDStatisticsNoiseLevel>(HKStatistics *,HDStatisticsBucket<HDStatisticsNoiseLevel> const&)::{lambda(HDStatisticsNoiseLevel const&)#1}>,HDStatisticsNoiseLevel const& ()(HDStatisticsNoiseLevel const&)>::target_type()
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  void *v13;

  if (*(_BYTE *)(a1 + 576))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date"));
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_configureForStartTime(a1);
  }
  v8 = *(double *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (*(_BYTE *)(a1 + 576))
    {
      v10 = -1.79769313e308;
    }
    else
    {
      v10 = *(double *)(a1 + 176);
      v12 = *(double *)(a1 + 120);
      if (v10 <= v12)
        v10 = -1.79769313e308;
      if (v10 < v12)
        v10 = *(double *)(a1 + 120);
    }
  }
  else
  {
    v10 = *(double *)(a1 + 176);
    if (v10 <= *(double *)(a1 + 120))
      v10 = -1.79769313e308;
  }
  if (v10 <= v8)
  {
    if (v9 && a3)
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_advanceToTime(a1, v8);
    HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13, a4);

  }
  return v11;
}

void sub_1B7D3D7FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_advanceToTime(uint64_t a1, double a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  uint64_t v22;

  if (*(double *)(a1 + 128) <= a2)
  {
    v4 = a1 + 112;
    v5 = (double *)(a1 + 120);
    do
    {
      v6 = *(_QWORD *)(a1 + 552);
      v7 = *(_QWORD *)(a1 + 544);
      if (v6 == v7)
      {
        v22 = 0;
        v15 = *(void **)(a1 + 40);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dateIntervalContainingDate:index:", v16, &v22);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v22;
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v19 = v18;
        objc_msgSend(v8, "endDate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::resetToBucket(v4, v17, v19, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_statisticsFromFinishedBucket(a1, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "startDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "timeIntervalSinceReferenceDate");
        v12 = v11;
        objc_msgSend(v8, "endDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceReferenceDate");
        HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::advanceBucket(v4, v12, v14);

      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_didChangeBucket(a1, v9);
      if (v6 != v7)
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_notifyForCurrentBucket(a1);

    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1B7D3DA04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t v6;
  double v7;
  uint64_t *v8;
  double v9;
  double v10;
  unint64_t v11;
  char v12;
  double v13;
  double v14;
  _BOOL4 v15;
  unint64_t v16;
  char v17;
  double v18;
  double v19;
  uint64_t *v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  int8x16_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t **v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  double v60;
  double v61;
  double v62;

  v3 = *(_BYTE *)(a2 + 32);
  if (!v3)
    return;
  v6 = a1 + 8;
  v7 = *(double *)(a1 + 8);
  v8 = *(uint64_t **)a2;
  v9 = *(double *)(a2 + 8);
  v10 = *(double *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_BYTE *)(a2 + 33);
  v13 = v9;
  if (v9 <= v7)
  {
    v13 = *(double *)(a1 + 8);
    if (v10 < v7)
      return;
  }
  if (v10 <= v13)
    return;
  v14 = *(double *)(a1 + 16);
  if (v13 <= v14)
  {
    if (v10 >= v14)
    {
      v15 = v10 > v14;
      v16 = *(_QWORD *)(a2 + 24);
      v18 = *(double *)(a2 + 16);
      v19 = *(double *)(a1 + 16);
      v20 = *(uint64_t **)a2;
      v17 = *(_BYTE *)(a2 + 33);
      if (v13 >= v14)
      {
        v16 = *(_QWORD *)(a2 + 24);
        v18 = *(double *)(a2 + 16);
        v19 = *(double *)(a1 + 16);
        v20 = *(uint64_t **)a2;
        v17 = *(_BYTE *)(a2 + 33);
        goto LABEL_48;
      }
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0.0;
      v14 = *(double *)(a2 + 16);
      v19 = 0.0;
      v20 = 0;
    }
    v60 = v14;
    v61 = v13;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 248, v11, v11);
    v21 = *(_QWORD *)(a1 + 112);
    if (v21 == *(_QWORD *)(a1 + 104) && *(uint64_t *)(a1 + 160) <= 0)
    {
      v26.f64[1] = *(float64_t *)(a1 + 16);
      v23 = v60;
      v22 = v61;
      v26.f64[0] = v61;
      v27.f64[0] = *(float64_t *)(a1 + 8);
      v27.f64[1] = v60;
      v28 = (int8x16_t)vcgtq_f64(v27, v26);
      v27.f64[0] = v61;
      *(int8x16_t *)(a1 + 48) = vbslq_s8(v28, *(int8x16_t *)(a1 + 8), (int8x16_t)v27);
      if (!a3)
      {
LABEL_25:
        v29 = *(_QWORD *)(a1 + 120);
        if (v21 >= v29)
        {
          v31 = *(_QWORD *)(a1 + 104);
          v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v31) >> 4);
          v33 = v32 + 1;
          if (v32 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v31) >> 4);
          if (2 * v34 > v33)
            v33 = 2 * v34;
          if (v34 >= 0x2AAAAAAAAAAAAAALL)
            v35 = 0x555555555555555;
          else
            v35 = v33;
          if (v35)
          {
            v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v35);
            v23 = v60;
            v22 = v61;
          }
          else
          {
            v36 = 0;
          }
          v37 = v35 + 48 * v32;
          v38 = v35 + 48 * v36;
          *(_QWORD *)v37 = v8;
          *(double *)(v37 + 8) = v22;
          *(double *)(v37 + 16) = v23;
          *(_QWORD *)(v37 + 24) = v11;
          *(_BYTE *)(v37 + 32) = 1;
          *(_BYTE *)(v37 + 33) = v12;
          *(_WORD *)(v37 + 40) = 0;
          *(_BYTE *)(v37 + 42) = 0;
          v30 = v37 + 48;
          v40 = *(char **)(a1 + 104);
          v39 = *(char **)(a1 + 112);
          if (v39 != v40)
          {
            do
            {
              v41 = *((_OWORD *)v39 - 3);
              v42 = *((_OWORD *)v39 - 2);
              *(_OWORD *)(v37 - 21) = *(_OWORD *)(v39 - 21);
              *(_OWORD *)(v37 - 48) = v41;
              *(_OWORD *)(v37 - 32) = v42;
              v37 -= 48;
              v39 -= 48;
            }
            while (v39 != v40);
            v39 = *(char **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 104) = v37;
          *(_QWORD *)(a1 + 112) = v30;
          *(_QWORD *)(a1 + 120) = v38;
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v21 = v8;
          *(double *)(v21 + 8) = v22;
          *(double *)(v21 + 16) = v23;
          *(_QWORD *)(v21 + 24) = v11;
          *(_BYTE *)(v21 + 32) = 1;
          *(_BYTE *)(v21 + 33) = v12;
          *(_WORD *)(v21 + 40) = 0;
          v30 = v21 + 48;
          *(_BYTE *)(v21 + 42) = 0;
        }
        *(_QWORD *)(a1 + 112) = v30;
        if (!*(_BYTE *)(a1 + 200) || *(double *)(a1 + 176) <= v9)
        {
          *(_QWORD *)(a1 + 168) = v8;
          *(double *)(a1 + 176) = v9;
          *(double *)(a1 + 184) = v10;
          *(_QWORD *)(a1 + 192) = v11;
          *(_BYTE *)(a1 + 200) = v3;
          *(_BYTE *)(a1 + 201) = v12;
        }
        if (*(_BYTE *)(a1 + 33))
        {
          v43 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_canonicalSourceIDForSourceID(v6, v11);
          v44 = HDStatisticsBucket<HDStatisticsNoiseLevel>::_statisticsForSource(v6, v43);
          if (!*((_BYTE *)v44 + 72) || *((double *)v44 + 6) <= v9)
          {
            v44[5] = v8;
            *((double *)v44 + 6) = v9;
            *((double *)v44 + 7) = v10;
            v44[8] = (uint64_t *)v11;
            *((_BYTE *)v44 + 72) = v3;
            *((_BYTE *)v44 + 73) = v12;
          }
        }
LABEL_48:
        v12 = v17;
        v8 = v20;
        v13 = v19;
        v10 = v18;
        v11 = v16;
        if (!v15)
          return;
        goto LABEL_49;
      }
    }
    else
    {
      v23 = v60;
      v22 = v61;
      if (v61 < *(double *)(a1 + 48))
      {
        v24 = *(double *)(a1 + 8);
        if (v61 >= v24)
          v24 = v61;
        *(double *)(a1 + 48) = v24;
      }
      if (v60 > *(double *)(a1 + 56))
      {
        v25 = *(double *)(a1 + 16);
        if (v25 >= v60)
          v25 = v60;
        *(double *)(a1 + 56) = v25;
      }
      if (!a3)
        goto LABEL_25;
    }
    if (v22 < *(double *)(a1 + 16))
    {
      HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime(v6, v22);
      v23 = v60;
      v22 = v61;
      v21 = *(_QWORD *)(a1 + 112);
    }
    goto LABEL_25;
  }
  LOBYTE(v15) = 1;
LABEL_49:
  v45 = *(_QWORD *)(a1 + 440);
  v46 = *(_QWORD *)(a1 + 448);
  if (v45 >= v46)
  {
    v48 = *(_QWORD *)(a1 + 432);
    v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v48) >> 3);
    v50 = v49 + 1;
    if (v49 + 1 > 0x666666666666666)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v48) >> 3);
    if (2 * v51 > v50)
      v50 = 2 * v51;
    if (v51 >= 0x333333333333333)
      v52 = 0x666666666666666;
    else
      v52 = v50;
    if (v52)
    {
      v62 = v13;
      v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v52);
      v13 = v62;
    }
    else
    {
      v53 = 0;
    }
    v54 = v52 + 40 * v49;
    v55 = v52 + 40 * v53;
    *(_QWORD *)v54 = v8;
    *(double *)(v54 + 8) = v13;
    *(double *)(v54 + 16) = v10;
    *(_QWORD *)(v54 + 24) = v11;
    *(_BYTE *)(v54 + 32) = v15;
    *(_BYTE *)(v54 + 33) = v12;
    v47 = v54 + 40;
    v57 = *(char **)(a1 + 432);
    v56 = *(char **)(a1 + 440);
    if (v56 != v57)
    {
      do
      {
        v58 = *(_OWORD *)(v56 - 40);
        v59 = *(_OWORD *)(v56 - 24);
        *(_WORD *)(v54 - 8) = *((_WORD *)v56 - 4);
        *(_OWORD *)(v54 - 24) = v59;
        *(_OWORD *)(v54 - 40) = v58;
        v54 -= 40;
        v56 -= 40;
      }
      while (v56 != v57);
      v56 = *(char **)(a1 + 432);
    }
    *(_QWORD *)(a1 + 432) = v54;
    *(_QWORD *)(a1 + 440) = v47;
    *(_QWORD *)(a1 + 448) = v55;
    if (v56)
      operator delete(v56);
  }
  else
  {
    *(_QWORD *)v45 = v8;
    *(double *)(v45 + 8) = v13;
    *(double *)(v45 + 16) = v10;
    *(_QWORD *)(v45 + 24) = v11;
    *(_BYTE *)(v45 + 32) = v15;
    v47 = v45 + 40;
    *(_BYTE *)(v45 + 33) = v12;
  }
  *(_QWORD *)(a1 + 440) = v47;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_notifyForCurrentBucket(uint64_t a1)
{
  void (**v2)(id, void *);
  void *v3;
  void (**v4)(id, void *);

  if (*(_BYTE *)(a1 + 578))
  {
    *(_BYTE *)(a1 + 580) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 580) = 0;
    v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      v4 = v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4[2](v4, v3);

      v2 = v4;
    }

  }
}

void sub_1B7D3DF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::advanceBucket(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 432), *(_QWORD *)(a1 + 440), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 440) - *(_QWORD *)(a1 + 432)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::resetToBucket(a1, *(_QWORD *)a1 + 1, a2, a3);
  v6 = v9;
  v7 = v10;
  if (v9 != v10)
  {
    v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_1B7D3E04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  HDQuantitySampleOverlapProcessor *v8;
  void *v9;
  HDQuantitySampleOverlapProcessor *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;

  objc_storeStrong((id *)(a1 + 456), *(id *)(a1 + 40));
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v8 = -[HDQuantitySampleOverlapProcessor initWithOverlapFunction:]([HDQuantitySampleOverlapProcessor alloc], "initWithOverlapFunction:", 1);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  v9 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v8;
  v10 = v8;

  *(_WORD *)(a1 + 216) = 257;
  if (*(_QWORD *)(a1 + 240))
  {
    v11 = *(_QWORD *)(a1 + 232);
    v12 = *(_QWORD **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = a1 + 232;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    if (v12[1])
      v13 = (_QWORD *)v12[1];
    else
      v13 = v12;
    if (v13)
    {
      v14 = (_QWORD *)v13[2];
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 == v13)
        {
          *v14 = 0;
          while (1)
          {
            v17 = (_QWORD *)v14[1];
            if (!v17)
              break;
            do
            {
              v14 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; v15 = (_QWORD *)v14[1])
          {
            do
            {
              v14 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(v13);
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
          v14 = i;
        v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsNoiseLevel>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsNoiseLevel>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsNoiseLevel>>>::destroy(v13);
  }
  HDStatisticsBucket<HDStatisticsNoiseLevel>::setStatisticsConfiguration(a1 + 8, *(void **)(a1 + 456));
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a1 + 432);
  *(_QWORD *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_BYTE *)(a1 + 580))
  {
    if (v3)
    {
      v6 = v3;
      v4 = _Block_copy(*(const void **)(a1 + 96));
      v5 = v4;
      if (v4)
        (*((void (**)(void *, id))v4 + 2))(v4, v6);

      v3 = v6;
    }
    *(_BYTE *)(a1 + 580) = 0;
  }

}

void sub_1B7D3E234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "compare:", v6);

  return v7;
}

void sub_1B7D3E2B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveInvalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[4];
  id v38;
  id v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to invalidate interval: no data source available."));
    v14 = 0;
    goto LABEL_17;
  }
  v30 = a3;
  if (v5
    && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::_currentBucketInterval(a1),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v5, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startDate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hk_isAfterDate:", v9))
    {
      objc_msgSend(v5, "startDate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "endDate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);

    }
    else
    {
      v12 = 0;
    }

    v13 = _Block_copy(*(const void **)(a1 + 96));
    if ((v12 & 1) == 0)
    {
      v15 = operator new();
      v25 = *(void **)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(a1 + 40);
      v29 = objc_loadWeakRetained((id *)(a1 + 48));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_HDConcreteStatisticsCollectionCalculatorImplementation(v15, v25, v26, v28, v27, v29);

      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(a1 + 56));
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, a1 + 72, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, *(_QWORD *)(a1 + 592));
      v16 = 0;
      v17 = (_QWORD *)v15;
      goto LABEL_11;
    }
  }
  else
  {
    v13 = _Block_copy(*(const void **)(a1 + 96));
  }
  v15 = 0;
  v16 = 1;
  *(_BYTE *)(a1 + 576) = 1;
  v17 = (_QWORD *)a1;
LABEL_11:
  v18 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
  v37[3] = &unk_1E6D04928;
  v19 = v5;
  v38 = v19;
  v20 = v13;
  v39 = v20;
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 72))(v17, v37);
  if (v5)
  {
    objc_msgSend(v19, "startDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_configureForStartTime((uint64_t)v17);

  }
  else
  {
    (*(void (**)(_QWORD *))(*v17 + 32))(v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v31[0] = v18;
  v31[1] = 3221225472;
  v31[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
  v31[3] = &unk_1E6D04990;
  v34 = a1;
  v5 = v19;
  v36 = v16;
  v32 = v5;
  v35 = v17;
  v33 = WeakRetained;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v17 + 112))(v17, v31, v30);
  v22 = _Block_copy(v20);
  v23 = (void *)v17[12];
  v17[12] = v22;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

LABEL_17:
  return v14;
}

void sub_1B7D3E61C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  MEMORY[0x1BCCAC494](v4, 0x10F1C40F1163A8CLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_4;
  objc_msgSend(v10, "endDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    objc_msgSend(v10, "startDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_4:
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    }
  }

}

void sub_1B7D3E7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  _QWORD v29[5];
  _QWORD v30[6];
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceReferenceDate");
  v10 = v9;

  v11 = *(void **)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  v13 = *(_QWORD *)(a1 + 32);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  v32 = *(_BYTE *)(a1 + 64);
  v30[4] = v7;
  v30[5] = v10;
  v31 = *(_QWORD *)(a1 + 56);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  v14 = objc_msgSend(v11, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", WeakRetained, v13, a2, v30, v29);

  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "endDate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      if (*(_QWORD *)(v15 + 40))
      {
        v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          objc_msgSend(*(id *)(v15 + 40), "dateIntervalAtIndex:", *(_QWORD *)(v15 + 112) + 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          HDStatisticsBucket<HDStatisticsNoiseLevel>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "startDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(v19, "endDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "timeIntervalSinceReferenceDate");
          HDStatisticsCollectionEngine<HDStatisticsNoiseLevel>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            v26 = _Block_copy(*(const void **)(v15 + 96));
            v27 = v26;
            if (v26)
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);

          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_didChangeBucket(v15, 0);

        }
      }

    }
  }
  return v14;
}

void sub_1B7D3EA34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7;
  _BOOL4 v8;
  int v9;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  BOOL v16;
  char v17;

  v7 = *(double *)(a1 + 32);
  if (v7 >= a6)
  {
    if (v7 <= a7)
    {
      v8 = v7 < a7;
      a6 = *(double *)(a1 + 32);
    }
    else
    {
      a2 = 0;
      v8 = 0;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
    }
  }
  else
  {
    v8 = a7 > a6;
  }
  v12 = a5;
  v13 = a6;
  v14 = a7;
  v15 = a2;
  v16 = v8;
  v17 = 0;
  v9 = *(unsigned __int8 *)(a1 + 56);
  if (*(_BYTE *)(a1 + 56))
  {
    if (v8)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v12, a3, a4);
  }
  else
  {
    if (v8)
    {
      v11 = *(double *)(a1 + 40);
      if (a6 <= v11)
      {
        if (a7 >= v11)
        {
          v9 = a6 < v11;
          a7 = *(double *)(a1 + 40);
        }
        else
        {
          v9 = a7 > a6;
        }
      }
    }
    v13 = a6;
    v14 = a7;
    v16 = v9;
    if (v9)
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveAddSample(*(_QWORD *)(a1 + 48), (uint64_t)&v12, a3, a4);
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 576))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_configureForStartTime(a1);
  if (*(_QWORD *)(a1 + 40))
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_advanceToTime(a1, a2);
  if (*(double *)(a1 + 128) > a2)
    HDStatisticsBucket<HDStatisticsNoiseLevel>::_mergeThroughTime(a1 + 120, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v96;
  double v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_WORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_OWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v3 = (void *)a1[5];
  v4 = a1[6];
  v5 = (void *)a1[4];
  objc_msgSend(v5, "dateInterval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  v10[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  v7 = objc_msgSend(v3, "collectionCalculator:queryForInterval:error:sampleHandler:mergeHandler:", v5, v6, a2, v10, v9);

  return v7;
}

void sub_1B7D3F6E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10;
  void *v11;
  double v12;
  _QWORD v14[4];
  char v15;
  BOOL v16;

  v10 = *(_QWORD *)(a1 + 32);
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  v14[3] = a2;
  v15 = 1;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1B7D3F780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI22HDStatisticsNoiseLevelE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsNoiseLevel>::_mergeToTime(*(_QWORD *)(a1 + 32), a2);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6;
  uint64_t v8;
  double v9;

  v6 = a3;
  v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E6D078A0;
  v9 = 900.0;
  if ((v6 & 0x10) == 0)
    v9 = 0.0;
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_WORD *)(a1 + 624) = 1;
  *(_BYTE *)(a1 + 626) = 0;
  *(_BYTE *)(a1 + 628) = 0;
  *(_QWORD *)(a1 + 632) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 672) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);
  JUMPOUT(0x1BCCAC494);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E6D078A0;
  v2 = *(void **)(a1 + 656);
  if (v2)
  {
    *(_QWORD *)(a1 + 664) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 592);
  if (v3)
  {
    *(_QWORD *)(a1 + 600) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 56) = a2;
    *(_BYTE *)(result + 624) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "copy");
  v4 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;

  objc_msgSend(v6, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

}

void sub_1B7D3F8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = v3;
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 632) = v4;
    v3 = v5;
  }

}

void sub_1B7D3F94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  objc_storeStrong(a1 + 80, a2);
  v7 = a2;
  v4 = a1[80];
  v5 = a1[77];
  a1[77] = v4;
  v6 = v4;

  objc_storeStrong(a1 + 19, a1[77]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;

  v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v7 = *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) && *(uint64_t *)(a1 + 256) < 1
    || HKIntervalMask<double>::firstDifference(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2)
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  if (v7)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

void sub_1B7D3FAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 104));
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  void *v3;
  _BYTE v4[8];
  double v5;

  if (*(_BYTE *)(a1 + 624))
    return 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v5);
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  return v3;
}

void sub_1B7D3FB88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;

  v6 = *(id *)(a1 + 64);
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "startDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    objc_msgSend(v7, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    v13 = *(double *)(a2 + 8);

    if (v12 < v13)
      goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 626))
  {
LABEL_11:
    v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 625))
  {
LABEL_9:
    v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 627))
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 664);
    v18 = *(_QWORD *)(a1 + 672);
    if (v17 >= v18)
    {
      v22 = *(_QWORD *)(a1 + 656);
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      else
        v27 = 0;
      v28 = v26 + 40 * v23;
      v29 = v26 + 40 * v27;
      v30 = *(_OWORD *)a2;
      v31 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v28 = v30;
      *(_OWORD *)(v28 + 16) = v31;
      v21 = v28 + 40;
      v32 = *(char **)(a1 + 664);
      v33 = *(char **)(a1 + 656);
      if (v32 != v33)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        v32 = *(char **)(a1 + 656);
      }
      *(_QWORD *)(a1 + 656) = v28;
      *(_QWORD *)(a1 + 664) = v21;
      *(_QWORD *)(a1 + 672) = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v19 = *(_OWORD *)a2;
      v20 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v17 = v19;
      *(_OWORD *)(v17 + 16) = v20;
      v21 = v17 + 40;
    }
    *(_QWORD *)(a1 + 664) = v21;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1B7D3FDDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  void *v62;
  double v63;
  void *v65;
  void *__p;
  uint64_t v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 626))
  {
    v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 626) = 1;
  v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v65 = v6;
  if (*(_BYTE *)(a1 + 625))
    goto LABEL_5;
  v9 = *(void **)(a1 + 648);
  if (!v9)
  {
    v68 = 0;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_5:
    v8 = 0;
    v68 = 0;
    goto LABEL_29;
  }
  objc_msgSend(v9, "sortUsingComparator:", &__block_literal_global_402);
  v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v10 = *(id *)(a1 + 648);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  if (!v11)
  {

    v12 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  v13 = *(_QWORD *)v70;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v70 != v13)
        objc_enumerationMutation(v10);
      v15 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * i);
      v16 = v15;
      if (v12)
      {
        objc_msgSend(v15, "startDate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "endDate");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          objc_msgSend(v16, "endDate");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "endDate");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22)
            goto LABEL_21;
          v23 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v12, "startDate");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "endDate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = (id)objc_msgSend(v23, "initWithStartDate:endDate:", v24, v25);

        }
        else
        {
          objc_msgSend(v68, "addObject:", v12);
          v26 = v16;

        }
        v12 = v26;
      }
      else
      {
        v12 = v15;
      }
LABEL_21:

    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
  }
  while (v11);

  if (v12)
    objc_msgSend(v68, "addObject:", v12);
LABEL_27:

LABEL_28:
  v8 = 1;
LABEL_29:
  v27 = *(void **)(a1 + 648);
  *(_QWORD *)(a1 + 648) = 0;

  *(_BYTE *)(a1 + 625) = 0;
  if (!v8)
  {
    v38 = *(_QWORD *)(a1 + 656);
    *(_QWORD *)(a1 + 672) = 0;
    *(_QWORD *)(a1 + 664) = 0;
    *(_QWORD *)(a1 + 656) = 0;
    v39 = v38;
    goto LABEL_47;
  }
  objc_msgSend(v68, "lastObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "endDate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "endDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      objc_msgSend(v28, "endDate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "timeIntervalSinceReferenceDate");
      v35 = v34;

      v36 = *(_QWORD *)(a1 + 656);
      v37 = *(__int128 **)(a1 + 664);
      while ((__int128 *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((__int128 *)v36 != v37)
          {
            v40 = (__int128 *)(v36 + 40);
            if ((__int128 *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  v41 = *v40;
                  v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)v36 = v41;
                  *(_OWORD *)(v36 + 16) = v42;
                  v36 += 40;
                }
                v40 = (__int128 *)((char *)v40 + 40);
              }
              while (v40 != v37);
              v37 = *(__int128 **)(a1 + 664);
            }
          }
          if ((__int128 *)v36 != v37)
            *(_QWORD *)(a1 + 664) = v36;
          break;
        }
        v36 += 40;
      }
    }

  }
  v38 = *(_QWORD *)(a1 + 656);
  v39 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  if (!objc_msgSend(v68, "count"))
    goto LABEL_60;
LABEL_47:
  v43 = v68;
  __p = (void *)v38;
  if (v43)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v44 = v43;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
    if (v45)
    {
      v46 = *(_QWORD *)v70;
      while (2)
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v70 != v46)
            objc_enumerationMutation(v44);
          v48 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * j);
          v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v45)
          continue;
        break;
      }
    }

LABEL_59:
    v38 = (uint64_t)__p;
LABEL_60:
    v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38)
      v52 = 0;
    else
      v52 = v51;
    v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    __p = (void *)v38;
    if (v39 != v38)
    {
      v54 = v38;
      v50 = v67;
      do
      {
        v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        v53 = v55;
        v54 += 40;
        if (v54 == v39)
          v56 = 0;
        else
          v56 = v55;
        v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, 0, v67))goto LABEL_59;
LABEL_70:
    v53 = 0;
  }
  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 600) != *(_QWORD *)(a1 + 592))
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(_QWORD *)(a1 + 112) + 1, v50, v65);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "startDate");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "timeIntervalSinceReferenceDate");
      v61 = v60;
      objc_msgSend(v57, "endDate");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "timeIntervalSinceReferenceDate");
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);

    }
    while (*(_QWORD *)(a1 + 600) != *(_QWORD *)(a1 + 592));
  }
  *(_BYTE *)(a1 + 626) = 0;
  if (__p)
    operator delete(__p);

  if (v53)
  {
    if (*(_BYTE *)(a1 + 628))
    {
      *(_BYTE *)(a1 + 628) = 0;
      v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      v7 = 1;
      goto LABEL_82;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v6 = v65;
LABEL_82:
  *(_BYTE *)(a1 + 626) = 0;
LABEL_83:

  return v7;
}

void sub_1B7D404D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  void *v12;
  uint64_t v13;

  if (a2)
  {

    objc_begin_catch(exception_object);
    *(_BYTE *)(v13 + 626) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(_BYTE *)(result + 627) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 626))
      goto LABEL_12;
    v7 = 0;
LABEL_14:
    v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(a1, v7, a3);
    goto LABEL_15;
  }
  objc_msgSend(v6, "dateIntervalForIntervalsContainingInterval:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 626))
    goto LABEL_14;
  if (!v7)
  {
LABEL_12:
    v12 = *(void **)(a1 + 648);
    *(_QWORD *)(a1 + 648) = 0;

    v7 = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 625) = 1;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 625))
  {
    v8 = *(void **)(a1 + 648);
    if (!v8)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v10 = *(void **)(a1 + 648);
      *(_QWORD *)(a1 + 648) = v9;

      v8 = *(void **)(a1 + 648);
    }
    objc_msgSend(v8, "addObject:", v7);
  }
  v11 = 1;
LABEL_15:

  return v11;
}

void sub_1B7D407D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v7 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 624) = 1;
    v10[0] = v7;
    v10[1] = 3221225472;
    v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI33HDStatisticsAverageSampleDuration24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    v10[3] = &unk_1E6CFD9F8;
    v13 = a1;
    v11 = v5;
    v12 = WeakRetained;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v10, a3);
    if ((_DWORD)v8 && *(_BYTE *)(a1 + 624) && !*(_QWORD *)(a1 + 40))
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Unable to query for initial statistics: no data source available."));
    v8 = 0;
  }

  return v8;
}

void sub_1B7D408F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(_BYTE *)(result + 624) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  int8x16_t *i;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t *j;
  int8x16_t *v16;
  int8x16_t *k;
  id v18;
  void (**v19)(statistics::StatisticsBucket *__hidden);
  int8x16_t v20;
  int8x16_t v21;
  uint64_t *v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];
  uint64_t v27;
  BOOL v28;
  char v29;
  char v30;
  int v31;
  void (**v32)(statistics::StatisticsEngine *__hidden);
  statistics *v33;
  uint64_t v34;
  uint64_t *v35[3];
  int v36;
  void (**v37)(statistics::RawQuantitySample *__hidden);
  int8x16_t v38;
  int8x16_t v39;
  __int16 v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;

  v3 = a2;
  objc_msgSend(v3, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 624), CFSTR("needs_config"));
  v18 = v3;
  v32 = &off_1E6D09A88;
  v33 = 0;
  v36 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  LOBYTE(v36) = 1;
  v34 = v4;
  memset(v35, 0, sizeof(v35));
  statistics::StatisticsEngine::makeCurrentBucket(&v32);
  v19 = &off_1E6CEA578;
  memset(v22, 0, 24);
  v31 = 511;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v20 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  v5 = *(uint64_t **)(a1 + 136);
  v29 = *(_BYTE *)(a1 + 144);
  v30 = *(_BYTE *)(a1 + 145);
  v28 = *(_DWORD *)(a1 + 148) == 0;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  v6 = *(uint64_t **)(a1 + 176);
  v22[3] = v5;
  v22[4] = v6;
  v7 = *(int8x16_t **)(a1 + 216);
  for (i = *(int8x16_t **)(a1 + 224); v7 != i; v7 += 3)
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v7, *v7, 8uLL);
    v38 = v7[1];
    v41 = 0;
    HIBYTE(v40) = v7[2].i8[9];
    LOBYTE(v40) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>((uint64_t **)&v23, (const statistics::RawQuantitySample *)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::makeStatistics(&v19);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v24 + 1), (uint64_t)&v37);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
  v9 = *(int **)(a1 + 384);
  if (v9 != (int *)(a1 + 392))
  {
    do
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::archive((uint64_t)&v37, v9 + 10);
      v10 = *((_QWORD *)v9 + 4);
      v44 |= 0x200u;
      v43 = v10;
      PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>((statistics::Statistics ***)v26 + 1, (const statistics::RawQuantitySample **)&v37);
      statistics::Statistics::~Statistics((statistics::Statistics *)&v37);
      v11 = (int *)*((_QWORD *)v9 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(int **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (int *)*((_QWORD *)v9 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (int *)(a1 + 392));
  }
  v14 = *(int8x16_t **)(a1 + 184);
  for (j = *(int8x16_t **)(a1 + 192); v14 != j; ++v14)
  {
    v37 = &off_1E6D0A7D0;
    v39.i32[0] = 3;
    v38 = vextq_s8(*v14, *v14, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>(v22, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v19);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v19);
  v16 = *(int8x16_t **)(a1 + 592);
  for (k = *(int8x16_t **)(a1 + 600); v16 != k; v16 = (int8x16_t *)((char *)v16 + 40))
  {
    v37 = &off_1E6CFF278;
    v42 = 127;
    v39 = vextq_s8(*v16, *v16, 8uLL);
    v38 = v16[1];
    v40 = 0;
    v41 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>(v35, (uint64_t)&v37);
    PB::Base::~Base((PB::Base *)&v37);
  }
  PB::Writer::Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v37);
  objc_msgSend(v18, "encodeBytes:length:forKey:", v38.i64[0], (char *)v37 - v38.i64[0], CFSTR("hdsce_archived_representation"));
  PB::Writer::~Writer((PB::Writer *)&v37);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);

}

void sub_1B7D40C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD **i;
  _QWORD **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **j;
  uint64_t **v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t k;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  id v60;
  _QWORD *v61;
  uint64_t v62;
  id v63;
  __n128 v64;
  void *v65[2];
  __int128 v66;
  int8x16_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  int8x16_t v72;
  uint64_t v73;
  uint64_t v74[4];
  void *__p;
  char *v76;
  unint64_t v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _QWORD v83[10];
  uint64_t **v84;
  uint64_t *v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  __int128 v95;
  __int128 v96;
  int v97;
  __int128 v98;
  __int128 v99;
  int v100;
  void (**v101)(statistics::StatisticsEngine *__hidden);
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  _BYTE v108[32];
  unint64_t v109;
  int v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int16 v121;

  v60 = a2;
  *(_BYTE *)(a1 + 624) = objc_msgSend(v60, "decodeBoolForKey:", CFSTR("needs_config"));
  v3 = v60;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v64.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)v65 = 0u;
  v66 = 0u;
  v109 = 0;
  v63 = objc_retainAutorelease(v3);
  PB::Reader::Reader((PB::Reader *)v108, (const unsigned __int8 *)objc_msgSend(v63, "decodeBytesForKey:returnedLength:", CFSTR("hdsce_archived_representation"), &v109));
  v62 = a1;
  v101 = &off_1E6D09A88;
  v102 = 0;
  v106 = 0;
  v104 = 0;
  v105 = 0;
  v107 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v101, (PB::Reader *)v108);
  v64.n128_u64[0] = v103;
  if (v102)
  {
    v71 = 0;
    memset(v74, 0, sizeof(v74));
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    LOWORD(v82) = 0;
    memset(v83, 0, 74);
    v86 = 0;
    __p = 0;
    v78 = 0;
    v76 = 0;
    v77 = 0;
    v85 = 0;
    v84 = &v85;
    v87 = 0u;
    v88 = 0u;
    v89 = 1065353216;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0;
    v94 = 1065353216;
    v95 = 0u;
    v96 = 0u;
    v97 = 1065353216;
    v98 = 0u;
    v99 = 0u;
    v100 = 1065353216;
    v67 = vextq_s8(*(int8x16_t *)(v102 + 8), *(int8x16_t *)(v102 + 8), 8uLL);
    v4 = *(_QWORD *)(v102 + 72);
    v68 = *(_QWORD *)(v102 + 64);
    v69 = *(_BYTE *)(v102 + 185);
    v70 = *(_BYTE *)(v102 + 186);
    v72 = vextq_s8(*(int8x16_t *)(v102 + 24), *(int8x16_t *)(v102 + 24), 8uLL);
    v73 = v4;
    v5 = *(_QWORD *)(v102 + 80);
    v6 = *(_QWORD *)(v102 + 88);
    v61 = (_QWORD *)v102;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v9 = *(_QWORD *)(*(_QWORD *)v5 + 32);
        v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v12 = *(_BYTE *)(*(_QWORD *)v5 + 41);
        v13 = *(_BYTE *)(*(_QWORD *)v5 + 40);
        if ((unint64_t)v7 >= v77)
        {
          v14 = (char *)__p;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)__p) >> 4);
          v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v77 - (_QWORD)__p) >> 4) > v16)
            v16 = 0x5555555555555556 * ((uint64_t)(v77 - (_QWORD)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v17 = 0x555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            v7 = v76;
            v14 = (char *)__p;
          }
          else
          {
            v18 = 0;
          }
          v19 = (_QWORD *)(v17 + 48 * v15);
          *v19 = v9;
          v19[1] = v8;
          v19[2] = v10;
          v19[3] = v11;
          *((_WORD *)v19 + 16) = 1;
          *((_BYTE *)v19 + 40) = 0;
          *((_BYTE *)v19 + 41) = v12;
          *((_BYTE *)v19 + 42) = v13;
          v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              v21 = *((_OWORD *)v7 - 3);
              v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            v14 = (char *)__p;
          }
          v7 = (char *)(v19 + 6);
          __p = v20;
          v76 = (char *)(v19 + 6);
          v77 = v17 + 48 * v18;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          *((_QWORD *)v7 + 1) = v8;
          *((_QWORD *)v7 + 2) = v10;
          *((_QWORD *)v7 + 3) = v11;
          *((_WORD *)v7 + 16) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        v76 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v23 = (_QWORD *)v61[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v110, v23);
      v78 = v110;
      v82 = v114;
      v79 = v111;
      v80 = v112;
      v81 = v113;
      v83[0] = v115;
      if (v83[1])
      {
        v83[2] = v83[1];
        operator delete((void *)v83[1]);
      }
      *(_OWORD *)&v83[1] = v116;
      v83[3] = v117;
      v117 = 0;
      v116 = 0uLL;
      v83[4] = v118;
      *(_OWORD *)&v83[5] = v119;
      *(_OWORD *)&v83[7] = v120;
      LOWORD(v83[9]) = v121;
    }
    v25 = (_QWORD **)v61[17];
    for (i = (_QWORD **)v61[18]; v25 != i; ++v25)
    {
      v26 = (uint64_t)*v25;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v110, *v25);
      v27 = *(_QWORD *)(v26 + 144);
      v28 = v85;
      for (j = &v85; ; v28 = *j)
      {
        v30 = j;
        if (!v28)
          break;
        while (1)
        {
          j = (uint64_t **)v28;
          v31 = v28[4];
          if (v31 > v27)
            break;
          if (v31 >= v27)
          {
            v32 = (char *)j;
            goto LABEL_37;
          }
          v28 = j[1];
          if (!v28)
          {
            v30 = j + 1;
            goto LABEL_34;
          }
        }
      }
LABEL_34:
      v32 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v32 + 4) = v27;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 56) = 0u;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      *(_OWORD *)(v32 + 104) = 0u;
      *(_OWORD *)(v32 + 120) = 0u;
      *(_OWORD *)(v32 + 136) = 0u;
      *(_OWORD *)(v32 + 152) = 0u;
      *(_OWORD *)(v32 + 168) = 0u;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = j;
      *v30 = (uint64_t *)v32;
      v33 = (uint64_t *)v32;
      if (*v84)
      {
        v84 = (uint64_t **)*v84;
        v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v85, v33);
      ++v86;
LABEL_37:
      v34 = (void *)*((_QWORD *)v32 + 14);
      *((_DWORD *)v32 + 10) = v110;
      v35 = v114;
      v37 = v112;
      v36 = v113;
      *((_OWORD *)v32 + 3) = v111;
      *((_OWORD *)v32 + 4) = v37;
      *((_OWORD *)v32 + 5) = v36;
      *((_QWORD *)v32 + 12) = v35;
      *((_QWORD *)v32 + 13) = v115;
      if (v34)
      {
        *((_QWORD *)v32 + 15) = v34;
        operator delete(v34);
        *((_QWORD *)v32 + 14) = 0;
        *((_QWORD *)v32 + 15) = 0;
        *((_QWORD *)v32 + 16) = 0;
      }
      *((_OWORD *)v32 + 7) = v116;
      *((_QWORD *)v32 + 16) = v117;
      v117 = 0;
      v116 = 0uLL;
      *((_QWORD *)v32 + 17) = v118;
      v38 = v120;
      *((_OWORD *)v32 + 9) = v119;
      *((_OWORD *)v32 + 10) = v38;
      *((_WORD *)v32 + 88) = v121;
    }
    v39 = v61[5];
    for (k = v61[6]; v39 != k; v39 += 8)
    {
      v42 = *(double *)(*(_QWORD *)v39 + 8);
      v41 = *(double *)(*(_QWORD *)v39 + 16);
      if (v42 >= v41)
        v43 = *(double *)(*(_QWORD *)v39 + 16);
      else
        v43 = *(double *)(*(_QWORD *)v39 + 8);
      if (v41 < v42)
        v41 = *(double *)(*(_QWORD *)v39 + 8);
      HKIntervalMask<double>::_insertInterval(v74, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((uint64_t)&v64.n128_i64[1], (uint64_t)&v67);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v67);
  }
  v44 = v104;
  v45 = v105;
  if (v104 != v105)
  {
    v46 = (char *)v65[1];
    do
    {
      v47 = *(_QWORD *)(*(_QWORD *)v44 + 24);
      v48 = *(_QWORD *)(*(_QWORD *)v44 + 32);
      v49 = *(_QWORD *)(*(_QWORD *)v44 + 8);
      v50 = *(_QWORD *)(*(_QWORD *)v44 + 16);
      if ((unint64_t)v46 >= (unint64_t)v66)
      {
        v51 = (char *)v65[0];
        v52 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - (char *)v65[0]) >> 3);
        v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666)
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) > v53)
          v53 = 0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) >= 0x333333333333333)
          v54 = 0x666666666666666;
        else
          v54 = v53;
        if (v54)
        {
          v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          v46 = (char *)v65[1];
          v51 = (char *)v65[0];
        }
        else
        {
          v55 = 0;
        }
        v56 = v54 + 40 * v52;
        *(_QWORD *)v56 = v48;
        *(_QWORD *)(v56 + 8) = v47;
        *(_QWORD *)(v56 + 16) = v49;
        *(_QWORD *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        v57 = (char *)v56;
        if (v46 != v51)
        {
          do
          {
            v58 = *(_OWORD *)(v46 - 40);
            v59 = *(_OWORD *)(v46 - 24);
            *((_WORD *)v57 - 4) = *((_WORD *)v46 - 4);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while (v46 != v51);
          v51 = (char *)v65[0];
        }
        v46 = (char *)(v56 + 40);
        v65[0] = v57;
        v65[1] = (void *)(v56 + 40);
        *(_QWORD *)&v66 = v54 + 40 * v55;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *(_QWORD *)v46 = v48;
        *((_QWORD *)v46 + 1) = v47;
        *((_QWORD *)v46 + 2) = v49;
        *((_QWORD *)v46 + 3) = v50;
        *((_WORD *)v46 + 16) = 1;
        v46 += 40;
      }
      v65[1] = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v101);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(v62 + 112), &v64);
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v64.n128_i64[1]);

}

void sub_1B7D4144C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x3F0]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3A0]);
  v10 = (void *)STACK[0x388];
  if (STACK[0x388])
  {
    STACK[0x390] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x360]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy((_QWORD *)STACK[0x350]);
  v11 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v11;
    operator delete(v11);
  }
  v12 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v12;
    operator delete(v12);
  }
  objc_destroyWeak((id *)&STACK[0x298]);
  v13 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v13;
    operator delete(v13);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x420]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 242) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  id WeakRetained;
  unint64_t v15;
  _BYTE v17[472];
  __n128 v18;
  __int128 __p;
  __int128 v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  id v26;
  char v27[408];
  unint64_t v28;

  v28 = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateIntervalContainingDate:index:", v3, &v28);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "startDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    v7 = v6;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
LABEL_5:
    v13 = v9;

    goto LABEL_6;
  }
  v10 = *(id *)(a1 + 64);
  v4 = v10;
  if (v10)
  {
    objc_msgSend(v10, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v7 = v12;

    objc_msgSend(v4, "endDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    goto LABEL_5;
  }
  v7 = -1.79769313e308;
  v13 = 1.79769313e308;
LABEL_6:

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(_QWORD *)(a1 + 32) == 1)
    v23 = 1;
  v22 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72))
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  objc_storeStrong(&v26, *(id *)(a1 + 640));
  if (!*(_QWORD *)(a1 + 40))
    v25 = 0;
  v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  __p = 0u;
  v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((_QWORD *)(a1 + 112), &v18);

  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(_BYTE *)(a1 + 624) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1B7D418A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *(_BYTE **)(a2 + 96);
  v7 = *(_BYTE **)(a2 + 104);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556)
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(_QWORD *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v12 = *(_OWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 144);
  v14 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v13;
  *(_OWORD *)(a1 + 160) = v14;
  *(_OWORD *)(a1 + 128) = v12;
  v15 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = v15;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((_QWORD *)(a1 + 192), *(const void **)(a2 + 192), *(_QWORD *)(a2 + 200), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 4);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v16 = *(_OWORD *)(a2 + 240);
  v17 = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v16;
  v18 = (_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 256) = v17;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  v19 = *(_QWORD **)(a2 + 264);
  if (v19 != (_QWORD *)(a2 + 272))
  {
    v20 = 0;
    v21 = (_QWORD *)(a1 + 272);
    while (1)
    {
      v22 = (_QWORD *)(a1 + 272);
      if (v21 == v18)
        goto LABEL_12;
      v23 = v20;
      v24 = (_QWORD *)(a1 + 272);
      if (v20)
      {
        do
        {
          v22 = v23;
          v23 = (_QWORD *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v24[2];
          v25 = *v22 == (_QWORD)v24;
          v24 = v22;
        }
        while (v25);
      }
      v26 = v19[4];
      if (v22[4] < v26)
      {
LABEL_12:
        if (v20)
          v27 = (uint64_t **)v22;
        else
          v27 = (uint64_t **)(a1 + 272);
        if (v20)
          v28 = (uint64_t **)(v22 + 1);
        else
          v28 = (uint64_t **)(a1 + 272);
        if (!*v28)
        {
LABEL_28:
          v31 = operator new(0xB8uLL);
          v31[4] = v19[4];
          *((_DWORD *)v31 + 10) = *((_DWORD *)v19 + 10);
          v32 = *((_OWORD *)v19 + 3);
          v33 = *((_OWORD *)v19 + 4);
          v34 = *((_OWORD *)v19 + 5);
          v31[12] = v19[12];
          *((_OWORD *)v31 + 4) = v33;
          *((_OWORD *)v31 + 5) = v34;
          *((_OWORD *)v31 + 3) = v32;
          v35 = v19[13];
          v31[14] = 0;
          v31[13] = v35;
          v31[15] = 0;
          v31[16] = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v31 + 14, (const void *)v19[14], v19[15], (uint64_t)(v19[15] - v19[14]) >> 4);
          v31[17] = v19[17];
          v36 = *((_OWORD *)v19 + 9);
          v37 = *((_OWORD *)v19 + 10);
          v31[22] = v19[22];
          *((_OWORD *)v31 + 9) = v36;
          *((_OWORD *)v31 + 10) = v37;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 264), (uint64_t)v27, v28, v31);
        }
      }
      else
      {
        v28 = (uint64_t **)(a1 + 272);
        v27 = (uint64_t **)(a1 + 272);
        if (!v20)
          goto LABEL_28;
        v29 = v20;
        while (1)
        {
          while (1)
          {
            v27 = (uint64_t **)v29;
            v30 = v29[4];
            if (v30 <= v26)
              break;
            v29 = *v27;
            v28 = v27;
            if (!*v27)
              goto LABEL_28;
          }
          if (v30 >= v26)
            break;
          v29 = v27[1];
          if (!v29)
          {
            v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      v38 = (_QWORD *)v19[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v19[2];
          v25 = *v39 == (_QWORD)v19;
          v19 = v39;
        }
        while (!v25);
      }
      if (v39 == (_QWORD *)(a2 + 272))
        break;
      v20 = (_QWORD *)*v18;
      v21 = *(_QWORD **)(a1 + 264);
      v19 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 288, a2 + 288);
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 328), *(const void **)(a2 + 328), *(_QWORD *)(a2 + 336), (uint64_t)(*(_QWORD *)(a2 + 336) - *(_QWORD *)(a2 + 328)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 352, a2 + 352);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 392, a2 + 392);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 432, a2 + 432);
  return a1;
}

void sub_1B7D41C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v12 + 336) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(*v13);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 200) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  v22 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  id *v2;
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  __n128 v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  __n128 v34;
  id v35;
  id v36;
  uint64_t **i;
  uint64_t *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  __n128 v56;
  id v57;
  __n128 v58;
  __n128 v59;
  uint64_t v60;
  double v61;
  double v62;
  void *v63;
  id v64;
  id v65;
  uint64_t **j;
  uint64_t *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  void *v81;
  int v82;
  void *v83;
  void *v84;
  int v85;
  void *v87;
  id v88;
  id v90;
  _BYTE v91[16];
  uint64_t **v92;
  void *__p;
  void *v94;
  _QWORD v95[3];
  _QWORD *v96;
  _QWORD v97[3];
  _QWORD *v98;
  _QWORD v99[3];
  _QWORD *v100;
  _BYTE v101[24];
  _BYTE *v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D68]);
  v6 = (double *)(a2 + 40);
  if (v4 != -1.79769313e308)
    v6 = (double *)a2;
  v87 = (void *)objc_msgSend(v5, "initWithTimeIntervalSinceReferenceDate:", *v6);
  if (*(double *)(a2 + 8) == 1.79769313e308)
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 48));
  else
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", *(double *)(a2 + 8));
  v8 = (void *)v7;
  v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = *(id *)(a1 + 16);
    if (objc_msgSend(v10, "shouldUseUnderlyingTypeForStatistics"))
    {
      objc_msgSend(v10, "underlyingSampleType");
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v11;
    }

  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB6C68]), "initWithDataType:startDate:endDate:", v9, v87, v8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v2 = (id *)(a1 + 48);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = *(uint64_t **)(a2 + 328);
      v16 = *(uint64_t **)(a2 + 336);
      while (v15 != v16)
      {
        v17 = *v15;
        v18 = objc_loadWeakRetained(v2);
        objc_msgSend(v18, "sourceForSourceID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          if ((objc_msgSend(v14, "containsObject:", v19) & 1) == 0)
            objc_msgSend(v14, "addObject:", v19);
        }

        ++v15;
      }
      v2 = (id *)objc_msgSend(v14, "copy");
      objc_msgSend(v12, "_setSources:", v2);

    }
  }

  v95[0] = &off_1E6D07A90;
  v96 = v95;
  v88 = v12;
  v20 = (uint64_t)v96;
  if (!v96)
    goto LABEL_22;
  if (v96 != v95)
  {
    v20 = (*(uint64_t (**)(void))(*v96 + 16))();
LABEL_22:
    v100 = (_QWORD *)v20;
    goto LABEL_24;
  }
  v100 = v99;
  (*(void (**)(uint64_t, _QWORD *))(v95[0] + 24))((uint64_t)v95, v99);
LABEL_24:
  v102 = 0;
  v21 = operator new(0x28uLL);
  *v21 = &off_1E6D07970;
  v22 = v21 + 1;
  v23 = (uint64_t)v100;
  if (!v100)
  {
LABEL_27:
    v21[4] = v23;
    goto LABEL_29;
  }
  if (v100 != v99)
  {
    v23 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v100 + 16))(v100, v22);
    goto LABEL_27;
  }
  v21[4] = v22;
  (*(void (**)(_QWORD *))(v99[0] + 24))(v99);
LABEL_29:
  v102 = v21;
  v24 = v88;
  v25 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v91, a2);
  if (!v102)
    std::__throw_bad_function_call[abi:ne180100]();
  v28 = (*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v102 + 48))(v102, v91, v27);
  v29 = *(double **)(v28 + 8);
  v30 = 0.0;
  while (v29 != *(double **)(v28 + 16))
  {
    v32 = *v29;
    v31 = v29[1];
    v29 += 2;
    v30 = v30 + v31 - v32;
  }
  objc_msgSend(v25, "quantityWithUnit:doubleValue:", v26, v30 + *(double *)(v28 + 32));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setDuration:", v33);

  if (__p)
  {
    v94 = __p;
    operator delete(__p);
  }

  v34 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v91, a2);
  if (!v102)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v24, "setDataCount:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v102 + 48))(v102, v91, v34));
  if (__p)
  {
    v94 = __p;
    operator delete(__p);
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v35 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v36 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v91, a2);
    for (i = v92; i; i = (uint64_t **)*i)
    {
      v38 = i[2];
      v39 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v102)
        std::__throw_bad_function_call[abi:ne180100]();
      v41 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v102 + 48))(v102, (uint64_t *)i + 3);
      v42 = *(double **)(v41 + 8);
      v43 = 0.0;
      while (v42 != *(double **)(v41 + 16))
      {
        v45 = *v42;
        v44 = v42[1];
        v42 += 2;
        v43 = v43 + v44 - v45;
      }
      objc_msgSend(v39, "quantityWithUnit:doubleValue:", v40, v43 + *(double *)(v41 + 32));
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v46, v38);

      if (!v102)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v102 + 48))(v102, (uint64_t *)i + 3));
      v2 = (id *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "setObject:forKeyedSubscript:", v2, v38);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v91);
    objc_msgSend(v24, "setDurationBySource:", v35);
    objc_msgSend(v24, "setDataCountBySource:", v36);

  }
  v47 = v102;
  if (v102 == v101)
  {
    v48 = 4;
    v47 = v101;
  }
  else
  {
    if (!v102)
      goto LABEL_52;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_52:
  v49 = v100;
  if (v100 == v99)
  {
    v50 = 4;
    v49 = v99;
  }
  else
  {
    if (!v100)
      goto LABEL_57;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_57:
  v51 = (uint64_t)v96;
  if (!v96)
  {
LABEL_60:
    v98 = (_QWORD *)v51;
    goto LABEL_62;
  }
  if (v96 != v95)
  {
    v51 = (*(uint64_t (**)(void))(*v96 + 16))();
    goto LABEL_60;
  }
  v98 = v97;
  (*(void (**)(uint64_t, _QWORD *))(v95[0] + 24))((uint64_t)v95, v97);
LABEL_62:
  v102 = 0;
  v52 = operator new(0x28uLL);
  *v52 = &off_1E6D07A00;
  v53 = (uint64_t)v98;
  if (!v98)
  {
LABEL_65:
    v52[4] = v53;
    goto LABEL_67;
  }
  if (v98 != v97)
  {
    v53 = (*(uint64_t (**)(void))(*v98 + 16))();
    goto LABEL_65;
  }
  v52[4] = v52 + 1;
  (*(void (**)(_QWORD *))(v97[0] + 24))(v97);
LABEL_67:
  v102 = v52;
  v90 = v24;
  v54 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v91, a2);
  if (!v102)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v54, "quantityWithUnit:doubleValue:", v55, *(double *)(*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v102 + 48))(v102, v91, v56));
  v57 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v90, "setDuration:", v57);

  if (__p)
  {
    v94 = __p;
    operator delete(__p);
  }

  v58 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v91, a2);
  if (!v102)
    std::__throw_bad_function_call[abi:ne180100]();
  objc_msgSend(v90, "setDataCount:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v102 + 48))(v102, v91, v58) + 8));
  if (__p)
  {
    v94 = __p;
    operator delete(__p);
  }
  v59 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v91, a2);
  if (!v102)
    std::__throw_bad_function_call[abi:ne180100]();
  v60 = (*(uint64_t (**)(_BYTE *, _BYTE *, __n128))(*(_QWORD *)v102 + 48))(v102, v91, v59);
  v61 = *(double *)(v60 + 24);
  v62 = *(double *)(v60 + 32);
  if (__p)
  {
    v94 = __p;
    operator delete(__p);
  }
  objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", v61, v62);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v90, "setMostRecentQuantityDateInterval:", v63);

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v64 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v57 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v65 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v91, a2);
    for (j = v92; j; j = (uint64_t **)*j)
    {
      v67 = j[2];
      v68 = (void *)MEMORY[0x1E0CB6A28];
      objc_msgSend(MEMORY[0x1E0CB6CD0], "secondUnit");
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v102)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(v68, "quantityWithUnit:doubleValue:", v69, *(double *)(*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v102 + 48))(v102, (uint64_t *)j + 3));
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "setObject:forKeyedSubscript:", v70, v67);

      if (!v102)
        std::__throw_bad_function_call[abi:ne180100]();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)((*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v102 + 48))(v102, (uint64_t *)j + 3) + 8));
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "setObject:forKeyedSubscript:", v71, v67);

      if (!v102)
        std::__throw_bad_function_call[abi:ne180100]();
      v72 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v102 + 48))(v102, (uint64_t *)j + 3);
      objc_msgSend(MEMORY[0x1E0CB3588], "hk_dateIntervalWithStart:end:", *(double *)(v72 + 24), *(double *)(v72 + 32));
      v2 = (id *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "setObject:forKeyedSubscript:", v2, v67);

    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v91);
    objc_msgSend(v90, "setDurationBySource:", v64);
    objc_msgSend(v90, "setDataCountBySource:", v57);
    objc_msgSend(v90, "setMostRecentQuantityDateIntervalBySource:", v65);

  }
  v73 = v102;
  if (v102 == v101)
  {
    v74 = 4;
    v73 = v101;
  }
  else
  {
    if (!v102)
      goto LABEL_88;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_88:
  v75 = v98;
  if (v98 == v97)
  {
    v76 = 4;
    v75 = v97;
  }
  else
  {
    if (!v98)
      goto LABEL_93;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_93:

  v77 = v96;
  if (v96 == v95)
  {
    v78 = 4;
    v77 = v95;
    goto LABEL_97;
  }
  if (v96)
  {
    v78 = 5;
LABEL_97:
    (*(void (**)(void))(*v77 + 8 * v78))();
  }
  objc_msgSend(*(id *)(a1 + 16), "_unitForChangeInCanonicalUnit");
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v90, "averageQuantity");
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  if (v80)
  {
    objc_msgSend(v90, "averageQuantity");
    v57 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v57, "isCompatibleWithUnit:", v79) & 1) == 0)
    {

LABEL_112:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Expected compatibility with %@"), v79);
      goto LABEL_113;
    }
  }
  objc_msgSend(v90, "minimumQuantity");
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  if (v81)
  {
    objc_msgSend(v90, "minimumQuantity");
    v2 = (id *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v2, "isCompatibleWithUnit:", v79))
    {
      v82 = 1;
      goto LABEL_106;
    }
  }
  objc_msgSend(v90, "maximumQuantity");
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  if (v83)
  {
    objc_msgSend(v90, "maximumQuantity");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = objc_msgSend(v84, "isCompatibleWithUnit:", v79);

    v82 = v85 ^ 1;
    if (v81)
      goto LABEL_106;
  }
  else
  {
    v82 = 0;
    if (v81)
    {
LABEL_106:

      if (v80)
        goto LABEL_107;
      goto LABEL_111;
    }
  }
  if (v80)
  {
LABEL_107:

    if ((v82 & 1) == 0)
      goto LABEL_113;
    goto LABEL_112;
  }
LABEL_111:

  if (v82)
    goto LABEL_112;
LABEL_113:

  return v90;
}

void sub_1B7D4284C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  if (v41)
  if (v39)

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  id v20;

  v1 = *(_QWORD *)(a1 + 312);
  v2 = *(_QWORD *)(a1 + 328);
  if (v1 != (*(_QWORD *)(a1 + 336) - v2) >> 3)
  {
    v4 = (void **)(a1 + 328);
    *(_QWORD *)(a1 + 336) = v2;
    std::vector<long long>::reserve((void **)(a1 + 328), v1);
    v5 = *(_QWORD **)(a1 + 304);
    if (v5)
    {
      v6 = *(char **)(a1 + 336);
      do
      {
        v7 = v5[2];
        v8 = *(_QWORD *)(a1 + 344);
        if ((unint64_t)v6 >= v8)
        {
          v10 = (char *)*v4;
          v11 = (v6 - (_BYTE *)*v4) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            v10 = *(char **)(a1 + 328);
            v6 = *(char **)(a1 + 336);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v7;
          v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            v17 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v17;
          }
          *(_QWORD *)(a1 + 328) = v16;
          *(_QWORD *)(a1 + 336) = v9;
          *(_QWORD *)(a1 + 344) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          v9 = v6 + 8;
        }
        *(_QWORD *)(a1 + 336) = v9;
        v5 = (_QWORD *)*v5;
        v6 = v9;
      }
      while (v5);
    }
    v18 = (id *)(a1 + 88);
    WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      v20 = objc_loadWeakRetained(v18);
      objc_msgSend(v20, "orderSourceIDs:", v4);

    }
  }
}

void sub_1B7D42D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  double *v12;
  double *j;
  unint64_t v14;
  uint64_t *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  id WeakRetained;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  double var1;
  BOOL var5;
  BOOL *p_var4;
  __int128 v45;
  double *i;
  int v47;
  int v48;
  char v49;
  unint64_t var3;
  __int128 *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  _OWORD *v55;
  void *v56;
  void *v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  uint64_t *v66;
  BOOL v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  __int128 v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  __int128 v76;
  char *v77;
  char *v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  BOOL v90;
  double v91;
  void *v92;
  void *v93;
  _QWORD *v94;
  double **v95;
  id *location;
  void *v97;
  id v98;
  uint64_t *v99;
  int64_t v100;
  __int128 *v101;
  char **v102;
  BOOL var4;
  __int128 v104;
  __int128 v105;
  HDRawQuantitySample v106;
  __int128 v107;
  __int128 v108;
  __int16 v109;

  v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2)
    a2 = v4 * floor(a2 / v4);
  v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    v102 = (char **)(a1 + 96);
    location = (id *)(a1 + 88);
    v99 = (uint64_t *)(a1 + 120);
    v94 = (_QWORD *)(a1 + 272);
    v95 = (double **)(a1 + 192);
    do
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(__int128 **)(a1 + 104);
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 4);
      if (v8)
      {
        if (v8 != 1)
        {
          v16 = a2;
          v17 = a2;
          v18 = v5;
          v19 = *(_QWORD *)(a1 + 96);
          if ((__int128 *)v6 != v7)
          {
            do
            {
              v20 = *(double *)(v19 + 8);
              v21 = *(double *)(v19 + 16);
              if (v20 > v18 && v20 < v17)
                v17 = *(double *)(v19 + 8);
              if (v21 > v5)
                v23 = *(double *)(v19 + 16);
              else
                v23 = v16;
              if (v21 < v16)
              {
                v18 = v5;
                v16 = v23;
              }
              v19 += 48;
            }
            while ((__int128 *)v19 != v7);
          }
          if (v16 >= v17)
            v24 = v17;
          else
            v24 = v16;
          v25 = *(double *)(a1 + 16);
          if (v25 > 0.0)
          {
            v26 = v25 * floor(v24 / v25);
            v27 = v25 * floor((v25 + v5) / v25);
            if (v26 >= v27)
              v24 = v26;
            else
              v24 = v27;
          }
          *v102 = 0;
          v102[1] = 0;
          v102[2] = 0;
          if ((__int128 *)v6 != v7)
          {
            if (v8 > 0x555555555555555)
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
            v31 = *(char **)(a1 + 96);
            v30 = *(char **)(a1 + 104);
            v32 = v28;
            if (v30 != v31)
            {
              do
              {
                v33 = *((_OWORD *)v30 - 3);
                v34 = *((_OWORD *)v30 - 2);
                *(_OWORD *)(v32 - 21) = *(_OWORD *)(v30 - 21);
                *((_OWORD *)v32 - 3) = v33;
                *((_OWORD *)v32 - 2) = v34;
                v32 -= 48;
                v30 -= 48;
              }
              while (v30 != v31);
              v30 = *v102;
            }
            *(_QWORD *)(a1 + 96) = v32;
            *(_QWORD *)(a1 + 104) = v28;
            *(_QWORD *)(a1 + 112) = &v28[48 * v29];
            if (v30)
              operator delete(v30);
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
          WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(_QWORD *)&v106.var0 = a1;
            v36 = 126 - 2 * __clz(v8);
            if ((__int128 *)v6 == v7)
              v37 = 0;
            else
              v37 = v36;
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v106, v37, 1);
          }
          if (*(_BYTE *)(a1 + 25))
            v98 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            v98 = 0;
          v97 = (void *)v6;
          if ((__int128 *)v6 == v7)
          {
LABEL_118:
            *(double *)(a1 + 216) = HKIntervalMask<double>::removeIntervalsBefore(v95, v24) + *(double *)(a1 + 216);
            v87 = *(_QWORD **)(a1 + 264);
            if (v87 != v94)
            {
              do
              {
                *((double *)v87 + 17) = HKIntervalMask<double>::removeIntervalsBefore((double **)v87 + 14, v24)
                                      + *((double *)v87 + 17);
                v88 = (_QWORD *)v87[1];
                if (v88)
                {
                  do
                  {
                    v89 = v88;
                    v88 = (_QWORD *)*v88;
                  }
                  while (v88);
                }
                else
                {
                  do
                  {
                    v89 = (_QWORD *)v87[2];
                    v90 = *v89 == (_QWORD)v87;
                    v87 = v89;
                  }
                  while (!v90);
                }
                v87 = v89;
              }
              while (v89 != v94);
            }
            *(double *)(a1 + 56) = v24;

            if (v97)
              operator delete(v97);
            goto LABEL_127;
          }
          v100 = 0;
          v101 = v7;
          v38 = 0;
          v39 = v6;
          while (2)
          {
            v104 = 0u;
            v105 = 0u;
            var4 = 0;
            v40 = *(_OWORD *)(v39 + 16);
            *(_OWORD *)&v106.var0 = *(_OWORD *)v39;
            *(_OWORD *)&v106.var2 = v40;
            *(_QWORD *)&v106.var4 = *(_QWORD *)(v39 + 32);
            var1 = v106.var1;
            if (v106.var4 && v106.var1 > v24)
            {
              v45 = *(_OWORD *)(v39 + 16);
              v104 = *(_OWORD *)v39;
              v105 = v45;
              var4 = v106.var4;
              var5 = v106.var5;
              p_var4 = &v106.var4;
            }
            else
            {
              var5 = 0;
              p_var4 = &var4;
            }
            *p_var4 = 0;
            if (v106.var4)
            {
              for (i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && var1 >= *i; i += 2)
              {
                if (var1 < i[1])
                {
                  v106.var4 = 0;
                  v47 = *(unsigned __int8 *)(v39 + 42);
                  LOBYTE(v48) = *(_BYTE *)(v39 + 41);
                  v49 = *(_BYTE *)(v39 + 40);
                  goto LABEL_92;
                }
              }
              v47 = *(unsigned __int8 *)(v39 + 42);
              v48 = *(unsigned __int8 *)(v39 + 41);
              v49 = *(_BYTE *)(v39 + 40);
              if ((v38 & 1) != 0)
              {
                var3 = v106.var3;
                if (v100 == v106.var3 || *(_BYTE *)(a1 + 24))
                {
                  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(v99, &v106, v47 == 0);
                  v47 = 1;
                }
              }
              else
              {
                HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(v99, &v106, v47 == 0);
                v47 = 1;
                var3 = v106.var3;
                v100 = v106.var3;
              }
              if (!*(_BYTE *)(a1 + 25))
                goto LABEL_91;
              HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v56)
                goto LABEL_90;
              objc_msgSend(v98, "objectForKeyedSubscript:", v56);
              v57 = (void *)objc_claimAutoreleasedReturnValue();
              v58 = v57;
              if (v57)
              {
                if (objc_msgSend(v57, "longLongValue") != var3 && !*(_BYTE *)(a1 + 24))
                {
LABEL_89:

LABEL_90:
LABEL_91:
                  v38 = 1;
LABEL_92:
                  v67 = var4;
                  if (var4)
                  {
                    v68 = v47 != 0;
                    v69 = *(_QWORD *)(a1 + 104);
                    v70 = *(_QWORD *)(a1 + 112);
                    if (v69 < v70)
                    {
                      v71 = v105;
                      *(_OWORD *)v69 = v104;
                      *(_OWORD *)(v69 + 16) = v71;
                      *(_BYTE *)(v69 + 32) = v67;
                      *(_BYTE *)(v69 + 33) = var5;
                      *(_BYTE *)(v69 + 40) = v49;
                      *(_BYTE *)(v69 + 41) = v48;
                      *(_BYTE *)(v69 + 42) = v68;
                      v55 = (_OWORD *)(v69 + 48);
                      v7 = v101;
                      goto LABEL_116;
                    }
                    v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - (_QWORD)*v102) >> 4);
                    v73 = v72 + 1;
                    if (v72 + 1 > 0x555555555555555)
                      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                    v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (_QWORD)*v102) >> 4);
                    if (2 * v74 > v73)
                      v73 = 2 * v74;
                    if (v74 >= 0x2AAAAAAAAAAAAAALL)
                      v62 = 0x555555555555555;
                    else
                      v62 = v73;
                    if (v62)
                      v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v62);
                    else
                      v63 = 0;
                    v75 = v62 + 48 * v72;
                    v76 = v105;
                    *(_OWORD *)v75 = v104;
                    *(_OWORD *)(v75 + 16) = v76;
                    *(_BYTE *)(v75 + 32) = v67;
                    *(_BYTE *)(v75 + 33) = var5;
                    *(_BYTE *)(v75 + 40) = v49;
                    *(_BYTE *)(v75 + 41) = v48;
                    *(_BYTE *)(v75 + 42) = v68;
                    v78 = *(char **)(a1 + 96);
                    v77 = *(char **)(a1 + 104);
                    v79 = v75;
                    if (v77 != v78)
                    {
                      v7 = v101;
                      do
                      {
                        v80 = *((_OWORD *)v77 - 3);
                        v81 = *((_OWORD *)v77 - 2);
                        *(_OWORD *)(v79 - 21) = *(_OWORD *)(v77 - 21);
                        *(_OWORD *)(v79 - 48) = v80;
                        *(_OWORD *)(v79 - 32) = v81;
                        v79 -= 48;
                        v77 -= 48;
                      }
                      while (v77 != v78);
                      goto LABEL_113;
                    }
                    v7 = v101;
                    goto LABEL_114;
                  }
                  v7 = v101;
LABEL_117:
                  v39 += 48;
                  if ((__int128 *)v39 == v7)
                    goto LABEL_118;
                  continue;
                }
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", var3);
                v64 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v98, "setObject:forKeyedSubscript:", v64, v56);

              }
              v65 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
              v66 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v65);
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(v66, &v106, v48 == 0);
              LOBYTE(v48) = 1;
              goto LABEL_89;
            }
            break;
          }
          v51 = *(__int128 **)(a1 + 104);
          v52 = *(_QWORD *)(a1 + 112);
          if ((unint64_t)v51 < v52)
          {
            v53 = *(_OWORD *)v39;
            v54 = *(_OWORD *)(v39 + 32);
            v51[1] = *(_OWORD *)(v39 + 16);
            v51[2] = v54;
            *v51 = v53;
            v55 = v51 + 3;
            goto LABEL_116;
          }
          v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51 - *v102) >> 4);
          v60 = v59 + 1;
          if (v59 + 1 > 0x555555555555555)
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (_QWORD)*v102) >> 4);
          if (2 * v61 > v60)
            v60 = 2 * v61;
          if (v61 >= 0x2AAAAAAAAAAAAAALL)
            v62 = 0x555555555555555;
          else
            v62 = v60;
          if (v62)
            v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v62);
          else
            v63 = 0;
          v75 = v62 + 48 * v59;
          v82 = *(_OWORD *)v39;
          v83 = *(_OWORD *)(v39 + 32);
          *(_OWORD *)(v75 + 16) = *(_OWORD *)(v39 + 16);
          *(_OWORD *)(v75 + 32) = v83;
          *(_OWORD *)v75 = v82;
          v84 = *(char **)(a1 + 96);
          v77 = *(char **)(a1 + 104);
          v79 = v75;
          if (v77 != v84)
          {
            do
            {
              v85 = *((_OWORD *)v77 - 3);
              v86 = *((_OWORD *)v77 - 2);
              *(_OWORD *)(v79 - 21) = *(_OWORD *)(v77 - 21);
              *(_OWORD *)(v79 - 48) = v85;
              *(_OWORD *)(v79 - 32) = v86;
              v79 -= 48;
              v77 -= 48;
            }
            while (v77 != v84);
LABEL_113:
            v77 = *v102;
          }
LABEL_114:
          v55 = (_OWORD *)(v75 + 48);
          *(_QWORD *)(a1 + 96) = v79;
          *(_QWORD *)(a1 + 104) = v75 + 48;
          *(_QWORD *)(a1 + 112) = v62 + 48 * v63;
          if (v77)
            operator delete(v77);
LABEL_116:
          *(_QWORD *)(a1 + 104) = v55;
          goto LABEL_117;
        }
        v9 = *(unsigned __int8 *)(v6 + 42);
        v10 = *(unsigned __int8 *)(v6 + 41);
        v109 = 0;
        v107 = 0u;
        v108 = 0u;
        v11 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)&v106.var0 = *(_OWORD *)v6;
        *(_OWORD *)&v106.var2 = v11;
        *(_QWORD *)&v106.var4 = *(_QWORD *)(v6 + 32);
        v12 = *(double **)(a1 + 64);
        for (j = *(double **)(a1 + 72); v12 != j; v12 += 2)
        {
          if (v106.var1 < *v12)
            break;
          if (v106.var1 < v12[1])
            goto LABEL_15;
        }
        if (v106.var4)
        {
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(v99, &v106, v9 == 0);
          if (*(_BYTE *)(a1 + 25))
          {
            v14 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v106.var3);
            v15 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v14);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(v15, &v106, v10 == 0);
          }
        }
LABEL_15:
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
      }
      *(double *)(a1 + 56) = a2;
LABEL_127:
      v91 = *(double *)(a1 + 56);
      if (v91 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration, HDStatisticsTimeInterval>>]");
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v92, "handleFailureInFunction:file:lineNumber:description:", v93, CFSTR("HDStatisticsBucket.hpp"), 234, CFSTR("Failed to make forward progress during statistics merge."));

        v91 = *(double *)(a1 + 56);
      }
      v5 = v91;
    }
    while (v91 < a2);
  }
}

void sub_1B7D435CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  HDRawQuantitySample *v4;
  uint64_t *v5;
  int v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  double *v12;
  void *v13;
  _OWORD *v14;
  int v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v4 = a2;
  v5 = result;
  v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308)
    v6 = 1;
  if (v6)
  {
    if (v6 == 1)
    {
      if (!*(_DWORD *)result)
      {
        v11 = 1;
        goto LABEL_16;
      }
    }
    else if (v6 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        v7 = a2->var2 - a2->var1;
        v8 = result[2];
        if (v8)
        {
          v9 = v8 + 1;
          v7 = *((double *)result + 1) + (v7 - *((double *)result + 1)) / (double)v9;
        }
        else
        {
          v9 = 1;
        }
        *((double *)result + 1) = v7;
        result[2] = v9;
        v10 = result + 8;
        v19 = 1;
        return HDStatisticsTimeInterval::addSample(v10, a2, v19);
      }
      v11 = 2;
LABEL_16:
      *(_DWORD *)result = v11;
      *(_OWORD *)(result + 1) = 0u;
      v12 = (double *)(result + 1);
      v14 = result + 9;
      v13 = (void *)result[9];
      *(_OWORD *)(v5 + 3) = 0u;
      *(_OWORD *)(v5 + 5) = 0u;
      *(_OWORD *)(v5 + 7) = 0u;
      if (v13)
      {
        v5[10] = (uint64_t)v13;
        operator delete(v13);
        v15 = *((unsigned __int8 *)v5 + 56);
        *v14 = 0u;
        *(_OWORD *)(v5 + 11) = 0u;
        if (v15 && *((double *)v5 + 4) > *((double *)v5 + 14))
        {
LABEL_22:
          v16 = v4->var2 - v4->var1;
          v17 = v5[2];
          if (v17)
          {
            v18 = v17 + 1;
            v16 = *v12 + (v16 - *v12) / (double)v18;
          }
          else
          {
            v18 = 1;
          }
          *((double *)v5 + 1) = v16;
          v5[2] = v18;
          v10 = v5 + 8;
          goto LABEL_26;
        }
      }
      else
      {
        *v14 = 0uLL;
        *(_OWORD *)(v5 + 11) = 0uLL;
      }
      *(_OWORD *)(v5 + 3) = *(_OWORD *)(v5 + 13);
      *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 15);
      *((_WORD *)v5 + 28) = *((_WORD *)v5 + 68);
      goto LABEL_22;
    }
  }
  else if (!*(_DWORD *)result && !result[2])
  {
    *((double *)result + 1) = a2->var2 - a2->var1;
    result[2] = 1;
    v10 = result + 8;
LABEL_26:
    a2 = v4;
    v19 = a3;
    return HDStatisticsTimeInterval::addSample(v10, a2, v19);
  }
  return result;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t **v8;
  id v10;
  id *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((_QWORD *)(a1 + 352), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v6;
      v7 = (_QWORD *)(a1 + 392);
      v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        v11 = &v10;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        v6 = v10;
      }

    }
  }
  return a2;
}

void sub_1B7D438E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  id *v4;
  id WeakRetained;
  _QWORD *v6;
  _QWORD *v7;
  id v9;
  void *v10;
  id *v11;
  unint64_t v12;

  v12 = a2;
  v4 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (!WeakRetained)
    return 0;
  v6 = (_QWORD *)(a1 + 432);
  v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
  if (v7)
    return (id)v7[3];
  v9 = objc_loadWeakRetained(v4);
  objc_msgSend(v9, "bundleIdentifierForSourceID:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
    objc_storeStrong(v11 + 3, v10);
  }
  return v10;
}

void sub_1B7D439B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 *v109;
  BOOL v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[32];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *(_QWORD *)(a2 - 24);
      v9 = *(_QWORD *)(a1 + 24);
      if (v8 == v9)
        return result;
      v10 = *(char **)(*(_QWORD *)a3 + 328);
      v11 = *(char **)(*(_QWORD *)a3 + 336);
      v12 = v10;
      v13 = v10;
      if (v10 == v11)
        goto LABEL_10;
      do
      {
        if (*(_QWORD *)v13 == v8)
          goto LABEL_7;
        v13 += 8;
      }
      while (v13 != v11);
      v13 = *(char **)(*(_QWORD *)a3 + 336);
      do
      {
LABEL_7:
        if (*(_QWORD *)v12 == v9)
          goto LABEL_10;
        v12 += 8;
      }
      while (v12 != v11);
      v12 = *(char **)(*(_QWORD *)a3 + 336);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        v14 = (__int128 *)(a2 - 48);
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 - 21);
        v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(__int128 *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v19 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v18 + 24);
    if (v21 != v22)
    {
      v23 = *(char **)(*(_QWORD *)a3 + 328);
      v24 = *(char **)(*(_QWORD *)a3 + 336);
      v25 = v23;
      v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(_QWORD *)v26 == v21)
            goto LABEL_19;
          v26 += 8;
        }
        while (v26 != v24);
        v26 = *(char **)(*(_QWORD *)a3 + 336);
LABEL_19:
        while (*(_QWORD *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            v25 = *(char **)(*(_QWORD *)a3 + 336);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        v34 = *(_OWORD *)v19;
        v36 = *(_QWORD *)(v19 + 16);
        v37 = *(_OWORD *)(v19 + 32);
        v27 = v19;
        while (1)
        {
          v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 16) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1)
            break;
          v27 = v18;
          v29 = *(_QWORD *)(v18 - 24);
          if (v21 != v29)
          {
            v30 = *(char **)(*(_QWORD *)a3 + 328);
            v31 = *(char **)(*(_QWORD *)a3 + 336);
            v32 = v30;
            v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(_QWORD *)v33 == v21)
                  goto LABEL_30;
                v33 += 8;
              }
              while (v33 != v31);
              v33 = *(char **)(*(_QWORD *)a3 + 336);
LABEL_30:
              while (*(_QWORD *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  v32 = *(char **)(*(_QWORD *)a3 + 336);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30)
              continue;
          }
          goto LABEL_36;
        }
        v27 = a1;
LABEL_36:
        *(_OWORD *)v27 = v34;
        *(_QWORD *)(v27 + 16) = v36;
        *(_QWORD *)(v27 + 24) = v21;
        *(_QWORD *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8)
          return v19 + 48 == a2;
      }
    }
    v18 = v19;
    v19 += 48;
    if (v19 == a2)
      return 1;
  }
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  void *v47;
  _QWORD *v48;
  _QWORD *v50;
  unint64_t v51;
  _QWORD v52[2];
  char v53;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = *(_QWORD **)(a2 + 264);
  v48 = (_QWORD *)(a2 + 272);
  if (v3 == (_QWORD *)(a2 + 272))
    return;
  v50 = (_QWORD *)(a1 + 16);
  do
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (!v5)
      goto LABEL_80;
    v7 = objc_msgSend(v5, "hash");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_21;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v51 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v9)
        v2 = v7 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v7;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (!v11 || (v12 = *v11) == 0)
    {
LABEL_21:
      v19 = (char *)operator new(0xA8uLL);
      v52[0] = v19;
      v52[1] = v50;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v8;
      *((_QWORD *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      v53 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        v12 = (uint64_t *)v52[0];
        if (v37)
        {
          *(_QWORD *)v52[0] = *v37;
        }
        else
        {
          *(_QWORD *)v52[0] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v50;
          if (!*v12)
          {
LABEL_76:
            v52[0] = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v52);
            goto LABEL_77;
          }
          v38 = *(_QWORD *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
        }
        *v37 = v12;
        goto LABEL_76;
      }
      v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v22 = 1;
      v23 = v22 | (2 * v9);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v9 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)&prime > v9)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v9)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = *(void **)a1;
            *(_QWORD *)a1 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *(int8x8_t *)(a1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD *)*v50;
            if (*v50)
            {
              v30 = v29[1];
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v50;
              v35 = (_QWORD *)*v29;
              if (*v29)
              {
                do
                {
                  v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(_QWORD *)&prime)
                      v36 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v36 &= *(_QWORD *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                    {
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                      goto LABEL_58;
                    }
                    *v29 = *v35;
                    *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                    **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                    v35 = v29;
                  }
                  v36 = v30;
LABEL_58:
                  v29 = v35;
                  v35 = (_QWORD *)*v35;
                  v30 = v36;
                }
                while (v35);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          v47 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v47)
            operator delete(v47);
          v9 = 0;
          *(_QWORD *)(a1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      v13 = v12[1];
      if (v13 == v8)
        break;
      if (v51 > 1)
      {
        if (v13 >= v9)
          v13 %= v9;
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2)
        goto LABEL_21;
LABEL_20:
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_21;
    }
    v14 = (id)v12[2];
    v15 = v6;
    v16 = v6;
    v17 = v16;
    if (v14 != v16)
    {
      v18 = objc_msgSend(v14, "isEqualToString:", v16);

      v6 = v15;
      if ((v18 & 1) != 0)
        goto LABEL_77;
      goto LABEL_20;
    }

    v6 = v15;
LABEL_77:
    *((_DWORD *)v12 + 6) = *((_DWORD *)v3 + 10);
    v39 = *((_OWORD *)v3 + 3);
    v40 = *((_OWORD *)v3 + 4);
    v41 = *((_OWORD *)v3 + 5);
    v12[10] = v3[12];
    *((_OWORD *)v12 + 3) = v40;
    *((_OWORD *)v12 + 4) = v41;
    *((_OWORD *)v12 + 2) = v39;
    v12[11] = v3[13];
    if (v12 + 2 != v3 + 4)
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 96, (char *)v3[14], v3[15], (uint64_t)(v3[15] - v3[14]) >> 4);
    v12[15] = v3[17];
    v42 = *((_OWORD *)v3 + 9);
    v43 = *((_OWORD *)v3 + 10);
    *((_WORD *)v12 + 80) = *((_WORD *)v3 + 88);
    *((_OWORD *)v12 + 8) = v42;
    *((_OWORD *)v12 + 9) = v43;

LABEL_80:
    v44 = (_QWORD *)v3[1];
    if (v44)
    {
      do
      {
        v45 = v44;
        v44 = (_QWORD *)*v44;
      }
      while (v44);
    }
    else
    {
      do
      {
        v45 = (_QWORD *)v3[2];
        v46 = *v45 == (_QWORD)v3;
        v3 = v45;
      }
      while (!v46);
    }
    v3 = v45;
  }
  while (v45 != v48);
}

void sub_1B7D45514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v7;
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D07970;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D07970;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6D07970;
  std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B7D45668(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6D07970;
  return std::__function::__value_func<BOOL ()(double const&,double const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1) + 56;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

_QWORD *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6D07A00;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsAverageSampleDuration const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsAverageSampleDuration,HDStatisticsTimeInterval>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6D07A00;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCCAC494);
}

