_QWORD *sub_23DD7B280(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(char *, _QWORD, uint64_t, int *);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int *v92;
  uint64_t v93;
  uint64_t (*v94)(char *, uint64_t, int *);
  int v95;
  int v96;
  uint64_t (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  void (*v116)(char *, _QWORD, uint64_t, int *);
  uint64_t v117;
  void (*v118)(char *, char *, uint64_t);
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  __int128 v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  __int128 *v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v155;
  int *v156;
  int *v157;
  _QWORD *v158;
  int *v159;

  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)v5 + v6;
  v8 = (char *)v4 + v6;
  v9 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(char *, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  v158 = v4;
  v159 = a3;
  if (v12)
  {
    if (v13)
    {
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
      sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, v14);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      goto LABEL_9;
    }
    v16 = sub_23DDC53A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v7, v8, v16);
    v17 = v9[5];
    v18 = &v7[v17];
    v19 = &v8[v17];
    v20 = v5;
    v21 = sub_23DDC512C();
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
    v22(v18, v19, v21);
    v23 = v9[6];
    v24 = &v7[v23];
    v25 = &v8[v23];
    v22(&v7[v23], &v8[v23], v21);
    sub_23DCF9010();
    v27 = v26;
    v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v21);
    v28 = v9[7];
    v29 = &v7[v28];
    v30 = &v8[v28];
    v22(&v7[v28], &v8[v28], v21);
    v31 = v21;
    v5 = v20;
    v4 = v158;
    v22(&v29[*(int *)(v27 + 36)], &v30[*(int *)(v27 + 36)], v31);
    v32 = v9[8];
    v33 = &v7[v32];
    v34 = &v8[v32];
    v35 = v34[8];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v35;
    v36 = v9[9];
    v37 = &v7[v36];
    v38 = &v8[v36];
    v39 = sub_23DDC54C8();
    v40 = v38;
    a3 = v159;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v40, v39);
    v41 = v9[10];
    v42 = &v7[v41];
    v43 = &v8[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
    v44 = v9[11];
    v45 = &v7[v44];
    v46 = &v8[v44];
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
    v47 = v9[12];
    v48 = &v7[v47];
    v49 = &v8[v47];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
    v50 = *(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v50(v7, 0, 1, v9);
  }
  else
  {
    if (v13)
    {
      sub_23DCF59A8((uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v51 = sub_23DDC53A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 24))(v7, v8, v51);
    v52 = v9[5];
    v53 = &v7[v52];
    v54 = &v8[v52];
    v55 = v5;
    v56 = sub_23DDC512C();
    v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 24);
    v57(v53, v54, v56);
    v58 = v9[6];
    v59 = &v7[v58];
    v60 = &v8[v58];
    v57(&v7[v58], &v8[v58], v56);
    sub_23DCF9010();
    v62 = v61;
    v57(&v59[*(int *)(v61 + 36)], &v60[*(int *)(v61 + 36)], v56);
    v63 = v9[7];
    v64 = &v7[v63];
    v65 = &v8[v63];
    v57(&v7[v63], &v8[v63], v56);
    v66 = v56;
    v5 = v55;
    v57(&v64[*(int *)(v62 + 36)], &v65[*(int *)(v62 + 36)], v66);
    v67 = v9[8];
    v68 = &v7[v67];
    v69 = &v8[v67];
    v70 = v69[8];
    *(_QWORD *)v68 = *(_QWORD *)v69;
    v68[8] = v70;
    v71 = v9[9];
    v72 = &v7[v71];
    v73 = &v8[v71];
    v74 = sub_23DDC54C8();
    v75 = v73;
    a3 = v159;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 24))(v72, v75, v74);
    v76 = v9[10];
    v77 = &v7[v76];
    v78 = &v8[v76];
    *(_QWORD *)v77 = *(_QWORD *)v78;
    *((_QWORD *)v77 + 1) = *((_QWORD *)v78 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v79 = v9[11];
    v80 = &v7[v79];
    v81 = &v8[v79];
    *(_QWORD *)v80 = *(_QWORD *)v81;
    *((_QWORD *)v80 + 1) = *((_QWORD *)v81 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v82 = v9[12];
    v83 = &v7[v82];
    v84 = &v8[v82];
    *(_QWORD *)v83 = *(_QWORD *)v84;
    *((_QWORD *)v83 + 1) = *((_QWORD *)v84 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  *(_QWORD *)((char *)v5 + a3[6]) = *(_QWORD *)((char *)v4 + a3[6]);
  v85 = a3[7];
  v86 = (char *)v5 + v85;
  v87 = (char *)v4 + v85;
  *(_QWORD *)((char *)v5 + v85) = *(_QWORD *)((char *)v4 + v85);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v88 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v89 = v88[5];
  v90 = &v86[v89];
  v91 = &v87[v89];
  v92 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v93 = *((_QWORD *)v92 - 1);
  v94 = *(uint64_t (**)(char *, uint64_t, int *))(v93 + 48);
  v95 = v94(v90, 1, v92);
  v96 = v94(v91, 1, v92);
  if (v95)
  {
    if (v96)
    {
      v97 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_14:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v97);
      memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
      goto LABEL_17;
    }
    v99 = sub_23DDC512C();
    v156 = v88;
    v100 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 16);
    v100(v90, v91, v99);
    v101 = v92[5];
    v102 = &v90[v101];
    v155 = v5;
    v103 = &v91[v101];
    v100(&v90[v101], &v91[v101], v99);
    sub_23DCF9010();
    v100(&v102[*(int *)(v104 + 36)], &v103[*(int *)(v104 + 36)], v99);
    v105 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v102[v105[5]] = *(_QWORD *)&v103[v105[5]];
    *(_QWORD *)&v102[v105[6]] = *(_QWORD *)&v103[v105[6]];
    *(_QWORD *)&v102[v105[7]] = *(_QWORD *)&v103[v105[7]];
    v106 = v92[6];
    v107 = &v90[v106];
    v108 = &v91[v106];
    v109 = v108[16];
    *(_OWORD *)v107 = *(_OWORD *)v108;
    v107[16] = v109;
    v90[v92[7]] = v91[v92[7]];
    v90[v92[8]] = v91[v92[8]];
    v90[v92[9]] = v91[v92[9]];
    v110 = v92[10];
    v111 = &v90[v110];
    v112 = &v91[v110];
    *(_QWORD *)v111 = *(_QWORD *)v112;
    *((_QWORD *)v111 + 1) = *((_QWORD *)v112 + 1);
    v113 = v92[11];
    v114 = &v90[v113];
    v115 = &v91[v113];
    *(_QWORD *)v114 = *(_QWORD *)v115;
    *((_QWORD *)v114 + 1) = *((_QWORD *)v115 + 1);
    v116 = *(void (**)(char *, _QWORD, uint64_t, int *))(v93 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = v155;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v116(v90, 0, 1, v92);
    v88 = v156;
  }
  else
  {
    if (v96)
    {
      sub_23DCF59A8((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v97 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_14;
    }
    v117 = sub_23DDC512C();
    v118 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 24);
    v118(v90, v91, v117);
    v119 = v92[5];
    v157 = v88;
    v120 = v5;
    v121 = &v90[v119];
    v122 = &v91[v119];
    v118(&v90[v119], &v91[v119], v117);
    sub_23DCF9010();
    v118(&v121[*(int *)(v123 + 36)], &v122[*(int *)(v123 + 36)], v117);
    v124 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v121[v124[5]] = *(_QWORD *)&v122[v124[5]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v121[v124[6]] = *(_QWORD *)&v122[v124[6]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v121[v124[7]] = *(_QWORD *)&v122[v124[7]];
    v5 = v120;
    v88 = v157;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v125 = v92[6];
    v126 = &v90[v125];
    v127 = &v91[v125];
    v128 = *(_OWORD *)v127;
    v126[16] = v127[16];
    *(_OWORD *)v126 = v128;
    v90[v92[7]] = v91[v92[7]];
    v90[v92[8]] = v91[v92[8]];
    v90[v92[9]] = v91[v92[9]];
    v129 = v92[10];
    v130 = &v90[v129];
    v131 = &v91[v129];
    *(_QWORD *)v130 = *(_QWORD *)v131;
    *((_QWORD *)v130 + 1) = *((_QWORD *)v131 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v132 = v92[11];
    v133 = &v90[v132];
    v134 = &v91[v132];
    *(_QWORD *)v133 = *(_QWORD *)v134;
    *((_QWORD *)v133 + 1) = *((_QWORD *)v134 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_17:
  v135 = v88[6];
  v136 = &v86[v135];
  v137 = &v87[v135];
  *(_QWORD *)v136 = *(_QWORD *)v137;
  *((_QWORD *)v136 + 1) = *((_QWORD *)v137 + 1);
  v138 = v88[7];
  v139 = &v86[v138];
  v140 = &v87[v138];
  *(_QWORD *)v139 = *(_QWORD *)v140;
  v141 = *((_QWORD *)v140 + 1);
  v139[16] = v140[16];
  *((_QWORD *)v139 + 1) = v141;
  *((_QWORD *)v139 + 3) = *((_QWORD *)v140 + 3);
  *((_QWORD *)v139 + 4) = *((_QWORD *)v140 + 4);
  *((_QWORD *)v139 + 5) = *((_QWORD *)v140 + 5);
  *((_QWORD *)v139 + 6) = *((_QWORD *)v140 + 6);
  *((_QWORD *)v139 + 7) = *((_QWORD *)v140 + 7);
  *((_QWORD *)v139 + 8) = *((_QWORD *)v140 + 8);
  *((_QWORD *)v139 + 9) = *((_QWORD *)v140 + 9);
  *((_QWORD *)v139 + 10) = *((_QWORD *)v140 + 10);
  *(_QWORD *)&v86[v88[8]] = *(_QWORD *)&v87[v88[8]];
  *(_QWORD *)&v86[v88[9]] = *(_QWORD *)&v87[v88[9]];
  v142 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v143 = &v86[v142];
  v144 = &v87[v142];
  *(_QWORD *)v143 = *(_QWORD *)v144;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v143 + 1) = *((_QWORD *)v144 + 1);
  *((_QWORD *)v143 + 2) = *((_QWORD *)v144 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v143 + 3) = *((_QWORD *)v144 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v143 + 4) = *((_QWORD *)v144 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v143 + 5) = *((_QWORD *)v144 + 5);
  *((_QWORD *)v143 + 6) = *((_QWORD *)v144 + 6);
  *((_QWORD *)v143 + 7) = *((_QWORD *)v144 + 7);
  *((_QWORD *)v143 + 8) = *((_QWORD *)v144 + 8);
  *((_QWORD *)v143 + 9) = *((_QWORD *)v144 + 9);
  *((_QWORD *)v143 + 10) = *((_QWORD *)v144 + 10);
  *((_QWORD *)v143 + 11) = *((_QWORD *)v144 + 11);
  *((_QWORD *)v143 + 12) = *((_QWORD *)v144 + 12);
  *((_QWORD *)v143 + 13) = *((_QWORD *)v144 + 13);
  *((_QWORD *)v143 + 14) = *((_QWORD *)v144 + 14);
  v145 = v159[8];
  v146 = (char *)v5 + v145;
  v147 = (__int128 *)((char *)v158 + v145);
  v148 = *(_QWORD *)((char *)v158 + v145);
  if (*(_QWORD *)((char *)v5 + v145))
  {
    if (v148)
    {
      *(_QWORD *)v146 = v148;
      swift_retain();
      swift_release();
      *((_QWORD *)v146 + 1) = *((_QWORD *)v147 + 1);
      swift_retain();
      swift_release();
      *((_QWORD *)v146 + 2) = *((_QWORD *)v147 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_23DCF9EB8((uint64_t)v5 + v145);
      v149 = *((_QWORD *)v147 + 2);
      *(_OWORD *)v146 = *v147;
      *((_QWORD *)v146 + 2) = v149;
    }
  }
  else if (v148)
  {
    *(_QWORD *)v146 = v148;
    *((_QWORD *)v146 + 1) = *((_QWORD *)v147 + 1);
    *((_QWORD *)v146 + 2) = *((_QWORD *)v147 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v150 = *v147;
    *((_QWORD *)v146 + 2) = *((_QWORD *)v147 + 2);
    *(_OWORD *)v146 = v150;
  }
  v146[24] = *((_BYTE *)v147 + 24);
  v146[32] = *((_BYTE *)v147 + 32);
  *((_QWORD *)v146 + 5) = *((_QWORD *)v147 + 5);
  swift_retain();
  swift_release();
  v151 = *((_QWORD *)v147 + 6);
  v146[56] = *((_BYTE *)v147 + 56);
  *((_QWORD *)v146 + 6) = v151;
  *((_QWORD *)v146 + 8) = *((_QWORD *)v147 + 8);
  *((_QWORD *)v146 + 9) = *((_QWORD *)v147 + 9);
  swift_retain();
  swift_release();
  *((_QWORD *)v146 + 10) = *((_QWORD *)v147 + 10);
  swift_retain();
  swift_release();
  *((_QWORD *)v146 + 11) = *((_QWORD *)v147 + 11);
  v152 = *((_QWORD *)v147 + 12);
  v146[104] = *((_BYTE *)v147 + 104);
  *((_QWORD *)v146 + 12) = v152;
  *((_QWORD *)v146 + 14) = *((_QWORD *)v147 + 14);
  *((_QWORD *)v146 + 15) = *((_QWORD *)v147 + 15);
  *((_QWORD *)v146 + 16) = *((_QWORD *)v147 + 16);
  *((_QWORD *)v146 + 17) = *((_QWORD *)v147 + 17);
  *((_QWORD *)v146 + 18) = *((_QWORD *)v147 + 18);
  *((_QWORD *)v146 + 19) = *((_QWORD *)v147 + 19);
  *((_QWORD *)v146 + 20) = *((_QWORD *)v147 + 20);
  *((_QWORD *)v146 + 21) = *((_QWORD *)v147 + 21);
  *((_QWORD *)v146 + 22) = *((_QWORD *)v147 + 22);
  swift_retain();
  swift_release();
  *((_QWORD *)v146 + 23) = *((_QWORD *)v147 + 23);
  swift_retain();
  swift_release();
  v153 = *((_QWORD *)v147 + 24);
  v146[200] = *((_BYTE *)v147 + 200);
  *((_QWORD *)v146 + 24) = v153;
  v146[201] = *((_BYTE *)v147 + 201);
  *((_QWORD *)v146 + 26) = *((_QWORD *)v147 + 26);
  swift_retain();
  swift_release();
  *((_QWORD *)v146 + 27) = *((_QWORD *)v147 + 27);
  swift_retain();
  swift_release();
  *((_QWORD *)v146 + 28) = *((_QWORD *)v147 + 28);
  swift_retain();
  swift_release();
  *((_QWORD *)v146 + 29) = *((_QWORD *)v147 + 29);
  swift_retain();
  swift_release();
  *((_QWORD *)v146 + 30) = *((_QWORD *)v147 + 30);
  swift_retain();
  swift_release();
  v146[248] = *((_BYTE *)v147 + 248);
  *((_QWORD *)v146 + 32) = *((_QWORD *)v147 + 32);
  swift_retain();
  swift_release();
  *((_QWORD *)v146 + 33) = *((_QWORD *)v147 + 33);
  swift_retain();
  swift_release();
  *((_QWORD *)v146 + 34) = *((_QWORD *)v147 + 34);
  return v5;
}

_QWORD *sub_23DD7BE68(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v70;
  _QWORD *v71;
  int *v72;
  int *v73;
  _QWORD *v74;
  _QWORD *v75;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = sub_23DDC53A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
    v13 = v9[5];
    v14 = &v7[v13];
    v74 = v4;
    v15 = &v8[v13];
    v72 = v3;
    v16 = sub_23DDC512C();
    v17 = v5;
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
    v18(v14, v15, v16);
    v19 = v9[6];
    v20 = &v7[v19];
    v21 = &v8[v19];
    v18(&v7[v19], &v8[v19], v16);
    sub_23DCF9010();
    v23 = v22;
    v18(&v20[*(int *)(v22 + 36)], &v21[*(int *)(v22 + 36)], v16);
    v24 = v9[7];
    v25 = &v7[v24];
    v26 = &v8[v24];
    v18(&v7[v24], &v8[v24], v16);
    v27 = v16;
    v3 = v72;
    v18(&v25[*(int *)(v23 + 36)], &v26[*(int *)(v23 + 36)], v27);
    v5 = v17;
    v28 = v9[8];
    v29 = &v7[v28];
    v30 = &v8[v28];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = v9[9];
    v32 = &v7[v31];
    v33 = &v8[v31];
    v34 = sub_23DDC54C8();
    v35 = v33;
    v4 = v74;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v35, v34);
    *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
    *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
    *(_OWORD *)&v7[v9[12]] = *(_OWORD *)&v8[v9[12]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v36 = v3[7];
  *(_QWORD *)((char *)v5 + v3[6]) = *(_QWORD *)((char *)v4 + v3[6]);
  v37 = (char *)v5 + v36;
  v38 = (char *)v4 + v36;
  *(_QWORD *)((char *)v5 + v36) = *(_QWORD *)((char *)v4 + v36);
  v39 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v40 = v39[5];
  v41 = &v37[v40];
  v42 = &v38[v40];
  v43 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v44 = *((_QWORD *)v43 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v75 = v4;
    v46 = sub_23DDC512C();
    v71 = v5;
    v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32);
    v47(v41, v42, v46);
    v48 = v43[5];
    v73 = v3;
    v49 = &v41[v48];
    v70 = v44;
    v50 = &v42[v48];
    v47(&v41[v48], &v42[v48], v46);
    sub_23DCF9010();
    v52 = v46;
    v4 = v75;
    v47(&v49[*(int *)(v51 + 36)], &v50[*(int *)(v51 + 36)], v52);
    v5 = v71;
    v53 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v49[v53[5]] = *(_QWORD *)&v50[v53[5]];
    *(_QWORD *)&v49[v53[6]] = *(_QWORD *)&v50[v53[6]];
    *(_QWORD *)&v49[v53[7]] = *(_QWORD *)&v50[v53[7]];
    v3 = v73;
    v54 = v43[6];
    v55 = &v41[v54];
    v56 = &v42[v54];
    *(_OWORD *)v55 = *(_OWORD *)v56;
    v55[16] = v56[16];
    v41[v43[7]] = v42[v43[7]];
    v41[v43[8]] = v42[v43[8]];
    v41[v43[9]] = v42[v43[9]];
    *(_OWORD *)&v41[v43[10]] = *(_OWORD *)&v42[v43[10]];
    *(_OWORD *)&v41[v43[11]] = *(_OWORD *)&v42[v43[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v70 + 56))(v41, 0, 1, v43);
  }
  *(_OWORD *)&v37[v39[6]] = *(_OWORD *)&v38[v39[6]];
  v57 = v39[7];
  v58 = &v37[v57];
  v59 = &v38[v57];
  v60 = *((_OWORD *)v59 + 1);
  *(_OWORD *)v58 = *(_OWORD *)v59;
  *((_OWORD *)v58 + 1) = v60;
  *((_QWORD *)v58 + 10) = *((_QWORD *)v59 + 10);
  v61 = *((_OWORD *)v59 + 4);
  v62 = *((_OWORD *)v59 + 2);
  *((_OWORD *)v58 + 3) = *((_OWORD *)v59 + 3);
  *((_OWORD *)v58 + 4) = v61;
  *((_OWORD *)v58 + 2) = v62;
  *(_QWORD *)&v37[v39[8]] = *(_QWORD *)&v38[v39[8]];
  *(_QWORD *)&v37[v39[9]] = *(_QWORD *)&v38[v39[9]];
  v63 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v64 = &v37[v63];
  v65 = &v38[v63];
  v66 = *((_OWORD *)v65 + 5);
  *((_OWORD *)v64 + 4) = *((_OWORD *)v65 + 4);
  *((_OWORD *)v64 + 5) = v66;
  *((_OWORD *)v64 + 6) = *((_OWORD *)v65 + 6);
  *((_QWORD *)v64 + 14) = *((_QWORD *)v65 + 14);
  v67 = *((_OWORD *)v65 + 1);
  *(_OWORD *)v64 = *(_OWORD *)v65;
  *((_OWORD *)v64 + 1) = v67;
  v68 = *((_OWORD *)v65 + 3);
  *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
  *((_OWORD *)v64 + 3) = v68;
  memcpy((char *)v5 + v3[8], (char *)v4 + v3[8], 0x118uLL);
  return v5;
}

_QWORD *sub_23DD7C2D0(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int *v87;
  uint64_t v88;
  uint64_t (*v89)(char *, uint64_t, int *);
  int v90;
  int v91;
  uint64_t (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  int *v145;

  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)v5 + v6;
  v8 = (char *)v4 + v6;
  v9 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(char *, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  v144 = v4;
  v145 = a3;
  if (v12)
  {
    if (v13)
    {
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
      sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, v14);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      goto LABEL_9;
    }
    v16 = sub_23DDC53A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v7, v8, v16);
    v17 = v9[5];
    v18 = &v7[v17];
    v19 = &v8[v17];
    v20 = sub_23DDC512C();
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
    v21(v18, v19, v20);
    v22 = v9[6];
    v23 = &v7[v22];
    v24 = &v8[v22];
    v21(&v7[v22], &v8[v22], v20);
    sub_23DCF9010();
    v25 = v5;
    v27 = v26;
    v21(&v23[*(int *)(v26 + 36)], &v24[*(int *)(v26 + 36)], v20);
    v28 = v9[7];
    v29 = &v7[v28];
    v30 = &v8[v28];
    v21(&v7[v28], &v8[v28], v20);
    v31 = *(int *)(v27 + 36);
    v5 = v25;
    a3 = v145;
    v21(&v29[v31], &v30[v31], v20);
    v32 = v9[8];
    v33 = &v7[v32];
    v34 = &v8[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = v9[9];
    v36 = &v7[v35];
    v37 = &v8[v35];
    v38 = sub_23DDC54C8();
    v39 = v37;
    v4 = v144;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v39, v38);
    *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
    *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
    *(_OWORD *)&v7[v9[12]] = *(_OWORD *)&v8[v9[12]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  else
  {
    if (v13)
    {
      sub_23DCF59A8((uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v40 = sub_23DDC53A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 40))(v7, v8, v40);
    v41 = v9[5];
    v42 = &v7[v41];
    v43 = v4;
    v44 = &v8[v41];
    v45 = sub_23DDC512C();
    v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 40);
    v46(v42, v44, v45);
    v47 = v9[6];
    v48 = &v7[v47];
    v49 = &v8[v47];
    v46(&v7[v47], &v8[v47], v45);
    sub_23DCF9010();
    v50 = v5;
    v52 = v51;
    v46(&v48[*(int *)(v51 + 36)], &v49[*(int *)(v51 + 36)], v45);
    v53 = v9[7];
    v54 = &v7[v53];
    v55 = &v8[v53];
    v46(&v7[v53], &v8[v53], v45);
    v56 = *(int *)(v52 + 36);
    v5 = v50;
    v46(&v54[v56], &v55[v56], v45);
    v57 = v9[8];
    v58 = &v7[v57];
    v59 = &v8[v57];
    *(_QWORD *)v58 = *(_QWORD *)v59;
    v58[8] = v59[8];
    v60 = v9[9];
    v61 = &v7[v60];
    v62 = &v8[v60];
    v63 = sub_23DDC54C8();
    v64 = v62;
    v4 = v43;
    a3 = v145;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 40))(v61, v64, v63);
    v65 = v9[10];
    v66 = &v7[v65];
    v67 = &v8[v65];
    v69 = *(_QWORD *)v67;
    v68 = *((_QWORD *)v67 + 1);
    *(_QWORD *)v66 = v69;
    *((_QWORD *)v66 + 1) = v68;
    swift_bridgeObjectRelease();
    v70 = v9[11];
    v71 = &v7[v70];
    v72 = &v8[v70];
    v74 = *(_QWORD *)v72;
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = v74;
    *((_QWORD *)v71 + 1) = v73;
    swift_bridgeObjectRelease();
    v75 = v9[12];
    v76 = &v7[v75];
    v77 = &v8[v75];
    v79 = *(_QWORD *)v77;
    v78 = *((_QWORD *)v77 + 1);
    *(_QWORD *)v76 = v79;
    *((_QWORD *)v76 + 1) = v78;
    swift_bridgeObjectRelease();
  }
LABEL_9:
  v80 = a3[7];
  *(_QWORD *)((char *)v5 + a3[6]) = *(_QWORD *)((char *)v4 + a3[6]);
  v81 = (char *)v5 + v80;
  v82 = (char *)v4 + v80;
  *(_QWORD *)((char *)v5 + v80) = *(_QWORD *)((char *)v4 + v80);
  swift_bridgeObjectRelease();
  v83 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v84 = v83[5];
  v85 = &v81[v84];
  v86 = &v82[v84];
  v87 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v88 = *((_QWORD *)v87 - 1);
  v89 = *(uint64_t (**)(char *, uint64_t, int *))(v88 + 48);
  v90 = v89(v85, 1, v87);
  v91 = v89(v86, 1, v87);
  if (v90)
  {
    if (v91)
    {
      v92 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_14:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v92);
      memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
      goto LABEL_17;
    }
    v94 = sub_23DDC512C();
    v95 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 32);
    v95(v85, v86, v94);
    v141 = v88;
    v142 = v5;
    v96 = v95;
    v97 = v87[5];
    v98 = &v85[v97];
    v99 = &v86[v97];
    v96(&v85[v97], &v86[v97], v94);
    sub_23DCF9010();
    v96(&v98[*(int *)(v100 + 36)], &v99[*(int *)(v100 + 36)], v94);
    v101 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v98[v101[5]] = *(_QWORD *)&v99[v101[5]];
    *(_QWORD *)&v98[v101[6]] = *(_QWORD *)&v99[v101[6]];
    v102 = v101[7];
    v103 = *(_QWORD *)&v99[v102];
    v5 = v142;
    *(_QWORD *)&v98[v102] = v103;
    v104 = v87[6];
    v105 = &v85[v104];
    v106 = &v86[v104];
    *(_OWORD *)v105 = *(_OWORD *)v106;
    v105[16] = v106[16];
    v85[v87[7]] = v86[v87[7]];
    v85[v87[8]] = v86[v87[8]];
    v85[v87[9]] = v86[v87[9]];
    *(_OWORD *)&v85[v87[10]] = *(_OWORD *)&v86[v87[10]];
    *(_OWORD *)&v85[v87[11]] = *(_OWORD *)&v86[v87[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v141 + 56))(v85, 0, 1, v87);
  }
  else
  {
    if (v91)
    {
      sub_23DCF59A8((uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v92 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_14;
    }
    v107 = sub_23DDC512C();
    v108 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 40);
    v108(v85, v86, v107);
    v109 = v87[5];
    v110 = &v85[v109];
    v143 = v5;
    v111 = &v86[v109];
    v108(&v85[v109], &v86[v109], v107);
    sub_23DCF9010();
    v108(&v110[*(int *)(v112 + 36)], &v111[*(int *)(v112 + 36)], v107);
    v113 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v110[v113[5]] = *(_QWORD *)&v111[v113[5]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v110[v113[6]] = *(_QWORD *)&v111[v113[6]];
    swift_bridgeObjectRelease();
    v114 = v113[7];
    v115 = *(_QWORD *)&v111[v114];
    v5 = v143;
    *(_QWORD *)&v110[v114] = v115;
    swift_bridgeObjectRelease();
    v116 = v87[6];
    v117 = &v85[v116];
    v118 = &v86[v116];
    *(_OWORD *)v117 = *(_OWORD *)v118;
    v117[16] = v118[16];
    v85[v87[7]] = v86[v87[7]];
    v85[v87[8]] = v86[v87[8]];
    v85[v87[9]] = v86[v87[9]];
    v119 = v87[10];
    v120 = &v85[v119];
    v121 = &v86[v119];
    v123 = *(_QWORD *)v121;
    v122 = *((_QWORD *)v121 + 1);
    *(_QWORD *)v120 = v123;
    *((_QWORD *)v120 + 1) = v122;
    swift_bridgeObjectRelease();
    v124 = v87[11];
    v125 = &v85[v124];
    v126 = &v86[v124];
    v128 = *(_QWORD *)v126;
    v127 = *((_QWORD *)v126 + 1);
    *(_QWORD *)v125 = v128;
    *((_QWORD *)v125 + 1) = v127;
    swift_bridgeObjectRelease();
  }
LABEL_17:
  *(_OWORD *)&v81[v83[6]] = *(_OWORD *)&v82[v83[6]];
  v129 = v83[7];
  v130 = &v81[v129];
  v131 = &v82[v129];
  *(_QWORD *)v130 = *(_QWORD *)v131;
  *((_QWORD *)v130 + 1) = *((_QWORD *)v131 + 1);
  v130[16] = v131[16];
  *(_OWORD *)(v130 + 24) = *(_OWORD *)(v131 + 24);
  *(_OWORD *)(v130 + 40) = *(_OWORD *)(v131 + 40);
  *(_OWORD *)(v130 + 56) = *(_OWORD *)(v131 + 56);
  *(_OWORD *)(v130 + 72) = *(_OWORD *)(v131 + 72);
  *(_QWORD *)&v81[v83[8]] = *(_QWORD *)&v82[v83[8]];
  *(_QWORD *)&v81[v83[9]] = *(_QWORD *)&v82[v83[9]];
  v132 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v133 = &v81[v132];
  v134 = &v82[v132];
  *(_QWORD *)&v81[v132] = *(_QWORD *)v134;
  swift_bridgeObjectRelease();
  *((_QWORD *)v133 + 1) = *((_QWORD *)v134 + 1);
  *((_QWORD *)v133 + 2) = *((_QWORD *)v134 + 2);
  swift_bridgeObjectRelease();
  *((_QWORD *)v133 + 3) = *((_QWORD *)v134 + 3);
  swift_bridgeObjectRelease();
  *((_QWORD *)v133 + 4) = *((_QWORD *)v134 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v133 + 40) = *(_OWORD *)(v134 + 40);
  *(_OWORD *)(v133 + 56) = *(_OWORD *)(v134 + 56);
  *(_OWORD *)(v133 + 72) = *(_OWORD *)(v134 + 72);
  *(_OWORD *)(v133 + 88) = *(_OWORD *)(v134 + 88);
  *(_OWORD *)(v133 + 104) = *(_OWORD *)(v134 + 104);
  v135 = v145[8];
  v136 = (uint64_t)v5 + v135;
  v137 = (uint64_t)v144 + v135;
  if (!*(_QWORD *)((char *)v5 + v135))
  {
LABEL_21:
    *(_OWORD *)v136 = *(_OWORD *)v137;
    *(_QWORD *)(v136 + 16) = *(_QWORD *)(v137 + 16);
    goto LABEL_22;
  }
  if (!*(_QWORD *)v137)
  {
    sub_23DCF9EB8(v136);
    goto LABEL_21;
  }
  *(_QWORD *)v136 = *(_QWORD *)v137;
  swift_release();
  *(_QWORD *)(v136 + 8) = *(_QWORD *)(v137 + 8);
  swift_release();
  *(_QWORD *)(v136 + 16) = *(_QWORD *)(v137 + 16);
  swift_release();
LABEL_22:
  *(_BYTE *)(v136 + 24) = *(_BYTE *)(v137 + 24);
  *(_BYTE *)(v136 + 32) = *(_BYTE *)(v137 + 32);
  *(_QWORD *)(v136 + 40) = *(_QWORD *)(v137 + 40);
  swift_release();
  *(_QWORD *)(v136 + 48) = *(_QWORD *)(v137 + 48);
  *(_BYTE *)(v136 + 56) = *(_BYTE *)(v137 + 56);
  *(_QWORD *)(v136 + 64) = *(_QWORD *)(v137 + 64);
  *(_QWORD *)(v136 + 72) = *(_QWORD *)(v137 + 72);
  swift_release();
  *(_QWORD *)(v136 + 80) = *(_QWORD *)(v137 + 80);
  swift_release();
  *(_QWORD *)(v136 + 88) = *(_QWORD *)(v137 + 88);
  *(_QWORD *)(v136 + 96) = *(_QWORD *)(v137 + 96);
  *(_BYTE *)(v136 + 104) = *(_BYTE *)(v137 + 104);
  v138 = *(_OWORD *)(v137 + 128);
  *(_OWORD *)(v136 + 112) = *(_OWORD *)(v137 + 112);
  *(_OWORD *)(v136 + 128) = v138;
  v139 = *(_OWORD *)(v137 + 160);
  *(_OWORD *)(v136 + 144) = *(_OWORD *)(v137 + 144);
  *(_OWORD *)(v136 + 160) = v139;
  *(_QWORD *)(v136 + 176) = *(_QWORD *)(v137 + 176);
  swift_release();
  *(_QWORD *)(v136 + 184) = *(_QWORD *)(v137 + 184);
  swift_release();
  *(_QWORD *)(v136 + 192) = *(_QWORD *)(v137 + 192);
  *(_BYTE *)(v136 + 200) = *(_BYTE *)(v137 + 200);
  *(_BYTE *)(v136 + 201) = *(_BYTE *)(v137 + 201);
  *(_QWORD *)(v136 + 208) = *(_QWORD *)(v137 + 208);
  swift_release();
  *(_QWORD *)(v136 + 216) = *(_QWORD *)(v137 + 216);
  swift_release();
  *(_QWORD *)(v136 + 224) = *(_QWORD *)(v137 + 224);
  swift_release();
  *(_QWORD *)(v136 + 232) = *(_QWORD *)(v137 + 232);
  swift_release();
  *(_QWORD *)(v136 + 240) = *(_QWORD *)(v137 + 240);
  swift_release();
  *(_BYTE *)(v136 + 248) = *(_BYTE *)(v137 + 248);
  *(_QWORD *)(v136 + 256) = *(_QWORD *)(v137 + 256);
  swift_release();
  *(_QWORD *)(v136 + 264) = *(_QWORD *)(v137 + 264);
  swift_release();
  *(_QWORD *)(v136 + 272) = *(_QWORD *)(v137 + 272);
  return v5;
}

uint64_t sub_23DD7CC4C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD7CC58(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for OvernightMetricsChartLayout(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_23DD7CD10()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23DD7CD1C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for OvernightMetricsChartLayout(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SmoothedLineTrace()
{
  uint64_t result;

  result = qword_256CFEAD8;
  if (!qword_256CFEAD8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DD7CE0C()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DCFB328(319, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for OvernightMetricsChartLayout(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_23DD7CECC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD7CEDC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  float v64;
  char v65[40];
  _QWORD v66[5];

  v56 = a1;
  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v47 = (uint64_t)&v42 - v4;
  v45 = type metadata accessor for SmoothedLineTrace();
  v5 = *(_QWORD *)(v45 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v45);
  sub_23DD7DD80();
  v44 = v7;
  v46 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD7DF40(0);
  v53 = v10;
  v50 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v43 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD7E0B0(0);
  v55 = v12;
  v54 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v52 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD7E1F0(0);
  v51 = v14;
  v49 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v48 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v1;
  v59 = *v1;
  sub_23DCF58EC((uint64_t)v1, (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for SmoothedLineTrace);
  v16 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v17 = swift_allocObject();
  sub_23DCFBB58((uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, (uint64_t (*)(_QWORD))type metadata accessor for SmoothedLineTrace);
  sub_23DCFB328(0, &qword_254326758, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  type metadata accessor for IndividualOvernightMetricChartPoint.ID(0);
  sub_23DCFB328(0, &qword_256CFEB28, (uint64_t (*)(uint64_t))sub_23DD7DE6C, v2);
  sub_23DD7DEE0();
  sub_23DD7E014();
  sub_23DCF535C(&qword_256CFCF00, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t)&unk_23DDCB510);
  swift_bridgeObjectRetain();
  v18 = v43;
  v19 = v44;
  v20 = v42;
  v21 = v45;
  sub_23DDC635C();
  type metadata accessor for OvernightMetricsChartLayout(0);
  sub_23DDC5AB0();
  v22 = sub_23DD7DFB4();
  v23 = v18;
  sub_23DDC5888();
  sub_23DD25D04((uint64_t)v65);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v19);
  v24 = sub_23DD7DAD0();
  sub_23DDC6488();
  sub_23DDC6494();
  MEMORY[0x242642DEC](v24);
  sub_23DDC5BC4();
  v25 = v66[0];
  v26 = v66[1];
  v27 = v66[2];
  v28 = v66[3];
  v29 = v66[4];
  v30 = v47;
  sub_23DD1710C((uint64_t)v20 + *(int *)(v21 + 20), v47);
  v31 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  LODWORD(v24) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v30, 1, v31);
  sub_23DD7E69C(v30);
  v32 = 0.0;
  if ((_DWORD)v24 == 1)
    v32 = *(double *)((char *)v20 + *(int *)(v21 + 24)) * 0.3;
  v59 = v25;
  v60 = v26;
  v61 = v27;
  v62 = v28;
  v63 = v29;
  v64 = v32;
  sub_23DD315DC(0, &qword_256CFEB58, MEMORY[0x24BDEC7D0], MEMORY[0x24BDEC7B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEEC90]);
  v34 = v33;
  v57 = v19;
  v58 = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v36 = sub_23DD7E188();
  v37 = v52;
  v38 = v53;
  sub_23DDC5828();
  sub_23DD7E6F0((uint64_t)v66);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v23, v38);
  v59 = v38;
  v60 = v34;
  v61 = OpaqueTypeConformance2;
  v62 = v36;
  swift_getOpaqueTypeConformance2();
  v39 = v48;
  v40 = v55;
  sub_23DDC5864();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v37, v40);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v56, v39, v51);
}

uint64_t sub_23DD7D498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;

  v65 = a3;
  v5 = MEMORY[0x24BDB7E88];
  sub_23DD315DC(0, &qword_256CFEB70, MEMORY[0x24BEE1768], MEMORY[0x24BDB84D8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB7E88]);
  MEMORY[0x24BDAC7A8](v6);
  v62 = (char *)&v51 - v7;
  sub_23DD315DC(0, (unint64_t *)&qword_256CFCF08, MEMORY[0x24BEE13C8], MEMORY[0x24BDB84C8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))v5);
  MEMORY[0x24BDAC7A8](v8);
  v60 = (char *)&v51 - v9;
  sub_23DCF9010();
  MEMORY[0x24BDAC7A8](v10);
  v52 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD25DE8();
  MEMORY[0x24BDAC7A8](v12);
  v53 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23DDC59E4();
  v58 = *(_QWORD *)(v14 - 8);
  v59 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v56 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD7DE6C(0);
  v63 = *(_QWORD *)(v16 - 8);
  v64 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v55 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v54 = (char *)&v51 - v19;
  sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v51 - v24;
  v26 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v51 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v51 - v31;
  v33 = *(int *)(type metadata accessor for SmoothedLineTrace() + 20);
  v57 = a2;
  v34 = a2 + v33;
  sub_23DD1710C(v34, (uint64_t)v25);
  v61 = a1;
  sub_23DCF58EC(a1, (uint64_t)v29, type metadata accessor for IndividualOvernightMetricChartPoint);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v35(v25, 1, v26) == 1)
  {
    sub_23DCFBB58((uint64_t)v29, (uint64_t)v32, type metadata accessor for IndividualOvernightMetricChartPoint);
    sub_23DD7E69C((uint64_t)v25);
  }
  else
  {
    sub_23DCF59A8((uint64_t)v29, type metadata accessor for IndividualOvernightMetricChartPoint);
    sub_23DCFBB58((uint64_t)v25, (uint64_t)v32, type metadata accessor for IndividualOvernightMetricChartPoint);
  }
  v36 = &v32[*(int *)(v26 + 32)];
  if ((v36[8] & 1) != 0)
  {
    sub_23DCF59A8((uint64_t)v32, type metadata accessor for IndividualOvernightMetricChartPoint);
    v37 = 1;
    v39 = v63;
    v38 = v64;
  }
  else
  {
    v40 = *(double *)v36;
    sub_23DDC5DC8();
    sub_23DD1710C(v34, (uint64_t)v22);
    v41 = v35(v22, 1, v26);
    sub_23DD7E69C((uint64_t)v22);
    v42 = 28;
    if (v41 == 1)
      v42 = 24;
    v43 = v52;
    sub_23DCF58EC((uint64_t)&v32[*(int *)(v26 + v42)], v52, (uint64_t (*)(_QWORD))sub_23DCF9010);
    v51 = sub_23DDC512C();
    sub_23DCF535C((unint64_t *)&qword_254326A30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    sub_23DDC58DC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DCF59A8(v43, (uint64_t (*)(_QWORD))sub_23DCF9010);
    sub_23DDC5DC8();
    sub_23DD75560(v40);
    v66 = v44;
    sub_23DDC58E8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DDC5DC8();
    v66 = sub_23DDC5378();
    sub_23DDC58E8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = v56;
    sub_23DDC59D8();
    v46 = v55;
    v47 = v59;
    sub_23DDC5858();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v45, v47);
    sub_23DCF59A8((uint64_t)v32, type metadata accessor for IndividualOvernightMetricChartPoint);
    v39 = v63;
    v38 = v64;
    v48 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
    v49 = v54;
    v48(v54, v46, v64);
    v48(v65, v49, v38);
    v37 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v65, v37, 1, v38);
}

uint64_t sub_23DD7DAD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t result;
  double v15;
  double v16;
  uint64_t v17;
  double v18[2];

  v1 = v0;
  v2 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v18 - v7;
  v9 = *v0;
  v10 = *(_QWORD *)(*v0 + 16);
  if (!v10)
    return MEMORY[0x24BEE4AF8];
  v11 = v9 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  sub_23DCF58EC(v11, (uint64_t)v18 - v7, type metadata accessor for IndividualOvernightMetricChartPoint);
  sub_23DCF58EC(v11 + *(_QWORD *)(v3 + 72) * (v10 - 1), (uint64_t)v5, type metadata accessor for IndividualOvernightMetricChartPoint);
  sub_23DDC5030();
  v13 = v12;
  result = sub_23DDC5030();
  if (v13 <= v15)
  {
    v16 = MEMORY[0x24BDAC7A8](result);
    *(_QWORD *)&v18[-4] = v1;
    v18[-3] = v13;
    v18[-2] = v16;
    swift_bridgeObjectRetain();
    v17 = sub_23DD8F910((void (*)(_QWORD *__return_ptr, uint64_t))sub_23DD7E718, (uint64_t)&v18[-6], v9);
    swift_bridgeObjectRelease();
    sub_23DCF59A8((uint64_t)v5, type metadata accessor for IndividualOvernightMetricChartPoint);
    sub_23DCF59A8((uint64_t)v8, type metadata accessor for IndividualOvernightMetricChartPoint);
    return v17;
  }
  __break(1u);
  return result;
}

uint64_t sub_23DD7DC70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t __dst[35];

  v6 = type metadata accessor for SmoothedLineTrace();
  memcpy(__dst, (const void *)(a2 + *(int *)(v6 + 32)), sizeof(__dst));
  if ((*(_BYTE *)(a1 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32) + 8) & 1) != 0)
  {
    sub_23DDC6200();
  }
  else
  {
    sub_23DCFBB9C(__dst);
    sub_23DDC54B0();
    swift_retain();
    sub_23DCFE908(__dst);
  }
  sub_23DDC5030();
  result = sub_23DDC63A4();
  *a3 = result;
  a3[1] = v8;
  return result;
}

void sub_23DD7DD80()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFEB20)
  {
    sub_23DCFB328(255, &qword_254326758, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for IndividualOvernightMetricChartPoint.ID(255);
    sub_23DCFB328(255, &qword_256CFEB28, (uint64_t (*)(uint64_t))sub_23DD7DE6C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_23DD7DEE0();
    sub_23DCF535C(&qword_256CFCE10, type metadata accessor for IndividualOvernightMetricChartPoint.ID, (uint64_t)&unk_23DDCB548);
    v0 = sub_23DDC6380();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFEB20);
  }
}

void sub_23DD7DE6C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_256CFEB30)
  {
    v4[0] = sub_23DDC59E4();
    v4[1] = MEMORY[0x24BDB8230];
    v2 = MEMORY[0x242643B9C](a1, v4, MEMORY[0x24BDB7C88], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_256CFEB30);
  }
}

unint64_t sub_23DD7DEE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFCE08;
  if (!qword_256CFCE08)
  {
    sub_23DCFB328(255, &qword_254326758, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE12D8], v1);
    atomic_store(result, (unint64_t *)&qword_256CFCE08);
  }
  return result;
}

void sub_23DD7DF40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_256CFEB38)
  {
    sub_23DD7DD80();
    v5[0] = v2;
    v5[1] = sub_23DD7DFB4();
    v3 = MEMORY[0x242643B9C](a1, v5, MEMORY[0x24BDB7D68], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_256CFEB38);
  }
}

unint64_t sub_23DD7DFB4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_256CFEB40;
  if (!qword_256CFEB40)
  {
    sub_23DD7DD80();
    v2 = v1;
    v3 = sub_23DD7E014();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB8490], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CFEB40);
  }
  return result;
}

unint64_t sub_23DD7E014()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];

  result = qword_256CFEB48;
  if (!qword_256CFEB48)
  {
    sub_23DCFB328(255, &qword_256CFEB28, (uint64_t (*)(uint64_t))sub_23DD7DE6C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v2 = v1;
    v3[1] = sub_23DDC59E4();
    v3[2] = MEMORY[0x24BDB8230];
    v3[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB84F0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFEB48);
  }
  return result;
}

void sub_23DD7E0B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_256CFEB50)
  {
    sub_23DD7DF40(255);
    v3 = v2;
    sub_23DD315DC(255, &qword_256CFEB58, MEMORY[0x24BDEC7D0], MEMORY[0x24BDEC7B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEEC90]);
    v5 = v4;
    sub_23DD7DD80();
    sub_23DD7DFB4();
    v8[0] = v3;
    v8[1] = v5;
    v8[2] = swift_getOpaqueTypeConformance2();
    v8[3] = sub_23DD7E188();
    v6 = MEMORY[0x242643B9C](a1, v8, MEMORY[0x24BDB7C28], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_256CFEB50);
  }
}

unint64_t sub_23DD7E188()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFEB60;
  if (!qword_256CFEB60)
  {
    sub_23DD315DC(255, &qword_256CFEB58, MEMORY[0x24BDEC7D0], MEMORY[0x24BDEC7B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEEC90]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEECA0], v1);
    atomic_store(result, (unint64_t *)&qword_256CFEB60);
  }
  return result;
}

void sub_23DD7E1F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_256CFEB68)
  {
    sub_23DD7E0B0(255);
    v3 = v2;
    sub_23DD7DF40(255);
    sub_23DD315DC(255, &qword_256CFEB58, MEMORY[0x24BDEC7D0], MEMORY[0x24BDEC7B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEEC90]);
    sub_23DD7DD80();
    sub_23DD7DFB4();
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[3] = sub_23DD7E188();
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x242643B9C](a1, v6, MEMORY[0x24BDB7C98], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_256CFEB68);
  }
}

uint64_t sub_23DD7E2F4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v1 = (int *)type metadata accessor for SmoothedLineTrace();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  v3 = v2 + v1[5];
  v4 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v4 - 1) + 48))(v3, 1, v4))
  {
    v5 = sub_23DDC53A8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
    v6 = v3 + v4[5];
    v7 = sub_23DDC512C();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v6, v7);
    v9 = v3 + v4[6];
    v8(v9, v7);
    sub_23DCF9010();
    v11 = v10;
    v8(v9 + *(int *)(v10 + 36), v7);
    v12 = v3 + v4[7];
    v8(v12, v7);
    v8(v12 + *(int *)(v11 + 36), v7);
    v13 = v3 + v4[9];
    v14 = sub_23DDC54C8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = v2 + v1[7];
  swift_bridgeObjectRelease();
  v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v17 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v18 = sub_23DDC512C();
    v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
    v19(v16, v18);
    v20 = v16 + *(int *)(v17 + 20);
    v19(v20, v18);
    sub_23DCF9010();
    v19(v20 + *(int *)(v21 + 36), v18);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + v1[8]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DD7E650@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SmoothedLineTrace() - 8) + 80);
  return sub_23DD7D498(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_23DD7E69C(uint64_t a1)
{
  uint64_t v2;

  sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DD7E6F0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23DD7E718@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_23DD7DC70(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_23DD7E738()
{
  sub_23DD7E0B0(255);
  sub_23DD7DF40(255);
  sub_23DD315DC(255, &qword_256CFEB58, MEMORY[0x24BDEC7D0], MEMORY[0x24BDEC7B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEEC90]);
  sub_23DD7DD80();
  sub_23DD7DFB4();
  swift_getOpaqueTypeConformance2();
  sub_23DD7E188();
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

_QWORD *sub_23DD7E808(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, int *);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, _QWORD, uint64_t, int *);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(_OWORD *, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  void (*v69)(_OWORD *, _QWORD, uint64_t, uint64_t);
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, _QWORD, uint64_t, int *);
  uint64_t v98;
  char *v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  int *v128;
  unsigned int (*v129)(char *, uint64_t, int *);
  _QWORD *v132;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    v24 = (_QWORD *)(v23 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a3[5];
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    *(_QWORD *)((char *)a1 + v5) = *(_QWORD *)((char *)a2 + v5);
    v8 = type metadata accessor for OvernightMetricsChartPointCollection();
    v9 = *(int *)(v8 + 20);
    v10 = &v6[v9];
    v11 = &v7[v9];
    v132 = a1;
    v12 = sub_23DDC51E0();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v14 = v132;
    v13(v10, v11, v12);
    *(_QWORD *)&v6[*(int *)(v8 + 24)] = *(_QWORD *)&v7[*(int *)(v8 + 24)];
    v15 = a3;
    v16 = a3[6];
    v17 = (char *)v132 + v16;
    v18 = (char *)a2 + v16;
    v19 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v20 = *((_QWORD *)v19 - 1);
    v21 = *(unsigned int (**)(char *, uint64_t, int *))(v20 + 48);
    swift_bridgeObjectRetain();
    v129 = v21;
    v127 = v20;
    v128 = v19;
    if (v21(v18, 1, v19))
    {
      sub_23DD2ED80();
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v25 = sub_23DDC512C();
      v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
      v26(v17, v18, v25);
      v27 = v19[5];
      v28 = &v17[v27];
      v29 = &v18[v27];
      v26(&v17[v27], &v18[v27], v25);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v26(&v28[*(int *)(v30 + 36)], &v29[*(int *)(v30 + 36)], v25);
      v31 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v28[v31[5]] = *(_QWORD *)&v29[v31[5]];
      *(_QWORD *)&v28[v31[6]] = *(_QWORD *)&v29[v31[6]];
      *(_QWORD *)&v28[v31[7]] = *(_QWORD *)&v29[v31[7]];
      v32 = v19[6];
      v33 = &v17[v32];
      v34 = &v18[v32];
      *(_OWORD *)v33 = *(_OWORD *)v34;
      v33[16] = v34[16];
      v17[v19[7]] = v18[v19[7]];
      v17[v19[8]] = v18[v19[8]];
      v17[v19[9]] = v18[v19[9]];
      v35 = v19[10];
      v36 = &v17[v35];
      v37 = &v18[v35];
      v38 = *((_QWORD *)v37 + 1);
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *((_QWORD *)v36 + 1) = v38;
      v39 = v19[11];
      v40 = &v17[v39];
      v41 = &v18[v39];
      v42 = *((_QWORD *)v41 + 1);
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_QWORD *)v40 + 1) = v42;
      v43 = *(void (**)(char *, _QWORD, uint64_t, int *))(v20 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = v132;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43(v17, 0, 1, v19);
      v15 = a3;
    }
    v44 = v15[7];
    v45 = (uint64_t)v14 + v44;
    v46 = (char *)a2 + v44;
    if (*(_QWORD *)v46)
    {
      v47 = *((_QWORD *)v46 + 1);
      *(_QWORD *)v45 = *(_QWORD *)v46;
      *(_QWORD *)(v45 + 8) = v47;
      v48 = *((_OWORD *)v46 + 2);
      *(_OWORD *)(v45 + 16) = *((_OWORD *)v46 + 1);
      *(_OWORD *)(v45 + 32) = v48;
      *(_OWORD *)(v45 + 48) = *((_OWORD *)v46 + 3);
      *(_QWORD *)(v45 + 64) = *((_QWORD *)v46 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v49 = *((_OWORD *)v46 + 3);
      *(_OWORD *)(v45 + 32) = *((_OWORD *)v46 + 2);
      *(_OWORD *)(v45 + 48) = v49;
      *(_QWORD *)(v45 + 64) = *((_QWORD *)v46 + 8);
      v50 = *((_OWORD *)v46 + 1);
      *(_OWORD *)v45 = *(_OWORD *)v46;
      *(_OWORD *)(v45 + 16) = v50;
    }
    v51 = v15[9];
    *((_BYTE *)v14 + v15[8]) = *((_BYTE *)a2 + v15[8]);
    *(_QWORD *)((char *)v14 + v51) = *(_QWORD *)((char *)a2 + v51);
    v52 = v15[11];
    *(_QWORD *)((char *)v14 + v15[10]) = *(_QWORD *)((char *)a2 + v15[10]);
    v53 = (uint64_t)v14 + v52;
    v54 = (char *)a2 + v52;
    v55 = *((_QWORD *)v54 + 1);
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *(_QWORD *)(v53 + 8) = v55;
    *(_OWORD *)(v53 + 16) = *((_OWORD *)v54 + 1);
    v56 = v15[13];
    *(_QWORD *)((char *)v14 + v15[12]) = *(_QWORD *)((char *)a2 + v15[12]);
    v57 = (_OWORD *)((char *)v14 + v56);
    v58 = (_OWORD *)((char *)a2 + v56);
    v59 = type metadata accessor for BaselineSeparators.Configuration(0);
    v60 = *(_QWORD *)(v59 - 8);
    v61 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v60 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v61(v58, 1, v59))
    {
      sub_23DD7F02C(0);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      *v57 = *v58;
      v63 = *(int *)(v59 + 20);
      v64 = (char *)v57 + v63;
      v65 = (char *)v58 + v63;
      v66 = sub_23DDC512C();
      v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16);
      v67(v64, v65, v66);
      sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
      v67(&v64[*(int *)(v68 + 36)], &v65[*(int *)(v68 + 36)], v66);
      *(_QWORD *)((char *)v57 + *(int *)(v59 + 24)) = *(_QWORD *)((char *)v58 + *(int *)(v59 + 24));
      v69 = *(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v60 + 56);
      swift_retain();
      v69(v57, 0, 1, v59);
    }
    v70 = v132;
    v71 = a3[14];
    v72 = (char *)v132 + v71;
    v73 = (char *)a2 + v71;
    *(_QWORD *)((char *)v132 + v71) = *(_QWORD *)((char *)a2 + v71);
    v74 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    v75 = v74[5];
    v76 = &v72[v75];
    v77 = &v73[v75];
    swift_bridgeObjectRetain();
    if (v129(v77, 1, v128))
    {
      sub_23DD2ED80();
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    }
    else
    {
      v79 = sub_23DDC512C();
      v80 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16);
      v80(v76, v77, v79);
      v81 = v128[5];
      v82 = &v76[v81];
      v83 = &v77[v81];
      v80(&v76[v81], &v77[v81], v79);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v80(&v82[*(int *)(v84 + 36)], &v83[*(int *)(v84 + 36)], v79);
      v85 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v82[v85[5]] = *(_QWORD *)&v83[v85[5]];
      *(_QWORD *)&v82[v85[6]] = *(_QWORD *)&v83[v85[6]];
      *(_QWORD *)&v82[v85[7]] = *(_QWORD *)&v83[v85[7]];
      v86 = v128[6];
      v87 = &v76[v86];
      v88 = &v77[v86];
      *(_OWORD *)v87 = *(_OWORD *)v88;
      v87[16] = v88[16];
      v76[v128[7]] = v77[v128[7]];
      v76[v128[8]] = v77[v128[8]];
      v76[v128[9]] = v77[v128[9]];
      v89 = v128[10];
      v90 = &v76[v89];
      v91 = &v77[v89];
      v92 = *((_QWORD *)v91 + 1);
      *(_QWORD *)v90 = *(_QWORD *)v91;
      *((_QWORD *)v90 + 1) = v92;
      v93 = v128[11];
      v94 = &v76[v93];
      v95 = &v77[v93];
      v96 = *((_QWORD *)v95 + 1);
      *(_QWORD *)v94 = *(_QWORD *)v95;
      *((_QWORD *)v94 + 1) = v96;
      v97 = *(void (**)(char *, _QWORD, uint64_t, int *))(v127 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v70 = v132;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v97(v76, 0, 1, v128);
    }
    *(_OWORD *)&v72[v74[6]] = *(_OWORD *)&v73[v74[6]];
    v98 = v74[7];
    v99 = &v72[v98];
    v100 = &v73[v98];
    v101 = *((_OWORD *)v100 + 1);
    *(_OWORD *)v99 = *(_OWORD *)v100;
    *((_OWORD *)v99 + 1) = v101;
    *((_QWORD *)v99 + 10) = *((_QWORD *)v100 + 10);
    v102 = *((_OWORD *)v100 + 4);
    v103 = *((_OWORD *)v100 + 2);
    *((_OWORD *)v99 + 3) = *((_OWORD *)v100 + 3);
    *((_OWORD *)v99 + 4) = v102;
    *((_OWORD *)v99 + 2) = v103;
    *(_QWORD *)&v72[v74[8]] = *(_QWORD *)&v73[v74[8]];
    *(_QWORD *)&v72[v74[9]] = *(_QWORD *)&v73[v74[9]];
    v104 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    v105 = &v72[v104];
    v106 = &v73[v104];
    v107 = *((_QWORD *)v106 + 1);
    *(_QWORD *)v105 = *(_QWORD *)v106;
    *((_QWORD *)v105 + 1) = v107;
    v108 = *((_QWORD *)v106 + 3);
    *((_QWORD *)v105 + 2) = *((_QWORD *)v106 + 2);
    *((_QWORD *)v105 + 3) = v108;
    *((_QWORD *)v105 + 4) = *((_QWORD *)v106 + 4);
    *(_OWORD *)(v105 + 40) = *(_OWORD *)(v106 + 40);
    *(_OWORD *)(v105 + 56) = *(_OWORD *)(v106 + 56);
    *(_OWORD *)(v105 + 72) = *(_OWORD *)(v106 + 72);
    *(_OWORD *)(v105 + 88) = *(_OWORD *)(v106 + 88);
    *(_OWORD *)(v105 + 104) = *(_OWORD *)(v106 + 104);
    v109 = a3[15];
    v110 = (uint64_t)v70 + v109;
    v111 = (char *)a2 + v109;
    v112 = *(_QWORD *)((char *)a2 + v109);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v112)
    {
      v113 = *((_QWORD *)v111 + 1);
      v114 = *((_QWORD *)v111 + 2);
      *(_QWORD *)v110 = v112;
      *(_QWORD *)(v110 + 8) = v113;
      *(_QWORD *)(v110 + 16) = v114;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v110 = *(_OWORD *)v111;
      *(_QWORD *)(v110 + 16) = *((_QWORD *)v111 + 2);
    }
    *(_BYTE *)(v110 + 24) = v111[24];
    *(_BYTE *)(v110 + 32) = v111[32];
    v115 = *((_QWORD *)v111 + 6);
    *(_QWORD *)(v110 + 40) = *((_QWORD *)v111 + 5);
    *(_QWORD *)(v110 + 48) = v115;
    *(_BYTE *)(v110 + 56) = v111[56];
    v116 = *((_QWORD *)v111 + 9);
    *(_QWORD *)(v110 + 64) = *((_QWORD *)v111 + 8);
    *(_QWORD *)(v110 + 72) = v116;
    *(_QWORD *)(v110 + 80) = *((_QWORD *)v111 + 10);
    v117 = *(_OWORD *)(v111 + 88);
    *(_OWORD *)(v110 + 104) = *(_OWORD *)(v111 + 104);
    *(_OWORD *)(v110 + 88) = v117;
    v118 = *(_OWORD *)(v111 + 120);
    v119 = *(_OWORD *)(v111 + 136);
    *(_OWORD *)(v110 + 152) = *(_OWORD *)(v111 + 152);
    *(_OWORD *)(v110 + 136) = v119;
    *(_OWORD *)(v110 + 120) = v118;
    v120 = *((_QWORD *)v111 + 22);
    *(_QWORD *)(v110 + 168) = *((_QWORD *)v111 + 21);
    *(_QWORD *)(v110 + 176) = v120;
    v122 = *((_QWORD *)v111 + 23);
    v121 = *((_QWORD *)v111 + 24);
    *(_BYTE *)(v110 + 200) = v111[200];
    *(_QWORD *)(v110 + 184) = v122;
    *(_QWORD *)(v110 + 192) = v121;
    *(_BYTE *)(v110 + 201) = v111[201];
    v123 = *((_QWORD *)v111 + 27);
    *(_QWORD *)(v110 + 208) = *((_QWORD *)v111 + 26);
    *(_QWORD *)(v110 + 216) = v123;
    v124 = *((_QWORD *)v111 + 29);
    *(_QWORD *)(v110 + 224) = *((_QWORD *)v111 + 28);
    *(_QWORD *)(v110 + 232) = v124;
    *(_QWORD *)(v110 + 240) = *((_QWORD *)v111 + 30);
    *(_BYTE *)(v110 + 248) = v111[248];
    v125 = *((_QWORD *)v111 + 33);
    *(_QWORD *)(v110 + 256) = *((_QWORD *)v111 + 32);
    *(_QWORD *)(v110 + 264) = v125;
    *(_QWORD *)(v110 + 272) = *((_QWORD *)v111 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v24 = v132;
  }
  swift_retain();
  return v24;
}

void sub_23DD7F02C(uint64_t a1)
{
  sub_23DCFB328(a1, qword_256CFEB78, type metadata accessor for BaselineSeparators.Configuration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_23DD7F048(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v4 = a1 + a2[5];
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v6 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  v7 = a1 + a2[6];
  v8 = type metadata accessor for OvernightMetricsChartPoint();
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  if (!v9(v7, 1, v8))
  {
    v10 = sub_23DDC512C();
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v11(v7, v10);
    v12 = v7 + *(int *)(v8 + 20);
    v11(v12, v10);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v11(v12 + *(int *)(v13 + 36), v10);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + a2[7]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = a1 + a2[13];
  v15 = type metadata accessor for BaselineSeparators.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    v17 = sub_23DDC512C();
    v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
    v18(v16, v17);
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v18(v16 + *(int *)(v19 + 36), v17);
    swift_release();
  }
  v20 = a1 + a2[14];
  swift_bridgeObjectRelease();
  v21 = v20 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  if (!v9(v21, 1, v8))
  {
    v22 = sub_23DDC512C();
    v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
    v23(v21, v22);
    v24 = v21 + *(int *)(v8 + 20);
    v23(v24, v22);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v23(v24 + *(int *)(v25 + 36), v22);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[15]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_BYTE *sub_23DD7F424(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  void (*v13)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, int *);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, _QWORD, uint64_t, int *);
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(_OWORD *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  void (*v66)(_OWORD *, _QWORD, uint64_t, uint64_t);
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  int *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, _QWORD, uint64_t, int *);
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  unsigned int (*v125)(char *, uint64_t, int *);
  int *v126;
  _BYTE *v127;
  int *v128;
  _BYTE *v129;
  _BYTE *v130;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_QWORD *)&a1[v6] = *(_QWORD *)&a2[v6];
  v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  v10 = *(int *)(v9 + 20);
  v129 = &v7[v10];
  v11 = &v8[v10];
  v12 = sub_23DDC51E0();
  v13 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v14 = a1;
  swift_bridgeObjectRetain();
  v13(v129, v11, v12);
  *(_QWORD *)&v7[*(int *)(v9 + 24)] = *(_QWORD *)&v8[*(int *)(v9 + 24)];
  v128 = a3;
  v130 = a2;
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v19 = *((_QWORD *)v18 - 1);
  v20 = *(unsigned int (**)(char *, uint64_t, int *))(v19 + 48);
  swift_bridgeObjectRetain();
  v125 = v20;
  if (v20(v17, 1, v18))
  {
    sub_23DD2ED80();
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = sub_23DDC512C();
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v23(v16, v17, v22);
    v24 = v18[5];
    v25 = &v16[v24];
    v26 = &v17[v24];
    v23(&v16[v24], &v17[v24], v22);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v22);
    v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v25[v28[5]] = *(_QWORD *)&v26[v28[5]];
    *(_QWORD *)&v25[v28[6]] = *(_QWORD *)&v26[v28[6]];
    *(_QWORD *)&v25[v28[7]] = *(_QWORD *)&v26[v28[7]];
    v29 = v18[6];
    v30 = &v16[v29];
    v31 = &v17[v29];
    *(_OWORD *)v30 = *(_OWORD *)v31;
    v30[16] = v31[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    v32 = v18[10];
    v33 = &v16[v32];
    v34 = &v17[v32];
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = v18[11];
    v37 = &v16[v36];
    v38 = &v17[v36];
    v39 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = v39;
    v40 = *(void (**)(char *, _QWORD, uint64_t, int *))(v19 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40(v16, 0, 1, v18);
  }
  v41 = v128[7];
  v42 = &v14[v41];
  v43 = &a2[v41];
  v126 = v18;
  v124 = v19;
  if (*(_QWORD *)v43)
  {
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = *((_OWORD *)v43 + 2);
    *((_OWORD *)v42 + 1) = *((_OWORD *)v43 + 1);
    *((_OWORD *)v42 + 2) = v45;
    *((_OWORD *)v42 + 3) = *((_OWORD *)v43 + 3);
    *((_QWORD *)v42 + 8) = *((_QWORD *)v43 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v46 = *((_OWORD *)v43 + 3);
    *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
    *((_OWORD *)v42 + 3) = v46;
    *((_QWORD *)v42 + 8) = *((_QWORD *)v43 + 8);
    v47 = *((_OWORD *)v43 + 1);
    *(_OWORD *)v42 = *(_OWORD *)v43;
    *((_OWORD *)v42 + 1) = v47;
  }
  v48 = v128[9];
  v14[v128[8]] = a2[v128[8]];
  *(_QWORD *)&v14[v48] = *(_QWORD *)&a2[v48];
  v49 = v128[11];
  *(_QWORD *)&v14[v128[10]] = *(_QWORD *)&a2[v128[10]];
  v50 = &v14[v49];
  v51 = &a2[v49];
  v52 = *((_QWORD *)v51 + 1);
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = v52;
  *((_OWORD *)v50 + 1) = *((_OWORD *)v51 + 1);
  v53 = v128[13];
  *(_QWORD *)&v14[v128[12]] = *(_QWORD *)&a2[v128[12]];
  v127 = v14;
  v54 = &v14[v53];
  v55 = &a2[v53];
  v56 = type metadata accessor for BaselineSeparators.Configuration(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v57 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v58(v55, 1, v56))
  {
    sub_23DD7F02C(0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    *v54 = *v55;
    v60 = *(int *)(v56 + 20);
    v61 = (char *)v54 + v60;
    v62 = (char *)v55 + v60;
    v63 = sub_23DDC512C();
    v64 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
    v64(v61, v62, v63);
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v64(&v61[*(int *)(v65 + 36)], &v62[*(int *)(v65 + 36)], v63);
    *(_QWORD *)((char *)v54 + *(int *)(v56 + 24)) = *(_QWORD *)((char *)v55 + *(int *)(v56 + 24));
    v66 = *(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v57 + 56);
    swift_retain();
    v66(v54, 0, 1, v56);
  }
  v67 = v127;
  v68 = v128[14];
  v69 = &v127[v68];
  v70 = &a2[v68];
  *(_QWORD *)&v127[v68] = *(_QWORD *)&v130[v68];
  v71 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v72 = v71[5];
  v73 = &v69[v72];
  v74 = &v70[v72];
  swift_bridgeObjectRetain();
  if (v125(v74, 1, v126))
  {
    sub_23DD2ED80();
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    v76 = sub_23DDC512C();
    v77 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16);
    v77(v73, v74, v76);
    v78 = v126[5];
    v79 = &v73[v78];
    v80 = &v74[v78];
    v77(&v73[v78], &v74[v78], v76);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v77(&v79[*(int *)(v81 + 36)], &v80[*(int *)(v81 + 36)], v76);
    v82 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v79[v82[5]] = *(_QWORD *)&v80[v82[5]];
    *(_QWORD *)&v79[v82[6]] = *(_QWORD *)&v80[v82[6]];
    *(_QWORD *)&v79[v82[7]] = *(_QWORD *)&v80[v82[7]];
    v83 = v126[6];
    v84 = &v73[v83];
    v85 = &v74[v83];
    *(_OWORD *)v84 = *(_OWORD *)v85;
    v84[16] = v85[16];
    v73[v126[7]] = v74[v126[7]];
    v73[v126[8]] = v74[v126[8]];
    v73[v126[9]] = v74[v126[9]];
    v86 = v126[10];
    v87 = &v73[v86];
    v88 = &v74[v86];
    v89 = *((_QWORD *)v88 + 1);
    *(_QWORD *)v87 = *(_QWORD *)v88;
    *((_QWORD *)v87 + 1) = v89;
    v90 = v126[11];
    v91 = &v73[v90];
    v92 = &v74[v90];
    v93 = *((_QWORD *)v92 + 1);
    *(_QWORD *)v91 = *(_QWORD *)v92;
    *((_QWORD *)v91 + 1) = v93;
    v94 = *(void (**)(char *, _QWORD, uint64_t, int *))(v124 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v94(v73, 0, 1, v126);
    v67 = v127;
  }
  *(_OWORD *)&v69[v71[6]] = *(_OWORD *)&v70[v71[6]];
  v95 = v71[7];
  v96 = &v69[v95];
  v97 = &v70[v95];
  v98 = *((_OWORD *)v97 + 1);
  *(_OWORD *)v96 = *(_OWORD *)v97;
  *((_OWORD *)v96 + 1) = v98;
  *((_QWORD *)v96 + 10) = *((_QWORD *)v97 + 10);
  v99 = *((_OWORD *)v97 + 4);
  v100 = *((_OWORD *)v97 + 2);
  *((_OWORD *)v96 + 3) = *((_OWORD *)v97 + 3);
  *((_OWORD *)v96 + 4) = v99;
  *((_OWORD *)v96 + 2) = v100;
  *(_QWORD *)&v69[v71[8]] = *(_QWORD *)&v70[v71[8]];
  *(_QWORD *)&v69[v71[9]] = *(_QWORD *)&v70[v71[9]];
  v101 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v102 = &v69[v101];
  v103 = &v70[v101];
  v104 = *((_QWORD *)v103 + 1);
  *(_QWORD *)v102 = *(_QWORD *)v103;
  *((_QWORD *)v102 + 1) = v104;
  v105 = *((_QWORD *)v103 + 3);
  *((_QWORD *)v102 + 2) = *((_QWORD *)v103 + 2);
  *((_QWORD *)v102 + 3) = v105;
  *((_QWORD *)v102 + 4) = *((_QWORD *)v103 + 4);
  *(_OWORD *)(v102 + 40) = *(_OWORD *)(v103 + 40);
  *(_OWORD *)(v102 + 56) = *(_OWORD *)(v103 + 56);
  *(_OWORD *)(v102 + 72) = *(_OWORD *)(v103 + 72);
  *(_OWORD *)(v102 + 88) = *(_OWORD *)(v103 + 88);
  *(_OWORD *)(v102 + 104) = *(_OWORD *)(v103 + 104);
  v106 = v128[15];
  v107 = &v67[v106];
  v108 = &v130[v106];
  v109 = *(_QWORD *)&v130[v106];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v109)
  {
    v110 = *((_QWORD *)v108 + 1);
    v111 = *((_QWORD *)v108 + 2);
    *(_QWORD *)v107 = v109;
    *((_QWORD *)v107 + 1) = v110;
    *((_QWORD *)v107 + 2) = v111;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v107 = *(_OWORD *)v108;
    *((_QWORD *)v107 + 2) = *((_QWORD *)v108 + 2);
  }
  v107[24] = v108[24];
  v107[32] = v108[32];
  v112 = *((_QWORD *)v108 + 6);
  *((_QWORD *)v107 + 5) = *((_QWORD *)v108 + 5);
  *((_QWORD *)v107 + 6) = v112;
  v107[56] = v108[56];
  v113 = *((_QWORD *)v108 + 9);
  *((_QWORD *)v107 + 8) = *((_QWORD *)v108 + 8);
  *((_QWORD *)v107 + 9) = v113;
  *((_QWORD *)v107 + 10) = *((_QWORD *)v108 + 10);
  v114 = *(_OWORD *)(v108 + 88);
  *(_OWORD *)(v107 + 104) = *(_OWORD *)(v108 + 104);
  *(_OWORD *)(v107 + 88) = v114;
  v115 = *(_OWORD *)(v108 + 120);
  v116 = *(_OWORD *)(v108 + 136);
  *(_OWORD *)(v107 + 152) = *(_OWORD *)(v108 + 152);
  *(_OWORD *)(v107 + 136) = v116;
  *(_OWORD *)(v107 + 120) = v115;
  v117 = *((_QWORD *)v108 + 22);
  *((_QWORD *)v107 + 21) = *((_QWORD *)v108 + 21);
  *((_QWORD *)v107 + 22) = v117;
  v119 = *((_QWORD *)v108 + 23);
  v118 = *((_QWORD *)v108 + 24);
  v107[200] = v108[200];
  *((_QWORD *)v107 + 23) = v119;
  *((_QWORD *)v107 + 24) = v118;
  v107[201] = v108[201];
  v120 = *((_QWORD *)v108 + 27);
  *((_QWORD *)v107 + 26) = *((_QWORD *)v108 + 26);
  *((_QWORD *)v107 + 27) = v120;
  v121 = *((_QWORD *)v108 + 29);
  *((_QWORD *)v107 + 28) = *((_QWORD *)v108 + 28);
  *((_QWORD *)v107 + 29) = v121;
  *((_QWORD *)v107 + 30) = *((_QWORD *)v108 + 30);
  v107[248] = v108[248];
  v122 = *((_QWORD *)v108 + 33);
  *((_QWORD *)v107 + 32) = *((_QWORD *)v108 + 32);
  *((_QWORD *)v107 + 33) = v122;
  *((_QWORD *)v107 + 34) = *((_QWORD *)v108 + 34);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v127;
}

_BYTE *sub_23DD7FC1C(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v3;
  _BYTE *v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t (*v18)(char *, uint64_t, int *);
  int v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  int *v24;
  char *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void (*v38)(char *, _QWORD, uint64_t, int *);
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _BYTE *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  int *v51;
  char *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(_QWORD *, uint64_t, uint64_t);
  int v79;
  int v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  void (*v89)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  int *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  int v98;
  int v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  void (*v117)(char *, _QWORD, uint64_t, int *);
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  _BYTE *v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  _BYTE *v130;
  __int128 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  __int128 v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v164;
  int *v165;
  int *v166;
  int *v167;
  int *v168;
  uint64_t (*v169)(char *, uint64_t, int *);
  _BYTE *v170;
  _BYTE *v171;

  v3 = a3;
  v4 = a2;
  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_QWORD *)&a1[v6] = *(_QWORD *)&a2[v6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  v10 = *(int *)(v9 + 20);
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_23DDC51E0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(_QWORD *)&v7[*(int *)(v9 + 24)] = *(_QWORD *)&v8[*(int *)(v9 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = v3[6];
  v170 = v4;
  v171 = a1;
  v15 = &a1[v14];
  v16 = &v4[v14];
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v164 = *((_QWORD *)v17 - 1);
  v18 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v164 + 48);
  LODWORD(v4) = v18(v15, 1, v17);
  v169 = v18;
  v19 = v18(v16, 1, v17);
  if ((_DWORD)v4)
  {
    if (!v19)
    {
      v20 = sub_23DDC512C();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      v21(v15, v16, v20);
      v22 = v17[5];
      v23 = &v15[v22];
      v24 = v3;
      v25 = &v16[v22];
      v21(&v15[v22], &v16[v22], v20);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v21(&v23[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v20);
      v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v23[v27[5]] = *(_QWORD *)&v25[v27[5]];
      *(_QWORD *)&v23[v27[6]] = *(_QWORD *)&v25[v27[6]];
      *(_QWORD *)&v23[v27[7]] = *(_QWORD *)&v25[v27[7]];
      v28 = v17[6];
      v29 = &v15[v28];
      v30 = &v16[v28];
      v31 = v30[16];
      *(_OWORD *)v29 = *(_OWORD *)v30;
      v29[16] = v31;
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      v32 = v17[10];
      v33 = &v15[v32];
      v34 = &v16[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
      v35 = v17[11];
      v36 = &v15[v35];
      v37 = &v16[v35];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
      v38 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v164 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v3 = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_23DD2ED80();
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_7;
  }
  v47 = sub_23DDC512C();
  v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 24);
  v48(v15, v16, v47);
  v49 = v17[5];
  v50 = &v15[v49];
  v51 = v3;
  v52 = &v16[v49];
  v48(&v15[v49], &v16[v49], v47);
  sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v48(&v50[*(int *)(v53 + 36)], &v52[*(int *)(v53 + 36)], v47);
  v54 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v50[v54[5]] = *(_QWORD *)&v52[v54[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v50[v54[6]] = *(_QWORD *)&v52[v54[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v55 = v54[7];
  v56 = *(_QWORD *)&v52[v55];
  v3 = v51;
  *(_QWORD *)&v50[v55] = v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v57 = v17[6];
  v58 = &v15[v57];
  v59 = &v16[v57];
  v60 = *(_OWORD *)v59;
  v58[16] = v59[16];
  *(_OWORD *)v58 = v60;
  v15[v17[7]] = v16[v17[7]];
  v15[v17[8]] = v16[v17[8]];
  v15[v17[9]] = v16[v17[9]];
  v61 = v17[10];
  v62 = &v15[v61];
  v63 = &v16[v61];
  *(_QWORD *)v62 = *(_QWORD *)v63;
  *((_QWORD *)v62 + 1) = *((_QWORD *)v63 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v64 = v17[11];
  v65 = &v15[v64];
  v66 = &v16[v64];
  *(_QWORD *)v65 = *(_QWORD *)v66;
  *((_QWORD *)v65 + 1) = *((_QWORD *)v66 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  v40 = v3[7];
  v41 = &a1[v40];
  v42 = &v170[v40];
  v43 = *(_QWORD *)&v170[v40];
  if (*(_QWORD *)&a1[v40])
  {
    if (v43)
    {
      *v41 = v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v41[1] = *((_QWORD *)v42 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v41[2] = *((_QWORD *)v42 + 2);
      v41[3] = *((_QWORD *)v42 + 3);
      v41[4] = *((_QWORD *)v42 + 4);
      v41[5] = *((_QWORD *)v42 + 5);
      v41[6] = *((_QWORD *)v42 + 6);
      v41[7] = *((_QWORD *)v42 + 7);
      v41[8] = *((_QWORD *)v42 + 8);
    }
    else
    {
      sub_23DCF5648((uint64_t)&a1[v40]);
      *(_OWORD *)v41 = *(_OWORD *)v42;
      v45 = *((_OWORD *)v42 + 2);
      v44 = *((_OWORD *)v42 + 3);
      v46 = *((_OWORD *)v42 + 1);
      v41[8] = *((_QWORD *)v42 + 8);
      *((_OWORD *)v41 + 2) = v45;
      *((_OWORD *)v41 + 3) = v44;
      *((_OWORD *)v41 + 1) = v46;
    }
  }
  else if (v43)
  {
    *v41 = v43;
    v41[1] = *((_QWORD *)v42 + 1);
    v41[2] = *((_QWORD *)v42 + 2);
    v41[3] = *((_QWORD *)v42 + 3);
    v41[4] = *((_QWORD *)v42 + 4);
    v41[5] = *((_QWORD *)v42 + 5);
    v41[6] = *((_QWORD *)v42 + 6);
    v41[7] = *((_QWORD *)v42 + 7);
    v41[8] = *((_QWORD *)v42 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v41 = *(_OWORD *)v42;
    v67 = *((_OWORD *)v42 + 1);
    v68 = *((_OWORD *)v42 + 2);
    v69 = *((_OWORD *)v42 + 3);
    v41[8] = *((_QWORD *)v42 + 8);
    *((_OWORD *)v41 + 2) = v68;
    *((_OWORD *)v41 + 3) = v69;
    *((_OWORD *)v41 + 1) = v67;
  }
  a1[v3[8]] = v170[v3[8]];
  *(_QWORD *)&a1[v3[9]] = *(_QWORD *)&v170[v3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[v3[10]] = *(_QWORD *)&v170[v3[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v70 = v3[11];
  v71 = &a1[v70];
  v72 = &v170[v70];
  *(_QWORD *)&a1[v70] = *(_QWORD *)&v170[v70];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v71[1] = v72[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v71[2] = v72[2];
  v71[3] = v72[3];
  *(_QWORD *)&a1[v3[12]] = *(_QWORD *)&v170[v3[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v73 = v3[13];
  v74 = &a1[v73];
  v75 = &v170[v73];
  v76 = type metadata accessor for BaselineSeparators.Configuration(0);
  v77 = *(_QWORD *)(v76 - 8);
  v78 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v77 + 48);
  v79 = v78(v74, 1, v76);
  v80 = v78(v75, 1, v76);
  if (v79)
  {
    if (!v80)
    {
      *(_OWORD *)v74 = *(_OWORD *)v75;
      v81 = *(int *)(v76 + 20);
      v82 = (char *)v74 + v81;
      v165 = v3;
      v83 = (char *)v75 + v81;
      v84 = sub_23DDC512C();
      v85 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16);
      v85(v82, v83, v84);
      sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
      v87 = *(int *)(v86 + 36);
      v88 = &v83[v87];
      v3 = v165;
      v85(&v82[v87], v88, v84);
      *(_QWORD *)((char *)v74 + *(int *)(v76 + 24)) = *(_QWORD *)((char *)v75 + *(int *)(v76 + 24));
      v89 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v77 + 56);
      swift_retain();
      v89(v74, 0, 1, v76);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v80)
  {
    sub_23DCF59A8((uint64_t)v74, type metadata accessor for BaselineSeparators.Configuration);
LABEL_20:
    sub_23DD7F02C(0);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_21;
  }
  *v74 = *v75;
  v74[1] = v75[1];
  v134 = *(int *)(v76 + 20);
  v135 = (char *)v74 + v134;
  v167 = v3;
  v136 = (char *)v75 + v134;
  v137 = sub_23DDC512C();
  v138 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 24);
  v138(v135, v136, v137);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v140 = *(int *)(v139 + 36);
  v141 = &v136[v140];
  v3 = v167;
  v138(&v135[v140], v141, v137);
  *(_QWORD *)((char *)v74 + *(int *)(v76 + 24)) = *(_QWORD *)((char *)v75 + *(int *)(v76 + 24));
  swift_retain();
  swift_release();
LABEL_21:
  v91 = v3[14];
  v92 = &a1[v91];
  v93 = &v170[v91];
  *(_QWORD *)&a1[v91] = *(_QWORD *)&v170[v91];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v94 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v95 = v94[5];
  v96 = &v92[v95];
  v97 = &v93[v95];
  v98 = v169(&v92[v95], 1, v17);
  v99 = v169(v97, 1, v17);
  if (v98)
  {
    if (!v99)
    {
      v100 = sub_23DDC512C();
      v101 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 16);
      v101(v96, v97, v100);
      v102 = v17[5];
      v166 = v3;
      v103 = &v96[v102];
      v104 = &v97[v102];
      v101(&v96[v102], &v97[v102], v100);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v101(&v103[*(int *)(v105 + 36)], &v104[*(int *)(v105 + 36)], v100);
      v106 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v103[v106[5]] = *(_QWORD *)&v104[v106[5]];
      *(_QWORD *)&v103[v106[6]] = *(_QWORD *)&v104[v106[6]];
      *(_QWORD *)&v103[v106[7]] = *(_QWORD *)&v104[v106[7]];
      v107 = v17[6];
      v108 = &v96[v107];
      v109 = &v97[v107];
      v110 = v109[16];
      *(_OWORD *)v108 = *(_OWORD *)v109;
      v108[16] = v110;
      v96[v17[7]] = v97[v17[7]];
      v96[v17[8]] = v97[v17[8]];
      v96[v17[9]] = v97[v17[9]];
      v111 = v17[10];
      v112 = &v96[v111];
      v113 = &v97[v111];
      *(_QWORD *)v112 = *(_QWORD *)v113;
      *((_QWORD *)v112 + 1) = *((_QWORD *)v113 + 1);
      v114 = v17[11];
      v115 = &v96[v114];
      v116 = &v97[v114];
      *(_QWORD *)v115 = *(_QWORD *)v116;
      *((_QWORD *)v115 + 1) = *((_QWORD *)v116 + 1);
      v117 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v164 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v3 = v166;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v117(v96, 0, 1, v17);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v99)
  {
    sub_23DCF59A8((uint64_t)v96, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_26:
    sub_23DD2ED80();
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
    goto LABEL_27;
  }
  v142 = sub_23DDC512C();
  v143 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 24);
  v143(v96, v97, v142);
  v144 = v17[5];
  v168 = v3;
  v145 = &v96[v144];
  v146 = &v97[v144];
  v143(&v96[v144], &v97[v144], v142);
  sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v143(&v145[*(int *)(v147 + 36)], &v146[*(int *)(v147 + 36)], v142);
  v148 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v145[v148[5]] = *(_QWORD *)&v146[v148[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v145[v148[6]] = *(_QWORD *)&v146[v148[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v145[v148[7]] = *(_QWORD *)&v146[v148[7]];
  v3 = v168;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v149 = v17[6];
  v150 = &v96[v149];
  v151 = &v97[v149];
  v152 = *(_OWORD *)v151;
  v150[16] = v151[16];
  *(_OWORD *)v150 = v152;
  v96[v17[7]] = v97[v17[7]];
  v96[v17[8]] = v97[v17[8]];
  v96[v17[9]] = v97[v17[9]];
  v153 = v17[10];
  v154 = &v96[v153];
  v155 = &v97[v153];
  *(_QWORD *)v154 = *(_QWORD *)v155;
  *((_QWORD *)v154 + 1) = *((_QWORD *)v155 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v156 = v17[11];
  v157 = &v96[v156];
  v158 = &v97[v156];
  *(_QWORD *)v157 = *(_QWORD *)v158;
  *((_QWORD *)v157 + 1) = *((_QWORD *)v158 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_27:
  v119 = v94[6];
  v120 = &v92[v119];
  v121 = &v93[v119];
  *v120 = *v121;
  v120[1] = v121[1];
  v122 = v94[7];
  v123 = &v92[v122];
  v124 = &v93[v122];
  *(_QWORD *)v123 = *(_QWORD *)v124;
  v125 = *((_QWORD *)v124 + 1);
  v123[16] = v124[16];
  *((_QWORD *)v123 + 1) = v125;
  *((_QWORD *)v123 + 3) = *((_QWORD *)v124 + 3);
  *((_QWORD *)v123 + 4) = *((_QWORD *)v124 + 4);
  *((_QWORD *)v123 + 5) = *((_QWORD *)v124 + 5);
  *((_QWORD *)v123 + 6) = *((_QWORD *)v124 + 6);
  *((_QWORD *)v123 + 7) = *((_QWORD *)v124 + 7);
  *((_QWORD *)v123 + 8) = *((_QWORD *)v124 + 8);
  *((_QWORD *)v123 + 9) = *((_QWORD *)v124 + 9);
  *((_QWORD *)v123 + 10) = *((_QWORD *)v124 + 10);
  *(_QWORD *)&v92[v94[8]] = *(_QWORD *)&v93[v94[8]];
  *(_QWORD *)&v92[v94[9]] = *(_QWORD *)&v93[v94[9]];
  v126 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v127 = &v92[v126];
  v128 = &v93[v126];
  *v127 = *v128;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v127[1] = v128[1];
  v127[2] = v128[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v127[3] = v128[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v127[4] = v128[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v127[5] = v128[5];
  v127[6] = v128[6];
  v127[7] = v128[7];
  v127[8] = v128[8];
  v127[9] = v128[9];
  v127[10] = v128[10];
  v127[11] = v128[11];
  v127[12] = v128[12];
  v127[13] = v128[13];
  v127[14] = v128[14];
  v129 = v3[15];
  v130 = &v171[v129];
  v131 = (__int128 *)&v170[v129];
  v132 = *(_QWORD *)&v170[v129];
  if (*(_QWORD *)&v171[v129])
  {
    if (v132)
    {
      *(_QWORD *)v130 = v132;
      swift_retain();
      swift_release();
      *((_QWORD *)v130 + 1) = *((_QWORD *)v131 + 1);
      swift_retain();
      swift_release();
      *((_QWORD *)v130 + 2) = *((_QWORD *)v131 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_23DCF9EB8((uint64_t)&v171[v129]);
      v133 = *((_QWORD *)v131 + 2);
      *(_OWORD *)v130 = *v131;
      *((_QWORD *)v130 + 2) = v133;
    }
  }
  else if (v132)
  {
    *(_QWORD *)v130 = v132;
    *((_QWORD *)v130 + 1) = *((_QWORD *)v131 + 1);
    *((_QWORD *)v130 + 2) = *((_QWORD *)v131 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v159 = *v131;
    *((_QWORD *)v130 + 2) = *((_QWORD *)v131 + 2);
    *(_OWORD *)v130 = v159;
  }
  v130[24] = *((_BYTE *)v131 + 24);
  v130[32] = *((_BYTE *)v131 + 32);
  *((_QWORD *)v130 + 5) = *((_QWORD *)v131 + 5);
  swift_retain();
  swift_release();
  v160 = *((_QWORD *)v131 + 6);
  v130[56] = *((_BYTE *)v131 + 56);
  *((_QWORD *)v130 + 6) = v160;
  *((_QWORD *)v130 + 8) = *((_QWORD *)v131 + 8);
  *((_QWORD *)v130 + 9) = *((_QWORD *)v131 + 9);
  swift_retain();
  swift_release();
  *((_QWORD *)v130 + 10) = *((_QWORD *)v131 + 10);
  swift_retain();
  swift_release();
  *((_QWORD *)v130 + 11) = *((_QWORD *)v131 + 11);
  v161 = *((_QWORD *)v131 + 12);
  v130[104] = *((_BYTE *)v131 + 104);
  *((_QWORD *)v130 + 12) = v161;
  *((_QWORD *)v130 + 14) = *((_QWORD *)v131 + 14);
  *((_QWORD *)v130 + 15) = *((_QWORD *)v131 + 15);
  *((_QWORD *)v130 + 16) = *((_QWORD *)v131 + 16);
  *((_QWORD *)v130 + 17) = *((_QWORD *)v131 + 17);
  *((_QWORD *)v130 + 18) = *((_QWORD *)v131 + 18);
  *((_QWORD *)v130 + 19) = *((_QWORD *)v131 + 19);
  *((_QWORD *)v130 + 20) = *((_QWORD *)v131 + 20);
  *((_QWORD *)v130 + 21) = *((_QWORD *)v131 + 21);
  *((_QWORD *)v130 + 22) = *((_QWORD *)v131 + 22);
  swift_retain();
  swift_release();
  *((_QWORD *)v130 + 23) = *((_QWORD *)v131 + 23);
  swift_retain();
  swift_release();
  v162 = *((_QWORD *)v131 + 24);
  v130[200] = *((_BYTE *)v131 + 200);
  *((_QWORD *)v130 + 24) = v162;
  v130[201] = *((_BYTE *)v131 + 201);
  *((_QWORD *)v130 + 26) = *((_QWORD *)v131 + 26);
  swift_retain();
  swift_release();
  *((_QWORD *)v130 + 27) = *((_QWORD *)v131 + 27);
  swift_retain();
  swift_release();
  *((_QWORD *)v130 + 28) = *((_QWORD *)v131 + 28);
  swift_retain();
  swift_release();
  *((_QWORD *)v130 + 29) = *((_QWORD *)v131 + 29);
  swift_retain();
  swift_release();
  *((_QWORD *)v130 + 30) = *((_QWORD *)v131 + 30);
  swift_retain();
  swift_release();
  v130[248] = *((_BYTE *)v131 + 248);
  *((_QWORD *)v130 + 32) = *((_QWORD *)v131 + 32);
  swift_retain();
  swift_release();
  *((_QWORD *)v130 + 33) = *((_QWORD *)v131 + 33);
  swift_retain();
  swift_release();
  *((_QWORD *)v130 + 34) = *((_QWORD *)v131 + 34);
  return v171;
}

_BYTE *sub_23DD80B38(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  unsigned int (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  unsigned int (*v24)(_QWORD, _QWORD, _QWORD);
  char *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  _BYTE *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  int *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  unsigned int (*v99)(_QWORD, _QWORD, _QWORD);
  _BYTE *v100;
  int *v101;
  _BYTE *v102;
  uint64_t v103;
  int *v104;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_QWORD *)&a1[v6] = *(_QWORD *)&a2[v6];
  v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  v10 = *(int *)(v9 + 20);
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_23DDC51E0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  *(_QWORD *)&v7[*(int *)(v9 + 24)] = *(_QWORD *)&v8[*(int *)(v9 + 24)];
  v14 = v3[6];
  v15 = &v5[v14];
  v16 = &v4[v14];
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(*((_QWORD *)v17 - 1) + 48);
  v103 = *((_QWORD *)v17 - 1);
  v104 = v3;
  if (v18(v16, 1, v17))
  {
    sub_23DD2ED80();
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = sub_23DDC512C();
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
    v21(v15, v16, v20);
    v22 = v17[5];
    v23 = &v15[v22];
    v24 = v18;
    v25 = &v16[v22];
    v21(&v15[v22], &v16[v22], v20);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v21(&v23[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v20);
    v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v23[v27[5]] = *(_QWORD *)&v25[v27[5]];
    *(_QWORD *)&v23[v27[6]] = *(_QWORD *)&v25[v27[6]];
    v28 = v27[7];
    v29 = *(_QWORD *)&v25[v28];
    v18 = v24;
    *(_QWORD *)&v23[v28] = v29;
    v3 = v104;
    v30 = v17[6];
    v31 = &v15[v30];
    v32 = &v16[v30];
    *(_OWORD *)v31 = *(_OWORD *)v32;
    v31[16] = v32[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
    *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v103 + 56))(v15, 0, 1, v17);
  }
  v33 = v3[7];
  v34 = v3[8];
  v35 = &v5[v33];
  v36 = &v4[v33];
  *((_QWORD *)v35 + 8) = *((_QWORD *)v36 + 8);
  v37 = *((_OWORD *)v36 + 3);
  *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
  *((_OWORD *)v35 + 3) = v37;
  v38 = *((_OWORD *)v36 + 1);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *((_OWORD *)v35 + 1) = v38;
  v5[v34] = v4[v34];
  v39 = v3[10];
  *(_QWORD *)&v5[v3[9]] = *(_QWORD *)&v4[v3[9]];
  *(_QWORD *)&v5[v39] = *(_QWORD *)&v4[v39];
  v40 = v3[11];
  v41 = v3[12];
  v42 = &v5[v40];
  v43 = (__int128 *)&v4[v40];
  v44 = *v43;
  v45 = v43[1];
  v46 = *(_QWORD *)&v4[v41];
  *v42 = v44;
  v42[1] = v45;
  *(_QWORD *)&v5[v41] = v46;
  v47 = v3[13];
  v48 = &v5[v47];
  v49 = &v4[v47];
  v50 = type metadata accessor for BaselineSeparators.Configuration(0);
  v51 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    sub_23DD7F02C(0);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    *v48 = *v49;
    v53 = *(int *)(v50 + 20);
    v54 = (char *)v48 + v53;
    v99 = v18;
    v55 = (char *)v49 + v53;
    v101 = v17;
    v56 = v4;
    v57 = sub_23DDC512C();
    v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32);
    v58(v54, v55, v57);
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v60 = *(int *)(v59 + 36);
    v61 = &v54[v60];
    v3 = v104;
    v62 = &v55[v60];
    v63 = v57;
    v4 = v56;
    v18 = v99;
    v17 = v101;
    v58(v61, v62, v63);
    *(_QWORD *)((char *)v48 + *(int *)(v50 + 24)) = *(_QWORD *)((char *)v49 + *(int *)(v50 + 24));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  }
  v64 = v3[14];
  v65 = &v5[v64];
  v66 = &v4[v64];
  *(_QWORD *)&v5[v64] = *(_QWORD *)&v4[v64];
  v67 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v68 = v67[5];
  v69 = &v65[v68];
  v70 = &v66[v68];
  if (v18(&v66[v68], 1, v17))
  {
    sub_23DD2ED80();
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    v72 = sub_23DDC512C();
    v73 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 32);
    v73(v69, v70, v72);
    v100 = v5;
    v102 = v4;
    v74 = v73;
    v75 = v17[5];
    v76 = &v69[v75];
    v77 = &v70[v75];
    v74(&v69[v75], &v70[v75], v72);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v79 = v72;
    v3 = v104;
    v74(&v76[*(int *)(v78 + 36)], &v77[*(int *)(v78 + 36)], v79);
    v5 = v100;
    v80 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v76[v80[5]] = *(_QWORD *)&v77[v80[5]];
    *(_QWORD *)&v76[v80[6]] = *(_QWORD *)&v77[v80[6]];
    v81 = v80[7];
    v82 = *(_QWORD *)&v77[v81];
    v4 = v102;
    *(_QWORD *)&v76[v81] = v82;
    v83 = v17[6];
    v84 = &v69[v83];
    v85 = &v70[v83];
    *(_OWORD *)v84 = *(_OWORD *)v85;
    v84[16] = v85[16];
    v69[v17[7]] = v70[v17[7]];
    v69[v17[8]] = v70[v17[8]];
    v69[v17[9]] = v70[v17[9]];
    *(_OWORD *)&v69[v17[10]] = *(_OWORD *)&v70[v17[10]];
    *(_OWORD *)&v69[v17[11]] = *(_OWORD *)&v70[v17[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v103 + 56))(v69, 0, 1, v17);
  }
  *(_OWORD *)&v65[v67[6]] = *(_OWORD *)&v66[v67[6]];
  v86 = v67[7];
  v87 = &v65[v86];
  v88 = &v66[v86];
  v89 = *((_OWORD *)v88 + 1);
  *(_OWORD *)v87 = *(_OWORD *)v88;
  *((_OWORD *)v87 + 1) = v89;
  *((_QWORD *)v87 + 10) = *((_QWORD *)v88 + 10);
  v90 = *((_OWORD *)v88 + 4);
  v91 = *((_OWORD *)v88 + 2);
  *((_OWORD *)v87 + 3) = *((_OWORD *)v88 + 3);
  *((_OWORD *)v87 + 4) = v90;
  *((_OWORD *)v87 + 2) = v91;
  *(_QWORD *)&v65[v67[8]] = *(_QWORD *)&v66[v67[8]];
  *(_QWORD *)&v65[v67[9]] = *(_QWORD *)&v66[v67[9]];
  v92 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v93 = &v65[v92];
  v94 = &v66[v92];
  v95 = *((_OWORD *)v94 + 5);
  *((_OWORD *)v93 + 4) = *((_OWORD *)v94 + 4);
  *((_OWORD *)v93 + 5) = v95;
  *((_OWORD *)v93 + 6) = *((_OWORD *)v94 + 6);
  *((_QWORD *)v93 + 14) = *((_QWORD *)v94 + 14);
  v96 = *((_OWORD *)v94 + 1);
  *(_OWORD *)v93 = *(_OWORD *)v94;
  *((_OWORD *)v93 + 1) = v96;
  v97 = *((_OWORD *)v94 + 3);
  *((_OWORD *)v93 + 2) = *((_OWORD *)v94 + 2);
  *((_OWORD *)v93 + 3) = v97;
  memcpy(&v5[v3[15]], &v4[v3[15]], 0x118uLL);
  return v5;
}

_BYTE *sub_23DD810C8(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t (*v18)(char *, uint64_t, int *);
  int v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  _BYTE *v24;
  int *v25;
  char *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_OWORD *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  int *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  int *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  int *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  __int128 v97;
  __int128 v98;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  char *v103;
  _BYTE *v104;
  int *v105;
  char *v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  int *v126;
  char *v127;
  int *v128;
  uint64_t v129;
  void (*v130)(char *, char *, uint64_t);
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  int *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  int *v158;
  int *v159;
  int *v160;
  uint64_t v161;
  _BYTE *v162;
  _BYTE *v163;
  _BYTE *v164;
  _BYTE *v165;
  uint64_t (*v166)(char *, uint64_t, int *);
  _BYTE *v167;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_QWORD *)&a1[v6] = *(_QWORD *)&a2[v6];
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  v10 = *(int *)(v9 + 20);
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_23DDC51E0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  *(_QWORD *)&v7[*(int *)(v9 + 24)] = *(_QWORD *)&v8[*(int *)(v9 + 24)];
  swift_bridgeObjectRelease();
  v14 = v3[6];
  v15 = &v5[v14];
  v167 = v4;
  v16 = &v4[v14];
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v161 = *((_QWORD *)v17 - 1);
  v18 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v161 + 48);
  LODWORD(v4) = v18(v15, 1, v17);
  v166 = v18;
  v19 = v18(v16, 1, v17);
  if ((_DWORD)v4)
  {
    if (!v19)
    {
      v20 = sub_23DDC512C();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
      v21(v15, v16, v20);
      v22 = v17[5];
      v23 = &v15[v22];
      v24 = v5;
      v25 = v17;
      v26 = &v16[v22];
      v21(&v15[v22], &v16[v22], v20);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v21(&v23[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v20);
      v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v23[v28[5]] = *(_QWORD *)&v26[v28[5]];
      *(_QWORD *)&v23[v28[6]] = *(_QWORD *)&v26[v28[6]];
      v29 = v28[7];
      v30 = *(_QWORD *)&v26[v29];
      v17 = v25;
      v5 = v24;
      *(_QWORD *)&v23[v29] = v30;
      v31 = v17[6];
      v32 = &v15[v31];
      v33 = &v16[v31];
      *(_OWORD *)v32 = *(_OWORD *)v33;
      v32[16] = v33[16];
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
      *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v161 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_23DD2ED80();
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  v100 = sub_23DDC512C();
  v101 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 40);
  v101(v15, v16, v100);
  v102 = v17[5];
  v103 = &v15[v102];
  v104 = v5;
  v105 = v17;
  v106 = &v16[v102];
  v101(&v15[v102], &v16[v102], v100);
  sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v101(&v103[*(int *)(v107 + 36)], &v106[*(int *)(v107 + 36)], v100);
  v108 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v103[v108[5]] = *(_QWORD *)&v106[v108[5]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v103[v108[6]] = *(_QWORD *)&v106[v108[6]];
  swift_bridgeObjectRelease();
  v109 = v108[7];
  v110 = *(_QWORD *)&v106[v109];
  v17 = v105;
  v5 = v104;
  *(_QWORD *)&v103[v109] = v110;
  swift_bridgeObjectRelease();
  v111 = v17[6];
  v112 = &v15[v111];
  v113 = &v16[v111];
  *(_OWORD *)v112 = *(_OWORD *)v113;
  v112[16] = v113[16];
  v15[v17[7]] = v16[v17[7]];
  v15[v17[8]] = v16[v17[8]];
  v15[v17[9]] = v16[v17[9]];
  v114 = v17[10];
  v115 = &v15[v114];
  v116 = (uint64_t *)&v16[v114];
  v118 = *v116;
  v117 = v116[1];
  *(_QWORD *)v115 = v118;
  *((_QWORD *)v115 + 1) = v117;
  swift_bridgeObjectRelease();
  v119 = v17[11];
  v120 = &v15[v119];
  v121 = (uint64_t *)&v16[v119];
  v123 = *v121;
  v122 = v121[1];
  *(_QWORD *)v120 = v123;
  *((_QWORD *)v120 + 1) = v122;
  swift_bridgeObjectRelease();
LABEL_7:
  v35 = v3[7];
  v36 = (uint64_t)&v5[v35];
  v37 = &v167[v35];
  if (*(_QWORD *)&v5[v35])
  {
    if (*(_QWORD *)v37)
    {
      *(_QWORD *)v36 = *(_QWORD *)v37;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v36 + 8) = *((_QWORD *)v37 + 1);
      swift_bridgeObjectRelease();
      v38 = *((_OWORD *)v37 + 2);
      *(_OWORD *)(v36 + 16) = *((_OWORD *)v37 + 1);
      *(_OWORD *)(v36 + 32) = v38;
      *(_OWORD *)(v36 + 48) = *((_OWORD *)v37 + 3);
      *(_QWORD *)(v36 + 64) = *((_QWORD *)v37 + 8);
      goto LABEL_12;
    }
    sub_23DCF5648(v36);
  }
  v39 = *((_OWORD *)v37 + 3);
  *(_OWORD *)(v36 + 32) = *((_OWORD *)v37 + 2);
  *(_OWORD *)(v36 + 48) = v39;
  *(_QWORD *)(v36 + 64) = *((_QWORD *)v37 + 8);
  v40 = *((_OWORD *)v37 + 1);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_OWORD *)(v36 + 16) = v40;
LABEL_12:
  v41 = v3[9];
  v5[v3[8]] = v167[v3[8]];
  *(_QWORD *)&v5[v41] = *(_QWORD *)&v167[v41];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v5[v3[10]] = *(_QWORD *)&v167[v3[10]];
  swift_bridgeObjectRelease();
  v42 = v3[11];
  v43 = &v5[v42];
  v44 = &v167[v42];
  *(_QWORD *)&v5[v42] = *(_QWORD *)&v167[v42];
  swift_bridgeObjectRelease();
  *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
  swift_bridgeObjectRelease();
  *((_OWORD *)v43 + 1) = *((_OWORD *)v44 + 1);
  *(_QWORD *)&v5[v3[12]] = *(_QWORD *)&v167[v3[12]];
  swift_bridgeObjectRelease();
  v45 = v3[13];
  v46 = &v5[v45];
  v47 = &v167[v45];
  v48 = type metadata accessor for BaselineSeparators.Configuration(0);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      *v46 = *v47;
      v53 = *(int *)(v48 + 20);
      v54 = (char *)v46 + v53;
      v162 = v5;
      v55 = v17;
      v56 = (char *)v47 + v53;
      v158 = v3;
      v57 = sub_23DDC512C();
      v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32);
      v58(v54, v56, v57);
      sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
      v60 = *(int *)(v59 + 36);
      v61 = &v56[v60];
      v17 = v55;
      v5 = v162;
      v62 = v57;
      v3 = v158;
      v58(&v54[v60], v61, v62);
      *(_QWORD *)((char *)v46 + *(int *)(v48 + 24)) = *(_QWORD *)((char *)v47 + *(int *)(v48 + 24));
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v52)
  {
    sub_23DCF59A8((uint64_t)v46, type metadata accessor for BaselineSeparators.Configuration);
LABEL_17:
    sub_23DD7F02C(0);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_18;
  }
  *v46 = *v47;
  v124 = *(int *)(v48 + 20);
  v125 = (char *)v46 + v124;
  v164 = v5;
  v126 = v17;
  v127 = (char *)v47 + v124;
  v128 = v3;
  v129 = sub_23DDC512C();
  v130 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 40);
  v130(v125, v127, v129);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v132 = *(int *)(v131 + 36);
  v133 = &v127[v132];
  v17 = v126;
  v5 = v164;
  v134 = v129;
  v3 = v128;
  v130(&v125[v132], v133, v134);
  *(_QWORD *)((char *)v46 + *(int *)(v48 + 24)) = *(_QWORD *)((char *)v47 + *(int *)(v48 + 24));
  swift_release();
LABEL_18:
  v64 = v3[14];
  v65 = &v5[v64];
  v66 = &v167[v64];
  *(_QWORD *)&v5[v64] = *(_QWORD *)&v167[v64];
  swift_bridgeObjectRelease();
  v67 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v68 = v67[5];
  v69 = &v65[v68];
  v70 = &v66[v68];
  v71 = v166(&v65[v68], 1, v17);
  v72 = v166(v70, 1, v17);
  if (v71)
  {
    if (!v72)
    {
      v73 = sub_23DDC512C();
      v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32);
      v74(v69, v70, v73);
      v75 = v17[5];
      v163 = v5;
      v76 = v17;
      v77 = &v69[v75];
      v159 = v3;
      v78 = &v70[v75];
      v74(&v69[v75], &v70[v75], v73);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v74(&v77[*(int *)(v79 + 36)], &v78[*(int *)(v79 + 36)], v73);
      v80 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v77[v80[5]] = *(_QWORD *)&v78[v80[5]];
      *(_QWORD *)&v77[v80[6]] = *(_QWORD *)&v78[v80[6]];
      v81 = v80[7];
      v82 = *(_QWORD *)&v78[v81];
      v3 = v159;
      *(_QWORD *)&v77[v81] = v82;
      v83 = v76[6];
      v84 = &v69[v83];
      v85 = &v70[v83];
      *(_OWORD *)v84 = *(_OWORD *)v85;
      v84[16] = v85[16];
      v69[v76[7]] = v70[v76[7]];
      v69[v76[8]] = v70[v76[8]];
      v69[v76[9]] = v70[v76[9]];
      *(_OWORD *)&v69[v76[10]] = *(_OWORD *)&v70[v76[10]];
      *(_OWORD *)&v69[v76[11]] = *(_OWORD *)&v70[v76[11]];
      v86 = v76;
      v5 = v163;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v161 + 56))(v69, 0, 1, v86);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v72)
  {
    sub_23DCF59A8((uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_23:
    sub_23DD2ED80();
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    goto LABEL_24;
  }
  v135 = sub_23DDC512C();
  v136 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 40);
  v136(v69, v70, v135);
  v137 = v17[5];
  v165 = v5;
  v138 = v17;
  v139 = &v69[v137];
  v160 = v3;
  v140 = &v70[v137];
  v136(&v69[v137], &v70[v137], v135);
  sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v136(&v139[*(int *)(v141 + 36)], &v140[*(int *)(v141 + 36)], v135);
  v142 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v139[v142[5]] = *(_QWORD *)&v140[v142[5]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v139[v142[6]] = *(_QWORD *)&v140[v142[6]];
  swift_bridgeObjectRelease();
  v143 = v142[7];
  v144 = *(_QWORD *)&v140[v143];
  v3 = v160;
  *(_QWORD *)&v139[v143] = v144;
  swift_bridgeObjectRelease();
  v145 = v138[6];
  v146 = &v69[v145];
  v147 = &v70[v145];
  *(_OWORD *)v146 = *(_OWORD *)v147;
  v146[16] = v147[16];
  v69[v138[7]] = v70[v138[7]];
  v69[v138[8]] = v70[v138[8]];
  v69[v138[9]] = v70[v138[9]];
  v148 = v138[10];
  v149 = &v69[v148];
  v150 = (uint64_t *)&v70[v148];
  v152 = *v150;
  v151 = v150[1];
  *(_QWORD *)v149 = v152;
  *((_QWORD *)v149 + 1) = v151;
  swift_bridgeObjectRelease();
  v153 = v138[11];
  v5 = v165;
  v154 = &v69[v153];
  v155 = (uint64_t *)&v70[v153];
  v157 = *v155;
  v156 = v155[1];
  *(_QWORD *)v154 = v157;
  *((_QWORD *)v154 + 1) = v156;
  swift_bridgeObjectRelease();
LABEL_24:
  *(_OWORD *)&v65[v67[6]] = *(_OWORD *)&v66[v67[6]];
  v88 = v67[7];
  v89 = &v65[v88];
  v90 = &v66[v88];
  *(_QWORD *)v89 = *(_QWORD *)v90;
  *((_QWORD *)v89 + 1) = *((_QWORD *)v90 + 1);
  v89[16] = v90[16];
  *(_OWORD *)(v89 + 24) = *(_OWORD *)(v90 + 24);
  *(_OWORD *)(v89 + 40) = *(_OWORD *)(v90 + 40);
  *(_OWORD *)(v89 + 56) = *(_OWORD *)(v90 + 56);
  *(_OWORD *)(v89 + 72) = *(_OWORD *)(v90 + 72);
  *(_QWORD *)&v65[v67[8]] = *(_QWORD *)&v66[v67[8]];
  *(_QWORD *)&v65[v67[9]] = *(_QWORD *)&v66[v67[9]];
  v91 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v92 = &v65[v91];
  v93 = &v66[v91];
  *(_QWORD *)v92 = *(_QWORD *)v93;
  swift_bridgeObjectRelease();
  *((_QWORD *)v92 + 1) = *((_QWORD *)v93 + 1);
  *((_QWORD *)v92 + 2) = *((_QWORD *)v93 + 2);
  swift_bridgeObjectRelease();
  *((_QWORD *)v92 + 3) = *((_QWORD *)v93 + 3);
  swift_bridgeObjectRelease();
  *((_QWORD *)v92 + 4) = *((_QWORD *)v93 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v92 + 40) = *(_OWORD *)(v93 + 40);
  *(_OWORD *)(v92 + 56) = *(_OWORD *)(v93 + 56);
  *(_OWORD *)(v92 + 72) = *(_OWORD *)(v93 + 72);
  *(_OWORD *)(v92 + 88) = *(_OWORD *)(v93 + 88);
  *(_OWORD *)(v92 + 104) = *(_OWORD *)(v93 + 104);
  v94 = v3[15];
  v95 = (uint64_t)&v5[v94];
  v96 = &v167[v94];
  if (!*(_QWORD *)&v5[v94])
  {
LABEL_28:
    *(_OWORD *)v95 = *(_OWORD *)v96;
    *(_QWORD *)(v95 + 16) = *((_QWORD *)v96 + 2);
    goto LABEL_29;
  }
  if (!*(_QWORD *)v96)
  {
    sub_23DCF9EB8(v95);
    goto LABEL_28;
  }
  *(_QWORD *)v95 = *(_QWORD *)v96;
  swift_release();
  *(_QWORD *)(v95 + 8) = *((_QWORD *)v96 + 1);
  swift_release();
  *(_QWORD *)(v95 + 16) = *((_QWORD *)v96 + 2);
  swift_release();
LABEL_29:
  *(_BYTE *)(v95 + 24) = v96[24];
  *(_BYTE *)(v95 + 32) = v96[32];
  *(_QWORD *)(v95 + 40) = *((_QWORD *)v96 + 5);
  swift_release();
  *(_QWORD *)(v95 + 48) = *((_QWORD *)v96 + 6);
  *(_BYTE *)(v95 + 56) = v96[56];
  *(_QWORD *)(v95 + 64) = *((_QWORD *)v96 + 8);
  *(_QWORD *)(v95 + 72) = *((_QWORD *)v96 + 9);
  swift_release();
  *(_QWORD *)(v95 + 80) = *((_QWORD *)v96 + 10);
  swift_release();
  *(_QWORD *)(v95 + 88) = *((_QWORD *)v96 + 11);
  *(_QWORD *)(v95 + 96) = *((_QWORD *)v96 + 12);
  *(_BYTE *)(v95 + 104) = v96[104];
  v97 = *((_OWORD *)v96 + 8);
  *(_OWORD *)(v95 + 112) = *((_OWORD *)v96 + 7);
  *(_OWORD *)(v95 + 128) = v97;
  v98 = *((_OWORD *)v96 + 10);
  *(_OWORD *)(v95 + 144) = *((_OWORD *)v96 + 9);
  *(_OWORD *)(v95 + 160) = v98;
  *(_QWORD *)(v95 + 176) = *((_QWORD *)v96 + 22);
  swift_release();
  *(_QWORD *)(v95 + 184) = *((_QWORD *)v96 + 23);
  swift_release();
  *(_QWORD *)(v95 + 192) = *((_QWORD *)v96 + 24);
  *(_BYTE *)(v95 + 200) = v96[200];
  *(_BYTE *)(v95 + 201) = v96[201];
  *(_QWORD *)(v95 + 208) = *((_QWORD *)v96 + 26);
  swift_release();
  *(_QWORD *)(v95 + 216) = *((_QWORD *)v96 + 27);
  swift_release();
  *(_QWORD *)(v95 + 224) = *((_QWORD *)v96 + 28);
  swift_release();
  *(_QWORD *)(v95 + 232) = *((_QWORD *)v96 + 29);
  swift_release();
  *(_QWORD *)(v95 + 240) = *((_QWORD *)v96 + 30);
  swift_release();
  *(_BYTE *)(v95 + 248) = v96[248];
  *(_QWORD *)(v95 + 256) = *((_QWORD *)v96 + 32);
  swift_release();
  *(_QWORD *)(v95 + 264) = *((_QWORD *)v96 + 33);
  swift_release();
  *(_QWORD *)(v95 + 272) = *((_QWORD *)v96 + 34);
  return v5;
}

uint64_t sub_23DD81C9C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD81CA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v6 = type metadata accessor for OvernightMetricsChartPointCollection();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  sub_23DD2ED80();
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_23DD7F02C(0);
    v7 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v9 = a3[13];
    }
    else
    {
      v8 = type metadata accessor for OvernightMetricsChartLayout(0);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[14];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[9]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_23DD81D94()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DD81DA0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = type metadata accessor for OvernightMetricsChartPointCollection();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    sub_23DD2ED80();
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[6];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[9]) = (a2 - 1);
        return;
      }
      sub_23DD7F02C(0);
      v9 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v13;
        v11 = a4[13];
      }
      else
      {
        v10 = type metadata accessor for OvernightMetricsChartLayout(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[14];
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for OvernightMetricsChartContent()
{
  uint64_t result;

  result = qword_256CFEBD8;
  if (!qword_256CFEBD8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DD81EC4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for OvernightMetricsChartPointCollection();
  if (v0 <= 0x3F)
  {
    sub_23DD2ED80();
    if (v1 <= 0x3F)
    {
      sub_23DD7F02C(319);
      if (v2 <= 0x3F)
      {
        type metadata accessor for OvernightMetricsChartLayout(319);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_23DD81FBC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD81FCC(uint64_t a1)
{
  return sub_23DD81FF4(a1, sub_23DD1E7D0, (void (*)(void))sub_23DD1E7EC);
}

uint64_t sub_23DD81FE0(uint64_t a1)
{
  return sub_23DD81FF4(a1, sub_23DD839A4, (void (*)(void))sub_23DD839C0);
}

uint64_t sub_23DD81FF4(uint64_t a1, void (*a2)(_QWORD), void (*a3)(void))
{
  a2(0);
  a3();
  return sub_23DDC60F8();
}

uint64_t sub_23DD82044(uint64_t a1)
{
  return sub_23DD81FF4(a1, sub_23DD83ADC, (void (*)(void))sub_23DD83C18);
}

__n128 sub_23DD82058@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  uint64_t v16;

  sub_23DD83E2C();
  v5 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1D528(0);
  sub_23DD1DCB4(&qword_256CFCFA8, (uint64_t (*)(uint64_t))sub_23DD1D528, sub_23DD1EFBC, MEMORY[0x24BDB84F0]);
  sub_23DCF58EC(*a1, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_23DD1D528);
  sub_23DD1D454();
  v9 = v8;
  sub_23DD83EA0((unint64_t *)&qword_256CFCFB8, (uint64_t (*)(uint64_t))sub_23DD1D454, MEMORY[0x24BDB7E98], MEMORY[0x24BDB8490]);
  v10 = &v7[*(int *)(v5 + 48)];
  v11 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, a1[1], v9);
  v12 = (uint64_t)&v7[*(int *)(v5 + 64)];
  sub_23DD1DE18(a1[2], v12);
  sub_23DCFBB58((uint64_t)v7, a2, (uint64_t (*)(_QWORD))sub_23DD1D528);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2 + *(int *)(v5 + 48), v10, v9);
  v13 = a2 + *(int *)(v5 + 64);
  result = *(__n128 *)v12;
  v15 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v15;
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v12 + 32);
  return result;
}

uint64_t sub_23DD821B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  sub_23DD839DC();
  v5 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD832D4(0);
  v9 = v8;
  sub_23DD1DCB4(&qword_256CFECB0, (uint64_t (*)(uint64_t))sub_23DD832D4, sub_23DD837B8, MEMORY[0x24BDB8490]);
  v10 = *a1;
  v21 = *(_QWORD *)(v9 - 8);
  v22 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v7, v10, v9);
  sub_23DD832B8(0);
  v11 = MEMORY[0x24BDB84F0];
  sub_23DD1DCB4(&qword_256CFECB8, (uint64_t (*)(uint64_t))sub_23DD832B8, sub_23DD83AA4, MEMORY[0x24BDB84F0]);
  v20 = &v7[v5[12]];
  sub_23DCF58EC(a1[1], (uint64_t)v20, (uint64_t (*)(_QWORD))sub_23DD832B8);
  type metadata accessor for SevenDaySingleMetricChartContent();
  sub_23DD8329C();
  v19 = &v7[v5[16]];
  sub_23DCF58EC(a1[2], (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for SevenDaySingleMetricChartContent);
  sub_23DD83924(0, &qword_256CFEC40, (uint64_t (*)(uint64_t))type metadata accessor for SevenDaySingleMetricChartContent, sub_23DD8329C, MEMORY[0x24BDB7C88]);
  v13 = v12;
  v14 = &v7[v5[20]];
  v15 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v14, a1[3], v12);
  sub_23DD837D4();
  sub_23DD83EA0(&qword_256CFECC8, (uint64_t (*)(uint64_t))sub_23DD837D4, MEMORY[0x24BDB7E98], v11);
  v16 = (uint64_t)&v7[v5[24]];
  sub_23DCF58EC(a1[4], v16, (uint64_t (*)(_QWORD))sub_23DD837D4);
  sub_23DD83280(0);
  sub_23DD1DCB4(&qword_256CFECD0, (uint64_t (*)(uint64_t))sub_23DD83280, sub_23DD83AC0, MEMORY[0x24BDB84F0]);
  v17 = (uint64_t)&v7[v5[28]];
  sub_23DCF58EC(a1[5], v17, (uint64_t (*)(_QWORD))sub_23DD83280);
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(a2, v7, v22);
  sub_23DCFBB58((uint64_t)v20, a2 + v5[12], (uint64_t (*)(_QWORD))sub_23DD832B8);
  sub_23DCFBB58((uint64_t)v19, a2 + v5[16], (uint64_t (*)(_QWORD))type metadata accessor for SevenDaySingleMetricChartContent);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2 + v5[20], v14, v13);
  sub_23DCFBB58(v16, a2 + v5[24], (uint64_t (*)(_QWORD))sub_23DD837D4);
  return sub_23DCFBB58(v17, a2 + v5[28], (uint64_t (*)(_QWORD))sub_23DD83280);
}

uint64_t sub_23DD8245C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t OpaqueTypeConformance2;
  uint64_t v88;
  uint64_t v89;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  int v105;
  uint64_t v106;
  char *v107;
  unsigned __int8 v108;
  int *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t);
  void (*v126)(char *, uint64_t);
  uint64_t v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t KeyPath;
  char *v139;
  uint64_t v140;
  unsigned __int8 *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163[35];
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170[37];

  v148 = a1;
  v2 = type metadata accessor for IndividualOvernightMetricsChartPoints();
  v145 = *(_QWORD *)(v2 - 8);
  v146 = (int *)v2;
  MEMORY[0x24BDAC7A8](v2);
  v136 = (char *)&v129 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v135 = (uint64_t)&v129 - v5;
  v6 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  MEMORY[0x24BDAC7A8](v6);
  v144 = (uint64_t)&v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v134 = (uint64_t)&v129 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v133 = (uint64_t)&v129 - v11;
  sub_23DD83280(0);
  MEMORY[0x24BDAC7A8](v12);
  v147 = (uint64_t)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v150 = (uint64_t)&v129 - v15;
  sub_23DD2ED80();
  MEMORY[0x24BDAC7A8](v16);
  v143 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v130 = (uint64_t)&v129 - v19;
  v131 = type metadata accessor for GradientOverlaidPills();
  MEMORY[0x24BDAC7A8](v131);
  v137 = (char *)&v129 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD83924(0, &qword_256CFEC40, (uint64_t (*)(uint64_t))type metadata accessor for SevenDaySingleMetricChartContent, sub_23DD8329C, MEMORY[0x24BDB7C88]);
  v161 = v21;
  v158 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v160 = (char *)&v129 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v157 = (char *)&v129 - v24;
  v140 = type metadata accessor for SevenDaySingleMetricChartContent();
  MEMORY[0x24BDAC7A8](v140);
  v159 = (uint64_t)&v129 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v156 = (uint64_t)&v129 - v27;
  sub_23DD7F02C(0);
  MEMORY[0x24BDAC7A8](v28);
  v139 = (char *)&v129 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for BaselineSeparators.Configuration(0);
  v141 = *(unsigned __int8 **)(v30 - 8);
  v142 = v30;
  MEMORY[0x24BDAC7A8](v30);
  v129 = (uint64_t)&v129 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD832B8(0);
  MEMORY[0x24BDAC7A8](v32);
  v155 = (uint64_t)&v129 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v162 = (uint64_t)&v129 - v35;
  v36 = (int *)type metadata accessor for OvernightMetricsChartContent();
  v37 = *((_QWORD *)v36 - 1);
  v38 = *(_QWORD *)(v37 + 64);
  MEMORY[0x24BDAC7A8](v36);
  v132 = (uint64_t)&v129 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v41 = (char *)&v129 - v40;
  sub_23DD832D4(0);
  v154 = v42;
  v152 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v153 = (char *)&v129 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)&v129 - v45;
  v47 = v36[12];
  v149 = (unsigned __int8 *)v1;
  v170[0] = *(_QWORD *)(v1 + v47);
  KeyPath = swift_getKeyPath();
  sub_23DCF58EC(v1, (uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartContent);
  v48 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  v49 = swift_allocObject();
  sub_23DCFBB58((uint64_t)v41, v49 + v48, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartContent);
  sub_23DD832F8(0);
  type metadata accessor for BaselineBand(0);
  sub_23DD83314();
  sub_23DD83EA0((unint64_t *)&qword_256CFCE48, (uint64_t (*)(uint64_t))sub_23DCFF9E8, MEMORY[0x24BEE13E8], MEMORY[0x24BEE08E8]);
  sub_23DD837B8();
  swift_bridgeObjectRetain();
  v151 = v46;
  v50 = v149;
  v51 = (uint64_t)v139;
  sub_23DDC6368();
  sub_23DCF58EC((uint64_t)&v50[v36[13]], v51, (uint64_t (*)(_QWORD))sub_23DD7F02C);
  if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v141 + 6))(v51, 1, v142) == 1)
  {
    sub_23DCF59A8(v51, (uint64_t (*)(_QWORD))sub_23DD7F02C);
    v52 = type metadata accessor for BaselineSeparators(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v162, 1, 1, v52);
  }
  else
  {
    v53 = v51;
    v54 = v129;
    sub_23DCFBB58(v53, v129, type metadata accessor for BaselineSeparators.Configuration);
    v55 = v54;
    v56 = v162;
    sub_23DCFBB58(v55, v162, type metadata accessor for BaselineSeparators.Configuration);
    v57 = type metadata accessor for BaselineSeparators(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 0, 1, v57);
  }
  v58 = *v50;
  v59 = *(_QWORD *)&v50[v36[9]];
  v60 = (char *)&v50[v36[11]];
  v61 = *((_QWORD *)v60 + 3);
  v62 = (uint64_t)&v50[v36[14]];
  v63 = v140;
  v64 = v156;
  sub_23DCF58EC(v62, v156 + *(int *)(v140 + 28), type metadata accessor for OvernightMetricsChartLayout);
  v65 = &v50[v36[15]];
  memcpy(v170, v65, 0x118uLL);
  *(_BYTE *)v64 = v58;
  *(_QWORD *)(v64 + 8) = v59;
  *(_QWORD *)(v64 + 16) = v61;
  v66 = (void *)(v64 + *(int *)(v63 + 32));
  v141 = v65;
  memcpy(v66, v65, 0x118uLL);
  v67 = *(_QWORD *)&v50[v36[10]];
  v139 = v60;
  v68 = *((_QWORD *)v60 + 2);
  v69 = v159;
  v70 = v159 + *(int *)(v63 + 28);
  v142 = v62;
  v71 = v62;
  v72 = v50;
  sub_23DCF58EC(v71, v70, type metadata accessor for OvernightMetricsChartLayout);
  *(_BYTE *)v69 = v58;
  *(_QWORD *)(v69 + 8) = v67;
  *(_QWORD *)(v69 + 16) = v68;
  memcpy((void *)(v69 + *(int *)(v63 + 32)), v170, 0x118uLL);
  sub_23DCFBB9C(v170);
  sub_23DCFBB9C(v170);
  sub_23DD8329C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v73 = v160;
  sub_23DDC5858();
  sub_23DCF59A8(v69, (uint64_t (*)(_QWORD))type metadata accessor for SevenDaySingleMetricChartContent);
  (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v157, v73, v161);
  if (*v50 == 1)
  {
    v74 = *(_QWORD *)&v50[v36[5]];
    v75 = v130;
    sub_23DCF58EC((uint64_t)&v50[v36[6]], v130, (uint64_t (*)(_QWORD))sub_23DD2ED80);
    v76 = 0;
    v77 = v36;
    if (*(_QWORD *)(*((_QWORD *)v139 + 1) + 16) >= 2uLL)
      v76 = *((_QWORD *)v139 + 3);
    v78 = (int *)v131;
    v79 = v137;
    sub_23DCF58EC(v142, (uint64_t)&v137[*(int *)(v131 + 28)], type metadata accessor for OvernightMetricsChartLayout);
    memcpy(v163, v141, sizeof(v163));
    *v79 = v74;
    sub_23DCFBB58(v75, (uint64_t)v79 + v78[5], (uint64_t (*)(_QWORD))sub_23DD2ED80);
    *(_QWORD *)((char *)v79 + v78[6]) = v76;
    memcpy((char *)v79 + v78[8], v163, 0x118uLL);
    if (BYTE1(v163[25]) == 1)
    {
      sub_23DD83828(0);
      *((_QWORD *)&v165 + 1) = v80;
      sub_23DD83924(255, &qword_256CFEC90, (uint64_t (*)(uint64_t))sub_23DD839A4, sub_23DD839C0, MEMORY[0x24BDFAC10]);
      v82 = v81;
      v83 = sub_23DCF535C(&qword_256CFEC80, (uint64_t (*)(uint64_t))type metadata accessor for GradientOverlaidPills, (uint64_t)&unk_23DDC8AB0);
      sub_23DD839A4(255);
      v85 = v84;
      v86 = sub_23DD839C0();
      *(_QWORD *)&v167 = v85;
      *((_QWORD *)&v167 + 1) = v86;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      *(_QWORD *)&v167 = v78;
      *((_QWORD *)&v167 + 1) = v82;
      *(_QWORD *)&v168 = v83;
      *((_QWORD *)&v168 + 1) = OpaqueTypeConformance2;
      v166 = swift_getOpaqueTypeConformance2();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v164);
      sub_23DCFBB9C(v163);
      sub_23DCFBB9C(v163);
      swift_bridgeObjectRetain();
      v79 = v137;
      swift_checkMetadataState();
      sub_23DDC5834();
      sub_23DCFE908(v163);
    }
    else
    {
      *((_QWORD *)&v165 + 1) = v78;
      v166 = sub_23DCF535C(&qword_256CFEC80, (uint64_t (*)(uint64_t))type metadata accessor for GradientOverlaidPills, (uint64_t)&unk_23DDC8AB0);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v164);
      sub_23DCF58EC((uint64_t)v79, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for GradientOverlaidPills);
      sub_23DCFBB9C(v163);
      swift_bridgeObjectRetain();
    }
    v88 = v150;
    v89 = (uint64_t)v143;
    sub_23DCF59A8((uint64_t)v79, (uint64_t (*)(_QWORD))type metadata accessor for GradientOverlaidPills);
    v167 = v164;
    v168 = v165;
    v169 = v166;
  }
  else
  {
    v169 = 0;
    v167 = 0u;
    v168 = 0u;
    v88 = v150;
    v89 = (uint64_t)v143;
    v77 = v36;
  }
  sub_23DCF58EC((uint64_t)&v50[v77[6]], v89, (uint64_t (*)(_QWORD))sub_23DD2ED80);
  v91 = type metadata accessor for OvernightMetricsChartPoint();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 48))(v89, 1, v91) == 1)
  {
    sub_23DCF59A8(v89, (uint64_t (*)(_QWORD))sub_23DD2ED80);
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v145 + 56))(v88, 1, 1, v146);
  }
  else
  {
    v92 = v134;
    sub_23DCF58EC(v89 + *(int *)(v91 + 20), v134, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricChartPointCollection);
    sub_23DCF59A8(v89, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    v93 = v92;
    v94 = v133;
    sub_23DCFBB58(v93, v133, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricChartPointCollection);
    sub_23DCFBB58(v94, v144, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricChartPointCollection);
    v95 = (uint64_t *)&v50[v77[7]];
    v96 = *v95;
    v97 = v95[1];
    v99 = v95[2];
    v98 = v95[3];
    v100 = (uint64_t)v72;
    v102 = v95[4];
    v101 = (char *)v95[5];
    v143 = (char *)v95[6];
    v103 = v95[7];
    v104 = (char *)v95[8];
    v139 = v101;
    v140 = v103;
    v105 = *v72;
    v106 = v132;
    sub_23DCF58EC(v100, v132, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartContent);
    if (v105 == 1)
      LODWORD(KeyPath) = *(unsigned __int8 *)(v106 + v77[8]);
    else
      LODWORD(KeyPath) = 0;
    v137 = v104;
    v107 = v139;
    sub_23DCF59EC(v96);
    sub_23DCF59A8(v106, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartContent);
    v108 = *v149;
    v109 = v146;
    v110 = (uint64_t)v136;
    sub_23DCF58EC(v142, (uint64_t)&v136[v146[9]], type metadata accessor for OvernightMetricsChartLayout);
    memcpy(v163, v141, sizeof(v163));
    sub_23DCFBB58(v144, v110, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricChartPointCollection);
    v111 = (uint64_t *)(v110 + v109[5]);
    *v111 = v96;
    v111[1] = v97;
    v111[2] = v99;
    v111[3] = v98;
    v111[4] = v102;
    v111[5] = (uint64_t)v107;
    v112 = v140;
    v111[6] = (uint64_t)v143;
    v111[7] = v112;
    v111[8] = (uint64_t)v137;
    *(_BYTE *)(v110 + v109[6]) = KeyPath;
    *(_BYTE *)(v110 + v109[7]) = v108;
    *(_BYTE *)(v110 + v109[8]) = v108;
    memcpy((void *)(v110 + v109[10]), v163, 0x118uLL);
    v113 = v110;
    v114 = v135;
    sub_23DCFBB58(v113, v135, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
    v88 = v150;
    sub_23DCFBB58(v114, v150, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v145 + 56))(v88, 0, 1, v109);
    sub_23DCFBB9C(v163);
  }
  v115 = v162;
  v116 = (uint64_t)v153;
  (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v153, v151, v154);
  v163[0] = v116;
  v117 = v155;
  sub_23DCF58EC(v115, v155, (uint64_t (*)(_QWORD))sub_23DD832B8);
  v163[1] = v117;
  v118 = v156;
  v119 = v159;
  sub_23DCF58EC(v156, v159, (uint64_t (*)(_QWORD))type metadata accessor for SevenDaySingleMetricChartContent);
  v163[2] = v119;
  v120 = v157;
  v121 = v158;
  v123 = (uint64_t)v160;
  v122 = v161;
  (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v160, v157, v161);
  v163[3] = v123;
  sub_23DCF58EC((uint64_t)&v167, (uint64_t)&v164, (uint64_t (*)(_QWORD))sub_23DD837D4);
  v163[4] = (uint64_t)&v164;
  v124 = v147;
  sub_23DCF58EC(v88, v147, (uint64_t (*)(_QWORD))sub_23DD83280);
  v163[5] = v124;
  sub_23DD821B8(v163, v148);
  sub_23DCF59A8(v88, (uint64_t (*)(_QWORD))sub_23DD83280);
  sub_23DCF59A8((uint64_t)&v167, (uint64_t (*)(_QWORD))sub_23DD837D4);
  v125 = *(void (**)(char *, uint64_t))(v121 + 8);
  v125(v120, v122);
  sub_23DCF59A8(v118, (uint64_t (*)(_QWORD))type metadata accessor for SevenDaySingleMetricChartContent);
  sub_23DCF59A8(v162, (uint64_t (*)(_QWORD))sub_23DD832B8);
  v126 = *(void (**)(char *, uint64_t))(v152 + 8);
  v127 = v154;
  v126(v151, v154);
  sub_23DCF59A8(v124, (uint64_t (*)(_QWORD))sub_23DD83280);
  sub_23DCF59A8((uint64_t)&v164, (uint64_t (*)(_QWORD))sub_23DD837D4);
  v125((char *)v123, v122);
  sub_23DCF59A8(v119, (uint64_t (*)(_QWORD))type metadata accessor for SevenDaySingleMetricChartContent);
  sub_23DCF59A8(v155, (uint64_t (*)(_QWORD))sub_23DD832B8);
  return ((uint64_t (*)(char *, uint64_t))v126)(v153, v127);
}

uint64_t *sub_23DD831F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void *v5;
  uint64_t v6;
  uint64_t __dst[35];

  sub_23DCF58EC(a1, a3, type metadata accessor for BaselineBand.Configuration);
  v5 = (const void *)(a2 + *(int *)(type metadata accessor for OvernightMetricsChartContent() + 60));
  memcpy(__dst, v5, sizeof(__dst));
  v6 = type metadata accessor for BaselineBand(0);
  memcpy((void *)(a3 + *(int *)(v6 + 20)), v5, 0x118uLL);
  return sub_23DCFBB9C(__dst);
}

void sub_23DD83280(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFEC38, (uint64_t (*)(uint64_t))type metadata accessor for IndividualOvernightMetricsChartPoints, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_23DD8329C()
{
  return sub_23DCF535C(&qword_256CFEC48, (uint64_t (*)(uint64_t))type metadata accessor for SevenDaySingleMetricChartContent, (uint64_t)&unk_23DDC7748);
}

void sub_23DD832B8(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFEC50, type metadata accessor for BaselineSeparators, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_23DD832D4(uint64_t a1)
{
  sub_23DD83EFC(a1, &qword_256CFEC58, sub_23DD832F8, (void (*)(uint64_t))type metadata accessor for BaselineBand, (void (*)(void))sub_23DD83314);
}

void sub_23DD832F8(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFEC60, type metadata accessor for BaselineBand.Configuration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

uint64_t sub_23DD83314()
{
  return sub_23DCF535C(&qword_256CFEC68, (uint64_t (*)(uint64_t))sub_23DD832F8, MEMORY[0x24BEE12D8]);
}

uint64_t sub_23DD83330()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v1 = (int *)type metadata accessor for OvernightMetricsChartContent();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = v3 + v1[5];
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v6 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  v7 = v3 + v1[6];
  v8 = type metadata accessor for OvernightMetricsChartPoint();
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  if (!v9(v7, 1, v8))
  {
    v10 = sub_23DDC512C();
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v11(v7, v10);
    v12 = v7 + *(int *)(v8 + 20);
    v11(v12, v10);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v11(v12 + *(int *)(v13 + 36), v10);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v3 + v1[7]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = v3 + v1[13];
  v15 = type metadata accessor for BaselineSeparators.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    v17 = sub_23DDC512C();
    v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
    v18(v16, v17);
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v18(v16 + *(int *)(v19 + 36), v17);
    swift_release();
  }
  v20 = v3 + v1[14];
  swift_bridgeObjectRelease();
  v21 = v20 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  if (!v9(v21, 1, v8))
  {
    v22 = sub_23DDC512C();
    v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
    v23(v21, v22);
    v24 = v21 + *(int *)(v8 + 20);
    v23(v24, v22);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v23(v24 + *(int *)(v25 + 36), v22);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + v1[15]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t *sub_23DD8376C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OvernightMetricsChartContent() - 8) + 80);
  return sub_23DD831F8(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_23DD837B8()
{
  return sub_23DCF535C(&qword_256CFEC70, type metadata accessor for BaselineBand, (uint64_t)&unk_23DDCC120);
}

void sub_23DD837D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFEC78)
  {
    v0 = sub_23DDC6980();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFEC78);
  }
}

void sub_23DD83828(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_256CFEC88)
  {
    v2 = type metadata accessor for GradientOverlaidPills();
    sub_23DD83924(255, &qword_256CFEC90, (uint64_t (*)(uint64_t))sub_23DD839A4, sub_23DD839C0, MEMORY[0x24BDFAC10]);
    v4 = v3;
    v5 = sub_23DCF535C(&qword_256CFEC80, (uint64_t (*)(uint64_t))type metadata accessor for GradientOverlaidPills, (uint64_t)&unk_23DDC8AB0);
    sub_23DD839A4(255);
    sub_23DD839C0();
    v8[0] = v2;
    v8[1] = v4;
    v8[2] = v5;
    v8[3] = swift_getOpaqueTypeConformance2();
    v6 = MEMORY[0x242643B9C](a1, v8, MEMORY[0x24BDB7C38], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_256CFEC88);
  }
}

void sub_23DD83924(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  if (!*a2)
  {
    v11[0] = a3(255);
    v11[1] = a4();
    v9 = MEMORY[0x242643B9C](a1, v11, a5, 0);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_23DD839A4(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFEC98, (uint64_t (*)(uint64_t))type metadata accessor for GradientOverlaidPills, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEFDB0]);
}

uint64_t sub_23DD839C0()
{
  return sub_23DCF535C(&qword_256CFECA0, (uint64_t (*)(uint64_t))sub_23DD839A4, MEMORY[0x24BDEFDC0]);
}

void sub_23DD839DC()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_256CFECA8)
  {
    sub_23DD832D4(255);
    sub_23DD832B8(255);
    type metadata accessor for SevenDaySingleMetricChartContent();
    sub_23DD83924(255, &qword_256CFEC40, (uint64_t (*)(uint64_t))type metadata accessor for SevenDaySingleMetricChartContent, sub_23DD8329C, MEMORY[0x24BDB7C88]);
    sub_23DD837D4();
    sub_23DD83280(255);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_256CFECA8);
  }
}

uint64_t sub_23DD83AA4()
{
  return sub_23DCF535C(&qword_256CFECC0, type metadata accessor for BaselineSeparators, (uint64_t)&unk_23DDC85AC);
}

uint64_t sub_23DD83AC0()
{
  return sub_23DCF535C(&qword_256CFECD8, (uint64_t (*)(uint64_t))type metadata accessor for IndividualOvernightMetricsChartPoints, (uint64_t)&unk_23DDC8100);
}

void sub_23DD83ADC(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFECE0, (uint64_t (*)(uint64_t))sub_23DD83AF8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEFDB0]);
}

void sub_23DD83AF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_256CFECE8)
  {
    sub_23DD83BA4(255);
    v3 = v2;
    sub_23DDC58A0();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = MEMORY[0x24BDF3E48];
    v7[2] = OpaqueTypeConformance2;
    v7[3] = MEMORY[0x24BDF3E18];
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDB7C28], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256CFECE8);
  }
}

void sub_23DD83BA4(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_256CFECF0)
  {
    v4[0] = sub_23DDC58A0();
    v4[1] = MEMORY[0x24BDB7D80];
    v2 = MEMORY[0x242643B9C](a1, v4, MEMORY[0x24BDB7C08], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_256CFECF0);
  }
}

uint64_t sub_23DD83C18()
{
  return sub_23DCF535C(&qword_256CFECF8, (uint64_t (*)(uint64_t))sub_23DD83ADC, MEMORY[0x24BDEFDC0]);
}

unint64_t sub_23DD83C38()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD v5[2];
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;

  result = qword_256CFED00;
  if (!qword_256CFED00)
  {
    sub_23DD83D6C();
    v2 = v1;
    v5[0] = sub_23DD1DCB4(&qword_256CFECB0, (uint64_t (*)(uint64_t))sub_23DD832D4, sub_23DD837B8, MEMORY[0x24BDB8490]);
    v3 = MEMORY[0x24BDB84F0];
    v5[1] = sub_23DD1DCB4(&qword_256CFECB8, (uint64_t (*)(uint64_t))sub_23DD832B8, sub_23DD83AA4, MEMORY[0x24BDB84F0]);
    v6 = sub_23DD8329C();
    v4[1] = type metadata accessor for SevenDaySingleMetricChartContent();
    v4[2] = v6;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v8 = sub_23DD83EA0(&qword_256CFECC8, (uint64_t (*)(uint64_t))sub_23DD837D4, MEMORY[0x24BDB7E98], v3);
    v9 = sub_23DD1DCB4(&qword_256CFECD0, (uint64_t (*)(uint64_t))sub_23DD83280, sub_23DD83AC0, v3);
    v4[0] = v5;
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB7B80], v2, v4);
    atomic_store(result, (unint64_t *)&qword_256CFED00);
  }
  return result;
}

void sub_23DD83D6C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFED08)
  {
    sub_23DD832D4(255);
    sub_23DD832B8(255);
    type metadata accessor for SevenDaySingleMetricChartContent();
    sub_23DD83924(255, &qword_256CFEC40, (uint64_t (*)(uint64_t))type metadata accessor for SevenDaySingleMetricChartContent, sub_23DD8329C, MEMORY[0x24BDB7C88]);
    sub_23DD837D4();
    sub_23DD83280(255);
    v0 = sub_23DDC57E0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFED08);
  }
}

void sub_23DD83E2C()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_256CFED10)
  {
    sub_23DD1D528(255);
    sub_23DD1D454();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_256CFED10);
  }
}

uint64_t sub_23DD83EA0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9 = a3;
    result = MEMORY[0x242643BD8](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23DD83EFC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t), void (*a5)(void))
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    a3(255);
    sub_23DCFF9E8();
    a4(255);
    a5();
    sub_23DD83EA0((unint64_t *)&qword_256CFCE48, (uint64_t (*)(uint64_t))sub_23DCFF9E8, MEMORY[0x24BEE13E8], MEMORY[0x24BEE08E8]);
    v8 = sub_23DDC6380();
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t OvernightMetricsChart.init(timeScope:model:alignWarmupProgressCounterToChartPlotArea:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v24;
  char v25;

  v24 = a4;
  sub_23DCF6898(0, qword_256CFC6B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChart.Derivations);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24 - v8;
  sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v24 - v11;
  sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v24 - v14;
  v16 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a1;
  v19 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  sub_23DCF58EC(a2 + v19[8], (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
  sub_23DD8ACAC(a2 + v19[7], (uint64_t)v15, (uint64_t)&qword_254326A48, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DCF6898);
  v20 = *(_QWORD **)(a2 + v19[14]);
  v21 = *(_QWORD *)(a2 + v19[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OvernightMetricsViewModel.warmupProgress.getter((uint64_t)v12);
  v22 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v9, 1, 1, v22);
  OvernightMetricsChart.init(timeScope:chartPointCollection:emphasizedChartPoint:tabProgress:shouldMergeOverlappingIndividualMetrics:visibleDataTypes:keyDates:warmupProgress:alignWarmupProgressCounterToChartPlotArea:precomputedDerivations:)(&v25, (uint64_t)v18, (uint64_t)v15, 0, 1, 1, v20, v21, v24, (uint64_t)v12, a3, (uint64_t)v9);
  return sub_23DCF59A8(a2, type metadata accessor for OvernightMetricsViewModel);
}

uint64_t type metadata accessor for OvernightMetricsChart.Derivations(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFEEA0);
}

uint64_t OvernightMetricsChart.Derivations.init(lastKeyDateRange:keyDatesRange:iconPositions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t result;

  v7 = MEMORY[0x24BEE08B8];
  sub_23DD8AB9C(a1, a4, (uint64_t)&qword_254326A60, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DD04550);
  v8 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  result = sub_23DD8AB9C(a2, a4 + *(int *)(v8 + 20), (uint64_t)&qword_254326A60, (uint64_t)v7, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DD04550);
  *(_QWORD *)(a4 + *(int *)(v8 + 24)) = a3;
  return result;
}

uint64_t OvernightMetricsChart.Derivations.init(keyDates:calendar:iconCount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, double);
  void (*v35)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t (*v48)(void);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;

  v70 = a2;
  v71 = a4;
  sub_23DD3DBE8();
  v63 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v61 = (char *)&v59 - v10;
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v60 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v62 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v64 = (uint64_t)&v59 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v59 - v16;
  sub_23DCF6898(0, &qword_254326668, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v59 - v22;
  v24 = sub_23DDC512C();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v69 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28.n128_f64[0] = MEMORY[0x24BDAC7A8](v27);
  v72 = (char *)&v59 - v29;
  v30 = a1;
  v31 = *(_QWORD *)(a1 + 16);
  if (!v31)
  {
LABEL_9:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v25 + 56))(v23, 1, 1, v24, v28);
    goto LABEL_11;
  }
  v65 = v17;
  v66 = v8;
  v67 = a3;
  v32 = v30;
  v33 = v30 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
  v34 = *(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16);
  v34(v23, v33, v24, v28.n128_f64[0]);
  v35 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56);
  v35(v23, 0, 1, v24);
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v36(v23, 1, v24) != 1)
  {
    v68 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v68(v72, v23, v24);
    if (v31 > *(_QWORD *)(v32 + 16))
    {
      __break(1u);
    }
    else
    {
      ((void (*)(char *, unint64_t, uint64_t))v34)(v20, v33 + *(_QWORD *)(v25 + 72) * (v31 - 1), v24);
      v35(v20, 0, 1, v24);
      swift_bridgeObjectRelease();
      if (v36(v20, 1, v24) == 1)
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v72, v24);
        v23 = v20;
        goto LABEL_11;
      }
      v37 = v68;
      v23 = v69;
      v68(v69, v20, v24);
      sub_23DD6746C((uint64_t)v23, v71);
      sub_23DCF535C((unint64_t *)&qword_254326A30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
      v38 = v72;
      if ((sub_23DDC66A4() & 1) != 0)
      {
        v39 = v63;
        v40 = v61;
        v41 = &v61[*(int *)(v63 + 48)];
        ((void (*)(char *, char *, uint64_t))v34)(v61, v38, v24);
        ((void (*)(char *, char *, uint64_t))v34)(v41, v23, v24);
        v42 = v66;
        v43 = &v66[*(int *)(v39 + 48)];
        ((void (*)(char *, char *, uint64_t))v34)(v66, v40, v24);
        ((void (*)(char *, char *, uint64_t))v34)(v43, v41, v24);
        v44 = (uint64_t)v62;
        v37(v62, v42, v24);
        v45 = v37;
        v46 = *(void (**)(char *, uint64_t))(v25 + 8);
        v46(v43, v24);
        v47 = &v42[*(int *)(v39 + 48)];
        v45(v42, v40, v24);
        v45(v47, v41, v24);
        v45((char *)(v44 + *(int *)(v60 + 36)), v47, v24);
        v46(v42, v24);
        v48 = MEMORY[0x24BEE08B8];
        v49 = v64;
        sub_23DD8AB9C(v44, v64, (uint64_t)&qword_254326A60, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DD04550);
        v50 = (uint64_t)v65;
        v51 = v70;
        sub_23DD6799C(v49, (uint64_t)v65);
        sub_23DD8AB00(v49, (uint64_t)&qword_254326A60, (uint64_t)v48, (uint64_t (*)(_QWORD))sub_23DD04550);
        v52 = v51;
        v53 = type metadata accessor for OvernightMetricsChart.Derivations(0);
        v54 = v71;
        sub_23DD8AB9C(v50, v71 + *(int *)(v53 + 20), (uint64_t)&qword_254326A60, (uint64_t)v48, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DD04550);
        v55 = v69;
        v56 = sub_23DD67E40(v67);
        v57 = sub_23DDC51E0();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v52, v57);
        v46(v55, v24);
        result = ((uint64_t (*)(char *, uint64_t))v46)(v72, v24);
        *(_QWORD *)(v54 + *(int *)(v53 + 24)) = v56;
        return result;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_11:
  sub_23DD8AB00((uint64_t)v23, (uint64_t)&qword_254326668, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))sub_23DCF6898);
  result = sub_23DDC6AC4();
  __break(1u);
  return result;
}

uint64_t OvernightMetricsChart.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;

  v3 = type metadata accessor for OvernightMetricsChart(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DDC63C8();
  v9 = v8;
  sub_23DCF58EC(v1, (uint64_t)v6, type metadata accessor for OvernightMetricsChart);
  v10 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v11 = swift_allocObject();
  sub_23DCFBB58((uint64_t)v6, v11 + v10, type metadata accessor for OvernightMetricsChart);
  *a1 = v7;
  a1[1] = v9;
  v12 = sub_23DD87534();
  result = sub_23DD8ACAC(v1 + *(int *)(v3 + 52), (uint64_t)a1 + *(int *)(v12 + 52), (uint64_t)&qword_254326A60, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DD04550);
  v14 = (uint64_t *)((char *)a1 + *(int *)(v12 + 56));
  *v14 = sub_23DD87530;
  v14[1] = v11;
  return result;
}

uint64_t sub_23DD8494C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  double v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned int (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  uint64_t v64;
  char v65;
  double v66;
  int v67;
  double v68;
  ValueMetadata *v69;
  ValueMetadata *v70;
  ValueMetadata *v71;
  ValueMetadata *v72;
  ValueMetadata *v73;
  ValueMetadata *v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t KeyPath;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  uint64_t *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  ValueMetadata **v122;
  ValueMetadata *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v135;
  int v136;
  int v137;
  ValueMetadata *v138;
  ValueMetadata *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  int *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE v171[280];
  _OWORD v172[18];
  _BYTE v173[280];
  uint64_t v174[35];
  _QWORD v175[38];

  v164 = a2;
  v7 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  MEMORY[0x24BDAC7A8](v7);
  v150 = (uint64_t)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  MEMORY[0x24BDAC7A8](v9);
  v144 = (uint64_t)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  MEMORY[0x24BDAC7A8](v11);
  v148 = (uint64_t)&v135 - v12;
  v13 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x24BDAC7A8](v13);
  v147 = (uint64_t)&v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for AnimatableOvernightMetricsChart();
  MEMORY[0x24BDAC7A8](v149);
  v151 = (uint64_t)&v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD3816C(0, &qword_256CFED40, v16, (uint64_t (*)(uint64_t))sub_23DD8761C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  v168 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v146 = (uint64_t)&v135 - v18;
  sub_23DD87678(0);
  v169 = v19;
  v145 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v152 = (char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v153 = (char *)&v135 - v22;
  sub_23DD3816C(0, &qword_256CFEEE8, (uint64_t (*)(uint64_t))sub_23DD875F8, v23, MEMORY[0x24BDEF380]);
  v165 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v167 = (uint64_t)&v135 - v25;
  v157 = type metadata accessor for OvernightMetricsChartWarmupProgressCounter();
  MEMORY[0x24BDAC7A8](v157);
  v159 = (char *)&v135 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD875F8(0);
  v166 = v27;
  MEMORY[0x24BDAC7A8](v27);
  v158 = (uint64_t)&v135 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v160 = (uint64_t)&v135 - v30;
  v31 = type metadata accessor for OvernightMetricsChartLayout(0);
  MEMORY[0x24BDAC7A8](v31);
  v143 = (uint64_t)&v135 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v162 = (uint64_t)&v135 - v34;
  sub_23DCF6898(0, qword_256CFEEF0, (void (*)(uint64_t))MEMORY[0x24BE3FC10]);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v135 - v36;
  v170 = sub_23DDC52DC();
  v38 = *(_QWORD *)(v170 - 8);
  MEMORY[0x24BDAC7A8](v170);
  v163 = (char *)&v135 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)&v135 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v43);
  v45 = (char *)&v135 - v44;
  MEMORY[0x24BDAC7A8](v46);
  v48 = (char *)&v135 - v47;
  v49 = *a1;
  v50 = type metadata accessor for OvernightMetricsChart(0);
  v142 = *(int *)(v50 + 36);
  v51 = *(_QWORD *)&a1[v142];
  v161 = (int *)v50;
  v52 = &a1[*(int *)(v50 + 28)];
  if (v52[8])
    v53 = 0.0;
  else
    v53 = *(double *)v52;
  LODWORD(v156) = v49;
  LOBYTE(v175[0]) = v49;
  v54 = v51;
  v175[1] = v51;
  sub_23DD98D84((uint64_t)v45, (uint64_t)v42, v53);
  v55 = fmod(v53, 1.0);
  swift_bridgeObjectRetain();
  if (v55 >= 0.5)
    v56 = (uint64_t)v45;
  else
    v56 = (uint64_t)v42;
  if (v55 >= 0.5)
    v57 = (uint64_t)v42;
  else
    v57 = (uint64_t)v45;
  v58 = (uint64_t)v48;
  v59 = v170;
  sub_23DCF59A8(v56, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  sub_23DCFBB58(v57, v58, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  v60 = a1;
  sub_23DD85720(v58, v37);
  v61 = v38;
  v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v63 = v37;
  if (v62(v37, 1, v59) == 1)
  {
    v141 = v58;
    sub_23DD8AB00((uint64_t)v37, (uint64_t)qword_256CFEEF0, (uint64_t)MEMORY[0x24BE3FC10], (uint64_t (*)(_QWORD))sub_23DCF6898);
    v64 = v162;
    sub_23DD85C38(v162, a3, a4);
    v65 = v156;
    LOBYTE(v175[0]) = v156;
    v175[1] = v54;
    v66 = *(double *)v52;
    v67 = v52[8];
    if (v67)
      v68 = 0.0;
    else
      v68 = v66;
    v69 = sub_23DD98F68(v68);
    v138 = v70;
    v139 = v69;
    v72 = v71;
    v74 = v73;
    LOBYTE(v175[0]) = v65;
    v175[1] = v54;
    sub_23DD991D4((uint64_t)v173, v68);
    v170 = *(_QWORD *)v173;
    v163 = *(char **)&v173[8];
    v159 = *(char **)&v173[24];
    v160 = *(_QWORD *)&v173[16];
    v157 = *(_QWORD *)&v173[40];
    v158 = *(_QWORD *)&v173[32];
    v155 = *(_QWORD *)&v173[56];
    v156 = *(_QWORD *)&v173[48];
    v154 = *(_QWORD *)&v173[64];
    swift_bridgeObjectRelease();
    v140 = v67 ^ 1;
    v75 = v143;
    sub_23DCF58EC(v64, v143, type metadata accessor for OvernightMetricsChartLayout);
    v137 = *a1;
    v76 = v161;
    v77 = (uint64_t)&a1[v161[5]];
    v78 = v147;
    sub_23DCF58EC(v77, v147, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
    v79 = v76;
    v80 = v148;
    sub_23DD8ACAC((uint64_t)&v60[v76[6]], v148, (uint64_t)&qword_254326A48, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DCF6898);
    v81 = v60;
    v82 = v80;
    v83 = v78;
    v84 = v142;
    if ((v67 & 1) != 0)
    {
      sub_23DD8AB3C((uint64_t)v173);
      v85 = v170;
      v86 = v163;
      v88 = v159;
      v87 = v160;
      v90 = v157;
      v89 = v158;
      v92 = v155;
      v91 = v156;
      v93 = v154;
    }
    else
    {
      v85 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v93 = 0;
    }
    v170 = v85;
    v159 = v88;
    v160 = v87;
    v157 = v90;
    v158 = v89;
    v155 = v92;
    v156 = v91;
    v154 = v93;
    v163 = v86;
    v106 = v79;
    v136 = v81[v79[8]];
    v107 = v83;
    v108 = *(_QWORD *)&v81[v84];
    swift_bridgeObjectRetain();
    v109 = sub_23DD85FB0(v64);
    v110 = v144;
    sub_23DD861BC(v144);
    v111 = (uint64_t)&v81[v79[13]];
    v112 = v150;
    sub_23DCF58EC(v111, v150, type metadata accessor for OvernightMetricsChart.Derivations);
    memcpy(v175, &v81[v106[14]], 0x119uLL);
    sub_23DD144A8((uint64_t)v175, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
    sub_23DD35E8C(v174);
    sub_23DD144A8((uint64_t)v175, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CCE4);
    KeyPath = swift_getKeyPath();
    v114 = v75;
    v115 = v151;
    sub_23DCFBB58(v114, v151, type metadata accessor for OvernightMetricsChartLayout);
    v116 = (int *)v149;
    *(_BYTE *)(v115 + *(int *)(v149 + 20)) = v137;
    sub_23DCFBB58(v107, v115 + v116[6], (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
    sub_23DD8AB9C(v82, v115 + v116[7], (uint64_t)&qword_254326A48, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DCF6898);
    v117 = (uint64_t *)(v115 + v116[8]);
    v118 = v163;
    *v117 = v170;
    v117[1] = (uint64_t)v118;
    v119 = v159;
    v117[2] = v160;
    v117[3] = (uint64_t)v119;
    v120 = v157;
    v117[4] = v158;
    v117[5] = v120;
    v121 = v155;
    v117[6] = v156;
    v117[7] = v121;
    v117[8] = v154;
    *(_BYTE *)(v115 + v116[9]) = v136;
    v122 = (ValueMetadata **)(v115 + v116[10]);
    v123 = v138;
    *v122 = v139;
    v122[1] = v123;
    v122[2] = v72;
    v122[3] = v74;
    *(_QWORD *)(v115 + v116[11]) = v108;
    *(_QWORD *)(v115 + v116[12]) = v109;
    sub_23DCFBB58(v110, v115 + v116[13], type metadata accessor for OvernightMetricsAxisConfiguration);
    sub_23DCFBB58(v112, v115 + v116[14], type metadata accessor for OvernightMetricsChart.Derivations);
    memcpy((void *)(v115 + v116[15]), v174, 0x118uLL);
    v124 = v115 + v116[16];
    *(_QWORD *)v124 = KeyPath;
    *(_BYTE *)(v124 + 8) = 0;
    sub_23DDC5B58();
    sub_23DDC6410();
    sub_23DDC63F8();
    swift_release();
    sub_23DDC5B64();
    swift_release();
    swift_release();
    sub_23DDC5B58();
    sub_23DDC6410();
    sub_23DDC6404();
    swift_release();
    sub_23DDC5B64();
    swift_release();
    swift_release();
    v125 = sub_23DDC5B4C();
    swift_release();
    swift_release();
    v126 = v146;
    sub_23DCF58EC(v115, v146, (uint64_t (*)(_QWORD))type metadata accessor for AnimatableOvernightMetricsChart);
    v127 = v168;
    *(_QWORD *)(v126 + *(int *)(v168 + 36)) = v125;
    sub_23DCF59A8(v115, (uint64_t (*)(_QWORD))type metadata accessor for AnimatableOvernightMetricsChart);
    v172[2] = *(_OWORD *)&v173[32];
    v172[3] = *(_OWORD *)&v173[48];
    *(_QWORD *)&v172[4] = *(_QWORD *)&v173[64];
    v172[0] = *(_OWORD *)v173;
    v172[1] = *(_OWORD *)&v173[16];
    *(_BYTE *)(swift_allocObject() + 16) = v140;
    v128 = sub_23DD87728();
    v129 = sub_23DD877E8();
    v130 = v152;
    sub_23DDC61B8();
    swift_release();
    sub_23DD8AC00(v126);
    sub_23DD8AC5C((uint64_t)v173);
    v131 = v145;
    v132 = v153;
    v133 = v169;
    (*(void (**)(char *, char *, uint64_t))(v145 + 32))(v153, v130, v169);
    (*(void (**)(uint64_t, char *, uint64_t))(v131 + 16))(v167, v132, v133);
    swift_storeEnumTagMultiPayload();
    sub_23DD87914();
    *(_QWORD *)&v172[0] = v127;
    *((_QWORD *)&v172[0] + 1) = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    *(_QWORD *)&v172[1] = v128;
    *((_QWORD *)&v172[1] + 1) = v129;
    swift_getOpaqueTypeConformance2();
    sub_23DDC5E58();
    (*(void (**)(char *, uint64_t))(v131 + 8))(v132, v133);
    sub_23DCF59A8(v162, type metadata accessor for OvernightMetricsChartLayout);
    v105 = v141;
  }
  else
  {
    swift_bridgeObjectRelease();
    v94 = v61;
    v95 = v163;
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v163, v63, v59);
    v96 = v60[v161[12]];
    memcpy(v175, &v60[v161[14]], 0x119uLL);
    sub_23DD144A8((uint64_t)v175, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
    sub_23DD35E8C(v172);
    sub_23DD144A8((uint64_t)v175, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CCE4);
    memcpy(v173, v172, sizeof(v173));
    sub_23DCFE908((uint64_t *)v173);
    v97 = *(_QWORD *)&v173[160];
    sub_23DD144A8((uint64_t)v175, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
    sub_23DD35E8C(v171);
    sub_23DD144A8((uint64_t)v175, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CCE4);
    memcpy(v174, v171, sizeof(v174));
    sub_23DCFE908(v174);
    v98 = v174[21];
    v99 = (uint64_t)v159;
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(&v159[*(int *)(v157 + 32)], v95, v59);
    *(double *)v99 = a3;
    *(double *)(v99 + 8) = a4;
    *(_BYTE *)(v99 + 16) = v96;
    *(_QWORD *)(v99 + 24) = v97;
    *(_QWORD *)(v99 + 32) = v98;
    sub_23DDC5B58();
    sub_23DDC6410();
    sub_23DDC63F8();
    swift_release();
    sub_23DDC5B64();
    swift_release();
    swift_release();
    sub_23DDC5B58();
    sub_23DDC6410();
    sub_23DDC6404();
    swift_release();
    sub_23DDC5B64();
    swift_release();
    swift_release();
    v100 = sub_23DDC5B4C();
    swift_release();
    swift_release();
    v101 = v158;
    sub_23DCF58EC(v99, v158, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartWarmupProgressCounter);
    *(_QWORD *)(v101 + *(int *)(v166 + 36)) = v100;
    sub_23DCF59A8(v99, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartWarmupProgressCounter);
    v102 = v160;
    sub_23DCFBB58(v101, v160, (uint64_t (*)(_QWORD))sub_23DD875F8);
    sub_23DCF58EC(v102, v167, (uint64_t (*)(_QWORD))sub_23DD875F8);
    swift_storeEnumTagMultiPayload();
    sub_23DD87914();
    v103 = sub_23DD87728();
    v104 = sub_23DD877E8();
    *(_QWORD *)&v172[0] = v168;
    *((_QWORD *)&v172[0] + 1) = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    *(_QWORD *)&v172[1] = v103;
    *((_QWORD *)&v172[1] + 1) = v104;
    swift_getOpaqueTypeConformance2();
    sub_23DDC5E58();
    sub_23DCF59A8(v102, (uint64_t (*)(_QWORD))sub_23DD875F8);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v163, v59);
    v105 = v58;
  }
  return sub_23DCF59A8(v105, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
}

uint64_t sub_23DD85720@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v40;
  void (*v41)(char *, uint64_t, uint64_t);
  char v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;

  v3 = v2;
  v47 = a1;
  v51 = a2;
  sub_23DCF6898(0, qword_256CFEEF0, (void (*)(uint64_t))MEMORY[0x24BE3FC10]);
  MEMORY[0x24BDAC7A8](v4);
  v45 = (char *)&v44 - v5;
  v6 = type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23DDC53A8();
  v10 = *(_QWORD *)(v9 - 8);
  v49 = v9;
  v50 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v48 = (uint64_t)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x24BDAC7A8](v12);
  v46 = (uint64_t)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v44 - v15;
  v17 = sub_23DDC52DC();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v44 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v44 - v21;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v44 - v24;
  v26 = (uint64_t)&v3[*(int *)(type metadata accessor for OvernightMetricsChart(0) + 44)];
  sub_23DD8ACAC(v26, (uint64_t)v16, (uint64_t)&qword_2543266F8, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DCF6898);
  v27 = type metadata accessor for OvernightMetricsWarmupProgress();
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48);
  if (v28(v16, 1, v27) == 1)
  {
    sub_23DD8AB00((uint64_t)v16, (uint64_t)&qword_2543266F8, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(_QWORD))sub_23DCF6898);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v22, v16, v17);
    sub_23DCF59A8((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
    v29 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v29(v25, v22, v17);
    if ((sub_23DDC52A0() & 1) == 0)
    {
      v32 = v51;
      v29(v51, v25, v17);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v32, 0, 1, v17);
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
  }
  v30 = v50;
  if (*v3 != 1)
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v51, 1, 1, v17);
  sub_23DCF58EC(v47, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  v31 = v49;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v8, 1, v49) == 1)
  {
    sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v51, 1, 1, v17);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v48, v8, v31);
  v34 = v46;
  sub_23DD8ACAC(v26, v46, (uint64_t)&qword_2543266F8, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DCF6898);
  if (v28((char *)v34, 1, v27) == 1)
  {
    sub_23DD8AB00(v34, (uint64_t)&qword_2543266F8, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(_QWORD))sub_23DCF6898);
    v35 = (uint64_t)v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v45, 1, 1, v17);
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v48, v49);
    sub_23DD8AB00(v35, (uint64_t)qword_256CFEEF0, (uint64_t)MEMORY[0x24BE3FC10], (uint64_t (*)(_QWORD))sub_23DCF6898);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v51, 1, 1, v17);
  }
  v36 = *(_QWORD *)(v34 + *(int *)(v27 + 20));
  swift_bridgeObjectRetain();
  sub_23DCF59A8(v34, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
  if (*(_QWORD *)(v36 + 16) && (v37 = sub_23DD768A4(v48), (v38 & 1) != 0))
  {
    v35 = (uint64_t)v45;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v45, *(_QWORD *)(v36 + 56) + *(_QWORD *)(v18 + 72) * v37, v17);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v39(v35, 0, 1, v17);
  }
  else
  {
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v35 = (uint64_t)v45;
    v39((uint64_t)v45, 1, 1, v17);
  }
  v40 = v44;
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v35, 1, v17) == 1)
    goto LABEL_16;
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 32);
  v41(v40, v35, v17);
  v42 = sub_23DDC52A0();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v48, v49);
  if ((v42 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v40, v17);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v51, 1, 1, v17);
  }
  v43 = v51;
  v41(v51, (uint64_t)v40, v17);
  return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v39)(v43, 0, 1, v17);
}

uint64_t sub_23DD85C38@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[280];
  _BYTE v47[288];
  _OWORD v48[18];

  v45 = a1;
  v44 = type metadata accessor for OvernightMetricsChartLayout(0);
  MEMORY[0x24BDAC7A8](v44);
  v43 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v40 - v8;
  v10 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v13);
  v15 = (_QWORD *)((char *)&v40 - v14);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v40 - v17;
  v19 = (int *)type metadata accessor for OvernightMetricsChart(0);
  v20 = *(_QWORD *)(v3 + v19[5]);
  sub_23DD8ACAC(v3 + v19[6], (uint64_t)v9, (uint64_t)&qword_254326A48, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DCF6898);
  swift_bridgeObjectRetain();
  _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0();
  v22 = v21;
  v24 = v23;
  memcpy(v47, (const void *)(v3 + v19[14]), 0x119uLL);
  sub_23DD144A8((uint64_t)v47, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
  sub_23DD35E8C(v46);
  sub_23DD144A8((uint64_t)v47, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CCE4);
  memcpy(v48, v46, 0x118uLL);
  sub_23DCFE908((uint64_t *)v48);
  v25 = *((_QWORD *)&v48[5] + 1);
  v26 = *(_QWORD *)&v48[6];
  v27 = BYTE8(v48[6]);
  v41 = v48[8];
  v42 = v48[7];
  v40 = v48[9];
  v28 = v48[10];
  v29 = (uint64_t)v15 + v10[5];
  v30 = type metadata accessor for OvernightMetricsChartPoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  *v15 = v20;
  sub_23DD48FF0((uint64_t)v9, v29);
  v31 = (_QWORD *)((char *)v15 + v10[6]);
  *v31 = v22;
  v31[1] = v24;
  *(double *)((char *)v15 + v10[8]) = a2;
  *(double *)((char *)v15 + v10[9]) = a3;
  v32 = (char *)v15 + v10[7];
  *(_QWORD *)v32 = v25;
  *((_QWORD *)v32 + 1) = v26;
  v32[16] = v27;
  *(_OWORD *)(v32 + 24) = v42;
  *(_OWORD *)(v32 + 40) = v41;
  *(_OWORD *)(v32 + 56) = v40;
  *(_OWORD *)(v32 + 72) = v28;
  sub_23DCFBB58((uint64_t)v15, (uint64_t)v18, type metadata accessor for OvernightMetricsChartLayout.Configuration);
  sub_23DCF58EC((uint64_t)v18, (uint64_t)v15, type metadata accessor for OvernightMetricsChartLayout.Configuration);
  v33 = v43;
  sub_23DCF58EC((uint64_t)v15, v43, type metadata accessor for OvernightMetricsChartLayout.Configuration);
  sub_23DCF58EC((uint64_t)v15, (uint64_t)v12, type metadata accessor for OvernightMetricsChartLayout.Configuration);
  sub_23DD799BC(v12, 7, (uint64_t)v46);
  sub_23DCF59A8((uint64_t)v15, type metadata accessor for OvernightMetricsChartLayout.Configuration);
  v34 = v45;
  v35 = v33 + *(int *)(v44 + 20);
  v36 = *(_OWORD *)&v46[80];
  *(_OWORD *)(v35 + 64) = *(_OWORD *)&v46[64];
  *(_OWORD *)(v35 + 80) = v36;
  *(_OWORD *)(v35 + 96) = *(_OWORD *)&v46[96];
  *(_QWORD *)(v35 + 112) = *(_QWORD *)&v46[112];
  v37 = *(_OWORD *)&v46[16];
  *(_OWORD *)v35 = *(_OWORD *)v46;
  *(_OWORD *)(v35 + 16) = v37;
  v38 = *(_OWORD *)&v46[48];
  *(_OWORD *)(v35 + 32) = *(_OWORD *)&v46[32];
  *(_OWORD *)(v35 + 48) = v38;
  sub_23DCFBB58(v33, v34, type metadata accessor for OvernightMetricsChartLayout);
  return sub_23DCF59A8((uint64_t)v18, type metadata accessor for OvernightMetricsChartLayout.Configuration);
}

unint64_t sub_23DD85FB0(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int *v4;
  uint64_t v5;
  _BYTE *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  double v14;
  unint64_t v15;
  uint64_t v17;
  _BYTE v18[280];
  _BYTE v19[288];
  uint64_t v20[36];

  v2 = v1;
  v4 = (int *)type metadata accessor for OvernightMetricsChartBaselineBandColorValues();
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = (int *)type metadata accessor for OvernightMetricsChart(0);
  memcpy(v19, &v1[v7[14]], 0x119uLL);
  sub_23DD144A8((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
  sub_23DD35E8C(v18);
  sub_23DD144A8((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CCE4);
  memcpy(v20, v18, 0x118uLL);
  v8 = v20[0];
  v9 = v20[1];
  v10 = v20[2];
  sub_23DCFBC78(v20[0]);
  sub_23DCFE908(v20);
  if (!v8)
    return MEMORY[0x24BEE4AF8];
  HIDWORD(v17) = *v2;
  v11 = *(_QWORD *)&v2[v7[9]];
  sub_23DD8ACAC((uint64_t)&v2[v7[6]], (uint64_t)&v6[v4[6]], (uint64_t)&qword_254326A48, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DCF6898);
  sub_23DCF58EC((uint64_t)&v2[v7[5]], (uint64_t)&v6[v4[7]], (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
  sub_23DCF58EC((uint64_t)&v2[v7[13]], (uint64_t)&v6[v4[9]], type metadata accessor for OvernightMetricsChart.Derivations);
  sub_23DCF58EC(a1, (uint64_t)&v6[v4[10]], type metadata accessor for OvernightMetricsChartLayout);
  *v6 = BYTE4(v17);
  *((_QWORD *)v6 + 1) = v11;
  v12 = (uint64_t *)&v6[v4[8]];
  *v12 = v8;
  v12[1] = v9;
  v12[2] = v10;
  v13 = &v2[v7[7]];
  if (v13[8])
    v14 = 0.0;
  else
    v14 = *(double *)v13;
  swift_bridgeObjectRetain();
  v15 = sub_23DD6824C(v14);
  sub_23DCF59A8((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartBaselineBandColorValues);
  return v15;
}

uint64_t sub_23DD861BC@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _BYTE v31[287];
  char v32;
  _BYTE v33[296];

  v30 = a1;
  v27 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  MEMORY[0x24BDAC7A8](v27);
  v26 = (uint64_t)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v26 - v4;
  v6 = MEMORY[0x24BEE08B8];
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v26 - v11;
  v32 = *v1;
  v13 = (int *)type metadata accessor for OvernightMetricsChart(0);
  v14 = (uint64_t)&v1[v13[13]];
  v28 = v12;
  sub_23DD8ACAC(v14, (uint64_t)v12, (uint64_t)&qword_254326A60, (uint64_t)v6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DD04550);
  v15 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v16 = v14 + *(int *)(v15 + 20);
  v29 = v9;
  sub_23DD8ACAC(v16, (uint64_t)v9, (uint64_t)&qword_254326A60, (uint64_t)v6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DD04550);
  v17 = *(_QWORD *)&v1[v13[10]];
  v18 = *(_QWORD *)(v14 + *(int *)(v15 + 24));
  v19 = *(_QWORD *)&v1[v13[9]];
  sub_23DD8ACAC((uint64_t)&v1[v13[6]], (uint64_t)v5, (uint64_t)&qword_254326A48, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DCF6898);
  v20 = type metadata accessor for OvernightMetricsChartPoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v5, 1, v20) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23DD8AB00((uint64_t)v5, (uint64_t)&qword_254326A48, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(_QWORD))sub_23DCF6898);
    v21 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v22 = v17;
    v23 = v26;
    sub_23DCF58EC((uint64_t)&v5[*(int *)(v20 + 20)], v26, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricChartPointCollection);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23DCF59A8((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    v21 = *(_QWORD *)(v23 + *(int *)(v27 + 20));
    swift_bridgeObjectRetain();
    v24 = v23;
    v17 = v22;
    sub_23DCF59A8(v24, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricChartPointCollection);
  }
  memcpy(v33, &v1[v13[14]], 0x119uLL);
  sub_23DD144A8((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
  sub_23DD35E8C(v31);
  sub_23DD144A8((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CCE4);
  return sub_23DD15718(v31, &v32, (uint64_t)v28, (uint64_t)v29, v17, v18, v19, v21, v30);
}

void sub_23DD864D4(uint64_t a1, uint64_t a2, char a3)
{
  __int128 v3;
  __int128 v4;
  uint64_t KeyPath;
  _OWORD v6[4];
  uint64_t v7;

  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v7 = *(_QWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  if ((a3 & 1) != 0)
  {
    if (qword_256CFC0B8 != -1)
      swift_once();
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    sub_23DD8AB3C((uint64_t)v6);
    sub_23DCF535C((unint64_t *)&qword_256CFC1C0, (uint64_t (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState, (uint64_t)&unk_23DDCAF88);
    sub_23DDC5204();
    sub_23DD8AC5C((uint64_t)v6);
    swift_release();
  }
}

uint64_t sub_23DD865FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23DDC63C8();
  v10 = v9;
  sub_23DCF58EC(v2, (uint64_t)v7, type metadata accessor for OvernightMetricsChart);
  v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v12 = swift_allocObject();
  sub_23DCFBB58((uint64_t)v7, v12 + v11, type metadata accessor for OvernightMetricsChart);
  *a2 = v8;
  a2[1] = v10;
  v13 = sub_23DD87534();
  result = sub_23DD8ACAC(v2 + *(int *)(a1 + 52), (uint64_t)a2 + *(int *)(v13 + 52), (uint64_t)&qword_254326A60, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DD04550);
  v15 = (uint64_t *)((char *)a2 + *(int *)(v13 + 56));
  *v15 = sub_23DD87530;
  v15[1] = v12;
  return result;
}

uint64_t OvernightMetricsChart.init(timeScope:chartPoints:emphasizedChartPoint:emphasizedDataType:medialRange:visibleDataTypes:keyDates:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  _BYTE *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  v51 = a5;
  v52 = a6;
  v53 = a4;
  v54 = a3;
  v50 = a7;
  sub_23DCF6898(0, qword_256CFC6B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChart.Derivations);
  MEMORY[0x24BDAC7A8](v9);
  v49 = (char *)&v45 - v10;
  sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x24BDAC7A8](v11);
  v48 = (char *)&v45 - v12;
  sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  MEMORY[0x24BDAC7A8](v13);
  v47 = (uint64_t)&v45 - v14;
  v15 = sub_23DDC5180();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23DDC51E0();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v46 = (uint64_t)&v45 - v28;
  v57 = *a1;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v16 + 104))(v18, *MEMORY[0x24BDCEF70], v15, v27);
  sub_23DDC518C();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  *(_QWORD *)v25 = a2;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(&v25[*(int *)(v23 + 20)], v22, v19);
  swift_bridgeObjectRetain();
  v29 = sub_23DDC536C();
  v55 = a2;
  v30 = swift_bridgeObjectRetain();
  v31 = sub_23DD47248(v30, (void (*)(uint64_t *__return_ptr, uint64_t))sub_23DD45158);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v31 + 16) >= *(_QWORD *)(v29 + 16))
    v32 = *(_QWORD *)(v29 + 16);
  else
    v32 = *(_QWORD *)(v31 + 16);
  if (v32)
  {
    sub_23DD47350();
    v33 = sub_23DDC6AF4();
  }
  else
  {
    v33 = MEMORY[0x24BEE4B00];
  }
  v56 = v33;
  v34 = swift_bridgeObjectRetain();
  sub_23DD4813C(v34, v31, 1, &v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v35 = v56;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v25[*(int *)(v23 + 24)] = v35;
  v36 = (uint64_t)v25;
  v37 = v46;
  sub_23DCFBB58(v36, v46, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
  v38 = v54;
  v39 = v47;
  sub_23DD8ACAC(v54, v47, (uint64_t)&qword_254326A48, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DCF6898);
  v40 = type metadata accessor for OvernightMetricsWarmupProgress();
  v41 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v48, 1, 1, v40);
  v42 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v43 = (uint64_t)v49;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v49, 1, 1, v42);
  OvernightMetricsChart.init(timeScope:chartPointCollection:emphasizedChartPoint:tabProgress:shouldMergeOverlappingIndividualMetrics:visibleDataTypes:keyDates:warmupProgress:alignWarmupProgressCounterToChartPlotArea:precomputedDerivations:)(&v57, v37, v39, 0, 1, 1, v51, v52, v50, v41, 0, v43);
  sub_23DD8AB00(v53, (uint64_t)&unk_256CFED88, (uint64_t)MEMORY[0x24BE3FE20], (uint64_t (*)(_QWORD))sub_23DCF6898);
  return sub_23DD8AB00(v38, (uint64_t)&qword_254326A48, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(_QWORD))sub_23DCF6898);
}

uint64_t OvernightMetricsChart.init(timeScope:chartPointCollection:emphasizedChartPoint:tabProgress:shouldMergeOverlappingIndividualMetrics:visibleDataTypes:keyDates:warmupProgress:alignWarmupProgressCounterToChartPlotArea:precomputedDerivations:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, _QWORD *a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD v54[36];
  _BYTE v55[296];

  v50 = a3;
  v51 = a8;
  LODWORD(v47) = a6;
  v44 = a5;
  v43 = a4;
  v16 = sub_23DDC51E0();
  v40 = *(_QWORD *)(v16 - 8);
  v41 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v42 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x24BDAC7A8](v39);
  v49 = (uint64_t)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, qword_256CFC6B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChart.Derivations);
  MEMORY[0x24BDAC7A8](v19);
  v52 = (uint64_t)&v38 - v20;
  v21 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v45 = *(_QWORD *)(v21 - 8);
  v46 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v48 = (uint64_t)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  v24 = (int *)type metadata accessor for OvernightMetricsChart(0);
  v25 = (uint64_t)&a9[v24[6]];
  v26 = type metadata accessor for OvernightMetricsChartPoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = &a9[v24[7]];
  *(_QWORD *)v27 = 0;
  v27[8] = 1;
  v28 = (uint64_t)&a9[v24[11]];
  v29 = type metadata accessor for OvernightMetricsWarmupProgress();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  v30 = &a9[v24[14]];
  v54[0] = swift_getKeyPath();
  sub_23DD50E00((uint64_t)v54);
  sub_23DCFBB58((uint64_t)v54, (uint64_t)v55, (uint64_t (*)(_QWORD))sub_23DD50E08);
  memcpy(v30, v55, 0x119uLL);
  *a9 = v23;
  sub_23DCF58EC(a2, (uint64_t)&a9[v24[5]], (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
  sub_23DD879B4(v50, v25, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  *(_QWORD *)v27 = v43;
  v27[8] = v44 & 1;
  a9[v24[8]] = (_BYTE)v47;
  v53 = a7;
  v47 = a7;
  swift_bridgeObjectRetain();
  sub_23DD45160(&v53);
  *(_QWORD *)&a9[v24[9]] = v53;
  *(_QWORD *)&a9[v24[10]] = v51;
  swift_bridgeObjectRetain();
  sub_23DD879B4(a10, v28, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  a9[v24[12]] = a11 & 1;
  v31 = v52;
  sub_23DD8ACAC(a12, v52, (uint64_t)qword_256CFC6B0, (uint64_t)type metadata accessor for OvernightMetricsChart.Derivations, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DCF6898);
  v32 = a2;
  v33 = v49;
  sub_23DCF58EC(a2, v49, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v31, 1, v46) == 1)
  {
    v34 = (uint64_t)v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v42, v33 + *(int *)(v39 + 20), v41);
    v35 = v47[2];
    swift_bridgeObjectRelease();
    v36 = v48;
    OvernightMetricsChart.Derivations.init(keyDates:calendar:iconCount:)(v51, v34, v35, v48);
    sub_23DD8AB00(a12, (uint64_t)qword_256CFC6B0, (uint64_t)type metadata accessor for OvernightMetricsChart.Derivations, (uint64_t (*)(_QWORD))sub_23DCF6898);
    sub_23DD8AB00(a10, (uint64_t)&qword_2543266F8, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(_QWORD))sub_23DCF6898);
    sub_23DD8AB00(v50, (uint64_t)&qword_254326A48, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(_QWORD))sub_23DCF6898);
    sub_23DCF59A8(v32, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
    sub_23DCF59A8(v33, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
    sub_23DD8AB00(v52, (uint64_t)qword_256CFC6B0, (uint64_t)type metadata accessor for OvernightMetricsChart.Derivations, (uint64_t (*)(_QWORD))sub_23DCF6898);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DD8AB00(a12, (uint64_t)qword_256CFC6B0, (uint64_t)type metadata accessor for OvernightMetricsChart.Derivations, (uint64_t (*)(_QWORD))sub_23DCF6898);
    sub_23DD8AB00(a10, (uint64_t)&qword_2543266F8, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(_QWORD))sub_23DCF6898);
    sub_23DD8AB00(v50, (uint64_t)&qword_254326A48, (uint64_t)type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(_QWORD))sub_23DCF6898);
    sub_23DCF59A8(a2, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
    sub_23DCF59A8(v33, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
    v36 = v48;
    sub_23DCFBB58(v52, v48, type metadata accessor for OvernightMetricsChart.Derivations);
  }
  return sub_23DCFBB58(v36, (uint64_t)&a9[v24[13]], type metadata accessor for OvernightMetricsChart.Derivations);
}

uint64_t sub_23DD87038@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DCF535C((unint64_t *)&qword_256CFC1C0, (uint64_t (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState, (uint64_t)&unk_23DDCAF88);
  sub_23DDC5210();
  swift_release();
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v6 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(v3 + 64);
  *(_QWORD *)(a2 + 64) = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DD870E8(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  _OWORD v4[4];
  uint64_t v5;

  v1 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v1;
  v5 = *(_QWORD *)(a1 + 64);
  v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  swift_getKeyPath();
  sub_23DD8AB3C((uint64_t)v4);
  sub_23DCF535C((unint64_t *)&qword_256CFC1C0, (uint64_t (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState, (uint64_t)&unk_23DDCAF88);
  sub_23DDC5204();
  sub_23DD8AC5C((uint64_t)v4);
  return swift_release();
}

uint64_t _s15HealthBalanceUI21OvernightMetricsChartV11DerivationsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t (*v16)(void);
  char v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t (*v28)(void);
  char v29;
  uint64_t (*v30)(void);
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v38 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v36 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v33 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v33 - v10;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v33 - v13;
  sub_23DDC512C();
  v37 = sub_23DCF535C(&qword_256CFCC60, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  v15 = sub_23DDC66C8();
  v16 = MEMORY[0x24BEE08B8];
  sub_23DD8ACAC(a1, (uint64_t)v14, (uint64_t)&qword_254326A60, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DD04550);
  sub_23DD8ACAC(a2, (uint64_t)v11, (uint64_t)&qword_254326A60, (uint64_t)v16, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DD04550);
  if ((v15 & 1) == 0)
  {
    v30 = MEMORY[0x24BEE08B8];
    sub_23DD8AB00((uint64_t)v11, (uint64_t)&qword_254326A60, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD))sub_23DD04550);
    v31 = (uint64_t)v14;
LABEL_7:
    sub_23DD8AB00(v31, (uint64_t)&qword_254326A60, (uint64_t)v30, (uint64_t (*)(_QWORD))sub_23DD04550);
    goto LABEL_8;
  }
  v34 = a2;
  v35 = a1;
  v17 = sub_23DDC66C8();
  v18 = MEMORY[0x24BEE08B8];
  sub_23DD8AB00((uint64_t)v11, (uint64_t)&qword_254326A60, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD))sub_23DD04550);
  sub_23DD8AB00((uint64_t)v14, (uint64_t)&qword_254326A60, (uint64_t)v18, (uint64_t (*)(_QWORD))sub_23DD04550);
  if ((v17 & 1) == 0)
  {
LABEL_8:
    v29 = 0;
    return v29 & 1;
  }
  v19 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v20 = *(int *)(v19 + 20);
  v21 = v35 + v20;
  v22 = v34 + v20;
  v23 = sub_23DDC66C8();
  v24 = MEMORY[0x24BEE08B8];
  sub_23DD8ACAC(v21, (uint64_t)v8, (uint64_t)&qword_254326A60, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DD04550);
  v25 = v22;
  v26 = v36;
  sub_23DD8ACAC(v25, v36, (uint64_t)&qword_254326A60, (uint64_t)v24, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DD04550);
  if ((v23 & 1) == 0)
  {
    v30 = MEMORY[0x24BEE08B8];
    sub_23DD8AB00(v26, (uint64_t)&qword_254326A60, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD))sub_23DD04550);
    v31 = (uint64_t)v8;
    goto LABEL_7;
  }
  v27 = sub_23DDC66C8();
  v28 = MEMORY[0x24BEE08B8];
  sub_23DD8AB00(v26, (uint64_t)&qword_254326A60, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD))sub_23DD04550);
  sub_23DD8AB00((uint64_t)v8, (uint64_t)&qword_254326A60, (uint64_t)v28, (uint64_t (*)(_QWORD))sub_23DD04550);
  if ((v27 & 1) == 0)
    goto LABEL_8;
  v29 = sub_23DD411E8(*(_QWORD *)(v35 + *(int *)(v19 + 24)), *(_QWORD *)(v34 + *(int *)(v19 + 24)));
  return v29 & 1;
}

uint64_t type metadata accessor for OvernightMetricsChart(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFEDE8);
}

uint64_t sub_23DD87534()
{
  uint64_t result;

  result = qword_256CFED18;
  if (!qword_256CFED18)
  {
    type metadata accessor for OvernightMetricsChartSizingPlaceholder();
    sub_23DD3816C(255, &qword_256CFED20, (uint64_t (*)(uint64_t))sub_23DD875F8, (uint64_t (*)(uint64_t))sub_23DD87678, MEMORY[0x24BDEF3B8]);
    sub_23DCF535C(&qword_256CFED68, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartSizingPlaceholder, (uint64_t)&unk_23DDC9B18);
    sub_23DD8782C();
    type metadata accessor for ChartPlotSizeReader();
  }
  return result;
}

void sub_23DD875F8(uint64_t a1)
{
  sub_23DD3816C(a1, &qword_256CFED28, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartWarmupProgressCounter, (uint64_t (*)(uint64_t))sub_23DD8761C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
}

void sub_23DD8761C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFED30)
  {
    sub_23DDC5DEC();
    v0 = sub_23DDC5E7C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFED30);
  }
}

void sub_23DD87678(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_256CFED38)
  {
    sub_23DD3816C(255, &qword_256CFED40, (uint64_t (*)(uint64_t))type metadata accessor for AnimatableOvernightMetricsChart, (uint64_t (*)(uint64_t))sub_23DD8761C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v5[0] = v2;
    v5[1] = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    v5[2] = sub_23DD87728();
    v5[3] = sub_23DD877E8();
    v3 = MEMORY[0x242643B9C](a1, v5, MEMORY[0x24BDF38E8], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_256CFED38);
  }
}

unint64_t sub_23DD87728()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFED48;
  if (!qword_256CFED48)
  {
    sub_23DD3816C(255, &qword_256CFED40, (uint64_t (*)(uint64_t))type metadata accessor for AnimatableOvernightMetricsChart, (uint64_t (*)(uint64_t))sub_23DD8761C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFED50, (uint64_t (*)(uint64_t))type metadata accessor for AnimatableOvernightMetricsChart, (uint64_t)&unk_23DDCBF18);
    v3[1] = sub_23DCF535C(&qword_256CFED58, (uint64_t (*)(uint64_t))sub_23DD8761C, MEMORY[0x24BDEFB48]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFED48);
  }
  return result;
}

unint64_t sub_23DD877E8()
{
  unint64_t result;

  result = qword_256CFED60;
  if (!qword_256CFED60)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCB2A8, &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState);
    atomic_store(result, (unint64_t *)&qword_256CFED60);
  }
  return result;
}

unint64_t sub_23DD8782C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[6];

  result = qword_256CFED70;
  if (!qword_256CFED70)
  {
    sub_23DD3816C(255, &qword_256CFED20, (uint64_t (*)(uint64_t))sub_23DD875F8, (uint64_t (*)(uint64_t))sub_23DD87678, MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3 = sub_23DD87914();
    sub_23DD3816C(255, &qword_256CFED40, (uint64_t (*)(uint64_t))type metadata accessor for AnimatableOvernightMetricsChart, (uint64_t (*)(uint64_t))sub_23DD8761C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v5[2] = v4;
    v5[3] = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    v5[4] = sub_23DD87728();
    v5[5] = sub_23DD877E8();
    v5[0] = v3;
    v5[1] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEF3E0], v2, v5);
    atomic_store(result, (unint64_t *)&qword_256CFED70);
  }
  return result;
}

unint64_t sub_23DD87914()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFED78;
  if (!qword_256CFED78)
  {
    sub_23DD875F8(255);
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFED80, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartWarmupProgressCounter, (uint64_t)&unk_23DDC9980);
    v3[1] = sub_23DCF535C(&qword_256CFED58, (uint64_t (*)(uint64_t))sub_23DD8761C, MEMORY[0x24BDEFB48]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFED78);
  }
  return result;
}

uint64_t sub_23DD879B4(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_23DCF6898(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a2, a1, v6);
  return a2;
}

uint64_t sub_23DD87A00()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *initializeBufferWithCopyOfBuffer for OvernightMetricsChart(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v4;
  uint64_t v5;
  char *v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, int *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, _QWORD, uint64_t, int *);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  _QWORD *v108;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    v23 = v22 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a3[5];
    v6 = (char *)a1 + v5;
    v8 = (char *)a2 + v5;
    *(_QWORD *)((char *)a1 + v5) = *(_QWORD *)((char *)a2 + v5);
    v9 = type metadata accessor for OvernightMetricsChartPointCollection();
    v10 = *(int *)(v9 + 20);
    v11 = &v6[v10];
    v12 = &v8[v10];
    v13 = sub_23DDC51E0();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    *(_QWORD *)&v6[*(int *)(v9 + 24)] = *(_QWORD *)&v8[*(int *)(v9 + 24)];
    v15 = a3[6];
    v108 = a1;
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v19 = *((_QWORD *)v18 - 1);
    v20 = *(unsigned int (**)(char *, uint64_t, int *))(v19 + 48);
    swift_bridgeObjectRetain();
    if (v20(v17, 1, v18))
    {
      sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v24 = sub_23DDC512C();
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
      v25(v16, v17, v24);
      v26 = v18[5];
      v27 = &v16[v26];
      v28 = &v17[v26];
      v25(&v16[v26], &v17[v26], v24);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v25(&v27[*(int *)(v29 + 36)], &v28[*(int *)(v29 + 36)], v24);
      v30 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v27[v30[5]] = *(_QWORD *)&v28[v30[5]];
      *(_QWORD *)&v27[v30[6]] = *(_QWORD *)&v28[v30[6]];
      *(_QWORD *)&v27[v30[7]] = *(_QWORD *)&v28[v30[7]];
      v31 = v18[6];
      v32 = &v16[v31];
      v33 = &v17[v31];
      *(_OWORD *)v32 = *(_OWORD *)v33;
      v32[16] = v33[16];
      v16[v18[7]] = v17[v18[7]];
      v16[v18[8]] = v17[v18[8]];
      v16[v18[9]] = v17[v18[9]];
      v34 = v18[10];
      v35 = &v16[v34];
      v36 = &v17[v34];
      v37 = *((_QWORD *)v36 + 1);
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = v37;
      v38 = v18[11];
      v39 = &v16[v38];
      v40 = &v17[v38];
      v41 = *((_QWORD *)v40 + 1);
      *(_QWORD *)v39 = *(_QWORD *)v40;
      *((_QWORD *)v39 + 1) = v41;
      v42 = *(void (**)(char *, _QWORD, uint64_t, int *))(v19 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v42(v16, 0, 1, v18);
    }
    v43 = a3[7];
    v44 = a3[8];
    v45 = (char *)a1 + v43;
    v46 = (char *)a2 + v43;
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v45[8] = v46[8];
    *((_BYTE *)a1 + v44) = *((_BYTE *)a2 + v44);
    v47 = a3[10];
    *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
    *(_QWORD *)((char *)a1 + v47) = *(_QWORD *)((char *)a2 + v47);
    v48 = a3[11];
    v49 = (char *)a1 + v48;
    v50 = (char *)a2 + v48;
    v51 = type metadata accessor for OvernightMetricsWarmupProgress();
    v52 = *(_QWORD *)(v51 - 8);
    v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v53(v50, 1, v51))
    {
      sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      v55 = sub_23DDC52DC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v49, v50, v55);
      *(_QWORD *)&v49[*(int *)(v51 + 20)] = *(_QWORD *)&v50[*(int *)(v51 + 20)];
      v56 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56);
      swift_bridgeObjectRetain();
      v56(v49, 0, 1, v51);
    }
    v57 = a3[13];
    *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    v58 = (char *)a1 + v57;
    v59 = (char *)a2 + v57;
    v60 = sub_23DDC512C();
    v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
    v61(v58, v59, v60);
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v63 = v62;
    v61(&v58[*(int *)(v62 + 36)], &v59[*(int *)(v62 + 36)], v60);
    v64 = type metadata accessor for OvernightMetricsChart.Derivations(0);
    v65 = *(int *)(v64 + 20);
    v66 = &v58[v65];
    v67 = &v59[v65];
    v61(&v58[v65], &v59[v65], v60);
    v61(&v66[*(int *)(v63 + 36)], &v67[*(int *)(v63 + 36)], v60);
    *(_QWORD *)&v58[*(int *)(v64 + 24)] = *(_QWORD *)&v59[*(int *)(v64 + 24)];
    v68 = a3[14];
    v69 = (char *)a1 + v68;
    v70 = (char *)a2 + v68;
    v87 = *((_QWORD *)v70 + 1);
    v88 = *(_QWORD *)v70;
    v85 = *((_QWORD *)v70 + 3);
    v86 = *((_QWORD *)v70 + 2);
    v83 = *((_QWORD *)v70 + 5);
    v84 = *((_QWORD *)v70 + 4);
    v81 = *((_QWORD *)v70 + 7);
    v82 = *((_QWORD *)v70 + 6);
    v80 = *((_QWORD *)v70 + 8);
    v105 = *((_QWORD *)v70 + 10);
    v107 = *((_QWORD *)v70 + 9);
    v103 = *((_QWORD *)v70 + 12);
    v104 = *((_QWORD *)v70 + 11);
    v101 = *((_QWORD *)v70 + 14);
    v102 = *((_QWORD *)v70 + 13);
    v99 = *((_QWORD *)v70 + 16);
    v100 = *((_QWORD *)v70 + 15);
    v97 = *((_QWORD *)v70 + 18);
    v98 = *((_QWORD *)v70 + 17);
    v95 = *((_QWORD *)v70 + 20);
    v96 = *((_QWORD *)v70 + 19);
    v93 = *((_QWORD *)v70 + 22);
    v94 = *((_QWORD *)v70 + 21);
    v91 = *((_QWORD *)v70 + 24);
    v92 = *((_QWORD *)v70 + 23);
    v71 = *((_QWORD *)v70 + 27);
    v89 = *((_QWORD *)v70 + 26);
    v90 = *((_QWORD *)v70 + 25);
    v72 = *((_QWORD *)v70 + 28);
    v73 = *((_QWORD *)v70 + 29);
    v74 = *((_QWORD *)v70 + 30);
    v75 = *((_QWORD *)v70 + 31);
    v76 = *((_QWORD *)v70 + 32);
    v77 = *((_QWORD *)v70 + 33);
    v78 = *((_QWORD *)v70 + 34);
    LOBYTE(v64) = v70[280];
    swift_bridgeObjectRetain();
    sub_23DD0CB9C(v88, v87, v86, v85, v84, v83, v82, v81, v80, v107, v105, v104, v103, v102, v101, v100, v99, v98, v97,
      v96,
      v95,
      v94,
      v93,
      v92,
      v91,
      v90,
      v89,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v64);
    *(_QWORD *)v69 = v88;
    *((_QWORD *)v69 + 1) = v87;
    *((_QWORD *)v69 + 2) = v86;
    *((_QWORD *)v69 + 3) = v85;
    *((_QWORD *)v69 + 4) = v84;
    *((_QWORD *)v69 + 5) = v83;
    *((_QWORD *)v69 + 6) = v82;
    *((_QWORD *)v69 + 7) = v81;
    *((_QWORD *)v69 + 8) = v80;
    *((_QWORD *)v69 + 9) = v107;
    *((_QWORD *)v69 + 10) = v105;
    *((_QWORD *)v69 + 11) = v104;
    *((_QWORD *)v69 + 12) = v103;
    *((_QWORD *)v69 + 13) = v102;
    *((_QWORD *)v69 + 14) = v101;
    *((_QWORD *)v69 + 15) = v100;
    *((_QWORD *)v69 + 16) = v99;
    *((_QWORD *)v69 + 17) = v98;
    *((_QWORD *)v69 + 18) = v97;
    *((_QWORD *)v69 + 19) = v96;
    *((_QWORD *)v69 + 20) = v95;
    *((_QWORD *)v69 + 21) = v94;
    *((_QWORD *)v69 + 22) = v93;
    *((_QWORD *)v69 + 23) = v92;
    *((_QWORD *)v69 + 24) = v91;
    *((_QWORD *)v69 + 25) = v90;
    *((_QWORD *)v69 + 26) = v89;
    *((_QWORD *)v69 + 27) = v71;
    *((_QWORD *)v69 + 28) = v72;
    *((_QWORD *)v69 + 29) = v73;
    *((_QWORD *)v69 + 30) = v74;
    *((_QWORD *)v69 + 31) = v75;
    *((_QWORD *)v69 + 32) = v76;
    *((_QWORD *)v69 + 33) = v77;
    *((_QWORD *)v69 + 34) = v78;
    v69[280] = v64;
    return v108;
  }
  return (_QWORD *)v23;
}

uint64_t destroy for OvernightMetricsChart(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v4 = a1 + a2[5];
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v6 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  v7 = a1 + a2[6];
  v8 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v9 = sub_23DDC512C();
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v10(v7, v9);
    v11 = v7 + *(int *)(v8 + 20);
    v10(v11, v9);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v10(v11 + *(int *)(v12 + 36), v9);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = a1 + a2[11];
  v14 = type metadata accessor for OvernightMetricsWarmupProgress();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v15 = sub_23DDC52DC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
    swift_bridgeObjectRelease();
  }
  v16 = a1 + a2[13];
  v17 = sub_23DDC512C();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(v16, v17);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v20 = v19;
  v18(v16 + *(int *)(v19 + 36), v17);
  v21 = v16 + *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
  v18(v21, v17);
  v18(v21 + *(int *)(v20 + 36), v17);
  swift_bridgeObjectRelease();
  v22 = a1 + a2[14];
  v25 = *(_OWORD *)(v22 + 240);
  v26 = *(_OWORD *)(v22 + 256);
  v24 = *(_OWORD *)(v22 + 208);
  return sub_23DD0CCE4(*(_QWORD *)v22, *(_QWORD *)(v22 + 8), *(_QWORD *)(v22 + 16), *(_QWORD *)(v22 + 24), *(_QWORD *)(v22 + 32), *(_QWORD *)(v22 + 40), *(_QWORD *)(v22 + 48), *(_QWORD *)(v22 + 56), *(_QWORD *)(v22 + 64), *(_QWORD *)(v22 + 72), *(_QWORD *)(v22 + 80), *(_QWORD *)(v22 + 88), *(_QWORD *)(v22 + 96), *(_QWORD *)(v22 + 104), *(_QWORD *)(v22 + 112), *(_QWORD *)(v22 + 120), *(_QWORD *)(v22 + 128), *(_QWORD *)(v22 + 136), *(_QWORD *)(v22 + 144),
           *(_QWORD *)(v22 + 152),
           *(_QWORD *)(v22 + 160),
           *(_QWORD *)(v22 + 168),
           *(_QWORD *)(v22 + 176),
           *(_QWORD *)(v22 + 184),
           *(_QWORD *)(v22 + 192),
           *(_QWORD *)(v22 + 200),
           v24,
           *((uint64_t *)&v24 + 1),
           *(_QWORD *)(v22 + 224),
           *(_QWORD *)(v22 + 232),
           v25,
           *((uint64_t *)&v25 + 1),
           v26,
           *((uint64_t *)&v26 + 1),
           *(_QWORD *)(v22 + 272),
           *(_BYTE *)(v22 + 280));
}

_BYTE *initializeWithCopy for OvernightMetricsChart(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  void (*v13)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, int *);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, _QWORD, uint64_t, int *);
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  void (*v59)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  _BYTE *v106;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_QWORD *)&a1[v6] = *(_QWORD *)&a2[v6];
  v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  v10 = *(int *)(v9 + 20);
  v104 = &v7[v10];
  v11 = &v8[v10];
  v12 = sub_23DDC51E0();
  v13 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v104, v11, v12);
  *(_QWORD *)&v7[*(int *)(v9 + 24)] = *(_QWORD *)&v8[*(int *)(v9 + 24)];
  v106 = a1;
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = a2;
  v17 = &a2[v14];
  v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v19 = *((_QWORD *)v18 - 1);
  v20 = *(unsigned int (**)(char *, uint64_t, int *))(v19 + 48);
  swift_bridgeObjectRetain();
  if (v20(v17, 1, v18))
  {
    sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v15, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = sub_23DDC512C();
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v23(v15, v17, v22);
    v24 = v18[5];
    v25 = &v15[v24];
    v26 = &v17[v24];
    v23(&v15[v24], &v17[v24], v22);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v22);
    v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v25[v28[5]] = *(_QWORD *)&v26[v28[5]];
    *(_QWORD *)&v25[v28[6]] = *(_QWORD *)&v26[v28[6]];
    *(_QWORD *)&v25[v28[7]] = *(_QWORD *)&v26[v28[7]];
    v29 = v18[6];
    v30 = &v15[v29];
    v31 = &v17[v29];
    *(_OWORD *)v30 = *(_OWORD *)v31;
    v30[16] = v31[16];
    v15[v18[7]] = v17[v18[7]];
    v15[v18[8]] = v17[v18[8]];
    v15[v18[9]] = v17[v18[9]];
    v32 = v18[10];
    v33 = &v15[v32];
    v34 = &v17[v32];
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = v18[11];
    v37 = &v15[v36];
    v38 = &v17[v36];
    v39 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = v39;
    v40 = *(void (**)(char *, _QWORD, uint64_t, int *))(v19 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40(v15, 0, 1, v18);
  }
  v41 = a3[7];
  v42 = a3[8];
  v43 = &v106[v41];
  v44 = &v16[v41];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v43[8] = v44[8];
  v106[v42] = v16[v42];
  v45 = a3[10];
  *(_QWORD *)&v106[a3[9]] = *(_QWORD *)&v16[a3[9]];
  *(_QWORD *)&v106[v45] = *(_QWORD *)&v16[v45];
  v46 = a3[11];
  v47 = &v106[v46];
  v48 = &v16[v46];
  v49 = type metadata accessor for OvernightMetricsWarmupProgress();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v51(v48, 1, v49))
  {
    sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    v53 = sub_23DDC52DC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v47, v48, v53);
    *(_QWORD *)&v47[*(int *)(v49 + 20)] = *(_QWORD *)&v48[*(int *)(v49 + 20)];
    v54 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56);
    swift_bridgeObjectRetain();
    v54(v47, 0, 1, v49);
  }
  v55 = a3[13];
  v106[a3[12]] = v16[a3[12]];
  v56 = &v106[v55];
  v57 = &v16[v55];
  v58 = sub_23DDC512C();
  v59 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
  v59(v56, v57, v58);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v61 = v60;
  v59(&v56[*(int *)(v60 + 36)], &v57[*(int *)(v60 + 36)], v58);
  v62 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v63 = *(int *)(v62 + 20);
  v64 = &v56[v63];
  v65 = &v57[v63];
  v59(&v56[v63], &v57[v63], v58);
  v59(&v64[*(int *)(v61 + 36)], &v65[*(int *)(v61 + 36)], v58);
  *(_QWORD *)&v56[*(int *)(v62 + 24)] = *(_QWORD *)&v57[*(int *)(v62 + 24)];
  v66 = a3[14];
  v67 = &v106[v66];
  v68 = &v16[v66];
  v85 = *((_QWORD *)v68 + 1);
  v86 = *(_QWORD *)v68;
  v83 = *((_QWORD *)v68 + 3);
  v84 = *((_QWORD *)v68 + 2);
  v81 = *((_QWORD *)v68 + 5);
  v82 = *((_QWORD *)v68 + 4);
  v79 = *((_QWORD *)v68 + 7);
  v80 = *((_QWORD *)v68 + 6);
  v78 = *((_QWORD *)v68 + 8);
  v103 = *((_QWORD *)v68 + 10);
  v105 = *((_QWORD *)v68 + 9);
  v101 = *((_QWORD *)v68 + 12);
  v102 = *((_QWORD *)v68 + 11);
  v99 = *((_QWORD *)v68 + 14);
  v100 = *((_QWORD *)v68 + 13);
  v97 = *((_QWORD *)v68 + 16);
  v98 = *((_QWORD *)v68 + 15);
  v95 = *((_QWORD *)v68 + 18);
  v96 = *((_QWORD *)v68 + 17);
  v93 = *((_QWORD *)v68 + 20);
  v94 = *((_QWORD *)v68 + 19);
  v91 = *((_QWORD *)v68 + 22);
  v92 = *((_QWORD *)v68 + 21);
  v89 = *((_QWORD *)v68 + 24);
  v90 = *((_QWORD *)v68 + 23);
  v69 = *((_QWORD *)v68 + 27);
  v87 = *((_QWORD *)v68 + 26);
  v88 = *((_QWORD *)v68 + 25);
  v70 = *((_QWORD *)v68 + 28);
  v71 = *((_QWORD *)v68 + 29);
  v72 = *((_QWORD *)v68 + 30);
  v73 = *((_QWORD *)v68 + 31);
  v74 = *((_QWORD *)v68 + 32);
  v75 = *((_QWORD *)v68 + 33);
  v76 = *((_QWORD *)v68 + 34);
  LOBYTE(v62) = v68[280];
  swift_bridgeObjectRetain();
  sub_23DD0CB9C(v86, v85, v84, v83, v82, v81, v80, v79, v78, v105, v103, v102, v101, v100, v99, v98, v97, v96, v95,
    v94,
    v93,
    v92,
    v91,
    v90,
    v89,
    v88,
    v87,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74,
    v75,
    v76,
    v62);
  *(_QWORD *)v67 = v86;
  *((_QWORD *)v67 + 1) = v85;
  *((_QWORD *)v67 + 2) = v84;
  *((_QWORD *)v67 + 3) = v83;
  *((_QWORD *)v67 + 4) = v82;
  *((_QWORD *)v67 + 5) = v81;
  *((_QWORD *)v67 + 6) = v80;
  *((_QWORD *)v67 + 7) = v79;
  *((_QWORD *)v67 + 8) = v78;
  *((_QWORD *)v67 + 9) = v105;
  *((_QWORD *)v67 + 10) = v103;
  *((_QWORD *)v67 + 11) = v102;
  *((_QWORD *)v67 + 12) = v101;
  *((_QWORD *)v67 + 13) = v100;
  *((_QWORD *)v67 + 14) = v99;
  *((_QWORD *)v67 + 15) = v98;
  *((_QWORD *)v67 + 16) = v97;
  *((_QWORD *)v67 + 17) = v96;
  *((_QWORD *)v67 + 18) = v95;
  *((_QWORD *)v67 + 19) = v94;
  *((_QWORD *)v67 + 20) = v93;
  *((_QWORD *)v67 + 21) = v92;
  *((_QWORD *)v67 + 22) = v91;
  *((_QWORD *)v67 + 23) = v90;
  *((_QWORD *)v67 + 24) = v89;
  *((_QWORD *)v67 + 25) = v88;
  *((_QWORD *)v67 + 26) = v87;
  *((_QWORD *)v67 + 27) = v69;
  *((_QWORD *)v67 + 28) = v70;
  *((_QWORD *)v67 + 29) = v71;
  *((_QWORD *)v67 + 30) = v72;
  *((_QWORD *)v67 + 31) = v73;
  *((_QWORD *)v67 + 32) = v74;
  *((_QWORD *)v67 + 33) = v75;
  *((_QWORD *)v67 + 34) = v76;
  v67[280] = v62;
  return v106;
}

_BYTE *assignWithCopy for OvernightMetricsChart(_BYTE *a1, _BYTE *a2, int *a3)
{
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, int *);
  int v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void (*v39)(char *, _QWORD, uint64_t, int *);
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  void (*v79)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  char v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;

  v5 = a1;
  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_QWORD *)&a1[v6] = *(_QWORD *)&a2[v6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  v10 = *(int *)(v9 + 20);
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_23DDC51E0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(_QWORD *)&v7[*(int *)(v9 + 24)] = *(_QWORD *)&v8[*(int *)(v9 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[6];
  v15 = &v5[v14];
  v16 = &a2[v14];
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  LODWORD(v8) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  v143 = v5;
  if ((_DWORD)v8)
  {
    if (v20)
      goto LABEL_6;
    v22 = sub_23DDC512C();
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v23(v15, v16, v22);
    v24 = v17[5];
    v25 = &v15[v24];
    v26 = &v16[v24];
    v23(&v15[v24], &v16[v24], v22);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v22);
    v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v25[v28[5]] = *(_QWORD *)&v26[v28[5]];
    *(_QWORD *)&v25[v28[6]] = *(_QWORD *)&v26[v28[6]];
    *(_QWORD *)&v25[v28[7]] = *(_QWORD *)&v26[v28[7]];
    v29 = v17[6];
    v30 = &v15[v29];
    v31 = &v16[v29];
    v32 = v31[16];
    *(_OWORD *)v30 = *(_OWORD *)v31;
    v30[16] = v32;
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v33 = v17[10];
    v34 = &v15[v33];
    v35 = &v16[v33];
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
    v36 = v17[11];
    v37 = &v15[v36];
    v38 = &v16[v36];
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
    v39 = *(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = v143;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v39(v15, 0, 1, v17);
  }
  else
  {
    if (v20)
    {
      sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
      sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      goto LABEL_9;
    }
    v40 = sub_23DDC512C();
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 24);
    v41(v15, v16, v40);
    v42 = v17[5];
    v43 = &v15[v42];
    v44 = &v16[v42];
    v41(&v15[v42], &v16[v42], v40);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v41(&v43[*(int *)(v45 + 36)], &v44[*(int *)(v45 + 36)], v40);
    v46 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v43[v46[5]] = *(_QWORD *)&v44[v46[5]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v43[v46[6]] = *(_QWORD *)&v44[v46[6]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v47 = v46[7];
    v48 = *(_QWORD *)&v44[v47];
    v5 = v143;
    *(_QWORD *)&v43[v47] = v48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v49 = v17[6];
    v50 = &v15[v49];
    v51 = &v16[v49];
    v52 = *(_OWORD *)v51;
    v50[16] = v51[16];
    *(_OWORD *)v50 = v52;
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v53 = v17[10];
    v54 = &v15[v53];
    v55 = &v16[v53];
    *(_QWORD *)v54 = *(_QWORD *)v55;
    *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v56 = v17[11];
    v57 = &v15[v56];
    v58 = &v16[v56];
    *(_QWORD *)v57 = *(_QWORD *)v58;
    *((_QWORD *)v57 + 1) = *((_QWORD *)v58 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  v59 = a3[7];
  v60 = &v5[v59];
  v61 = &a2[v59];
  v62 = *(_QWORD *)v61;
  v60[8] = v61[8];
  *(_QWORD *)v60 = v62;
  v5[a3[8]] = a2[a3[8]];
  *(_QWORD *)&v5[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v5[a3[10]] = *(_QWORD *)&a2[a3[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63 = a3[11];
  v64 = &v5[v63];
  v65 = &a2[v63];
  v66 = type metadata accessor for OvernightMetricsWarmupProgress();
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
  v69 = v68(v64, 1, v66);
  v70 = v68(v65, 1, v66);
  if (v69)
  {
    if (!v70)
    {
      v72 = sub_23DDC52DC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v64, v65, v72);
      *(_QWORD *)&v64[*(int *)(v66 + 20)] = *(_QWORD *)&v65[*(int *)(v66 + 20)];
      v73 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56);
      swift_bridgeObjectRetain();
      v73(v64, 0, 1, v66);
      goto LABEL_17;
    }
  }
  else
  {
    if (!v70)
    {
      v74 = sub_23DDC52DC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 24))(v64, v65, v74);
      *(_QWORD *)&v64[*(int *)(v66 + 20)] = *(_QWORD *)&v65[*(int *)(v66 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    sub_23DCF59A8((uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
LABEL_17:
  v5[a3[12]] = a2[a3[12]];
  v75 = a3[13];
  v76 = &v5[v75];
  v77 = &a2[v75];
  v78 = sub_23DDC512C();
  v79 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v78 - 8) + 24);
  v79(v76, v77, v78);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v81 = v80;
  v79(&v76[*(int *)(v80 + 36)], &v77[*(int *)(v80 + 36)], v78);
  v82 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v83 = *(int *)(v82 + 20);
  v151 = a2;
  v84 = a3;
  v85 = v5;
  v86 = &v76[v83];
  v87 = &v77[v83];
  v79(&v76[v83], &v77[v83], v78);
  v79(&v86[*(int *)(v81 + 36)], &v87[*(int *)(v81 + 36)], v78);
  *(_QWORD *)&v76[*(int *)(v82 + 24)] = *(_QWORD *)&v77[*(int *)(v82 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v88 = v84[14];
  v89 = &v85[v88];
  v90 = &v151[v88];
  v150 = *((_QWORD *)v90 + 1);
  v152 = *(_QWORD *)v90;
  v148 = *((_QWORD *)v90 + 3);
  v149 = *((_QWORD *)v90 + 2);
  v146 = *((_QWORD *)v90 + 5);
  v147 = *((_QWORD *)v90 + 4);
  v144 = *((_QWORD *)v90 + 7);
  v145 = *((_QWORD *)v90 + 6);
  v124 = *((_QWORD *)v90 + 9);
  v125 = *((_QWORD *)v90 + 10);
  v126 = *((_QWORD *)v90 + 11);
  v127 = *((_QWORD *)v90 + 12);
  v128 = *((_QWORD *)v90 + 13);
  v129 = *((_QWORD *)v90 + 14);
  v130 = *((_QWORD *)v90 + 15);
  v91 = *((_QWORD *)v90 + 17);
  v131 = *((_QWORD *)v90 + 16);
  v132 = *((_QWORD *)v90 + 18);
  v92 = *((_QWORD *)v90 + 19);
  v93 = *((_QWORD *)v90 + 20);
  v94 = *((_QWORD *)v90 + 21);
  v95 = *((_QWORD *)v90 + 22);
  v96 = *((_QWORD *)v90 + 23);
  v97 = *((_QWORD *)v90 + 24);
  v98 = *((_QWORD *)v90 + 25);
  v133 = *((_QWORD *)v90 + 26);
  v134 = *((_QWORD *)v90 + 27);
  v135 = *((_QWORD *)v90 + 28);
  v136 = *((_QWORD *)v90 + 29);
  v137 = *((_QWORD *)v90 + 30);
  v138 = *((_QWORD *)v90 + 31);
  v139 = *((_QWORD *)v90 + 32);
  v140 = *((_QWORD *)v90 + 33);
  v141 = *((_QWORD *)v90 + 34);
  v142 = v90[280];
  v99 = *((_QWORD *)v90 + 8);
  sub_23DD0CB9C(*(_QWORD *)v90, v150, v149, v148, v147, v146, v145, v144, v99, v124, v125, v126, v127, v128, v129, v130, v131, v91, v132,
    v92,
    v93,
    v94,
    v95,
    v96,
    v97,
    v98,
    v133,
    v134,
    v135,
    v136,
    v137,
    v138,
    v139,
    v140,
    v141,
    v142);
  v100 = *(_QWORD *)v89;
  v101 = *((_QWORD *)v89 + 1);
  *(_QWORD *)v89 = v152;
  *((_QWORD *)v89 + 1) = v150;
  v102 = *((_QWORD *)v89 + 2);
  v103 = *((_QWORD *)v89 + 3);
  *((_QWORD *)v89 + 2) = v149;
  *((_QWORD *)v89 + 3) = v148;
  v104 = *((_QWORD *)v89 + 4);
  v105 = *((_QWORD *)v89 + 5);
  *((_QWORD *)v89 + 4) = v147;
  *((_QWORD *)v89 + 5) = v146;
  v106 = *((_QWORD *)v89 + 6);
  v107 = *((_QWORD *)v89 + 7);
  *((_QWORD *)v89 + 6) = v145;
  v108 = *((_OWORD *)v89 + 4);
  v109 = *((_OWORD *)v89 + 5);
  *((_QWORD *)v89 + 7) = v144;
  *((_QWORD *)v89 + 8) = v99;
  *((_QWORD *)v89 + 9) = v124;
  *((_QWORD *)v89 + 10) = v125;
  *((_QWORD *)v89 + 11) = v126;
  v110 = *((_OWORD *)v89 + 6);
  v111 = *((_OWORD *)v89 + 7);
  *((_QWORD *)v89 + 12) = v127;
  *((_QWORD *)v89 + 13) = v128;
  *((_QWORD *)v89 + 14) = v129;
  *((_QWORD *)v89 + 15) = v130;
  v112 = *((_OWORD *)v89 + 8);
  v113 = *((_OWORD *)v89 + 9);
  *((_QWORD *)v89 + 16) = v131;
  *((_QWORD *)v89 + 17) = v91;
  *((_QWORD *)v89 + 18) = v132;
  *((_QWORD *)v89 + 19) = v92;
  v114 = *((_OWORD *)v89 + 10);
  v115 = *((_OWORD *)v89 + 11);
  *((_QWORD *)v89 + 20) = v93;
  *((_QWORD *)v89 + 21) = v94;
  *((_QWORD *)v89 + 22) = v95;
  *((_QWORD *)v89 + 23) = v96;
  v116 = *((_OWORD *)v89 + 12);
  v117 = *((_OWORD *)v89 + 13);
  *((_QWORD *)v89 + 24) = v97;
  *((_QWORD *)v89 + 25) = v98;
  *((_QWORD *)v89 + 26) = v133;
  *((_QWORD *)v89 + 27) = v134;
  v118 = *((_OWORD *)v89 + 14);
  v119 = *((_OWORD *)v89 + 15);
  *((_QWORD *)v89 + 28) = v135;
  *((_QWORD *)v89 + 29) = v136;
  *((_QWORD *)v89 + 30) = v137;
  *((_QWORD *)v89 + 31) = v138;
  v120 = *((_OWORD *)v89 + 16);
  *((_QWORD *)v89 + 32) = v139;
  *((_QWORD *)v89 + 33) = v140;
  v121 = *((_QWORD *)v89 + 34);
  *((_QWORD *)v89 + 34) = v141;
  v122 = v89[280];
  v89[280] = v142;
  sub_23DD0CCE4(v100, v101, v102, v103, v104, v105, v106, v107, v108, *((uint64_t *)&v108 + 1), v109, *((uint64_t *)&v109 + 1), v110, *((uint64_t *)&v110 + 1), v111, *((uint64_t *)&v111 + 1), v112, *((uint64_t *)&v112 + 1), v113,
    *((uint64_t *)&v113 + 1),
    v114,
    *((uint64_t *)&v114 + 1),
    v115,
    *((uint64_t *)&v115 + 1),
    v116,
    *((uint64_t *)&v116 + 1),
    v117,
    *((uint64_t *)&v117 + 1),
    v118,
    *((uint64_t *)&v118 + 1),
    v119,
    *((uint64_t *)&v119 + 1),
    v120,
    *((uint64_t *)&v120 + 1),
    v121,
    v122);
  return v143;
}

_BYTE *initializeWithTake for OvernightMetricsChart(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  void (*v46)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v54;
  int *v55;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_QWORD *)&a1[v6] = *(_QWORD *)&a2[v6];
  v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  v10 = *(int *)(v9 + 20);
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_23DDC51E0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  *(_QWORD *)&v7[*(int *)(v9 + 24)] = *(_QWORD *)&v8[*(int *)(v9 + 24)];
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v54 = v18;
    v20 = sub_23DDC512C();
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
    v21(v15, v16, v20);
    v22 = v17[5];
    v23 = &v15[v22];
    v24 = &v16[v22];
    v21(&v15[v22], &v16[v22], v20);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
    v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v23[v26[5]] = *(_QWORD *)&v24[v26[5]];
    *(_QWORD *)&v23[v26[6]] = *(_QWORD *)&v24[v26[6]];
    *(_QWORD *)&v23[v26[7]] = *(_QWORD *)&v24[v26[7]];
    v27 = v17[6];
    v28 = &v15[v27];
    v29 = &v16[v27];
    *(_OWORD *)v28 = *(_OWORD *)v29;
    v28[16] = v29[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
    *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v15, 0, 1, v17);
  }
  v30 = a3[7];
  v31 = a3[8];
  v32 = &a1[v30];
  v33 = &a2[v30];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  a1[v31] = a2[v31];
  v34 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v34] = *(_QWORD *)&a2[v34];
  v35 = a3[11];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = type metadata accessor for OvernightMetricsWarmupProgress();
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    v41 = sub_23DDC52DC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v36, v37, v41);
    *(_QWORD *)&v36[*(int *)(v38 + 20)] = *(_QWORD *)&v37[*(int *)(v38 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  v42 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v45 = sub_23DDC512C();
  v55 = a3;
  v46 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v45 - 8) + 32);
  v46(v43, v44, v45);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v48 = v47;
  v46(&v43[*(int *)(v47 + 36)], &v44[*(int *)(v47 + 36)], v45);
  v49 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v50 = *(int *)(v49 + 20);
  v51 = &v43[v50];
  v52 = &v44[v50];
  v46(&v43[v50], &v44[v50], v45);
  v46(&v51[*(int *)(v48 + 36)], &v52[*(int *)(v48 + 36)], v45);
  *(_QWORD *)&v43[*(int *)(v49 + 24)] = *(_QWORD *)&v44[*(int *)(v49 + 24)];
  memcpy(&a1[v55[14]], &a2[v55[14]], 0x119uLL);
  return a1;
}

_BYTE *assignWithTake for OvernightMetricsChart(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, int *);
  int v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(char *, uint64_t, uint64_t);
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  int *v71;
  void (*v72)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v116;
  _BYTE *v117;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_QWORD *)&a1[v6] = *(_QWORD *)&a2[v6];
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for OvernightMetricsChartPointCollection();
  v10 = *(int *)(v9 + 20);
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_23DDC51E0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  *(_QWORD *)&v7[*(int *)(v9 + 24)] = *(_QWORD *)&v8[*(int *)(v9 + 24)];
  swift_bridgeObjectRelease();
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  LODWORD(v7) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if ((_DWORD)v7)
  {
    if (v20)
      goto LABEL_6;
    v22 = sub_23DDC512C();
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
    v23(v15, v16, v22);
    v24 = v17[5];
    v25 = &v15[v24];
    v116 = v18;
    v26 = &v16[v24];
    v23(&v15[v24], &v16[v24], v22);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v22);
    v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v25[v28[5]] = *(_QWORD *)&v26[v28[5]];
    *(_QWORD *)&v25[v28[6]] = *(_QWORD *)&v26[v28[6]];
    *(_QWORD *)&v25[v28[7]] = *(_QWORD *)&v26[v28[7]];
    v29 = v17[6];
    v30 = &v15[v29];
    v31 = &v16[v29];
    *(_OWORD *)v30 = *(_OWORD *)v31;
    v30[16] = v31[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
    *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v116 + 56))(v15, 0, 1, v17);
  }
  else
  {
    if (v20)
    {
      sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
      sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      goto LABEL_9;
    }
    v32 = sub_23DDC512C();
    v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 40);
    v33(v15, v16, v32);
    v34 = v17[5];
    v35 = &v15[v34];
    v36 = &v16[v34];
    v33(&v15[v34], &v16[v34], v32);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v33(&v35[*(int *)(v37 + 36)], &v36[*(int *)(v37 + 36)], v32);
    v38 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v35[v38[5]] = *(_QWORD *)&v36[v38[5]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v35[v38[6]] = *(_QWORD *)&v36[v38[6]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v35[v38[7]] = *(_QWORD *)&v36[v38[7]];
    swift_bridgeObjectRelease();
    v39 = v17[6];
    v40 = &v15[v39];
    v41 = &v16[v39];
    *(_OWORD *)v40 = *(_OWORD *)v41;
    v40[16] = v41[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v42 = v17[10];
    v43 = &v15[v42];
    v44 = (uint64_t *)&v16[v42];
    v46 = *v44;
    v45 = v44[1];
    *(_QWORD *)v43 = v46;
    *((_QWORD *)v43 + 1) = v45;
    swift_bridgeObjectRelease();
    v47 = v17[11];
    v48 = &v15[v47];
    v49 = (uint64_t *)&v16[v47];
    v51 = *v49;
    v50 = v49[1];
    *(_QWORD *)v48 = v51;
    *((_QWORD *)v48 + 1) = v50;
    swift_bridgeObjectRelease();
  }
LABEL_9:
  v52 = a3[7];
  v53 = a3[8];
  v54 = &a1[v52];
  v55 = &a2[v52];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v55[8];
  a1[v53] = a2[v53];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  swift_bridgeObjectRelease();
  v56 = a3[11];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v59 = type metadata accessor for OvernightMetricsWarmupProgress();
  v60 = *(_QWORD *)(v59 - 8);
  v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48);
  v62 = v61(v57, 1, v59);
  v63 = v61(v58, 1, v59);
  if (v62)
  {
    if (!v63)
    {
      v65 = sub_23DDC52DC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v57, v58, v65);
      *(_QWORD *)&v57[*(int *)(v59 + 20)] = *(_QWORD *)&v58[*(int *)(v59 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
      goto LABEL_17;
    }
  }
  else
  {
    if (!v63)
    {
      v66 = sub_23DDC52DC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v57, v58, v66);
      *(_QWORD *)&v57[*(int *)(v59 + 20)] = *(_QWORD *)&v58[*(int *)(v59 + 20)];
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    sub_23DCF59A8((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
LABEL_17:
  v67 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  v68 = &a1[v67];
  v69 = &a2[v67];
  v70 = sub_23DDC512C();
  v117 = a2;
  v71 = a3;
  v72 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v70 - 8) + 40);
  v72(v68, v69, v70);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v74 = v73;
  v72(&v68[*(int *)(v73 + 36)], &v69[*(int *)(v73 + 36)], v70);
  v75 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v76 = *(int *)(v75 + 20);
  v77 = &v68[v76];
  v78 = &v69[v76];
  v72(&v68[v76], &v69[v76], v70);
  v72(&v77[*(int *)(v74 + 36)], &v78[*(int *)(v74 + 36)], v70);
  *(_QWORD *)&v68[*(int *)(v75 + 24)] = *(_QWORD *)&v69[*(int *)(v75 + 24)];
  swift_bridgeObjectRelease();
  v79 = v71[14];
  v80 = &a1[v79];
  v81 = &v117[v79];
  v82 = *(_QWORD *)&v117[v79 + 272];
  v83 = v81[280];
  v84 = *(_QWORD *)v80;
  v85 = *((_QWORD *)v80 + 1);
  v86 = *((_QWORD *)v80 + 2);
  v87 = *((_QWORD *)v80 + 3);
  v88 = *((_QWORD *)v80 + 4);
  v89 = *((_QWORD *)v80 + 5);
  v90 = *((_QWORD *)v80 + 6);
  v91 = *((_QWORD *)v80 + 7);
  v92 = *((_OWORD *)v80 + 4);
  v93 = *((_OWORD *)v80 + 5);
  v94 = *((_OWORD *)v80 + 6);
  v95 = *((_OWORD *)v80 + 7);
  v96 = *((_OWORD *)v80 + 8);
  v97 = *((_OWORD *)v80 + 9);
  v98 = *((_OWORD *)v80 + 10);
  v99 = *((_OWORD *)v80 + 11);
  v100 = *((_OWORD *)v80 + 12);
  v101 = *((_OWORD *)v80 + 13);
  v102 = *((_OWORD *)v80 + 14);
  v103 = *((_OWORD *)v80 + 15);
  v104 = *((_OWORD *)v80 + 16);
  v105 = *((_QWORD *)v80 + 34);
  v106 = v80[280];
  v107 = *((_OWORD *)v81 + 1);
  *(_OWORD *)v80 = *(_OWORD *)v81;
  *((_OWORD *)v80 + 1) = v107;
  v108 = *((_OWORD *)v81 + 3);
  *((_OWORD *)v80 + 2) = *((_OWORD *)v81 + 2);
  *((_OWORD *)v80 + 3) = v108;
  v109 = *((_OWORD *)v81 + 5);
  *((_OWORD *)v80 + 4) = *((_OWORD *)v81 + 4);
  *((_OWORD *)v80 + 5) = v109;
  v110 = *((_OWORD *)v81 + 7);
  *((_OWORD *)v80 + 6) = *((_OWORD *)v81 + 6);
  *((_OWORD *)v80 + 7) = v110;
  v111 = *((_OWORD *)v81 + 9);
  *((_OWORD *)v80 + 8) = *((_OWORD *)v81 + 8);
  *((_OWORD *)v80 + 9) = v111;
  v112 = *((_OWORD *)v81 + 11);
  *((_OWORD *)v80 + 10) = *((_OWORD *)v81 + 10);
  *((_OWORD *)v80 + 11) = v112;
  v113 = *((_OWORD *)v81 + 13);
  *((_OWORD *)v80 + 12) = *((_OWORD *)v81 + 12);
  *((_OWORD *)v80 + 13) = v113;
  v114 = *((_OWORD *)v81 + 15);
  *((_OWORD *)v80 + 14) = *((_OWORD *)v81 + 14);
  *((_OWORD *)v80 + 15) = v114;
  *((_OWORD *)v80 + 16) = *((_OWORD *)v81 + 16);
  *((_QWORD *)v80 + 34) = v82;
  v80[280] = v83;
  sub_23DD0CCE4(v84, v85, v86, v87, v88, v89, v90, v91, v92, *((uint64_t *)&v92 + 1), v93, *((uint64_t *)&v93 + 1), v94, *((uint64_t *)&v94 + 1), v95, *((uint64_t *)&v95 + 1), v96, *((uint64_t *)&v96 + 1), v97,
    *((uint64_t *)&v97 + 1),
    v98,
    *((uint64_t *)&v98 + 1),
    v99,
    *((uint64_t *)&v99 + 1),
    v100,
    *((uint64_t *)&v100 + 1),
    v101,
    *((uint64_t *)&v101 + 1),
    v102,
    *((uint64_t *)&v102 + 1),
    v103,
    *((uint64_t *)&v103 + 1),
    v104,
    *((uint64_t *)&v104 + 1),
    v105,
    v106);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChart()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD89D90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v6 = type metadata accessor for OvernightMetricsChartPointCollection();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    v7 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v9 = a3[11];
    }
    else
    {
      v8 = type metadata accessor for OvernightMetricsChart.Derivations(0);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[13];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[9]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChart()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DD89EA8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = type metadata accessor for OvernightMetricsChartPointCollection();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[6];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[9]) = (a2 - 1);
        return;
      }
      sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
      v9 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v13;
        v11 = a4[11];
      }
      else
      {
        v10 = type metadata accessor for OvernightMetricsChart.Derivations(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[13];
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_23DD89FB0()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for OvernightMetricsChartPointCollection();
  if (v0 <= 0x3F)
  {
    sub_23DCF6898(319, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    if (v1 <= 0x3F)
    {
      sub_23DCF6898(319, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
      if (v2 <= 0x3F)
      {
        type metadata accessor for OvernightMetricsChart.Derivations(319);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

char *initializeBufferWithCopyOfBuffer for OvernightMetricsChart.Derivations(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC512C();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v10 = v9;
    v8(&a1[*(int *)(v9 + 36)], (char *)a2 + *(int *)(v9 + 36), v7);
    v11 = *(int *)(a3 + 20);
    v12 = &a1[v11];
    v13 = (char *)a2 + v11;
    v8(&a1[v11], (char *)a2 + v11, v7);
    v8(&v12[*(int *)(v10 + 36)], &v13[*(int *)(v10 + 36)], v7);
    *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for OvernightMetricsChart.Derivations(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_23DDC512C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7 = v6;
  v5(a1 + *(int *)(v6 + 36), v4);
  v8 = a1 + *(int *)(a2 + 20);
  v5(v8, v4);
  v5(v8 + *(int *)(v7 + 36), v4);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsChart.Derivations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v9 = v8;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v7(a1 + v10, a2 + v10, v6);
  v7(v11 + *(int *)(v9 + 36), v12 + *(int *)(v9 + 36), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsChart.Derivations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v9 = v8;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v7(a1 + v10, a2 + v10, v6);
  v7(v11 + *(int *)(v9 + 36), v12 + *(int *)(v9 + 36), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for OvernightMetricsChart.Derivations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v9 = v8;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v7(a1 + v10, a2 + v10, v6);
  v7(v11 + *(int *)(v9 + 36), v12 + *(int *)(v9 + 36), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for OvernightMetricsChart.Derivations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v9 = v8;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v7(a1 + v10, a2 + v10, v6);
  v7(v11 + *(int *)(v9 + 36), v12 + *(int *)(v9 + 36), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChart.Derivations()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD8A5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChart.Derivations()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DD8A664(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
}

void sub_23DD8A6EC()
{
  unint64_t v0;

  sub_23DD04550(319, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_23DD8A774()
{
  return sub_23DCF535C(&qword_256CFEEE0, (uint64_t (*)(uint64_t))sub_23DD87534, (uint64_t)&unk_23DDC8820);
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v1 = (int *)type metadata accessor for OvernightMetricsChart(0);
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  v3 = v2 + v1[5];
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v5 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  v6 = v2 + v1[6];
  v7 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = sub_23DDC512C();
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v6, v8);
    v10 = v6 + *(int *)(v7 + 20);
    v9(v10, v8);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v9(v10 + *(int *)(v11 + 36), v8);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v2 + v1[11];
  v13 = type metadata accessor for OvernightMetricsWarmupProgress();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v14 = sub_23DDC52DC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
    swift_bridgeObjectRelease();
  }
  v15 = v2 + v1[13];
  v16 = sub_23DDC512C();
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
  v17(v15, v16);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v19 = v18;
  v17(v15 + *(int *)(v18 + 36), v16);
  v20 = v15 + *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
  v17(v20, v16);
  v17(v20 + *(int *)(v19 + 36), v16);
  swift_bridgeObjectRelease();
  v21 = v2 + v1[14];
  v24 = *(_OWORD *)(v21 + 240);
  v25 = *(_OWORD *)(v21 + 256);
  v23 = *(_OWORD *)(v21 + 208);
  sub_23DD0CCE4(*(_QWORD *)v21, *(_QWORD *)(v21 + 8), *(_QWORD *)(v21 + 16), *(_QWORD *)(v21 + 24), *(_QWORD *)(v21 + 32), *(_QWORD *)(v21 + 40), *(_QWORD *)(v21 + 48), *(_QWORD *)(v21 + 56), *(_QWORD *)(v21 + 64), *(_QWORD *)(v21 + 72), *(_QWORD *)(v21 + 80), *(_QWORD *)(v21 + 88), *(_QWORD *)(v21 + 96), *(_QWORD *)(v21 + 104), *(_QWORD *)(v21 + 112), *(_QWORD *)(v21 + 120), *(_QWORD *)(v21 + 128), *(_QWORD *)(v21 + 136), *(_QWORD *)(v21 + 144),
    *(_QWORD *)(v21 + 152),
    *(_QWORD *)(v21 + 160),
    *(_QWORD *)(v21 + 168),
    *(_QWORD *)(v21 + 176),
    *(_QWORD *)(v21 + 184),
    *(_QWORD *)(v21 + 192),
    *(_QWORD *)(v21 + 200),
    v23,
    *((uint64_t *)&v23 + 1),
    *(_QWORD *)(v21 + 224),
    *(_QWORD *)(v21 + 232),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    *(_QWORD *)(v21 + 272),
    *(_BYTE *)(v21 + 280));
  return swift_deallocObject();
}

uint64_t sub_23DD8AAAC@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OvernightMetricsChart(0) - 8) + 80);
  return sub_23DD8494C((unsigned __int8 *)(v3 + ((v7 + 16) & ~v7)), a1, a2, a3);
}

uint64_t sub_23DD8AB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v5;

  v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_23DD8AB3C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23DD8AB70@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23DDC5CE4();
  *a1 = result & 1;
  return result;
}

uint64_t sub_23DD8AB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_23DD8ABE8()
{
  return swift_deallocObject();
}

void sub_23DD8ABF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DD864D4(a1, a2, *(_BYTE *)(v2 + 16));
}

uint64_t sub_23DD8AC00(uint64_t a1)
{
  uint64_t v2;

  sub_23DD3816C(0, &qword_256CFED40, (uint64_t (*)(uint64_t))type metadata accessor for AnimatableOvernightMetricsChart, (uint64_t (*)(uint64_t))sub_23DD8761C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DD8AC5C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23DD8AC94()
{
  uint64_t v0;

  return sub_23DD959A4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23DD8ACAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_23DD8ACF8()
{
  return sub_23DD8AC94();
}

_QWORD *sub_23DD8AD0C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_23DDC6428();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_retain();
    v11(v8, v9, v10);
    v12 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    *((_BYTE *)v4 + v12) = *((_BYTE *)a2 + v12);
    v13 = a3[9];
    v14 = a3[10];
    v15 = (char *)v4 + v13;
    v16 = (char *)a2 + v13;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = (char *)v4 + v14;
    v18 = (char *)a2 + v14;
    v19 = sub_23DDC5144();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return v4;
}

uint64_t sub_23DD8AE18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_23DDC6428();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 40);
  v7 = sub_23DDC5144();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t sub_23DD8AE8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_23DDC6428();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[9];
  v13 = a3[10];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  v16 = a1 + v13;
  v17 = a2 + v13;
  v18 = sub_23DDC5144();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

_QWORD *sub_23DD8AF6C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC6428();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v10 = a3[9];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v13;
  v14 = a3[10];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_23DDC5144();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_23DD8B058(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_23DDC6428();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[9];
  v12 = a3[10];
  v13 = a1 + v11;
  v14 = a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a1 + v12;
  v16 = a2 + v12;
  v17 = sub_23DDC5144();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

uint64_t sub_23DD8B124(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_23DDC6428();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[9];
  v12 = a3[10];
  v13 = a1 + v11;
  v14 = a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a1 + v12;
  v16 = a2 + v12;
  v17 = sub_23DDC5144();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t sub_23DD8B1F8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD8B204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23DDC6428();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_23DDC5144();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_23DD8B2A4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD8B2B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = sub_23DDC6428();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_23DDC5144();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for MultilayerCircularGaugeLayer()
{
  uint64_t result;

  result = qword_256CFEF50;
  if (!qword_256CFEF50)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD8B388()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23DDC6428();
  if (v1 <= 0x3F)
  {
    result = sub_23DDC5144();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_23DD8B444()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23DD8B44C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23DD8B4FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = ((v10 + ((v7 + 24) & ~v7)) & ~v9) + *(_QWORD *)(v8 + 64);
  v12 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  v13 = *a2;
  *a1 = *a2;
  if ((v9 | v7) > 7 || v12 != 0 || v11 > 0x18)
  {
    a1 = (uint64_t *)(v13 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16)));
    swift_retain();
  }
  else
  {
    v16 = ~v9;
    v17 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v18 = (_OWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v17 = *v18;
    v19 = ((unint64_t)v17 + v7 + 16) & ~v7;
    v20 = ((unint64_t)v18 + v7 + 16) & ~v7;
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v21(v19, v20, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))((v19 + v10) & v16, (v20 + v10) & v16, v4);
  }
  return a1;
}

uint64_t sub_23DD8B624(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = a1 + 15;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = ((v3 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v5 + *(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_QWORD *sub_23DD8B69C(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, unint64_t, uint64_t);
  uint64_t v14;

  v6 = *a2;
  v5 = (unint64_t)a2 + 15;
  *a1 = v6;
  v7 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *(_OWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v7 + v10 + 16) & ~v10;
  v12 = (v10 + 16 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  v13 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
  swift_bridgeObjectRetain();
  v13(v11, v12, v8);
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 16))((*(_QWORD *)(v9 + 64) + *(unsigned __int8 *)(v14 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (*(_QWORD *)(v9 + 64) + *(unsigned __int8 *)(v14 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

_QWORD *sub_23DD8B758(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  *v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v6[1] = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 16) & ~v9;
  v11 = (v9 + 16 + v7) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v10, v11);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))((*(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

_QWORD *sub_23DD8B820(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v5 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_OWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 16) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v9, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 32))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

_QWORD *sub_23DD8B8CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  v6 = (unint64_t)a1 + 15;
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  v8 = v5 & 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v7[1] = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 16 + (v6 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  v12 = (v10 + 16 + v8) & ~v10;
  (*(void (**)(unint64_t, uint64_t))(v9 + 40))(v11, v12);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))((*(_QWORD *)(v9 + 64) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(_QWORD *)(v9 + 64) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t sub_23DD8B98C(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v7)
    goto LABEL_27;
  v11 = ((v9 + v10 + ((v8 + 24) & ~v8)) & ~v10) + *(_QWORD *)(v5 + 64);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((a2 - v7 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(_WORD *)((char *)a1 + v11))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_27:
      if ((v6 & 0x80000000) != 0)
      {
        v19 = ((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 16) & ~v8;
        if (v4 == v7)
          return (*(uint64_t (**)(unint64_t, _QWORD))(v3 + 48))(v19, *(unsigned int *)(v3 + 84));
        else
          return (*(uint64_t (**)(unint64_t))(v5 + 48))((v19 + v9 + v10) & ~v10);
      }
      else
      {
        v18 = *a1;
        if (*a1 >= 0xFFFFFFFFuLL)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((_BYTE *)a1 + v11))
    goto LABEL_27;
LABEL_18:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return v7 + v16 + 1;
  if (v11 <= 3)
    v17 = ((v9 + v10 + ((v8 + 24) & ~(_DWORD)v8)) & ~(_DWORD)v10) + *(_DWORD *)(v5 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23DD8BA8C + 4 * byte_23DDCAC50[v17 - 1]))();
}

void sub_23DD8BB34(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  v9 = ((*(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

void type metadata accessor for MultilayerCircularGauge()
{
  JUMPOUT(0x242643B54);
}

uint64_t sub_23DD8BD90()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD8BDC4(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    MEMORY[0x24BDAC7A8](a1);
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return sub_23DDC6440();
  }
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return sub_23DDC6440();
}

uint64_t sub_23DD8BF78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[2];
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v48 = a2;
  v3 = *(a1 - 1);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = (char *)swift_allocObject();
  v9 = a1[2];
  v47 = a1[3];
  v8 = v47;
  *((_QWORD *)v7 + 2) = v9;
  *((_QWORD *)v7 + 3) = v8;
  v11 = a1[4];
  v46 = a1[5];
  v10 = v46;
  *((_QWORD *)v7 + 4) = v11;
  *((_QWORD *)v7 + 5) = v10;
  (*(void (**)(char *, char *, _QWORD *))(v3 + 32))(&v7[v6], (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  sub_23DD0A95C();
  v45 = v12;
  v13 = sub_23DDC5C0C();
  v14 = sub_23DDC5DBC();
  v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEE988];
  v44 = sub_23DCF535C(&qword_256CFC818, (uint64_t (*)(uint64_t))sub_23DD0A95C, MEMORY[0x24BDF1028]);
  v60[0] = v11;
  v60[1] = v44;
  v16 = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v13, v60);
  v17 = sub_23DCF535C(&qword_256CFF020, v15, MEMORY[0x24BDEE978]);
  v67 = v13;
  v68 = v14;
  v69 = v16;
  v70 = v17;
  v18 = MEMORY[0x24BDF2188];
  MEMORY[0x242643B9C](255, &v67, MEMORY[0x24BDF2188], 0);
  v19 = sub_23DDC5C0C();
  v20 = MEMORY[0x24BEE1328];
  sub_23DD0AA4C(255, &qword_256CFC7D8, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
  v43[1] = v21;
  v22 = sub_23DDC5C0C();
  v67 = v13;
  v68 = v14;
  v69 = v16;
  v70 = v17;
  v59[0] = swift_getOpaqueTypeConformance2();
  v59[1] = MEMORY[0x24BDEDBB8];
  v23 = MEMORY[0x24BDED308];
  v24 = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v19, v59);
  v25 = sub_23DD0B10C((unint64_t *)&qword_256CFC820, &qword_256CFC7D8, v20);
  v58[0] = v24;
  v58[1] = v25;
  v26 = MEMORY[0x242643BD8](v23, v22, v58);
  v67 = v22;
  v68 = v26;
  MEMORY[0x242643B9C](255, &v67, MEMORY[0x24BDFAC10], 0);
  v27 = sub_23DDC6308();
  v28 = sub_23DDC5C0C();
  v57[0] = MEMORY[0x242643BD8](MEMORY[0x24BDF4498], v27);
  v57[1] = v44;
  v29 = MEMORY[0x242643BD8](v23, v28, v57);
  v67 = v28;
  v68 = v14;
  v69 = v29;
  v70 = v17;
  MEMORY[0x242643B9C](255, &v67, v18, 0);
  sub_23DDC5C0C();
  sub_23DDC5C0C();
  swift_getTupleTypeMetadata2();
  v30 = sub_23DDC6434();
  v31 = MEMORY[0x24BDF5428];
  MEMORY[0x242643BD8](MEMORY[0x24BDF5428], v30);
  sub_23DDC6320();
  sub_23DD8E57C(255);
  swift_getTupleTypeMetadata3();
  v32 = sub_23DDC6434();
  MEMORY[0x242643BD8](v31, v32);
  v33 = sub_23DDC6338();
  MEMORY[0x242643BD8](MEMORY[0x24BDF4750], v33);
  v61 = sub_23DDC5BAC();
  v62 = v34;
  v35 = sub_23DDC5BB8();
  v36 = MEMORY[0x242643BD8](MEMORY[0x24BDEC6F8], v35);
  sub_23DDC6134();
  swift_release();
  v50 = v67;
  v51 = v68;
  v52 = v69;
  v53 = v70;
  v37 = sub_23DDC5C0C();
  v56[0] = v36;
  v56[1] = MEMORY[0x24BDEEC40];
  v38 = MEMORY[0x242643BD8](v23, v37, v56);
  sub_23DDC6170();
  swift_release();
  v50 = v61;
  v51 = v62;
  v52 = v63;
  v53 = v64;
  v54 = v65;
  v55 = v66;
  v39 = MEMORY[0x24BEE50B0];
  sub_23DD0AA4C(255, &qword_256CFDAA8, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
  v40 = sub_23DDC5C0C();
  v41 = sub_23DD0B10C((unint64_t *)&qword_256CFDAE0, &qword_256CFDAA8, v39);
  v49[0] = v38;
  v49[1] = v41;
  MEMORY[0x242643BD8](v23, v40, v49);
  sub_23DD272F4((uint64_t)&v50, v40, (uint64_t)&v67);
  swift_release();
  swift_release();
  v61 = v67;
  v62 = v68;
  v63 = v69;
  v64 = v70;
  v65 = v71;
  v66 = v72;
  sub_23DD26D88((uint64_t)&v61, v40, v48);
  swift_release();
  return swift_release();
}

uint64_t sub_23DD8C5AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  _QWORD v54[2];
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];

  v41 = a6;
  v42 = a5;
  v40 = a4;
  v43 = a3;
  v44 = a2;
  v45 = a1;
  v46 = a7;
  sub_23DD0A95C();
  v39 = v8;
  v9 = sub_23DDC5C0C();
  v10 = sub_23DDC5DBC();
  v11 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEE988];
  v38 = sub_23DCF535C(&qword_256CFC818, (uint64_t (*)(uint64_t))sub_23DD0A95C, MEMORY[0x24BDF1028]);
  v60[0] = a5;
  v60[1] = v38;
  v12 = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v9, v60);
  v13 = sub_23DCF535C(&qword_256CFF020, v11, MEMORY[0x24BDEE978]);
  v56 = v9;
  v57 = v10;
  v58 = v12;
  v59 = v13;
  v14 = MEMORY[0x24BDF2188];
  MEMORY[0x242643B9C](255, &v56, MEMORY[0x24BDF2188], 0);
  v15 = sub_23DDC5C0C();
  v16 = MEMORY[0x24BEE1328];
  sub_23DD0AA4C(255, &qword_256CFC7D8, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
  v17 = sub_23DDC5C0C();
  v56 = v9;
  v57 = v10;
  v58 = v12;
  v59 = v13;
  v55[0] = swift_getOpaqueTypeConformance2();
  v55[1] = MEMORY[0x24BDEDBB8];
  v18 = MEMORY[0x24BDED308];
  v54[0] = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v15, v55);
  v54[1] = sub_23DD0B10C((unint64_t *)&qword_256CFC820, &qword_256CFC7D8, v16);
  v19 = MEMORY[0x242643BD8](v18, v17, v54);
  v56 = v17;
  v57 = v19;
  MEMORY[0x242643B9C](255, &v56, MEMORY[0x24BDFAC10], 0);
  v20 = v40;
  v21 = v41;
  v22 = sub_23DDC6308();
  v23 = sub_23DDC5C0C();
  v53[0] = MEMORY[0x242643BD8](MEMORY[0x24BDF4498], v22);
  v53[1] = v38;
  v24 = MEMORY[0x242643BD8](v18, v23, v53);
  v56 = v23;
  v57 = v10;
  v58 = v24;
  v59 = v13;
  MEMORY[0x242643B9C](255, &v56, v14, 0);
  sub_23DDC5C0C();
  sub_23DDC5C0C();
  swift_getTupleTypeMetadata2();
  v25 = sub_23DDC6434();
  v26 = MEMORY[0x24BDF5428];
  MEMORY[0x242643BD8](MEMORY[0x24BDF5428], v25);
  sub_23DDC6320();
  sub_23DD8E57C(255);
  swift_getTupleTypeMetadata3();
  v27 = sub_23DDC6434();
  MEMORY[0x242643BD8](v26, v27);
  v28 = sub_23DDC6338();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v37 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v37 - v33;
  v47 = v43;
  v48 = v20;
  v49 = v42;
  v50 = v21;
  v51 = v44;
  v52 = v45;
  sub_23DDC63D4();
  sub_23DDC632C();
  MEMORY[0x242643BD8](MEMORY[0x24BDF4750], v28);
  sub_23DD272F4((uint64_t)v31, v28, (uint64_t)v34);
  v35 = *(void (**)(char *, uint64_t))(v29 + 8);
  v35(v31, v28);
  sub_23DD26D88((uint64_t)v34, v28, v46);
  return ((uint64_t (*)(char *, uint64_t))v35)(v34, v28);
}

void sub_23DD8CA10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[8];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];

  v41 = a6;
  v40 = a4;
  v42 = a2;
  v43 = a1;
  v50 = a7;
  sub_23DD8E608();
  v48 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v44 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD8E57C(0);
  v49 = v11;
  v47 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v45 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v46 = (char *)v37 - v14;
  v15 = sub_23DDC6308();
  sub_23DD0A95C();
  v16 = sub_23DDC5C0C();
  v17 = sub_23DDC5DBC();
  v18 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEE988];
  v19 = MEMORY[0x242643BD8](MEMORY[0x24BDF4498], v15);
  v20 = sub_23DCF535C(&qword_256CFC818, (uint64_t (*)(uint64_t))sub_23DD0A95C, MEMORY[0x24BDF1028]);
  v63[0] = v19;
  v63[1] = v20;
  v21 = MEMORY[0x24BDED308];
  v22 = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v16, v63);
  v23 = sub_23DCF535C(&qword_256CFF020, v18, MEMORY[0x24BDEE978]);
  v59 = v16;
  v60 = v17;
  v61 = v22;
  v62 = v23;
  v24 = MEMORY[0x24BDF2188];
  MEMORY[0x242643B9C](255, &v59, MEMORY[0x24BDF2188], 0);
  sub_23DDC5C0C();
  sub_23DD0AA4C(255, &qword_256CFC7D8, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
  sub_23DDC5C0C();
  swift_getTupleTypeMetadata2();
  v38 = sub_23DDC6434();
  v37[7] = MEMORY[0x242643BD8](MEMORY[0x24BDF5428], v38);
  v54 = sub_23DDC6320();
  v39 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v55 = (char *)v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v37[6] = (char *)v37 - v27;
  v37[1] = a3;
  v28 = sub_23DDC5C0C();
  v37[0] = a5;
  v58[0] = a5;
  v58[1] = v20;
  v29 = MEMORY[0x242643BD8](v21, v28, v58);
  v59 = v28;
  v60 = v17;
  v61 = v29;
  v62 = v23;
  MEMORY[0x242643B9C](255, &v59, v24, 0);
  v30 = sub_23DDC5C0C();
  v31 = sub_23DDC5C0C();
  v37[5] = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v59 = v28;
  v60 = v17;
  v61 = v29;
  v62 = v23;
  v57[0] = swift_getOpaqueTypeConformance2();
  v57[1] = MEMORY[0x24BDEDBB8];
  v32 = MEMORY[0x242643BD8](v21, v30, v57);
  v33 = sub_23DD0B10C((unint64_t *)&qword_256CFC820, &qword_256CFC7D8, MEMORY[0x24BEE1328]);
  v56[0] = v32;
  v56[1] = v33;
  v34 = MEMORY[0x242643BD8](v21, v31, v56);
  v59 = v31;
  v60 = v34;
  v51 = MEMORY[0x242643B9C](0, &v59, MEMORY[0x24BDFAC10], 0);
  v52 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  MEMORY[0x24BDAC7A8](v35);
  v53 = (char *)v37 - v36;
  v59 = a3;
  v60 = v40;
  v61 = a5;
  v62 = v41;
  type metadata accessor for MultilayerCircularGauge();
}

void sub_23DD8CED0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);

  *(_QWORD *)(v8 - 504) = a1;
  v9 = *(_QWORD *)(v8 - 432);
  v10 = *(_QWORD *)(v8 - 424);
  sub_23DD8D258(v9, a1, v3);
  sub_23DDC60F8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 488) + 8))(v3, v2);
  *(_QWORD *)(v8 - 136) = v2;
  *(_QWORD *)(v8 - 128) = v4;
  *(_QWORD *)(v8 - 496) = swift_getOpaqueTypeConformance2();
  v11 = *(_QWORD *)(v8 - 360);
  sub_23DD272F4(v6, v11, v5);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 352) + 8);
  *(_QWORD *)(v8 - 488) = v12;
  v12(v6, v11);
  *(_QWORD *)(v8 - 304) = *(_QWORD *)(v8 - 520);
  *(_QWORD *)(v8 - 296) = v1;
  *(_QWORD *)(v8 - 288) = *(_QWORD *)(v8 - 528);
  *(_QWORD *)(v8 - 280) = v7;
  *(_QWORD *)(v8 - 272) = v10;
  *(_QWORD *)(v8 - 264) = v9;
  sub_23DDC5E10();
  v13 = *(_QWORD *)(v8 - 328);
  sub_23DDC6314();
  v14 = *(_QWORD *)(v8 - 336);
  *(_QWORD *)(v8 - 448) = MEMORY[0x242643BD8](MEMORY[0x24BDF4700], v14);
  sub_23DD272F4(v13, v14, *(_QWORD *)(v8 - 480));
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 456) + 8);
  *(_QWORD *)(v8 - 440) = v15;
  v15(v13, v14);
  sub_23DD8DFB4(*(uint64_t **)(v8 - 416));
}

uint64_t sub_23DD8D080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);
  void (*v20)(_QWORD, uint64_t);

  v5 = sub_23DCF535C(&qword_256CFF080, (uint64_t (*)(uint64_t))sub_23DD8E608, MEMORY[0x24BDF4750]);
  v6 = *(_QWORD *)(v4 - 408);
  v7 = *(_QWORD *)(v4 - 384);
  sub_23DDC60F8();
  sub_23DCF59A8(v3, (uint64_t (*)(_QWORD))sub_23DD8E608);
  v8 = *(_QWORD *)(v4 - 392);
  v9 = *(_QWORD *)(v4 - 400);
  v10 = *(_QWORD *)(v4 - 376);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v9, v6, v10);
  v11 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 352) + 16);
  *(_QWORD *)(v4 - 512) = v1;
  v12 = *(_QWORD *)(v4 - 360);
  v11(v1, *(_QWORD *)(v4 - 344), v12);
  *(_QWORD *)(v4 - 136) = v1;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v14 = *(_QWORD *)(v4 - 328);
  v15 = *(_QWORD *)(v4 - 336);
  v13(v14, v0, v15);
  *(_QWORD *)(v4 - 128) = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v9, v10);
  *(_QWORD *)(v4 - 120) = v6;
  *(_QWORD *)(v4 - 208) = v12;
  *(_QWORD *)(v4 - 200) = v15;
  v16 = v12;
  *(_QWORD *)(v4 - 192) = v10;
  v17 = *(_QWORD *)(v4 - 448);
  *(_QWORD *)(v4 - 232) = *(_QWORD *)(v4 - 496);
  *(_QWORD *)(v4 - 224) = v17;
  *(_QWORD *)(v4 - 248) = v7;
  *(_QWORD *)(v4 - 240) = v5;
  *(_QWORD *)(v4 - 216) = swift_getOpaqueTypeConformance2();
  sub_23DD8BDC4((uint64_t *)(v4 - 136), 3uLL, v4 - 208);
  v18 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v18(v9, v10);
  v19 = *(void (**)(uint64_t, uint64_t))(v4 - 440);
  v19(v0, v15);
  v20 = *(void (**)(_QWORD, uint64_t))(v4 - 488);
  v20(*(_QWORD *)(v4 - 344), v16);
  v18(v6, v10);
  v19(*(_QWORD *)(v4 - 328), v15);
  return ((uint64_t (*)(_QWORD, uint64_t))v20)(*(_QWORD *)(v4 - 512), v16);
}

uint64_t sub_23DD8D258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t OpaqueTypeConformance2;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];

  v51 = a1;
  v52 = a3;
  v4 = sub_23DDC5DBC();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEE988];
  v50 = *(_QWORD *)(v4 - 8);
  v6 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = *(_QWORD *)(a2 + 16);
  sub_23DD0A95C();
  v9 = sub_23DDC5C0C();
  v47 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v39 - v10;
  v12 = *(_QWORD *)(a2 + 32);
  v13 = sub_23DCF535C(&qword_256CFC818, (uint64_t (*)(uint64_t))sub_23DD0A95C, MEMORY[0x24BDF1028]);
  v59[0] = v12;
  v59[1] = v13;
  v14 = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v9, v59);
  v40 = v14;
  v39 = sub_23DCF535C(&qword_256CFF020, v5, MEMORY[0x24BDEE978]);
  v55 = v9;
  v56 = v6;
  v15 = v6;
  v57 = v14;
  v58 = v39;
  v16 = MEMORY[0x242643B9C](0, &v55, MEMORY[0x24BDF2188], 0);
  v46 = *(_QWORD *)(v16 - 8);
  v43 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v39 - v17;
  v19 = sub_23DDC5C0C();
  v48 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v41 = (char *)&v39 - v20;
  sub_23DD0AA4C(255, &qword_256CFC7D8, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
  v21 = sub_23DDC5C0C();
  v49 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v42 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v45 = (uint64_t)&v39 - v24;
  sub_23DDC61C4();
  v25 = v8;
  sub_23DDC5DB0();
  v26 = v15;
  v27 = v40;
  v28 = v39;
  sub_23DDC6128();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v9);
  sub_23DDC5B70();
  sub_23DDC63D4();
  v55 = v9;
  v56 = v26;
  v57 = v27;
  v58 = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v29 = v43;
  v30 = v41;
  sub_23DDC6194();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v29);
  v54[0] = OpaqueTypeConformance2;
  v54[1] = MEMORY[0x24BDEDBB8];
  v31 = MEMORY[0x24BDED308];
  v32 = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v19, v54);
  v33 = (uint64_t)v42;
  sub_23DDC6158();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v30, v19);
  v34 = sub_23DD0B10C((unint64_t *)&qword_256CFC820, &qword_256CFC7D8, MEMORY[0x24BEE1328]);
  v53[0] = v32;
  v53[1] = v34;
  MEMORY[0x242643BD8](v31, v21, v53);
  v35 = v45;
  sub_23DD272F4(v33, v21, v45);
  v36 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  v36(v33, v21);
  sub_23DD26D88(v35, v21, v52);
  return ((uint64_t (*)(uint64_t, uint64_t))v36)(v35, v21);
}

void sub_23DD8D6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v7 = sub_23DDC6308();
  sub_23DD0A95C();
  v8 = sub_23DDC5C0C();
  v9 = sub_23DDC5DBC();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEE988];
  v20[0] = MEMORY[0x242643BD8](MEMORY[0x24BDF4498], v7);
  v20[1] = sub_23DCF535C(&qword_256CFC818, (uint64_t (*)(uint64_t))sub_23DD0A95C, MEMORY[0x24BDF1028]);
  v16 = v8;
  v17 = v9;
  v18 = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v8, v20);
  v19 = sub_23DCF535C(&qword_256CFF020, v10, MEMORY[0x24BDEE978]);
  MEMORY[0x242643B9C](255, &v16, MEMORY[0x24BDF2188], 0);
  sub_23DDC5C0C();
  sub_23DD0AA4C(255, &qword_256CFC7D8, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
  v11 = sub_23DDC5C0C();
  MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  type metadata accessor for MultilayerCircularGauge();
}

uint64_t sub_23DD8D8B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  sub_23DD8D9F4(*(_QWORD *)(v10 - 240), a1, v9);
  *(_QWORD *)(v10 - 136) = v1;
  *(_QWORD *)(v10 - 128) = v2;
  *(_QWORD *)(v10 - 120) = v5;
  *(_QWORD *)(v10 - 112) = v8;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v12 = MEMORY[0x24BDEDBB8];
  *(_QWORD *)(v10 - 152) = OpaqueTypeConformance2;
  *(_QWORD *)(v10 - 144) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v4, v10 - 152);
  v15 = sub_23DD0B10C((unint64_t *)&qword_256CFC820, &qword_256CFC7D8, MEMORY[0x24BEE1328]);
  *(_QWORD *)(v10 - 168) = v14;
  *(_QWORD *)(v10 - 160) = v15;
  v16 = MEMORY[0x242643BD8](v13, v6, v10 - 168);
  sub_23DD272F4(v9, v6, v3);
  v17 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v17(v9, v6);
  *(_QWORD *)(v10 - 184) = 0;
  *(_BYTE *)(v10 - 176) = 1;
  *(_QWORD *)(v10 - 136) = v10 - 184;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v3, v6);
  *(_QWORD *)(v10 - 128) = v9;
  *(_QWORD *)(v10 - 200) = MEMORY[0x24BDF4638];
  *(_QWORD *)(v10 - 192) = v6;
  *(_QWORD *)(v10 - 216) = MEMORY[0x24BDF4610];
  *(_QWORD *)(v10 - 208) = v16;
  sub_23DD8BDC4((uint64_t *)(v10 - 136), 2uLL, v10 - 200);
  v17(v3, v6);
  return ((uint64_t (*)(uint64_t, uint64_t))v17)(v9, v6);
}

uint64_t sub_23DD8D9F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t OpaqueTypeConformance2;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[2];

  v60 = a1;
  v61 = a3;
  v4 = sub_23DDC5DBC();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEE988];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = v4;
  v44 = v4;
  v59 = v6;
  MEMORY[0x24BDAC7A8](v4);
  v58 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = a2[3];
  v50 = a2[5];
  v9 = sub_23DDC6308();
  v53 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v42 - v10;
  sub_23DD0A95C();
  v12 = sub_23DDC5C0C();
  v52 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v42 - v14;
  v16 = MEMORY[0x242643BD8](MEMORY[0x24BDF4498], v9, v13);
  v45 = v16;
  v17 = sub_23DCF535C(&qword_256CFC818, (uint64_t (*)(uint64_t))sub_23DD0A95C, MEMORY[0x24BDF1028]);
  v73[0] = v16;
  v73[1] = v17;
  v18 = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v12, v73);
  v43 = sub_23DCF535C(&qword_256CFF020, v5, MEMORY[0x24BDEE978]);
  v69 = v12;
  v70 = v7;
  v71 = v18;
  v72 = v43;
  v19 = MEMORY[0x242643B9C](0, &v69, MEMORY[0x24BDF2188], 0);
  v54 = *(_QWORD *)(v19 - 8);
  v48 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v42 - v20;
  v22 = sub_23DDC5C0C();
  v56 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v46 = (char *)&v42 - v23;
  sub_23DD0AA4C(255, &qword_256CFC7D8, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
  v24 = sub_23DDC5C0C();
  v57 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v47 = (char *)&v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v51 = (uint64_t)&v42 - v27;
  v62 = a2[2];
  v63 = v49;
  v64 = a2[4];
  v65 = v50;
  v66 = v55;
  sub_23DDC5DA4();
  sub_23DDC62FC();
  sub_23DDC61C4();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v9);
  v28 = v58;
  sub_23DDC5DB0();
  v29 = v44;
  v30 = v18;
  v31 = v43;
  sub_23DDC6128();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v28, v29);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v15, v12);
  sub_23DDC5B70();
  sub_23DDC5B70();
  sub_23DDC63D4();
  v69 = v12;
  v70 = v29;
  v71 = v30;
  v72 = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v32 = v48;
  v33 = v46;
  sub_23DDC6194();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v21, v32);
  v68[0] = OpaqueTypeConformance2;
  v68[1] = MEMORY[0x24BDEDBB8];
  v34 = MEMORY[0x24BDED308];
  v35 = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v22, v68);
  v36 = (uint64_t)v47;
  sub_23DDC6158();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v33, v22);
  v37 = sub_23DD0B10C((unint64_t *)&qword_256CFC820, &qword_256CFC7D8, MEMORY[0x24BEE1328]);
  v67[0] = v35;
  v67[1] = v37;
  MEMORY[0x242643BD8](v34, v24, v67);
  v38 = v51;
  sub_23DD272F4(v36, v24, v51);
  v39 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
  v39(v36, v24);
  sub_23DD26D88(v38, v24, v61);
  return ((uint64_t (*)(uint64_t, uint64_t))v39)(v38, v24);
}

void sub_23DD8DFB4(uint64_t *a1@<X8>)
{
  uint64_t v2;

  sub_23DDC5B70();
  sub_23DDC5B70();
  *a1 = sub_23DDC63D4();
  a1[1] = v2;
  sub_23DD8E9C8();
  sub_23DD8E108();
}

void sub_23DD8E04C(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for MultilayerCircularGauge();
}

uint64_t sub_23DD8E0B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23DD272F4(v2 + *(int *)(a1 + 60), v1, v4);
  sub_23DD26D88(v4, v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
}

void sub_23DD8E108()
{
  type metadata accessor for MultilayerCircularGauge();
}

uint64_t sub_23DD8E160(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v17;

  v10 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v17 - v11;
  v13 = *v2;
  *(_QWORD *)(v6 - 152) = *v2;
  *(_QWORD *)(v6 - 128) = v13;
  *(_QWORD *)(v6 - 144) = swift_getKeyPath();
  (*(void (**)(char *, uint64_t *, uint64_t))(v10 + 16))(v12, v2, a1);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = v5;
  *((_QWORD *)v15 + 3) = v4;
  *((_QWORD *)v15 + 4) = v3;
  *((_QWORD *)v15 + 5) = v1;
  *((_QWORD *)v15 + 6) = v8;
  *((_QWORD *)v15 + 7) = v7;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v15[v14], v12, a1);
  sub_23DD8E740();
  sub_23DD8E794();
  sub_23DCF535C(&qword_256CFF058, (uint64_t (*)(uint64_t))sub_23DD8E740, MEMORY[0x24BEE12D8]);
  sub_23DCF535C(&qword_256CFF060, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_23DD8E8B4();
  swift_bridgeObjectRetain();
  return sub_23DDC6374();
}

uint64_t sub_23DD8E2C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  char *v13;
  int *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  char v20;
  double v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v10 = sub_23DDC5C6C();
  v11 = MEMORY[0x24BDEDB60];
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for MultilayerCircularGaugeLayer();
  v15 = *(double *)(a1 + v14[7]) * a4;
  v16 = *(double *)(a2 + 8);
  v17 = *(double *)(a2 + 16) - v16;
  v18 = (*(double *)a1 - v16) / v17 * 4.71238898 + 2.35619449;
  v19 = v14[9];
  v20 = *(_BYTE *)(a1 + v14[8]);
  v21 = (*(double *)(a1 + 8) - v16) / v17 * 4.71238898 + 2.35619449;
  v22 = *(_QWORD *)(a1 + v19);
  v23 = *(_BYTE *)(a1 + v19 + 8);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = a1 + v14[6];
  v26 = sub_23DDC6428();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v13, v25, v26);
  sub_23DD8E794();
  sub_23DD8EB80((uint64_t)v13, a3 + *(int *)(v27 + 36));
  *(double *)a3 = v15;
  *(double *)(a3 + 8) = a5;
  *(double *)(a3 + 16) = v18;
  *(double *)(a3 + 24) = v21;
  *(_BYTE *)(a3 + 32) = v20;
  *(_QWORD *)(a3 + 40) = v22;
  *(_BYTE *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 56) = v24;
  swift_retain();
  return sub_23DCF59A8((uint64_t)v13, (uint64_t (*)(_QWORD))v11);
}

void sub_23DD8E42C()
{
  type metadata accessor for MultilayerCircularGauge();
}

uint64_t sub_23DD8E46C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v5 = v2 + ((v4 + 48) & ~v4);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v5 + *(int *)(a1 + 56), v1);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5 + *(int *)(a1 + 60));
  return swift_deallocObject();
}

void sub_23DD8E4F4()
{
  type metadata accessor for MultilayerCircularGauge();
}

uint64_t sub_23DD8E534(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return sub_23DD8C5AC(v1, v2 + ((v8 + 48) & ~v8), v4, v5, v6, v7, v3);
}

void sub_23DD8E57C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_256CFF028)
  {
    sub_23DD8E608();
    v5[0] = v2;
    v5[1] = sub_23DCF535C(&qword_256CFF080, (uint64_t (*)(uint64_t))sub_23DD8E608, MEMORY[0x24BDF4750]);
    v3 = MEMORY[0x242643B9C](a1, v5, MEMORY[0x24BDFAC10], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_256CFF028);
  }
}

void sub_23DD8E608()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFF030)
  {
    sub_23DD8E668();
    sub_23DD8E854();
    v0 = sub_23DDC6338();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFF030);
  }
}

void sub_23DD8E668()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_256CFF038)
  {
    sub_23DD8E740();
    sub_23DDC5144();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
    sub_23DD8E794();
    sub_23DCF535C(&qword_256CFF058, (uint64_t (*)(uint64_t))sub_23DD8E740, MEMORY[0x24BEE12D8]);
    sub_23DCF535C(&qword_256CFF060, v0, MEMORY[0x24BDCEA88]);
    v1 = sub_23DDC6380();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_256CFF038);
  }
}

void sub_23DD8E740()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFF040)
  {
    type metadata accessor for MultilayerCircularGaugeLayer();
    v0 = sub_23DDC67E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFF040);
  }
}

void sub_23DD8E794()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFF048)
  {
    sub_23DD8E7F8();
    sub_23DDC5C6C();
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFF048);
  }
}

void sub_23DD8E7F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFF050)
  {
    sub_23DD53C10();
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFF050);
  }
}

unint64_t sub_23DD8E854()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_256CFF068;
  if (!qword_256CFF068)
  {
    sub_23DD8E668();
    v2 = v1;
    v3 = sub_23DD8E8B4();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF4A08], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CFF068);
  }
  return result;
}

unint64_t sub_23DD8E8B4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFF070;
  if (!qword_256CFF070)
  {
    sub_23DD8E794();
    v2 = v1;
    v3[0] = sub_23DD8E91C();
    v3[1] = MEMORY[0x24BDEDB58];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFF070);
  }
  return result;
}

unint64_t sub_23DD8E91C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFF078;
  if (!qword_256CFF078)
  {
    sub_23DD8E7F8();
    v2 = v1;
    v3[0] = sub_23DD638E4();
    v3[1] = sub_23DCF535C(qword_256CFE260, (uint64_t (*)(uint64_t))sub_23DD53C10, MEMORY[0x24BDF0710]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFF078);
  }
  return result;
}

uint64_t sub_23DD8E99C()
{
  return sub_23DD8E9B4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23DD8CA10);
}

uint64_t sub_23DD8E9A8()
{
  return sub_23DD8E9B4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23DD8D6F4);
}

uint64_t sub_23DD8E9B4(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

void sub_23DD8E9C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFF088)
  {
    sub_23DD8E668();
    v0 = sub_23DDC5B94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFF088);
  }
}

void sub_23DD8EA2C()
{
  type metadata accessor for MultilayerCircularGauge();
}

uint64_t sub_23DD8EA6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v5 = v2 + ((v4 + 64) & ~v4);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v5 + *(int *)(a1 + 56), v1);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5 + *(int *)(a1 + 60));
  return swift_deallocObject();
}

void sub_23DD8EAF4()
{
  type metadata accessor for MultilayerCircularGauge();
}

uint64_t sub_23DD8EB34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return sub_23DD8E2C4(v1, v2 + ((v4 + 64) & ~v4), v3, *(double *)(v2 + 48), *(double *)(v2 + 56));
}

uint64_t sub_23DD8EB80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23DDC5C6C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_23DD8EBC4()
{
  uint64_t v0;

  sub_23DD8E04C(*(_QWORD *)(v0 + 48));
}

ValueMetadata *type metadata accessor for MultilayerCircularGaugeMetrics()
{
  return &type metadata for MultilayerCircularGaugeMetrics;
}

uint64_t sub_23DD8EBE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];

  v1 = *(_QWORD *)(a1 + 16);
  sub_23DD0A95C();
  v2 = sub_23DDC5C0C();
  v3 = sub_23DDC5DBC();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BDEE988];
  v25 = sub_23DCF535C(&qword_256CFC818, (uint64_t (*)(uint64_t))sub_23DD0A95C, MEMORY[0x24BDF1028]);
  v35[0] = v1;
  v35[1] = v25;
  v5 = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v35);
  v6 = sub_23DCF535C(&qword_256CFF020, v4, MEMORY[0x24BDEE978]);
  v31 = v2;
  v32 = v3;
  v33 = v5;
  v34 = v6;
  v7 = MEMORY[0x24BDF2188];
  MEMORY[0x242643B9C](255, &v31, MEMORY[0x24BDF2188], 0);
  v8 = sub_23DDC5C0C();
  v9 = MEMORY[0x24BEE1328];
  sub_23DD0AA4C(255, &qword_256CFC7D8, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
  v10 = sub_23DDC5C0C();
  v31 = v2;
  v32 = v3;
  v33 = v5;
  v34 = v6;
  v30[0] = swift_getOpaqueTypeConformance2();
  v30[1] = MEMORY[0x24BDEDBB8];
  v11 = MEMORY[0x24BDED308];
  v29[0] = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v8, v30);
  v29[1] = sub_23DD0B10C((unint64_t *)&qword_256CFC820, &qword_256CFC7D8, v9);
  v12 = MEMORY[0x242643BD8](v11, v10, v29);
  v31 = v10;
  v32 = v12;
  MEMORY[0x242643B9C](255, &v31, MEMORY[0x24BDFAC10], 0);
  v13 = sub_23DDC6308();
  v14 = sub_23DDC5C0C();
  v28[0] = MEMORY[0x242643BD8](MEMORY[0x24BDF4498], v13);
  v28[1] = v25;
  v15 = MEMORY[0x242643BD8](v11, v14, v28);
  v31 = v14;
  v32 = v3;
  v33 = v15;
  v34 = v6;
  MEMORY[0x242643B9C](255, &v31, v7, 0);
  sub_23DDC5C0C();
  sub_23DDC5C0C();
  swift_getTupleTypeMetadata2();
  v16 = sub_23DDC6434();
  v17 = MEMORY[0x24BDF5428];
  MEMORY[0x242643BD8](MEMORY[0x24BDF5428], v16);
  sub_23DDC6320();
  sub_23DD8E57C(255);
  swift_getTupleTypeMetadata3();
  v18 = sub_23DDC6434();
  MEMORY[0x242643BD8](v17, v18);
  v19 = sub_23DDC6338();
  MEMORY[0x242643BD8](MEMORY[0x24BDF4750], v19);
  v20 = sub_23DDC5BB8();
  v21 = sub_23DDC5C0C();
  v22 = MEMORY[0x24BEE50B0];
  sub_23DD0AA4C(255, &qword_256CFDAA8, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
  v23 = sub_23DDC5C0C();
  v27[0] = MEMORY[0x242643BD8](MEMORY[0x24BDEC6F8], v20);
  v27[1] = MEMORY[0x24BDEEC40];
  v26[0] = MEMORY[0x242643BD8](v11, v21, v27);
  v26[1] = sub_23DD0B10C((unint64_t *)&qword_256CFDAE0, &qword_256CFDAA8, v22);
  return MEMORY[0x242643BD8](v11, v23, v26);
}

uint64_t sub_23DD8EFCC(void (*a1)(char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t, double);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v4 = v3;
  v5 = v2;
  v59 = a1;
  v60 = a2;
  v6 = sub_23DDC6530();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v54 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v62 = (char *)&v52 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v58 = (char *)&v52 - v12;
  v13 = sub_23DDC512C();
  v56 = *(_QWORD *)(v13 - 8);
  v57 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v67 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD94D04();
  MEMORY[0x24BDAC7A8](v15);
  v55 = (uint64_t)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v52 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v61 = (uint64_t)&v52 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v68 = (uint64_t)&v52 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v52 - v25;
  v28 = MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v52 - v29;
  v66 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v66((char *)&v52 - v29, v5, v6, v28);
  v63 = v7;
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v31(v30, 0, 1, v6);
  v31(v26, 1, 1, v6);
  v32 = sub_23DD938D4((uint64_t)v30, (uint64_t)v26);
  sub_23DCF59A8((uint64_t)v26, (uint64_t (*)(_QWORD))sub_23DD94D04);
  sub_23DCF59A8((uint64_t)v30, (uint64_t (*)(_QWORD))sub_23DD94D04);
  result = MEMORY[0x24BEE4AF8];
  if (v32)
  {
    v70 = MEMORY[0x24BEE4AF8];
    sub_23DD92AD0(0, v32 & ~(v32 >> 63), 0);
    v34 = v68;
    ((void (*)(uint64_t, uint64_t, uint64_t))v66)(v68, v5, v6);
    result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v31)(v34, 0, 1, v6);
    if ((v32 & 0x8000000000000000) == 0)
    {
      v35 = v32;
      v36 = (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488];
      v38 = v62;
      v37 = v63;
      v52 = v5;
      v53 = v19;
      while (v35)
      {
        v65 = v35;
        v41 = v61;
        sub_23DCF58EC(v34, v61, (uint64_t (*)(_QWORD))sub_23DD94D04);
        v66 = *(void (**)(char *, uint64_t, uint64_t, double))(v37 + 48);
        result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v66)(v41, 1, v6);
        if ((_DWORD)result == 1)
          goto LABEL_21;
        v42 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 32);
        v43 = v58;
        v42(v58, v41, v6);
        v42(v38, (uint64_t)v43, v6);
        v59(v38);
        if (v4)
        {
          (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v6);
          sub_23DCF59A8(v68, (uint64_t (*)(_QWORD))sub_23DD94D04);
          return swift_release();
        }
        v44 = *(void (**)(char *, uint64_t))(v37 + 8);
        v44(v38, v6);
        v45 = v70;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v64 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_23DD92AD0(0, *(_QWORD *)(v45 + 16) + 1, 1);
          v45 = v70;
        }
        v48 = *(_QWORD *)(v45 + 16);
        v47 = *(_QWORD *)(v45 + 24);
        if (v48 >= v47 >> 1)
        {
          sub_23DD92AD0(v47 > 1, v48 + 1, 1);
          v45 = v70;
        }
        *(_QWORD *)(v45 + 16) = v48 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v56 + 32))(v45+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72) * v48, v67, v57);
        v70 = v45;
        v49 = v55;
        sub_23DCF58EC(v68, v55, (uint64_t (*)(_QWORD))sub_23DD94D04);
        result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v66)(v49, 1, v6);
        if ((_DWORD)result == 1)
          goto LABEL_22;
        v50 = v54;
        v42(v54, v49, v6);
        sub_23DD020E0();
        sub_23DCF535C(&qword_254326728, v36, MEMORY[0x24BDD24B0]);
        v51 = sub_23DDC66C8();
        v4 = v64;
        if ((v51 & 1) != 0)
        {
          v44(v50, v6);
          v40 = 1;
          v39 = (uint64_t)v53;
        }
        else
        {
          v69 = 1;
          sub_23DCF535C(&qword_254326730, v36, MEMORY[0x24BDD24C0]);
          v39 = (uint64_t)v53;
          sub_23DDC69A4();
          v44(v50, v6);
          v40 = 0;
        }
        v31((char *)v39, v40, 1, v6);
        v34 = v68;
        sub_23DCF59A8(v68, (uint64_t (*)(_QWORD))sub_23DD94D04);
        result = sub_23DCFBB58(v39, v34, (uint64_t (*)(_QWORD))sub_23DD94D04);
        v35 = v65 - 1;
        v38 = v62;
        v37 = v63;
        if (v65 == 1)
        {
          sub_23DCF59A8(v34, (uint64_t (*)(_QWORD))sub_23DD94D04);
          return v70;
        }
      }
      __break(1u);
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  return result;
}

uint64_t sub_23DD8F548(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = v4;
  v20 = a1;
  v21 = a2;
  v19 = sub_23DDC512C();
  v8 = *(_QWORD *)(v19 - 8);
  result = MEMORY[0x24BDAC7A8](v19);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a3;
  v12 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v13 = MEMORY[0x24BEE4AF8];
  if (!v12)
    return v13;
  v24 = MEMORY[0x24BEE4AF8];
  result = sub_23DD92AD0(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = v24;
    v14 = v22;
    if (a4 <= v22)
      v15 = v22;
    else
      v15 = a4;
    v18 = v15;
    while (a4 != v14)
    {
      v23 = v14;
      v20(&v23);
      if (v5)
      {
        swift_release();
        return v13;
      }
      v5 = 0;
      v24 = v13;
      v17 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v13 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_23DD92AD0(v16 > 1, v17 + 1, 1);
        v13 = v24;
      }
      *(_QWORD *)(v13 + 16) = v17 + 1;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v17, v11, v19);
      if (a4 < v22)
        goto LABEL_19;
      if (v18 == v14)
        goto LABEL_20;
      if (a4 == ++v14)
        return v13;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_23DD8F6F0(void (*a1)(__int128 *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_23DD92B28(0, v5, 0);
    v6 = v17;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v15 = *i;
      a1(&v16, &v15);
      if (v4)
        break;
      v4 = 0;
      v10 = v16;
      v17 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        v14 = v16;
        sub_23DD92B28(v11 > 1, v12 + 1, 1);
        v10 = v14;
        v6 = v17;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_OWORD *)(v6 + 16 * v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_23DD8F804(void (*a1)(uint64_t *__return_ptr, __int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  __int128 *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_23DD92B44(0, v5, 0);
    v6 = v16;
    for (i = (__int128 *)(a3 + 32); ; ++i)
    {
      v14 = *i;
      a1(&v15, &v14);
      if (v4)
        break;
      v4 = 0;
      v10 = v15;
      v16 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_23DD92B44(v11 > 1, v12 + 1, 1);
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_QWORD *)(v6 + 8 * v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_23DD8F910(void (*a1)(_QWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v18[2];
  uint64_t v19;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v19 = MEMORY[0x24BEE4AF8];
    sub_23DD92C0C(0, v5, 0);
    v6 = v19;
    v8 = *(_QWORD *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) - 8);
    v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      a1(v18, v9);
      if (v4)
        break;
      v4 = 0;
      v11 = v18[0];
      v12 = v18[1];
      v19 = v6;
      v14 = *(_QWORD *)(v6 + 16);
      v13 = *(_QWORD *)(v6 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_23DD92C0C(v13 > 1, v14 + 1, 1);
        v6 = v19;
      }
      *(_QWORD *)(v6 + 16) = v14 + 1;
      v15 = v6 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v12;
      v9 += v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_23DD8FA3C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v6 = type metadata accessor for SleepingSampleViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v21 = MEMORY[0x24BEE4AF8];
    sub_23DD92C28(0, v10, 0);
    v11 = v21;
    v12 = *(_QWORD *)(sub_23DDC53A8() - 8);
    v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v18 = *(_QWORD *)(v12 + 72);
    while (1)
    {
      v19(v13);
      if (v4)
        break;
      v4 = 0;
      v21 = v11;
      v15 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_23DD92C28(v14 > 1, v15 + 1, 1);
        v11 = v21;
      }
      *(_QWORD *)(v11 + 16) = v15 + 1;
      sub_23DCFBB58((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, type metadata accessor for SleepingSampleViewModel);
      v13 += v18;
      if (!--v10)
        return v11;
    }
    swift_release();
  }
  return v11;
}

uint64_t sub_23DD8FBB0(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;

  v4 = v3;
  v18 = a1;
  v19 = a2;
  v17 = sub_23DDC5528();
  v6 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v20 = MEMORY[0x24BEE4AF8];
    sub_23DD92AFC(0, v9, 0);
    v10 = v20;
    v11 = *(_QWORD *)(sub_23DDC5420() - 8);
    v12 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v16 = *(_QWORD *)(v11 + 72);
    while (1)
    {
      v18(v12);
      if (v4)
        break;
      v4 = 0;
      v20 = v10;
      v14 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_23DD92AFC(v13 > 1, v14 + 1, 1);
        v10 = v20;
      }
      *(_QWORD *)(v10 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, v8, v17);
      v12 += v16;
      if (!--v9)
        return v10;
    }
    swift_release();
  }
  return v10;
}

unint64_t sub_23DD8FD28(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  return sub_23DD8FD60(a1, a2, a3, (uint64_t (*)(_QWORD, double))sub_23DD602C0);
}

unint64_t sub_23DD8FD44(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  return sub_23DD8FD60(a1, a2, a3, (uint64_t (*)(_QWORD, double))type metadata accessor for OvernightMetricsChartPoint);
}

unint64_t sub_23DD8FD60(void (*a1)(_QWORD), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, double))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  void (*v25)(_QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_23DD94E7C(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v11 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v28 = (uint64_t)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v26 = (uint64_t)v24 - v15;
  v16 = *(_QWORD *)(a3 + 16);
  if (!v16)
    return MEMORY[0x24BEE4AF8];
  v17 = *(_QWORD *)(a4(0, v14) - 8);
  v18 = a3 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v27 = *(_QWORD *)(v17 + 72);
  v24[1] = a3;
  swift_bridgeObjectRetain();
  v19 = MEMORY[0x24BEE4AF8];
  v25 = a1;
  do
  {
    a1(v18);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v29) == 1)
    {
      sub_23DCF59A8((uint64_t)v10, (uint64_t (*)(_QWORD))sub_23DD94E7C);
    }
    else
    {
      v20 = v26;
      sub_23DCFBB58((uint64_t)v10, v26, type metadata accessor for IndividualOvernightMetricChartPoint);
      sub_23DCFBB58(v20, v28, type metadata accessor for IndividualOvernightMetricChartPoint);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = sub_23DD56C20(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
      v22 = *(_QWORD *)(v19 + 16);
      v21 = *(_QWORD *)(v19 + 24);
      if (v22 >= v21 >> 1)
        v19 = sub_23DD56C20(v21 > 1, v22 + 1, 1, v19);
      *(_QWORD *)(v19 + 16) = v22 + 1;
      sub_23DCFBB58(v28, v19+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v22, type metadata accessor for IndividualOvernightMetricChartPoint);
      a1 = v25;
    }
    v18 += v27;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  return v19;
}

unint64_t sub_23DD8FFCC(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  void (*v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_23DD94E0C(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for BaselineRelativeChartPoint();
  v9 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v25 = (uint64_t)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v23 = (uint64_t)v21 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return MEMORY[0x24BEE4AF8];
  v14 = *(_QWORD *)(sub_23DDC5528() - 8);
  v15 = a3 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v24 = *(_QWORD *)(v14 + 72);
  v21[1] = a3;
  swift_bridgeObjectRetain();
  v16 = MEMORY[0x24BEE4AF8];
  v22 = a1;
  do
  {
    a1(v15);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v26) == 1)
    {
      sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DD94E0C);
    }
    else
    {
      v17 = v23;
      sub_23DCFBB58((uint64_t)v8, v23, (uint64_t (*)(_QWORD))type metadata accessor for BaselineRelativeChartPoint);
      sub_23DCFBB58(v17, v25, (uint64_t (*)(_QWORD))type metadata accessor for BaselineRelativeChartPoint);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = sub_23DD56F54(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
      v19 = *(_QWORD *)(v16 + 16);
      v18 = *(_QWORD *)(v16 + 24);
      if (v19 >= v18 >> 1)
        v16 = sub_23DD56F54(v18 > 1, v19 + 1, 1, v16);
      *(_QWORD *)(v16 + 16) = v19 + 1;
      sub_23DCFBB58(v25, v16+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v19, (uint64_t (*)(_QWORD))type metadata accessor for BaselineRelativeChartPoint);
      a1 = v22;
    }
    v15 += v24;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t SleepingSampleViewModel.dataType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DDC53A8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SleepingSampleViewModel.dataType.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DDC53A8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*SleepingSampleViewModel.dataType.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.dayRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23DD914BC(type metadata accessor for SleepingSampleViewModel, (uint64_t (*)(_QWORD))MEMORY[0x24BE3FCF0], a1);
}

uint64_t type metadata accessor for SleepingSampleViewModel(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFF108);
}

uint64_t SleepingSampleViewModel.dayRange.setter(uint64_t a1)
{
  return sub_23DD91528(a1, type metadata accessor for SleepingSampleViewModel, (uint64_t (*)(_QWORD))MEMORY[0x24BE3FCF0]);
}

uint64_t (*SleepingSampleViewModel.dayRange.modify())(_QWORD)
{
  type metadata accessor for SleepingSampleViewModel(0);
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.chronologicalBaselineComparisons.getter()
{
  type metadata accessor for SleepingSampleViewModel(0);
  return swift_bridgeObjectRetain();
}

uint64_t SleepingSampleViewModel.chronologicalBaselineComparisons.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 24);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*SleepingSampleViewModel.chronologicalBaselineComparisons.modify())(_QWORD)
{
  type metadata accessor for SleepingSampleViewModel(0);
  return nullsub_1;
}

id SleepingSampleViewModel.preferredAggregateValueUnit.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 28));
}

void SleepingSampleViewModel.preferredAggregateValueUnit.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 28);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*SleepingSampleViewModel.preferredAggregateValueUnit.modify())(_QWORD)
{
  type metadata accessor for SleepingSampleViewModel(0);
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.featureStatus.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 32);
  v4 = sub_23DDC55F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SleepingSampleViewModel.featureStatus.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 32);
  v4 = sub_23DDC55F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SleepingSampleViewModel.featureStatus.modify())(_QWORD)
{
  type metadata accessor for SleepingSampleViewModel(0);
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.init(dataType:dayRange:chronologicalBaselineComparisons:preferredAggregateValueUnit:featureStatus:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  v13 = (int *)type metadata accessor for SleepingSampleViewModel(0);
  v14 = a6 + v13[5];
  v15 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a2, v15);
  *(_QWORD *)(a6 + v13[6]) = a3;
  *(_QWORD *)(a6 + v13[7]) = a4;
  v16 = a6 + v13[8];
  v17 = sub_23DDC55F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a5, v17);
}

uint64_t SleepingSampleViewModel.filtered(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  double v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t result;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE v19[16];

  v3 = v2;
  v6 = type metadata accessor for SleepingSampleViewModel(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_23DDC5330();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FCF0];
  v11 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v11 + 16))(v14, v3 + *(int *)(v6 + 20), v9, v12);
  sub_23DCF535C(&qword_256CFDC70, v10, MEMORY[0x24BE3FD10]);
  LOBYTE(v10) = sub_23DDC66C8();
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v14, v9);
  if ((v10 & 1) != 0)
    return sub_23DCF58EC(v3, a2, type metadata accessor for SleepingSampleViewModel);
  v16 = sub_23DCF58EC(v3, (uint64_t)v8, type metadata accessor for SleepingSampleViewModel);
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)&v19[-16] = a1;
  v17 = &v8[*(int *)(v6 + 24)];
  result = sub_23DD46C18((uint64_t (*)(unint64_t))sub_23DD90948, (uint64_t)&v19[-32]);
  v18 = *(_QWORD *)(*(_QWORD *)v17 + 16);
  if (v18 < result)
  {
    __break(1u);
  }
  else
  {
    sub_23DD4C434(result, v18);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 24))(&v8[*(int *)(v6 + 20)], a1, v9);
    return sub_23DCFBB58((uint64_t)v8, a2, type metadata accessor for SleepingSampleViewModel);
  }
  return result;
}

uint64_t sub_23DD90770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v0 = sub_23DDC6530();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v17 - v5;
  sub_23DD020E0();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v17 - v11;
  sub_23DDC52F4();
  sub_23DDC5498();
  sub_23DCF535C(&qword_254326720, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
  v13 = sub_23DDC6698();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
  sub_23DCF58EC((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DD020E0);
  if ((v13 & 1) != 0)
    v14 = sub_23DDC66A4() ^ 1;
  else
    v14 = 1;
  sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DD020E0);
  v15 = *(void (**)(char *, uint64_t))(v1 + 8);
  v15(v3, v0);
  v15(v6, v0);
  sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DD020E0);
  return v14 & 1;
}

uint64_t sub_23DD90948()
{
  return sub_23DD90770() & 1;
}

uint64_t SleepingSampleViewModel.baselineComparisonForToday.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_23DD020E0();
  v26 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DDC6530();
  v27 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v24 - v10;
  v28 = sub_23DDC5528();
  v12 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 24));
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v25 = a1;
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v14, v15+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * (v16 - 1), v28);
    sub_23DDC5498();
    sub_23DDC52F4();
    v17 = v27;
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v8, &v5[*(int *)(v26 + 36)], v6);
    sub_23DCF59A8((uint64_t)v5, (uint64_t (*)(_QWORD))sub_23DD020E0);
    sub_23DCF535C(&qword_254326730, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
    sub_23DDC69B0();
    v18 = v29;
    v19 = *(void (**)(char *, uint64_t))(v17 + 8);
    v19(v8, v6);
    v19(v11, v6);
    if (v18)
    {
      v20 = v28;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v28);
      v21 = 1;
      a1 = v25;
    }
    else
    {
      a1 = v25;
      v20 = v28;
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v25, v14, v28);
      v21 = 0;
    }
    v22 = v20;
  }
  else
  {
    v21 = 1;
    v22 = v28;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, v21, 1, v22);
}

uint64_t SleepingSampleViewModel.primaryTintColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t v20;

  sub_23DD93DC4(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23DDC53CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD93DE0(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DDC5528();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DD93DE0);
    return sub_23DDC6200();
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  sub_23DDC551C();
  v14 = (void *)sub_23DDC53C0();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

  if (!v14
    || (sub_23DDC5510(),
        v15 = sub_23DDC5354(),
        v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v2, 1, v15),
        sub_23DCF59A8((uint64_t)v2, (uint64_t (*)(_QWORD))sub_23DD93DC4),
        v16 == 1))
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return sub_23DDC6200();
  }
  if ((sub_23DDC548C() & 1) != 0)
  {
    if (qword_256CFC0A8 != -1)
      swift_once();
    v19 = &qword_256CFE668;
  }
  else
  {
    if (qword_256CFC098 != -1)
      swift_once();
    v19 = &qword_256CFE658;
  }
  v17 = MEMORY[0x242642C18]((id)*v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v17;
}

uint64_t SleepingSampleViewModel.backgroundColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v0 = sub_23DDC5774();
  v25 = *(_QWORD *)(v0 - 8);
  v26 = v0;
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD93DC4(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DDC53CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD93DE0(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23DDC5528();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DD93DE0);
    return sub_23DDC6200();
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  sub_23DDC551C();
  v17 = (void *)sub_23DDC53C0();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

  if (!v17
    || (sub_23DDC5510(),
        v18 = sub_23DDC5354(),
        v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v5, 1, v18),
        sub_23DCF59A8((uint64_t)v5, (uint64_t (*)(_QWORD))sub_23DD93DC4),
        v19 == 1))
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return sub_23DDC6200();
  }
  if ((sub_23DDC548C() & 1) != 0)
  {
    if (qword_256CFC0C8 != -1)
      swift_once();
    v22 = qword_256D06598;
  }
  else
  {
    if (qword_256CFC0C0 != -1)
      swift_once();
    v22 = qword_256D06580;
  }
  v23 = v26;
  v24 = __swift_project_value_buffer(v26, (uint64_t)v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v2, v24, v23);
  v20 = sub_23DDC626C();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return v20;
}

uint64_t SleepingSampleViewModel.availability.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_23DD93DE0(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v4);
  v5 = sub_23DDC5528();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_23DCF59A8((uint64_t)v4, (uint64_t (*)(_QWORD))sub_23DD93DE0);
  }
  else
  {
    v7 = sub_23DDC5504();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if ((v7 & 1) != 0)
    {
      v8 = *MEMORY[0x24BE40490];
      v9 = sub_23DDC55DC();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(a1, v8, v9);
    }
  }
  type metadata accessor for SleepingSampleViewModel(0);
  return sub_23DDC55E8();
}

BOOL SleepingSampleViewModel.hasConfigurationIssue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BOOL8 v13;
  uint64_t v15;

  sub_23DD93DE0(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23DDC55DC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - v8;
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v2);
  v10 = sub_23DDC5528();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v2, 1, v10) == 1)
  {
    sub_23DCF59A8((uint64_t)v2, (uint64_t (*)(_QWORD))sub_23DD93DE0);
LABEL_5:
    type metadata accessor for SleepingSampleViewModel(0);
    sub_23DDC55E8();
    goto LABEL_6;
  }
  v12 = sub_23DDC5504();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v2, v10);
  if ((v12 & 1) == 0)
    goto LABEL_5;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BE40490], v3);
LABEL_6:
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
  v13 = (*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v9, v3) == *MEMORY[0x24BE40480];
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  return v13;
}

uint64_t SleepingSampleViewModel.Summary.Variant.hash(into:)()
{
  return sub_23DDC6C5C();
}

BOOL static SleepingSampleViewModel.Summary.Variant.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepingSampleViewModel.Summary.Variant.hashValue.getter()
{
  sub_23DDC6C50();
  sub_23DDC6C5C();
  return sub_23DDC6C80();
}

void SleepingSampleViewModel.Summary.variant.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *SleepingSampleViewModel.Summary.variant.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*SleepingSampleViewModel.Summary.variant.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.Summary.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23DD914BC(type metadata accessor for SleepingSampleViewModel.Summary, (uint64_t (*)(_QWORD))MEMORY[0x24BDCC5A8], a1);
}

uint64_t sub_23DD914BC@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 20);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, v6, v7);
}

uint64_t SleepingSampleViewModel.Summary.value.setter(uint64_t a1)
{
  return sub_23DD91528(a1, type metadata accessor for SleepingSampleViewModel.Summary, (uint64_t (*)(_QWORD))MEMORY[0x24BDCC5A8]);
}

uint64_t sub_23DD91528(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a2(0) + 20);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v6, a1, v7);
}

uint64_t (*SleepingSampleViewModel.Summary.value.modify())(_QWORD)
{
  type metadata accessor for SleepingSampleViewModel.Summary(0);
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.Summary.unit.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepingSampleViewModel.Summary(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepingSampleViewModel.Summary.unit.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SleepingSampleViewModel.Summary(0) + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepingSampleViewModel.Summary.unit.modify())(_QWORD)
{
  type metadata accessor for SleepingSampleViewModel.Summary(0);
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.Summary.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepingSampleViewModel.Summary(0) + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepingSampleViewModel.Summary.description.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SleepingSampleViewModel.Summary(0) + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepingSampleViewModel.Summary.description.modify())(_QWORD)
{
  type metadata accessor for SleepingSampleViewModel.Summary(0);
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.Summary.shortenedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepingSampleViewModel.Summary(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepingSampleViewModel.Summary.shortenedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SleepingSampleViewModel.Summary(0) + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SleepingSampleViewModel.Summary.shortenedDescription.modify())(_QWORD)
{
  type metadata accessor for SleepingSampleViewModel.Summary(0);
  return nullsub_1;
}

uint64_t SleepingSampleViewModel.summary.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t result;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unsigned __int8 v47;
  unsigned __int8 v48;

  sub_23DD93E10(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23DDC4F70();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v45 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v44 = (char *)&v42 - v9;
  v10 = sub_23DDC4FB8();
  MEMORY[0x24BDAC7A8](v10);
  sub_23DD93DE0(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v13);
  v14 = sub_23DDC5528();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_23DCF59A8((uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DD93DE0);
  }
  else
  {
    v16 = sub_23DDC54F8();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    if (v16 > 0)
    {
      v46 = v16;
      sub_23DD49324();
      sub_23DDC69C8();
      sub_23DDC4FAC();
      v17 = (int *)type metadata accessor for SleepingSampleViewModel.Summary(0);
      result = sub_23DDC4F7C();
      *a1 = 1;
      v19 = &a1[v17[6]];
      *v19 = 0;
      v19[1] = 0;
      v20 = &a1[v17[7]];
      *v20 = 0;
      v20[1] = 0;
      v21 = v17[8];
LABEL_7:
      v25 = &a1[v21];
      *v25 = 0;
      v25[1] = 0;
      return result;
    }
  }
  SleepingSampleViewModel.formattedCurrentAggregateValue.getter((uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_23DCF59A8((uint64_t)v4, (uint64_t (*)(_QWORD))sub_23DD93E10);
    v22 = (int *)type metadata accessor for SleepingSampleViewModel.Summary(0);
    result = SleepingSampleViewModel.noDataString.getter();
    *a1 = 0;
    v23 = &a1[v22[6]];
    *v23 = 0;
    v23[1] = 0;
    v24 = &a1[v22[7]];
    *v24 = 0;
    v24[1] = 0;
    v21 = v22[8];
    goto LABEL_7;
  }
  v26 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v27 = v44;
  v26(v44, v4, v5);
  v28 = v45;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v45, v27, v5);
  v29 = SleepingSampleViewModel.localizedAggregateValueUnitString.getter();
  v42 = v30;
  v43 = v29;
  v48 = 0;
  v31 = sub_23DD91F9C(&v48);
  v33 = v32;
  v47 = 1;
  v34 = sub_23DD91F9C(&v47);
  v36 = v35;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v27, v5);
  *a1 = 2;
  v37 = (int *)type metadata accessor for SleepingSampleViewModel.Summary(0);
  result = ((uint64_t (*)(_BYTE *, char *, uint64_t))v26)(&a1[v37[5]], v28, v5);
  v38 = (uint64_t *)&a1[v37[6]];
  v39 = v42;
  *v38 = v43;
  v38[1] = v39;
  v40 = (uint64_t *)&a1[v37[7]];
  *v40 = v31;
  v40[1] = v33;
  v41 = (uint64_t *)&a1[v37[8]];
  *v41 = v34;
  v41[1] = v36;
  return result;
}

uint64_t SleepingSampleViewModel.warmupDaysRemaining.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  sub_23DD93DE0(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v2);
  v3 = sub_23DDC5528();
  v4 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23DCF59A8((uint64_t)v2, (uint64_t (*)(_QWORD))sub_23DD93DE0);
    return 0;
  }
  else
  {
    v5 = sub_23DDC54F8();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  }
  return v5;
}

uint64_t SleepingSampleViewModel.formattedCurrentAggregateValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;

  v2 = v1;
  sub_23DD93E10(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DDC53CC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD93DE0(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v13);
  v14 = sub_23DDC5528();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_23DCF59A8((uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DD93DE0);
LABEL_6:
    v19 = sub_23DDC4F70();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
    goto LABEL_7;
  }
  sub_23DDC551C();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  v16 = (void *)sub_23DDC53C0();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (!v16)
    goto LABEL_6;
  v17 = *(void **)(v2 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 28));
  v18 = v16;
  HKQuantity.formattedAttributedValue(for:unit:)(v2, v17, (uint64_t)v6);

  v19 = sub_23DDC4F70();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
  v21(v6, 0, 1, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v6, 1, v19) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(a1, v6, v19);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v21)(a1, 0, 1, v19);
  }
LABEL_7:
  sub_23DCF59A8((uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DD93E10);
  sub_23DDC4F70();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 1, 1, v19);
}

uint64_t SleepingSampleViewModel.localizedAggregateValueUnitString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = sub_23DDC53CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD93DE0(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v8);
  v9 = sub_23DDC5528();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DD93DE0);
  }
  else
  {
    sub_23DDC551C();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v11 = (void *)sub_23DDC53C0();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v11)
    {

      v12 = type metadata accessor for SleepingSampleViewModel(0);
      return SleepingSampleDataType.localizedUnitString(for:)(*(HKUnit *)(v1 + *(int *)(v12 + 28))).value._countAndFlagsBits;
    }
  }
  return 0;
}

uint64_t sub_23DD91F9C(unsigned __int8 *a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  int v32;
  char *v33;
  unsigned __int8 v34;

  sub_23DD93DC4(0);
  MEMORY[0x24BDAC7A8](v3);
  v33 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v31 - v6;
  v8 = sub_23DDC53CC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD93DE0(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23DDC5528();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *a1;
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_23DCF59A8((uint64_t)v14, (uint64_t (*)(_QWORD))sub_23DD93DE0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    sub_23DDC551C();
    v19 = (void *)sub_23DDC53C0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (v19)
    {
      sub_23DDC5510();
      v20 = sub_23DDC5354();
      v21 = *(_QWORD *)(v20 - 8);
      v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
      if (v22(v7, 1, v20) != 1)
      {
        v31 = (void *)sub_23DDC533C();
        v23 = *(void (**)(char *, uint64_t))(v21 + 8);
        v23(v7, v20);
        v7 = v33;
        sub_23DDC5510();
        if (v22(v7, 1, v20) != 1)
        {
          v26 = sub_23DDC5348();
          v27 = v7;
          v28 = (void *)v26;
          v23(v27, v20);
          v29 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 28));
          v34 = v32;
          v30 = v31;
          v24 = HKQuantity.formatted(for:relativeToMedialRange:middle:unit:variant:)(v1, v31, v28, v29, &v34);

          (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
          return v24;
        }

      }
      sub_23DCF59A8((uint64_t)v7, (uint64_t (*)(_QWORD))sub_23DD93DC4);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  return 0;
}

uint64_t SleepingSampleViewModel.noDataString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjCClassFromMetadata;
  id v4;

  v0 = sub_23DDC4FB8();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v2);
  sub_23DDC66D4();
  type metadata accessor for HealthBalanceUI();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v4 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23DDC5168();
  sub_23DDC6770();
  sub_23DDC4FAC();
  return sub_23DDC4F7C();
}

unint64_t SleepingSampleViewModel.chartPoints.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 24));
  v5 = v0;
  swift_bridgeObjectRetain();
  v2 = sub_23DD8FFCC((void (*)(_QWORD))sub_23DD93E2C, (uint64_t)&v4, v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_23DD9246C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  char *v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = a1;
  v2 = sub_23DDC51E0();
  v40 = *(_QWORD *)(v2 - 8);
  v41 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v39 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23DDC512C();
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v43 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DDC6530();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v38 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v36 - v10;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v36 - v13;
  sub_23DD020E0();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v36 - v19;
  v21 = sub_23DDC5474();
  v42 = v22;
  if ((v22 & 1) != 0)
  {
    if ((sub_23DDC5480() & 1) == 0)
    {
LABEL_13:
      v30 = type metadata accessor for BaselineRelativeChartPoint();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v46, 1, 1, v30);
    }
    v37 = 0;
  }
  else
  {
    v37 = v21;
  }
  v36[1] = v1 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 20);
  sub_23DDC52F4();
  sub_23DDC5498();
  sub_23DCF535C(&qword_254326720, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
  v23 = sub_23DDC6698();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v14, v6);
  sub_23DCF58EC((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_23DD020E0);
  if ((v23 & 1) != 0)
    v24 = sub_23DDC66A4();
  else
    v24 = 0;
  sub_23DCF59A8((uint64_t)v17, (uint64_t (*)(_QWORD))sub_23DD020E0);
  v25 = *(void (**)(char *, uint64_t))(v7 + 8);
  v25(v11, v6);
  v25(v14, v6);
  sub_23DCF59A8((uint64_t)v20, (uint64_t (*)(_QWORD))sub_23DD020E0);
  if ((v24 & 1) == 0)
    goto LABEL_13;
  v26 = v38;
  sub_23DDC5498();
  v27 = v39;
  sub_23DDC530C();
  v28 = v43;
  sub_23DDC6524();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v41);
  v25(v26, v6);
  if ((sub_23DDC548C() & 1) != 0)
  {
    if (qword_256CFC0A8 != -1)
      swift_once();
    v29 = &qword_256CFE668;
  }
  else
  {
    if (qword_256CFC098 != -1)
      swift_once();
    v29 = &qword_256CFE658;
  }
  v32 = v46;
  v33 = MEMORY[0x242642C18]((id)*v29);
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v32, v28, v45);
  v34 = type metadata accessor for BaselineRelativeChartPoint();
  v35 = v32 + *(int *)(v34 + 20);
  *(_QWORD *)v35 = v37;
  *(_BYTE *)(v35 + 8) = v42 & 1;
  *(_QWORD *)(v32 + *(int *)(v34 + 24)) = v33;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v32, 0, 1, v34);
}

uint64_t SleepingSampleViewModel.emphasizedChartPoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = sub_23DDC5528();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD93DE0(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - v10;
  SleepingSampleViewModel.baselineComparisonForToday.getter((uint64_t)&v14 - v10);
  sub_23DCF58EC((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DD93DE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    v12 = type metadata accessor for BaselineRelativeChartPoint();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_23DD9246C(a1);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return sub_23DCF59A8((uint64_t)v11, (uint64_t (*)(_QWORD))sub_23DD93DE0);
}

double SleepingSampleViewModel.chartableMedialRange.getter()
{
  return -1.0;
}

uint64_t SleepingSampleViewModel.keyDatesForTimeAxis.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[16];
  uint64_t v8;

  sub_23DD020E0();
  MEMORY[0x24BDAC7A8](v1);
  v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = v0 + *(int *)(type metadata accessor for SleepingSampleViewModel(0) + 20);
  sub_23DDC52F4();
  v8 = v4;
  v5 = sub_23DD8EFCC((void (*)(char *))sub_23DD4C68C, (uint64_t)v7);
  sub_23DCF59A8((uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DD020E0);
  return v5;
}

uint64_t sub_23DD92A88(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DD92C54(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DD92AA4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DD936F4(a1, a2, a3, (_QWORD *)*v3, sub_23DD94E28, (uint64_t (*)(_QWORD))MEMORY[0x24BE3FE20]);
  *v3 = result;
  return result;
}

uint64_t sub_23DD92AD0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DD936F4(a1, a2, a3, (_QWORD *)*v3, sub_23DD94D90, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  *v3 = result;
  return result;
}

uint64_t sub_23DD92AFC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DD936F4(a1, a2, a3, (_QWORD *)*v3, sub_23DD94CE8, (uint64_t (*)(_QWORD))MEMORY[0x24BE40238]);
  *v3 = result;
  return result;
}

uint64_t sub_23DD92B28(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DD92DDC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DD92B44(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DD92F4C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23DD92B60(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DD936F4(a1, a2, a3, (_QWORD *)*v3, sub_23DD94E60, (uint64_t (*)(_QWORD))MEMORY[0x24BE3FC10]);
  *v3 = result;
  return result;
}

uint64_t sub_23DD92B8C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DD930E4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DD92BA8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DD936F4(a1, a2, a3, (_QWORD *)*v3, sub_23DD94E44, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
  *v3 = result;
  return result;
}

uint64_t sub_23DD92BD4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DD93258(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23DD92BF0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DD933F0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DD92C0C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DD93558(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DD92C28(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DD936F4(a1, a2, a3, (_QWORD *)*v3, sub_23DD94CCC, type metadata accessor for SleepingSampleViewModel);
  *v3 = result;
  return result;
}

uint64_t sub_23DD92C54(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DD57534(0, &qword_2543267C0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD92DC8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23DD936F4(a1, a2, a3, a4, sub_23DD94E28, (uint64_t (*)(_QWORD))MEMORY[0x24BE3FE20]);
}

uint64_t sub_23DD92DDC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DCFB328(0, &qword_256CFE350, (uint64_t (*)(uint64_t))sub_23DCFF9E8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD92F4C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_23DCFB328(0, &qword_256CFF210, (uint64_t (*)(uint64_t))sub_23DD8E740, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_23DD8E740();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD930E4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DD57534(0, (unint64_t *)&qword_256CFE338);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD93258(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_23DCFB328(0, &qword_256CFF200, (uint64_t (*)(uint64_t))sub_23DD94EB4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_23DD94EB4();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD933F0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DD57534(0, &qword_2543267D0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD93558(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DD57534(0, &qword_256CFE360);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD936CC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23DD936F4(a1, a2, a3, a4, sub_23DD94E98, (uint64_t (*)(_QWORD))sub_23DD602C0);
}

uint64_t sub_23DD936E0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23DD936F4(a1, a2, a3, a4, sub_23DD94CCC, type metadata accessor for SleepingSampleViewModel);
}

uint64_t sub_23DD936F4(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  a5(0);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD938D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, char *, uint64_t);
  int v18;
  int v19;
  uint64_t result;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v4 = sub_23DDC6530();
  v5 = *(_QWORD **)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v22 - v9;
  sub_23DD94DAC();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v13[*(int *)(v14 + 48)];
  sub_23DCF58EC(a1, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DD94D04);
  sub_23DCF58EC(a2, v15, (uint64_t (*)(_QWORD))sub_23DD94D04);
  v16 = (uint64_t (*)(char *, uint64_t, uint64_t))v5[6];
  v17 = (void (*)(char *, char *, uint64_t))v16(v13, 1, v4);
  v18 = v16((char *)v15, 1, v4);
  v19 = v18;
  if ((_DWORD)v17 == 1)
  {
    if (v18 == 1)
      return 0;
  }
  else
  {
    v17 = (void (*)(char *, char *, uint64_t))v5[4];
    v17(v10, v13, v4);
    if (v19 != 1)
    {
LABEL_11:
      v17(v7, (char *)v15, v4);
      sub_23DCF535C(&qword_254326730, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
      sub_23DDC69B0();
      v21 = (void (*)(char *, uint64_t))v5[1];
      v21(v7, v4);
      v21(v10, v4);
      return v23;
    }
    sub_23DD020E0();
    sub_23DCF535C(&qword_254326730, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
    sub_23DDC69B0();
    ((void (*)(char *, uint64_t))v5[1])(v10, v4);
    result = v23 + 1;
    if (!__OFADD__(v23, 1))
      return result;
    __break(1u);
  }
  ((void (*)(char *, uint64_t, uint64_t))v5[4])(v10, v15, v4);
  sub_23DD020E0();
  sub_23DCF535C(&qword_254326730, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
  sub_23DDC69B0();
  ((void (*)(char *, uint64_t))v5[1])(v10, v4);
  result = v23 - 1;
  if (__OFSUB__(v23, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

uint64_t _s15HealthBalanceUI23SleepingSampleViewModelV7SummaryV2eeoiySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  BOOL v25;

  if (*a1 != *a2)
    return 0;
  v4 = (int *)type metadata accessor for SleepingSampleViewModel.Summary(0);
  if ((sub_23DDC4F64() & 1) == 0)
    return 0;
  v5 = v4[6];
  v6 = &a1[v5];
  v7 = *(_QWORD *)&a1[v5 + 8];
  v8 = &a2[v5];
  v9 = *((_QWORD *)v8 + 1);
  if (!v7)
  {
    if (v9)
      return 0;
    goto LABEL_12;
  }
  if (!v9)
    return 0;
  v10 = *(_QWORD *)v6 == *(_QWORD *)v8 && v7 == v9;
  if (v10 || (v11 = sub_23DDC6C08(), result = 0, (v11 & 1) != 0))
  {
LABEL_12:
    v13 = v4[7];
    v14 = &a1[v13];
    v15 = *(_QWORD *)&a1[v13 + 8];
    v16 = &a2[v13];
    v17 = *((_QWORD *)v16 + 1);
    if (v15)
    {
      if (!v17)
        return 0;
      if (*(_QWORD *)v14 != *(_QWORD *)v16 || v15 != v17)
      {
        v19 = sub_23DDC6C08();
        result = 0;
        if ((v19 & 1) == 0)
          return result;
      }
    }
    else if (v17)
    {
      return 0;
    }
    v20 = v4[8];
    v21 = &a1[v20];
    v22 = *(_QWORD *)&a1[v20 + 8];
    v23 = &a2[v20];
    v24 = *((_QWORD *)v23 + 1);
    if (v22)
    {
      if (v24)
      {
        v25 = *(_QWORD *)v21 == *(_QWORD *)v23 && v22 == v24;
        if (v25 || (sub_23DDC6C08() & 1) != 0)
          return 1;
      }
    }
    else if (!v24)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s15HealthBalanceUI23SleepingSampleViewModelV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  char v5;
  uint64_t v7;
  uint64_t v8;

  sub_23DDC53A8();
  sub_23DCF535C(&qword_254326690, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE48]);
  sub_23DDC67C4();
  sub_23DDC67C4();
  if (v8 == v7
    && (v4 = (int *)type metadata accessor for SleepingSampleViewModel(0),
        (MEMORY[0x242641D54](a1 + v4[5], a2 + v4[5]) & 1) != 0)
    && (sub_23DD41270(*(_QWORD *)(a1 + v4[6]), *(_QWORD *)(a2 + v4[6])) & 1) != 0
    && (sub_23DD0C898(0, &qword_254326418), (sub_23DDC6974() & 1) != 0))
  {
    v5 = MEMORY[0x24264200C](a1 + v4[8], a2 + v4[8]);
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

void sub_23DD93DC4(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFF090, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FDB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_23DD93DE0(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFF098, (uint64_t (*)(uint64_t))MEMORY[0x24BE40238], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t type metadata accessor for SleepingSampleViewModel.Summary(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFF1A8);
}

void sub_23DD93E10(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFF0A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_23DD93E2C@<X0>(uint64_t a1@<X8>)
{
  return sub_23DD9246C(a1);
}

unint64_t sub_23DD93E58()
{
  unint64_t result;

  result = qword_256CFF0A8;
  if (!qword_256CFF0A8)
  {
    result = MEMORY[0x242643BD8](&protocol conformance descriptor for SleepingSampleViewModel.Summary.Variant, &type metadata for SleepingSampleViewModel.Summary.Variant);
    atomic_store(result, (unint64_t *)&qword_256CFF0A8);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleViewModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  id v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC53A8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23DDC5330();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v13 = *(void **)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
    v14 = a3[8];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = sub_23DDC55F4();
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    v19 = v13;
    v18(v15, v16, v17);
  }
  return a1;
}

uint64_t destroy for SleepingSampleViewModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();

  v7 = a1 + a2[8];
  v8 = sub_23DDC55F4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for SleepingSampleViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  id v18;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v12 = *(void **)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v13 = a3[8];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_23DDC55F4();
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  swift_bridgeObjectRetain();
  v18 = v12;
  v17(v14, v15, v16);
  return a1;
}

uint64_t assignWithCopy for SleepingSampleViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = a3[7];
  v12 = *(void **)(a2 + v11);
  v13 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v14 = v12;

  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_23DDC55F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for SleepingSampleViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23DDC55F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  return a1;
}

uint64_t assignWithTake for SleepingSampleViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  v11 = a3[7];
  v12 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);

  v13 = a3[8];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_23DDC55F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD943AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_23DDC53A8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_23DDC5330();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_23DDC55F4();
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[8];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD94484(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_23DDC53A8();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_23DDC5330();
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
        return result;
      }
      v10 = sub_23DDC55F4();
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[8];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_23DD9454C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_23DDC53A8();
  if (v1 <= 0x3F)
  {
    result = sub_23DDC5330();
    if (v2 <= 0x3F)
    {
      result = sub_23DDC55F4();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleViewModel.Summary(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_23DDC4F70();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = a3[7];
    v13 = (uint64_t *)((char *)v4 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (uint64_t *)((char *)v4 + v12);
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = a3[8];
    v20 = (uint64_t *)((char *)v4 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for SleepingSampleViewModel.Summary(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_23DDC4F70();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for SleepingSampleViewModel.Summary(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23DDC4F70();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = &a1[v11];
  v16 = &a2[v11];
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for SleepingSampleViewModel.Summary(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23DDC4F70();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[8];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *initializeWithTake for SleepingSampleViewModel.Summary(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23DDC4F70();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  return a1;
}

_BYTE *assignWithTake for SleepingSampleViewModel.Summary(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23DDC4F70();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = (uint64_t *)&a2[v10];
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = &a1[v20];
  v22 = (uint64_t *)&a2[v20];
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleViewModel.Summary()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD94A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_23DDC4F70();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleViewModel.Summary()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD94B00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23DDC4F70();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t sub_23DD94B80()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC4F70();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SleepingSampleViewModel.Summary.Variant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DD94C4C + 4 * byte_23DDCADA5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DD94C80 + 4 * byte_23DDCADA0[v4]))();
}

uint64_t sub_23DD94C80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD94C88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DD94C90);
  return result;
}

uint64_t sub_23DD94C9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DD94CA4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DD94CA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD94CB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleViewModel.Summary.Variant()
{
  return &type metadata for SleepingSampleViewModel.Summary.Variant;
}

void sub_23DD94CCC(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFF1F0, type metadata accessor for SleepingSampleViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_23DD94CE8(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFE348, (uint64_t (*)(uint64_t))MEMORY[0x24BE40238], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_23DD94D04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254326740)
  {
    sub_23DDC6530();
    sub_23DCF535C(&qword_254326730, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
    sub_23DD61820();
    v0 = sub_23DDC66BC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254326740);
  }
}

void sub_23DD94D90(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_254326798, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_23DD94DAC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_254326748)
  {
    sub_23DD94D04();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_254326748);
  }
}

void sub_23DD94E0C(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFF1F8, (uint64_t (*)(uint64_t))type metadata accessor for BaselineRelativeChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_23DD94E28(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_2543267B0, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_23DD94E44(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFCC58, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_23DD94E60(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_2543267A0, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FC10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_23DD94E7C(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_23DD94E98(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_2543267A8, (uint64_t (*)(uint64_t))sub_23DD602C0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_23DD94EB4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFF208)
  {
    sub_23DD0C898(255, (unint64_t *)&qword_256CFEA70);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFF208);
  }
}

id sub_23DD94F24()
{
  id result;

  result = sub_23DD94F40();
  qword_256CFF218 = (uint64_t)result;
  return result;
}

id sub_23DD94F40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char v10;
  _QWORD v12[4];

  v0 = sub_23DDC5174();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1510]), sel_init);
  objc_msgSend(v4, sel_setBoundaryStyle_, 2);
  v5 = (void *)objc_opt_self();
  v6 = (void *)sub_23DDC6740();
  sub_23DDC5168();
  v7 = (void *)sub_23DDC5150();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v8 = objc_msgSend(v5, sel_dateFormatFromTemplate_options_locale_, v6, 0, v7);

  if (v8)
  {
    v12[2] = sub_23DDC6764();
    v12[3] = v9;
    v12[0] = 97;
    v12[1] = 0xE100000000000000;
    sub_23DD0B190();
    v10 = sub_23DDC69BC();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {

      v8 = (id)sub_23DDC6740();
    }
  }
  objc_msgSend(v4, sel_setDateTemplate_, v8);

  return v4;
}

id sub_23DD950E4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  double v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  int v25;
  uint64_t v26;
  id v27;
  uint64_t v28;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return (id)v2;
  v3 = a1;
  v28 = MEMORY[0x24BEE4AF8];
  sub_23DD92BD4(0, v1, 0);
  v2 = v28;
  result = (id)sub_23DD95820(v3);
  v6 = (uint64_t)result;
  v7 = 0;
  v8 = v3 + 64;
  v23 = v3 + 80;
  v24 = v1;
  v25 = v5;
  v26 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v12 = *(double *)(*(_QWORD *)(v3 + 56) + 8 * v6);
    v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithUnsignedInteger_, *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6));
    result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v12);
    v13 = result;
    v14 = v3;
    v16 = *(_QWORD *)(v28 + 16);
    v15 = *(_QWORD *)(v28 + 24);
    if (v16 >= v15 >> 1)
      result = (id)sub_23DD92BD4(v15 > 1, v16 + 1, 1);
    *(_QWORD *)(v28 + 16) = v16 + 1;
    v17 = v28 + 16 * v16;
    *(_QWORD *)(v17 + 32) = v27;
    *(_QWORD *)(v17 + 40) = v13;
    v9 = 1 << *(_BYTE *)(v14 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v26;
    v18 = *(_QWORD *)(v26 + 8 * v11);
    if ((v18 & (1 << v6)) == 0)
      goto LABEL_26;
    v3 = v14;
    v5 = v25;
    if (*(_DWORD *)(v14 + 36) != v25)
      goto LABEL_27;
    v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      v9 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v24;
    }
    else
    {
      v20 = v11 + 1;
      v21 = (unint64_t)(v9 + 63) >> 6;
      v10 = v24;
      if (v11 + 1 < v21)
      {
        v22 = *(_QWORD *)(v26 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v9 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v11)
          {
            v22 = *(_QWORD *)(v23 + 8 * v11++);
            if (v22)
            {
              v20 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v9;
    if (v7 == v10)
      return (id)v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

double CLKDevice.scaledValue(_:overrides:)(uint64_t a1, double a2)
{
  uint64_t v2;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  double v9;
  double v10;
  uint64_t v12;

  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB8738]), sel_initWithDevice_identitySizeClass_, v2, 2);
  if (*((_QWORD *)sub_23DD950E4(a1) + 2))
  {
    sub_23DD79EF0();
    v6 = sub_23DDC6AF4();
  }
  else
  {
    v6 = MEMORY[0x24BEE4B00];
  }
  v12 = v6;
  v7 = (_QWORD *)swift_bridgeObjectRetain();
  sub_23DD954A8(v7, 1, &v12);
  swift_bridgeObjectRelease();
  sub_23DD9546C();
  sub_23DD79F64();
  v8 = (void *)sub_23DDC6644();
  swift_release();
  objc_msgSend(v5, sel_scaledValue_withOverrides_, v8, a2);
  v10 = v9;

  return v10;
}

unint64_t sub_23DD9546C()
{
  unint64_t result;

  result = qword_256CFEA70;
  if (!qword_256CFEA70)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256CFEA70);
  }
  return result;
}

void sub_23DD954A8(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  void *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void *v29;
  _QWORD *v30;
  id v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = (void *)a1[4];
  v8 = (void *)a1[5];
  swift_bridgeObjectRetain();
  v43 = v7;
  v9 = (_QWORD *)*a3;
  v10 = v7;
  v11 = v8;
  v13 = sub_23DD76A88((uint64_t)v10);
  v14 = v9[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
    goto LABEL_23;
  v17 = v12;
  if (v9[3] >= v16)
  {
    if ((a2 & 1) != 0)
    {
      if ((v12 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_23DD788EC();
      if ((v17 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    v23 = 8 * v13;
    *(_QWORD *)(v22[6] + v23) = v10;
    *(_QWORD *)(v22[7] + v23) = v11;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v28 = (void **)(a1 + 7);
    while (1)
    {
      v29 = *v28;
      v43 = *(v28 - 1);
      v30 = (_QWORD *)*a3;
      v31 = v43;
      v11 = v29;
      v32 = sub_23DD76A88((uint64_t)v31);
      v34 = v30[2];
      v35 = (v33 & 1) == 0;
      v25 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v25)
        break;
      v37 = v33;
      if (v30[3] < v36)
      {
        sub_23DD7733C(v36, 1);
        v32 = sub_23DD76A88((uint64_t)v31);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = 8 * v32;
      *(_QWORD *)(v39[6] + v40) = v31;
      *(_QWORD *)(v39[7] + v40) = v11;
      v41 = v39[2];
      v25 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v25)
        goto LABEL_24;
      v39[2] = v42;
      v28 += 2;
      if (!--v27)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_23DD7733C(v16, a2 & 1);
  v18 = sub_23DD76A88((uint64_t)v10);
  if ((v17 & 1) == (v19 & 1))
  {
    v13 = v18;
    if ((v17 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = (void *)swift_allocError();
    swift_willThrow();
    v21 = v20;
    sub_23DD02790();
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_23DD9546C();
  sub_23DDC6C20();
  __break(1u);
LABEL_26:
  sub_23DDC6A10();
  sub_23DDC67A0();
  sub_23DD9546C();
  sub_23DDC6AA0();
  sub_23DDC67A0();
  sub_23DDC6AC4();
  __break(1u);
}

uint64_t sub_23DD95820(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_23DD958A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v7;

  swift_getKeyPath();
  v7 = v1;
  sub_23DD95B24();
  sub_23DDC5210();
  swift_release();
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v7 + 80);
  *(_QWORD *)a1 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(_OWORD *)(v7 + 48);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v7 + 64);
  *(_QWORD *)(a1 + 64) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DD95940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for GlobalOvernightMetricsChartAnimationState();
  v0 = swift_allocObject();
  v1 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v0 + 24) = v1;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_QWORD *)(v0 + 80) = 0;
  result = sub_23DDC5234();
  qword_256D06578 = v0;
  return result;
}

uint64_t sub_23DD959A4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 64);
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 32) = v3;
  sub_23DD8AB3C(a2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DD95A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI41GlobalOvernightMetricsChartAnimationState___observationRegistrar;
  v2 = sub_23DDC5240();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_23DD95A60()
{
  return type metadata accessor for GlobalOvernightMetricsChartAnimationState();
}

uint64_t type metadata accessor for GlobalOvernightMetricsChartAnimationState()
{
  uint64_t result;

  result = qword_256CFF250;
  if (!qword_256CFF250)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD95AA4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC5240();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_23DD95B24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFC1C0;
  if (!qword_256CFC1C0)
  {
    v1 = type metadata accessor for GlobalOvernightMetricsChartAnimationState();
    result = MEMORY[0x242643BD8](&unk_23DDCAF88, v1);
    atomic_store(result, (unint64_t *)&qword_256CFC1C0);
  }
  return result;
}

uint64_t sub_23DD95B6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_23DD56480(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD95CB0(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_23DD567C8(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for MultilayerCircularGaugeLayer();
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD95E24(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_23DD569F0(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD95F78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_23DD56B08(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD960BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_23DD566B0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t View.balanceAXIDComponents(_:)()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  sub_23DD95E24(v0);
  sub_23DD60410();
  sub_23DCF535C((unint64_t *)&qword_256CFC828, (uint64_t (*)(uint64_t))sub_23DD60410, MEMORY[0x24BEE12B0]);
  sub_23DDC668C();
  swift_bridgeObjectRelease();
  sub_23DDC6188();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DD962DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  _QWORD v5[2];

  v1 = *(_QWORD *)(a1 + 8);
  sub_23DDC5F0C();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v3 = sub_23DDC5C0C();
  v5[0] = v1;
  v5[1] = sub_23DCF535C(&qword_256CFC788, v2, MEMORY[0x24BDF1078]);
  return MEMORY[0x242643BD8](MEMORY[0x24BDED308], v3, v5);
}

uint64_t *sub_23DD9635C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC5A98();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23DDC5C00();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_23DDC656C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_23DD96438(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_23DDC5A98();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_23DDC5C00();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_23DDC656C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t sub_23DD964C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23DDC5A98();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC5C00();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_23DDC656C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t sub_23DD96570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23DDC5A98();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC5C00();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_23DDC656C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_23DD96620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23DDC5A98();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC5C00();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_23DDC656C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t sub_23DD966D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23DDC5A98();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC5C00();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_23DDC656C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_23DD96780()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD9678C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_23DDC5A98();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_23DDC5C00();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_23DDC656C();
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_23DD96824()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD96830(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_23DDC5A98();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_23DDC5C00();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_23DDC656C();
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for BalanceWidgetSystemSmallSpecs()
{
  uint64_t result;

  result = qword_256CFF338;
  if (!qword_256CFF338)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD9690C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_23DDC5A98();
  if (v1 <= 0x3F)
  {
    result = sub_23DDC5C00();
    if (v2 <= 0x3F)
    {
      result = sub_23DDC656C();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_23DD969AC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v10 - v1;
  v3 = type metadata accessor for OvernightMetricsWarmupProgress();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD728B4((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23DD290A0((uint64_t)v2, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  else
  {
    sub_23DD325F8((uint64_t)v2, (uint64_t)v6);
    v7 = sub_23DDC52B8();
    result = sub_23DDC52D0();
    v9 = v7 - result;
    if (__OFSUB__(v7, result))
    {
      __break(1u);
      return result;
    }
    sub_23DD3263C((uint64_t)v6);
    if (v9 >= 1)
      return 0;
  }
  type metadata accessor for BalanceWidgetSystemSmallSpecs();
  if ((sub_23DDC5BF4() & 1) != 0)
    return 0x4050E00000000000;
  else
    return 0x4052C00000000000;
}

uint64_t *sub_23DD96B0C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t);
  void *v16;
  char v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char v24;
  char **v25;
  BOOL v26;
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  char v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _BYTE v66[280];
  uint64_t v67[36];

  v3 = v2;
  v54 = a1;
  v64 = a2;
  v63 = sub_23DDC656C();
  v60 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v61 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v62 = (char *)&v47 - v6;
  sub_23DCF6898(0, (unint64_t *)&qword_256CFC4A0, (void (*)(uint64_t))MEMORY[0x24BDF1678]);
  MEMORY[0x24BDAC7A8](v7);
  v59 = (char *)&v47 - v8;
  v9 = sub_23DDC5A98();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_256CFC098 != -1)
    swift_once();
  MEMORY[0x242642C18]((id)qword_256CFE658);
  v13 = *MEMORY[0x24BDEB3F0];
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v14(v12, v13, v9);
  sub_23DDC5A8C();
  v15 = *(void (**)(char *, uint64_t))(v10 + 8);
  v15(v12, v9);
  v58 = sub_23DDC623C();
  swift_release();
  if (qword_256CFC0A8 != -1)
    swift_once();
  MEMORY[0x242642C18]((id)qword_256CFE668);
  v14(v12, v13, v9);
  sub_23DDC5A8C();
  v15(v12, v9);
  v57 = sub_23DDC623C();
  swift_release();
  v16 = (void *)objc_opt_self();
  v56 = MEMORY[0x242642C18](objc_msgSend(v16, sel_systemGray5Color));
  v14(v12, v13, v9);
  v65 = v3;
  v17 = sub_23DDC5A8C();
  v15(v12, v9);
  if ((v17 & 1) != 0)
  {
    v18 = v16;
    v19 = sub_23DDC6218();
  }
  else
  {
    v18 = v16;
    v19 = sub_23DDC6230();
  }
  v67[0] = v19;
  v55 = sub_23DDC5B40();
  v20 = *(unsigned __int8 *)(v54 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 24));
  v54 = MEMORY[0x242642C18]((id)qword_256CFE658);
  v53 = MEMORY[0x242642C18]((id)qword_256CFE668);
  v21 = 0x3FE0000000000000;
  if (v20)
    v21 = 0x3FC999999999999ALL;
  v51 = v21;
  if (v20)
    v22 = 0.45;
  else
    v22 = 0.5;
  v23 = 0x4028000000000000;
  if (v20)
    v23 = 0x4026000000000000;
  v52 = v23;
  v67[0] = MEMORY[0x242642C18](objc_msgSend(v18, sel_systemGray2Color));
  v50 = sub_23DDC5B40();
  v14(v12, v13, v9);
  v24 = sub_23DDC5A8C();
  v15(v12, v9);
  v25 = &selRef_systemGrayColor;
  v26 = (v24 & 1) == 0;
  v27 = v18;
  if (v26)
    v25 = &selRef_systemGray4Color;
  v67[0] = MEMORY[0x242642C18](objc_msgSend(v18, *v25));
  v49 = sub_23DDC5B40();
  v67[0] = sub_23DDC6224();
  v48 = sub_23DDC5B40();
  v14(v12, v13, v9);
  v28 = sub_23DDC5A8C();
  v15(v12, v9);
  if ((v28 & 1) != 0)
    v29 = sub_23DDC6260();
  else
    v29 = MEMORY[0x242642C18](objc_msgSend(v27, sel_systemGray3Color));
  v67[0] = v29;
  v30 = sub_23DDC5B40();
  v14(v12, v13, v9);
  v31 = sub_23DDC5A8C();
  v15(v12, v9);
  if ((v31 & 1) != 0)
    v32 = sub_23DDC6230();
  else
    v32 = MEMORY[0x242642C18](objc_msgSend(v27, sel_systemGrayColor));
  v33 = v61;
  v67[0] = v32;
  v34 = sub_23DDC5B40();
  v35 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  v36 = v65;
  sub_23DDC5BF4();
  v37 = sub_23DDC5FA8();
  v38 = (void (*)(uint64_t))MEMORY[0x24BDF1678];
  v39 = (uint64_t)v59;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v59, 1, 1, v37);
  sub_23DDC5FCC();
  sub_23DD290A0(v39, (unint64_t *)&qword_256CFC4A0, v38);
  sub_23DDC5FB4();
  v40 = sub_23DDC5FF0();
  swift_release();
  v67[0] = v58;
  v67[1] = v57;
  v67[2] = v56;
  LOBYTE(v67[3]) = 0;
  LOBYTE(v67[4]) = 1;
  v67[5] = v55;
  v67[6] = v51;
  LOBYTE(v67[7]) = 0;
  v67[8] = 0x4024000000000000;
  v67[9] = v54;
  v67[10] = v53;
  v67[11] = 0x3FE0000000000000;
  v67[12] = v52;
  LOBYTE(v67[13]) = 0;
  *(double *)&v67[14] = v22;
  *(_OWORD *)&v67[15] = xmmword_23DDCAFE0;
  *(_OWORD *)&v67[17] = xmmword_23DDCAFF0;
  *(_OWORD *)&v67[19] = xmmword_23DDCB000;
  v67[21] = 0x3FB5C28F5C28F5C3;
  memset(&v67[22], 0, 24);
  LOWORD(v67[25]) = 1;
  v67[26] = v50;
  v67[27] = v49;
  v67[28] = v48;
  v67[29] = v30;
  v67[30] = v34;
  LOBYTE(v67[31]) = 1;
  v67[32] = 0;
  v67[33] = v40;
  v67[34] = 0;
  v41 = v60;
  v43 = v62;
  v42 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v62, v36 + *(int *)(v35 + 24), v63);
  sub_23DDC6560();
  sub_23DCFE8C0();
  LOBYTE(v40) = sub_23DDC66C8();
  v44 = *(void (**)(char *, uint64_t))(v41 + 8);
  v44(v33, v42);
  if ((v40 & 1) != 0)
  {
    v44(v43, v42);
    memcpy(v66, v67, sizeof(v66));
    static OvernightMetricsChartSpec.accented(_:)((uint64_t)v66, (uint64_t)v64);
    return sub_23DCFE908(v67);
  }
  sub_23DDC6554();
  v45 = sub_23DDC66C8();
  v44(v33, v42);
  v44(v43, v42);
  if ((v45 & 1) != 0)
  {
    memcpy(v66, v67, sizeof(v66));
    static OvernightMetricsChartSpec.vibrant(_:)((uint64_t)v66, (uint64_t)v64);
    return sub_23DCFE908(v67);
  }
  return (uint64_t *)memcpy(v64, v67, 0x118uLL);
}

uint64_t sub_23DD972CC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v10 - v1;
  v3 = type metadata accessor for OvernightMetricsWarmupProgress();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BalanceWidgetSystemSmallSpecs();
  result = sub_23DDC5BF4();
  if ((result & 1) == 0)
  {
    sub_23DD728B4((uint64_t)v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
    {
      sub_23DD290A0((uint64_t)v2, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
      return sub_23DD6F1CC();
    }
    sub_23DD325F8((uint64_t)v2, (uint64_t)v6);
    v8 = sub_23DDC52B8();
    result = sub_23DDC52D0();
    v9 = v8 - result;
    if (__OFSUB__(v8, result))
    {
      __break(1u);
    }
    else
    {
      result = sub_23DD3263C((uint64_t)v6);
      if (v9 < 1)
        return sub_23DD6F1CC();
    }
  }
  return result;
}

uint64_t sub_23DD97430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v0 = sub_23DDC5FFC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, (unint64_t *)&qword_256CFC4A0, (void (*)(uint64_t))MEMORY[0x24BDF1678]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v18 - v5;
  v7 = sub_23DDC6038();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD6F1CC();
  if ((v11 & 1) != 0)
    v12 = (unsigned int *)MEMORY[0x24BDF18E8];
  else
    v12 = (unsigned int *)MEMORY[0x24BDF18A8];
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *v12, v7);
  v13 = *MEMORY[0x24BDF1668];
  v14 = sub_23DDC5FA8();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v6, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v6, 0, 1, v14);
  sub_23DDC5FE4();
  sub_23DD290A0((uint64_t)v6, (unint64_t *)&qword_256CFC4A0, (void (*)(uint64_t))MEMORY[0x24BDF1678]);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDF17C8], v0);
  sub_23DDC6020();
  swift_release();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_23DDC5FC0();
  v16 = sub_23DDC5FF0();
  swift_release();
  return v16;
}

uint64_t sub_23DD97638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;

  v1 = sub_23DDC656C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v15 - v6;
  v8 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v7, v0 + *(int *)(v8 + 24), v1);
  sub_23DDC6554();
  sub_23DCFE8C0();
  v9 = sub_23DDC66C8();
  v10 = *(void (**)(char *, uint64_t))(v2 + 8);
  v10(v4, v1);
  v10(v7, v1);
  if ((v9 & 1) != 0)
    return sub_23DDC6230();
  v12 = sub_23DD6F1CC();
  if ((v13 & 1) != 0)
    return sub_23DDC6248();
  if (v12 == 1)
  {
    if (qword_256CFC0A0 != -1)
      swift_once();
    v14 = (void *)qword_256CFE660;
  }
  else if (v12)
  {
    if (qword_256CFC0A8 != -1)
      swift_once();
    v14 = (void *)qword_256CFE668;
  }
  else
  {
    if (qword_256CFC098 != -1)
      swift_once();
    v14 = (void *)qword_256CFE658;
  }
  return MEMORY[0x242642C18](v14);
}

uint64_t sub_23DD977EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v0 = sub_23DDC5FFC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, (unint64_t *)&qword_256CFC4A0, (void (*)(uint64_t))MEMORY[0x24BDF1678]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v17 - v5;
  v7 = sub_23DDC6038();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, double))(v8 + 104))(v11, *MEMORY[0x24BDF18E8], v7, v9);
  v12 = *MEMORY[0x24BDF1668];
  v13 = sub_23DDC5FA8();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 104))(v6, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v6, 0, 1, v13);
  sub_23DDC5FE4();
  sub_23DD290A0((uint64_t)v6, (unint64_t *)&qword_256CFC4A0, (void (*)(uint64_t))MEMORY[0x24BDF1678]);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDF17C8], v0);
  sub_23DDC6020();
  swift_release();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_23DDC5FC0();
  v15 = sub_23DDC5FF0();
  swift_release();
  return v15;
}

uint64_t sub_23DD979DC()
{
  sub_23DDC5C9C();
  type metadata accessor for BalanceWidgetSystemSmallSpecs();
  sub_23DDC5CA8();
  return sub_23DDC5D38();
}

uint64_t OvernightMetricsWarmupProgress.overallProgress.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DDC52DC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t OvernightMetricsWarmupProgress.overallProgress.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DDC52DC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*OvernightMetricsWarmupProgress.overallProgress.modify())()
{
  return nullsub_1;
}

uint64_t OvernightMetricsWarmupProgress.progressByDataType.getter()
{
  type metadata accessor for OvernightMetricsWarmupProgress();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for OvernightMetricsWarmupProgress()
{
  uint64_t result;

  result = qword_2543266E8;
  if (!qword_2543266E8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t OvernightMetricsWarmupProgress.progressByDataType.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for OvernightMetricsWarmupProgress() + 20);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*OvernightMetricsWarmupProgress.progressByDataType.modify())(_QWORD)
{
  type metadata accessor for OvernightMetricsWarmupProgress();
  return nullsub_1;
}

void static OvernightMetricsWarmupProgress.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((sub_23DDC52C4() & 1) != 0)
  {
    v4 = *(int *)(type metadata accessor for OvernightMetricsWarmupProgress() + 20);
    sub_23DD6CD08(*(_QWORD *)(a1 + v4), *(_QWORD *)(a2 + v4));
  }
}

uint64_t sub_23DD97BB4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x506C6C617265766FLL;
}

uint64_t sub_23DD97C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DD98928(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DD97C24()
{
  sub_23DD97DEC();
  return sub_23DDC6CEC();
}

uint64_t sub_23DD97C4C()
{
  sub_23DD97DEC();
  return sub_23DDC6CF8();
}

uint64_t OvernightMetricsWarmupProgress.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;
  char v13;

  v3 = v1;
  sub_23DD981F4(0, &qword_256CFF378, MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v11[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DD97DEC();
  sub_23DDC6C98();
  v13 = 0;
  sub_23DDC52DC();
  sub_23DCF535C(&qword_256CFF388, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FC10], MEMORY[0x24BE3FC20]);
  sub_23DDC6BCC();
  if (!v2)
  {
    v12 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for OvernightMetricsWarmupProgress() + 20));
    v11[15] = 1;
    sub_23DD97E30();
    sub_23DD97EC4();
    sub_23DDC6BCC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_23DD97DEC()
{
  unint64_t result;

  result = qword_256CFF380;
  if (!qword_256CFF380)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCB1B4, &type metadata for OvernightMetricsWarmupProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFF380);
  }
  return result;
}

void sub_23DD97E30()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_256CFF390)
  {
    sub_23DDC53A8();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20];
    sub_23DDC52DC();
    sub_23DCF535C(&qword_254326680, v0, MEMORY[0x24BE3FE38]);
    v1 = sub_23DDC665C();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_256CFF390);
  }
}

unint64_t sub_23DD97EC4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFF398;
  if (!qword_256CFF398)
  {
    sub_23DD97E30();
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFDCF8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE30]);
    v3[1] = sub_23DCF535C(&qword_256CFF388, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FC10], MEMORY[0x24BE3FC20]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE04C0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFF398);
  }
  return result;
}

uint64_t OvernightMetricsWarmupProgress.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;

  v20 = a2;
  v24 = sub_23DDC52DC();
  v21 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v22 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD981F4(0, &qword_256CFF3A0, MEMORY[0x24BEE33E0]);
  v23 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - v7;
  v9 = type metadata accessor for OvernightMetricsWarmupProgress();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DD97DEC();
  sub_23DDC6C8C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v18 = a1;
  v19 = v6;
  v12 = (uint64_t)v11;
  v13 = v21;
  v27 = 0;
  sub_23DCF535C(&qword_256CFF3A8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FC10], MEMORY[0x24BE3FC30]);
  v15 = v22;
  v14 = v23;
  v16 = v24;
  sub_23DDC6B78();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v12, v15, v16);
  sub_23DD97E30();
  v26 = 1;
  sub_23DD98250();
  sub_23DDC6B78();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v14);
  *(_QWORD *)(v12 + *(int *)(v9 + 20)) = v25;
  sub_23DD982E8(v12, v20);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  return sub_23DD3263C(v12);
}

void sub_23DD981F4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DD97DEC();
    v7 = a3(a1, &type metadata for OvernightMetricsWarmupProgress.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_23DD98250()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFF3B0;
  if (!qword_256CFF3B0)
  {
    sub_23DD97E30();
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFDD58, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE50]);
    v3[1] = sub_23DCF535C(&qword_256CFF3A8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FC10], MEMORY[0x24BE3FC30]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE04E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFF3B0);
  }
  return result;
}

uint64_t sub_23DD982E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OvernightMetricsWarmupProgress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_23DD9832C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_23DDC52C4() & 1) != 0)
    sub_23DD6CD08(*(_QWORD *)(a1 + *(int *)(a3 + 20)), *(_QWORD *)(a2 + *(int *)(a3 + 20)));
}

uint64_t sub_23DD98380@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return OvernightMetricsWarmupProgress.init(from:)(a1, a2);
}

uint64_t sub_23DD98394(_QWORD *a1)
{
  return OvernightMetricsWarmupProgress.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for OvernightMetricsWarmupProgress(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC52DC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for OvernightMetricsWarmupProgress(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsWarmupProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsWarmupProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for OvernightMetricsWarmupProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for OvernightMetricsWarmupProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsWarmupProgress()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD98610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_23DDC52DC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsWarmupProgress()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD98698(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23DDC52DC();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_23DD98710()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC52DC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsWarmupProgress.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DD987D0 + 4 * byte_23DDCB035[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DD98804 + 4 * asc_23DDCB030[v4]))();
}

uint64_t sub_23DD98804(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD9880C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DD98814);
  return result;
}

uint64_t sub_23DD98820(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DD98828);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DD9882C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD98834(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsWarmupProgress.CodingKeys()
{
  return &type metadata for OvernightMetricsWarmupProgress.CodingKeys;
}

unint64_t sub_23DD98854()
{
  unint64_t result;

  result = qword_256CFF3B8;
  if (!qword_256CFF3B8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCB18C, &type metadata for OvernightMetricsWarmupProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFF3B8);
  }
  return result;
}

unint64_t sub_23DD9889C()
{
  unint64_t result;

  result = qword_256CFF3C0;
  if (!qword_256CFF3C0)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCB0FC, &type metadata for OvernightMetricsWarmupProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFF3C0);
  }
  return result;
}

unint64_t sub_23DD988E4()
{
  unint64_t result;

  result = qword_256CFF3C8;
  if (!qword_256CFF3C8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCB124, &type metadata for OvernightMetricsWarmupProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFF3C8);
  }
  return result;
}

uint64_t sub_23DD98928(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x506C6C617265766FLL && a2 == 0xEF73736572676F72;
  if (v2 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023DDCE020)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DDC6C08();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for OvernightMetricsChartAnimationValues(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for OvernightMetricsChartAnimationValues()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for OvernightMetricsChartAnimationValues(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for OvernightMetricsChartAnimationValues(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartAnimationValues(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartAnimationValues(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartAnimationValues()
{
  return &type metadata for OvernightMetricsChartAnimationValues;
}

uint64_t destroy for OvernightMetricsChartAnimationValues.IndividualMetricsState()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsChartAnimationValues.IndividualMetricsState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for OvernightMetricsChartAnimationValues.IndividualMetricsState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  return a1;
}

uint64_t assignWithTake for OvernightMetricsChartAnimationValues.IndividualMetricsState(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartAnimationValues.IndividualMetricsState(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartAnimationValues.IndividualMetricsState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartAnimationValues.IndividualMetricsState()
{
  return &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
}

uint64_t sub_23DD98D84(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);

  v5 = result;
  v6 = *(_QWORD *)(v3 + 8);
  if (a3 < 1.0)
  {
    v7 = *(_QWORD *)(v6 + 16);
    v8 = sub_23DDC53A8();
    v9 = *(_QWORD *)(v8 - 8);
    if (!v7)
    {
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v20(v5, 1, 1, v8);
      v18 = a2;
      v19 = 1;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v20)(v18, v19, 1, v8);
    }
    v10 = v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v20(v5, 1, 1, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, v10, v8);
LABEL_17:
    v18 = a2;
    v19 = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v20)(v18, v19, 1, v8);
  }
  if ((~*(_QWORD *)&a3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (a3 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (a3 >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFSUB__((uint64_t)a3, 1))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v11 = *(_QWORD *)(v6 + 16);
  if ((uint64_t)(v11 - 1) >= (((uint64_t)a3 - 1) & ~(((uint64_t)a3 - 1) >> 63)))
    v12 = ((uint64_t)a3 - 1) & ~(((uint64_t)a3 - 1) >> 63);
  else
    v12 = v11 - 1;
  if ((uint64_t)(v12 + 1) < (uint64_t)(v11 - 1))
    v13 = v12 + 1;
  else
    v13 = v11 - 1;
  if (v12 >= v11)
    goto LABEL_24;
  v8 = sub_23DDC53A8();
  v14 = *(_QWORD *)(v8 - 8);
  v15 = v6 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v17 = *(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16);
  v17(v5, v15 + v16 * v12, v8);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v20)(v5, 0, 1, v8);
  if (v13 < v11)
  {
    v17(a2, v15 + v16 * v13, v8);
    goto LABEL_17;
  }
LABEL_25:
  __break(1u);
  return result;
}

ValueMetadata *sub_23DD98F68(long double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  ValueMetadata *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  sub_23DD9F288(0, &qword_256CFF430);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v21 - v6;
  v9 = *(_QWORD *)(v1 + 8);
  LOBYTE(v24) = *(_BYTE *)v1;
  v8 = v24;
  v25 = v9;
  v10 = sub_23DD998F4(a1);
  v12 = v10;
  v13 = v11;
  if (v8 == 1)
  {
    v22 = v5;
    v23 = &v21;
    v29 = v11;
    v30 = v10;
    v31 = xmmword_23DDCB210;
    *(double *)&v14 = MEMORY[0x24BDAC7A8](v10);
    *(&v21 - 6) = v13;
    *(&v21 - 5) = v12;
    *((_OWORD *)&v21 - 2) = v14;
    *(&v21 - 2) = 0x3FF0000000000000;
    sub_23DD9F2D8(0, &qword_256CFF438, (uint64_t (*)(uint64_t))sub_23DD9F378, &qword_256CFF458, (uint64_t)&type metadata for OvernightMetricsChartAnimationValues.SevenDayMetricsState);
    sub_23DD9F378();
    v16 = v15;
    v17 = sub_23DCF535C(&qword_256CFF458, (uint64_t (*)(uint64_t))sub_23DD9F378, MEMORY[0x24BDEC250]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = &type metadata for OvernightMetricsChartAnimationValues.SevenDayMetricsState;
    v25 = v16;
    v26 = v16;
    v27 = v17;
    v28 = v17;
    swift_getOpaqueTypeConformance2();
    sub_23DDC5C18();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = fmod(a1, 1.0);
    sub_23DDC5C24();
    if (v18 == 0.0)
    {
      if (*(_QWORD *)(v25 + 16) >= 2uLL)
      {
        v19 = swift_bridgeObjectRetain();
        sub_23DD99E48(v19);
      }
      (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v4);
      swift_bridgeObjectRelease();
      return (ValueMetadata *)MEMORY[0x24BEE4B08];
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v4);
      return v24;
    }
  }
  return (ValueMetadata *)v13;
}

ValueMetadata *sub_23DD991D4@<X0>(uint64_t a1@<X8>, long double a2@<D0>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  ValueMetadata *result;
  uint64_t v12;
  double v13;
  uint64_t v14;
  int64x2_t v15;
  int64x2_t v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  ValueMetadata *v20;
  double v21;
  unsigned int v22;
  int32x2_t v23;
  int64x2_t v24;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t OpaqueTypeConformance2;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  ValueMetadata *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  ValueMetadata *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  ValueMetadata *v63;
  uint64_t v64;
  int8x16_t v65;
  int64x2_t v66;
  _BYTE v67[24];

  sub_23DD9F288(0, &qword_256CFF3D0);
  v6 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v49 - v8;
  v10 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)v2 & 1) != 0)
  {
    LOBYTE(v63) = 1;
    v64 = v10;
    result = sub_23DD98F68(a2);
    if (*(_QWORD *)(v12 + 16) > 1uLL)
      v13 = 1.0;
    v15 = vdupq_lane_s64(*(uint64_t *)&v13, 0);
    v16 = vdupq_lane_s64(v14, 0);
    v17 = xmmword_23DDCB240;
    v18 = 0.5;
  }
  else
  {
    v49 = v7;
    LOBYTE(v63) = 0;
    v64 = v10;
    v19 = sub_23DD998F4(a2);
    v57 = &v49;
    v21 = 0.26;
    v22 = *(_QWORD *)(v19 + 16) > 1uLL;
    if (*(_QWORD *)(v19 + 16) > 1uLL)
      v21 = 0.5;
    v63 = v20;
    v64 = v19;
    v56 = v6;
    v52 = v20;
    v23 = vdup_n_s32(v22);
    v24.i64[0] = v23.u32[0];
    v24.i64[1] = v23.u32[1];
    __asm { FMOV            V3.2D, #1.0 }
    v65 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v24, 0x3FuLL)), _Q3, (int8x16_t)xmmword_23DDCB220);
    v66 = (int64x2_t)_Q3;
    *(double *)v67 = v21;
    *(_OWORD *)&v67[8] = xmmword_23DDCB230;
    MEMORY[0x24BDAC7A8](v19);
    v55 = &v49 - 4;
    *(&v49 - 2) = 0x3FF0000000000000;
    sub_23DD9E888(0);
    v54 = v30;
    sub_23DD9EA30(255);
    v53 = v31;
    sub_23DD9EF20();
    v33 = v32;
    sub_23DD9EBB0(255);
    v51 = v34;
    sub_23DD9ED00(255);
    v50 = v35;
    sub_23DD9EE28(255);
    v37 = v36;
    sub_23DD9F2D8(255, &qword_256CFF400, (uint64_t (*)(uint64_t))sub_23DD9EF20, &qword_256CFF420, (uint64_t)&type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState);
    v39 = v38;
    v40 = sub_23DCF535C(&qword_256CFF420, (uint64_t (*)(uint64_t))sub_23DD9EF20, MEMORY[0x24BDEC250]);
    swift_bridgeObjectRetain();
    v41 = v56;
    swift_bridgeObjectRetain();
    v58 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    v59 = v33;
    v60 = v33;
    v61 = v40;
    v62 = v40;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v58 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    v59 = v39;
    v60 = v33;
    v61 = OpaqueTypeConformance2;
    v62 = v40;
    v43 = swift_getOpaqueTypeConformance2();
    v58 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    v59 = v37;
    v60 = v33;
    v61 = v43;
    v62 = v40;
    v44 = swift_getOpaqueTypeConformance2();
    v58 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    v59 = v50;
    v60 = v33;
    v61 = v44;
    v62 = v40;
    v45 = swift_getOpaqueTypeConformance2();
    v58 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    v59 = v51;
    v60 = v33;
    v61 = v45;
    v62 = v40;
    v46 = swift_getOpaqueTypeConformance2();
    v58 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    v59 = v53;
    v60 = v33;
    v61 = v46;
    v62 = v40;
    swift_getOpaqueTypeConformance2();
    sub_23DDC5C18();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47 = fmod(a2, 1.0);
    sub_23DDC5C24();
    if (v47 == 0.0)
    {
      if (*(_QWORD *)(v64 + 16) >= 2uLL)
      {
        v48 = swift_bridgeObjectRetain();
        sub_23DD99E48(v48);
      }
      (*(void (**)(char *, uint64_t))(v49 + 8))(v9, v41);
      swift_bridgeObjectRelease();
      result = (ValueMetadata *)MEMORY[0x24BEE4B08];
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v9, v41);
      result = v63;
    }
    v12 = v64;
    v15 = (int64x2_t)v65;
    v16 = v66;
    v17 = *(_OWORD *)v67;
    v18 = *(double *)&v67[16];
  }
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v12;
  *(int64x2_t *)(a1 + 16) = v15;
  *(int64x2_t *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 48) = v17;
  *(double *)(a1 + 64) = v18;
  return result;
}

uint64_t sub_23DD995CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = sub_23DDC53A8();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]),
        v6 = sub_23DDC6668(),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      sub_23DCF535C(&qword_254326688, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE40]);
      v12 = sub_23DDC66C8();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

BOOL sub_23DD99750(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  double v12;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v4 = sub_23DDC6C44();
  v5 = -1 << *(_BYTE *)(a1 + 32);
  v6 = v4 & ~v5;
  v7 = a1 + 56;
  if (((*(_QWORD *)(a1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a1 + 48);
  if (*(double *)(v8 + 8 * v6) == a2)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(double *)(v8 + 8 * v11);
    result = v12 == a2;
    if (v12 == a2)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_23DD99828(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_23DD9E7C8((uint64_t)v7, (uint64_t)v9);
}

uint64_t sub_23DD99880(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  char v8;
  unsigned __int8 v9;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(double *)(a1 + 16);
  v3 = *(double *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(double *)(a2 + 16);
  v6 = *(double *)(a2 + 24);
  sub_23DD9B5F0(*(_QWORD *)a1, *(_QWORD *)a2);
  if ((v8 & 1) == 0)
    return 0;
  sub_23DD9B5F0(v2, v5);
  if (v3 == v6)
    return v9 & (v4 == v7);
  else
    return 0;
}

uint64_t sub_23DD998F4(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD);
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, char *, uint64_t);
  uint64_t v42;
  void (*v43)(uint64_t, char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, char *, uint64_t);
  __int128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v3 = sub_23DDC53A8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v57 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v56 = (char *)&v50 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v50 - v9;
  sub_23DD9F080();
  v12 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v50 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v50 - v22;
  v24 = *(_QWORD *)(v1 + 8);
  LOBYTE(v59) = *(_BYTE *)v1;
  v60 = v24;
  sub_23DD98D84((uint64_t)&v50 - v22, (uint64_t)v20, a1);
  v25 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_23DD9F11C((uint64_t)v23, (uint64_t)v14);
  sub_23DD9F11C((uint64_t)v20, v25);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v26((uint64_t)v14, 1, v3) == 1)
  {
    if (v26(v25, 1, v3) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v10, v25, v3);
      v27 = swift_bridgeObjectRetain();
      v28 = sub_23DD9F160(v27);
      swift_bridgeObjectRelease();
      sub_23DD94E28(0);
      v29 = *(unsigned __int8 *)(v4 + 80);
      v30 = (v29 + 32) & ~v29;
      v56 = (char *)(v30 + *(_QWORD *)(v4 + 72));
      v57 = v31;
      v55 = v29 | 7;
      v32 = swift_allocObject();
      v54 = xmmword_23DDC7F50;
      *(_OWORD *)(v32 + 16) = xmmword_23DDC7F50;
      v53 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 16);
      v53(v32 + v30, v10, v3);
      v33 = sub_23DD9DBD8(v32, v28);
      swift_setDeallocating();
      swift_arrayDestroy();
      v34 = v33;
      swift_deallocClassInstance();
      v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = v54;
      v53(v35 + v30, v10, v3);
      sub_23DD9F160(v35);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
LABEL_11:
      v36 = (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection;
      goto LABEL_12;
    }
  }
  else
  {
    sub_23DD9F11C((uint64_t)v14, (uint64_t)v17);
    if (v26(v25, 1, v3) != 1)
    {
      v37 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v38 = v56;
      v37(v56, v17, v3);
      v37(v57, (char *)v25, v3);
      sub_23DCF535C(&qword_254326690, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE48]);
      sub_23DDC67C4();
      sub_23DDC67C4();
      v55 = v59;
      *(_QWORD *)&v54 = v58;
      sub_23DD94E28(0);
      v39 = *(unsigned __int8 *)(v4 + 80);
      v40 = (v39 + 32) & ~v39;
      v52 = v40 + *(_QWORD *)(v4 + 72);
      v53 = v41;
      v51 = v39 | 7;
      v42 = swift_allocObject();
      v50 = xmmword_23DDC7F50;
      *(_OWORD *)(v42 + 16) = xmmword_23DDC7F50;
      v43 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 16);
      v43(v42 + v40, v38, v3);
      v34 = sub_23DD503E0(v42);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      if (v55 == (_QWORD)v54)
      {
        v44 = v57;
      }
      else
      {
        v45 = swift_allocObject();
        *(_OWORD *)(v45 + 16) = v50;
        v46 = v45 + v40;
        v47 = v57;
        v43(v46, v57, v3);
        sub_23DD503E0(v45);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        v44 = v47;
      }
      v48 = *(void (**)(char *, uint64_t))(v4 + 8);
      v48(v44, v3);
      v48(v56, v3);
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v17, v3);
  }
  v36 = (uint64_t (*)(_QWORD))sub_23DD9F080;
  v34 = MEMORY[0x24BEE4B08];
LABEL_12:
  sub_23DCF59A8((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  sub_23DCF59A8((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  sub_23DCF59A8((uint64_t)v14, v36);
  return v34;
}

void sub_23DD99E48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = sub_23DDC53A8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v23 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - v10;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 56);
  v24 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v12 << 6);
      goto LABEL_5;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v17)
      goto LABEL_23;
    v21 = *(_QWORD *)(v24 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v17)
        goto LABEL_23;
      v21 = *(_QWORD *)(v24 + 8 * v12);
      if (!v21)
      {
        v12 = v20 + 2;
        if (v20 + 2 >= v17)
          goto LABEL_23;
        v21 = *(_QWORD *)(v24 + 8 * v12);
        if (!v21)
        {
          v12 = v20 + 3;
          if (v20 + 3 >= v17)
            goto LABEL_23;
          v21 = *(_QWORD *)(v24 + 8 * v12);
          if (!v21)
            break;
        }
      }
    }
LABEL_22:
    v16 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v11, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * v19, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v11, v2);
    sub_23DD9BDDC((uint64_t)v8, v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  v22 = v20 + 4;
  if (v22 >= v17)
  {
LABEL_23:
    swift_release();
    return;
  }
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v17)
      goto LABEL_23;
    v21 = *(_QWORD *)(v24 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_23DD9A06C@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  ValueMetadata *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v69 = a1;
  sub_23DD9E888(0);
  v4 = *(_QWORD *)(v3 - 8);
  v67 = v3;
  v68 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v63 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD9EA30(0);
  v61 = v6;
  v66 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v59 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD9EBB0(0);
  v80 = v8;
  v65 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v79 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD9ED00(0);
  v78 = v10;
  v64 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v76 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD9EE28(0);
  v75 = v12;
  v62 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v74 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD9F2D8(0, &qword_256CFF400, (uint64_t (*)(uint64_t))sub_23DD9EF20, &qword_256CFF420, (uint64_t)&type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState);
  v73 = v14;
  v60 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v71 = (char *)&v58 - v15;
  sub_23DD9EF20();
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v70 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v81 = (char *)&v58 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v82 = (char *)&v58 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v83 = (char *)&v58 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v85 = (char *)&v58 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v84 = (char *)&v58 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v58 - v31;
  MEMORY[0x24BDAC7A8](v33);
  v77 = (char *)&v58 - v34;
  swift_getKeyPath();
  v92 = a2;
  sub_23DD315DC(0, &qword_256CFF410, MEMORY[0x24BEE13C8], MEMORY[0x24BDF54E8], MEMORY[0x24BDEC7D8]);
  sub_23DD9EFC0();
  sub_23DDC5B88();
  v35 = sub_23DCF535C(&qword_256CFF420, (uint64_t (*)(uint64_t))sub_23DD9EF20, MEMORY[0x24BDEC250]);
  sub_23DDC5C3C();
  v36 = *(void (**)(char *, uint64_t))(v18 + 8);
  v72 = v32;
  v36(v32, v17);
  swift_getKeyPath();
  v91 = a2;
  v37 = v84;
  sub_23DDC5B88();
  sub_23DDC5C3C();
  v36(v37, v17);
  swift_getKeyPath();
  v90 = a2;
  v38 = v85;
  sub_23DDC5B88();
  sub_23DDC5C3C();
  v36(v38, v17);
  swift_getKeyPath();
  v89 = a2;
  v39 = v83;
  sub_23DDC5B88();
  sub_23DDC5C3C();
  v36(v39, v17);
  swift_getKeyPath();
  v88 = a2;
  v40 = v82;
  sub_23DDC5B88();
  sub_23DDC5C3C();
  v36(v40, v17);
  swift_getKeyPath();
  v87 = a2;
  v41 = v81;
  sub_23DDC5B88();
  sub_23DDC5C3C();
  v36(v41, v17);
  swift_getKeyPath();
  v86 = a2;
  v42 = v70;
  sub_23DDC5B88();
  sub_23DDC5C3C();
  v36(v42, v17);
  sub_23DDC5C3C();
  sub_23DDC5C54();
  v93 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
  v94 = v17;
  v95 = v17;
  v96 = v35;
  v97 = v35;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v44 = v73;
  sub_23DDC5C54();
  v93 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
  v94 = v44;
  v95 = v17;
  v96 = OpaqueTypeConformance2;
  v97 = v35;
  v45 = swift_getOpaqueTypeConformance2();
  v46 = v75;
  sub_23DDC5C54();
  v93 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
  v94 = v46;
  v95 = v17;
  v96 = v45;
  v97 = v35;
  v47 = swift_getOpaqueTypeConformance2();
  v48 = v78;
  sub_23DDC5C54();
  v93 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
  v94 = v48;
  v95 = v17;
  v96 = v47;
  v97 = v35;
  v49 = swift_getOpaqueTypeConformance2();
  v50 = v59;
  v51 = v80;
  sub_23DDC5C54();
  v93 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
  v94 = v51;
  v95 = v17;
  v96 = v49;
  v97 = v35;
  v52 = swift_getOpaqueTypeConformance2();
  v53 = v63;
  v54 = v50;
  v55 = v61;
  sub_23DDC5C54();
  v93 = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
  v94 = v55;
  v95 = v17;
  v96 = v52;
  v97 = v35;
  swift_getOpaqueTypeConformance2();
  v56 = v67;
  sub_23DDC5C3C();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v53, v56);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v54, v55);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v79, v80);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v76, v78);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v74, v75);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v71, v73);
  v36(v70, v17);
  v36(v81, v17);
  v36(v82, v17);
  v36(v83, v17);
  v36(v85, v17);
  v36(v84, v17);
  v36(v72, v17);
  return ((uint64_t (*)(char *, uint64_t))v36)(v77, v17);
}

uint64_t sub_23DD9A940(double a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t);
  _QWORD v14[2];

  v3 = sub_23DDC6458();
  MEMORY[0x24BDAC7A8](v3);
  sub_23DD315DC(0, &qword_256CFF410, MEMORY[0x24BEE13C8], MEMORY[0x24BDF54E8], MEMORY[0x24BDEC7D8]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v14 - v10;
  *(double *)&v14[1] = a2;
  sub_23DDC644C();
  sub_23DDC5BD0();
  sub_23DD9EFC0();
  sub_23DDC5EC4();
  v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, v5);
  sub_23DDC5EC4();
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, v5);
}

uint64_t sub_23DD9AAB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  ValueMetadata *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  ValueMetadata *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;

  v37 = a2;
  v36 = a1;
  v42 = a3;
  sub_23DD9F2D8(0, &qword_256CFF438, (uint64_t (*)(uint64_t))sub_23DD9F378, &qword_256CFF458, (uint64_t)&type metadata for OvernightMetricsChartAnimationValues.SevenDayMetricsState);
  v40 = v11;
  v41 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v39 = (char *)&KeyPath - v12;
  sub_23DD9F378();
  v14 = v13;
  v38 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&KeyPath - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&KeyPath - v18;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&KeyPath - v21;
  KeyPath = swift_getKeyPath();
  v48 = a1;
  v49 = a2;
  v50 = a4;
  v51 = a5;
  v52 = a6;
  sub_23DD9F484(0);
  sub_23DD9F564(255);
  v24 = v23;
  v25 = (ValueMetadata *)MEMORY[0x24BEE13C8];
  sub_23DD315DC(255, &qword_256CFF410, MEMORY[0x24BEE13C8], MEMORY[0x24BDF54E8], MEMORY[0x24BDEC7D8]);
  v27 = v26;
  v28 = sub_23DD9EFC0();
  v53 = v25;
  v54 = v27;
  v55 = v27;
  v56 = v28;
  v57 = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v53 = v25;
  v54 = v24;
  v55 = v27;
  v56 = OpaqueTypeConformance2;
  v57 = v28;
  swift_getOpaqueTypeConformance2();
  sub_23DDC5B88();
  v30 = sub_23DCF535C(&qword_256CFF458, (uint64_t (*)(uint64_t))sub_23DD9F378, MEMORY[0x24BDEC250]);
  sub_23DDC5C3C();
  v31 = *(void (**)(char *, uint64_t))(v38 + 8);
  v31(v19, v14);
  swift_getKeyPath();
  v43 = v36;
  v44 = v37;
  v45 = a4;
  v46 = a5;
  v47 = a6;
  sub_23DDC5B88();
  sub_23DDC5C3C();
  v31(v16, v14);
  sub_23DDC5C3C();
  v32 = v39;
  sub_23DDC5C54();
  v53 = &type metadata for OvernightMetricsChartAnimationValues.SevenDayMetricsState;
  v54 = v14;
  v55 = v14;
  v56 = v30;
  v57 = v30;
  swift_getOpaqueTypeConformance2();
  v33 = v40;
  sub_23DDC5C3C();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v33);
  v31(v16, v14);
  v31(v19, v14);
  return ((uint64_t (*)(char *, uint64_t))v31)(v22, v14);
}

uint64_t sub_23DD9AE84@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v29 = a1;
  sub_23DD9F564(0);
  v28 = v3;
  v30 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v27 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23DDC6458();
  MEMORY[0x24BDAC7A8](v5);
  v6 = MEMORY[0x24BEE13C8];
  sub_23DD315DC(0, &qword_256CFF410, MEMORY[0x24BEE13C8], MEMORY[0x24BDF54E8], MEMORY[0x24BDEC7D8]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v26 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v26 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v26 - v19;
  v31 = a2;
  sub_23DDC644C();
  sub_23DDC5BD0();
  v21 = sub_23DD9EFC0();
  sub_23DDC5EC4();
  v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v17, v8);
  v31 = 1.0;
  sub_23DDC644C();
  sub_23DDC5BD0();
  sub_23DDC5EC4();
  v22(v14, v8);
  v31 = 1.0;
  sub_23DDC644C();
  sub_23DDC5BD0();
  sub_23DDC5EC4();
  v22(v11, v8);
  sub_23DDC5EC4();
  v23 = v27;
  sub_23DDC5ED0();
  v31 = v6;
  v32 = v8;
  v33 = v8;
  v34 = v21;
  v35 = v21;
  swift_getOpaqueTypeConformance2();
  v24 = v28;
  sub_23DDC5ED0();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v24);
  v22(v11, v8);
  v22(v14, v8);
  v22(v17, v8);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v8);
}

uint64_t sub_23DD9B1F0@<X0>(uint64_t a1@<X8>, double a2@<D1>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v29 = a1;
  sub_23DD9F564(0);
  v28 = v3;
  v30 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v27 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23DDC6458();
  MEMORY[0x24BDAC7A8](v5);
  v6 = MEMORY[0x24BEE13C8];
  sub_23DD315DC(0, &qword_256CFF410, MEMORY[0x24BEE13C8], MEMORY[0x24BDF54E8], MEMORY[0x24BDEC7D8]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v26 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v26 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v26 - v19;
  v31 = a2;
  sub_23DDC644C();
  sub_23DDC5BD0();
  v21 = sub_23DD9EFC0();
  sub_23DDC5EC4();
  v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v17, v8);
  v31 = 0.0;
  sub_23DDC644C();
  sub_23DDC5BD0();
  sub_23DDC5EC4();
  v22(v14, v8);
  v31 = 0.0;
  sub_23DDC644C();
  sub_23DDC5BD0();
  sub_23DDC5EC4();
  v22(v11, v8);
  sub_23DDC5EC4();
  v23 = v27;
  sub_23DDC5ED0();
  v31 = v6;
  v32 = v8;
  v33 = v8;
  v34 = v21;
  v35 = v21;
  swift_getOpaqueTypeConformance2();
  v24 = v28;
  sub_23DDC5ED0();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v24);
  v22(v11, v8);
  v22(v14, v8);
  v22(v17, v8);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v8);
}

double sub_23DD9B550(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  double result;
  uint64_t v9;

  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = sub_23DD995CC(a1, *(_QWORD *)v2);
  if (v6 < 2)
  {
    if ((v7 & 1) != 0)
      return *(double *)(v2 + 48);
    if ((sub_23DD995CC(a1, v5) & 1) == 0)
      return 0.26;
    return *(double *)(v2 + 56);
  }
  if ((a2 & 1) != 0)
  {
    result = 1.0;
    if ((v7 & 1) != 0)
      return result;
    return *(double *)(v2 + 56);
  }
  v9 = v2 + 64;
  if ((v7 & 1) != 0)
    v9 = v2 + 48;
  return *(double *)v9;
}

void sub_23DD9B5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t, __n128);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = sub_23DDC53A8();
  v40 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v33 - v8;
  v12.n128_f64[0] = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v33 - v11;
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v14 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  v34 = a1;
  v35 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  v36 = (unint64_t)(v16 + 63) >> 6;
  v39 = a2 + 56;
  v33 = (char *)&v33 - v11;
  if (!v18)
    goto LABEL_9;
LABEL_7:
  v37 = (v18 - 1) & v18;
  v38 = v14;
  for (i = __clz(__rbit64(v18)) | (v14 << 6); ; i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    v24 = v40;
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v40 + 16);
    v26(v13, *(_QWORD *)(a1 + 48) + v25 * i, v4, v12);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v9, v13, v4);
    sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
    v27 = sub_23DDC6668();
    v28 = -1 << *(_BYTE *)(a2 + 32);
    v29 = v27 & ~v28;
    if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v4);
      return;
    }
    v30 = ~v28;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v26)(v6, *(_QWORD *)(a2 + 48) + v29 * v25, v4);
      sub_23DCF535C(&qword_254326688, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE40]);
      v31 = sub_23DDC66C8();
      v32 = *(void (**)(char *, uint64_t))(v40 + 8);
      v32(v6, v4);
      if ((v31 & 1) != 0)
        break;
      v29 = (v29 + 1) & v30;
      if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v32(v9, v4);
        return;
      }
    }
    v32(v9, v4);
    v13 = v33;
    a1 = v34;
    v18 = v37;
    v14 = v38;
    if (v37)
      goto LABEL_7;
LABEL_9:
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v20 >= v36)
      return;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    v22 = v14 + 1;
    if (!v21)
    {
      v22 = v20 + 1;
      if (v20 + 1 >= v36)
        return;
      v21 = *(_QWORD *)(v35 + 8 * v22);
      if (!v21)
      {
        v22 = v20 + 2;
        if (v20 + 2 >= v36)
          return;
        v21 = *(_QWORD *)(v35 + 8 * v22);
        if (!v21)
          break;
      }
    }
LABEL_22:
    v37 = (v21 - 1) & v21;
    v38 = v22;
  }
  v23 = v20 + 3;
  if (v23 >= v36)
    return;
  v21 = *(_QWORD *)(v35 + 8 * v23);
  if (v21)
  {
    v22 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v36)
      return;
    v21 = *(_QWORD *)(v35 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_22;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_23DD9B944(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_24;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 3;
    if (v13 + 3 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v15 = v13 + 4;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_34;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_24;
      }
    }
    v4 = v15;
LABEL_24:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    v16 = *(double *)(*(_QWORD *)(v3 + 48) + 8 * v12);
    result = sub_23DDC6C44();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(double *)(v19 + 8 * v18) == v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(double *)(v19 + 8 * v18) == v16)
      goto LABEL_7;
  }
}

uint64_t sub_23DD9BB24(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_23DDC6C50();
  swift_bridgeObjectRetain();
  sub_23DDC6794();
  v8 = sub_23DDC6C80();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_23DDC6C08() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_23DDC6C08() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_23DD9C930(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_23DD9BCD0(double *a1, double a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t result;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  v7 = sub_23DDC6C44();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_23DD9CAC8(v9, isUniquelyReferenced_nonNull_native, a2);
    *v3 = v15;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(v6 + 48);
  v11 = *(double *)(v10 + 8 * v9);
  if (v11 != a2)
  {
    v13 = ~v8;
    do
    {
      v9 = (v9 + 1) & v13;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_8;
      v11 = *(double *)(v10 + 8 * v9);
    }
    while (v11 != a2);
  }
  result = 0;
  a2 = v11;
LABEL_9:
  *a1 = a2;
  return result;
}

uint64_t sub_23DD9BDDC(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_23DDC53A8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_23DCF535C(&qword_254326680, v11, MEMORY[0x24BE3FE38]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_23DDC6668();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_23DCF535C(&qword_254326688, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE40]);
      v21 = sub_23DDC66C8();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_23DD9CBF8((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_23DD9C038()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v1 = v0;
  v2 = *v0;
  sub_23DD315DC(0, &qword_256CFF4E8, MEMORY[0x24BEE0D00], MEMORY[0x24BEE0D10], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v3 = sub_23DDC69EC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_37;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v31 = v0;
  v32 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_22;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v16 >= v8)
      break;
    v17 = (_QWORD *)(v2 + 56);
    v18 = *(_QWORD *)(v32 + 8 * v16);
    ++v11;
    if (!v18)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v8)
        goto LABEL_31;
      v18 = *(_QWORD *)(v32 + 8 * v11);
      if (!v18)
      {
        v19 = v16 + 2;
        if (v19 >= v8)
        {
LABEL_31:
          swift_release();
          v1 = v31;
          goto LABEL_33;
        }
        v18 = *(_QWORD *)(v32 + 8 * v19);
        if (!v18)
        {
          while (1)
          {
            v11 = v19 + 1;
            if (__OFADD__(v19, 1))
              goto LABEL_39;
            if (v11 >= v8)
              goto LABEL_31;
            v18 = *(_QWORD *)(v32 + 8 * v11);
            ++v19;
            if (v18)
              goto LABEL_21;
          }
        }
        v11 = v19;
      }
    }
LABEL_21:
    v7 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_22:
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v21 = *v20;
    v22 = v20[1];
    sub_23DDC6C50();
    sub_23DDC6794();
    result = sub_23DDC6C80();
    v23 = -1 << *(_BYTE *)(v4 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v9 + 8 * v25);
      }
      while (v29 == -1);
      v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v21;
    v13[1] = v22;
    ++*(_QWORD *)(v4 + 16);
  }
  swift_release();
  v1 = v31;
  v17 = (_QWORD *)(v2 + 56);
LABEL_33:
  v30 = 1 << *(_BYTE *)(v2 + 32);
  if (v30 > 63)
    bzero(v17, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v17 = -1 << v30;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_37:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23DD9C318()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  sub_23DD315DC(0, qword_256CFF460, MEMORY[0x24BEE13C8], MEMORY[0x24BEE13E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  result = sub_23DDC69EC();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v27 = v1;
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = sub_23DDC6C44();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23DD9C5C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = sub_23DDC53A8();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_23DD50644();
  v6 = sub_23DDC69EC();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v36 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v22 + v23 * v17, v2);
      sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
      result = sub_23DDC6668();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v23, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_23DD9C930(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_23DD9C038();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_23DD9CDFC();
      goto LABEL_22;
    }
    sub_23DD9D384();
  }
  v11 = *v4;
  sub_23DDC6C50();
  sub_23DDC6794();
  result = sub_23DDC6C80();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_23DDC6C08(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_23DDC6C14();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_23DDC6C08();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_23DD9CAC8(uint64_t result, char a2, double a3)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v4 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a2 & 1) != 0)
    goto LABEL_14;
  if ((a2 & 1) != 0)
  {
    sub_23DD9C318();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_23DD9CFB4();
      goto LABEL_14;
    }
    sub_23DD9D628();
  }
  v8 = *v3;
  result = sub_23DDC6C44();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  v4 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(double *)(v10 + 8 * v4) == a3)
    {
LABEL_13:
      result = sub_23DDC6C14();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        v4 = (v4 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
          break;
        if (*(double *)(v10 + 8 * v4) == a3)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (v4 >> 6) + 56) |= 1 << v4;
  *(double *)(*(_QWORD *)(v12 + 48) + 8 * v4) = a3;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_23DD9CBF8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = sub_23DDC53A8();
  v7 = *(_QWORD *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_23DD9C5C8();
  }
  else
  {
    if (v12 > v11)
    {
      sub_23DD9D164();
      goto LABEL_12;
    }
    sub_23DD9D8B4();
  }
  v13 = *v3;
  sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
  v14 = sub_23DDC6668();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v10, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      sub_23DCF535C(&qword_254326688, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE40]);
      v19 = sub_23DDC66C8();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6, v8);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_23DDC6C14();
  __break(1u);
  return result;
}

void *sub_23DD9CDFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_23DD315DC(0, &qword_256CFF4E8, MEMORY[0x24BEE0D00], MEMORY[0x24BEE0D10], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v2 = *v0;
  v3 = sub_23DDC69E0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DD9CFB4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_23DD315DC(0, qword_256CFF460, MEMORY[0x24BEE13C8], MEMORY[0x24BEE13E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v2 = *v0;
  v3 = sub_23DDC69E0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23DD9D164()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = sub_23DDC53A8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD50644();
  v6 = *v0;
  v7 = sub_23DDC69E0();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_23DD9D384()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_23DD315DC(0, &qword_256CFF4E8, MEMORY[0x24BEE0D00], MEMORY[0x24BEE0D10], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  v3 = sub_23DDC69EC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_32:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain_n();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_21;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v16 >= v29)
      goto LABEL_30;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_30;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v18 = v16 + 2;
        if (v18 >= v29)
        {
LABEL_30:
          result = swift_release_n();
          v1 = v0;
          goto LABEL_32;
        }
        v17 = *(_QWORD *)(v6 + 8 * v18);
        v11 = v18;
        if (!v17)
          break;
      }
    }
LABEL_20:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_21:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_23DDC6C50();
    swift_bridgeObjectRetain();
    sub_23DDC6794();
    result = sub_23DDC6C80();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_33;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_30;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_23DD9D628()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  sub_23DD315DC(0, qword_256CFF460, MEMORY[0x24BEE13C8], MEMORY[0x24BEE13E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE24D8]);
  result = sub_23DDC69EC();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = sub_23DDC6C44();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23DD9D8B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = sub_23DDC53A8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_23DD50644();
  v7 = sub_23DDC69EC();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
    result = sub_23DDC6668();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23DD9DBD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = sub_23DDC53A8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - v9;
  if (*(_QWORD *)(a2 + 16))
  {
    v35 = a1;
    v11 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v11)
    {
      v12 = 0;
      v33 = v5;
      v34 = (char *)(a2 + 56);
      while (1)
      {
        if (v12 >= v11)
          __break(1u);
        v13 = *(_QWORD *)(v5 + 72);
        v14 = a1
            + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
            + v13 * v12;
        v36 = v12 + 1;
        v15 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
        v15(v10, v14, v4);
        sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
        v16 = sub_23DDC6668();
        v17 = a2;
        v18 = -1 << *(_BYTE *)(a2 + 32);
        v19 = v5;
        v20 = v16 & ~v18;
        if (((*(_QWORD *)&v34[(v20 >> 3) & 0xFFFFFFFFFFFFF8] >> v20) & 1) != 0)
          break;
        v23 = *(void (**)(char *, uint64_t))(v19 + 8);
LABEL_11:
        v23(v10, v4);
        a1 = v35;
        v12 = v36;
        v11 = *(_QWORD *)(v35 + 16);
        a2 = v17;
        v5 = v33;
        if (v36 == v11)
          goto LABEL_12;
      }
      v21 = ~v18;
      while (1)
      {
        v15(v7, *(_QWORD *)(v17 + 48) + v20 * v13, v4);
        sub_23DCF535C(&qword_254326688, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE40]);
        v22 = sub_23DDC66C8();
        v23 = *(void (**)(char *, uint64_t))(v33 + 8);
        v23(v7, v4);
        if ((v22 & 1) != 0)
          break;
        v20 = (v20 + 1) & v21;
        if (((*(_QWORD *)&v34[(v20 >> 3) & 0xFFFFFFFFFFFFF8] >> v20) & 1) == 0)
          goto LABEL_11;
      }
      isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v23)(v10, v4);
      v25 = *(_BYTE *)(v17 + 32);
      v26 = (unint64_t)((1 << v25) + 63) >> 6;
      v27 = 8 * v26;
      if ((v25 & 0x3Fu) <= 0xD
        || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
      {
        MEMORY[0x24BDAC7A8](isStackAllocationSafe);
        memcpy((char *)&v33 - ((v27 + 15) & 0x3FFFFFFFFFFFFFF0), v34, v27);
        sub_23DD9DF90((unint64_t *)((char *)&v33 - ((v27 + 15) & 0x3FFFFFFFFFFFFFF0)), v26, v17, v20, &v35);
        v29 = v28;
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v30 = (void *)swift_slowAlloc();
        memcpy(v30, v34, v27);
        sub_23DD9DF90((unint64_t *)v30, v26, v17, v20, &v35);
        v29 = v31;
        swift_release();
        swift_bridgeObjectRelease();
        MEMORY[0x242643C80](v30, -1, -1);
      }
      return v29;
    }
    else
    {
LABEL_12:
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  return a2;
}

void sub_23DD9DF90(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  void (*v30)(uint64_t, unint64_t, uint64_t, __n128);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v41 = a2;
  v9 = sub_23DDC53A8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16.n128_f64[0] = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v41 - v17;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20);
  v42 = a1;
  *(unint64_t *)((char *)a1 + v20) = v21 & ((-1 << a4) - 1);
  v22 = v19 - 1;
  v23 = *a5;
  v24 = a5[1];
  v25 = *(_QWORD *)(*a5 + 16);
  v43 = v22;
  if (v24 == v25)
  {
LABEL_2:
    swift_retain();
    sub_23DD9E2B4(v42, v41, v43, a3);
    return;
  }
  v45 = v15;
  v46 = a3 + 56;
  v48 = v10;
  v26 = v15;
  v44 = a5;
  while (v24 < v25)
  {
    v28 = v23 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v47 = *(_QWORD *)(v10 + 72);
    v29 = v18;
    v30 = *(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v10 + 16);
    v30(v26, v28 + v47 * v24, v9, v16);
    a5[1] = v24 + 1;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v29, v26, v9);
    sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
    v31 = v29;
    v32 = sub_23DDC6668();
    v33 = a3;
    v34 = -1 << *(_BYTE *)(a3 + 32);
    v35 = v32 & ~v34;
    if (((*(_QWORD *)(v46 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
    {
      v27 = *(void (**)(char *, uint64_t))(v48 + 8);
LABEL_5:
      v18 = v31;
      v27(v31, v9);
LABEL_6:
      a3 = v33;
      v10 = v48;
      v26 = v45;
      goto LABEL_7;
    }
    v36 = ~v34;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v30)(v12, *(_QWORD *)(v33 + 48) + v35 * v47, v9);
      sub_23DCF535C(&qword_254326688, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE40]);
      v37 = sub_23DDC66C8();
      v27 = *(void (**)(char *, uint64_t))(v48 + 8);
      v27(v12, v9);
      if ((v37 & 1) != 0)
        break;
      v35 = (v35 + 1) & v36;
      if (((*(_QWORD *)(v46 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
        goto LABEL_5;
    }
    v18 = v31;
    v27(v31, v9);
    v38 = (v35 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v39 = *(unint64_t *)((char *)v42 + v38);
    *(unint64_t *)((char *)v42 + v38) = v39 & ~(1 << v35);
    if ((v39 & (1 << v35)) == 0)
      goto LABEL_6;
    v40 = v43 - 1;
    v10 = v48;
    v26 = v45;
    if (__OFSUB__(v43, 1))
      goto LABEL_19;
    a3 = v33;
    --v43;
    if (!v40)
      return;
LABEL_7:
    a5 = v44;
    v23 = *v44;
    v24 = v44[1];
    v25 = *(_QWORD *)(*v44 + 16);
    if (v24 == v25)
      goto LABEL_2;
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t sub_23DD9E2B4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v8 = sub_23DDC53A8();
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  v38 = v9;
  sub_23DD50644();
  result = sub_23DDC69F8();
  v12 = result;
  v36 = a1;
  v37 = a2;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  v16 = result + 56;
  v17 = v38;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v15 << 6);
    }
    else
    {
      v20 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_40;
      if (v20 >= v37)
      {
LABEL_37:
        swift_release();
        return v12;
      }
      v21 = v36[v20];
      ++v15;
      if (!v21)
      {
        v15 = v20 + 1;
        if (v20 + 1 >= v37)
          goto LABEL_37;
        v21 = v36[v15];
        if (!v21)
        {
          v15 = v20 + 2;
          if (v20 + 2 >= v37)
            goto LABEL_37;
          v21 = v36[v15];
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v37)
              goto LABEL_37;
            v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                v15 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v15 >= v37)
                  goto LABEL_37;
                v21 = v36[v15];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v15 = v22;
          }
        }
      }
LABEL_24:
      v14 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }
    v23 = a4;
    v24 = *(_QWORD *)(a4 + 48);
    v25 = *(_QWORD *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
    result = sub_23DDC6668();
    v26 = -1 << *(_BYTE *)(v12 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      v17 = v38;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      v17 = v38;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v16 + 8 * v28);
      }
      while (v33 == -1);
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(_QWORD *)(v16 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v12 + 48) + v29 * v25, v11, v8);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v23;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

BOOL sub_23DD9E5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  _BOOL8 v17;
  uint64_t (*v18)(_QWORD);
  void (*v19)(char *, uint64_t);
  _QWORD v21[2];

  v4 = sub_23DDC53A8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD9F080();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v13[*(int *)(v14 + 48)];
  sub_23DD9F11C(a1, (uint64_t)v13);
  sub_23DD9F11C(a2, v15);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v16((uint64_t)v13, 1, v4) == 1)
  {
    v17 = 1;
    if (v16(v15, 1, v4) == 1)
      goto LABEL_8;
  }
  else
  {
    sub_23DD9F11C((uint64_t)v13, (uint64_t)v10);
    if (v16(v15, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      sub_23DCF535C(&qword_254326690, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE48]);
      sub_23DDC67C4();
      sub_23DDC67C4();
      v17 = v21[1] == v21[0];
      v19 = *(void (**)(char *, uint64_t))(v5 + 8);
      v19(v7, v4);
      v19(v10, v4);
LABEL_8:
      v18 = (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection;
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  v17 = 0;
  v18 = (uint64_t (*)(_QWORD))sub_23DD9F080;
LABEL_9:
  sub_23DCF59A8((uint64_t)v13, v18);
  return v17;
}

BOOL sub_23DD9E7C8(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  sub_23DD9B5F0(*(_QWORD *)a1, *(_QWORD *)a2);
  if ((v4 & 1) != 0
    && (sub_23DD9B5F0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)), (v5 & 1) != 0)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && *(double *)(a1 + 24) == *(double *)(a2 + 24)
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48)
    && *(double *)(a1 + 56) == *(double *)(a2 + 56))
  {
    return *(double *)(a1 + 64) == *(double *)(a2 + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_23DD9E880@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DD9A06C(a1, *(double *)(v1 + 16));
}

void sub_23DD9E888(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  if (!qword_256CFF3D8)
  {
    sub_23DD9EA30(255);
    v3 = v2;
    sub_23DD9EF20();
    v5 = v4;
    sub_23DD9EBB0(255);
    sub_23DD9ED00(255);
    sub_23DD9EE28(255);
    sub_23DD9F2D8(255, &qword_256CFF400, (uint64_t (*)(uint64_t))sub_23DD9EF20, &qword_256CFF420, (uint64_t)&type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState);
    v6 = sub_23DCF535C(&qword_256CFF420, (uint64_t (*)(uint64_t))sub_23DD9EF20, MEMORY[0x24BDEC250]);
    v7 = MEMORY[0x24BDED740];
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v10[0] = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    v10[1] = v3;
    v10[2] = v5;
    v10[3] = swift_getOpaqueTypeConformance2();
    v10[4] = v6;
    v8 = MEMORY[0x242643B9C](a1, v10, v7, 0);
    if (!v9)
      atomic_store(v8, (unint64_t *)&qword_256CFF3D8);
  }
}

void sub_23DD9EA30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  if (!qword_256CFF3E0)
  {
    sub_23DD9EBB0(255);
    v3 = v2;
    sub_23DD9EF20();
    v5 = v4;
    sub_23DD9ED00(255);
    sub_23DD9EE28(255);
    sub_23DD9F2D8(255, &qword_256CFF400, (uint64_t (*)(uint64_t))sub_23DD9EF20, &qword_256CFF420, (uint64_t)&type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState);
    v6 = sub_23DCF535C(&qword_256CFF420, (uint64_t (*)(uint64_t))sub_23DD9EF20, MEMORY[0x24BDEC250]);
    v7 = MEMORY[0x24BDED740];
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v10[0] = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    v10[1] = v3;
    v10[2] = v5;
    v10[3] = swift_getOpaqueTypeConformance2();
    v10[4] = v6;
    v8 = MEMORY[0x242643B9C](a1, v10, v7, 0);
    if (!v9)
      atomic_store(v8, (unint64_t *)&qword_256CFF3E0);
  }
}

void sub_23DD9EBB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  if (!qword_256CFF3E8)
  {
    sub_23DD9ED00(255);
    v3 = v2;
    sub_23DD9EF20();
    v5 = v4;
    sub_23DD9EE28(255);
    sub_23DD9F2D8(255, &qword_256CFF400, (uint64_t (*)(uint64_t))sub_23DD9EF20, &qword_256CFF420, (uint64_t)&type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState);
    v6 = sub_23DCF535C(&qword_256CFF420, (uint64_t (*)(uint64_t))sub_23DD9EF20, MEMORY[0x24BDEC250]);
    v7 = MEMORY[0x24BDED740];
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v10[0] = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    v10[1] = v3;
    v10[2] = v5;
    v10[3] = swift_getOpaqueTypeConformance2();
    v10[4] = v6;
    v8 = MEMORY[0x242643B9C](a1, v10, v7, 0);
    if (!v9)
      atomic_store(v8, (unint64_t *)&qword_256CFF3E8);
  }
}

void sub_23DD9ED00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  if (!qword_256CFF3F0)
  {
    sub_23DD9EE28(255);
    v3 = v2;
    sub_23DD9EF20();
    v5 = v4;
    sub_23DD9F2D8(255, &qword_256CFF400, (uint64_t (*)(uint64_t))sub_23DD9EF20, &qword_256CFF420, (uint64_t)&type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState);
    v6 = sub_23DCF535C(&qword_256CFF420, (uint64_t (*)(uint64_t))sub_23DD9EF20, MEMORY[0x24BDEC250]);
    v7 = MEMORY[0x24BDED740];
    swift_getOpaqueTypeConformance2();
    v10[0] = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    v10[1] = v3;
    v10[2] = v5;
    v10[3] = swift_getOpaqueTypeConformance2();
    v10[4] = v6;
    v8 = MEMORY[0x242643B9C](a1, v10, v7, 0);
    if (!v9)
      atomic_store(v8, (unint64_t *)&qword_256CFF3F0);
  }
}

void sub_23DD9EE28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  if (!qword_256CFF3F8)
  {
    sub_23DD9F2D8(255, &qword_256CFF400, (uint64_t (*)(uint64_t))sub_23DD9EF20, &qword_256CFF420, (uint64_t)&type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState);
    v3 = v2;
    sub_23DD9EF20();
    v5 = v4;
    v6 = sub_23DCF535C(&qword_256CFF420, (uint64_t (*)(uint64_t))sub_23DD9EF20, MEMORY[0x24BDEC250]);
    v7 = MEMORY[0x24BDED740];
    v10[0] = &type metadata for OvernightMetricsChartAnimationValues.IndividualMetricsState;
    v10[1] = v3;
    v10[2] = v5;
    v10[3] = swift_getOpaqueTypeConformance2();
    v10[4] = v6;
    v8 = MEMORY[0x242643B9C](a1, v10, v7, 0);
    if (!v9)
      atomic_store(v8, (unint64_t *)&qword_256CFF3F8);
  }
}

void sub_23DD9EF20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFF408)
  {
    sub_23DD315DC(255, &qword_256CFF410, MEMORY[0x24BEE13C8], MEMORY[0x24BDF54E8], MEMORY[0x24BDEC7D8]);
    sub_23DD9EFC0();
    v0 = sub_23DDC5B7C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFF408);
  }
}

unint64_t sub_23DD9EFC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFF418;
  if (!qword_256CFF418)
  {
    sub_23DD315DC(255, &qword_256CFF410, MEMORY[0x24BEE13C8], MEMORY[0x24BDF54E8], MEMORY[0x24BDEC7D8]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEC7F0], v1);
    atomic_store(result, (unint64_t *)&qword_256CFF418);
  }
  return result;
}

uint64_t sub_23DD9F028()
{
  uint64_t v0;

  return sub_23DD9A940(*(double *)(v0 + 16), 1.0);
}

uint64_t sub_23DD9F044()
{
  uint64_t v0;

  return sub_23DD9A940(*(double *)(v0 + 16), 0.0);
}

uint64_t sub_23DD9F060()
{
  uint64_t v0;

  return sub_23DD9A940(*(double *)(v0 + 16), 0.26);
}

void sub_23DD9F080()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFF428)
  {
    type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFF428);
  }
}

uint64_t type metadata accessor for OvernightMetricsChartAnimationValues.Selection()
{
  uint64_t result;

  result = qword_256CFF4D8;
  if (!qword_256CFF4D8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD9F11C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD9F160(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v2 = sub_23DDC53A8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  sub_23DCF535C(&qword_254326680, v10, MEMORY[0x24BE3FE38]);
  result = sub_23DDC68A8();
  v16 = result;
  if (v9)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v14(v5, v12, v2);
      sub_23DD9BDDC((uint64_t)v8, v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v12 += v13;
      --v9;
    }
    while (v9);
    return v16;
  }
  return result;
}

void sub_23DD9F288(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_23DDC5C30();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_23DD9F2CC()
{
  return sub_23DD9F624((uint64_t (*)(_QWORD, _QWORD, double, double, double))sub_23DD9AAB8);
}

void sub_23DD9F2D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!*a2)
  {
    v11 = a5;
    v12 = a3(255);
    v13 = v12;
    v14 = sub_23DCF535C(a4, a3, MEMORY[0x24BDEC250]);
    v15 = v14;
    v9 = MEMORY[0x242643B9C](a1, &v11, MEMORY[0x24BDED740], 0);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_23DD9F378()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFF440)
  {
    sub_23DD9F484(255);
    sub_23DD9F564(255);
    sub_23DD315DC(255, &qword_256CFF410, MEMORY[0x24BEE13C8], MEMORY[0x24BDF54E8], MEMORY[0x24BDEC7D8]);
    sub_23DD9EFC0();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v0 = sub_23DDC5B7C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFF440);
  }
}

void sub_23DD9F484(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  if (!qword_256CFF448)
  {
    sub_23DD9F564(255);
    v3 = v2;
    v4 = MEMORY[0x24BEE13C8];
    sub_23DD315DC(255, &qword_256CFF410, MEMORY[0x24BEE13C8], MEMORY[0x24BDF54E8], MEMORY[0x24BDEC7D8]);
    v6 = v5;
    v7 = sub_23DD9EFC0();
    v8 = MEMORY[0x24BDF0C50];
    v11[0] = v4;
    v11[1] = v3;
    v11[2] = v6;
    v11[3] = swift_getOpaqueTypeConformance2();
    v11[4] = v7;
    v9 = MEMORY[0x242643B9C](a1, v11, v8, 0);
    if (!v10)
      atomic_store(v9, (unint64_t *)&qword_256CFF448);
  }
}

void sub_23DD9F564(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  unint64_t v7;
  unint64_t v8;

  if (!qword_256CFF450)
  {
    v2 = MEMORY[0x24BEE13C8];
    sub_23DD315DC(255, &qword_256CFF410, MEMORY[0x24BEE13C8], MEMORY[0x24BDF54E8], MEMORY[0x24BDEC7D8]);
    v6[0] = v2;
    v6[1] = v3;
    v6[2] = v3;
    v7 = sub_23DD9EFC0();
    v8 = v7;
    v4 = MEMORY[0x242643B9C](a1, v6, MEMORY[0x24BDF0C50], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_256CFF450);
  }
}

uint64_t sub_23DD9F60C()
{
  return sub_23DD9F624((uint64_t (*)(_QWORD, _QWORD, double, double, double))sub_23DD9AE84);
}

uint64_t sub_23DD9F618()
{
  return sub_23DD9F624((uint64_t (*)(_QWORD, _QWORD, double, double, double))sub_23DD9B1F0);
}

uint64_t sub_23DD9F624(uint64_t (*a1)(_QWORD, _QWORD, double, double, double))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 48));
}

uint64_t *sub_23DD9F638(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC53A8();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_23DD9F700(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_23DDC53A8();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_23DD9F768(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_23DDC53A8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_23DD9F80C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = sub_23DDC53A8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_23DD9F8FC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_23DDC53A8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_23DD9F9A0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = sub_23DDC53A8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_23DD9FA90()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD9FA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_23DDC53A8();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_23DD9FAE8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD9FAF4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_23DDC53A8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_23DD9FB44(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23DDC53A8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_23DD9FB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23DDC53A8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t sub_23DD9FBBC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC53A8();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for OvernightMetricsChartAnimationValues.SevenDayMetricsState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for OvernightMetricsChartAnimationValues.SevenDayMetricsState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *assignWithTake for OvernightMetricsChartAnimationValues.SevenDayMetricsState(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartAnimationValues.SevenDayMetricsState(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartAnimationValues.SevenDayMetricsState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartAnimationValues.SevenDayMetricsState()
{
  return &type metadata for OvernightMetricsChartAnimationValues.SevenDayMetricsState;
}

uint64_t sub_23DD9FDA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  unsigned __int8 v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  char *v62;
  char v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t ObjCClassFromMetadata;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t result;
  uint64_t *v73;
  double v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;

  v96 = a6;
  v97 = a4;
  v98 = a3;
  v99 = a2;
  v77 = a1;
  v10 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v10);
  v76 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_23DDC54C8();
  v84 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  v75 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23DDC50CC();
  v89 = *(_QWORD *)(v13 - 8);
  v90 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v88 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23DDC500C();
  MEMORY[0x24BDAC7A8](v15);
  v87 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23DDC51F8();
  MEMORY[0x24BDAC7A8](v17);
  v85 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23DDC51E0();
  MEMORY[0x24BDAC7A8](v19);
  v80 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v21);
  v95 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, &qword_254326648, (void (*)(uint64_t))MEMORY[0x24BDCDEE8]);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v74 - v24;
  sub_23DCF6898(0, &qword_254326650, (void (*)(uint64_t))MEMORY[0x24BDCDF30]);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v74 - v27;
  v83 = sub_23DDC50F0();
  v81 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v30 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v79 = (char *)&v74 - v32;
  v33 = *(double *)a5;
  v34 = *(_BYTE *)(a5 + 8);
  v82 = v34;
  v35 = sub_23DDC53A8();
  v93 = *(_QWORD *)(v35 - 8);
  v94 = v35;
  (*(void (**)(uint64_t, uint64_t))(v93 + 16))(a7, a1);
  v36 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v37 = a7 + v36[5];
  v38 = sub_23DDC512C();
  v91 = *(_QWORD *)(v38 - 8);
  v92 = v38;
  (*(void (**)(uint64_t, uint64_t))(v91 + 16))(v37, v99);
  sub_23DCF58EC(v98, a7 + v36[6], (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DCF58EC(v97, a7 + v36[7], (uint64_t (*)(_QWORD))sub_23DCF9010);
  v39 = v36[8];
  v78 = a7;
  v40 = a7 + v39;
  v74 = v33;
  *(double *)v40 = v33;
  *(_BYTE *)(v40 + 8) = v34;
  v41 = v84;
  v42 = v86;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(a7 + v36[9], v96, v86);
  v102 = 0;
  v103 = 0xE000000000000000;
  v43 = sub_23DDC5048();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v28, 1, 1, v43);
  v44 = sub_23DDC503C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v25, 1, 1, v44);
  sub_23DDC515C();
  sub_23DDC51B0();
  sub_23DDC51EC();
  sub_23DDC5000();
  v45 = v77;
  sub_23DDC5054();
  v46 = v88;
  sub_23DDC50B4();
  v47 = v79;
  sub_23DDC50E4();
  v48 = v46;
  v49 = v41;
  (*(void (**)(char *, uint64_t))(v89 + 8))(v48, v90);
  v50 = *(void (**)(char *, uint64_t))(v81 + 8);
  v51 = v83;
  v50(v30, v83);
  sub_23DCF535C(&qword_254326658, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE2A0], MEMORY[0x24BDCE290]);
  sub_23DDC5120();
  v52 = v51;
  v53 = v96;
  v54 = v78;
  v50(v47, v52);
  v55 = v100;
  v56 = v101;
  swift_bridgeObjectRelease();
  v102 = v55;
  v103 = v56;
  sub_23DDC67A0();
  SleepingSampleDataType.localizedName.getter();
  sub_23DDC67A0();
  swift_bridgeObjectRelease();
  v57 = v103;
  v58 = (_QWORD *)(v54 + v36[10]);
  *v58 = v102;
  v58[1] = v57;
  v59 = SleepingSampleDataType.localizedName.getter();
  v60 = (uint64_t *)(v54 + v36[11]);
  *v60 = v59;
  v60[1] = v61;
  if ((v82 & 1) != 0
    || (v62 = v75,
        (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v75, *MEMORY[0x24BE40190], v42),
        sub_23DCF535C(&qword_2543266C8, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], MEMORY[0x24BE401E0]),
        v63 = sub_23DDC66C8(),
        v64 = *(void (**)(uint64_t, uint64_t))(v49 + 8),
        v64((uint64_t)v62, v42),
        (v63 & 1) != 0))
  {
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v66 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    v67 = sub_23DDC6770();
    v69 = v68;
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v53, v42);
  }
  else
  {
    sub_23DDBEECC(v74);
    v67 = v70;
    v69 = v71;
    v64(v53, v42);
  }
  sub_23DCF59A8(v97, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DCF59A8(v98, (uint64_t (*)(_QWORD))sub_23DCF9010);
  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v99, v92);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 8))(v45, v94);
  v73 = (uint64_t *)(v54 + v36[12]);
  *v73 = v67;
  v73[1] = v69;
  return result;
}

uint64_t sub_23DDA04A4()
{
  sub_23DDC6C50();
  sub_23DDC53A8();
  sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
  sub_23DDC6674();
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DDC6674();
  return sub_23DDC6C80();
}

uint64_t sub_23DDA055C()
{
  sub_23DDC53A8();
  sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
  sub_23DDC6674();
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  return sub_23DDC6674();
}

uint64_t sub_23DDA05FC()
{
  sub_23DDC6C50();
  sub_23DDC53A8();
  sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
  sub_23DDC6674();
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DDC6674();
  return sub_23DDC6C80();
}

uint64_t sub_23DDA06B0()
{
  char v0;
  uint64_t v2;
  uint64_t v3;

  sub_23DDC53A8();
  sub_23DCF535C(&qword_254326690, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE48]);
  sub_23DDC67C4();
  sub_23DDC67C4();
  if (v3 == v2)
    v0 = sub_23DDC5108();
  else
    v0 = 0;
  return v0 & 1;
}

uint64_t sub_23DDA0768()
{
  uint64_t v0;
  uint64_t v1;

  sub_23DDC53A8();
  sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
  sub_23DDC6674();
  v1 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DDC6674();
  sub_23DDC6674();
  sub_23DCF9010();
  sub_23DDC6674();
  sub_23DDC6674();
  sub_23DDC6674();
  if ((*(_BYTE *)(v0 + *(int *)(v1 + 32) + 8) & 1) != 0)
  {
    sub_23DDC6C5C();
  }
  else
  {
    sub_23DDC6C5C();
    sub_23DDC6C74();
  }
  sub_23DDC54C8();
  sub_23DCF535C(&qword_2543266C0, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], MEMORY[0x24BE401D8]);
  sub_23DDC6674();
  swift_bridgeObjectRetain();
  sub_23DDC6794();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23DDC6794();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23DDC6794();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DDA0990(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DDA09C4 + 4 * byte_23DDCB470[a1]))(0x6570795461746164, 0xE800000000000000);
}

uint64_t sub_23DDA09C4()
{
  return 1702125924;
}

unint64_t sub_23DDA09D4()
{
  return 0xD000000000000017;
}

unint64_t sub_23DDA0A78()
{
  return 0xD000000000000012;
}

uint64_t sub_23DDA0A94(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  char v16;

  v3 = v1;
  sub_23DDA2884(0, &qword_256CFF500, MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DDA27FC();
  sub_23DDC6C98();
  LOBYTE(v14) = 0;
  sub_23DDC53A8();
  sub_23DCF535C(&qword_256CFDCF8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE30]);
  sub_23DDC6BCC();
  if (!v2)
  {
    v10 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
    LOBYTE(v14) = 1;
    sub_23DDC512C();
    sub_23DCF535C(&qword_256CFDBF8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_23DDC6BCC();
    LOBYTE(v14) = 2;
    sub_23DCF9010();
    sub_23DD3ACDC(&qword_256CFDBF0, &qword_256CFDBF8, MEMORY[0x24BDCE920], MEMORY[0x24BEE1B98]);
    sub_23DDC6BCC();
    LOBYTE(v14) = 3;
    sub_23DDC6BCC();
    v11 = (uint64_t *)(v3 + *(int *)(v10 + 32));
    v12 = *v11;
    LOBYTE(v11) = *((_BYTE *)v11 + 8);
    v14 = v12;
    v15 = (char)v11;
    v16 = 4;
    sub_23DDA2840();
    sub_23DDC6BCC();
    LOBYTE(v14) = 5;
    sub_23DDC54C8();
    sub_23DCF535C(&qword_256CFDC20, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], MEMORY[0x24BE401D0]);
    sub_23DDC6BCC();
    LOBYTE(v14) = 6;
    sub_23DDC6BA8();
    LOBYTE(v14) = 7;
    sub_23DDC6BA8();
    LOBYTE(v14) = 8;
    sub_23DDC6BA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_23DDA0E0C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD v44[2];
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char v62;
  char v63;

  v46 = a2;
  v47 = sub_23DDC54C8();
  v49 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v48 = (char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF9010();
  v51 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v50 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v44 - v7;
  v56 = sub_23DDC512C();
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23DDC53A8();
  v55 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDA2884(0, &qword_256CFF518, MEMORY[0x24BEE33E0]);
  v52 = v14;
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v44 - v16;
  v58 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  MEMORY[0x24BDAC7A8](v58);
  v60 = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  v57 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  sub_23DDA27FC();
  v53 = v17;
  v20 = v59;
  sub_23DDC6C8C();
  if (v20)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
  v45 = v8;
  v59 = v15;
  LOBYTE(v61) = 0;
  sub_23DCF535C(&qword_256CFDD58, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE50]);
  sub_23DDC6B78();
  v21 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
  v22 = v60;
  v44[1] = v11;
  v21(v60, v13, v11);
  LOBYTE(v61) = 1;
  sub_23DCF535C(&qword_256CFDC38, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  v23 = v56;
  sub_23DDC6B78();
  v24 = (int *)v58;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(&v22[*(int *)(v58 + 20)], v10, v23);
  LOBYTE(v61) = 2;
  sub_23DD3ACDC(&qword_256CFDC30, &qword_256CFDC38, MEMORY[0x24BDCE960], MEMORY[0x24BEE1BC8]);
  v25 = (uint64_t)v45;
  sub_23DDC6B78();
  sub_23DD3AD5C(v25, (uint64_t)&v22[v24[6]]);
  LOBYTE(v61) = 3;
  v26 = (uint64_t)v50;
  sub_23DDC6B78();
  sub_23DD3AD5C(v26, (uint64_t)&v22[v24[7]]);
  v63 = 4;
  sub_23DDA28E0();
  sub_23DDC6B78();
  v27 = (uint64_t)v57;
  v28 = v62;
  v29 = &v22[v24[8]];
  *(_QWORD *)v29 = v61;
  v29[8] = v28;
  LOBYTE(v61) = 5;
  sub_23DCF535C(&qword_256CFDC50, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], MEMORY[0x24BE401E8]);
  v31 = v47;
  v30 = v48;
  sub_23DDC6B78();
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(&v22[v24[9]], v30, v31);
  LOBYTE(v61) = 6;
  v32 = sub_23DDC6B54();
  v33 = (uint64_t *)&v22[v24[10]];
  *v33 = v32;
  v33[1] = v34;
  LOBYTE(v61) = 7;
  v35 = sub_23DDC6B54();
  v36 = (uint64_t *)&v22[v24[11]];
  *v36 = v35;
  v36[1] = v37;
  LOBYTE(v61) = 8;
  v38 = sub_23DDC6B54();
  v40 = v39;
  (*(void (**)(char *, uint64_t))(v59 + 8))(v53, v52);
  v41 = (uint64_t)v60;
  v42 = (uint64_t *)&v60[v24[12]];
  *v42 = v38;
  v42[1] = v40;
  sub_23DCF58EC(v41, v46, type metadata accessor for IndividualOvernightMetricChartPoint);
  __swift_destroy_boxed_opaque_existential_0(v27);
  return sub_23DCF59A8(v41, type metadata accessor for IndividualOvernightMetricChartPoint);
}

uint64_t sub_23DDA15DC()
{
  unsigned __int8 *v0;

  return sub_23DDA0990(*v0);
}

uint64_t sub_23DDA15E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DDA2FD8(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DDA1608(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_23DDA1614()
{
  sub_23DDA27FC();
  return sub_23DDC6CEC();
}

uint64_t sub_23DDA163C()
{
  sub_23DDA27FC();
  return sub_23DDC6CF8();
}

uint64_t sub_23DDA1664()
{
  sub_23DDC6C50();
  sub_23DDA0768();
  return sub_23DDC6C80();
}

uint64_t sub_23DDA16A4()
{
  sub_23DDC6C50();
  sub_23DDA0768();
  return sub_23DDC6C80();
}

uint64_t sub_23DDA16DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DDA0E0C(a1, a2);
}

uint64_t sub_23DDA16F0(_QWORD *a1)
{
  return sub_23DDA0A94(a1);
}

uint64_t sub_23DDA1704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v2, v5);
  v6 = v2 + *(int *)(a1 + 20);
  v7 = a2 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint.ID(0) + 20);
  v8 = sub_23DDC512C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, v6, v8);
}

uint64_t sub_23DDA1784(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  char v32;
  double *v33;
  int v34;
  uint64_t v35;
  char v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  sub_23DCF9010();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v52 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v52 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v52 - v14;
  sub_23DDC53A8();
  sub_23DCF535C(&qword_254326690, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE48]);
  sub_23DDC67C4();
  sub_23DDC67C4();
  if (v57 != v56)
    goto LABEL_12;
  v16 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  if ((sub_23DDC5108() & 1) == 0)
    goto LABEL_12;
  v52 = (int *)v16;
  v53 = a1;
  v17 = *(int *)(v16 + 24);
  v18 = a1 + v17;
  v54 = a2;
  v19 = a2 + v17;
  sub_23DDC512C();
  v55 = sub_23DCF535C(&qword_256CFCC60, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  v20 = sub_23DDC66C8();
  sub_23DCF58EC(v18, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DCF58EC(v19, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DCF9010);
  if ((v20 & 1) == 0)
  {
    sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DCF9010);
    v35 = (uint64_t)v15;
LABEL_11:
    sub_23DCF59A8(v35, (uint64_t (*)(_QWORD))sub_23DCF9010);
    goto LABEL_12;
  }
  v21 = sub_23DDC66C8();
  sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))sub_23DCF9010);
  if ((v21 & 1) == 0)
    goto LABEL_12;
  v22 = v52;
  v23 = v52[7];
  v24 = v53 + v23;
  v25 = v54 + v23;
  v26 = sub_23DDC66C8();
  sub_23DCF58EC(v24, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DCF58EC(v25, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DCF9010);
  if ((v26 & 1) == 0)
  {
    sub_23DCF59A8((uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DCF9010);
    v35 = (uint64_t)v9;
    goto LABEL_11;
  }
  v27 = sub_23DDC66C8();
  sub_23DCF59A8((uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DCF9010);
  if ((v27 & 1) == 0)
    goto LABEL_12;
  v28 = v22[8];
  v30 = v53;
  v29 = v54;
  v31 = (double *)(v53 + v28);
  v32 = *(_BYTE *)(v53 + v28 + 8);
  v33 = (double *)(v54 + v28);
  v34 = *(unsigned __int8 *)(v54 + v28 + 8);
  if ((v32 & 1) != 0)
  {
    if (v34)
      goto LABEL_18;
LABEL_12:
    v36 = 0;
    return v36 & 1;
  }
  if (*v31 != *v33)
    LOBYTE(v34) = 1;
  if ((v34 & 1) != 0)
    goto LABEL_12;
LABEL_18:
  if ((sub_23DDC54BC() & 1) == 0)
    goto LABEL_12;
  v38 = v22[10];
  v39 = *(_QWORD *)(v30 + v38);
  v40 = *(_QWORD *)(v30 + v38 + 8);
  v41 = (_QWORD *)(v29 + v38);
  if (v39 == *v41 && v40 == v41[1] || (v42 = sub_23DDC6C08(), v36 = 0, (v42 & 1) != 0))
  {
    v43 = v22[11];
    v44 = *(_QWORD *)(v30 + v43);
    v45 = *(_QWORD *)(v30 + v43 + 8);
    v46 = (_QWORD *)(v29 + v43);
    if (v44 == *v46 && v45 == v46[1] || (v47 = sub_23DDC6C08(), v36 = 0, (v47 & 1) != 0))
    {
      v48 = v22[12];
      v49 = *(_QWORD *)(v30 + v48);
      v50 = *(_QWORD *)(v30 + v48 + 8);
      v51 = (_QWORD *)(v29 + v48);
      if (v49 == *v51 && v50 == v51[1])
        v36 = 1;
      else
        v36 = sub_23DDC6C08();
    }
  }
  return v36 & 1;
}

uint64_t type metadata accessor for IndividualOvernightMetricChartPoint(uint64_t a1)
{
  return sub_23DD0731C(a1, (uint64_t *)&unk_254326700);
}

char *sub_23DDA1B7C(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v40 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v40 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC53A8();
    (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = (char *)a2 + v8;
    v11 = sub_23DDC512C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = &a1[v13];
    v15 = (char *)a2 + v13;
    v12(&a1[v13], (char *)a2 + v13, v11);
    sub_23DCF9010();
    v17 = v16;
    v12(&v14[*(int *)(v16 + 36)], &v15[*(int *)(v16 + 36)], v11);
    v18 = a3[7];
    v19 = &a1[v18];
    v20 = (char *)a2 + v18;
    v12(&a1[v18], (char *)a2 + v18, v11);
    v12(&v19[*(int *)(v17 + 36)], &v20[*(int *)(v17 + 36)], v11);
    v21 = a3[8];
    v22 = a3[9];
    v23 = &a1[v21];
    v24 = (char *)a2 + v21;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    v25 = &a1[v22];
    v26 = (char *)a2 + v22;
    v27 = sub_23DDC54C8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = a3[11];
    v30 = &a1[v28];
    v31 = (uint64_t *)((char *)a2 + v28);
    v32 = v31[1];
    *(_QWORD *)v30 = *v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = &a1[v29];
    v34 = (uint64_t *)((char *)a2 + v29);
    v35 = v34[1];
    *(_QWORD *)v33 = *v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = a3[12];
    v37 = &a1[v36];
    v38 = (uint64_t *)((char *)a2 + v36);
    v39 = v38[1];
    *(_QWORD *)v37 = *v38;
    *((_QWORD *)v37 + 1) = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23DDA1D34(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v8 = a1 + a2[6];
  v7(v8, v6);
  sub_23DCF9010();
  v10 = v9;
  v7(v8 + *(int *)(v9 + 36), v6);
  v11 = a1 + a2[7];
  v7(v11, v6);
  v7(v11 + *(int *)(v10 + 36), v6);
  v12 = a1 + a2[9];
  v13 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DDA1E4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC512C();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v11(a1 + v12, a2 + v12, v10);
  sub_23DCF9010();
  v16 = v15;
  v11(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v10);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v11(a1 + v17, a2 + v17, v10);
  v11(v18 + *(int *)(v16 + 36), v19 + *(int *)(v16 + 36), v10);
  v20 = a3[8];
  v21 = a3[9];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = a1 + v21;
  v25 = a2 + v21;
  v26 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a3[11];
  v29 = (_QWORD *)(a1 + v27);
  v30 = (_QWORD *)(a2 + v27);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = (_QWORD *)(a1 + v28);
  v33 = (_QWORD *)(a2 + v28);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = a3[12];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)(a2 + v35);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23DDA1FD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC512C();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v11(a1 + v12, a2 + v12, v10);
  sub_23DCF9010();
  v16 = v15;
  v11(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v10);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v11(a1 + v17, a2 + v17, v10);
  v11(v18 + *(int *)(v16 + 36), v19 + *(int *)(v16 + 36), v10);
  v20 = a3[8];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = v23;
  v24 = a3[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  v28 = a3[10];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = a3[11];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = a3[12];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23DDA21A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC512C();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v11(a1 + v12, a2 + v12, v10);
  sub_23DCF9010();
  v16 = v15;
  v11(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v10);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v11(a1 + v17, a2 + v17, v10);
  v11(v18 + *(int *)(v16 + 36), v19 + *(int *)(v16 + 36), v10);
  v20 = a3[8];
  v21 = a3[9];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = a1 + v21;
  v25 = a2 + v21;
  v26 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_23DDA2300(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC512C();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v11(a1 + v12, a2 + v12, v10);
  sub_23DCF9010();
  v16 = v15;
  v11(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v10);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v11(a1 + v17, a2 + v17, v10);
  v11(v18 + *(int *)(v16 + 36), v19 + *(int *)(v16 + 36), v10);
  v20 = a3[8];
  v21 = a3[9];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = a1 + v21;
  v25 = a2 + v21;
  v26 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  v32 = a3[11];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (uint64_t *)(a2 + v32);
  v36 = *v34;
  v35 = v34[1];
  *v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  v37 = a3[12];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23DDA2494()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDA24A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v6 = sub_23DDC53A8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_23DDC512C();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  sub_23DCF9010();
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = sub_23DDC54C8();
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[9];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[10] + 8);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  return (v17 + 1);
}

uint64_t sub_23DDA2594()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDA25A0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_23DDC53A8();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_23DDC512C();
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  sub_23DCF9010();
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = sub_23DDC54C8();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[9];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[10] + 8) = (a2 - 1);
  return result;
}

void sub_23DDA2690()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_23DDC53A8();
  if (v0 <= 0x3F)
  {
    sub_23DDC512C();
    if (v1 <= 0x3F)
    {
      sub_23DCF9010();
      if (v2 <= 0x3F)
      {
        sub_23DDC54C8();
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_23DDA2764()
{
  return sub_23DCF535C(&qword_256CFCE10, type metadata accessor for IndividualOvernightMetricChartPoint.ID, (uint64_t)&unk_23DDCB548);
}

uint64_t type metadata accessor for IndividualOvernightMetricChartPoint.ID(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFF580);
}

uint64_t sub_23DDA27A4()
{
  return sub_23DCF535C(&qword_256CFF4F0, type metadata accessor for IndividualOvernightMetricChartPoint.ID, (uint64_t)&unk_23DDCB588);
}

uint64_t sub_23DDA27D0()
{
  return sub_23DCF535C(&qword_256CFF4F8, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t)&unk_23DDCB4E8);
}

unint64_t sub_23DDA27FC()
{
  unint64_t result;

  result = qword_256CFF508;
  if (!qword_256CFF508)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCB708, &type metadata for IndividualOvernightMetricChartPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFF508);
  }
  return result;
}

unint64_t sub_23DDA2840()
{
  unint64_t result;

  result = qword_256CFF510;
  if (!qword_256CFF510)
  {
    result = MEMORY[0x242643BD8](&protocol conformance descriptor for BaselineRelativeValue, &type metadata for BaselineRelativeValue);
    atomic_store(result, (unint64_t *)&qword_256CFF510);
  }
  return result;
}

void sub_23DDA2884(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DDA27FC();
    v7 = a3(a1, &type metadata for IndividualOvernightMetricChartPoint.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_23DDA28E0()
{
  unint64_t result;

  result = qword_256CFF520;
  if (!qword_256CFF520)
  {
    result = MEMORY[0x242643BD8](&protocol conformance descriptor for BaselineRelativeValue, &type metadata for BaselineRelativeValue);
    atomic_store(result, (unint64_t *)&qword_256CFF520);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for IndividualOvernightMetricChartPoint.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IndividualOvernightMetricChartPoint.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23DDA2A00 + 4 * byte_23DDCB47E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23DDA2A34 + 4 * byte_23DDCB479[v4]))();
}

uint64_t sub_23DDA2A34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DDA2A3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DDA2A44);
  return result;
}

uint64_t sub_23DDA2A50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DDA2A58);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23DDA2A5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DDA2A64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IndividualOvernightMetricChartPoint.CodingKeys()
{
  return &type metadata for IndividualOvernightMetricChartPoint.CodingKeys;
}

uint64_t *sub_23DDA2A80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC53A8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23DDC512C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_23DDA2B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_23DDC512C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_23DDA2B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_23DDA2C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_23DDA2C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_23DDA2CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_23DDA2D74()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDA2D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_23DDC53A8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_23DDC512C();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_23DDA2DF4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDA2E00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_23DDC53A8();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_23DDC512C();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_23DDA2E7C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23DDC53A8();
  if (v1 <= 0x3F)
  {
    result = sub_23DDC512C();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_23DDA2F04()
{
  unint64_t result;

  result = qword_256CFF5B8;
  if (!qword_256CFF5B8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCB6E0, &type metadata for IndividualOvernightMetricChartPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFF5B8);
  }
  return result;
}

unint64_t sub_23DDA2F4C()
{
  unint64_t result;

  result = qword_256CFF5C0;
  if (!qword_256CFF5C0)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCB650, &type metadata for IndividualOvernightMetricChartPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFF5C0);
  }
  return result;
}

unint64_t sub_23DDA2F94()
{
  unint64_t result;

  result = qword_256CFF5C8;
  if (!qword_256CFF5C8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCB678, &type metadata for IndividualOvernightMetricChartPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFF5C8);
  }
  return result;
}

uint64_t sub_23DDA2FD8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6570795461746164 && a2 == 0xE800000000000000;
  if (v2 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023DDCD0B0 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000023 && a2 == 0x800000023DDCE040 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6966697373616C63 && a2 == 0xEE006E6F69746163 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000023DDCE070 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x800000023DDCE090 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023DDCDC40)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_23DDC6C08();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_23DDA3364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];

  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990];
  sub_23DCFB328(0, &qword_254326768, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v17 - v8;
  sub_23DD4C634(a1, (uint64_t)v17 - v8, &qword_254326768, v6);
  v10 = sub_23DDC6854();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_23DCFEA1C((uint64_t)v9, &qword_254326768, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990]);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = sub_23DDC67F4();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_23DDC6848();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = v12;
    v17[3] = v14;
  }
  return swift_task_create();
}

uint64_t SleepingSampleViewModelProvider.DataFreshness.hash(into:)()
{
  return sub_23DDC6C5C();
}

BOOL static SleepingSampleViewModelProvider.DataFreshness.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepingSampleViewModelProvider.DataFreshness.hashValue.getter()
{
  sub_23DDC6C50();
  sub_23DDC6C5C();
  return sub_23DDC6C80();
}

uint64_t sub_23DDA359C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t result;
  _BYTE *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t KeyPath;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = (uint64_t)v0;
  v20[1] = *v0;
  v2 = sub_23DDC57A4();
  v21 = *(_QWORD *)(v2 - 8);
  v22 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v23 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23DDC5330();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FCF0];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v27 = v0;
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v9 = (char *)v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v9, v4);
  sub_23DCF535C(&qword_256CFDC70, v5, MEMORY[0x24BE3FD10]);
  LOBYTE(v9) = sub_23DDC66C8();
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    swift_getKeyPath();
    v26 = v1;
    sub_23DDC5210();
    result = swift_release();
    if (*(_QWORD *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryTask))
    {
      swift_getKeyPath();
      v26 = v1;
      sub_23DDC5210();
      swift_release();
      v11 = (_BYTE *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dataFreshness);
      swift_beginAccess();
      if (*v11 == 2)
      {
        v12 = v23;
        sub_23DDC578C();
        v13 = sub_23DDC5798();
        v14 = sub_23DDC68F0();
        if (os_log_type_enabled(v13, v14))
        {
          v15 = (uint8_t *)swift_slowAlloc();
          v16 = swift_slowAlloc();
          v25 = v16;
          *(_DWORD *)v15 = 136446210;
          v17 = sub_23DDC6D04();
          v24 = sub_23DD02158(v17, v18, &v25);
          sub_23DDC698C();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_23DCF2000, v13, v14, "[%{public}s] Indicating current view models are now stale for updated day range", v15, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x242643C80](v16, -1, -1);
          MEMORY[0x242643C80](v15, -1, -1);

          (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v22);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v22);
        }
        KeyPath = swift_getKeyPath();
        MEMORY[0x24BDAC7A8](KeyPath);
        v20[-2] = v1;
        LOBYTE(v20[-1]) = 1;
        v25 = v1;
        sub_23DDC5204();
        swift_release();
      }
      return sub_23DDA5A54();
    }
  }
  return result;
}

void (*sub_23DDA398C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t, uint64_t);

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_23DDC5330();
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  v3[14] = v7;
  v3[15] = v8;
  v9 = v1 + v8;
  swift_beginAccess();
  v10 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 16);
  v3[16] = v10;
  v10(v7, v9, v4);
  return sub_23DDA3A54;
}

void sub_23DDA3A54(uint64_t a1, char a2)
{
  void *v2;
  void (*v3)(void *, void *, uint64_t);
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void (*v10)(void *, uint64_t);
  void *v11;

  v2 = *(void **)a1;
  v3 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)a1 + 128);
  v4 = *(void **)(*(_QWORD *)a1 + 104);
  v5 = *(void **)(*(_QWORD *)a1 + 112);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v6 = *(void **)(*(_QWORD *)a1 + 96);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v9 = (void *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + *(_QWORD *)(*(_QWORD *)a1 + 120));
  if ((a2 & 1) != 0)
  {
    v3(*(void **)(*(_QWORD *)a1 + 104), v5, v8);
    v3(v6, v9, v8);
    swift_beginAccess();
    (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v4, v8);
    swift_endAccess();
    sub_23DDA359C();
    v10 = *(void (**)(void *, uint64_t))(v7 + 8);
    v10(v4, v8);
    v10(v6, v8);
    v11 = v5;
  }
  else
  {
    v3(*(void **)(*(_QWORD *)a1 + 104), v9, v8);
    swift_beginAccess();
    (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v5, v8);
    swift_endAccess();
    sub_23DDA359C();
    v10 = *(void (**)(void *, uint64_t))(v7 + 8);
    v10(v5, v8);
    v11 = v4;
  }
  v10(v11, v8);
  free(v5);
  free(v4);
  free(v6);
  free(v2);
}

uint64_t sub_23DDA3BAC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v4 = v3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  v5 = sub_23DDC5330();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23DDA3C70(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = sub_23DDC5330();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
  v9 = *a2;
  swift_getKeyPath();
  v12 = v9;
  v13 = v8;
  v14 = v9;
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5204();
  swift_release();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_23DDA3D7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v3 = v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  v4 = sub_23DDC5330();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SleepingSampleViewModelProvider()
{
  uint64_t result;

  result = qword_256CFF690;
  if (!qword_256CFF690)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DDA3E84(uint64_t a1)
{
  uint64_t v2;

  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5204();
  swift_release();
  v2 = sub_23DDC5330();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_23DDA3F44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _BYTE *v11;
  void (*v12)(_BYTE *, uint64_t, uint64_t, double);
  uint64_t v13;
  void (*v14)(_BYTE *, uint64_t);
  _BYTE v16[24];

  v4 = sub_23DDC5330();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = &v16[-v10];
  v12 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v5 + 16);
  v12(&v16[-v10], a2, v4, v9);
  v13 = a1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  ((void (*)(_BYTE *, uint64_t, uint64_t))v12)(v7, v13, v4);
  swift_beginAccess();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 24))(v13, v11, v4);
  swift_endAccess();
  sub_23DDA359C();
  v14 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v14(v11, v4);
  return ((uint64_t (*)(_BYTE *, uint64_t))v14)(v7, v4);
}

uint64_t sub_23DDA4078()
{
  uint64_t v0;

  return sub_23DDA3F44(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void (*sub_23DDA4090(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider___observationRegistrar;
  *v4 = v2;
  v4[6] = sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  sub_23DDC5228();
  swift_release();
  v4[7] = sub_23DDA398C(v4);
  return sub_23DDA4178;
}

void sub_23DDA4178(_QWORD *a1)
{
  sub_23DDA4580(a1);
}

uint64_t (*sub_23DDA4184())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_23DDA41C8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v4 = (_BYTE *)(v3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dataFreshness);
  result = swift_beginAccess();
  *a2 = *v4;
  return result;
}

uint64_t sub_23DDA4274()
{
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5204();
  return swift_release();
}

uint64_t sub_23DDA431C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dataFreshness);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t sub_23DDA43D0()
{
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5204();
  return swift_release();
}

uint64_t sub_23DDA4478()
{
  return sub_23DDAA764();
}

void (*sub_23DDA448C(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider___observationRegistrar;
  *v4 = v2;
  v4[6] = sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  sub_23DDC5228();
  swift_release();
  v4[7] = sub_23DDA4184();
  return sub_23DDA4574;
}

void sub_23DDA4574(_QWORD *a1)
{
  sub_23DDA4580(a1);
}

void sub_23DDA4580(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  *v1 = v1[4];
  swift_getKeyPath();
  sub_23DDC521C();
  swift_release();
  free(v1);
}

uint64_t sub_23DDA45F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v35)();
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  _QWORD v45[4];

  v2 = v1;
  v42 = a1;
  v3 = sub_23DDC5330();
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v41 = (char *)&v35 - v8;
  v37 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v37);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v35 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v35 - v15;
  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], v6);
  MEMORY[0x24BDAC7A8](v17);
  v38 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v35 - v20;
  v22 = sub_23DDA4C68();
  v24 = v23;
  v25 = type metadata accessor for OvernightMetricsViewModel(0);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48);
  v27 = v26(v24, 1, v25);
  v43 = v26;
  if (v27)
  {
    ((void (*)(_QWORD *, _QWORD))v22)(v45, 0);
    v28 = (uint64_t)v41;
    v29 = v42;
  }
  else
  {
    v35 = v22;
    v36 = v5;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider), *(_QWORD *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider + 24));
    sub_23DDC56E4();
    sub_23DD4C634((uint64_t)v21, (uint64_t)v16, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
    swift_storeEnumTagMultiPayload();
    v30 = v24 + *(int *)(v25 + 24);
    sub_23DCF58EC(v30, (uint64_t)v13, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    sub_23DD484B0((uint64_t)v16, v30);
    sub_23DCF58EC(v30, (uint64_t)v10, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    LOBYTE(v30) = sub_23DD47C7C((uint64_t)v10, (uint64_t)v13);
    sub_23DCF59A8((uint64_t)v10, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    if ((v30 & 1) == 0)
      sub_23DD3C28C();
    sub_23DCF59A8((uint64_t)v16, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    sub_23DCF59A8((uint64_t)v13, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    sub_23DCFEA1C((uint64_t)v21, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
    ((void (*)(_QWORD *, _QWORD))v35)(v45, 0);
    v28 = (uint64_t)v41;
    v29 = v42;
    v5 = v36;
  }
  swift_getKeyPath();
  v45[0] = v2;
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v31 = v2
      + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_queryResultOvernightMetricsModelWithFeatureStatusApplied;
  swift_beginAccess();
  sub_23DD4C634(v31, v28, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel);
  if (v43(v28, 1, v25) != 1)
    return sub_23DCFBB58(v28, v29, type metadata accessor for OvernightMetricsViewModel);
  sub_23DCFEA1C(v28, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel);
  swift_getKeyPath();
  v44 = v2;
  sub_23DDC5210();
  swift_release();
  v32 = v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v5, v32, v40);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider), *(_QWORD *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider + 24));
  v33 = (uint64_t)v38;
  sub_23DDC56E4();
  return OvernightMetricsViewModel.init(dayRange:chronologicalDaySummaries:featureStatus:)((uint64_t)v5, MEMORY[0x24BEE4AF8], v33, v29);
}

uint64_t sub_23DDA4A84@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v4 = v3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultOvernightMetricsModel;
  swift_beginAccess();
  return sub_23DD4C634(v4, a2, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel);
}

uint64_t sub_23DDA4B44(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  sub_23DCFB328(0, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v9[-v5];
  sub_23DD4C634(a1, (uint64_t)&v9[-v5], &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel);
  v7 = *a2;
  swift_getKeyPath();
  v10 = v7;
  v11 = v6;
  v12 = v7;
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5204();
  swift_release();
  return sub_23DCFEA1C((uint64_t)v6, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel);
}

uint64_t (*sub_23DDA4C68())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_23DDA4CB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v3 = v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultOvernightMetricsModel;
  swift_beginAccess();
  return sub_23DD4C634(v3, a1, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel);
}

uint64_t sub_23DDA4D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  sub_23DCFB328(0, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - v5;
  sub_23DD4C634(a2, (uint64_t)&v9 - v5, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel);
  v7 = a1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultOvernightMetricsModel;
  swift_beginAccess();
  sub_23DD2917C((uint64_t)v6, v7);
  return swift_endAccess();
}

_QWORD *sub_23DDA4E4C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  char *v14;
  uint64_t v15;
  _BYTE v17[8];
  _QWORD *v18;

  v1 = v0;
  v2 = sub_23DDC5330();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23DCFB328(0, &qword_256CFF600, (uint64_t (*)(uint64_t))MEMORY[0x24BE403D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v17[-v7];
  swift_getKeyPath();
  v18 = v0;
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  swift_retain();
  v9 = swift_bridgeObjectRetain();
  v10 = (_QWORD *)sub_23DDA98AC(v9, (uint64_t)v0);
  swift_release();
  swift_bridgeObjectRelease();
  if (v10[2])
  {
    v18 = v10;
    swift_bridgeObjectRetain();
    sub_23DDA7ED0(&v18);
    swift_bridgeObjectRelease();
    return v18;
  }
  else
  {
    swift_bridgeObjectRelease();
    v12 = sub_23DDC5570();
    v13 = (uint64_t (*)(uint64_t))MEMORY[0x24BE403D8];
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 1, 1, v12);
    swift_getKeyPath();
    v18 = v0;
    sub_23DDC5210();
    swift_release();
    v14 = (char *)v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
    swift_beginAccess();
    (*(void (**)(_BYTE *, char *, uint64_t))(v3 + 16))(v5, v14, v2);
    v15 = sub_23DDC536C();
    MEMORY[0x24BDAC7A8](v15);
    *(_QWORD *)&v17[-32] = v8;
    *(_QWORD *)&v17[-24] = v1;
    *(_QWORD *)&v17[-16] = v5;
    v11 = sub_23DD8FA3C((void (*)(uint64_t))sub_23DDA9DDC, (uint64_t)&v17[-48], v15);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    sub_23DCFEA1C((uint64_t)v8, &qword_256CFF600, v13);
  }
  return (_QWORD *)v11;
}

uint64_t sub_23DDA50F4()
{
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DDA5184@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  *a2 = *(_QWORD *)(v3
                  + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultSleepingSampleViewModels);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DDA521C()
{
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  swift_bridgeObjectRetain();
  sub_23DDC5204();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_23DDA52D4(uint64_t a1, uint64_t a2)
{
  void (*v3)(void);

  *(_QWORD *)(a1
            + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultSleepingSampleViewModels) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v3 = *(void (**)(void))(a1
                        + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__unitTest_updatedViewModels);
  swift_retain();
  sub_23DDA4E4C();
  v3();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_23DDA53B8()
{
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  return swift_retain();
}

uint64_t sub_23DDA5448@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  *a2 = *(_QWORD *)(v3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryTask);
  return swift_retain();
}

uint64_t sub_23DDA54E0()
{
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  swift_retain();
  sub_23DDC5204();
  swift_release();
  return swift_release();
}

uint64_t sub_23DDA5598()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__unitTest_updatedViewModels);
  swift_retain();
  return v1;
}

uint64_t sub_23DDA5638@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__unitTest_updatedViewModels);
  v4 = *(_QWORD *)(v3
                 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__unitTest_updatedViewModels
                 + 8);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  *a2 = sub_23DDAA490;
  a2[1] = v6;
  return swift_retain();
}

uint64_t sub_23DDA56F8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  swift_retain();
  sub_23DDC5204();
  swift_release();
  return swift_release();
}

uint64_t SleepingSampleViewModelProvider.__allocating_init(healthStore:dayRange:debugIdentifier:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v8 = sub_23DDC5330();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SleepingSampleDataTypePreferredUnitProvider();
  v12 = a1;
  v13 = sub_23DD4D678((uint64_t)v12, 0, 0);
  sub_23DDC569C();
  sub_23DDA9DFC();
  v14 = v12;
  sub_23DDC6938();
  v15 = sub_23DDC5690();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v14;
  v16[3] = a3;
  v16[4] = a4;
  type metadata accessor for SleepingSampleViewModelProvider();
  v17 = swift_allocObject();
  v18 = sub_23DDA96E8((uint64_t)v11, (uint64_t)v13, v15, (uint64_t)sub_23DDA9E64, (uint64_t)v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  return v18;
}

uint64_t sub_23DDA5948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  _QWORD v15[2];

  v15[1] = a4;
  v5 = sub_23DDC5330();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23DDC5660();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, v5, v11);
  sub_23DDC5654();
  sub_23DDC563C();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_23DDA5A54()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t KeyPath;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56[4];

  v1 = (uint64_t)v0;
  v49 = *v0;
  sub_23DCFB328(0, &qword_254326768, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v46 = (char *)&v41 - v3;
  sub_23DDAA610(0, &qword_256CFF610, MEMORY[0x24BEE6D28]);
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v44 = v5;
  v45 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v54 = (char *)&v41 - v7;
  v8 = sub_23DDC5330();
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v51 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DDC57A4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v14 = (char *)v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider___observationRegistrar;
  v56[0] = (uint64_t)v0;
  v50 = sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5210();
  swift_release();
  if (*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryTask))
  {
    swift_retain();
    sub_23DDC6860();
    swift_release();
  }
  sub_23DDC578C();
  v15 = sub_23DDC5798();
  v16 = sub_23DDC68F0();
  if (os_log_type_enabled(v15, v16))
  {
    v43 = v10;
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v56[0] = v18;
    *(_DWORD *)v17 = 136446210;
    v19 = sub_23DDC6D04();
    v42 = v11;
    v55 = sub_23DD02158(v19, v20, v56);
    sub_23DDC698C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23DCF2000, v15, v16, "[%{public}s] Creating new detached query task", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v18, -1, -1);
    MEMORY[0x242643C80](v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v43);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  swift_getKeyPath();
  v56[0] = v1;
  sub_23DDC5210();
  swift_release();
  v21 = v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  v22 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v21, v53);
  v23 = v54;
  (*(void (**)(char *))(v1
                                 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_makeDaySummaryCollectionSequence))(v22);
  v41 = v14;
  v24 = (uint64_t)v46;
  sub_23DDC683C();
  v25 = sub_23DDC6854();
  v42 = *(_QWORD *)(*(_QWORD *)(v25 - 8) + 56);
  v43 = v25;
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v42)(v24, 0, 1, v25);
  v26 = swift_allocObject();
  swift_weakInit();
  v28 = v47;
  v27 = v48;
  v29 = v45;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v45, v23, v48);
  v30 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  v31 = (v44 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v32 + v30, v29, v27);
  *(_QWORD *)(v32 + v31) = v26;
  *(_QWORD *)(v32 + ((v31 + 15) & 0xFFFFFFFFFFFFFFF8)) = v49;
  v33 = sub_23DDA3364(v24, (uint64_t)&unk_256CFF630, v32);
  v34 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990];
  sub_23DCFEA1C(v24, &qword_254326768, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990]);
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  *(&v41 - 2) = (char *)v1;
  *(&v41 - 1) = (char *)v33;
  v55 = v1;
  sub_23DDC5204();
  swift_release();
  swift_release();
  sub_23DDC683C();
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v42)(v24, 0, 1, v43);
  v36 = (_QWORD *)swift_allocObject();
  v36[2] = 0;
  v36[3] = 0;
  v36[4] = v1;
  swift_retain();
  sub_23DDA3364(v24, (uint64_t)&unk_256CFF640, (uint64_t)v36);
  swift_release();
  sub_23DCFEA1C(v24, &qword_254326768, v34);
  v37 = (_QWORD *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider);
  v38 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider + 24);
  v39 = v37[4];
  __swift_project_boxed_opaque_existential_1(v37, v38);
  (*(void (**)(uint64_t, uint64_t))(v39 + 24))(v38, v39);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v54, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v51, v53);
}

uint64_t sub_23DDA6060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v6[12] = a5;
  v6[13] = a6;
  v6[11] = a4;
  v7 = sub_23DDC5570();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BE403D8];
  v6[14] = v7;
  v6[15] = *(_QWORD *)(v7 - 8);
  v6[16] = swift_task_alloc();
  sub_23DCFB328(0, &qword_256CFF600, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v6[17] = swift_task_alloc();
  sub_23DDAA610(0, &qword_256CFF8F8, MEMORY[0x24BEE6D08]);
  v6[18] = v9;
  v6[19] = *(_QWORD *)(v9 - 8);
  v6[20] = swift_task_alloc();
  v10 = sub_23DDC57A4();
  v6[21] = v10;
  v6[22] = *(_QWORD *)(v10 - 8);
  v6[23] = swift_task_alloc();
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  v6[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23DDA6188()
{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  sub_23DDC578C();
  v1 = sub_23DDC5798();
  v2 = sub_23DDC68F0();
  if (os_log_type_enabled(v1, v2))
  {
    v15 = v0[26];
    v4 = v0[21];
    v3 = v0[22];
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v16 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_23DDC6D04();
    v0[10] = sub_23DD02158(v7, v8, &v16);
    sub_23DDC698C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23DCF2000, v1, v2, "[%{public}s] Starting query observation loop", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v6, -1, -1);
    MEMORY[0x242643C80](v5, -1, -1);

    v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v9(v15, v4);
  }
  else
  {
    v10 = v0[26];
    v11 = v0[21];
    v12 = v0[22];

    v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  v0[27] = v9;
  sub_23DDAA610(0, &qword_256CFF610, MEMORY[0x24BEE6D28]);
  sub_23DDC686C();
  swift_beginAccess();
  v13 = (_QWORD *)swift_task_alloc();
  v0[28] = v13;
  *v13 = v0;
  v13[1] = sub_23DDA6390;
  return sub_23DDC6878();
}

uint64_t sub_23DDA6390()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    *(_QWORD *)(v2 + 232) = *(_QWORD *)(v2 + 216);
  return swift_task_switch();
}

uint64_t sub_23DDA63F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v26)(uint64_t, uint64_t);
  uint64_t Strong;
  _QWORD *v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    sub_23DDC578C();
    v4 = sub_23DDC5798();
    v5 = sub_23DDC68F0();
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
    v8 = *(_QWORD *)(v0 + 192);
    v9 = *(_QWORD *)(v0 + 168);
    if (v6)
    {
      v29 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v30 = v11;
      *(_DWORD *)v10 = 136446210;
      v12 = sub_23DDC6D04();
      *(_QWORD *)(v0 + 48) = sub_23DD02158(v12, v13, &v30);
      sub_23DDC698C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DCF2000, v4, v5, "[%{public}s] Query observation loop ended", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v11, -1, -1);
      MEMORY[0x242643C80](v10, -1, -1);

      v29(v8, v9);
    }
    else
    {

      v7(v8, v9);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 128), v1, v2);
    sub_23DDC578C();
    v14 = sub_23DDC5798();
    v15 = sub_23DDC68F0();
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(_QWORD *)(v0 + 200);
    v18 = *(_QWORD *)(v0 + 168);
    if (v16)
    {
      v19 = (_QWORD *)(v0 + 216);
      v20 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
      v21 = swift_slowAlloc();
      v22 = swift_slowAlloc();
      v30 = v22;
      *(_DWORD *)v21 = 136446210;
      v23 = sub_23DDC6D04();
      *(_QWORD *)(v21 + 4) = sub_23DD02158(v23, v24, &v30);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DCF2000, v14, v15, "[%{public}s] Received day summaries", (uint8_t *)v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v22, -1, -1);
      MEMORY[0x242643C80](v21, -1, -1);

      v20(v17, v18);
    }
    else
    {
      v19 = (_QWORD *)(v0 + 232);
      v26 = *(void (**)(uint64_t, uint64_t))(v0 + 232);

      v26(v17, v18);
    }
    *(_QWORD *)(v0 + 240) = *v19;
    Strong = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 248) = Strong;
    if (Strong)
    {
      sub_23DDC6830();
      *(_QWORD *)(v0 + 256) = sub_23DDC6824();
      sub_23DDC67F4();
      return swift_task_switch();
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
      v28 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 264) = v28;
      *v28 = v0;
      v28[1] = sub_23DDA68DC;
      return sub_23DDC6878();
    }
  }
}

uint64_t sub_23DDA6818()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_release();
  sub_23DDA6D74(v1);
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23DDA6868()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[33] = v1;
  *v1 = v0;
  v1[1] = sub_23DDA68DC;
  return sub_23DDC6878();
}

uint64_t sub_23DDA68DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    *(_QWORD *)(v2 + 232) = *(_QWORD *)(v2 + 240);
  return swift_task_switch();
}

uint64_t sub_23DDA6944()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
  v1 = *(void **)(v0 + 40);
  sub_23DDC578C();
  v2 = v1;
  v3 = v1;
  v4 = sub_23DDC5798();
  v5 = sub_23DDC68D8();
  if (os_log_type_enabled(v4, v5))
  {
    v28 = *(_QWORD *)(v0 + 184);
    v29 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
    v6 = *(_QWORD *)(v0 + 168);
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v31 = v8;
    *(_DWORD *)v7 = 136446466;
    v9 = sub_23DDC6D04();
    *(_QWORD *)(v0 + 56) = sub_23DD02158(v9, v10, &v31);
    sub_23DDC698C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 64) = v1;
    v11 = v1;
    sub_23DD02790();
    v12 = sub_23DDC6788();
    *(_QWORD *)(v0 + 72) = sub_23DD02158(v12, v13, &v31);
    sub_23DDC698C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_23DCF2000, v4, v5, "[%{public}s] Received error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v8, -1, -1);
    MEMORY[0x242643C80](v7, -1, -1);

    v29(v28, v6);
  }
  else
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
    v15 = *(_QWORD *)(v0 + 184);
    v16 = *(_QWORD *)(v0 + 168);

    v14(v15, v16);
  }
  sub_23DDC578C();
  v17 = sub_23DDC5798();
  v18 = sub_23DDC68F0();
  v19 = os_log_type_enabled(v17, v18);
  v20 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 168);
  if (v19)
  {
    v30 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v31 = v24;
    *(_DWORD *)v23 = 136446210;
    v25 = sub_23DDC6D04();
    *(_QWORD *)(v0 + 48) = sub_23DD02158(v25, v26, &v31);
    sub_23DDC698C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23DCF2000, v17, v18, "[%{public}s] Query observation loop ended", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v24, -1, -1);
    MEMORY[0x242643C80](v23, -1, -1);

    v30(v21, v22);
  }
  else
  {

    v20(v21, v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DDA6D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_23DDA6D18()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider), *(_QWORD *)(*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider+ 24));
  sub_23DDC56D8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DDA6D74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_256CFF600, (uint64_t (*)(uint64_t))MEMORY[0x24BE403D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v48 = (char *)&v41 - v6;
  sub_23DCFB328(0, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel, v4);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v41 - v8;
  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], v4);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v41 - v11;
  v13 = type metadata accessor for OvernightMetricsViewModel(0);
  v44 = *(_QWORD *)(v13 - 8);
  v45 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23DDC5330();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v41 - v21;
  v49 = a1;
  sub_23DDC5540();
  swift_getKeyPath();
  v23 = v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider___observationRegistrar;
  v52 = v2;
  v50 = sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  v47 = v23;
  sub_23DDC5210();
  swift_release();
  v24 = v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  swift_beginAccess();
  v46 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v46(v19, v24, v16);
  LOBYTE(v23) = MEMORY[0x242641D54](v22, v19);
  v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v19, v16);
  result = ((uint64_t (*)(char *, uint64_t))v25)(v22, v16);
  if ((v23 & 1) != 0)
  {
    sub_23DDC5540();
    v27 = sub_23DDC554C();
    v41 = v24;
    v42 = v25;
    v28 = (uint64_t)v15;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider), *(_QWORD *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider + 24));
    sub_23DDC56E4();
    OvernightMetricsViewModel.init(dayRange:chronologicalDaySummaries:featureStatus:)((uint64_t)v22, v27, (uint64_t)v12, (uint64_t)v15);
    v43 = v15;
    sub_23DCF58EC((uint64_t)v15, (uint64_t)v9, type metadata accessor for OvernightMetricsViewModel);
    v29 = v45;
    v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56);
    v30(v9, 0, 1, v45);
    v31 = v2
        + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_queryResultOvernightMetricsModelWithFeatureStatusApplied;
    swift_beginAccess();
    sub_23DD2917C((uint64_t)v9, v31);
    swift_endAccess();
    sub_23DCF58EC(v28, (uint64_t)v9, type metadata accessor for OvernightMetricsViewModel);
    v30(v9, 0, 1, v29);
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    *(&v41 - 2) = v2;
    *(&v41 - 1) = (uint64_t)v9;
    v51 = v2;
    v45 = MEMORY[0x24BEE4AE0] + 8;
    sub_23DDC5204();
    swift_release();
    sub_23DCFEA1C((uint64_t)v9, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel);
    v33 = sub_23DDC5570();
    v34 = (uint64_t (*)(uint64_t))MEMORY[0x24BE403D8];
    v35 = *(_QWORD *)(v33 - 8);
    v36 = (uint64_t)v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v48, v49, v33);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v36, 0, 1, v33);
    swift_getKeyPath();
    v51 = v2;
    sub_23DDC5210();
    swift_release();
    v46(v22, v41, v16);
    v37 = sub_23DDC536C();
    MEMORY[0x24BDAC7A8](v37);
    *(&v41 - 4) = v36;
    *(&v41 - 3) = v2;
    *(&v41 - 2) = (uint64_t)v22;
    v38 = sub_23DD8FA3C((void (*)(uint64_t))sub_23DDAA7C0, (uint64_t)(&v41 - 6), v37);
    swift_bridgeObjectRelease();
    v42(v22, v16);
    sub_23DCFEA1C(v36, &qword_256CFF600, v34);
    v39 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v39);
    *(&v41 - 2) = v2;
    *(&v41 - 1) = v38;
    v51 = v2;
    sub_23DDC5204();
    swift_bridgeObjectRelease();
    swift_release();
    v40 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v40);
    *(&v41 - 2) = v2;
    *((_BYTE *)&v41 - 8) = 2;
    v51 = v2;
    sub_23DDC5204();
    swift_release();
    return sub_23DCF59A8((uint64_t)v43, type metadata accessor for OvernightMetricsViewModel);
  }
  return result;
}

uint64_t sub_23DDA7350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;

  v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BE403D8];
  sub_23DCFB328(0, &qword_256CFF600, (uint64_t (*)(uint64_t))MEMORY[0x24BE403D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v27 - v12;
  sub_23DD4C634(a2, (uint64_t)&v27 - v12, &qword_256CFF600, v10);
  v14 = sub_23DDC5570();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_23DCFEA1C((uint64_t)v13, &qword_256CFF600, (uint64_t (*)(uint64_t))MEMORY[0x24BE403D8]);
    v16 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v17 = sub_23DDC554C();
    v18 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    MEMORY[0x24BDAC7A8](v18);
    *(&v27 - 2) = a1;
    v16 = sub_23DD8FBB0((void (*)(uint64_t))sub_23DDAA6D8, (uint64_t)(&v27 - 4), v17);
    swift_bridgeObjectRelease();
  }
  v19 = *(_QWORD *)(a3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider + 24);
  v20 = *(_QWORD *)(a3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a3 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider), v19);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, v19, v20);
  v22 = (int *)type metadata accessor for SleepingSampleViewModel(0);
  sub_23DDA7570(a1, a5 + v22[8]);
  v23 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a5, a1, v23);
  v24 = a5 + v22[5];
  v25 = sub_23DDC5330();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v24, a4, v25);
  *(_QWORD *)(a5 + v22[6]) = v16;
  *(_QWORD *)(a5 + v22[7]) = v21;
  return result;
}

uint64_t sub_23DDA7570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a2;
  v30 = a1;
  v3 = sub_23DDC55DC();
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DDC53A8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v27 - v11;
  v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v27 - v15;
  sub_23DCFB328(0, &qword_2543266D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE404A8], v13);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v27 - v18;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider), *(_QWORD *)(v2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider + 24));
  sub_23DDC56E4();
  v20 = sub_23DDC55A0();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v16, 1, v20) == 1)
  {
    sub_23DCFEA1C((uint64_t)v16, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
    v22 = sub_23DDC55F4();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v19, 1, 1, v22);
  }
  else
  {
    sub_23DDC5594();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v20);
  }
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v23(v12, v30, v6);
  v24 = sub_23DDC55F4();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v19, 1, v24) == 1)
  {
    v23(v9, (uint64_t)v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v5, *MEMORY[0x24BE40490], v28);
    sub_23DDC55B8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    return sub_23DCFEA1C((uint64_t)v19, &qword_2543266D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE404A8]);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v29, v19, v24);
  }
}

uint64_t SleepingSampleViewModelProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  v2 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_0(v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider);
  __swift_destroy_boxed_opaque_existential_0(v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider);
  swift_release();
  sub_23DCFEA1C(v0+ OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_queryResultOvernightMetricsModelWithFeatureStatusApplied, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel);
  sub_23DCFEA1C(v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultOvernightMetricsModel, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v3 = v0 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider___observationRegistrar;
  v4 = sub_23DDC5240();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t SleepingSampleViewModelProvider.__deallocating_deinit()
{
  SleepingSampleViewModelProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_23DDA7994(uint64_t a1)
{
  uint64_t v2;

  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  sub_23DDC5204();
  swift_release();
  v2 = sub_23DDC5330();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

void (*sub_23DDA7A54(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_23DDA4090(v2);
  return sub_23DD63868;
}

uint64_t static SleepingSampleViewModelProvider.fake(healthStore:dayRange:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_23DDC5330();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SleepingSampleDataTypePreferredUnitProvider();
  v8 = a1;
  v9 = sub_23DD4D678((uint64_t)v8, 0, 0);
  sub_23DDC569C();
  sub_23DDA9DFC();
  v10 = v8;
  sub_23DDC6938();
  v11 = sub_23DDC5690();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  type metadata accessor for SleepingSampleViewModelProvider();
  v12 = swift_allocObject();
  return sub_23DDA96E8((uint64_t)v7, (uint64_t)v9, v11, (uint64_t)sub_23DDA7BC4, 0, v12);
}

uint64_t sub_23DDA7BC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = sub_23DDC5330();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  sub_23DDAA4B4();
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 20) = 0;
  *(_BYTE *)(v5 + 16) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_23DDC5570();
  return sub_23DDC6884();
}

uint64_t sub_23DDA7CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23DDA7CE4()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v2 = *(os_unfair_lock_s **)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(swift_task_alloc() + 16) = v1;
  v4 = v2 + 4;
  v2 += 5;
  os_unfair_lock_lock(v2);
  sub_23DDA7D88(v4, v3);
  os_unfair_lock_unlock(v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DDA7D88@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_23DDC51E0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD020E0();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*a1 & 1) != 0)
  {
    v11 = sub_23DDC5570();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 1, 1, v11);
  }
  else
  {
    *a1 = 1;
    sub_23DDC52F4();
    sub_23DDC530C();
    sub_23DDC5564();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_23DCF59A8((uint64_t)v10, (uint64_t (*)(_QWORD))sub_23DD020E0);
    v13 = sub_23DDC5570();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 0, 1, v13);
  }
}

void sub_23DDA7ED0(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = *(_QWORD *)(type metadata accessor for SleepingSampleViewModel(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_23DDA96D4(v3);
  v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_23DDA7F50(v5);
  *a1 = v3;
}

void sub_23DDA7F50(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  char v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t);
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v2 = v1;
  v148 = sub_23DDC5390();
  v141 = *(_QWORD *)(v148 - 8);
  MEMORY[0x24BDAC7A8](v148);
  v147 = (char *)&v131 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v146 = (char *)&v131 - v6;
  v7 = type metadata accessor for SleepingSampleViewModel(0);
  v139 = *(_QWORD *)(v7 - 8);
  v140 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v136 = (uint64_t)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v152 = (uint64_t)&v131 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v145 = (uint64_t)&v131 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v150 = (uint64_t)&v131 - v14;
  v15 = a1[1];
  v16 = sub_23DDC6BD8();
  if (v16 >= v15)
  {
    if (v15 < 0)
      goto LABEL_137;
    if (v15)
      sub_23DDA8A48(0, v15, 1, a1);
    return;
  }
  if (v15 >= 0)
    v17 = v15;
  else
    v17 = v15 + 1;
  if (v15 < -1)
    goto LABEL_145;
  v132 = v16;
  if (v15 < 2)
  {
    v21 = (char *)MEMORY[0x24BEE4AF8];
    v138 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80));
    v131 = MEMORY[0x24BEE4AF8];
    if (v15 != 1)
    {
      v23 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_103:
      if (v23 >= 2)
      {
        v125 = *a1;
        do
        {
          v126 = v23 - 2;
          if (v23 < 2)
            goto LABEL_132;
          if (!v125)
            goto LABEL_144;
          v127 = *(_QWORD *)&v21[16 * v126 + 32];
          v128 = *(_QWORD *)&v21[16 * v23 + 24];
          sub_23DDA8D30(v125 + *(_QWORD *)(v139 + 72) * v127, v125 + *(_QWORD *)(v139 + 72) * *(_QWORD *)&v21[16 * v23 + 16], v125 + *(_QWORD *)(v139 + 72) * v128, v138);
          if (v2)
            break;
          if (v128 < v127)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v21 = sub_23DDA9670((uint64_t)v21);
          if (v126 >= *((_QWORD *)v21 + 2))
            goto LABEL_134;
          v129 = &v21[16 * v126 + 32];
          *(_QWORD *)v129 = v127;
          *((_QWORD *)v129 + 1) = v128;
          v130 = *((_QWORD *)v21 + 2);
          if (v23 > v130)
            goto LABEL_135;
          memmove(&v21[16 * v23 + 16], &v21[16 * v23 + 32], 16 * (v130 - v23));
          *((_QWORD *)v21 + 2) = v130 - 1;
          v23 = v130 - 1;
        }
        while (v130 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v131 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v18 = v17 >> 1;
    v19 = sub_23DDC67DC();
    *(_QWORD *)(v19 + 16) = v18;
    v20 = *(unsigned __int8 *)(v139 + 80);
    v131 = v19;
    v138 = v19 + ((v20 + 32) & ~v20);
  }
  v22 = 0;
  v21 = (char *)MEMORY[0x24BEE4AF8];
  v149 = a1;
  while (1)
  {
    v24 = v22;
    v25 = v22 + 1;
    if (v22 + 1 >= v15)
    {
      v35 = v22 + 1;
    }
    else
    {
      v26 = *a1;
      v134 = v21;
      v135 = v26;
      v27 = *(_QWORD *)(v139 + 72);
      v137 = v22;
      sub_23DCF58EC(v26 + v27 * v25, v150, type metadata accessor for SleepingSampleViewModel);
      v28 = v26 + v27 * v137;
      v29 = v145;
      sub_23DCF58EC(v28, v145, type metadata accessor for SleepingSampleViewModel);
      v153 = v15;
      v30 = v146;
      sub_23DDC539C();
      v31 = v147;
      sub_23DDC539C();
      LODWORD(v151) = sub_23DDC5384();
      v32 = *(void (**)(char *, uint64_t))(v141 + 8);
      v33 = v148;
      v32(v31, v148);
      v34 = v30;
      v15 = v153;
      v144 = v32;
      v32(v34, v33);
      sub_23DCF59A8(v29, type metadata accessor for SleepingSampleViewModel);
      v24 = v137;
      sub_23DCF59A8(v150, type metadata accessor for SleepingSampleViewModel);
      v35 = v24 + 2;
      v154 = v27;
      if (v24 + 2 < v15)
      {
        v133 = v2;
        v36 = v27 * v25;
        v37 = v135;
        v142 = v27 * v35;
        v143 = v36;
        while (1)
        {
          v38 = v35;
          v39 = v150;
          sub_23DCF58EC(v37 + v142, v150, type metadata accessor for SleepingSampleViewModel);
          v40 = v145;
          sub_23DCF58EC(v37 + v143, v145, type metadata accessor for SleepingSampleViewModel);
          v41 = v146;
          sub_23DDC539C();
          v42 = v147;
          sub_23DDC539C();
          v43 = sub_23DDC5384();
          v44 = v42;
          v45 = v148;
          v46 = v144;
          v144(v44, v148);
          v46(v41, v45);
          sub_23DCF59A8(v40, type metadata accessor for SleepingSampleViewModel);
          sub_23DCF59A8(v39, type metadata accessor for SleepingSampleViewModel);
          if (((v151 ^ v43) & 1) != 0)
            break;
          v35 = v38 + 1;
          v37 += v154;
          v15 = v153;
          if (v153 == v38 + 1)
          {
            v35 = v153;
            v2 = v133;
            v24 = v137;
            goto LABEL_23;
          }
        }
        v2 = v133;
        v35 = v38;
        v24 = v137;
        v15 = v153;
      }
LABEL_23:
      v21 = v134;
      if ((v151 & 1) != 0)
      {
        if (v35 < v24)
          goto LABEL_138;
        if (v24 < v35)
        {
          v133 = v2;
          v47 = 0;
          v48 = v154;
          v49 = v154 * (v35 - 1);
          v50 = v35 * v154;
          v51 = v24;
          v52 = v24 * v154;
          do
          {
            if (v51 != v35 + v47 - 1)
            {
              v53 = v135;
              if (!v135)
                goto LABEL_143;
              v54 = v135 + v52;
              sub_23DCFBB58(v135 + v52, v136, type metadata accessor for SleepingSampleViewModel);
              if (v52 < v49 || v54 >= v53 + v50)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v52 != v49)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              sub_23DCFBB58(v136, v53 + v49, type metadata accessor for SleepingSampleViewModel);
              v48 = v154;
            }
            ++v51;
            --v47;
            v49 -= v48;
            v50 -= v48;
            v52 += v48;
          }
          while (v51 < v35 + v47);
          v2 = v133;
          v21 = v134;
          a1 = v149;
          v24 = v137;
          v15 = v153;
        }
      }
    }
    if (v35 < v15)
    {
      if (__OFSUB__(v35, v24))
        goto LABEL_136;
      if (v35 - v24 < v132)
        break;
    }
LABEL_55:
    if (v35 < v24)
      goto LABEL_131;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v151 = v35;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v21 = sub_23DDA92F0(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
    v75 = *((_QWORD *)v21 + 2);
    v74 = *((_QWORD *)v21 + 3);
    v23 = v75 + 1;
    if (v75 >= v74 >> 1)
      v21 = sub_23DDA92F0((char *)(v74 > 1), v75 + 1, 1, v21);
    *((_QWORD *)v21 + 2) = v23;
    v76 = v21 + 32;
    v77 = &v21[16 * v75 + 32];
    v78 = v151;
    *(_QWORD *)v77 = v24;
    *((_QWORD *)v77 + 1) = v78;
    if (v75)
    {
      while (1)
      {
        v79 = v23 - 1;
        if (v23 >= 4)
        {
          v84 = &v76[16 * v23];
          v85 = *((_QWORD *)v84 - 8);
          v86 = *((_QWORD *)v84 - 7);
          v90 = __OFSUB__(v86, v85);
          v87 = v86 - v85;
          if (v90)
            goto LABEL_120;
          v89 = *((_QWORD *)v84 - 6);
          v88 = *((_QWORD *)v84 - 5);
          v90 = __OFSUB__(v88, v89);
          v82 = v88 - v89;
          v83 = v90;
          if (v90)
            goto LABEL_121;
          v91 = v23 - 2;
          v92 = &v76[16 * v23 - 32];
          v94 = *(_QWORD *)v92;
          v93 = *((_QWORD *)v92 + 1);
          v90 = __OFSUB__(v93, v94);
          v95 = v93 - v94;
          if (v90)
            goto LABEL_123;
          v90 = __OFADD__(v82, v95);
          v96 = v82 + v95;
          if (v90)
            goto LABEL_126;
          if (v96 >= v87)
          {
            v114 = &v76[16 * v79];
            v116 = *(_QWORD *)v114;
            v115 = *((_QWORD *)v114 + 1);
            v90 = __OFSUB__(v115, v116);
            v117 = v115 - v116;
            if (v90)
              goto LABEL_130;
            v107 = v82 < v117;
            goto LABEL_92;
          }
        }
        else
        {
          if (v23 != 3)
          {
            v108 = *((_QWORD *)v21 + 4);
            v109 = *((_QWORD *)v21 + 5);
            v90 = __OFSUB__(v109, v108);
            v101 = v109 - v108;
            v102 = v90;
            goto LABEL_86;
          }
          v81 = *((_QWORD *)v21 + 4);
          v80 = *((_QWORD *)v21 + 5);
          v90 = __OFSUB__(v80, v81);
          v82 = v80 - v81;
          v83 = v90;
        }
        if ((v83 & 1) != 0)
          goto LABEL_122;
        v91 = v23 - 2;
        v97 = &v76[16 * v23 - 32];
        v99 = *(_QWORD *)v97;
        v98 = *((_QWORD *)v97 + 1);
        v100 = __OFSUB__(v98, v99);
        v101 = v98 - v99;
        v102 = v100;
        if (v100)
          goto LABEL_125;
        v103 = &v76[16 * v79];
        v105 = *(_QWORD *)v103;
        v104 = *((_QWORD *)v103 + 1);
        v90 = __OFSUB__(v104, v105);
        v106 = v104 - v105;
        if (v90)
          goto LABEL_128;
        if (__OFADD__(v101, v106))
          goto LABEL_129;
        if (v101 + v106 >= v82)
        {
          v107 = v82 < v106;
LABEL_92:
          if (v107)
            v79 = v91;
          goto LABEL_94;
        }
LABEL_86:
        if ((v102 & 1) != 0)
          goto LABEL_124;
        v110 = &v76[16 * v79];
        v112 = *(_QWORD *)v110;
        v111 = *((_QWORD *)v110 + 1);
        v90 = __OFSUB__(v111, v112);
        v113 = v111 - v112;
        if (v90)
          goto LABEL_127;
        if (v113 < v101)
          goto LABEL_14;
LABEL_94:
        v118 = v79 - 1;
        if (v79 - 1 >= v23)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        v119 = *a1;
        if (!*a1)
          goto LABEL_142;
        v120 = &v76[16 * v118];
        v121 = *(_QWORD *)v120;
        v122 = &v76[16 * v79];
        v123 = *((_QWORD *)v122 + 1);
        sub_23DDA8D30(v119 + *(_QWORD *)(v139 + 72) * *(_QWORD *)v120, v119 + *(_QWORD *)(v139 + 72) * *(_QWORD *)v122, v119 + *(_QWORD *)(v139 + 72) * v123, v138);
        if (v2)
          goto LABEL_114;
        if (v123 < v121)
          goto LABEL_117;
        if (v79 > *((_QWORD *)v21 + 2))
          goto LABEL_118;
        *(_QWORD *)v120 = v121;
        *(_QWORD *)&v76[16 * v118 + 8] = v123;
        v124 = *((_QWORD *)v21 + 2);
        if (v79 >= v124)
          goto LABEL_119;
        v23 = v124 - 1;
        memmove(&v76[16 * v79], v122 + 16, 16 * (v124 - 1 - v79));
        *((_QWORD *)v21 + 2) = v124 - 1;
        a1 = v149;
        if (v124 <= 2)
          goto LABEL_14;
      }
    }
    v23 = 1;
LABEL_14:
    v15 = a1[1];
    v22 = v151;
    if (v151 >= v15)
      goto LABEL_103;
  }
  if (__OFADD__(v24, v132))
    goto LABEL_139;
  if (v24 + v132 >= v15)
    v55 = v15;
  else
    v55 = v24 + v132;
  if (v55 >= v24)
  {
    if (v35 != v55)
    {
      v137 = v24;
      v133 = v2;
      v134 = v21;
      v56 = *(_QWORD *)(v139 + 72);
      v57 = v56 * (v35 - 1);
      v142 = v56;
      v58 = v35 * v56;
      v135 = v55;
      do
      {
        v60 = 0;
        v61 = v137;
        v151 = v35;
        v143 = v58;
        v144 = (void (*)(char *, uint64_t))v57;
        while (1)
        {
          v154 = v61;
          v62 = *a1;
          v153 = v58 + v60;
          v63 = v58 + v60 + v62;
          v64 = v150;
          sub_23DCF58EC(v63, v150, type metadata accessor for SleepingSampleViewModel);
          v65 = v145;
          sub_23DCF58EC(v57 + v60 + v62, v145, type metadata accessor for SleepingSampleViewModel);
          v66 = v146;
          sub_23DDC539C();
          v67 = v147;
          sub_23DDC539C();
          LOBYTE(v62) = sub_23DDC5384();
          v68 = *(void (**)(char *, uint64_t))(v141 + 8);
          v69 = v67;
          v70 = v148;
          v68(v69, v148);
          v68(v66, v70);
          sub_23DCF59A8(v65, type metadata accessor for SleepingSampleViewModel);
          sub_23DCF59A8(v64, type metadata accessor for SleepingSampleViewModel);
          if ((v62 & 1) == 0)
            break;
          v71 = *a1;
          if (!*a1)
            goto LABEL_141;
          v58 = v143;
          v57 = (uint64_t)v144;
          v72 = (uint64_t)v144 + v71 + v60;
          sub_23DCFBB58(v71 + v143 + v60, v152, type metadata accessor for SleepingSampleViewModel);
          swift_arrayInitWithTakeFrontToBack();
          sub_23DCFBB58(v152, v72, type metadata accessor for SleepingSampleViewModel);
          v60 -= v142;
          v61 = v154 + 1;
          v59 = v151;
          a1 = v149;
          if (v151 == v154 + 1)
            goto LABEL_48;
        }
        v59 = v151;
        v58 = v143;
        v57 = (uint64_t)v144;
LABEL_48:
        v35 = v59 + 1;
        v57 += v142;
        v58 += v142;
      }
      while (v35 != v135);
      v35 = v135;
      v2 = v133;
      v21 = v134;
      v24 = v137;
    }
    goto LABEL_55;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  sub_23DDC6AB8();
  __break(1u);
}

void sub_23DDA8A48(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v36 = a1;
  v7 = sub_23DDC5390();
  v42 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v41 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v40 = (char *)&v34 - v10;
  v37 = type metadata accessor for SleepingSampleViewModel(0);
  MEMORY[0x24BDAC7A8](v37);
  v48 = (uint64_t)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v39 = (uint64_t)&v34 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v38 = (char *)&v34 - v16;
  v47 = a3;
  v35 = a2;
  if (a3 != a2)
  {
    v17 = *(_QWORD *)(v15 + 72);
    v18 = v17 * (v47 - 1);
    v44 = v17;
    v19 = v17 * v47;
    v20 = (uint64_t)v38;
LABEL_5:
    v21 = 0;
    v50 = v36;
    v45 = v19;
    v46 = v18;
    while (1)
    {
      v22 = *a4;
      v49 = v19 + v21;
      sub_23DCF58EC(v19 + v21 + v22, v20, type metadata accessor for SleepingSampleViewModel);
      v23 = v39;
      sub_23DCF58EC(v18 + v21 + v22, v39, type metadata accessor for SleepingSampleViewModel);
      v24 = v40;
      sub_23DDC539C();
      v25 = v41;
      sub_23DDC539C();
      LOBYTE(v22) = sub_23DDC5384();
      v26 = a4;
      v27 = *(void (**)(char *, uint64_t))(v42 + 8);
      v28 = v25;
      v29 = v43;
      v27(v28, v43);
      v30 = v24;
      v31 = v29;
      v19 = v45;
      v18 = v46;
      v27(v30, v31);
      a4 = v26;
      sub_23DCF59A8(v23, type metadata accessor for SleepingSampleViewModel);
      sub_23DCF59A8(v20, type metadata accessor for SleepingSampleViewModel);
      if ((v22 & 1) == 0)
      {
LABEL_4:
        v18 += v44;
        v19 += v44;
        if (++v47 == v35)
          return;
        goto LABEL_5;
      }
      v32 = *v26;
      if (!*v26)
        break;
      v33 = v32 + v18 + v21;
      sub_23DCFBB58(v32 + v19 + v21, v48, type metadata accessor for SleepingSampleViewModel);
      swift_arrayInitWithTakeFrontToBack();
      sub_23DCFBB58(v48, v33, type metadata accessor for SleepingSampleViewModel);
      v21 -= v44;
      ++v50;
      a4 = v26;
      if (v47 == v50)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_23DDA8D30(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t result;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;

  v61 = sub_23DDC5390();
  v59 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v56 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v60 = (char *)&v51 - v10;
  v54 = type metadata accessor for SleepingSampleViewModel(0);
  MEMORY[0x24BDAC7A8](v54);
  v58 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v57 = (uint64_t)&v51 - v13;
  v15 = *(_QWORD *)(v14 + 72);
  if (!v15)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v15 == -1)
    goto LABEL_62;
  v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v15 == -1)
    goto LABEL_63;
  v17 = (uint64_t)(a2 - a1) / v15;
  v65 = a1;
  v64 = a4;
  v18 = v16 / v15;
  if (v17 >= v16 / v15)
  {
    if ((v18 & 0x8000000000000000) == 0)
    {
      v20 = v18 * v15;
      if (a4 < a2 || a2 + v20 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v34 = a4 + v20;
      v63 = a4 + v20;
      v65 = a2;
      if (v20 >= 1 && a1 < a2)
      {
        v36 = -v15;
        v52 = a1;
        v53 = a4;
        v37 = v60;
        do
        {
          v62 = a3;
          v55 = a3 + v36;
          v38 = v57;
          sub_23DCF58EC(v34 + v36, v57, type metadata accessor for SleepingSampleViewModel);
          v39 = a2 + v36;
          v40 = v58;
          sub_23DCF58EC(a2 + v36, v58, type metadata accessor for SleepingSampleViewModel);
          sub_23DDC539C();
          v41 = v56;
          sub_23DDC539C();
          v42 = sub_23DDC5384();
          v43 = v36;
          v44 = *(void (**)(char *, uint64_t))(v59 + 8);
          v45 = v41;
          v46 = v61;
          v44(v45, v61);
          v44(v37, v46);
          sub_23DCF59A8(v40, type metadata accessor for SleepingSampleViewModel);
          sub_23DCF59A8(v38, type metadata accessor for SleepingSampleViewModel);
          if ((v42 & 1) != 0)
          {
            a3 = v55;
            if (v62 < a2 || v55 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v47 = v52;
              v48 = v53;
              v36 = v43;
            }
            else
            {
              v47 = v52;
              v48 = v53;
              v36 = v43;
              if (v62 != a2)
                swift_arrayInitWithTakeBackToFront();
            }
            v65 += v36;
          }
          else
          {
            v49 = v63;
            v63 += v43;
            v36 = v43;
            a3 = v55;
            if (v62 < v49 || v55 >= v49)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v62 != v49)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v39 = a2;
            v47 = v52;
            v48 = v53;
          }
          v34 = v63;
          if (v63 <= v48)
            break;
          a2 = v39;
        }
        while (v39 > v47);
      }
      goto LABEL_60;
    }
  }
  else if ((v17 & 0x8000000000000000) == 0)
  {
    v19 = v17 * v15;
    if (a4 < a1 || a1 + v19 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v55 = a4 + v19;
    v63 = a4 + v19;
    if (v19 >= 1 && a2 < a3)
    {
      v62 = a3;
      v23 = v57;
      v22 = v58;
      do
      {
        sub_23DCF58EC(a2, v23, type metadata accessor for SleepingSampleViewModel);
        sub_23DCF58EC(a4, v22, type metadata accessor for SleepingSampleViewModel);
        v24 = v60;
        sub_23DDC539C();
        v25 = v56;
        sub_23DDC539C();
        v26 = sub_23DDC5384();
        v27 = *(void (**)(char *, uint64_t))(v59 + 8);
        v28 = v25;
        v29 = v61;
        v27(v28, v61);
        v27(v24, v29);
        sub_23DCF59A8(v22, type metadata accessor for SleepingSampleViewModel);
        sub_23DCF59A8(v23, type metadata accessor for SleepingSampleViewModel);
        v30 = v65;
        if ((v26 & 1) != 0)
        {
          v31 = a2 + v15;
          if (v65 < a2 || v65 >= v31)
          {
            swift_arrayInitWithTakeFrontToBack();
            v32 = v62;
          }
          else
          {
            v32 = v62;
            if (v65 == a2)
              v30 = a2;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v33 = v64 + v15;
          if (v65 < v64 || v65 >= v33)
          {
            swift_arrayInitWithTakeFrontToBack();
            v32 = v62;
          }
          else
          {
            v32 = v62;
            if (v65 != v64)
              swift_arrayInitWithTakeBackToFront();
          }
          v64 = v33;
          v31 = a2;
        }
        v65 = v30 + v15;
        a4 = v64;
        if (v64 >= v55)
          break;
        a2 = v31;
      }
      while (v31 < v32);
    }
LABEL_60:
    sub_23DDA9564(&v65, &v64, (uint64_t *)&v63, type metadata accessor for SleepingSampleViewModel);
    return 1;
  }
LABEL_64:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

char *sub_23DDA92F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DCFB328(0, &qword_256CFF910, (uint64_t (*)(uint64_t))sub_23DDAA708, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_23DDA93FC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_23DDA9564(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BE3FE20]);
}

char *sub_23DDA9408(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_23DDC6B0C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

uint64_t sub_23DDA94B0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_23DDA9564(a1, a2, a3, (uint64_t (*)(_QWORD))sub_23DD602C0);
}

char *sub_23DDA94BC(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_23DDC6B0C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

uint64_t sub_23DDA9564(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = sub_23DDC6B0C();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack();
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *sub_23DDA9670(uint64_t a1)
{
  return sub_23DDA92F0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23DDA9684(_QWORD *a1)
{
  return sub_23DD92DC8(0, a1[2], 0, a1);
}

uint64_t sub_23DDA9698(uint64_t a1)
{
  return sub_23DD92DDC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23DDA96AC(_QWORD *a1)
{
  return sub_23DD936CC(0, a1[2], 0, a1);
}

uint64_t sub_23DDA96C0(uint64_t a1)
{
  return sub_23DD933F0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23DDA96D4(_QWORD *a1)
{
  return sub_23DD936E0(0, a1[2], 0, a1);
}

uint64_t sub_23DDA96E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v24 = type metadata accessor for SleepingSampleDataTypePreferredUnitProvider();
  v25 = sub_23DCF535C(&qword_256CFF900, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9854);
  *(_QWORD *)&v23 = a2;
  v21 = sub_23DDC569C();
  v22 = sub_23DCF535C(&qword_256CFF908, (uint64_t (*)(uint64_t))MEMORY[0x24BE40598], MEMORY[0x24BE40590]);
  *(_QWORD *)&v20 = a3;
  *(_BYTE *)(a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dataFreshness) = 0;
  v12 = a6
      + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_queryResultOvernightMetricsModelWithFeatureStatusApplied;
  v13 = type metadata accessor for OvernightMetricsViewModel(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  v14(a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultOvernightMetricsModel, 1, 1, v13);
  *(_QWORD *)(a6
            + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryResultSleepingSampleViewModels) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryTask) = 0;
  v15 = (_QWORD *)(a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__unitTest_updatedViewModels);
  *v15 = nullsub_1;
  v15[1] = 0;
  sub_23DDC5234();
  v16 = a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dayRange;
  v17 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a1, v17);
  sub_23DDAA6C0(&v23, a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider);
  sub_23DDAA6C0(&v20, a6 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider);
  v18 = (_QWORD *)(a6
                 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_makeDaySummaryCollectionSequence);
  *v18 = a4;
  v18[1] = a5;
  return a6;
}

uint64_t sub_23DDA98AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD v45[2];
  unsigned int v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;

  v5 = sub_23DDC55DC();
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v48 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DDC53A8();
  v60 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v47 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v45 - v10;
  v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v13);
  v51 = (char *)v45 - v14;
  sub_23DCFB328(0, &qword_2543266D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE404A8], v12);
  MEMORY[0x24BDAC7A8](v15);
  v59 = (char *)v45 - v16;
  v58 = sub_23DDC55F4();
  v17 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v57 = (char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for SleepingSampleViewModel(0);
  v19 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v61 = (char *)v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a1 + 16);
  v22 = MEMORY[0x24BEE4AF8];
  if (v21)
  {
    v56 = v7;
    v45[1] = v2;
    v65 = MEMORY[0x24BEE4AF8];
    sub_23DD92C28(0, v21, 0);
    v55 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    v23 = a1 + v55;
    v54 = (_QWORD *)(a2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_unitProvider);
    v53 = (_QWORD *)(a2 + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider_featureStatusProvider);
    v52 = *(_QWORD *)(v19 + 72);
    v46 = *MEMORY[0x24BE40490];
    v24 = (uint64_t)v51;
    v25 = (uint64_t)v61;
    do
    {
      v62 = v23;
      v63 = v21;
      sub_23DCF58EC(v23, v25, type metadata accessor for SleepingSampleViewModel);
      v27 = v54[3];
      v26 = v54[4];
      __swift_project_boxed_opaque_existential_1(v54, v27);
      v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v27, v26);
      v29 = *(int *)(v64 + 28);

      *(_QWORD *)(v25 + v29) = v28;
      __swift_project_boxed_opaque_existential_1(v53, v53[3]);
      sub_23DDC56E4();
      v30 = sub_23DDC55A0();
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v24, 1, v30) == 1)
      {
        sub_23DCFEA1C(v24, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
        v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
        v33 = (uint64_t)v59;
        v34 = v17;
        v35 = v58;
        v32(v59, 1, 1, v58);
      }
      else
      {
        v33 = (uint64_t)v59;
        sub_23DDC5594();
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v24, v30);
        v34 = v17;
        v35 = v58;
      }
      v36 = v60;
      v37 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
      v38 = v56;
      v37(v11, v25, v56);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v33, 1, v35) == 1)
      {
        v37(v47, (uint64_t)v11, v38);
        (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v48, v46, v50);
        v24 = (uint64_t)v51;
        v39 = v57;
        sub_23DDC55B8();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v38);
        sub_23DCFEA1C(v33, &qword_2543266D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE404A8]);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v38);
        v39 = v57;
        (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v57, v33, v35);
      }
      v25 = (uint64_t)v61;
      (*(void (**)(char *, char *, uint64_t))(v34 + 40))(&v61[*(int *)(v64 + 32)], v39, v35);
      v22 = v65;
      v17 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23DD92C28(0, *(_QWORD *)(v22 + 16) + 1, 1);
        v22 = v65;
      }
      v40 = v63;
      v42 = *(_QWORD *)(v22 + 16);
      v41 = *(_QWORD *)(v22 + 24);
      if (v42 >= v41 >> 1)
      {
        sub_23DD92C28(v41 > 1, v42 + 1, 1);
        v22 = v65;
      }
      *(_QWORD *)(v22 + 16) = v42 + 1;
      v43 = v52;
      sub_23DCFBB58(v25, v22 + v55 + v42 * v52, type metadata accessor for SleepingSampleViewModel);
      v23 = v62 + v43;
      v21 = v40 - 1;
    }
    while (v21);
  }
  return v22;
}

uint64_t sub_23DDA9DDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23DDA7350(a1, v2[2], v2[3], v2[4], a2);
}

unint64_t sub_23DDA9DFC()
{
  unint64_t result;

  result = qword_256CFC908;
  if (!qword_256CFC908)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256CFC908);
  }
  return result;
}

uint64_t sub_23DDA9E38()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23DDA9E64(uint64_t a1)
{
  uint64_t *v1;

  return sub_23DDA5948(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_23DDA9E78()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DDA9E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  sub_23DDAA610(0, &qword_256CFF610, MEMORY[0x24BEE6D28]);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DDA9F44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  sub_23DDAA610(0, &qword_256CFF610, MEMORY[0x24BEE6D28]);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v10 = v1 + v6;
  v11 = *(_QWORD *)(v1 + v7);
  v12 = *(_QWORD *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_23DD506C0;
  return sub_23DDA6060(a1, v8, v9, v10, v11, v12);
}

uint64_t sub_23DDAA008()
{
  return sub_23DDAA680();
}

uint64_t sub_23DDAA01C()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DDAA048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23DD4FCC8;
  v3[2] = v2;
  return swift_task_switch();
}

unint64_t sub_23DDAA0AC()
{
  unint64_t result;

  result = qword_256CFF660;
  if (!qword_256CFF660)
  {
    result = MEMORY[0x242643BD8](&protocol conformance descriptor for SleepingSampleViewModelProvider.DataFreshness, &type metadata for SleepingSampleViewModelProvider.DataFreshness);
    atomic_store(result, (unint64_t *)&qword_256CFF660);
  }
  return result;
}

uint64_t sub_23DDAA0F0(uint64_t a1)
{
  uint64_t result;

  result = sub_23DCF535C(&qword_256CFF5D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleViewModelProvider, (uint64_t)&protocol conformance descriptor for SleepingSampleViewModelProvider);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.dayRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.dayRange.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.dayRange.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.overnightMetricsModel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.viewModels.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.dataFreshness.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.startQuery()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProviding.status(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t sub_23DDAA16C()
{
  return type metadata accessor for SleepingSampleViewModelProvider();
}

void sub_23DDAA174()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_23DDC5330();
  if (v0 <= 0x3F)
  {
    sub_23DCFB328(319, &qword_256CFD3B0, type metadata accessor for OvernightMetricsViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
    {
      sub_23DDC5240();
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for SleepingSampleViewModelProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.dayRange.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.dayRange.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.dayRange.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.dataFreshness.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.dataFreshness.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.dataFreshness.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.overnightMetricsModel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.viewModels.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.startQuery()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of SleepingSampleViewModelProvider.status(of:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t storeEnumTagSinglePayload for SleepingSampleViewModelProvider.DataFreshness(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DDAA33C + 4 * byte_23DDCB765[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DDAA370 + 4 * byte_23DDCB760[v4]))();
}

uint64_t sub_23DDAA370(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DDAA378(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DDAA380);
  return result;
}

uint64_t sub_23DDAA38C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DDAA394);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DDAA398(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DDAA3A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleViewModelProvider.DataFreshness()
{
  return &type metadata for SleepingSampleViewModelProvider.DataFreshness;
}

uint64_t sub_23DDAA3BC()
{
  uint64_t v0;

  return sub_23DDA4D74(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23DDAA3D4()
{
  uint64_t v0;

  return sub_23DDA52D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23DDAA3F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DDAA418(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_23DDAA448()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[4];
  v2 = (_QWORD *)(v0[2] + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__unitTest_updatedViewModels);
  *v2 = v0[3];
  v2[1] = v1;
  swift_retain();
  return swift_release();
}

uint64_t sub_23DDAA490(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void sub_23DDAA4B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFF8E0)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DDC6A58();
    if (!v1)
      atomic_store(v0, &qword_256CFF8E0);
  }
}

uint64_t sub_23DDAA510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23DDC5330();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23DDAA584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_23DDC5330() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_23DD4FCC8;
  v7[3] = v5;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch();
}

void sub_23DDAA610(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = sub_23DDC5570();
    v7 = sub_23DD02790();
    v8 = a3(a1, v6, v7, MEMORY[0x24BEE3F20]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_23DDAA680()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__queryTask) = *(_QWORD *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_23DDAA6C0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_23DDAA6D8()
{
  return sub_23DDC53F0();
}

void sub_23DDAA708()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFF918)
  {
    v0 = sub_23DDC68B4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFF918);
  }
}

uint64_t sub_23DDAA764()
{
  uint64_t v0;
  char v1;
  _BYTE *v2;
  uint64_t result;

  v1 = *(_BYTE *)(v0 + 24);
  v2 = (_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC15HealthBalanceUI31SleepingSampleViewModelProvider__dataFreshness);
  result = swift_beginAccess();
  *v2 = v1;
  return result;
}

uint64_t sub_23DDAA7C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DDA9DDC(a1, a2);
}

uint64_t sub_23DDAA7DC()
{
  return sub_23DDA4078();
}

uint64_t sub_23DDAA7F0()
{
  return sub_23DDAA3D4();
}

uint64_t sub_23DDAA804()
{
  return sub_23DDAA3BC();
}

_QWORD *sub_23DDAA81C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_23DDC53A8();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = (int *)type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
    *((_BYTE *)v4 + v8[5]) = *((_BYTE *)a2 + v8[5]);
    v9 = v8[6];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23DDC512C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    *(_QWORD *)((char *)v4 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
    *(_QWORD *)((char *)v4 + v8[8]) = *(_QWORD *)((char *)a2 + v8[8]);
    *((_BYTE *)v4 + v8[9]) = *((_BYTE *)a2 + v8[9]);
    v13 = *(int *)(a3 + 20);
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = *(_QWORD *)((char *)a2 + v13);
    swift_retain();
    swift_retain();
    if (v16)
    {
      v17 = *((_QWORD *)v15 + 1);
      *(_QWORD *)v14 = v16;
      *((_QWORD *)v14 + 1) = v17;
      v18 = *((_OWORD *)v15 + 2);
      *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
      *((_OWORD *)v14 + 2) = v18;
      *((_OWORD *)v14 + 3) = *((_OWORD *)v15 + 3);
      *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v20 = *((_OWORD *)v15 + 3);
      *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
      *((_OWORD *)v14 + 3) = v20;
      *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
      v21 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v21;
    }
    v22 = *(int *)(a3 + 24);
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    v25 = *(_QWORD *)((char *)a2 + v22);
    if (v25)
    {
      v26 = *((_QWORD *)v24 + 1);
      v27 = *((_QWORD *)v24 + 2);
      *(_QWORD *)v23 = v25;
      *((_QWORD *)v23 + 1) = v26;
      *((_QWORD *)v23 + 2) = v27;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
    }
    v23[24] = v24[24];
    v23[32] = v24[32];
    v28 = *((_QWORD *)v24 + 6);
    *((_QWORD *)v23 + 5) = *((_QWORD *)v24 + 5);
    *((_QWORD *)v23 + 6) = v28;
    v23[56] = v24[56];
    v29 = *((_QWORD *)v24 + 9);
    *((_QWORD *)v23 + 8) = *((_QWORD *)v24 + 8);
    *((_QWORD *)v23 + 9) = v29;
    *((_QWORD *)v23 + 10) = *((_QWORD *)v24 + 10);
    v30 = *(_OWORD *)(v24 + 88);
    *(_OWORD *)(v23 + 104) = *(_OWORD *)(v24 + 104);
    *(_OWORD *)(v23 + 88) = v30;
    v31 = *(_OWORD *)(v24 + 120);
    v32 = *(_OWORD *)(v24 + 136);
    *(_OWORD *)(v23 + 152) = *(_OWORD *)(v24 + 152);
    *(_OWORD *)(v23 + 136) = v32;
    *(_OWORD *)(v23 + 120) = v31;
    v33 = *((_QWORD *)v24 + 22);
    *((_QWORD *)v23 + 21) = *((_QWORD *)v24 + 21);
    *((_QWORD *)v23 + 22) = v33;
    v35 = *((_QWORD *)v24 + 23);
    v34 = *((_QWORD *)v24 + 24);
    v23[200] = v24[200];
    *((_QWORD *)v23 + 23) = v35;
    *((_QWORD *)v23 + 24) = v34;
    v23[201] = v24[201];
    v36 = *((_QWORD *)v24 + 27);
    *((_QWORD *)v23 + 26) = *((_QWORD *)v24 + 26);
    *((_QWORD *)v23 + 27) = v36;
    v37 = *((_QWORD *)v24 + 29);
    *((_QWORD *)v23 + 28) = *((_QWORD *)v24 + 28);
    *((_QWORD *)v23 + 29) = v37;
    *((_QWORD *)v23 + 30) = *((_QWORD *)v24 + 30);
    v23[248] = v24[248];
    v38 = *((_QWORD *)v24 + 33);
    *((_QWORD *)v23 + 32) = *((_QWORD *)v24 + 32);
    *((_QWORD *)v23 + 33) = v38;
    *((_QWORD *)v23 + 34) = *((_QWORD *)v24 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_23DDAAAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0) + 24);
  v6 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + *(int *)(a2 + 20)))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + *(int *)(a2 + 24)))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_23DDAAC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  *(_BYTE *)(a1 + v7[5]) = *(_BYTE *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  v12 = *(int *)(a3 + 20);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a2 + v12);
  swift_retain();
  swift_retain();
  if (v15)
  {
    v16 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v13 = v15;
    *(_QWORD *)(v13 + 8) = v16;
    v17 = *(_OWORD *)(v14 + 32);
    *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
    *(_OWORD *)(v13 + 32) = v17;
    *(_OWORD *)(v13 + 48) = *(_OWORD *)(v14 + 48);
    *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *(_OWORD *)(v14 + 48);
    *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
    *(_OWORD *)(v13 + 48) = v18;
    *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
    v19 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v19;
  }
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20);
  v38 = a1;
  if (v23)
  {
    v24 = *(_QWORD *)(v22 + 8);
    v25 = *(_QWORD *)(v22 + 16);
    *(_QWORD *)v21 = v23;
    *(_QWORD *)(v21 + 8) = v24;
    *(_QWORD *)(v21 + 16) = v25;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
  }
  *(_BYTE *)(v21 + 24) = *(_BYTE *)(v22 + 24);
  *(_BYTE *)(v21 + 32) = *(_BYTE *)(v22 + 32);
  v26 = *(_QWORD *)(v22 + 48);
  *(_QWORD *)(v21 + 40) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v21 + 48) = v26;
  *(_BYTE *)(v21 + 56) = *(_BYTE *)(v22 + 56);
  v27 = *(_QWORD *)(v22 + 72);
  *(_QWORD *)(v21 + 64) = *(_QWORD *)(v22 + 64);
  *(_QWORD *)(v21 + 72) = v27;
  *(_QWORD *)(v21 + 80) = *(_QWORD *)(v22 + 80);
  v28 = *(_OWORD *)(v22 + 88);
  *(_OWORD *)(v21 + 104) = *(_OWORD *)(v22 + 104);
  *(_OWORD *)(v21 + 88) = v28;
  v29 = *(_OWORD *)(v22 + 120);
  v30 = *(_OWORD *)(v22 + 136);
  *(_OWORD *)(v21 + 152) = *(_OWORD *)(v22 + 152);
  *(_OWORD *)(v21 + 136) = v30;
  *(_OWORD *)(v21 + 120) = v29;
  v31 = *(_QWORD *)(v22 + 176);
  *(_QWORD *)(v21 + 168) = *(_QWORD *)(v22 + 168);
  *(_QWORD *)(v21 + 176) = v31;
  v33 = *(_QWORD *)(v22 + 184);
  v32 = *(_QWORD *)(v22 + 192);
  *(_BYTE *)(v21 + 200) = *(_BYTE *)(v22 + 200);
  *(_QWORD *)(v21 + 184) = v33;
  *(_QWORD *)(v21 + 192) = v32;
  *(_BYTE *)(v21 + 201) = *(_BYTE *)(v22 + 201);
  v34 = *(_QWORD *)(v22 + 216);
  *(_QWORD *)(v21 + 208) = *(_QWORD *)(v22 + 208);
  *(_QWORD *)(v21 + 216) = v34;
  v35 = *(_QWORD *)(v22 + 232);
  *(_QWORD *)(v21 + 224) = *(_QWORD *)(v22 + 224);
  *(_QWORD *)(v21 + 232) = v35;
  *(_QWORD *)(v21 + 240) = *(_QWORD *)(v22 + 240);
  *(_BYTE *)(v21 + 248) = *(_BYTE *)(v22 + 248);
  v36 = *(_QWORD *)(v22 + 264);
  *(_QWORD *)(v21 + 256) = *(_QWORD *)(v22 + 256);
  *(_QWORD *)(v21 + 264) = v36;
  *(_QWORD *)(v21 + 272) = *(_QWORD *)(v22 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v38;
}

uint64_t sub_23DDAAEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  *(_BYTE *)(a1 + v7[5]) = *(_BYTE *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  v12 = *(int *)(a3 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a2 + v12);
  if (*(_QWORD *)(a1 + v12))
  {
    if (v15)
    {
      *v13 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13[1] = *(_QWORD *)(v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13[2] = *(_QWORD *)(v14 + 16);
      v13[3] = *(_QWORD *)(v14 + 24);
      v13[4] = *(_QWORD *)(v14 + 32);
      v13[5] = *(_QWORD *)(v14 + 40);
      v13[6] = *(_QWORD *)(v14 + 48);
      v13[7] = *(_QWORD *)(v14 + 56);
      v13[8] = *(_QWORD *)(v14 + 64);
    }
    else
    {
      sub_23DCF5648(a1 + v12);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      v17 = *(_OWORD *)(v14 + 32);
      v16 = *(_OWORD *)(v14 + 48);
      v18 = *(_OWORD *)(v14 + 16);
      v13[8] = *(_QWORD *)(v14 + 64);
      *((_OWORD *)v13 + 2) = v17;
      *((_OWORD *)v13 + 3) = v16;
      *((_OWORD *)v13 + 1) = v18;
    }
  }
  else if (v15)
  {
    *v13 = v15;
    v13[1] = *(_QWORD *)(v14 + 8);
    v13[2] = *(_QWORD *)(v14 + 16);
    v13[3] = *(_QWORD *)(v14 + 24);
    v13[4] = *(_QWORD *)(v14 + 32);
    v13[5] = *(_QWORD *)(v14 + 40);
    v13[6] = *(_QWORD *)(v14 + 48);
    v13[7] = *(_QWORD *)(v14 + 56);
    v13[8] = *(_QWORD *)(v14 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
    v19 = *(_OWORD *)(v14 + 16);
    v20 = *(_OWORD *)(v14 + 32);
    v21 = *(_OWORD *)(v14 + 48);
    v13[8] = *(_QWORD *)(v14 + 64);
    *((_OWORD *)v13 + 2) = v20;
    *((_OWORD *)v13 + 3) = v21;
    *((_OWORD *)v13 + 1) = v19;
  }
  v22 = *(int *)(a3 + 24);
  v23 = a1 + v22;
  v24 = (__int128 *)(a2 + v22);
  v25 = *(_QWORD *)(a2 + v22);
  if (*(_QWORD *)(a1 + v22))
  {
    if (v25)
    {
      *(_QWORD *)v23 = v25;
      swift_retain();
      swift_release();
      *(_QWORD *)(v23 + 8) = *((_QWORD *)v24 + 1);
      swift_retain();
      swift_release();
      *(_QWORD *)(v23 + 16) = *((_QWORD *)v24 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_23DCF9EB8(a1 + v22);
      v26 = *((_QWORD *)v24 + 2);
      *(_OWORD *)v23 = *v24;
      *(_QWORD *)(v23 + 16) = v26;
    }
  }
  else if (v25)
  {
    *(_QWORD *)v23 = v25;
    *(_QWORD *)(v23 + 8) = *((_QWORD *)v24 + 1);
    *(_QWORD *)(v23 + 16) = *((_QWORD *)v24 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v27 = *v24;
    *(_QWORD *)(v23 + 16) = *((_QWORD *)v24 + 2);
    *(_OWORD *)v23 = v27;
  }
  *(_BYTE *)(v23 + 24) = *((_BYTE *)v24 + 24);
  *(_BYTE *)(v23 + 32) = *((_BYTE *)v24 + 32);
  *(_QWORD *)(v23 + 40) = *((_QWORD *)v24 + 5);
  swift_retain();
  swift_release();
  v28 = *((_QWORD *)v24 + 6);
  *(_BYTE *)(v23 + 56) = *((_BYTE *)v24 + 56);
  *(_QWORD *)(v23 + 48) = v28;
  *(_QWORD *)(v23 + 64) = *((_QWORD *)v24 + 8);
  *(_QWORD *)(v23 + 72) = *((_QWORD *)v24 + 9);
  swift_retain();
  swift_release();
  *(_QWORD *)(v23 + 80) = *((_QWORD *)v24 + 10);
  swift_retain();
  swift_release();
  *(_QWORD *)(v23 + 88) = *((_QWORD *)v24 + 11);
  v29 = *((_QWORD *)v24 + 12);
  *(_BYTE *)(v23 + 104) = *((_BYTE *)v24 + 104);
  *(_QWORD *)(v23 + 96) = v29;
  *(_QWORD *)(v23 + 112) = *((_QWORD *)v24 + 14);
  *(_QWORD *)(v23 + 120) = *((_QWORD *)v24 + 15);
  *(_QWORD *)(v23 + 128) = *((_QWORD *)v24 + 16);
  *(_QWORD *)(v23 + 136) = *((_QWORD *)v24 + 17);
  *(_QWORD *)(v23 + 144) = *((_QWORD *)v24 + 18);
  *(_QWORD *)(v23 + 152) = *((_QWORD *)v24 + 19);
  *(_QWORD *)(v23 + 160) = *((_QWORD *)v24 + 20);
  *(_QWORD *)(v23 + 168) = *((_QWORD *)v24 + 21);
  *(_QWORD *)(v23 + 176) = *((_QWORD *)v24 + 22);
  swift_retain();
  swift_release();
  *(_QWORD *)(v23 + 184) = *((_QWORD *)v24 + 23);
  swift_retain();
  swift_release();
  v30 = *((_QWORD *)v24 + 24);
  *(_BYTE *)(v23 + 200) = *((_BYTE *)v24 + 200);
  *(_QWORD *)(v23 + 192) = v30;
  *(_BYTE *)(v23 + 201) = *((_BYTE *)v24 + 201);
  *(_QWORD *)(v23 + 208) = *((_QWORD *)v24 + 26);
  swift_retain();
  swift_release();
  *(_QWORD *)(v23 + 216) = *((_QWORD *)v24 + 27);
  swift_retain();
  swift_release();
  *(_QWORD *)(v23 + 224) = *((_QWORD *)v24 + 28);
  swift_retain();
  swift_release();
  *(_QWORD *)(v23 + 232) = *((_QWORD *)v24 + 29);
  swift_retain();
  swift_release();
  *(_QWORD *)(v23 + 240) = *((_QWORD *)v24 + 30);
  swift_retain();
  swift_release();
  *(_BYTE *)(v23 + 248) = *((_BYTE *)v24 + 248);
  *(_QWORD *)(v23 + 256) = *((_QWORD *)v24 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(v23 + 264) = *((_QWORD *)v24 + 33);
  swift_retain();
  swift_release();
  *(_QWORD *)(v23 + 272) = *((_QWORD *)v24 + 34);
  return a1;
}

uint64_t sub_23DDAB32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  *(_BYTE *)(a1 + v7[5]) = *(_BYTE *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = a1 + v12;
  v15 = a2 + v12;
  v16 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(v14 + 48) = v16;
  *(_QWORD *)(v14 + 64) = *(_QWORD *)(v15 + 64);
  v17 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v17;
  memcpy((void *)(a1 + v13), (const void *)(a2 + v13), 0x118uLL);
  return a1;
}

uint64_t sub_23DDAB420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  *(_BYTE *)(a1 + v7[5]) = *(_BYTE *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  swift_release();
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  swift_release();
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  v12 = *(int *)(a3 + 20);
  v13 = a1 + v12;
  v14 = a2 + v12;
  if (*(_QWORD *)(a1 + v12))
  {
    if (*(_QWORD *)v14)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
      swift_bridgeObjectRelease();
      v15 = *(_OWORD *)(v14 + 32);
      *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
      *(_OWORD *)(v13 + 32) = v15;
      *(_OWORD *)(v13 + 48) = *(_OWORD *)(v14 + 48);
      *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
      goto LABEL_6;
    }
    sub_23DCF5648(v13);
  }
  v16 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(v13 + 48) = v16;
  *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
  v17 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v17;
LABEL_6:
  v18 = *(int *)(a3 + 24);
  v19 = a1 + v18;
  v20 = a2 + v18;
  if (!*(_QWORD *)(a1 + v18))
  {
LABEL_10:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
    goto LABEL_11;
  }
  if (!*(_QWORD *)v20)
  {
    sub_23DCF9EB8(v19);
    goto LABEL_10;
  }
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_release();
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  swift_release();
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
  swift_release();
LABEL_11:
  *(_BYTE *)(v19 + 24) = *(_BYTE *)(v20 + 24);
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(v20 + 32);
  *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
  swift_release();
  *(_QWORD *)(v19 + 48) = *(_QWORD *)(v20 + 48);
  *(_BYTE *)(v19 + 56) = *(_BYTE *)(v20 + 56);
  *(_QWORD *)(v19 + 64) = *(_QWORD *)(v20 + 64);
  *(_QWORD *)(v19 + 72) = *(_QWORD *)(v20 + 72);
  swift_release();
  *(_QWORD *)(v19 + 80) = *(_QWORD *)(v20 + 80);
  swift_release();
  *(_QWORD *)(v19 + 88) = *(_QWORD *)(v20 + 88);
  *(_QWORD *)(v19 + 96) = *(_QWORD *)(v20 + 96);
  *(_BYTE *)(v19 + 104) = *(_BYTE *)(v20 + 104);
  v21 = *(_OWORD *)(v20 + 128);
  *(_OWORD *)(v19 + 112) = *(_OWORD *)(v20 + 112);
  *(_OWORD *)(v19 + 128) = v21;
  v22 = *(_OWORD *)(v20 + 160);
  *(_OWORD *)(v19 + 144) = *(_OWORD *)(v20 + 144);
  *(_OWORD *)(v19 + 160) = v22;
  *(_QWORD *)(v19 + 176) = *(_QWORD *)(v20 + 176);
  swift_release();
  *(_QWORD *)(v19 + 184) = *(_QWORD *)(v20 + 184);
  swift_release();
  *(_QWORD *)(v19 + 192) = *(_QWORD *)(v20 + 192);
  *(_BYTE *)(v19 + 200) = *(_BYTE *)(v20 + 200);
  *(_BYTE *)(v19 + 201) = *(_BYTE *)(v20 + 201);
  *(_QWORD *)(v19 + 208) = *(_QWORD *)(v20 + 208);
  swift_release();
  *(_QWORD *)(v19 + 216) = *(_QWORD *)(v20 + 216);
  swift_release();
  *(_QWORD *)(v19 + 224) = *(_QWORD *)(v20 + 224);
  swift_release();
  *(_QWORD *)(v19 + 232) = *(_QWORD *)(v20 + 232);
  swift_release();
  *(_QWORD *)(v19 + 240) = *(_QWORD *)(v20 + 240);
  swift_release();
  *(_BYTE *)(v19 + 248) = *(_BYTE *)(v20 + 248);
  *(_QWORD *)(v19 + 256) = *(_QWORD *)(v20 + 256);
  swift_release();
  *(_QWORD *)(v19 + 264) = *(_QWORD *)(v20 + 264);
  swift_release();
  *(_QWORD *)(v19 + 272) = *(_QWORD *)(v20 + 272);
  return a1;
}

uint64_t sub_23DDAB6F8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDAB704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 40);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_23DDAB784()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDAB790(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 40) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for OvernightMetricsChartDayAxisLabel()
{
  uint64_t result;

  result = qword_256CFF978;
  if (!qword_256CFF978)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DDAB848()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23DDAB8C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DDAB8D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  double v31;
  uint64_t v32;
  uint64_t KeyPath;
  char v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[6];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v2 = v1;
  v4 = type metadata accessor for OvernightMetricsChartDayAxisLabel();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  v8 = *(_QWORD *)(v2 + *(int *)(v7 + 28));
  v44 = v2 + *(int *)(v4 + 24);
  v9 = *(_QWORD *)(v44 + 256);
  sub_23DDABBD4(v2, (uint64_t)v6);
  if (v9)
  {
    v43 = v9;
  }
  else
  {
    v43 = *(_QWORD *)&v6[*(int *)(v7 + 32)];
    swift_retain();
  }
  swift_retain();
  swift_retain();
  sub_23DDABC18((uint64_t)v6);
  v10 = (uint64_t *)(v2 + *(int *)(v4 + 20));
  v12 = *v10;
  v11 = v10[1];
  v13 = v10[2];
  v14 = v10[3];
  v15 = v10[4];
  v16 = v10[5];
  v17 = v10[6];
  v18 = v10[7];
  v19 = v10[8];
  v45 = v8;
  v42 = v7;
  if (v12)
  {
    v20 = v13;
    v21 = v14;
    v22 = v15;
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v26 = v19;
    v27 = v12;
    v28 = v11;
  }
  else
  {
    v41[1] = v16;
    v41[2] = v15;
    v41[3] = v14;
    v41[4] = v13;
    v41[5] = v11;
    if (qword_256CFC0B8 != -1)
      swift_once();
    v29 = (_QWORD *)qword_256D06578;
    swift_getKeyPath();
    v46 = v29;
    sub_23DCF535C((unint64_t *)&qword_256CFC1C0, (uint64_t (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState, (uint64_t)&unk_23DDCAF88);
    sub_23DDC5210();
    swift_release();
    v27 = v29[2];
    v28 = v29[3];
    v20 = v29[4];
    v21 = v29[5];
    v22 = v29[6];
    v23 = v29[7];
    v24 = v29[8];
    v25 = v29[9];
    v26 = v29[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v46 = (_QWORD *)v27;
  v47 = v28;
  v48 = v20;
  v49 = v21;
  v50 = v22;
  v51 = v23;
  v52 = v24;
  v53 = v25;
  v54 = v26;
  v30 = *(_BYTE *)(v2 + *(int *)(v42 + 20));
  sub_23DCF59EC(v12);
  v31 = sub_23DD9B550(v2, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(v44 + 264);
  KeyPath = swift_getKeyPath();
  swift_retain();
  v34 = sub_23DDC5F54();
  result = sub_23DDC5A74();
  v36 = v43;
  *(_QWORD *)a1 = v45;
  *(_QWORD *)(a1 + 8) = v36;
  *(double *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = KeyPath;
  *(_QWORD *)(a1 + 32) = v32;
  *(_BYTE *)(a1 + 40) = v34;
  *(_QWORD *)(a1 + 48) = v37;
  *(_QWORD *)(a1 + 56) = v38;
  *(_QWORD *)(a1 + 64) = v39;
  *(_QWORD *)(a1 + 72) = v40;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

uint64_t sub_23DDABBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OvernightMetricsChartDayAxisLabel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DDABC18(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OvernightMetricsChartDayAxisLabel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23DDABC68()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFF9B8;
  if (!qword_256CFF9B8)
  {
    sub_23DCF594C(255, &qword_256CFF9C0, (void (*)(uint64_t))sub_23DDABCE8);
    v2 = v1;
    v3[0] = sub_23DDABE14();
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFF9B8);
  }
  return result;
}

void sub_23DDABCE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFF9C8)
  {
    sub_23DCF594C(255, &qword_256CFF9D0, (void (*)(uint64_t))sub_23DDABD64);
    sub_23DDABDC0();
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFF9C8);
  }
}

void sub_23DDABD64()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFF9D8)
  {
    sub_23DD6C618();
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFF9D8);
  }
}

void sub_23DDABDC0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFCA18)
  {
    sub_23DD13BB4();
    v0 = sub_23DDC5F00();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFCA18);
  }
}

unint64_t sub_23DDABE14()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFF9E0;
  if (!qword_256CFF9E0)
  {
    sub_23DDABCE8();
    v2 = v1;
    v3[0] = sub_23DDABE94();
    v3[1] = sub_23DCF535C((unint64_t *)&qword_256CFCA38, (uint64_t (*)(uint64_t))sub_23DDABDC0, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFF9E0);
  }
  return result;
}

unint64_t sub_23DDABE94()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFF9E8;
  if (!qword_256CFF9E8)
  {
    sub_23DCF594C(255, &qword_256CFF9D0, (void (*)(uint64_t))sub_23DDABD64);
    v2 = v1;
    v3[0] = sub_23DDABF14();
    v3[1] = MEMORY[0x24BDECC38];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFF9E8);
  }
  return result;
}

unint64_t sub_23DDABF14()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_256CFF9F0;
  if (!qword_256CFF9F0)
  {
    sub_23DDABD64();
    v2 = v1;
    v3 = sub_23DCF535C((unint64_t *)&qword_256CFD860, (uint64_t (*)(uint64_t))sub_23DD6C618, MEMORY[0x24BDF0710]);
    v4[0] = MEMORY[0x24BDF40E8];
    v4[1] = v3;
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_256CFF9F0);
  }
  return result;
}

uint64_t sub_23DDABFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;

  v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_23DDABFE8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDABFF8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for BalanceWidgetAccessoryCircularView(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFFA58);
}

uint64_t sub_23DDAC020()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DDAC030@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v35 = a1;
  v32 = sub_23DDC5264();
  v2 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, qword_256CFE918, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FAA0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  sub_23DCFB328(0, &qword_256CFC640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], v5);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - v10;
  sub_23DDAC99C();
  v31 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDACA38(0);
  v16 = *(_QWORD *)(v15 - 8);
  v33 = v15;
  v34 = v16;
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = v1;
  sub_23DDAC3A4(v1, (uint64_t)v14);
  type metadata accessor for BalanceWidgetViewModel();
  v19 = *MEMORY[0x24BE3FA88];
  v20 = sub_23DDC5258();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 104))(v8, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v8, 0, 1, v20);
  v22 = v32;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BE3FAD0], v32);
  sub_23DDC524C();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v22);
  v23 = (uint64_t)v8;
  v24 = MEMORY[0x24BEE1C68];
  sub_23DDABFA4(v23, (uint64_t)qword_256CFE918, (uint64_t)MEMORY[0x24BE3FAA0], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_23DCFB328);
  v25 = sub_23DDC5018();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v11, 0, 1, v25);
  v26 = sub_23DDB5928(&qword_256CFFAA8, (uint64_t (*)(uint64_t))sub_23DDAC99C, (uint64_t (*)(void))sub_23DDACAC4);
  v27 = v31;
  sub_23DDC6104();
  sub_23DDABFA4((uint64_t)v11, (uint64_t)&qword_256CFC640, (uint64_t)MEMORY[0x24BDCDAC0], (uint64_t)v24, (uint64_t (*)(_QWORD))sub_23DCFB328);
  sub_23DCF59A8((uint64_t)v14, (uint64_t (*)(_QWORD))sub_23DDAC99C);
  v36 = v30;
  type metadata accessor for BalanceWidgetAccessoryCircularLabelView(0);
  v37 = v27;
  v38 = v26;
  swift_getOpaqueTypeConformance2();
  sub_23DCF535C(&qword_256CFFAC8, type metadata accessor for BalanceWidgetAccessoryCircularLabelView, (uint64_t)&unk_23DDCBC0C);
  v28 = v33;
  sub_23DDC60EC();
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v18, v28);
}

uint64_t sub_23DDAC3A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  int v33;
  void (*v34)(uint64_t, char *, uint64_t);
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v57 = a2;
  v58 = type metadata accessor for BalanceWidgetAccessoryCircularGaugeView(0);
  MEMORY[0x24BDAC7A8](v58);
  v52 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD3816C(0, qword_256CFFAD0, type metadata accessor for BalanceWidgetAccessoryCircularWarmupView, v4, MEMORY[0x24BDEF380]);
  v54 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v56 = (uint64_t)&v49 - v6;
  v7 = type metadata accessor for BalanceWidgetViewModel();
  MEMORY[0x24BDAC7A8](v7);
  v53 = (uint64_t)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for BalanceWidgetAccessoryCircularWarmupView(0);
  MEMORY[0x24BDAC7A8](v55);
  v51 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OvernightMetricsWarmupProgress();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_2543266F8, v14, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v49 - v19;
  v21 = sub_23DDC52DC();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v50 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v49 - v25;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v49 - v28;
  sub_23DD728B4((uint64_t)v20);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v30(v20, 1, v10) == 1)
  {
    sub_23DDABFA4((uint64_t)v20, (uint64_t)&qword_2543266F8, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_23DCFB328);
    v31 = a1;
  }
  else
  {
    v49 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    v49(v26, v20, v21);
    sub_23DCF59A8((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
    v32 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v32(v29, v26, v21);
    sub_23DD728B4((uint64_t)v17);
    v33 = v30(v17, 1, v10);
    v31 = a1;
    if (v33 == 1)
    {
      sub_23DDABFA4((uint64_t)v17, (uint64_t)&qword_2543266F8, (uint64_t)type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))sub_23DCFB328);
    }
    else
    {
      v34 = (void (*)(uint64_t, char *, uint64_t))v32;
      sub_23DCFBB58((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
      v35 = sub_23DDC52B8();
      result = sub_23DDC52D0();
      v37 = v35 - result;
      if (__OFSUB__(v35, result))
      {
        __break(1u);
        return result;
      }
      sub_23DCF59A8((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
      if (v37 > 0)
      {
        v38 = v21;
        v39 = v29;
        v40 = v22;
        v41 = v53;
        sub_23DCF58EC(v31, v53, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
        v42 = v50;
        v49(v50, v39, v21);
        KeyPath = swift_getKeyPath();
        v44 = v55;
        v45 = (uint64_t)v51;
        *(_QWORD *)&v51[*(int *)(v55 + 24)] = KeyPath;
        sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
        swift_storeEnumTagMultiPayload();
        sub_23DCFBB58(v41, v45, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
        v34(v45 + *(int *)(v44 + 20), v42, v38);
        sub_23DCF58EC(v45, v56, type metadata accessor for BalanceWidgetAccessoryCircularWarmupView);
        swift_storeEnumTagMultiPayload();
        sub_23DCF535C(&qword_256CFFAB8, type metadata accessor for BalanceWidgetAccessoryCircularWarmupView, (uint64_t)&unk_23DDCBCAC);
        sub_23DCF535C(&qword_256CFFAC0, type metadata accessor for BalanceWidgetAccessoryCircularGaugeView, (uint64_t)&unk_23DDCBC5C);
        sub_23DDC5E58();
        sub_23DCF59A8(v45, type metadata accessor for BalanceWidgetAccessoryCircularWarmupView);
        return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v39, v38);
      }
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v29, v21);
  }
  v46 = v53;
  sub_23DCF58EC(v31, v53, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
  v47 = swift_getKeyPath();
  v48 = (uint64_t)v52;
  *(_QWORD *)&v52[*(int *)(v58 + 20)] = v47;
  sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  sub_23DCFBB58(v46, v48, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
  sub_23DCF58EC(v48, v56, type metadata accessor for BalanceWidgetAccessoryCircularGaugeView);
  swift_storeEnumTagMultiPayload();
  sub_23DCF535C(&qword_256CFFAB8, type metadata accessor for BalanceWidgetAccessoryCircularWarmupView, (uint64_t)&unk_23DDCBCAC);
  sub_23DCF535C(&qword_256CFFAC0, type metadata accessor for BalanceWidgetAccessoryCircularGaugeView, (uint64_t)&unk_23DDCBC5C);
  sub_23DDC5E58();
  return sub_23DCF59A8(v48, type metadata accessor for BalanceWidgetAccessoryCircularGaugeView);
}

void sub_23DDAC99C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFFA90)
  {
    sub_23DD3816C(255, &qword_256CFFA98, type metadata accessor for BalanceWidgetAccessoryCircularWarmupView, type metadata accessor for BalanceWidgetAccessoryCircularGaugeView, MEMORY[0x24BDEF3B8]);
    v0 = sub_23DDC6278();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFFA90);
  }
}

uint64_t type metadata accessor for BalanceWidgetAccessoryCircularWarmupView(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFFC50);
}

uint64_t type metadata accessor for BalanceWidgetAccessoryCircularGaugeView(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFFBC0);
}

void sub_23DDACA38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_256CFFAA0)
  {
    sub_23DDAC99C();
    v5[0] = v2;
    v5[1] = sub_23DDB5928(&qword_256CFFAA8, (uint64_t (*)(uint64_t))sub_23DDAC99C, (uint64_t (*)(void))sub_23DDACAC4);
    v3 = MEMORY[0x242643B9C](a1, v5, MEMORY[0x24BDFAC50], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_256CFFAA0);
  }
}

unint64_t sub_23DDACAC4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFFAB0;
  if (!qword_256CFFAB0)
  {
    sub_23DD3816C(255, &qword_256CFFA98, type metadata accessor for BalanceWidgetAccessoryCircularWarmupView, type metadata accessor for BalanceWidgetAccessoryCircularGaugeView, MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFFAB8, type metadata accessor for BalanceWidgetAccessoryCircularWarmupView, (uint64_t)&unk_23DDCBCAC);
    v3[1] = sub_23DCF535C(&qword_256CFFAC0, type metadata accessor for BalanceWidgetAccessoryCircularGaugeView, (uint64_t)&unk_23DDCBC5C);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFFAB0);
  }
  return result;
}

uint64_t sub_23DDACB84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DCF58EC(*(_QWORD *)(v1 + 16), a1, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
}

uint64_t type metadata accessor for BalanceWidgetAccessoryCircularLabelView(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFFB30);
}

uint64_t sub_23DDACBBC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[2];

  v0 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDB5754(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDB5730(0);
  v7 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDAD174((uint64_t)v5);
  type metadata accessor for BalanceWidgetAccessoryCircularGaugeView(0);
  sub_23DD36388((uint64_t)v2);
  v10 = sub_23DCFCC70();
  sub_23DCF59A8((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  sub_23DCF58EC((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DDB5754);
  *(_QWORD *)&v9[*(int *)(v7 + 36)] = v10;
  sub_23DCF59A8((uint64_t)v5, (uint64_t (*)(_QWORD))sub_23DDB5754);
  v12[1] = &unk_250E9BE08;
  sub_23DD95E24((uint64_t)&unk_250E9BF88);
  sub_23DD0AA4C(0, (unint64_t *)&qword_256CFC758, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DD0A770((unint64_t *)&qword_256CFC828, MEMORY[0x24BEE12B0]);
  sub_23DDC668C();
  swift_bridgeObjectRelease();
  sub_23DDB58A8();
  sub_23DDC6188();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  return sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DDB5730);
}

uint64_t sub_23DDACDEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  id v13;
  uint64_t KeyPath;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v24 = a1;
  sub_23DDB51FC(0);
  v23 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (uint64_t *)((char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = sub_23DDC62A8();
  v4 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v21 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDB5158(0);
  v25 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for BalanceWidgetAccessoryCircularGaugeView(0);
  sub_23DD36388((uint64_t)v8);
  sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  v20 = sub_23DDC6284();
  sub_23DD36388((uint64_t)v8);
  v12 = sub_23DCFCB10();
  sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  sub_23DD36388((uint64_t)v8);
  v13 = sub_23DCFCFF4();
  sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  KeyPath = swift_getKeyPath();
  sub_23DD36388((uint64_t)v8);
  v15 = v21;
  v16 = v22;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v21, *MEMORY[0x24BDF40A8], v22);
  sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  v17 = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v3 + *(int *)(v23 + 28), v15, v16);
  *v3 = v17;
  sub_23DCF58EC((uint64_t)v3, (uint64_t)v11 + *(int *)(v25 + 36), (uint64_t (*)(_QWORD))sub_23DDB51FC);
  *v11 = v20;
  v11[1] = v12;
  v11[2] = KeyPath;
  v11[3] = (uint64_t)v13;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23DCF59A8((uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DDB51FC);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v16);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v26 = &unk_250E9BE08;
  sub_23DD95E24((uint64_t)&unk_250E9BFC8);
  sub_23DD0AA4C(0, (unint64_t *)&qword_256CFC758, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DD0A770((unint64_t *)&qword_256CFC828, MEMORY[0x24BEE12B0]);
  sub_23DDC668C();
  swift_bridgeObjectRelease();
  sub_23DDB53E0();
  sub_23DDC6188();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  return sub_23DCF59A8((uint64_t)v11, (uint64_t (*)(_QWORD))sub_23DDB5158);
}

uint64_t sub_23DDAD174@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t KeyPath;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a1;
  sub_23DDB51FC(0);
  v34 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v33 = (uint64_t *)((char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_23DDC62A8();
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDB5784(0, &qword_256CFFD38, (unint64_t *)&qword_256CFCA10, (void (*)(uint64_t))sub_23DDABDC0, sub_23DDB51FC);
  v40 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (uint64_t *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v37 = (uint64_t)&v32 - v10;
  sub_23DDB5B64(0, &qword_256CFFD70, MEMORY[0x24BDEF380]);
  v38 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v39 = (uint64_t)&v32 - v12;
  v13 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v32 - v17;
  type metadata accessor for BalanceWidgetAccessoryCircularGaugeView(0);
  sub_23DD36388((uint64_t)v18);
  sub_23DCFC3B0();
  v20 = v19;
  sub_23DCF59A8((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if (v20)
  {
    v21 = sub_23DDC6284();
    sub_23DD36388((uint64_t)v18);
    v22 = sub_23DCFD1D4();
    sub_23DCF59A8((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    KeyPath = swift_getKeyPath();
    sub_23DD36388((uint64_t)v15);
    v24 = v15[*(int *)(v13 + 20)];
    v26 = v35;
    v25 = v36;
    if (v24)
      v27 = (unsigned int *)MEMORY[0x24BDF40B8];
    else
      v27 = (unsigned int *)MEMORY[0x24BDF40A8];
    (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v5, *v27, v36);
    sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    v28 = swift_getKeyPath();
    v29 = v33;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))((char *)v33 + *(int *)(v34 + 28), v5, v25);
    *v29 = v28;
    sub_23DCF58EC((uint64_t)v29, (uint64_t)v8 + *(int *)(v40 + 36), (uint64_t (*)(_QWORD))sub_23DDB51FC);
    *v8 = v21;
    v8[1] = KeyPath;
    v8[2] = (uint64_t)v22;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_23DCF59A8((uint64_t)v29, (uint64_t (*)(_QWORD))sub_23DDB51FC);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v25);
    swift_release();
    swift_release();
    swift_release();
    v30 = v37;
    sub_23DDB5BE4((uint64_t)v8, v37);
    sub_23DDB5C48(v30, v39);
    swift_storeEnumTagMultiPayload();
    sub_23DDB59F4();
    sub_23DDC5E58();
    return sub_23DDB5CAC(v30);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    sub_23DDB59F4();
    return sub_23DDC5E58();
  }
}

uint64_t sub_23DDAD56C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD36388((uint64_t)v5);
  v6 = sub_23DCFD9EC(v1);
  sub_23DCF59A8((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  sub_23DD36388((uint64_t)v5);
  sub_23DCF59A8((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  *(_QWORD *)a1 = v6;
  *(_OWORD *)(a1 + 8) = xmmword_23DDC7850;
  v7 = sub_23DDB5668();
  sub_23DDACBBC();
  return sub_23DDACDEC(a1 + *(int *)(v7 + 60));
}

uint64_t sub_23DDAD668@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _OWORD *v67;
  uint64_t v73;
  uint64_t KeyPath;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t);
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  void *v142;
  _QWORD v143[36];
  _QWORD v144[36];
  _BYTE v145[288];

  v129 = a2;
  sub_23DDB51FC(0);
  v127 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v126 = (uint64_t *)((char *)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_23DDC62A8();
  v124 = *(_QWORD *)(v5 - 8);
  v125 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v123 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDB5158(0);
  v138 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v136 = (uint64_t *)((char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0];
  sub_23DD3816C(0, &qword_256CFFCD0, v11, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  MEMORY[0x24BDAC7A8](v12);
  v128 = (char *)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v139 = (uint64_t)&v107 - v15;
  v119 = sub_23DDC52DC();
  v117 = *(_QWORD *)(v119 - 8);
  MEMORY[0x24BDAC7A8](v119);
  v116 = (char *)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for WarmupProgressCounter();
  MEMORY[0x24BDAC7A8](v118);
  v115 = (char *)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v120 = (uint64_t)&v107 - v19;
  sub_23DDB50DC();
  v122 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v121 = (uint64_t)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD3816C(0, &qword_256CFFCC0, v22, v9, v10);
  MEMORY[0x24BDAC7A8](v23);
  v134 = (uint64_t)&v107 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v137 = (uint64_t)&v107 - v26;
  v27 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v107 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDB51A0(0, &qword_256CFFCB0, (void (*)(uint64_t))v9);
  v114 = v30;
  MEMORY[0x24BDAC7A8](v30);
  v113 = (char *)&v107 - v31;
  sub_23DDB5E30(0, &qword_256CFFCA8, MEMORY[0x24BDFAC10]);
  v135 = v32;
  v140 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v131 = (char *)&v107 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v141 = (char *)&v107 - v35;
  v36 = a1;
  v112 = a1;
  v144[0] = sub_23DD725B4();
  v144[1] = v37;
  sub_23DD0B190();
  v38 = sub_23DDC6098();
  v40 = v39;
  v42 = v41 & 1;
  v111 = type metadata accessor for BalanceWidgetAccessoryCircularWarmupView(0);
  v130 = v36 + *(int *)(v111 + 24);
  sub_23DD36388((uint64_t)v29);
  sub_23DCFD3B0();
  v108 = v29;
  sub_23DCF59A8((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  v132 = sub_23DDC6074();
  v133 = v43;
  v45 = v44;
  v47 = v46 & 1;
  sub_23DD0B1D4(v38, v40, v42);
  swift_release();
  swift_bridgeObjectRelease();
  sub_23DD36388((uint64_t)v29);
  v48 = sub_23DCFCE6C();
  sub_23DCF59A8((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  v144[0] = v48;
  v49 = v132;
  v50 = sub_23DDC6068();
  v109 = v50;
  v110 = v51;
  v53 = v52;
  v54 = v51;
  LOBYTE(v40) = v55 & 1;
  sub_23DD0B1D4(v49, v45, v47);
  swift_release();
  swift_bridgeObjectRelease();
  v144[0] = v50;
  v144[1] = v53;
  LOBYTE(v144[2]) = v40;
  v144[3] = v54;
  v143[0] = &unk_250E9BE08;
  sub_23DD95E24((uint64_t)&unk_250E9C008);
  sub_23DD0AA4C(0, (unint64_t *)&qword_256CFC758, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  v133 = v56;
  v132 = sub_23DD0A770((unint64_t *)&qword_256CFC828, MEMORY[0x24BEE12B0]);
  sub_23DDC668C();
  swift_bridgeObjectRelease();
  v57 = (uint64_t)v113;
  v58 = MEMORY[0x24BDF1FA8];
  sub_23DDC6188();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  sub_23DD0B1D4(v109, v53, v40);
  swift_bridgeObjectRelease();
  sub_23DDB5044();
  v59 = v131;
  sub_23DDC60F8();
  sub_23DDABFA4(v57, (uint64_t)&qword_256CFFCB0, (uint64_t)MEMORY[0x24BDF1088], v58, (uint64_t (*)(_QWORD))sub_23DDB51A0);
  (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v141, v59, v135);
  v61 = v116;
  v60 = v117;
  v62 = v119;
  (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v116, v112 + *(int *)(v111 + 20), v119);
  v63 = (uint64_t)v108;
  sub_23DD36388((uint64_t)v108);
  sub_23DCF59A8(v63, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  v64 = v118;
  v65 = (uint64_t)v115;
  v66 = &v115[*(int *)(v118 + 24)];
  v143[0] = swift_getKeyPath();
  sub_23DD50E00((uint64_t)v143);
  sub_23DD36810((uint64_t)v143, (uint64_t)v144);
  memcpy(v66, v144, 0x119uLL);
  (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v65, v61, v62);
  v67 = (_OWORD *)(v65 + *(int *)(v64 + 20));
  __asm { FMOV            V0.2D, #4.0 }
  *v67 = _Q0;
  v67[1] = xmmword_23DDCBAD0;
  v73 = v120;
  sub_23DCFBB58(v65, v120, (uint64_t (*)(_QWORD))type metadata accessor for WarmupProgressCounter);
  KeyPath = swift_getKeyPath();
  sub_23DD36388(v63);
  sub_23DCFD4CC(v145);
  sub_23DCF59A8(v63, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  v75 = v121;
  sub_23DCF58EC(v73, v121, (uint64_t (*)(_QWORD))type metadata accessor for WarmupProgressCounter);
  v76 = *(int *)(v122 + 36);
  *(_QWORD *)(v75 + v76) = KeyPath;
  memcpy((void *)(v75 + v76 + 8), v145, 0x118uLL);
  sub_23DCF59A8(v73, (uint64_t (*)(_QWORD))type metadata accessor for WarmupProgressCounter);
  v142 = &unk_250E9BE08;
  sub_23DD95E24((uint64_t)&unk_250E9C048);
  sub_23DDC668C();
  swift_bridgeObjectRelease();
  sub_23DDB5220();
  v77 = v134;
  sub_23DDC6188();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  sub_23DCF59A8(v75, (uint64_t (*)(_QWORD))sub_23DDB50DC);
  sub_23DDB555C(v77, v137, &qword_256CFFCC0, (uint64_t (*)(uint64_t))sub_23DDB50DC);
  sub_23DD36388(v63);
  sub_23DCF59A8(v63, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  v122 = sub_23DDC6284();
  sub_23DD36388(v63);
  v78 = sub_23DCFCB10();
  sub_23DCF59A8(v63, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  sub_23DD36388(v63);
  v79 = sub_23DCFCFF4();
  sub_23DCF59A8(v63, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  v80 = swift_getKeyPath();
  sub_23DD36388(v63);
  v81 = v123;
  v82 = v124;
  v83 = v125;
  (*(void (**)(char *, _QWORD, uint64_t))(v124 + 104))(v123, *MEMORY[0x24BDF40A8], v125);
  sub_23DCF59A8(v63, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  v84 = swift_getKeyPath();
  v85 = v126;
  v86 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
  v87 = v82;
  v88 = v83;
  v86((char *)v126 + *(int *)(v127 + 28), v81, v83);
  v89 = (uint64_t)v85;
  *v85 = v84;
  v90 = v136;
  sub_23DCF58EC(v89, (uint64_t)v136 + *(int *)(v138 + 36), (uint64_t (*)(_QWORD))sub_23DDB51FC);
  *v90 = v122;
  v90[1] = v78;
  v90[2] = v80;
  v90[3] = (uint64_t)v79;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23DCF59A8(v89, (uint64_t (*)(_QWORD))sub_23DDB51FC);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v81, v88);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v142 = &unk_250E9BE08;
  sub_23DD95E24((uint64_t)&unk_250E9C088);
  sub_23DDC668C();
  swift_bridgeObjectRelease();
  sub_23DDB53E0();
  v91 = (uint64_t)v128;
  v92 = (uint64_t)v136;
  sub_23DDC6188();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  sub_23DCF59A8(v92, (uint64_t (*)(_QWORD))sub_23DDB5158);
  v93 = v91;
  v94 = v139;
  sub_23DDB555C(v91, v139, &qword_256CFFCD0, (uint64_t (*)(uint64_t))sub_23DDB5158);
  v95 = *(void (**)(char *, char *, uint64_t))(v140 + 16);
  v96 = v131;
  v97 = v135;
  v95(v131, v141, v135);
  v98 = v137;
  v99 = v134;
  sub_23DDB55BC(v137, v134, &qword_256CFFCC0, (uint64_t (*)(uint64_t))sub_23DDB50DC);
  v100 = v94;
  v101 = v93;
  sub_23DDB55BC(v100, v93, &qword_256CFFCD0, (uint64_t (*)(uint64_t))sub_23DDB5158);
  v102 = v129;
  v95(v129, v96, v97);
  sub_23DDB4F68();
  v104 = v103;
  sub_23DDB55BC(v99, (uint64_t)&v102[*(int *)(v103 + 48)], &qword_256CFFCC0, (uint64_t (*)(uint64_t))sub_23DDB50DC);
  sub_23DDB55BC(v101, (uint64_t)&v102[*(int *)(v104 + 64)], &qword_256CFFCD0, (uint64_t (*)(uint64_t))sub_23DDB5158);
  sub_23DDB561C(v139, &qword_256CFFCD0, (uint64_t (*)(uint64_t))sub_23DDB5158);
  sub_23DDB561C(v98, &qword_256CFFCC0, (uint64_t (*)(uint64_t))sub_23DDB50DC);
  v105 = *(void (**)(char *, uint64_t))(v140 + 8);
  v105(v141, v97);
  sub_23DDB561C(v101, &qword_256CFFCD0, (uint64_t (*)(uint64_t))sub_23DDB5158);
  sub_23DDB561C(v99, &qword_256CFFCC0, (uint64_t (*)(uint64_t))sub_23DDB50DC);
  return ((uint64_t (*)(char *, uint64_t))v105)(v96, v97);
}

uint64_t sub_23DDAE254@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = sub_23DDC5E10();
  *(_QWORD *)(a1 + 8) = 0x4000000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  sub_23DDB4EE8();
  return sub_23DDAD668(v1, (char *)(a1 + *(int *)(v3 + 44)));
}

uint64_t sub_23DDAE298@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[4];

  sub_23DDB5D08();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23DDC5F24();
  v6 = sub_23DDC5F3C();
  v7 = sub_23DDC5F30();
  sub_23DDC5F30();
  if (sub_23DDC5F30() != v5)
    v7 = sub_23DDC5F30();
  sub_23DDC5F30();
  if (sub_23DDC5F30() != v6)
    v7 = sub_23DDC5F30();
  *v4 = v7;
  sub_23DDB5F58();
  v8 = sub_23DD6FBA0();
  v14[0] = MEMORY[0x24BEE4B08];
  v9 = sub_23DDB5FC0(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14[2] = v9;
  swift_getKeyPath();
  sub_23DD0AA4C(0, (unint64_t *)&qword_256CFC758, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DDB5E30(0, &qword_256CFFD88, MEMORY[0x24BDF29E0]);
  sub_23DD0A770(&qword_256CFC790, MEMORY[0x24BEE12D8]);
  sub_23DDB51A0(255, &qword_256CFFCB0, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
  v11 = v10;
  v12 = sub_23DDB5044();
  v14[0] = v11;
  v14[1] = v12;
  swift_getOpaqueTypeConformance2();
  sub_23DDC6374();
  return sub_23DCFBB58((uint64_t)v4, a1, (uint64_t (*)(_QWORD))sub_23DDB5D08);
}

uint64_t sub_23DDAE4BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v17[2] = a2;
  sub_23DDB51A0(0, &qword_256CFFCB0, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
  v17[1] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v17 - v4;
  v6 = *a1;
  v7 = a1[1];
  v18 = v6;
  v19 = v7;
  sub_23DD0B190();
  swift_bridgeObjectRetain();
  v8 = MEMORY[0x24BEE0D00];
  v9 = sub_23DDC6098();
  v11 = v10;
  v13 = v12 & 1;
  v18 = v9;
  v19 = v10;
  v20 = v12 & 1;
  v21 = v14;
  v17[3] = &unk_250E9BE08;
  sub_23DD95E24((uint64_t)&unk_250E9C0C8);
  sub_23DD0AA4C(0, (unint64_t *)&qword_256CFC758, v8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DD0A770((unint64_t *)&qword_256CFC828, MEMORY[0x24BEE12B0]);
  sub_23DDC668C();
  swift_bridgeObjectRelease();
  v15 = MEMORY[0x24BDF1FA8];
  sub_23DDC6188();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  sub_23DD0B1D4(v9, v11, v13);
  swift_bridgeObjectRelease();
  sub_23DDB5044();
  sub_23DDC6164();
  return sub_23DDABFA4((uint64_t)v5, (uint64_t)&qword_256CFFCB0, (uint64_t)MEMORY[0x24BDF1088], v15, (uint64_t (*)(_QWORD))sub_23DDB51A0);
}

char *sub_23DDAE6BC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  int *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, int *);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  _QWORD *v72;
  char *v73;
  uint64_t v74;

  v4 = type metadata accessor for BalanceWidgetViewModel();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = sub_23DDC5330();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(_QWORD *)((char *)a1 + v8[5]) = *(_QWORD *)((char *)a2 + v8[5]);
    v9 = v8[6];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v10 = *v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = sub_23DDC55A0();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v15 + 16))(v10, v11, v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
    v17 = v8[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v21 = *((_QWORD *)v20 - 1);
    v74 = v6;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = sub_23DDC512C();
      v24 = v21;
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      v25(v18, v19, v23);
      v26 = v20[5];
      v72 = a1;
      v27 = a2;
      v28 = v8;
      v29 = &v18[v26];
      v30 = &v19[v26];
      v25(&v18[v26], &v19[v26], v23);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v25(&v29[*(int *)(v31 + 36)], &v30[*(int *)(v31 + 36)], v23);
      v32 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v29[v32[5]] = *(_QWORD *)&v30[v32[5]];
      *(_QWORD *)&v29[v32[6]] = *(_QWORD *)&v30[v32[6]];
      *(_QWORD *)&v29[v32[7]] = *(_QWORD *)&v30[v32[7]];
      v33 = v20[6];
      v34 = &v18[v33];
      v35 = &v19[v33];
      *(_OWORD *)v34 = *(_OWORD *)v35;
      v34[16] = v35[16];
      v18[v20[7]] = v19[v20[7]];
      v18[v20[8]] = v19[v20[8]];
      v18[v20[9]] = v19[v20[9]];
      v36 = v20[10];
      v37 = &v18[v36];
      v38 = &v19[v36];
      v39 = *((_QWORD *)v38 + 1);
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = v39;
      v40 = v20[11];
      v41 = &v18[v40];
      v42 = &v19[v40];
      v43 = *((_QWORD *)v42 + 1);
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = v43;
      v44 = *(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8 = v28;
      a2 = v27;
      a1 = v72;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44(v18, 0, 1, v20);
    }
    v45 = v8[8];
    v46 = (char *)a1 + v45;
    v47 = (char *)a2 + v45;
    *(_QWORD *)((char *)a1 + v45) = *(_QWORD *)((char *)a2 + v45);
    v48 = type metadata accessor for OvernightMetricsChartPointCollection();
    v49 = *(int *)(v48 + 20);
    v50 = &v46[v49];
    v73 = &v47[v49];
    v51 = (char *)a1;
    v52 = v8;
    v53 = sub_23DDC51E0();
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
    swift_bridgeObjectRetain();
    v54(v50, v73, v53);
    *(_QWORD *)&v46[*(int *)(v48 + 24)] = *(_QWORD *)&v47[*(int *)(v48 + 24)];
    *(_QWORD *)&v51[v52[9]] = *(_QWORD *)((char *)a2 + v52[9]);
    *(_QWORD *)&v51[v52[10]] = *(_QWORD *)((char *)a2 + v52[10]);
    v55 = v52[11];
    v56 = &v51[v55];
    v57 = (char *)a2 + v55;
    v58 = sub_23DDC512C();
    v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59(v56, v57, v58);
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v61 = v60;
    v59(&v56[*(int *)(v60 + 36)], &v57[*(int *)(v60 + 36)], v58);
    v62 = v52[12];
    v63 = &v51[v62];
    v64 = (char *)a2 + v62;
    v59(&v51[v62], (char *)a2 + v62, v58);
    v59(&v63[*(int *)(v61 + 36)], &v64[*(int *)(v61 + 36)], v58);
    *(_QWORD *)&v51[v52[13]] = *(_QWORD *)((char *)a2 + v52[13]);
    v65 = v52[14];
    v13 = v51;
    *(_QWORD *)&v51[v65] = *(_QWORD *)((char *)a2 + v65);
    v66 = *(int *)(v74 + 20);
    v67 = &v51[v66];
    v68 = (char *)a2 + v66;
    v69 = sub_23DDC527C();
    v70 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v70(v67, v68, v69);
    v13[*(int *)(v74 + 24)] = *((_BYTE *)a2 + *(int *)(v74 + 24));
  }
  return v13;
}

uint64_t sub_23DDAEBC4(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  v4 = a1 + v3[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = sub_23DDC55A0();
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  v7 = a1 + v3[7];
  v8 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v9 = sub_23DDC512C();
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v10(v7, v9);
    v11 = v7 + *(int *)(v8 + 20);
    v10(v11, v9);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v10(v11 + *(int *)(v12 + 36), v9);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v13 = a1 + v3[8];
  swift_bridgeObjectRelease();
  v14 = v13 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v15 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = a1 + v3[11];
  v17 = sub_23DDC512C();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(v16, v17);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v20 = v19;
  v18(v16 + *(int *)(v19 + 36), v17);
  v21 = a1 + v3[12];
  v18(v21, v17);
  v18(v21 + *(int *)(v20 + 36), v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = a1 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  v23 = sub_23DDC527C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
}

uint64_t sub_23DDAEE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t, int *);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;

  v4 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v5[5]) = *(_QWORD *)(a2 + v5[5]);
  v6 = v5[6];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v7 = *v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = sub_23DDC55A0();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  swift_storeEnumTagMultiPayload();
  v12 = v5[7];
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v64 = v16;
    v18 = sub_23DDC512C();
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    v19(v13, v14, v18);
    v20 = v15[5];
    v21 = &v13[v20];
    v22 = &v14[v20];
    v19(&v13[v20], &v14[v20], v18);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v19(&v21[*(int *)(v23 + 36)], &v22[*(int *)(v23 + 36)], v18);
    v24 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v21[v24[5]] = *(_QWORD *)&v22[v24[5]];
    *(_QWORD *)&v21[v24[6]] = *(_QWORD *)&v22[v24[6]];
    *(_QWORD *)&v21[v24[7]] = *(_QWORD *)&v22[v24[7]];
    v25 = v15[6];
    v26 = &v13[v25];
    v27 = &v14[v25];
    *(_OWORD *)v26 = *(_OWORD *)v27;
    v26[16] = v27[16];
    v13[v15[7]] = v14[v15[7]];
    v13[v15[8]] = v14[v15[8]];
    v13[v15[9]] = v14[v15[9]];
    v28 = v15[10];
    v29 = &v13[v28];
    v30 = &v14[v28];
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    v32 = v15[11];
    v33 = &v13[v32];
    v34 = &v14[v32];
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = *(void (**)(char *, _QWORD, uint64_t, int *))(v64 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v13, 0, 1, v15);
  }
  v37 = v5[8];
  v38 = a1 + v37;
  v39 = a2 + v37;
  *(_QWORD *)(a1 + v37) = *(_QWORD *)(a2 + v37);
  v40 = type metadata accessor for OvernightMetricsChartPointCollection();
  v41 = *(int *)(v40 + 20);
  v42 = v38 + v41;
  v65 = v39 + v41;
  v43 = sub_23DDC51E0();
  v44 = a2;
  v45 = v5;
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16);
  swift_bridgeObjectRetain();
  v46(v42, v65, v43);
  *(_QWORD *)(v38 + *(int *)(v40 + 24)) = *(_QWORD *)(v39 + *(int *)(v40 + 24));
  *(_QWORD *)(a1 + v45[9]) = *(_QWORD *)(v44 + v45[9]);
  *(_QWORD *)(a1 + v45[10]) = *(_QWORD *)(v44 + v45[10]);
  v47 = v45[11];
  v48 = a1 + v47;
  v49 = v44 + v47;
  v50 = sub_23DDC512C();
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v51(v48, v49, v50);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v53 = v52;
  v51(v48 + *(int *)(v52 + 36), v49 + *(int *)(v52 + 36), v50);
  v54 = v45[12];
  v55 = a1 + v54;
  v56 = v44 + v54;
  v51(a1 + v54, v44 + v54, v50);
  v51(v55 + *(int *)(v53 + 36), v56 + *(int *)(v53 + 36), v50);
  *(_QWORD *)(a1 + v45[13]) = *(_QWORD *)(v44 + v45[13]);
  *(_QWORD *)(a1 + v45[14]) = *(_QWORD *)(v44 + v45[14]);
  v57 = type metadata accessor for BalanceWidgetViewModel();
  v58 = *(int *)(v57 + 20);
  v59 = a1 + v58;
  v60 = v44 + v58;
  v61 = sub_23DDC527C();
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v62(v59, v60, v61);
  *(_BYTE *)(a1 + *(int *)(v57 + 24)) = *(_BYTE *)(v44 + *(int *)(v57 + 24));
  return a1;
}

uint64_t sub_23DDAF348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void (*v39)(char *, _QWORD, uint64_t, int *);
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;

  v4 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v5[5]) = *(_QWORD *)(a2 + v5[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = v5[6];
    v7 = (_QWORD *)(a1 + v6);
    v8 = (_QWORD *)(a2 + v6);
    sub_23DCF59A8(a1 + v6, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v7 = *v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      v9 = sub_23DDC55A0();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  v12 = v5[7];
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      v22 = sub_23DDC512C();
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
      v23(v13, v14, v22);
      v24 = v15[5];
      v25 = &v13[v24];
      v81 = v16;
      v26 = &v14[v24];
      v23(&v13[v24], &v14[v24], v22);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v22);
      v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v25[v28[5]] = *(_QWORD *)&v26[v28[5]];
      *(_QWORD *)&v25[v28[6]] = *(_QWORD *)&v26[v28[6]];
      *(_QWORD *)&v25[v28[7]] = *(_QWORD *)&v26[v28[7]];
      v29 = v15[6];
      v30 = &v13[v29];
      v31 = &v14[v29];
      v32 = v31[16];
      *(_OWORD *)v30 = *(_OWORD *)v31;
      v30[16] = v32;
      v13[v15[7]] = v14[v15[7]];
      v13[v15[8]] = v14[v15[8]];
      v13[v15[9]] = v14[v15[9]];
      v33 = v15[10];
      v34 = &v13[v33];
      v35 = &v14[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
      v36 = v15[11];
      v37 = &v13[v36];
      v38 = &v14[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
      v39 = *(void (**)(char *, _QWORD, uint64_t, int *))(v81 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v39(v13, 0, 1, v15);
      goto LABEL_16;
    }
    v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  else
  {
    if (!v19)
    {
      v40 = sub_23DDC512C();
      v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 24);
      v41(v13, v14, v40);
      v42 = v15[5];
      v43 = &v13[v42];
      v44 = &v14[v42];
      v41(&v13[v42], &v14[v42], v40);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v41(&v43[*(int *)(v45 + 36)], &v44[*(int *)(v45 + 36)], v40);
      v46 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v43[v46[5]] = *(_QWORD *)&v44[v46[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v43[v46[6]] = *(_QWORD *)&v44[v46[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v43[v46[7]] = *(_QWORD *)&v44[v46[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v47 = v15[6];
      v48 = &v13[v47];
      v49 = &v14[v47];
      v50 = *(_OWORD *)v49;
      v48[16] = v49[16];
      *(_OWORD *)v48 = v50;
      v13[v15[7]] = v14[v15[7]];
      v13[v15[8]] = v14[v15[8]];
      v13[v15[9]] = v14[v15[9]];
      v51 = v15[10];
      v52 = &v13[v51];
      v53 = &v14[v51];
      *(_QWORD *)v52 = *(_QWORD *)v53;
      *((_QWORD *)v52 + 1) = *((_QWORD *)v53 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v54 = v15[11];
      v55 = &v13[v54];
      v56 = &v14[v54];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      *((_QWORD *)v55 + 1) = *((_QWORD *)v56 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_23DCF59A8((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v20);
  memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
LABEL_16:
  v57 = v5[8];
  v58 = a1 + v57;
  v59 = a2 + v57;
  *(_QWORD *)(a1 + v57) = *(_QWORD *)(a2 + v57);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v60 = type metadata accessor for OvernightMetricsChartPointCollection();
  v61 = *(int *)(v60 + 20);
  v62 = v58 + v61;
  v63 = v59 + v61;
  v64 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 24))(v62, v63, v64);
  *(_QWORD *)(v58 + *(int *)(v60 + 24)) = *(_QWORD *)(v59 + *(int *)(v60 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v5[9]) = *(_QWORD *)(a2 + v5[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v5[10]) = *(_QWORD *)(a2 + v5[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v65 = v5[11];
  v66 = a1 + v65;
  v67 = a2 + v65;
  v68 = sub_23DDC512C();
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 24);
  v69(v66, v67, v68);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v71 = v70;
  v69(v66 + *(int *)(v70 + 36), v67 + *(int *)(v70 + 36), v68);
  v72 = v5[12];
  v73 = a1 + v72;
  v74 = a2 + v72;
  v69(a1 + v72, a2 + v72, v68);
  v69(v73 + *(int *)(v71 + 36), v74 + *(int *)(v71 + 36), v68);
  *(_QWORD *)(a1 + v5[13]) = *(_QWORD *)(a2 + v5[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v5[14]) = *(_QWORD *)(a2 + v5[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v75 = type metadata accessor for BalanceWidgetViewModel();
  v76 = *(int *)(v75 + 20);
  v77 = a1 + v76;
  v78 = a2 + v76;
  v79 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 24))(v77, v78, v79);
  *(_BYTE *)(a1 + *(int *)(v75 + 24)) = *(_BYTE *)(a2 + *(int *)(v75 + 24));
  return a1;
}

uint64_t sub_23DDAFA04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;

  v4 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v5[5]) = *(_QWORD *)(a2 + v5[5]);
  v6 = v5[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = sub_23DDC55A0();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v7, v8, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  v13 = v5[7];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v17 = *((_QWORD *)v16 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v53 = v17;
    v19 = sub_23DDC512C();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
    v20(v14, v15, v19);
    v21 = v16[5];
    v22 = &v14[v21];
    v23 = &v15[v21];
    v20(&v14[v21], &v15[v21], v19);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v20(&v22[*(int *)(v24 + 36)], &v23[*(int *)(v24 + 36)], v19);
    v25 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v22[v25[5]] = *(_QWORD *)&v23[v25[5]];
    *(_QWORD *)&v22[v25[6]] = *(_QWORD *)&v23[v25[6]];
    *(_QWORD *)&v22[v25[7]] = *(_QWORD *)&v23[v25[7]];
    v26 = v16[6];
    v27 = &v14[v26];
    v28 = &v15[v26];
    *(_OWORD *)v27 = *(_OWORD *)v28;
    v27[16] = v28[16];
    v14[v16[7]] = v15[v16[7]];
    v14[v16[8]] = v15[v16[8]];
    v14[v16[9]] = v15[v16[9]];
    *(_OWORD *)&v14[v16[10]] = *(_OWORD *)&v15[v16[10]];
    *(_OWORD *)&v14[v16[11]] = *(_OWORD *)&v15[v16[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v53 + 56))(v14, 0, 1, v16);
  }
  v29 = v5[8];
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_QWORD *)(a1 + v29) = *(_QWORD *)(a2 + v29);
  v32 = type metadata accessor for OvernightMetricsChartPointCollection();
  v33 = *(int *)(v32 + 20);
  v34 = v30 + v33;
  v35 = v31 + v33;
  v36 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
  *(_QWORD *)(v30 + *(int *)(v32 + 24)) = *(_QWORD *)(v31 + *(int *)(v32 + 24));
  *(_QWORD *)(a1 + v5[9]) = *(_QWORD *)(a2 + v5[9]);
  *(_QWORD *)(a1 + v5[10]) = *(_QWORD *)(a2 + v5[10]);
  v37 = v5[11];
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = sub_23DDC512C();
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 32);
  v41(v38, v39, v40);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v43 = v42;
  v41(v38 + *(int *)(v42 + 36), v39 + *(int *)(v42 + 36), v40);
  v44 = v5[12];
  v45 = a1 + v44;
  v46 = a2 + v44;
  v41(a1 + v44, a2 + v44, v40);
  v41(v45 + *(int *)(v43 + 36), v46 + *(int *)(v43 + 36), v40);
  *(_QWORD *)(a1 + v5[13]) = *(_QWORD *)(a2 + v5[13]);
  *(_QWORD *)(a1 + v5[14]) = *(_QWORD *)(a2 + v5[14]);
  v47 = type metadata accessor for BalanceWidgetViewModel();
  v48 = *(int *)(v47 + 20);
  v49 = a1 + v48;
  v50 = a2 + v48;
  v51 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v49, v50, v51);
  *(_BYTE *)(a1 + *(int *)(v47 + 24)) = *(_BYTE *)(a2 + *(int *)(v47 + 24));
  return a1;
}

uint64_t sub_23DDAFE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, int *);
  int v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;

  v4 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v5[5]) = *(_QWORD *)(a2 + v5[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = v5[6];
    v7 = (void *)(a1 + v6);
    v8 = (const void *)(a2 + v6);
    sub_23DCF59A8(a1 + v6, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v9 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v10 = sub_23DDC55A0();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v7, v8, v10);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  v13 = v5[7];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      v23 = sub_23DDC512C();
      v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32);
      v24(v14, v15, v23);
      v25 = v16[5];
      v26 = &v14[v25];
      v77 = v17;
      v27 = &v15[v25];
      v24(&v14[v25], &v15[v25], v23);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v24(&v26[*(int *)(v28 + 36)], &v27[*(int *)(v28 + 36)], v23);
      v29 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v26[v29[5]] = *(_QWORD *)&v27[v29[5]];
      *(_QWORD *)&v26[v29[6]] = *(_QWORD *)&v27[v29[6]];
      *(_QWORD *)&v26[v29[7]] = *(_QWORD *)&v27[v29[7]];
      v30 = v16[6];
      v31 = &v14[v30];
      v32 = &v15[v30];
      *(_OWORD *)v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
      v14[v16[7]] = v15[v16[7]];
      v14[v16[8]] = v15[v16[8]];
      v14[v16[9]] = v15[v16[9]];
      *(_OWORD *)&v14[v16[10]] = *(_OWORD *)&v15[v16[10]];
      *(_OWORD *)&v14[v16[11]] = *(_OWORD *)&v15[v16[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v77 + 56))(v14, 0, 1, v16);
      goto LABEL_16;
    }
    v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  else
  {
    if (!v20)
    {
      v33 = sub_23DDC512C();
      v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 40);
      v34(v14, v15, v33);
      v35 = v16[5];
      v36 = &v14[v35];
      v37 = &v15[v35];
      v34(&v14[v35], &v15[v35], v33);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v34(&v36[*(int *)(v38 + 36)], &v37[*(int *)(v38 + 36)], v33);
      v39 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v36[v39[5]] = *(_QWORD *)&v37[v39[5]];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v36[v39[6]] = *(_QWORD *)&v37[v39[6]];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v36[v39[7]] = *(_QWORD *)&v37[v39[7]];
      swift_bridgeObjectRelease();
      v40 = v16[6];
      v41 = &v14[v40];
      v42 = &v15[v40];
      *(_OWORD *)v41 = *(_OWORD *)v42;
      v41[16] = v42[16];
      v14[v16[7]] = v15[v16[7]];
      v14[v16[8]] = v15[v16[8]];
      v14[v16[9]] = v15[v16[9]];
      v43 = v16[10];
      v44 = &v14[v43];
      v45 = (uint64_t *)&v15[v43];
      v47 = *v45;
      v46 = v45[1];
      *(_QWORD *)v44 = v47;
      *((_QWORD *)v44 + 1) = v46;
      swift_bridgeObjectRelease();
      v48 = v16[11];
      v49 = &v14[v48];
      v50 = (uint64_t *)&v15[v48];
      v52 = *v50;
      v51 = v50[1];
      *(_QWORD *)v49 = v52;
      *((_QWORD *)v49 + 1) = v51;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_23DCF59A8((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v21);
  memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
LABEL_16:
  v53 = v5[8];
  v54 = a1 + v53;
  v55 = a2 + v53;
  *(_QWORD *)(a1 + v53) = *(_QWORD *)(a2 + v53);
  swift_bridgeObjectRelease();
  v56 = type metadata accessor for OvernightMetricsChartPointCollection();
  v57 = *(int *)(v56 + 20);
  v58 = v54 + v57;
  v59 = v55 + v57;
  v60 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 40))(v58, v59, v60);
  *(_QWORD *)(v54 + *(int *)(v56 + 24)) = *(_QWORD *)(v55 + *(int *)(v56 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v5[9]) = *(_QWORD *)(a2 + v5[9]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v5[10]) = *(_QWORD *)(a2 + v5[10]);
  swift_bridgeObjectRelease();
  v61 = v5[11];
  v62 = a1 + v61;
  v63 = a2 + v61;
  v64 = sub_23DDC512C();
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 40);
  v65(v62, v63, v64);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v67 = v66;
  v65(v62 + *(int *)(v66 + 36), v63 + *(int *)(v66 + 36), v64);
  v68 = v5[12];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v65(a1 + v68, a2 + v68, v64);
  v65(v69 + *(int *)(v67 + 36), v70 + *(int *)(v67 + 36), v64);
  *(_QWORD *)(a1 + v5[13]) = *(_QWORD *)(a2 + v5[13]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v5[14]) = *(_QWORD *)(a2 + v5[14]);
  swift_bridgeObjectRelease();
  v71 = type metadata accessor for BalanceWidgetViewModel();
  v72 = *(int *)(v71 + 20);
  v73 = a1 + v72;
  v74 = a2 + v72;
  v75 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 40))(v73, v74, v75);
  *(_BYTE *)(a1 + *(int *)(v71 + 24)) = *(_BYTE *)(a2 + *(int *)(v71 + 24));
  return a1;
}

uint64_t sub_23DDB0440()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDB044C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BalanceWidgetViewModel();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_23DDB0488()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDB0494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BalanceWidgetViewModel();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_23DDB04D4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BalanceWidgetViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_23DDB053C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  int *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, int *);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v78;
  char *v79;
  uint64_t v80;

  v3 = a2;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC5330();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v3, v7);
    v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(_QWORD *)((char *)a1 + v8[5]) = *(_QWORD *)((char *)v3 + v8[5]);
    v9 = v8[6];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)v3 + v9);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v10 = *v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = sub_23DDC55A0();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v15 + 16))(v10, v11, v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
    v17 = v8[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)v3 + v17;
    v20 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v21 = *((_QWORD *)v20 - 1);
    v80 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = sub_23DDC512C();
      v24 = v21;
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      v25(v18, v19, v23);
      v26 = v20[5];
      v78 = a1;
      v27 = v3;
      v28 = v8;
      v29 = &v18[v26];
      v30 = &v19[v26];
      v25(&v18[v26], &v19[v26], v23);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v25(&v29[*(int *)(v31 + 36)], &v30[*(int *)(v31 + 36)], v23);
      v32 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v29[v32[5]] = *(_QWORD *)&v30[v32[5]];
      *(_QWORD *)&v29[v32[6]] = *(_QWORD *)&v30[v32[6]];
      *(_QWORD *)&v29[v32[7]] = *(_QWORD *)&v30[v32[7]];
      v33 = v20[6];
      v34 = &v18[v33];
      v35 = &v19[v33];
      *(_OWORD *)v34 = *(_OWORD *)v35;
      v34[16] = v35[16];
      v18[v20[7]] = v19[v20[7]];
      v18[v20[8]] = v19[v20[8]];
      v18[v20[9]] = v19[v20[9]];
      v36 = v20[10];
      v37 = &v18[v36];
      v38 = &v19[v36];
      v39 = *((_QWORD *)v38 + 1);
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = v39;
      v40 = v20[11];
      v41 = &v18[v40];
      v42 = &v19[v40];
      v43 = *((_QWORD *)v42 + 1);
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = v43;
      v44 = *(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8 = v28;
      v3 = v27;
      a1 = v78;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44(v18, 0, 1, v20);
    }
    v45 = v8[8];
    v46 = (char *)a1 + v45;
    v47 = (char *)v3 + v45;
    *(_QWORD *)((char *)a1 + v45) = *(_QWORD *)((char *)v3 + v45);
    v48 = type metadata accessor for OvernightMetricsChartPointCollection();
    v49 = *(int *)(v48 + 20);
    v50 = &v46[v49];
    v79 = &v47[v49];
    v51 = (char *)a1;
    v52 = v8;
    v53 = sub_23DDC51E0();
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
    swift_bridgeObjectRetain();
    v54(v50, v79, v53);
    *(_QWORD *)&v46[*(int *)(v48 + 24)] = *(_QWORD *)&v47[*(int *)(v48 + 24)];
    *(_QWORD *)&v51[v52[9]] = *(_QWORD *)((char *)v3 + v52[9]);
    *(_QWORD *)&v51[v52[10]] = *(_QWORD *)((char *)v3 + v52[10]);
    v55 = v52[11];
    v56 = &v51[v55];
    v57 = (char *)v3 + v55;
    v58 = sub_23DDC512C();
    v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59(v56, v57, v58);
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v61 = v60;
    v59(&v56[*(int *)(v60 + 36)], &v57[*(int *)(v60 + 36)], v58);
    v62 = v52[12];
    v63 = &v51[v62];
    v64 = (char *)v3 + v62;
    v59(&v51[v62], (char *)v3 + v62, v58);
    v59(&v63[*(int *)(v61 + 36)], &v64[*(int *)(v61 + 36)], v58);
    *(_QWORD *)&v51[v52[13]] = *(_QWORD *)((char *)v3 + v52[13]);
    v65 = v52[14];
    v13 = v51;
    *(_QWORD *)&v51[v65] = *(_QWORD *)((char *)v3 + v65);
    v66 = type metadata accessor for BalanceWidgetViewModel();
    v67 = *(int *)(v66 + 20);
    v68 = &v51[v67];
    v69 = (char *)v3 + v67;
    v70 = sub_23DDC527C();
    v71 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v71(v68, v69, v70);
    *((_BYTE *)v13 + *(int *)(v66 + 24)) = *((_BYTE *)v3 + *(int *)(v66 + 24));
    v72 = *(int *)(v80 + 20);
    v73 = (_QWORD *)((char *)v13 + v72);
    v74 = (_QWORD *)((char *)v3 + v72);
    sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v75 = sub_23DDC656C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
      v76 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
      *((_BYTE *)v73 + *(int *)(v76 + 20)) = *((_BYTE *)v74 + *(int *)(v76 + 20));
    }
    else
    {
      *v73 = *v74;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v13;
}

uint64_t sub_23DDB0AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  v6 = a1 + v5[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = sub_23DDC55A0();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  v9 = a1 + v5[7];
  v10 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = sub_23DDC512C();
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v9, v11);
    v13 = v9 + *(int *)(v10 + 20);
    v12(v13, v11);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v12(v13 + *(int *)(v14 + 36), v11);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = a1 + v5[8];
  swift_bridgeObjectRelease();
  v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v17 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = a1 + v5[11];
  v19 = sub_23DDC512C();
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v18, v19);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v22 = v21;
  v20(v18 + *(int *)(v21 + 36), v19);
  v23 = a1 + v5[12];
  v20(v23, v19);
  v20(v23 + *(int *)(v22 + 36), v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = a1 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  v25 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = a1 + *(int *)(a2 + 20);
  sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v27 = sub_23DDC656C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
}

uint64_t sub_23DDB0E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  int *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, _QWORD, uint64_t, int *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v9 = *v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = sub_23DDC55A0();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  swift_storeEnumTagMultiPayload();
  v14 = v7[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  v78 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = sub_23DDC512C();
    v21 = v18;
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v22(v15, v16, v20);
    v23 = v17[5];
    v76 = a2;
    v24 = a1;
    v25 = v7;
    v26 = &v15[v23];
    v27 = &v16[v23];
    v22(&v15[v23], &v16[v23], v20);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v22(&v26[*(int *)(v28 + 36)], &v27[*(int *)(v28 + 36)], v20);
    v29 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v26[v29[5]] = *(_QWORD *)&v27[v29[5]];
    *(_QWORD *)&v26[v29[6]] = *(_QWORD *)&v27[v29[6]];
    *(_QWORD *)&v26[v29[7]] = *(_QWORD *)&v27[v29[7]];
    v30 = v17[6];
    v31 = &v15[v30];
    v32 = &v16[v30];
    *(_OWORD *)v31 = *(_OWORD *)v32;
    v31[16] = v32[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v33 = v17[10];
    v34 = &v15[v33];
    v35 = &v16[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = v17[11];
    v38 = &v15[v37];
    v39 = &v16[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v41 = *(void (**)(char *, _QWORD, uint64_t, int *))(v21 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = v25;
    a1 = v24;
    a2 = v76;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41(v15, 0, 1, v17);
  }
  v42 = v7[8];
  v43 = a1 + v42;
  v44 = a2 + v42;
  *(_QWORD *)(a1 + v42) = *(_QWORD *)(a2 + v42);
  v45 = type metadata accessor for OvernightMetricsChartPointCollection();
  v46 = *(int *)(v45 + 20);
  v47 = v43 + v46;
  v77 = v44 + v46;
  v48 = a1;
  v49 = v7;
  v50 = sub_23DDC51E0();
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
  swift_bridgeObjectRetain();
  v51(v47, v77, v50);
  *(_QWORD *)(v43 + *(int *)(v45 + 24)) = *(_QWORD *)(v44 + *(int *)(v45 + 24));
  *(_QWORD *)(v48 + v49[9]) = *(_QWORD *)(a2 + v49[9]);
  *(_QWORD *)(v48 + v49[10]) = *(_QWORD *)(a2 + v49[10]);
  v52 = v49[11];
  v53 = v48 + v52;
  v54 = a2 + v52;
  v55 = sub_23DDC512C();
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v56(v53, v54, v55);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v58 = v57;
  v56(v53 + *(int *)(v57 + 36), v54 + *(int *)(v57 + 36), v55);
  v59 = v49[12];
  v60 = v48 + v59;
  v61 = a2 + v59;
  v56(v48 + v59, a2 + v59, v55);
  v56(v60 + *(int *)(v58 + 36), v61 + *(int *)(v58 + 36), v55);
  *(_QWORD *)(v48 + v49[13]) = *(_QWORD *)(a2 + v49[13]);
  v62 = v49[14];
  v63 = v48;
  *(_QWORD *)(v48 + v62) = *(_QWORD *)(a2 + v62);
  v64 = type metadata accessor for BalanceWidgetViewModel();
  v65 = *(int *)(v64 + 20);
  v66 = v48 + v65;
  v67 = a2 + v65;
  v68 = sub_23DDC527C();
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69(v66, v67, v68);
  *(_BYTE *)(v63 + *(int *)(v64 + 24)) = *(_BYTE *)(a2 + *(int *)(v64 + 24));
  v70 = *(int *)(v78 + 20);
  v71 = (_QWORD *)(v63 + v70);
  v72 = (_QWORD *)(a2 + v70);
  sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v73 = sub_23DDC656C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
    v74 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
    *((_BYTE *)v71 + *(int *)(v74 + 20)) = *((_BYTE *)v72 + *(int *)(v74 + 20));
  }
  else
  {
    *v71 = *v72;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return v63;
}

uint64_t sub_23DDB13A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, int *);
  int v20;
  int v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, _QWORD, uint64_t, int *);
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v8 = v7[6];
    v9 = (_QWORD *)(a1 + v8);
    v10 = (_QWORD *)(a2 + v8);
    sub_23DCF59A8(a1 + v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v9 = *v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      v11 = sub_23DDC55A0();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  v14 = v7[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (v21)
    {
      v22 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_13:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v22);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      goto LABEL_16;
    }
    v24 = sub_23DDC512C();
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v25(v15, v16, v24);
    v90 = v18;
    v91 = a3;
    v26 = v25;
    v27 = v17[5];
    v28 = &v15[v27];
    v29 = &v16[v27];
    v26(&v15[v27], &v16[v27], v24);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v26(&v28[*(int *)(v30 + 36)], &v29[*(int *)(v30 + 36)], v24);
    v31 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v28[v31[5]] = *(_QWORD *)&v29[v31[5]];
    *(_QWORD *)&v28[v31[6]] = *(_QWORD *)&v29[v31[6]];
    *(_QWORD *)&v28[v31[7]] = *(_QWORD *)&v29[v31[7]];
    v32 = v17[6];
    v33 = &v15[v32];
    v34 = &v16[v32];
    v35 = v34[16];
    *(_OWORD *)v33 = *(_OWORD *)v34;
    v33[16] = v35;
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v36 = v17[10];
    v37 = &v15[v36];
    v38 = &v16[v36];
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
    v39 = v17[11];
    v40 = &v15[v39];
    v41 = &v16[v39];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
    v42 = *(void (**)(char *, _QWORD, uint64_t, int *))(v90 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3 = v91;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42(v15, 0, 1, v17);
  }
  else
  {
    if (v21)
    {
      sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v22 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_13;
    }
    v43 = sub_23DDC512C();
    v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 24);
    v44(v15, v16, v43);
    v45 = v17[5];
    v92 = a3;
    v46 = &v15[v45];
    v47 = &v16[v45];
    v44(&v15[v45], &v16[v45], v43);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v44(&v46[*(int *)(v48 + 36)], &v47[*(int *)(v48 + 36)], v43);
    v49 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v46[v49[5]] = *(_QWORD *)&v47[v49[5]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v46[v49[6]] = *(_QWORD *)&v47[v49[6]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v46[v49[7]] = *(_QWORD *)&v47[v49[7]];
    a3 = v92;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v50 = v17[6];
    v51 = &v15[v50];
    v52 = &v16[v50];
    v53 = *(_OWORD *)v52;
    v51[16] = v52[16];
    *(_OWORD *)v51 = v53;
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v54 = v17[10];
    v55 = &v15[v54];
    v56 = &v16[v54];
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *((_QWORD *)v55 + 1) = *((_QWORD *)v56 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v57 = v17[11];
    v58 = &v15[v57];
    v59 = &v16[v57];
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *((_QWORD *)v58 + 1) = *((_QWORD *)v59 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_16:
  v60 = v7[8];
  v61 = a1 + v60;
  v62 = a2 + v60;
  *(_QWORD *)(a1 + v60) = *(_QWORD *)(a2 + v60);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63 = type metadata accessor for OvernightMetricsChartPointCollection();
  v64 = *(int *)(v63 + 20);
  v65 = v61 + v64;
  v66 = v62 + v64;
  v67 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 24))(v65, v66, v67);
  *(_QWORD *)(v61 + *(int *)(v63 + 24)) = *(_QWORD *)(v62 + *(int *)(v63 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v68 = v7[11];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = sub_23DDC512C();
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 24);
  v72(v69, v70, v71);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v74 = v73;
  v72(v69 + *(int *)(v73 + 36), v70 + *(int *)(v73 + 36), v71);
  v75 = v7[12];
  v76 = a1 + v75;
  v77 = a2 + v75;
  v72(a1 + v75, a2 + v75, v71);
  v72(v76 + *(int *)(v74 + 36), v77 + *(int *)(v74 + 36), v71);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v78 = type metadata accessor for BalanceWidgetViewModel();
  v79 = *(int *)(v78 + 20);
  v80 = a1 + v79;
  v81 = a2 + v79;
  v82 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 24))(v80, v81, v82);
  *(_BYTE *)(a1 + *(int *)(v78 + 24)) = *(_BYTE *)(a2 + *(int *)(v78 + 24));
  if (a1 != a2)
  {
    v83 = *(int *)(a3 + 20);
    v84 = (_QWORD *)(a1 + v83);
    v85 = (_QWORD *)(a2 + v83);
    v86 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_23DDABFA4(a1 + v83, (uint64_t)&qword_256CFC588, (uint64_t)type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t)MEMORY[0x24BDEB560], (uint64_t (*)(_QWORD))sub_23DCFB328);
    sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, v86);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v87 = sub_23DDC656C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v84, v85, v87);
      v88 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
      *((_BYTE *)v84 + *(int *)(v88 + 20)) = *((_BYTE *)v85 + *(int *)(v88 + 20));
    }
    else
    {
      *v84 = *v85;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23DDB1B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = sub_23DDC55A0();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  v15 = v7[7];
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v19 = *((_QWORD *)v18 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = sub_23DDC512C();
    v62 = v19;
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
    v22(v16, v17, v21);
    v23 = v18[5];
    v63 = a3;
    v24 = &v16[v23];
    v25 = &v17[v23];
    v22(&v16[v23], &v17[v23], v21);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v21);
    v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v24[v27[5]] = *(_QWORD *)&v25[v27[5]];
    *(_QWORD *)&v24[v27[6]] = *(_QWORD *)&v25[v27[6]];
    *(_QWORD *)&v24[v27[7]] = *(_QWORD *)&v25[v27[7]];
    a3 = v63;
    v28 = v18[6];
    v29 = &v16[v28];
    v30 = &v17[v28];
    *(_OWORD *)v29 = *(_OWORD *)v30;
    v29[16] = v30[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
    *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v62 + 56))(v16, 0, 1, v18);
  }
  v31 = v7[8];
  v32 = a1 + v31;
  v33 = a2 + v31;
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  v34 = type metadata accessor for OvernightMetricsChartPointCollection();
  v35 = *(int *)(v34 + 20);
  v36 = v32 + v35;
  v37 = v33 + v35;
  v38 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  *(_QWORD *)(v32 + *(int *)(v34 + 24)) = *(_QWORD *)(v33 + *(int *)(v34 + 24));
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  v39 = v7[11];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_23DDC512C();
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32);
  v43(v40, v41, v42);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v45 = v44;
  v43(v40 + *(int *)(v44 + 36), v41 + *(int *)(v44 + 36), v42);
  v46 = v7[12];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v43(a1 + v46, a2 + v46, v42);
  v43(v47 + *(int *)(v45 + 36), v48 + *(int *)(v45 + 36), v42);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v49 = type metadata accessor for BalanceWidgetViewModel();
  v50 = *(int *)(v49 + 20);
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  *(_BYTE *)(a1 + *(int *)(v49 + 24)) = *(_BYTE *)(a2 + *(int *)(v49 + 24));
  v54 = *(int *)(a3 + 20);
  v55 = (_BYTE *)(a1 + v54);
  v56 = (_BYTE *)(a2 + v54);
  sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v58 = v57;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v59 = sub_23DDC656C();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v55, v56, v59);
    v60 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
    v55[*(int *)(v60 + 20)] = v56[*(int *)(v60 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  return a1;
}

uint64_t sub_23DDB2028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, int *);
  int v21;
  int v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v8 = v7[6];
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    sub_23DCF59A8(a1 + v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v12 = sub_23DDC55A0();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  v15 = v7[7];
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v19 = *((_QWORD *)v18 - 1);
  v20 = *(uint64_t (**)(char *, uint64_t, int *))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (v22)
    {
      v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_13:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v23);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      goto LABEL_16;
    }
    v25 = sub_23DDC512C();
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
    v26(v16, v17, v25);
    v92 = v19;
    v93 = a3;
    v27 = v26;
    v28 = v18[5];
    v29 = &v16[v28];
    v30 = &v17[v28];
    v27(&v16[v28], &v17[v28], v25);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v27(&v29[*(int *)(v31 + 36)], &v30[*(int *)(v31 + 36)], v25);
    v32 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v29[v32[5]] = *(_QWORD *)&v30[v32[5]];
    *(_QWORD *)&v29[v32[6]] = *(_QWORD *)&v30[v32[6]];
    v33 = v32[7];
    v34 = *(_QWORD *)&v30[v33];
    a3 = v93;
    *(_QWORD *)&v29[v33] = v34;
    v35 = v18[6];
    v36 = &v16[v35];
    v37 = &v17[v35];
    *(_OWORD *)v36 = *(_OWORD *)v37;
    v36[16] = v37[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
    *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v92 + 56))(v16, 0, 1, v18);
  }
  else
  {
    if (v22)
    {
      sub_23DCF59A8((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_13;
    }
    v38 = sub_23DDC512C();
    v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40);
    v39(v16, v17, v38);
    v40 = v18[5];
    v41 = &v16[v40];
    v94 = a3;
    v42 = &v17[v40];
    v39(&v16[v40], &v17[v40], v38);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v39(&v41[*(int *)(v43 + 36)], &v42[*(int *)(v43 + 36)], v38);
    v44 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v41[v44[5]] = *(_QWORD *)&v42[v44[5]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v41[v44[6]] = *(_QWORD *)&v42[v44[6]];
    swift_bridgeObjectRelease();
    v45 = v44[7];
    v46 = *(_QWORD *)&v42[v45];
    a3 = v94;
    *(_QWORD *)&v41[v45] = v46;
    swift_bridgeObjectRelease();
    v47 = v18[6];
    v48 = &v16[v47];
    v49 = &v17[v47];
    *(_OWORD *)v48 = *(_OWORD *)v49;
    v48[16] = v49[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    v50 = v18[10];
    v51 = &v16[v50];
    v52 = &v17[v50];
    v54 = *(_QWORD *)v52;
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = v54;
    *((_QWORD *)v51 + 1) = v53;
    swift_bridgeObjectRelease();
    v55 = v18[11];
    v56 = &v16[v55];
    v57 = &v17[v55];
    v59 = *(_QWORD *)v57;
    v58 = *((_QWORD *)v57 + 1);
    *(_QWORD *)v56 = v59;
    *((_QWORD *)v56 + 1) = v58;
    swift_bridgeObjectRelease();
  }
LABEL_16:
  v60 = v7[8];
  v61 = a1 + v60;
  v62 = a2 + v60;
  *(_QWORD *)(a1 + v60) = *(_QWORD *)(a2 + v60);
  swift_bridgeObjectRelease();
  v63 = type metadata accessor for OvernightMetricsChartPointCollection();
  v64 = *(int *)(v63 + 20);
  v65 = v61 + v64;
  v66 = v62 + v64;
  v67 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 40))(v65, v66, v67);
  *(_QWORD *)(v61 + *(int *)(v63 + 24)) = *(_QWORD *)(v62 + *(int *)(v63 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  swift_bridgeObjectRelease();
  v68 = v7[11];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = sub_23DDC512C();
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 40);
  v72(v69, v70, v71);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v74 = v73;
  v72(v69 + *(int *)(v73 + 36), v70 + *(int *)(v73 + 36), v71);
  v75 = v7[12];
  v76 = a1 + v75;
  v77 = a2 + v75;
  v72(a1 + v75, a2 + v75, v71);
  v72(v76 + *(int *)(v74 + 36), v77 + *(int *)(v74 + 36), v71);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  swift_bridgeObjectRelease();
  v78 = type metadata accessor for BalanceWidgetViewModel();
  v79 = *(int *)(v78 + 20);
  v80 = a1 + v79;
  v81 = a2 + v79;
  v82 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 40))(v80, v81, v82);
  *(_BYTE *)(a1 + *(int *)(v78 + 24)) = *(_BYTE *)(a2 + *(int *)(v78 + 24));
  if (a1 != a2)
  {
    v83 = *(int *)(a3 + 20);
    v84 = (_BYTE *)(a1 + v83);
    v85 = (_BYTE *)(a2 + v83);
    v86 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_23DDABFA4(a1 + v83, (uint64_t)&qword_256CFC588, (uint64_t)type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t)MEMORY[0x24BDEB560], (uint64_t (*)(_QWORD))sub_23DCFB328);
    sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, v86);
    v88 = v87;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v89 = sub_23DDC656C();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v84, v85, v89);
      v90 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
      v84[*(int *)(v90 + 20)] = v85[*(int *)(v90 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_23DDB2710()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for BalanceWidgetViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    sub_23DCFB328(0, qword_256CFF9F8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x24BDEB580]);
    v8 = v11;
    v12 = *(_QWORD *)(v11 - 8);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_23DDB27AC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = type metadata accessor for BalanceWidgetViewModel();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_23DCFB328(0, qword_256CFF9F8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x24BDEB580]);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23DDB2850()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for BalanceWidgetViewModel();
  if (v0 <= 0x3F)
  {
    sub_23DCFB328(319, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *sub_23DDB28EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  int *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, int *);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v82;
  char *v83;
  uint64_t v84;

  v3 = a2;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC5330();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v3, v7);
    v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(_QWORD *)((char *)a1 + v8[5]) = *(_QWORD *)((char *)v3 + v8[5]);
    v9 = v8[6];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)v3 + v9);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v10 = *v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = sub_23DDC55A0();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v15 + 16))(v10, v11, v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
    v17 = v8[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)v3 + v17;
    v20 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v21 = *((_QWORD *)v20 - 1);
    v84 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = sub_23DDC512C();
      v24 = v21;
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      v25(v18, v19, v23);
      v26 = v20[5];
      v82 = a1;
      v27 = v3;
      v28 = v8;
      v29 = &v18[v26];
      v30 = &v19[v26];
      v25(&v18[v26], &v19[v26], v23);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v25(&v29[*(int *)(v31 + 36)], &v30[*(int *)(v31 + 36)], v23);
      v32 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v29[v32[5]] = *(_QWORD *)&v30[v32[5]];
      *(_QWORD *)&v29[v32[6]] = *(_QWORD *)&v30[v32[6]];
      *(_QWORD *)&v29[v32[7]] = *(_QWORD *)&v30[v32[7]];
      v33 = v20[6];
      v34 = &v18[v33];
      v35 = &v19[v33];
      *(_OWORD *)v34 = *(_OWORD *)v35;
      v34[16] = v35[16];
      v18[v20[7]] = v19[v20[7]];
      v18[v20[8]] = v19[v20[8]];
      v18[v20[9]] = v19[v20[9]];
      v36 = v20[10];
      v37 = &v18[v36];
      v38 = &v19[v36];
      v39 = *((_QWORD *)v38 + 1);
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = v39;
      v40 = v20[11];
      v41 = &v18[v40];
      v42 = &v19[v40];
      v43 = *((_QWORD *)v42 + 1);
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = v43;
      v44 = *(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8 = v28;
      v3 = v27;
      a1 = v82;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44(v18, 0, 1, v20);
    }
    v45 = v8[8];
    v46 = (char *)a1 + v45;
    v47 = (char *)v3 + v45;
    *(_QWORD *)((char *)a1 + v45) = *(_QWORD *)((char *)v3 + v45);
    v48 = type metadata accessor for OvernightMetricsChartPointCollection();
    v49 = *(int *)(v48 + 20);
    v50 = &v46[v49];
    v83 = &v47[v49];
    v51 = (char *)a1;
    v52 = v8;
    v53 = sub_23DDC51E0();
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
    swift_bridgeObjectRetain();
    v54(v50, v83, v53);
    *(_QWORD *)&v46[*(int *)(v48 + 24)] = *(_QWORD *)&v47[*(int *)(v48 + 24)];
    *(_QWORD *)&v51[v52[9]] = *(_QWORD *)((char *)v3 + v52[9]);
    *(_QWORD *)&v51[v52[10]] = *(_QWORD *)((char *)v3 + v52[10]);
    v55 = v52[11];
    v56 = &v51[v55];
    v57 = (char *)v3 + v55;
    v58 = sub_23DDC512C();
    v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59(v56, v57, v58);
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v61 = v60;
    v59(&v56[*(int *)(v60 + 36)], &v57[*(int *)(v60 + 36)], v58);
    v62 = v52[12];
    v63 = &v51[v62];
    v64 = (char *)v3 + v62;
    v59(&v51[v62], (char *)v3 + v62, v58);
    v59(&v63[*(int *)(v61 + 36)], &v64[*(int *)(v61 + 36)], v58);
    *(_QWORD *)&v51[v52[13]] = *(_QWORD *)((char *)v3 + v52[13]);
    v65 = v52[14];
    v13 = v51;
    *(_QWORD *)&v51[v65] = *(_QWORD *)((char *)v3 + v65);
    v66 = type metadata accessor for BalanceWidgetViewModel();
    v67 = *(int *)(v66 + 20);
    v68 = &v51[v67];
    v69 = (char *)v3 + v67;
    v70 = sub_23DDC527C();
    v71 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v71(v68, v69, v70);
    *((_BYTE *)v13 + *(int *)(v66 + 24)) = *((_BYTE *)v3 + *(int *)(v66 + 24));
    v72 = *(int *)(v84 + 20);
    v73 = (uint64_t)v13 + v72;
    v74 = (char *)v3 + v72;
    v75 = sub_23DDC52DC();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
    v76 = *(int *)(v84 + 24);
    v77 = (_QWORD *)((char *)v13 + v76);
    v78 = (_QWORD *)((char *)v3 + v76);
    sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v79 = sub_23DDC656C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      v80 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
      *((_BYTE *)v77 + *(int *)(v80 + 20)) = *((_BYTE *)v78 + *(int *)(v80 + 20));
    }
    else
    {
      *v77 = *v78;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v13;
}

uint64_t sub_23DDB2EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  v6 = a1 + v5[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = sub_23DDC55A0();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  v9 = a1 + v5[7];
  v10 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = sub_23DDC512C();
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v9, v11);
    v13 = v9 + *(int *)(v10 + 20);
    v12(v13, v11);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v12(v13 + *(int *)(v14 + 36), v11);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = a1 + v5[8];
  swift_bridgeObjectRelease();
  v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v17 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = a1 + v5[11];
  v19 = sub_23DDC512C();
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v18, v19);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v22 = v21;
  v20(v18 + *(int *)(v21 + 36), v19);
  v23 = a1 + v5[12];
  v20(v23, v19);
  v20(v23 + *(int *)(v22 + 36), v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = a1 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  v25 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = a1 + *(int *)(a2 + 20);
  v27 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = a1 + *(int *)(a2 + 24);
  sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v29 = sub_23DDC656C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
}

uint64_t sub_23DDB322C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  int *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, _QWORD, uint64_t, int *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v9 = *v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = sub_23DDC55A0();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  swift_storeEnumTagMultiPayload();
  v14 = v7[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  v82 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = sub_23DDC512C();
    v21 = v18;
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v22(v15, v16, v20);
    v23 = v17[5];
    v80 = a2;
    v24 = a1;
    v25 = v7;
    v26 = &v15[v23];
    v27 = &v16[v23];
    v22(&v15[v23], &v16[v23], v20);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v22(&v26[*(int *)(v28 + 36)], &v27[*(int *)(v28 + 36)], v20);
    v29 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v26[v29[5]] = *(_QWORD *)&v27[v29[5]];
    *(_QWORD *)&v26[v29[6]] = *(_QWORD *)&v27[v29[6]];
    *(_QWORD *)&v26[v29[7]] = *(_QWORD *)&v27[v29[7]];
    v30 = v17[6];
    v31 = &v15[v30];
    v32 = &v16[v30];
    *(_OWORD *)v31 = *(_OWORD *)v32;
    v31[16] = v32[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v33 = v17[10];
    v34 = &v15[v33];
    v35 = &v16[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = v17[11];
    v38 = &v15[v37];
    v39 = &v16[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v41 = *(void (**)(char *, _QWORD, uint64_t, int *))(v21 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = v25;
    a1 = v24;
    a2 = v80;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41(v15, 0, 1, v17);
  }
  v42 = v7[8];
  v43 = a1 + v42;
  v44 = a2 + v42;
  *(_QWORD *)(a1 + v42) = *(_QWORD *)(a2 + v42);
  v45 = type metadata accessor for OvernightMetricsChartPointCollection();
  v46 = *(int *)(v45 + 20);
  v47 = v43 + v46;
  v81 = v44 + v46;
  v48 = a1;
  v49 = v7;
  v50 = sub_23DDC51E0();
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
  swift_bridgeObjectRetain();
  v51(v47, v81, v50);
  *(_QWORD *)(v43 + *(int *)(v45 + 24)) = *(_QWORD *)(v44 + *(int *)(v45 + 24));
  *(_QWORD *)(v48 + v49[9]) = *(_QWORD *)(a2 + v49[9]);
  *(_QWORD *)(v48 + v49[10]) = *(_QWORD *)(a2 + v49[10]);
  v52 = v49[11];
  v53 = v48 + v52;
  v54 = a2 + v52;
  v55 = sub_23DDC512C();
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v56(v53, v54, v55);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v58 = v57;
  v56(v53 + *(int *)(v57 + 36), v54 + *(int *)(v57 + 36), v55);
  v59 = v49[12];
  v60 = v48 + v59;
  v61 = a2 + v59;
  v56(v48 + v59, a2 + v59, v55);
  v56(v60 + *(int *)(v58 + 36), v61 + *(int *)(v58 + 36), v55);
  *(_QWORD *)(v48 + v49[13]) = *(_QWORD *)(a2 + v49[13]);
  v62 = v49[14];
  v63 = v48;
  *(_QWORD *)(v48 + v62) = *(_QWORD *)(a2 + v62);
  v64 = type metadata accessor for BalanceWidgetViewModel();
  v65 = *(int *)(v64 + 20);
  v66 = v48 + v65;
  v67 = a2 + v65;
  v68 = sub_23DDC527C();
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69(v66, v67, v68);
  *(_BYTE *)(v63 + *(int *)(v64 + 24)) = *(_BYTE *)(a2 + *(int *)(v64 + 24));
  v70 = *(int *)(v82 + 20);
  v71 = v63 + v70;
  v72 = a2 + v70;
  v73 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
  v74 = *(int *)(v82 + 24);
  v75 = (_QWORD *)(v63 + v74);
  v76 = (_QWORD *)(a2 + v74);
  sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v77 = sub_23DDC656C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
    v78 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
    *((_BYTE *)v75 + *(int *)(v78 + 20)) = *((_BYTE *)v76 + *(int *)(v78 + 20));
  }
  else
  {
    *v75 = *v76;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return v63;
}

uint64_t sub_23DDB37D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, int *);
  int v20;
  int v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, _QWORD, uint64_t, int *);
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v8 = v7[6];
    v9 = (_QWORD *)(a1 + v8);
    v10 = (_QWORD *)(a2 + v8);
    sub_23DCF59A8(a1 + v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v9 = *v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      v11 = sub_23DDC55A0();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  v14 = v7[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (v21)
    {
      v22 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_13:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v22);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      goto LABEL_16;
    }
    v24 = sub_23DDC512C();
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v25(v15, v16, v24);
    v94 = v18;
    v95 = a3;
    v26 = v25;
    v27 = v17[5];
    v28 = &v15[v27];
    v29 = &v16[v27];
    v26(&v15[v27], &v16[v27], v24);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v26(&v28[*(int *)(v30 + 36)], &v29[*(int *)(v30 + 36)], v24);
    v31 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v28[v31[5]] = *(_QWORD *)&v29[v31[5]];
    *(_QWORD *)&v28[v31[6]] = *(_QWORD *)&v29[v31[6]];
    *(_QWORD *)&v28[v31[7]] = *(_QWORD *)&v29[v31[7]];
    v32 = v17[6];
    v33 = &v15[v32];
    v34 = &v16[v32];
    v35 = v34[16];
    *(_OWORD *)v33 = *(_OWORD *)v34;
    v33[16] = v35;
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v36 = v17[10];
    v37 = &v15[v36];
    v38 = &v16[v36];
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
    v39 = v17[11];
    v40 = &v15[v39];
    v41 = &v16[v39];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
    v42 = *(void (**)(char *, _QWORD, uint64_t, int *))(v94 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3 = v95;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42(v15, 0, 1, v17);
  }
  else
  {
    if (v21)
    {
      sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v22 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_13;
    }
    v43 = sub_23DDC512C();
    v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 24);
    v44(v15, v16, v43);
    v45 = v17[5];
    v96 = a3;
    v46 = &v15[v45];
    v47 = &v16[v45];
    v44(&v15[v45], &v16[v45], v43);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v44(&v46[*(int *)(v48 + 36)], &v47[*(int *)(v48 + 36)], v43);
    v49 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v46[v49[5]] = *(_QWORD *)&v47[v49[5]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v46[v49[6]] = *(_QWORD *)&v47[v49[6]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v46[v49[7]] = *(_QWORD *)&v47[v49[7]];
    a3 = v96;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v50 = v17[6];
    v51 = &v15[v50];
    v52 = &v16[v50];
    v53 = *(_OWORD *)v52;
    v51[16] = v52[16];
    *(_OWORD *)v51 = v53;
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v54 = v17[10];
    v55 = &v15[v54];
    v56 = &v16[v54];
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *((_QWORD *)v55 + 1) = *((_QWORD *)v56 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v57 = v17[11];
    v58 = &v15[v57];
    v59 = &v16[v57];
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *((_QWORD *)v58 + 1) = *((_QWORD *)v59 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_16:
  v60 = v7[8];
  v61 = a1 + v60;
  v62 = a2 + v60;
  *(_QWORD *)(a1 + v60) = *(_QWORD *)(a2 + v60);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63 = type metadata accessor for OvernightMetricsChartPointCollection();
  v64 = *(int *)(v63 + 20);
  v65 = v61 + v64;
  v66 = v62 + v64;
  v67 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 24))(v65, v66, v67);
  *(_QWORD *)(v61 + *(int *)(v63 + 24)) = *(_QWORD *)(v62 + *(int *)(v63 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v68 = v7[11];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = sub_23DDC512C();
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 24);
  v72(v69, v70, v71);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v74 = v73;
  v72(v69 + *(int *)(v73 + 36), v70 + *(int *)(v73 + 36), v71);
  v75 = v7[12];
  v76 = a1 + v75;
  v77 = a2 + v75;
  v72(a1 + v75, a2 + v75, v71);
  v72(v76 + *(int *)(v74 + 36), v77 + *(int *)(v74 + 36), v71);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v78 = type metadata accessor for BalanceWidgetViewModel();
  v79 = *(int *)(v78 + 20);
  v80 = a1 + v79;
  v81 = a2 + v79;
  v82 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 24))(v80, v81, v82);
  *(_BYTE *)(a1 + *(int *)(v78 + 24)) = *(_BYTE *)(a2 + *(int *)(v78 + 24));
  v83 = *(int *)(a3 + 20);
  v84 = a1 + v83;
  v85 = a2 + v83;
  v86 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 24))(v84, v85, v86);
  if (a1 != a2)
  {
    v87 = *(int *)(a3 + 24);
    v88 = (_QWORD *)(a1 + v87);
    v89 = (_QWORD *)(a2 + v87);
    v90 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_23DDABFA4(a1 + v87, (uint64_t)&qword_256CFC588, (uint64_t)type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t)MEMORY[0x24BDEB560], (uint64_t (*)(_QWORD))sub_23DCFB328);
    sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, v90);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v91 = sub_23DDC656C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v88, v89, v91);
      v92 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
      *((_BYTE *)v88 + *(int *)(v92 + 20)) = *((_BYTE *)v89 + *(int *)(v92 + 20));
    }
    else
    {
      *v88 = *v89;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23DDB3F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = sub_23DDC55A0();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  v15 = v7[7];
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v19 = *((_QWORD *)v18 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = sub_23DDC512C();
    v66 = v19;
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
    v22(v16, v17, v21);
    v23 = v18[5];
    v67 = a3;
    v24 = &v16[v23];
    v25 = &v17[v23];
    v22(&v16[v23], &v17[v23], v21);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v21);
    v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v24[v27[5]] = *(_QWORD *)&v25[v27[5]];
    *(_QWORD *)&v24[v27[6]] = *(_QWORD *)&v25[v27[6]];
    *(_QWORD *)&v24[v27[7]] = *(_QWORD *)&v25[v27[7]];
    a3 = v67;
    v28 = v18[6];
    v29 = &v16[v28];
    v30 = &v17[v28];
    *(_OWORD *)v29 = *(_OWORD *)v30;
    v29[16] = v30[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
    *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v66 + 56))(v16, 0, 1, v18);
  }
  v31 = v7[8];
  v32 = a1 + v31;
  v33 = a2 + v31;
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  v34 = type metadata accessor for OvernightMetricsChartPointCollection();
  v35 = *(int *)(v34 + 20);
  v36 = v32 + v35;
  v37 = v33 + v35;
  v38 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  *(_QWORD *)(v32 + *(int *)(v34 + 24)) = *(_QWORD *)(v33 + *(int *)(v34 + 24));
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  v39 = v7[11];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_23DDC512C();
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32);
  v43(v40, v41, v42);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v45 = v44;
  v43(v40 + *(int *)(v44 + 36), v41 + *(int *)(v44 + 36), v42);
  v46 = v7[12];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v43(a1 + v46, a2 + v46, v42);
  v43(v47 + *(int *)(v45 + 36), v48 + *(int *)(v45 + 36), v42);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v49 = type metadata accessor for BalanceWidgetViewModel();
  v50 = *(int *)(v49 + 20);
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  *(_BYTE *)(a1 + *(int *)(v49 + 24)) = *(_BYTE *)(a2 + *(int *)(v49 + 24));
  v54 = *(int *)(a3 + 20);
  v55 = a1 + v54;
  v56 = a2 + v54;
  v57 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
  v58 = *(int *)(a3 + 24);
  v59 = (_BYTE *)(a1 + v58);
  v60 = (_BYTE *)(a2 + v58);
  sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v62 = v61;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v63 = sub_23DDC656C();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v59, v60, v63);
    v64 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
    v59[*(int *)(v64 + 20)] = v60[*(int *)(v64 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  return a1;
}

uint64_t sub_23DDB44AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, int *);
  int v21;
  int v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v8 = v7[6];
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    sub_23DCF59A8(a1 + v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v12 = sub_23DDC55A0();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  v15 = v7[7];
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v19 = *((_QWORD *)v18 - 1);
  v20 = *(uint64_t (**)(char *, uint64_t, int *))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (v22)
    {
      v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_13:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v23);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      goto LABEL_16;
    }
    v25 = sub_23DDC512C();
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
    v26(v16, v17, v25);
    v96 = v19;
    v97 = a3;
    v27 = v26;
    v28 = v18[5];
    v29 = &v16[v28];
    v30 = &v17[v28];
    v27(&v16[v28], &v17[v28], v25);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v27(&v29[*(int *)(v31 + 36)], &v30[*(int *)(v31 + 36)], v25);
    v32 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v29[v32[5]] = *(_QWORD *)&v30[v32[5]];
    *(_QWORD *)&v29[v32[6]] = *(_QWORD *)&v30[v32[6]];
    v33 = v32[7];
    v34 = *(_QWORD *)&v30[v33];
    a3 = v97;
    *(_QWORD *)&v29[v33] = v34;
    v35 = v18[6];
    v36 = &v16[v35];
    v37 = &v17[v35];
    *(_OWORD *)v36 = *(_OWORD *)v37;
    v36[16] = v37[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
    *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v96 + 56))(v16, 0, 1, v18);
  }
  else
  {
    if (v22)
    {
      sub_23DCF59A8((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_13;
    }
    v38 = sub_23DDC512C();
    v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40);
    v39(v16, v17, v38);
    v40 = v18[5];
    v41 = &v16[v40];
    v98 = a3;
    v42 = &v17[v40];
    v39(&v16[v40], &v17[v40], v38);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v39(&v41[*(int *)(v43 + 36)], &v42[*(int *)(v43 + 36)], v38);
    v44 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v41[v44[5]] = *(_QWORD *)&v42[v44[5]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v41[v44[6]] = *(_QWORD *)&v42[v44[6]];
    swift_bridgeObjectRelease();
    v45 = v44[7];
    v46 = *(_QWORD *)&v42[v45];
    a3 = v98;
    *(_QWORD *)&v41[v45] = v46;
    swift_bridgeObjectRelease();
    v47 = v18[6];
    v48 = &v16[v47];
    v49 = &v17[v47];
    *(_OWORD *)v48 = *(_OWORD *)v49;
    v48[16] = v49[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    v50 = v18[10];
    v51 = &v16[v50];
    v52 = &v17[v50];
    v54 = *(_QWORD *)v52;
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = v54;
    *((_QWORD *)v51 + 1) = v53;
    swift_bridgeObjectRelease();
    v55 = v18[11];
    v56 = &v16[v55];
    v57 = &v17[v55];
    v59 = *(_QWORD *)v57;
    v58 = *((_QWORD *)v57 + 1);
    *(_QWORD *)v56 = v59;
    *((_QWORD *)v56 + 1) = v58;
    swift_bridgeObjectRelease();
  }
LABEL_16:
  v60 = v7[8];
  v61 = a1 + v60;
  v62 = a2 + v60;
  *(_QWORD *)(a1 + v60) = *(_QWORD *)(a2 + v60);
  swift_bridgeObjectRelease();
  v63 = type metadata accessor for OvernightMetricsChartPointCollection();
  v64 = *(int *)(v63 + 20);
  v65 = v61 + v64;
  v66 = v62 + v64;
  v67 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 40))(v65, v66, v67);
  *(_QWORD *)(v61 + *(int *)(v63 + 24)) = *(_QWORD *)(v62 + *(int *)(v63 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  swift_bridgeObjectRelease();
  v68 = v7[11];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = sub_23DDC512C();
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 40);
  v72(v69, v70, v71);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v74 = v73;
  v72(v69 + *(int *)(v73 + 36), v70 + *(int *)(v73 + 36), v71);
  v75 = v7[12];
  v76 = a1 + v75;
  v77 = a2 + v75;
  v72(a1 + v75, a2 + v75, v71);
  v72(v76 + *(int *)(v74 + 36), v77 + *(int *)(v74 + 36), v71);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  swift_bridgeObjectRelease();
  v78 = type metadata accessor for BalanceWidgetViewModel();
  v79 = *(int *)(v78 + 20);
  v80 = a1 + v79;
  v81 = a2 + v79;
  v82 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 40))(v80, v81, v82);
  *(_BYTE *)(a1 + *(int *)(v78 + 24)) = *(_BYTE *)(a2 + *(int *)(v78 + 24));
  v83 = *(int *)(a3 + 20);
  v84 = a1 + v83;
  v85 = a2 + v83;
  v86 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 40))(v84, v85, v86);
  if (a1 != a2)
  {
    v87 = *(int *)(a3 + 24);
    v88 = (_BYTE *)(a1 + v87);
    v89 = (_BYTE *)(a2 + v87);
    v90 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_23DDABFA4(a1 + v87, (uint64_t)&qword_256CFC588, (uint64_t)type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t)MEMORY[0x24BDEB560], (uint64_t (*)(_QWORD))sub_23DCFB328);
    sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, v90);
    v92 = v91;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v93 = sub_23DDC656C();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(v88, v89, v93);
      v94 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
      v88[*(int *)(v94 + 20)] = v89[*(int *)(v94 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_23DDB4BC0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDB4BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for BalanceWidgetViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_23DDC52DC();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      sub_23DCFB328(0, qword_256CFF9F8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x24BDEB580]);
      v8 = v14;
      v12 = *(_QWORD *)(v14 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_23DDB4C7C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDB4C88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for BalanceWidgetViewModel();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_23DDC52DC();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      sub_23DCFB328(0, qword_256CFF9F8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, MEMORY[0x24BDEB580]);
      v10 = v16;
      v14 = *(_QWORD *)(v16 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23DDB4D40()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for BalanceWidgetViewModel();
  if (v0 <= 0x3F)
  {
    sub_23DDC52DC();
    if (v1 <= 0x3F)
    {
      sub_23DCFB328(319, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t sub_23DDB4DF8()
{
  sub_23DDACA38(255);
  type metadata accessor for BalanceWidgetAccessoryCircularLabelView(255);
  sub_23DDAC99C();
  sub_23DDB5928(&qword_256CFFAA8, (uint64_t (*)(uint64_t))sub_23DDAC99C, (uint64_t (*)(void))sub_23DDACAC4);
  swift_getOpaqueTypeConformance2();
  sub_23DCF535C(&qword_256CFFAC8, type metadata accessor for BalanceWidgetAccessoryCircularLabelView, (uint64_t)&unk_23DDCBC0C);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DDB4EB8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DDB4EC8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DDB4ED8()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23DDB4EE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFFC90)
  {
    sub_23DDB4F4C(255);
    v0 = sub_23DDC5B94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFFC90);
  }
}

void sub_23DDB4F4C(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFFC98, (uint64_t (*)(uint64_t))sub_23DDB4F68, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_23DDB4F68()
{
  uint64_t (*v0)(uint64_t);
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  unint64_t TupleTypeMetadata3;
  uint64_t v3;

  if (!qword_256CFFCA0)
  {
    sub_23DDB5E30(255, &qword_256CFFCA8, MEMORY[0x24BDFAC10]);
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
    v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0];
    sub_23DD3816C(255, &qword_256CFFCC0, (uint64_t (*)(uint64_t))sub_23DDB50DC, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    sub_23DD3816C(255, &qword_256CFFCD0, (uint64_t (*)(uint64_t))sub_23DDB5158, v0, v1);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v3)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_256CFFCA0);
  }
}

unint64_t sub_23DDB5044()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  result = qword_256CFFCB8;
  if (!qword_256CFFCB8)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
    sub_23DDB51A0(255, &qword_256CFFCB0, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
    v3 = v2;
    v4 = sub_23DCF535C(&qword_256CFC788, v1, MEMORY[0x24BDF1078]);
    v5[0] = MEMORY[0x24BDF1F80];
    v5[1] = v4;
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v3, v5);
    atomic_store(result, (unint64_t *)&qword_256CFFCB8);
  }
  return result;
}

void sub_23DDB50DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFFCC8)
  {
    type metadata accessor for WarmupProgressCounter();
    sub_23DD0AA4C(255, (unint64_t *)&qword_256CFC670, (uint64_t)&type metadata for OvernightMetricsChartSpec, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFFCC8);
  }
}

void sub_23DDB5158(uint64_t a1)
{
  sub_23DD3816C(a1, &qword_256CFFCD8, (uint64_t (*)(uint64_t))sub_23DDB517C, (uint64_t (*)(uint64_t))sub_23DDB51FC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
}

void sub_23DDB517C(uint64_t a1)
{
  sub_23DDB5784(a1, &qword_256CFFCE0, (unint64_t *)&qword_256CFF9D8, (void (*)(uint64_t))sub_23DD6C618, (void (*)(uint64_t))sub_23DDABDC0);
}

void sub_23DDB51A0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DDC5C0C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_23DDB51FC(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFFCE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF40C0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
}

unint64_t sub_23DDB5220()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFFCF0;
  if (!qword_256CFFCF0)
  {
    sub_23DDB50DC();
    v2 = v1;
    v3[0] = sub_23DCF535C((unint64_t *)&qword_256CFE180, (uint64_t (*)(uint64_t))type metadata accessor for WarmupProgressCounter, (uint64_t)&protocol conformance descriptor for WarmupProgressCounter);
    v3[1] = sub_23DD33B34();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFFCF0);
  }
  return result;
}

uint64_t sub_23DDB52A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_23DDC5CF0();
  *a1 = result;
  return result;
}

uint64_t sub_23DDB52C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_23DDC5CF0();
  *a1 = result;
  return result;
}

uint64_t sub_23DDB52F0()
{
  swift_retain();
  return sub_23DDC5CFC();
}

uint64_t sub_23DDB5318()
{
  swift_retain();
  return sub_23DDC5CFC();
}

uint64_t sub_23DDB5340()
{
  return sub_23DDC5C84();
}

uint64_t sub_23DDB5360(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = sub_23DDC62A8();
  v3 = MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return sub_23DDC5C90();
}

unint64_t sub_23DDB53E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFFCF8;
  if (!qword_256CFFCF8)
  {
    sub_23DDB5158(255);
    v2 = v1;
    v3[0] = sub_23DDB5460();
    v3[1] = sub_23DCF535C(&qword_256CFFD08, (uint64_t (*)(uint64_t))sub_23DDB51FC, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFFCF8);
  }
  return result;
}

unint64_t sub_23DDB5460()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFFD00;
  if (!qword_256CFFD00)
  {
    sub_23DDB517C(255);
    v2 = v1;
    v3[0] = sub_23DDB54E8((unint64_t *)&qword_256CFF9F0, (unint64_t *)&qword_256CFF9D8, (void (*)(uint64_t))sub_23DD6C618, (uint64_t (*)(void))sub_23DD31770);
    v3[1] = sub_23DD13D58();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFFD00);
  }
  return result;
}

uint64_t sub_23DDB54E8(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    sub_23DDB51A0(255, a2, a3);
    v8 = v7;
    v9 = a4();
    v10[0] = MEMORY[0x24BDF40E8];
    v10[1] = v9;
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v8, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DDB555C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_23DD3816C(0, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_23DDB55BC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_23DD3816C(0, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_23DDB561C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_23DD3816C(0, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_23DDB5668()
{
  uint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);

  result = qword_256CFFD10;
  if (!qword_256CFFD10)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
    v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0];
    sub_23DD3816C(255, &qword_256CFFD18, (uint64_t (*)(uint64_t))sub_23DDB5730, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    sub_23DD3816C(255, &qword_256CFFCD0, (uint64_t (*)(uint64_t))sub_23DDB5158, v1, v2);
    sub_23DDB5800();
    sub_23DDB5ABC();
    type metadata accessor for MultilayerCircularGauge();
  }
  return result;
}

void sub_23DDB5730(uint64_t a1)
{
  sub_23DD3816C(a1, &qword_256CFFD20, (uint64_t (*)(uint64_t))sub_23DDB5754, (uint64_t (*)(uint64_t))sub_23DD6C618, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
}

void sub_23DDB5754(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFFD28, (uint64_t (*)(uint64_t))sub_23DDB5770, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF3F28]);
}

void sub_23DDB5770(uint64_t a1)
{
  sub_23DDB5B64(a1, &qword_256CFFD30, MEMORY[0x24BDEF3B8]);
}

void sub_23DDB5784(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_23DDB51A0(255, a3, a4);
    a5(255);
    v7 = sub_23DDC5C0C();
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_23DDB5800()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_256CFFD40;
  if (!qword_256CFFD40)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
    sub_23DD3816C(255, &qword_256CFFD18, (uint64_t (*)(uint64_t))sub_23DDB5730, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v3 = v2;
    v4[0] = sub_23DDB58A8();
    v4[1] = sub_23DCF535C(&qword_256CFC788, v1, MEMORY[0x24BDF1078]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v3, v4);
    atomic_store(result, (unint64_t *)&qword_256CFFD40);
  }
  return result;
}

unint64_t sub_23DDB58A8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFFD48;
  if (!qword_256CFFD48)
  {
    sub_23DDB5730(255);
    v2 = v1;
    v3[0] = sub_23DDB5928(&qword_256CFFD50, (uint64_t (*)(uint64_t))sub_23DDB5754, (uint64_t (*)(void))sub_23DDB598C);
    v3[1] = sub_23DD31770();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFFD48);
  }
  return result;
}

uint64_t sub_23DDB5928(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7 = a3();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF3F50], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DDB598C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFFD58;
  if (!qword_256CFFD58)
  {
    sub_23DDB5770(255);
    v2 = v1;
    v3[0] = sub_23DDB59F4();
    v3[1] = MEMORY[0x24BDF5138];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFFD58);
  }
  return result;
}

unint64_t sub_23DDB59F4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFFD60;
  if (!qword_256CFFD60)
  {
    sub_23DDB5784(255, &qword_256CFFD38, (unint64_t *)&qword_256CFCA10, (void (*)(uint64_t))sub_23DDABDC0, sub_23DDB51FC);
    v2 = v1;
    v3[0] = sub_23DDB54E8((unint64_t *)&qword_256CFCA30, (unint64_t *)&qword_256CFCA10, (void (*)(uint64_t))sub_23DDABDC0, (uint64_t (*)(void))sub_23DD13D58);
    v3[1] = sub_23DCF535C(&qword_256CFFD08, (uint64_t (*)(uint64_t))sub_23DDB51FC, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFFD60);
  }
  return result;
}

unint64_t sub_23DDB5ABC()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_256CFFD68;
  if (!qword_256CFFD68)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088];
    sub_23DD3816C(255, &qword_256CFFCD0, (uint64_t (*)(uint64_t))sub_23DDB5158, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v3 = v2;
    v4[0] = sub_23DDB53E0();
    v4[1] = sub_23DCF535C(&qword_256CFC788, v1, MEMORY[0x24BDF1078]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v3, v4);
    atomic_store(result, (unint64_t *)&qword_256CFFD68);
  }
  return result;
}

void sub_23DDB5B64(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_23DDB5784(255, &qword_256CFFD38, (unint64_t *)&qword_256CFCA10, (void (*)(uint64_t))sub_23DDABDC0, sub_23DDB51FC);
    v7 = a3(a1, v6, MEMORY[0x24BDF5158]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DDB5BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DDB5784(0, &qword_256CFFD38, (unint64_t *)&qword_256CFCA10, (void (*)(uint64_t))sub_23DDABDC0, sub_23DDB51FC);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DDB5C48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DDB5784(0, &qword_256CFFD38, (unint64_t *)&qword_256CFCA10, (void (*)(uint64_t))sub_23DDABDC0, sub_23DDB51FC);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DDB5CAC(uint64_t a1)
{
  uint64_t v2;

  sub_23DDB5784(0, &qword_256CFFD38, (unint64_t *)&qword_256CFCA10, (void (*)(uint64_t))sub_23DDABDC0, sub_23DDB51FC);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23DDB5D08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFFD78)
  {
    sub_23DDB5D68();
    sub_23DDB5EBC();
    v0 = sub_23DDC5B28();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFFD78);
  }
}

void sub_23DDB5D68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFFD80)
  {
    sub_23DD0AA4C(255, (unint64_t *)&qword_256CFC758, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DDB5E30(255, &qword_256CFFD88, MEMORY[0x24BDF29E0]);
    sub_23DD0A770(&qword_256CFC790, MEMORY[0x24BEE12D8]);
    v0 = sub_23DDC6380();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFFD80);
  }
}

void sub_23DDB5E30(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  if (!*a2)
  {
    sub_23DDB51A0(255, &qword_256CFFCB0, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
    v9[0] = v6;
    v9[1] = sub_23DDB5044();
    v7 = MEMORY[0x242643B9C](a1, v9, a3, 0);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_23DDB5EBC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[3];

  result = qword_256CFFD90;
  if (!qword_256CFFD90)
  {
    sub_23DDB5D68();
    v2 = v1;
    sub_23DDB51A0(255, &qword_256CFFCB0, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
    v4[1] = v3;
    v4[2] = sub_23DDB5044();
    v4[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF4A08], v2, v4);
    atomic_store(result, (unint64_t *)&qword_256CFFD90);
  }
  return result;
}

void sub_23DDB5F58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFFD98)
  {
    sub_23DDB5D68();
    sub_23DD0AB5C();
    v0 = sub_23DDC5B94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFFD98);
  }
}

uint64_t sub_23DDB5FC0(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v2 = 0;
  v3 = result + 40;
  v4 = -(uint64_t)v1;
  v5 = MEMORY[0x24BEE4AF8];
  v15 = result + 40;
  v16 = *(_QWORD *)(result + 16);
  do
  {
    if (v2 <= v1)
      v6 = v1;
    else
      v6 = v2;
    v7 = -(uint64_t)v6;
    for (i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      v10 = *(i - 1);
      v9 = *i;
      swift_bridgeObjectRetain_n();
      v11 = sub_23DD9BB24(&v17, v10, v9);
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
        break;
      result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1)
        return v5;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    v18 = v5;
    if ((result & 1) == 0)
    {
      result = sub_23DD92B8C(0, *(_QWORD *)(v5 + 16) + 1, 1);
      v5 = v18;
    }
    v13 = *(_QWORD *)(v5 + 16);
    v12 = *(_QWORD *)(v5 + 24);
    if (v13 >= v12 >> 1)
    {
      result = sub_23DD92B8C(v12 > 1, v13 + 1, 1);
      v5 = v18;
    }
    *(_QWORD *)(v5 + 16) = v13 + 1;
    v14 = v5 + 16 * v13;
    *(_QWORD *)(v14 + 32) = v10;
    *(_QWORD *)(v14 + 40) = v9;
    v3 = v15;
    v1 = v16;
  }
  while (v4 + v2);
  return v5;
}

uint64_t sub_23DDB6128()
{
  return sub_23DCF535C(&qword_256CFFDA0, (uint64_t (*)(uint64_t))sub_23DDB6154, MEMORY[0x24BDF4700]);
}

void sub_23DDB6154()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFFDA8)
  {
    sub_23DDB4F4C(255);
    sub_23DCF535C(&qword_256CFFDB0, (uint64_t (*)(uint64_t))sub_23DDB4F4C, MEMORY[0x24BDF5428]);
    v0 = sub_23DDC6320();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFFDA8);
  }
}

uint64_t sub_23DDB61CC()
{
  return sub_23DCF535C(&qword_256CFFDB8, (uint64_t (*)(uint64_t))sub_23DDB5668, (uint64_t)&unk_23DDCACF8);
}

uint64_t sub_23DDB61F8()
{
  return sub_23DCF535C(&qword_256CFFDC0, (uint64_t (*)(uint64_t))sub_23DDB5D08, MEMORY[0x24BDEBE40]);
}

id OvernightMetricsSummaryAnnotationProvider.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t OvernightMetricsSummaryAnnotationProvider.debugIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OvernightMetricsSummaryAnnotationProvider.pregnancyState.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFFDD0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsSummaryAnnotationProvider, (uint64_t)&protocol conformance descriptor for OvernightMetricsSummaryAnnotationProvider);
  sub_23DDC5210();
  swift_release();
  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_23DDB62DC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFFDD0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsSummaryAnnotationProvider, (uint64_t)&protocol conformance descriptor for OvernightMetricsSummaryAnnotationProvider);
  sub_23DDC5210();
  result = swift_release();
  *a2 = *(_QWORD *)(v3 + 40);
  return result;
}

uint64_t sub_23DDB636C()
{
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFFDD0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsSummaryAnnotationProvider, (uint64_t)&protocol conformance descriptor for OvernightMetricsSummaryAnnotationProvider);
  sub_23DDC5204();
  return swift_release();
}

uint64_t type metadata accessor for OvernightMetricsSummaryAnnotationProvider()
{
  uint64_t result;

  result = qword_256CFFE18;
  if (!qword_256CFFE18)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t OvernightMetricsSummaryAnnotationProvider.pregnancyImpactAnnotation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t ObjCClassFromMetadata;
  id v6;

  v1 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v2);
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFFDD0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsSummaryAnnotationProvider, (uint64_t)&protocol conformance descriptor for OvernightMetricsSummaryAnnotationProvider);
  sub_23DDC5210();
  swift_release();
  v3 = *(_QWORD *)(v0 + 40);
  if (v3 == 2 || (result = 0, v3 == 1))
  {
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v6 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    return sub_23DDC6770();
  }
  return result;
}

_QWORD *OvernightMetricsSummaryAnnotationProvider.annotations.getter()
{
  uint64_t inited;
  uint64_t v1;
  _QWORD *v2;

  sub_23DD48B9C();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DDC7F50;
  *(_QWORD *)(inited + 32) = OvernightMetricsSummaryAnnotationProvider.pregnancyImpactAnnotation.getter();
  *(_QWORD *)(inited + 40) = v1;
  v2 = sub_23DD3E908(inited);
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *OvernightMetricsSummaryAnnotationProvider.__allocating_init(healthStore:debugIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)swift_allocObject();
  v6[5] = 0;
  sub_23DDC5234();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  return v6;
}

_QWORD *OvernightMetricsSummaryAnnotationProvider.init(healthStore:debugIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[5] = 0;
  sub_23DDC5234();
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

uint64_t OvernightMetricsSummaryAnnotationProvider.observePregnancyState()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = v0;
  v2 = sub_23DDC64DC();
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v3 = sub_23DDC64D0();
  v1[9] = v3;
  v1[10] = *(_QWORD *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v4 = sub_23DDC64F4();
  v1[12] = v4;
  v1[13] = *(_QWORD *)(v4 - 8);
  v1[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23DDB6800()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  swift_bridgeObjectRetain();
  sub_23DDC64B8();
  sub_23DDC64E8();
  sub_23DDC64C4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[15] = OBJC_IVAR____TtC15HealthBalanceUI41OvernightMetricsSummaryAnnotationProvider___observationRegistrar;
  v0[16] = sub_23DCF535C(&qword_256CFFDE0, (uint64_t (*)(uint64_t))MEMORY[0x24BDD22F0], MEMORY[0x24BDD22F8]);
  v4 = (_QWORD *)swift_task_alloc();
  v0[17] = v4;
  *v4 = v0;
  v4[1] = sub_23DDB6904;
  return sub_23DDC6818();
}

uint64_t sub_23DDB6904()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 176) = v0;
  else
    *(_QWORD *)(v2 + 144) = 0;
  return swift_task_switch();
}

uint64_t sub_23DDB696C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 16);
  return swift_task_switch();
}

uint64_t sub_23DDB6988()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 152))
  {
    sub_23DDC6830();
    *(_QWORD *)(v0 + 160) = sub_23DDC6824();
    sub_23DDC67F4();
    return swift_task_switch();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 104);
    v2 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 96);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23DDB6A6C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;

  v1 = (void *)v0[19];
  v2 = v0[5];
  swift_release();
  v3 = objc_msgSend(v1, sel_state);
  swift_getKeyPath();
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v3;
  v0[4] = v2;
  sub_23DCF535C(&qword_256CFFDD0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsSummaryAnnotationProvider, (uint64_t)&protocol conformance descriptor for OvernightMetricsSummaryAnnotationProvider);
  sub_23DDC5204();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DDB6B60()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v1;
  *v1 = v0;
  v1[1] = sub_23DDB6BC8;
  return sub_23DDC6818();
}

uint64_t sub_23DDB6BC8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 176) = v0;
  else
    *(_QWORD *)(v2 + 144) = 0;
  return swift_task_switch();
}

uint64_t sub_23DDB6C30()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 176);
  sub_23DD02790();
  swift_willThrowTypedImpl();
  return swift_task_switch();
}

uint64_t sub_23DDB6C8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23DDB6D0C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 40) = *(_QWORD *)(v0 + 24);
}

uint64_t OvernightMetricsSummaryAnnotationProvider.fetchPregnancyState()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = v0;
  v2 = sub_23DDC64DC();
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v3 = sub_23DDC64D0();
  v1[9] = v3;
  v1[10] = *(_QWORD *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v4 = sub_23DDC64F4();
  v1[12] = v4;
  v1[13] = *(_QWORD *)(v4 - 8);
  v1[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23DDB6DC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  swift_bridgeObjectRetain();
  sub_23DDC64B8();
  sub_23DDC64E8();
  sub_23DDC64C4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_23DCF535C(&qword_256CFFDE0, (uint64_t (*)(uint64_t))MEMORY[0x24BDD22F0], MEMORY[0x24BDD22F8]);
  v4 = (_QWORD *)swift_task_alloc();
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_23DDB6EBC;
  return sub_23DDC6818();
}

uint64_t sub_23DDB6EBC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DDB6F20()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 136) = *(_QWORD *)(v0 + 16);
  return swift_task_switch();
}

uint64_t sub_23DDB6F3C()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 136))
  {
    *(_QWORD *)(v0 + 144) = OBJC_IVAR____TtC15HealthBalanceUI41OvernightMetricsSummaryAnnotationProvider___observationRegistrar;
    sub_23DDC6830();
    *(_QWORD *)(v0 + 152) = sub_23DDC6824();
    sub_23DDC67F4();
    return swift_task_switch();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 104);
    v2 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 96);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23DDB702C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;

  v1 = (void *)v0[17];
  v2 = v0[5];
  swift_release();
  v3 = objc_msgSend(v1, sel_state);
  swift_getKeyPath();
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v3;
  v0[4] = v2;
  sub_23DCF535C(&qword_256CFFDD0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsSummaryAnnotationProvider, (uint64_t)&protocol conformance descriptor for OvernightMetricsSummaryAnnotationProvider);
  sub_23DDC5204();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DDB711C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DDB71A4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 128);
  sub_23DD02790();
  swift_willThrowTypedImpl();
  return swift_task_switch();
}

uint64_t sub_23DDB7200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t OvernightMetricsSummaryAnnotationProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI41OvernightMetricsSummaryAnnotationProvider___observationRegistrar;
  v2 = sub_23DDC5240();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t OvernightMetricsSummaryAnnotationProvider.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI41OvernightMetricsSummaryAnnotationProvider___observationRegistrar;
  v2 = sub_23DDC5240();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_23DDB7334()
{
  return type metadata accessor for OvernightMetricsSummaryAnnotationProvider();
}

uint64_t sub_23DDB733C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC5240();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for OvernightMetricsSummaryAnnotationProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of OvernightMetricsSummaryAnnotationProvider.__allocating_init(healthStore:debugIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

void sub_23DDB73E4()
{
  sub_23DDB6D0C();
}

_QWORD *sub_23DDB73F8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, int *);
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  char *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, _QWORD, uint64_t, int *);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int EnumCaseMultiPayload;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v130;
  char *v131;
  void (*v132)(char *, _QWORD, uint64_t, int *);
  char *v133;
  int *v134;
  unsigned int (*v135)(char *, uint64_t, int *);
  _QWORD *v136;
  int *v137;
  char v138;
  _QWORD *v139;
  uint64_t v140;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v16 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v6 = a2;
    v7 = a1;
    v8 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    v9 = v8[5];
    v10 = (char *)v7 + v9;
    v11 = (char *)v6 + v9;
    v12 = type metadata accessor for OvernightMetricsChartPoint();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    swift_bridgeObjectRetain();
    v135 = v14;
    v136 = v7;
    v137 = a3;
    v139 = v6;
    v130 = v13;
    v134 = (int *)v12;
    if (v14(v11, 1, (int *)v12))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v17 = sub_23DDC512C();
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      v18(v10, v11, v17);
      v19 = *(int *)(v12 + 20);
      v20 = v13;
      v21 = &v10[v19];
      v22 = (int *)v12;
      v23 = &v11[v19];
      v18(&v10[v19], &v11[v19], v17);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v18(&v21[*(int *)(v24 + 36)], &v23[*(int *)(v24 + 36)], v17);
      v25 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v21[v25[5]] = *(_QWORD *)&v23[v25[5]];
      *(_QWORD *)&v21[v25[6]] = *(_QWORD *)&v23[v25[6]];
      *(_QWORD *)&v21[v25[7]] = *(_QWORD *)&v23[v25[7]];
      v26 = v22[6];
      v27 = &v10[v26];
      v28 = &v11[v26];
      *(_OWORD *)v27 = *(_OWORD *)v28;
      v27[16] = v28[16];
      v10[v22[7]] = v11[v22[7]];
      v10[v22[8]] = v11[v22[8]];
      v10[v22[9]] = v11[v22[9]];
      v29 = v22[10];
      v30 = &v10[v29];
      v31 = &v11[v29];
      v32 = *((_QWORD *)v31 + 1);
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *((_QWORD *)v30 + 1) = v32;
      v33 = v22[11];
      v34 = &v10[v33];
      v35 = &v11[v33];
      v36 = *((_QWORD *)v35 + 1);
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *((_QWORD *)v34 + 1) = v36;
      v132 = *(void (**)(char *, _QWORD, uint64_t, int *))(v20 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7 = v136;
      swift_bridgeObjectRetain();
      v6 = v139;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v132(v10, 0, 1, v22);
    }
    *(_OWORD *)((char *)v7 + v8[6]) = *(_OWORD *)((char *)v6 + v8[6]);
    v37 = v8[7];
    v38 = (char *)v7 + v37;
    v39 = (char *)v6 + v37;
    v40 = *((_OWORD *)v39 + 1);
    *(_OWORD *)v38 = *(_OWORD *)v39;
    *((_OWORD *)v38 + 1) = v40;
    *((_QWORD *)v38 + 10) = *((_QWORD *)v39 + 10);
    v41 = *((_OWORD *)v39 + 4);
    v42 = *((_OWORD *)v39 + 2);
    *((_OWORD *)v38 + 3) = *((_OWORD *)v39 + 3);
    *((_OWORD *)v38 + 4) = v41;
    *((_OWORD *)v38 + 2) = v42;
    *(_QWORD *)((char *)v7 + v8[8]) = *(_QWORD *)((char *)v6 + v8[8]);
    *(_QWORD *)((char *)v7 + v8[9]) = *(_QWORD *)((char *)v6 + v8[9]);
    v43 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    v44 = (char *)v7 + v43;
    v45 = (char *)v6 + v43;
    v46 = *((_QWORD *)v45 + 1);
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *((_QWORD *)v44 + 1) = v46;
    v47 = *((_QWORD *)v45 + 3);
    *((_QWORD *)v44 + 2) = *((_QWORD *)v45 + 2);
    *((_QWORD *)v44 + 3) = v47;
    *((_QWORD *)v44 + 4) = *((_QWORD *)v45 + 4);
    *(_OWORD *)(v44 + 40) = *(_OWORD *)(v45 + 40);
    *(_OWORD *)(v44 + 56) = *(_OWORD *)(v45 + 56);
    *(_OWORD *)(v44 + 72) = *(_OWORD *)(v45 + 72);
    *(_OWORD *)(v44 + 88) = *(_OWORD *)(v45 + 88);
    *(_OWORD *)(v44 + 104) = *(_OWORD *)(v45 + 104);
    v48 = a3[6];
    *((_BYTE *)v7 + a3[5]) = *((_BYTE *)v6 + a3[5]);
    v49 = (_QWORD *)((char *)v7 + v48);
    v50 = (_QWORD *)((char *)v6 + v48);
    *v49 = *v50;
    v51 = type metadata accessor for OvernightMetricsChartPointCollection();
    v52 = *(int *)(v51 + 20);
    v131 = (char *)v50 + v52;
    v133 = (char *)v49 + v52;
    v53 = sub_23DDC51E0();
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v54(v133, v131, v53);
    *(_QWORD *)((char *)v49 + *(int *)(v51 + 24)) = *(_QWORD *)((char *)v50 + *(int *)(v51 + 24));
    v55 = v137[7];
    v56 = (char *)v136 + v55;
    v57 = (char *)v139 + v55;
    swift_bridgeObjectRetain();
    if (v135(v57, 1, v134))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      v59 = sub_23DDC512C();
      v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
      v60(v56, v57, v59);
      v61 = v134[5];
      v62 = &v56[v61];
      v63 = &v57[v61];
      v60(&v56[v61], &v57[v61], v59);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v60(&v62[*(int *)(v64 + 36)], &v63[*(int *)(v64 + 36)], v59);
      v65 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v62[v65[5]] = *(_QWORD *)&v63[v65[5]];
      *(_QWORD *)&v62[v65[6]] = *(_QWORD *)&v63[v65[6]];
      *(_QWORD *)&v62[v65[7]] = *(_QWORD *)&v63[v65[7]];
      v66 = v134[6];
      v67 = &v56[v66];
      v68 = &v57[v66];
      *(_OWORD *)v67 = *(_OWORD *)v68;
      v67[16] = v68[16];
      v56[v134[7]] = v57[v134[7]];
      v56[v134[8]] = v57[v134[8]];
      v56[v134[9]] = v57[v134[9]];
      v69 = v134[10];
      v70 = &v56[v69];
      v71 = &v57[v69];
      v72 = *((_QWORD *)v71 + 1);
      *(_QWORD *)v70 = *(_QWORD *)v71;
      *((_QWORD *)v70 + 1) = v72;
      v73 = v134[11];
      v74 = &v56[v73];
      v75 = &v57[v73];
      v76 = *((_QWORD *)v75 + 1);
      *(_QWORD *)v74 = *(_QWORD *)v75;
      *((_QWORD *)v74 + 1) = v76;
      v77 = *(void (**)(char *, _QWORD, uint64_t, int *))(v130 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v77(v56, 0, 1, v134);
    }
    v78 = v137[8];
    v79 = (uint64_t)v136 + v78;
    v80 = (uint64_t)v139 + v78;
    if (*(_QWORD *)v80)
    {
      v81 = *(_QWORD *)(v80 + 8);
      *(_QWORD *)v79 = *(_QWORD *)v80;
      *(_QWORD *)(v79 + 8) = v81;
      v82 = *(_OWORD *)(v80 + 32);
      *(_OWORD *)(v79 + 16) = *(_OWORD *)(v80 + 16);
      *(_OWORD *)(v79 + 32) = v82;
      *(_OWORD *)(v79 + 48) = *(_OWORD *)(v80 + 48);
      *(_QWORD *)(v79 + 64) = *(_QWORD *)(v80 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v83 = *(_OWORD *)(v80 + 48);
      *(_OWORD *)(v79 + 32) = *(_OWORD *)(v80 + 32);
      *(_OWORD *)(v79 + 48) = v83;
      *(_QWORD *)(v79 + 64) = *(_QWORD *)(v80 + 64);
      v84 = *(_OWORD *)(v80 + 16);
      *(_OWORD *)v79 = *(_OWORD *)v80;
      *(_OWORD *)(v79 + 16) = v84;
    }
    v85 = v137[10];
    *((_BYTE *)v136 + v137[9]) = *((_BYTE *)v139 + v137[9]);
    v86 = (uint64_t)v136 + v85;
    v87 = (uint64_t)v139 + v85;
    v88 = *(_QWORD *)(v87 + 8);
    *(_QWORD *)v86 = *(_QWORD *)v87;
    *(_QWORD *)(v86 + 8) = v88;
    *(_OWORD *)(v86 + 16) = *(_OWORD *)(v87 + 16);
    v89 = v137[12];
    *(_QWORD *)((char *)v136 + v137[11]) = *(_QWORD *)((char *)v139 + v137[11]);
    *(_QWORD *)((char *)v136 + v89) = *(_QWORD *)((char *)v139 + v89);
    v90 = v137[13];
    v91 = (uint64_t)v136 + v90;
    v92 = (uint64_t)v139 + v90;
    type metadata accessor for OvernightMetricsAxisConfiguration(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v94 = sub_23DDC512C();
    v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 16);
    v95(v91, v92, v94);
    sub_23DD13DC0(0);
    v97 = v96;
    v95(v91 + *(int *)(v96 + 36), v92 + *(int *)(v96 + 36), v94);
    if (EnumCaseMultiPayload == 1)
    {
      v98 = v136;
      v99 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
    }
    else
    {
      v98 = v136;
      v99 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
    }
    *(_QWORD *)(v91 + *(int *)(v99 + 20)) = *(_QWORD *)(v92 + *(int *)(v99 + 20));
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    v100 = v137[14];
    v101 = v98;
    v102 = (uint64_t)v98 + v100;
    v103 = (uint64_t)v139 + v100;
    v95(v102, (uint64_t)v139 + v100, v94);
    v104 = v97;
    v95(v102 + *(int *)(v97 + 36), v103 + *(int *)(v97 + 36), v94);
    v105 = type metadata accessor for OvernightMetricsChart.Derivations(0);
    v106 = *(int *)(v105 + 20);
    v107 = v102 + v106;
    v108 = v103 + v106;
    v95(v102 + v106, v103 + v106, v94);
    v95(v107 + *(int *)(v104 + 36), v108 + *(int *)(v104 + 36), v94);
    *(_QWORD *)(v102 + *(int *)(v105 + 24)) = *(_QWORD *)(v103 + *(int *)(v105 + 24));
    v109 = v137[15];
    v110 = (uint64_t)v101 + v109;
    v111 = (uint64_t)v139 + v109;
    v112 = *(_QWORD *)((char *)v139 + v109);
    swift_bridgeObjectRetain();
    if (v112)
    {
      v113 = *(_QWORD *)(v111 + 8);
      v114 = *(_QWORD *)(v111 + 16);
      *(_QWORD *)v110 = v112;
      *(_QWORD *)(v110 + 8) = v113;
      *(_QWORD *)(v110 + 16) = v114;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v110 = *(_OWORD *)v111;
      *(_QWORD *)(v110 + 16) = *(_QWORD *)(v111 + 16);
    }
    *(_BYTE *)(v110 + 24) = *(_BYTE *)(v111 + 24);
    *(_BYTE *)(v110 + 32) = *(_BYTE *)(v111 + 32);
    v115 = *(_QWORD *)(v111 + 48);
    *(_QWORD *)(v110 + 40) = *(_QWORD *)(v111 + 40);
    *(_QWORD *)(v110 + 48) = v115;
    *(_BYTE *)(v110 + 56) = *(_BYTE *)(v111 + 56);
    v116 = *(_QWORD *)(v111 + 72);
    *(_QWORD *)(v110 + 64) = *(_QWORD *)(v111 + 64);
    *(_QWORD *)(v110 + 72) = v116;
    *(_QWORD *)(v110 + 80) = *(_QWORD *)(v111 + 80);
    v117 = *(_OWORD *)(v111 + 88);
    *(_OWORD *)(v110 + 104) = *(_OWORD *)(v111 + 104);
    *(_OWORD *)(v110 + 88) = v117;
    v118 = *(_OWORD *)(v111 + 120);
    v119 = *(_OWORD *)(v111 + 136);
    *(_OWORD *)(v110 + 152) = *(_OWORD *)(v111 + 152);
    *(_OWORD *)(v110 + 136) = v119;
    *(_OWORD *)(v110 + 120) = v118;
    v120 = *(_QWORD *)(v111 + 176);
    *(_QWORD *)(v110 + 168) = *(_QWORD *)(v111 + 168);
    *(_QWORD *)(v110 + 176) = v120;
    v122 = *(_QWORD *)(v111 + 184);
    v121 = *(_QWORD *)(v111 + 192);
    *(_BYTE *)(v110 + 200) = *(_BYTE *)(v111 + 200);
    *(_QWORD *)(v110 + 184) = v122;
    *(_QWORD *)(v110 + 192) = v121;
    *(_BYTE *)(v110 + 201) = *(_BYTE *)(v111 + 201);
    v123 = *(_QWORD *)(v111 + 216);
    *(_QWORD *)(v110 + 208) = *(_QWORD *)(v111 + 208);
    *(_QWORD *)(v110 + 216) = v123;
    v124 = *(_QWORD *)(v111 + 232);
    *(_QWORD *)(v110 + 224) = *(_QWORD *)(v111 + 224);
    *(_QWORD *)(v110 + 232) = v124;
    *(_QWORD *)(v110 + 240) = *(_QWORD *)(v111 + 240);
    *(_BYTE *)(v110 + 248) = *(_BYTE *)(v111 + 248);
    v125 = *(_QWORD *)(v111 + 264);
    *(_QWORD *)(v110 + 256) = *(_QWORD *)(v111 + 256);
    *(_QWORD *)(v110 + 264) = v125;
    *(_QWORD *)(v110 + 272) = *(_QWORD *)(v111 + 272);
    v16 = v136;
    v126 = v137[16];
    v127 = (uint64_t)v136 + v126;
    v128 = (uint64_t)v139 + v126;
    v140 = *(_QWORD *)v128;
    v138 = *(_BYTE *)(v128 + 8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_23DDB7CE0(v140, v138);
    *(_QWORD *)v127 = v140;
    *(_BYTE *)(v127 + 8) = v138;
  }
  return v16;
}

uint64_t sub_23DDB7CE0(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_retain();
  return result;
}

uint64_t sub_23DDB7CEC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v5 = type metadata accessor for OvernightMetricsChartPoint();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    v7 = sub_23DDC512C();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v4, v7);
    v9 = v4 + *(int *)(v5 + 20);
    v8(v9, v7);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v8(v9 + *(int *)(v10 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = a1 + a2[6];
  swift_bridgeObjectRelease();
  v12 = v11 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v13 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  v14 = a1 + a2[7];
  if (!v6(v14, 1, v5))
  {
    v15 = sub_23DDC512C();
    v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
    v16(v14, v15);
    v17 = v14 + *(int *)(v5 + 20);
    v16(v17, v15);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v16(v17 + *(int *)(v18 + 36), v15);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + a2[8]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = a1 + a2[13];
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v21 = sub_23DDC512C();
  v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
  v22(v19, v21);
  sub_23DD13DC0(0);
  v24 = v23;
  v22(v19 + *(int *)(v23 + 36), v21);
  if (EnumCaseMultiPayload == 1)
    type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  else
    type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  swift_bridgeObjectRelease();
  v25 = a1 + a2[14];
  v22(v25, v21);
  v22(v25 + *(int *)(v24 + 36), v21);
  v26 = v25 + *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
  v22(v26, v21);
  v22(v26 + *(int *)(v24 + 36), v21);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[15]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return sub_23DD36804(*(_QWORD *)(a1 + a2[16]), *(_BYTE *)(a1 + a2[16] + 8));
}

_QWORD *sub_23DDB8118(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, int *);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t, int *);
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, _QWORD, uint64_t, int *);
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int EnumCaseMultiPayload;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t);
  char *v124;
  char *v125;
  int *v126;
  unsigned int (*v127)(char *, uint64_t, int *);
  _QWORD *v128;
  char v130;
  _QWORD *v131;
  uint64_t v132;

  *a1 = *a2;
  v5 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v6 = v5[5];
  v7 = (char *)a1 + v6;
  v131 = a2;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned int (**)(char *, uint64_t, int *))(v10 + 48);
  swift_bridgeObjectRetain();
  v127 = v11;
  v128 = a1;
  v122 = v10;
  v126 = v9;
  if (v11(v8, 1, v9))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = sub_23DDC512C();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v7, v8, v13);
    v15 = v9[5];
    v16 = &v7[v15];
    v17 = &v8[v15];
    v14(&v7[v15], &v8[v15], v13);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v14(&v16[*(int *)(v18 + 36)], &v17[*(int *)(v18 + 36)], v13);
    v19 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v16[v19[5]] = *(_QWORD *)&v17[v19[5]];
    *(_QWORD *)&v16[v19[6]] = *(_QWORD *)&v17[v19[6]];
    *(_QWORD *)&v16[v19[7]] = *(_QWORD *)&v17[v19[7]];
    v20 = v9[6];
    v21 = &v7[v20];
    v22 = &v8[v20];
    *(_OWORD *)v21 = *(_OWORD *)v22;
    v21[16] = v22[16];
    v7[v9[7]] = v8[v9[7]];
    v7[v9[8]] = v8[v9[8]];
    v7[v9[9]] = v8[v9[9]];
    v23 = v9[10];
    v24 = &v7[v23];
    v25 = &v8[v23];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    v27 = v9[11];
    v28 = &v7[v27];
    v29 = &v8[v27];
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    v31 = *(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + v5[6]) = *(_OWORD *)((char *)v131 + v5[6]);
  v32 = v5[7];
  v33 = (char *)a1 + v32;
  v34 = (char *)v131 + v32;
  v35 = *((_OWORD *)v34 + 1);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *((_OWORD *)v33 + 1) = v35;
  *((_QWORD *)v33 + 10) = *((_QWORD *)v34 + 10);
  v36 = *((_OWORD *)v34 + 4);
  v37 = *((_OWORD *)v34 + 2);
  *((_OWORD *)v33 + 3) = *((_OWORD *)v34 + 3);
  *((_OWORD *)v33 + 4) = v36;
  *((_OWORD *)v33 + 2) = v37;
  *(_QWORD *)((char *)a1 + v5[8]) = *(_QWORD *)((char *)v131 + v5[8]);
  *(_QWORD *)((char *)a1 + v5[9]) = *(_QWORD *)((char *)v131 + v5[9]);
  v38 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v39 = (char *)a1 + v38;
  v40 = (char *)v131 + v38;
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = v41;
  v42 = *((_QWORD *)v40 + 3);
  *((_QWORD *)v39 + 2) = *((_QWORD *)v40 + 2);
  *((_QWORD *)v39 + 3) = v42;
  *((_QWORD *)v39 + 4) = *((_QWORD *)v40 + 4);
  *(_OWORD *)(v39 + 40) = *(_OWORD *)(v40 + 40);
  *(_OWORD *)(v39 + 56) = *(_OWORD *)(v40 + 56);
  *(_OWORD *)(v39 + 72) = *(_OWORD *)(v40 + 72);
  *(_OWORD *)(v39 + 88) = *(_OWORD *)(v40 + 88);
  *(_OWORD *)(v39 + 104) = *(_OWORD *)(v40 + 104);
  v43 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)v131 + a3[5]);
  v44 = (_QWORD *)((char *)a1 + v43);
  v45 = (char *)v131 + v43;
  *v44 = *(_QWORD *)((char *)v131 + v43);
  v46 = type metadata accessor for OvernightMetricsChartPointCollection();
  v47 = *(int *)(v46 + 20);
  v124 = &v45[v47];
  v125 = (char *)v44 + v47;
  v48 = sub_23DDC51E0();
  v123 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v123(v125, v124, v48);
  *(_QWORD *)((char *)v44 + *(int *)(v46 + 24)) = *(_QWORD *)&v45[*(int *)(v46 + 24)];
  v49 = a3[7];
  v50 = (char *)v128 + v49;
  v51 = (char *)v131 + v49;
  swift_bridgeObjectRetain();
  if (v127(v51, 1, v126))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    v53 = sub_23DDC512C();
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
    v54(v50, v51, v53);
    v55 = v126[5];
    v56 = &v50[v55];
    v57 = &v51[v55];
    v54(&v50[v55], &v51[v55], v53);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v54(&v56[*(int *)(v58 + 36)], &v57[*(int *)(v58 + 36)], v53);
    v59 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v56[v59[5]] = *(_QWORD *)&v57[v59[5]];
    *(_QWORD *)&v56[v59[6]] = *(_QWORD *)&v57[v59[6]];
    *(_QWORD *)&v56[v59[7]] = *(_QWORD *)&v57[v59[7]];
    v60 = v126[6];
    v61 = &v50[v60];
    v62 = &v51[v60];
    *(_OWORD *)v61 = *(_OWORD *)v62;
    v61[16] = v62[16];
    v50[v126[7]] = v51[v126[7]];
    v50[v126[8]] = v51[v126[8]];
    v50[v126[9]] = v51[v126[9]];
    v63 = v126[10];
    v64 = &v50[v63];
    v65 = &v51[v63];
    v66 = *((_QWORD *)v65 + 1);
    *(_QWORD *)v64 = *(_QWORD *)v65;
    *((_QWORD *)v64 + 1) = v66;
    v67 = v126[11];
    v68 = &v50[v67];
    v69 = &v51[v67];
    v70 = *((_QWORD *)v69 + 1);
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *((_QWORD *)v68 + 1) = v70;
    v71 = *(void (**)(char *, _QWORD, uint64_t, int *))(v122 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v71(v50, 0, 1, v126);
  }
  v72 = a3[8];
  v73 = (char *)v128 + v72;
  v74 = (char *)v131 + v72;
  if (*(_QWORD *)v74)
  {
    v75 = *((_QWORD *)v74 + 1);
    *(_QWORD *)v73 = *(_QWORD *)v74;
    *((_QWORD *)v73 + 1) = v75;
    v76 = *((_OWORD *)v74 + 2);
    *((_OWORD *)v73 + 1) = *((_OWORD *)v74 + 1);
    *((_OWORD *)v73 + 2) = v76;
    *((_OWORD *)v73 + 3) = *((_OWORD *)v74 + 3);
    *((_QWORD *)v73 + 8) = *((_QWORD *)v74 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v77 = *((_OWORD *)v74 + 3);
    *((_OWORD *)v73 + 2) = *((_OWORD *)v74 + 2);
    *((_OWORD *)v73 + 3) = v77;
    *((_QWORD *)v73 + 8) = *((_QWORD *)v74 + 8);
    v78 = *((_OWORD *)v74 + 1);
    *(_OWORD *)v73 = *(_OWORD *)v74;
    *((_OWORD *)v73 + 1) = v78;
  }
  v79 = a3[10];
  *((_BYTE *)v128 + a3[9]) = *((_BYTE *)v131 + a3[9]);
  v80 = (char *)v128 + v79;
  v81 = (char *)v131 + v79;
  v82 = *((_QWORD *)v81 + 1);
  *(_QWORD *)v80 = *(_QWORD *)v81;
  *((_QWORD *)v80 + 1) = v82;
  *((_OWORD *)v80 + 1) = *((_OWORD *)v81 + 1);
  v83 = a3[12];
  *(_QWORD *)((char *)v128 + a3[11]) = *(_QWORD *)((char *)v131 + a3[11]);
  *(_QWORD *)((char *)v128 + v83) = *(_QWORD *)((char *)v131 + v83);
  v84 = a3[13];
  v85 = (char *)v128 + v84;
  v86 = (char *)v131 + v84;
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v88 = sub_23DDC512C();
  v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16);
  v89(v85, v86, v88);
  sub_23DD13DC0(0);
  v91 = v90;
  v89(&v85[*(int *)(v90 + 36)], &v86[*(int *)(v90 + 36)], v88);
  if (EnumCaseMultiPayload == 1)
    v92 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  else
    v92 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  *(_QWORD *)&v85[*(int *)(v92 + 20)] = *(_QWORD *)&v86[*(int *)(v92 + 20)];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  v93 = a3[14];
  v94 = (char *)v128 + v93;
  v95 = (char *)v131 + v93;
  v89((char *)v128 + v93, (char *)v131 + v93, v88);
  v96 = v91;
  v89(&v94[*(int *)(v91 + 36)], &v95[*(int *)(v91 + 36)], v88);
  v97 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v98 = *(int *)(v97 + 20);
  v99 = &v94[v98];
  v100 = &v95[v98];
  v89(&v94[v98], &v95[v98], v88);
  v89(&v99[*(int *)(v96 + 36)], &v100[*(int *)(v96 + 36)], v88);
  *(_QWORD *)&v94[*(int *)(v97 + 24)] = *(_QWORD *)&v95[*(int *)(v97 + 24)];
  v101 = a3[15];
  v102 = (char *)v128 + v101;
  v103 = (char *)v131 + v101;
  v104 = *(_QWORD *)((char *)v131 + v101);
  swift_bridgeObjectRetain();
  if (v104)
  {
    v105 = *((_QWORD *)v103 + 1);
    v106 = *((_QWORD *)v103 + 2);
    *(_QWORD *)v102 = v104;
    *((_QWORD *)v102 + 1) = v105;
    *((_QWORD *)v102 + 2) = v106;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v102 = *(_OWORD *)v103;
    *((_QWORD *)v102 + 2) = *((_QWORD *)v103 + 2);
  }
  v102[24] = v103[24];
  v102[32] = v103[32];
  v107 = *((_QWORD *)v103 + 6);
  *((_QWORD *)v102 + 5) = *((_QWORD *)v103 + 5);
  *((_QWORD *)v102 + 6) = v107;
  v102[56] = v103[56];
  v108 = *((_QWORD *)v103 + 9);
  *((_QWORD *)v102 + 8) = *((_QWORD *)v103 + 8);
  *((_QWORD *)v102 + 9) = v108;
  *((_QWORD *)v102 + 10) = *((_QWORD *)v103 + 10);
  v109 = *(_OWORD *)(v103 + 88);
  *(_OWORD *)(v102 + 104) = *(_OWORD *)(v103 + 104);
  *(_OWORD *)(v102 + 88) = v109;
  v110 = *(_OWORD *)(v103 + 120);
  v111 = *(_OWORD *)(v103 + 136);
  *(_OWORD *)(v102 + 152) = *(_OWORD *)(v103 + 152);
  *(_OWORD *)(v102 + 136) = v111;
  *(_OWORD *)(v102 + 120) = v110;
  v112 = *((_QWORD *)v103 + 22);
  *((_QWORD *)v102 + 21) = *((_QWORD *)v103 + 21);
  *((_QWORD *)v102 + 22) = v112;
  v114 = *((_QWORD *)v103 + 23);
  v113 = *((_QWORD *)v103 + 24);
  v102[200] = v103[200];
  *((_QWORD *)v102 + 23) = v114;
  *((_QWORD *)v102 + 24) = v113;
  v102[201] = v103[201];
  v115 = *((_QWORD *)v103 + 27);
  *((_QWORD *)v102 + 26) = *((_QWORD *)v103 + 26);
  *((_QWORD *)v102 + 27) = v115;
  v116 = *((_QWORD *)v103 + 29);
  *((_QWORD *)v102 + 28) = *((_QWORD *)v103 + 28);
  *((_QWORD *)v102 + 29) = v116;
  *((_QWORD *)v102 + 30) = *((_QWORD *)v103 + 30);
  v102[248] = v103[248];
  v117 = *((_QWORD *)v103 + 33);
  *((_QWORD *)v102 + 32) = *((_QWORD *)v103 + 32);
  *((_QWORD *)v102 + 33) = v117;
  *((_QWORD *)v102 + 34) = *((_QWORD *)v103 + 34);
  v118 = a3[16];
  v119 = (char *)v128 + v118;
  v120 = (char *)v131 + v118;
  v132 = *(_QWORD *)v120;
  v130 = v120[8];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23DDB7CE0(v132, v130);
  *(_QWORD *)v119 = v132;
  v119[8] = v130;
  return v128;
}

_QWORD *sub_23DDB89D0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t (*v11)(char *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, _QWORD, uint64_t, int *);
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  int v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  void (*v92)(char *, _QWORD, uint64_t, int *);
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  int *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  _QWORD *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  int EnumCaseMultiPayload;
  uint64_t v127;
  void (*v128)(char *, char *, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  _QWORD *v135;
  int *v136;
  void (*v137)(char *, char *, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  char v159;
  uint64_t (*v161)(char *, uint64_t, int *);
  uint64_t (*v162)(char *, uint64_t, int *);
  int *v163;
  int *v164;
  uint64_t v165;
  _QWORD *v166;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v165 = *((_QWORD *)v10 - 1);
  v11 = *(uint64_t (**)(char *, uint64_t, int *))(v165 + 48);
  v12 = v11(v8, 1, v10);
  v13 = v11(v9, 1, v10);
  if (v12)
  {
    if (v13)
    {
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v14);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      goto LABEL_9;
    }
    v16 = sub_23DDC512C();
    v163 = a3;
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v8, v9, v16);
    v18 = v10[5];
    v19 = &v8[v18];
    v161 = v11;
    v20 = &v9[v18];
    v17(&v8[v18], &v9[v18], v16);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v17(&v19[*(int *)(v21 + 36)], &v20[*(int *)(v21 + 36)], v16);
    v22 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v19[v22[5]] = *(_QWORD *)&v20[v22[5]];
    *(_QWORD *)&v19[v22[6]] = *(_QWORD *)&v20[v22[6]];
    *(_QWORD *)&v19[v22[7]] = *(_QWORD *)&v20[v22[7]];
    v23 = v10[6];
    v24 = &v8[v23];
    v25 = &v9[v23];
    v26 = v25[16];
    *(_OWORD *)v24 = *(_OWORD *)v25;
    v24[16] = v26;
    v8[v10[7]] = v9[v10[7]];
    v8[v10[8]] = v9[v10[8]];
    v8[v10[9]] = v9[v10[9]];
    v27 = v10[10];
    v28 = &v8[v27];
    v29 = &v9[v27];
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
    v30 = v10[11];
    v31 = &v8[v30];
    v32 = &v9[v30];
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
    v33 = *(void (**)(char *, _QWORD, uint64_t, int *))(v165 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = v161;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33(v8, 0, 1, v10);
    a3 = v163;
  }
  else
  {
    if (v13)
    {
      sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v34 = sub_23DDC512C();
    v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24);
    v35(v8, v9, v34);
    v36 = v10[5];
    v162 = v11;
    v164 = a3;
    v37 = &v8[v36];
    v38 = &v9[v36];
    v35(&v8[v36], &v9[v36], v34);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v35(&v37[*(int *)(v39 + 36)], &v38[*(int *)(v39 + 36)], v34);
    v40 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v37[v40[5]] = *(_QWORD *)&v38[v40[5]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v37[v40[6]] = *(_QWORD *)&v38[v40[6]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v37[v40[7]] = *(_QWORD *)&v38[v40[7]];
    v11 = v162;
    a3 = v164;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v41 = v10[6];
    v42 = &v8[v41];
    v43 = &v9[v41];
    v44 = *(_OWORD *)v43;
    v42[16] = v43[16];
    *(_OWORD *)v42 = v44;
    v8[v10[7]] = v9[v10[7]];
    v8[v10[8]] = v9[v10[8]];
    v8[v10[9]] = v9[v10[9]];
    v45 = v10[10];
    v46 = &v8[v45];
    v47 = &v9[v45];
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v48 = v10[11];
    v49 = &v8[v48];
    v50 = &v9[v48];
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *((_QWORD *)v49 + 1) = *((_QWORD *)v50 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  v51 = v6[6];
  v52 = (_QWORD *)((char *)a1 + v51);
  v53 = (_QWORD *)((char *)a2 + v51);
  *v52 = *v53;
  v52[1] = v53[1];
  v54 = v6[7];
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  *(_QWORD *)v55 = *(_QWORD *)v56;
  v57 = *((_QWORD *)v56 + 1);
  v55[16] = v56[16];
  *((_QWORD *)v55 + 1) = v57;
  *((_QWORD *)v55 + 3) = *((_QWORD *)v56 + 3);
  *((_QWORD *)v55 + 4) = *((_QWORD *)v56 + 4);
  *((_QWORD *)v55 + 5) = *((_QWORD *)v56 + 5);
  *((_QWORD *)v55 + 6) = *((_QWORD *)v56 + 6);
  *((_QWORD *)v55 + 7) = *((_QWORD *)v56 + 7);
  *((_QWORD *)v55 + 8) = *((_QWORD *)v56 + 8);
  *((_QWORD *)v55 + 9) = *((_QWORD *)v56 + 9);
  *((_QWORD *)v55 + 10) = *((_QWORD *)v56 + 10);
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
  v58 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v59 = (_QWORD *)((char *)a1 + v58);
  v60 = (_QWORD *)((char *)a2 + v58);
  *(_QWORD *)((char *)a1 + v58) = *(_QWORD *)((char *)a2 + v58);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59[1] = v60[1];
  v59[2] = v60[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59[3] = v60[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59[4] = v60[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59[5] = v60[5];
  v59[6] = v60[6];
  v59[7] = v60[7];
  v59[8] = v60[8];
  v59[9] = v60[9];
  v59[10] = v60[10];
  v59[11] = v60[11];
  v59[12] = v60[12];
  v59[13] = v60[13];
  v59[14] = v60[14];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v61 = a3[6];
  v62 = (char *)a1 + v61;
  v63 = (char *)a2 + v61;
  *(_QWORD *)((char *)a1 + v61) = *(_QWORD *)((char *)a2 + v61);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v64 = type metadata accessor for OvernightMetricsChartPointCollection();
  v65 = *(int *)(v64 + 20);
  v66 = &v62[v65];
  v67 = &v63[v65];
  v68 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 24))(v66, v67, v68);
  *(_QWORD *)&v62[*(int *)(v64 + 24)] = *(_QWORD *)&v63[*(int *)(v64 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v69 = a3[7];
  v70 = (char *)a1 + v69;
  v71 = (char *)a2 + v69;
  LODWORD(v64) = v11((char *)a1 + v69, 1, v10);
  v72 = v11(v71, 1, v10);
  if ((_DWORD)v64)
  {
    if (v72)
    {
      v73 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_14:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v73);
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      goto LABEL_17;
    }
    v75 = sub_23DDC512C();
    v76 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16);
    v76(v70, v71, v75);
    v77 = v10[5];
    v78 = &v70[v77];
    v79 = &v71[v77];
    v76(&v70[v77], &v71[v77], v75);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v76(&v78[*(int *)(v80 + 36)], &v79[*(int *)(v80 + 36)], v75);
    v81 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v78[v81[5]] = *(_QWORD *)&v79[v81[5]];
    *(_QWORD *)&v78[v81[6]] = *(_QWORD *)&v79[v81[6]];
    *(_QWORD *)&v78[v81[7]] = *(_QWORD *)&v79[v81[7]];
    v82 = v10[6];
    v83 = &v70[v82];
    v84 = &v71[v82];
    v85 = v84[16];
    *(_OWORD *)v83 = *(_OWORD *)v84;
    v83[16] = v85;
    v70[v10[7]] = v71[v10[7]];
    v70[v10[8]] = v71[v10[8]];
    v70[v10[9]] = v71[v10[9]];
    v86 = v10[10];
    v87 = &v70[v86];
    v88 = &v71[v86];
    *(_QWORD *)v87 = *(_QWORD *)v88;
    *((_QWORD *)v87 + 1) = *((_QWORD *)v88 + 1);
    v89 = v10[11];
    v90 = &v70[v89];
    v91 = &v71[v89];
    *(_QWORD *)v90 = *(_QWORD *)v91;
    *((_QWORD *)v90 + 1) = *((_QWORD *)v91 + 1);
    v92 = *(void (**)(char *, _QWORD, uint64_t, int *))(v165 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v92(v70, 0, 1, v10);
  }
  else
  {
    if (v72)
    {
      sub_23DCF59A8((uint64_t)v70, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v73 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_14;
    }
    v93 = sub_23DDC512C();
    v94 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 24);
    v94(v70, v71, v93);
    v95 = v10[5];
    v96 = &v70[v95];
    v97 = &v71[v95];
    v94(&v70[v95], &v71[v95], v93);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v94(&v96[*(int *)(v98 + 36)], &v97[*(int *)(v98 + 36)], v93);
    v99 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v96[v99[5]] = *(_QWORD *)&v97[v99[5]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v96[v99[6]] = *(_QWORD *)&v97[v99[6]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v96[v99[7]] = *(_QWORD *)&v97[v99[7]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v100 = v10[6];
    v101 = &v70[v100];
    v102 = &v71[v100];
    v103 = *(_OWORD *)v102;
    v101[16] = v102[16];
    *(_OWORD *)v101 = v103;
    v70[v10[7]] = v71[v10[7]];
    v70[v10[8]] = v71[v10[8]];
    v70[v10[9]] = v71[v10[9]];
    v104 = v10[10];
    v105 = &v70[v104];
    v106 = &v71[v104];
    *(_QWORD *)v105 = *(_QWORD *)v106;
    *((_QWORD *)v105 + 1) = *((_QWORD *)v106 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v107 = v10[11];
    v108 = &v70[v107];
    v109 = &v71[v107];
    *(_QWORD *)v108 = *(_QWORD *)v109;
    *((_QWORD *)v108 + 1) = *((_QWORD *)v109 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_17:
  v110 = a3[8];
  v111 = (_QWORD *)((char *)a1 + v110);
  v112 = (char *)a2 + v110;
  v113 = *(_QWORD *)((char *)a2 + v110);
  if (*(_QWORD *)((char *)a1 + v110))
  {
    if (v113)
    {
      *v111 = v113;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v111[1] = *((_QWORD *)v112 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v111[2] = *((_QWORD *)v112 + 2);
      v111[3] = *((_QWORD *)v112 + 3);
      v111[4] = *((_QWORD *)v112 + 4);
      v111[5] = *((_QWORD *)v112 + 5);
      v111[6] = *((_QWORD *)v112 + 6);
      v111[7] = *((_QWORD *)v112 + 7);
      v111[8] = *((_QWORD *)v112 + 8);
    }
    else
    {
      sub_23DCF5648((uint64_t)a1 + v110);
      *(_OWORD *)v111 = *(_OWORD *)v112;
      v115 = *((_OWORD *)v112 + 2);
      v114 = *((_OWORD *)v112 + 3);
      v116 = *((_OWORD *)v112 + 1);
      v111[8] = *((_QWORD *)v112 + 8);
      *((_OWORD *)v111 + 2) = v115;
      *((_OWORD *)v111 + 3) = v114;
      *((_OWORD *)v111 + 1) = v116;
    }
  }
  else if (v113)
  {
    *v111 = v113;
    v111[1] = *((_QWORD *)v112 + 1);
    v111[2] = *((_QWORD *)v112 + 2);
    v111[3] = *((_QWORD *)v112 + 3);
    v111[4] = *((_QWORD *)v112 + 4);
    v111[5] = *((_QWORD *)v112 + 5);
    v111[6] = *((_QWORD *)v112 + 6);
    v111[7] = *((_QWORD *)v112 + 7);
    v111[8] = *((_QWORD *)v112 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v111 = *(_OWORD *)v112;
    v117 = *((_OWORD *)v112 + 1);
    v118 = *((_OWORD *)v112 + 2);
    v119 = *((_OWORD *)v112 + 3);
    v111[8] = *((_QWORD *)v112 + 8);
    *((_OWORD *)v111 + 2) = v118;
    *((_OWORD *)v111 + 3) = v119;
    *((_OWORD *)v111 + 1) = v117;
  }
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v120 = a3[10];
  v121 = (_QWORD *)((char *)a1 + v120);
  v122 = (_QWORD *)((char *)a2 + v120);
  *(_QWORD *)((char *)a1 + v120) = *(_QWORD *)((char *)a2 + v120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v121[1] = v122[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v121[2] = v122[2];
  v121[3] = v122[3];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v123 = a3[13];
    v124 = (char *)a1 + v123;
    v125 = (char *)a2 + v123;
    sub_23DCF59A8((uint64_t)a1 + v123, type metadata accessor for OvernightMetricsAxisConfiguration);
    type metadata accessor for OvernightMetricsAxisConfiguration(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v127 = sub_23DDC512C();
    v128 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 16);
    v128(v124, v125, v127);
    sub_23DD13DC0(0);
    v128(&v124[*(int *)(v129 + 36)], &v125[*(int *)(v129 + 36)], v127);
    if (EnumCaseMultiPayload == 1)
      v130 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
    else
      v130 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
    *(_QWORD *)&v124[*(int *)(v130 + 20)] = *(_QWORD *)&v125[*(int *)(v130 + 20)];
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  v131 = a3[14];
  v132 = (char *)a1 + v131;
  v133 = (char *)a2 + v131;
  v134 = sub_23DDC512C();
  v166 = a1;
  v135 = a2;
  v136 = a3;
  v137 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 24);
  v137(v132, v133, v134);
  sub_23DD13DC0(0);
  v139 = v138;
  v137(&v132[*(int *)(v138 + 36)], &v133[*(int *)(v138 + 36)], v134);
  v140 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v141 = *(int *)(v140 + 20);
  v142 = &v132[v141];
  v143 = &v133[v141];
  v137(&v132[v141], &v133[v141], v134);
  v137(&v142[*(int *)(v139 + 36)], &v143[*(int *)(v139 + 36)], v134);
  *(_QWORD *)&v132[*(int *)(v140 + 24)] = *(_QWORD *)&v133[*(int *)(v140 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v144 = v136[15];
  v145 = (char *)v166 + v144;
  v146 = (char *)v135 + v144;
  v147 = *(_QWORD *)((char *)v135 + v144);
  if (*(_QWORD *)((char *)v166 + v144))
  {
    if (v147)
    {
      *(_QWORD *)v145 = v147;
      swift_retain();
      swift_release();
      *((_QWORD *)v145 + 1) = *((_QWORD *)v146 + 1);
      swift_retain();
      swift_release();
      *((_QWORD *)v145 + 2) = *((_QWORD *)v146 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_23DCF9EB8((uint64_t)v166 + v144);
      v148 = *((_QWORD *)v146 + 2);
      *(_OWORD *)v145 = *(_OWORD *)v146;
      *((_QWORD *)v145 + 2) = v148;
    }
  }
  else if (v147)
  {
    *(_QWORD *)v145 = v147;
    *((_QWORD *)v145 + 1) = *((_QWORD *)v146 + 1);
    *((_QWORD *)v145 + 2) = *((_QWORD *)v146 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v149 = *(_OWORD *)v146;
    *((_QWORD *)v145 + 2) = *((_QWORD *)v146 + 2);
    *(_OWORD *)v145 = v149;
  }
  v145[24] = v146[24];
  v145[32] = v146[32];
  *((_QWORD *)v145 + 5) = *((_QWORD *)v146 + 5);
  swift_retain();
  swift_release();
  v150 = *((_QWORD *)v146 + 6);
  v145[56] = v146[56];
  *((_QWORD *)v145 + 6) = v150;
  *((_QWORD *)v145 + 8) = *((_QWORD *)v146 + 8);
  *((_QWORD *)v145 + 9) = *((_QWORD *)v146 + 9);
  swift_retain();
  swift_release();
  *((_QWORD *)v145 + 10) = *((_QWORD *)v146 + 10);
  swift_retain();
  swift_release();
  *((_QWORD *)v145 + 11) = *((_QWORD *)v146 + 11);
  v151 = *((_QWORD *)v146 + 12);
  v145[104] = v146[104];
  *((_QWORD *)v145 + 12) = v151;
  *((_QWORD *)v145 + 14) = *((_QWORD *)v146 + 14);
  *((_QWORD *)v145 + 15) = *((_QWORD *)v146 + 15);
  *((_QWORD *)v145 + 16) = *((_QWORD *)v146 + 16);
  *((_QWORD *)v145 + 17) = *((_QWORD *)v146 + 17);
  *((_QWORD *)v145 + 18) = *((_QWORD *)v146 + 18);
  *((_QWORD *)v145 + 19) = *((_QWORD *)v146 + 19);
  *((_QWORD *)v145 + 20) = *((_QWORD *)v146 + 20);
  *((_QWORD *)v145 + 21) = *((_QWORD *)v146 + 21);
  *((_QWORD *)v145 + 22) = *((_QWORD *)v146 + 22);
  swift_retain();
  swift_release();
  *((_QWORD *)v145 + 23) = *((_QWORD *)v146 + 23);
  swift_retain();
  swift_release();
  v152 = *((_QWORD *)v146 + 24);
  v145[200] = v146[200];
  *((_QWORD *)v145 + 24) = v152;
  v145[201] = v146[201];
  *((_QWORD *)v145 + 26) = *((_QWORD *)v146 + 26);
  swift_retain();
  swift_release();
  *((_QWORD *)v145 + 27) = *((_QWORD *)v146 + 27);
  swift_retain();
  swift_release();
  *((_QWORD *)v145 + 28) = *((_QWORD *)v146 + 28);
  swift_retain();
  swift_release();
  *((_QWORD *)v145 + 29) = *((_QWORD *)v146 + 29);
  swift_retain();
  swift_release();
  *((_QWORD *)v145 + 30) = *((_QWORD *)v146 + 30);
  swift_retain();
  swift_release();
  v145[248] = v146[248];
  *((_QWORD *)v145 + 32) = *((_QWORD *)v146 + 32);
  swift_retain();
  swift_release();
  *((_QWORD *)v145 + 33) = *((_QWORD *)v146 + 33);
  swift_retain();
  swift_release();
  *((_QWORD *)v145 + 34) = *((_QWORD *)v146 + 34);
  v153 = v136[16];
  v154 = (char *)v166 + v153;
  v155 = (char *)v135 + v153;
  v156 = *(_QWORD *)v155;
  v157 = v155[8];
  sub_23DDB7CE0(*(_QWORD *)v155, v157);
  v158 = *(_QWORD *)v154;
  v159 = v154[8];
  *(_QWORD *)v154 = v156;
  v154[8] = v157;
  sub_23DD36804(v158, v159);
  return v166;
}

_QWORD *sub_23DDB9918(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  int EnumCaseMultiPayload;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  int *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(char *, uint64_t, int *);
  _QWORD *v94;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v11 = *((_QWORD *)v10 - 1);
  v93 = *(unsigned int (**)(char *, uint64_t, int *))(v11 + 48);
  if (v93(v9, 1, v10))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = sub_23DDC512C();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
    v14(v8, v9, v13);
    v15 = v10[5];
    v90 = a3;
    v91 = v11;
    v16 = &v8[v15];
    v17 = &v9[v15];
    v14(&v8[v15], &v9[v15], v13);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v14(&v16[*(int *)(v18 + 36)], &v17[*(int *)(v18 + 36)], v13);
    v19 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v16[v19[5]] = *(_QWORD *)&v17[v19[5]];
    *(_QWORD *)&v16[v19[6]] = *(_QWORD *)&v17[v19[6]];
    *(_QWORD *)&v16[v19[7]] = *(_QWORD *)&v17[v19[7]];
    a3 = v90;
    v11 = v91;
    v20 = v10[6];
    v21 = &v8[v20];
    v22 = &v9[v20];
    *(_OWORD *)v21 = *(_OWORD *)v22;
    v21[16] = v22[16];
    v8[v10[7]] = v9[v10[7]];
    v8[v10[8]] = v9[v10[8]];
    v8[v10[9]] = v9[v10[9]];
    *(_OWORD *)&v8[v10[10]] = *(_OWORD *)&v9[v10[10]];
    *(_OWORD *)&v8[v10[11]] = *(_OWORD *)&v9[v10[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v91 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
  v23 = v6[7];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  *((_QWORD *)v24 + 10) = *((_QWORD *)v25 + 10);
  v27 = *((_OWORD *)v25 + 4);
  v28 = *((_OWORD *)v25 + 2);
  *((_OWORD *)v24 + 3) = *((_OWORD *)v25 + 3);
  *((_OWORD *)v24 + 4) = v27;
  *((_OWORD *)v24 + 2) = v28;
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
  v29 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = *((_OWORD *)v31 + 1);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = v32;
  v33 = *((_OWORD *)v31 + 3);
  *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
  *((_OWORD *)v30 + 3) = v33;
  *((_QWORD *)v30 + 14) = *((_QWORD *)v31 + 14);
  v34 = *((_OWORD *)v31 + 6);
  v35 = *((_OWORD *)v31 + 4);
  *((_OWORD *)v30 + 5) = *((_OWORD *)v31 + 5);
  *((_OWORD *)v30 + 6) = v34;
  *((_OWORD *)v30 + 4) = v35;
  v36 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  *(_QWORD *)((char *)a1 + v36) = *(_QWORD *)((char *)a2 + v36);
  v39 = type metadata accessor for OvernightMetricsChartPointCollection();
  v40 = *(int *)(v39 + 20);
  v41 = &v37[v40];
  v42 = &v38[v40];
  v43 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
  *(_QWORD *)&v37[*(int *)(v39 + 24)] = *(_QWORD *)&v38[*(int *)(v39 + 24)];
  v44 = a3[7];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  if (v93((char *)a2 + v44, 1, v10))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v48 = sub_23DDC512C();
    v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32);
    v49(v45, v46, v48);
    v50 = v10[5];
    v51 = &v45[v50];
    v92 = v11;
    v52 = &v46[v50];
    v49(&v45[v50], &v46[v50], v48);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v49(&v51[*(int *)(v53 + 36)], &v52[*(int *)(v53 + 36)], v48);
    v54 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v51[v54[5]] = *(_QWORD *)&v52[v54[5]];
    *(_QWORD *)&v51[v54[6]] = *(_QWORD *)&v52[v54[6]];
    *(_QWORD *)&v51[v54[7]] = *(_QWORD *)&v52[v54[7]];
    v55 = v10[6];
    v56 = &v45[v55];
    v57 = &v46[v55];
    *(_OWORD *)v56 = *(_OWORD *)v57;
    v56[16] = v57[16];
    v45[v10[7]] = v46[v10[7]];
    v45[v10[8]] = v46[v10[8]];
    v45[v10[9]] = v46[v10[9]];
    *(_OWORD *)&v45[v10[10]] = *(_OWORD *)&v46[v10[10]];
    *(_OWORD *)&v45[v10[11]] = *(_OWORD *)&v46[v10[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v92 + 56))(v45, 0, 1, v10);
  }
  v58 = a3[8];
  v59 = a3[9];
  v60 = (char *)a1 + v58;
  v61 = (char *)a2 + v58;
  *((_QWORD *)v60 + 8) = *((_QWORD *)v61 + 8);
  v62 = *((_OWORD *)v61 + 3);
  *((_OWORD *)v60 + 2) = *((_OWORD *)v61 + 2);
  *((_OWORD *)v60 + 3) = v62;
  v63 = *((_OWORD *)v61 + 1);
  *(_OWORD *)v60 = *(_OWORD *)v61;
  *((_OWORD *)v60 + 1) = v63;
  *((_BYTE *)a1 + v59) = *((_BYTE *)a2 + v59);
  v64 = a3[10];
  v65 = a3[11];
  v66 = (_OWORD *)((char *)a1 + v64);
  v67 = (_OWORD *)((char *)a2 + v64);
  v68 = v67[1];
  *v66 = *v67;
  v66[1] = v68;
  *(_QWORD *)((char *)a1 + v65) = *(_QWORD *)((char *)a2 + v65);
  v69 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  v70 = (char *)a1 + v69;
  v71 = (char *)a2 + v69;
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v73 = sub_23DDC512C();
  v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32);
  v74(v70, v71, v73);
  sub_23DD13DC0(0);
  v76 = v75;
  v74(&v70[*(int *)(v75 + 36)], &v71[*(int *)(v75 + 36)], v73);
  if (EnumCaseMultiPayload == 1)
    v77 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  else
    v77 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  *(_QWORD *)&v70[*(int *)(v77 + 20)] = *(_QWORD *)&v71[*(int *)(v77 + 20)];
  swift_storeEnumTagMultiPayload();
  v78 = a3[14];
  v79 = (char *)a1 + v78;
  v80 = (char *)a2 + v78;
  v74((char *)a1 + v78, (char *)a2 + v78, v73);
  v74(&v79[*(int *)(v76 + 36)], &v80[*(int *)(v76 + 36)], v73);
  v81 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v82 = *(int *)(v81 + 20);
  v83 = &v79[v82];
  v94 = a2;
  v84 = a3;
  v85 = &v80[v82];
  v74(&v79[v82], &v80[v82], v73);
  v74(&v83[*(int *)(v76 + 36)], &v85[*(int *)(v76 + 36)], v73);
  *(_QWORD *)&v79[*(int *)(v81 + 24)] = *(_QWORD *)&v80[*(int *)(v81 + 24)];
  memcpy((char *)a1 + v84[15], (char *)v94 + v84[15], 0x118uLL);
  v86 = v84[16];
  v87 = (char *)a1 + v86;
  v88 = (char *)v94 + v86;
  *(_QWORD *)v87 = *(_QWORD *)v88;
  v87[8] = v88[8];
  return a1;
}

_QWORD *sub_23DDB9F00(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int EnumCaseMultiPayload;
  uint64_t v110;
  void (*v111)(char *, char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  void (*v118)(char *, char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  _QWORD *v124;
  int *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  int *v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(char *, uint64_t, int *);
  _QWORD *v145;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v144 = v12;
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (v14)
    {
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v15);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      goto LABEL_9;
    }
    v17 = sub_23DDC512C();
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
    v18(v8, v9, v17);
    v19 = v10[5];
    v139 = a3;
    v141 = v11;
    v20 = &v8[v19];
    v21 = &v9[v19];
    v18(&v8[v19], &v9[v19], v17);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v18(&v20[*(int *)(v22 + 36)], &v21[*(int *)(v22 + 36)], v17);
    v23 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v20[v23[5]] = *(_QWORD *)&v21[v23[5]];
    *(_QWORD *)&v20[v23[6]] = *(_QWORD *)&v21[v23[6]];
    *(_QWORD *)&v20[v23[7]] = *(_QWORD *)&v21[v23[7]];
    a3 = v139;
    v11 = v141;
    v24 = v10[6];
    v25 = &v8[v24];
    v26 = &v9[v24];
    *(_OWORD *)v25 = *(_OWORD *)v26;
    v25[16] = v26[16];
    v8[v10[7]] = v9[v10[7]];
    v8[v10[8]] = v9[v10[8]];
    v8[v10[9]] = v9[v10[9]];
    *(_OWORD *)&v8[v10[10]] = *(_OWORD *)&v9[v10[10]];
    *(_OWORD *)&v8[v10[11]] = *(_OWORD *)&v9[v10[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v141 + 56))(v8, 0, 1, v10);
  }
  else
  {
    if (v14)
    {
      sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v27 = sub_23DDC512C();
    v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 40);
    v28(v8, v9, v27);
    v29 = v10[5];
    v140 = a3;
    v142 = v11;
    v30 = &v8[v29];
    v31 = &v9[v29];
    v28(&v8[v29], &v9[v29], v27);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v28(&v30[*(int *)(v32 + 36)], &v31[*(int *)(v32 + 36)], v27);
    v33 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v30[v33[5]] = *(_QWORD *)&v31[v33[5]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v30[v33[6]] = *(_QWORD *)&v31[v33[6]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v30[v33[7]] = *(_QWORD *)&v31[v33[7]];
    a3 = v140;
    v11 = v142;
    swift_bridgeObjectRelease();
    v34 = v10[6];
    v35 = &v8[v34];
    v36 = &v9[v34];
    *(_OWORD *)v35 = *(_OWORD *)v36;
    v35[16] = v36[16];
    v8[v10[7]] = v9[v10[7]];
    v8[v10[8]] = v9[v10[8]];
    v8[v10[9]] = v9[v10[9]];
    v37 = v10[10];
    v38 = &v8[v37];
    v39 = &v9[v37];
    v41 = *(_QWORD *)v39;
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = v41;
    *((_QWORD *)v38 + 1) = v40;
    swift_bridgeObjectRelease();
    v42 = v10[11];
    v43 = &v8[v42];
    v44 = &v9[v42];
    v46 = *(_QWORD *)v44;
    v45 = *((_QWORD *)v44 + 1);
    *(_QWORD *)v43 = v46;
    *((_QWORD *)v43 + 1) = v45;
    swift_bridgeObjectRelease();
  }
LABEL_9:
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
  v47 = v6[7];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
  v48[16] = v49[16];
  *(_OWORD *)(v48 + 24) = *(_OWORD *)(v49 + 24);
  *(_OWORD *)(v48 + 40) = *(_OWORD *)(v49 + 40);
  *(_OWORD *)(v48 + 56) = *(_OWORD *)(v49 + 56);
  *(_OWORD *)(v48 + 72) = *(_OWORD *)(v49 + 72);
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
  v50 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  *(_QWORD *)((char *)a1 + v50) = *(_QWORD *)((char *)a2 + v50);
  swift_bridgeObjectRelease();
  *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
  *((_QWORD *)v51 + 2) = *((_QWORD *)v52 + 2);
  swift_bridgeObjectRelease();
  *((_QWORD *)v51 + 3) = *((_QWORD *)v52 + 3);
  swift_bridgeObjectRelease();
  *((_QWORD *)v51 + 4) = *((_QWORD *)v52 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v51 + 40) = *(_OWORD *)(v52 + 40);
  *(_OWORD *)(v51 + 56) = *(_OWORD *)(v52 + 56);
  *(_OWORD *)(v51 + 72) = *(_OWORD *)(v52 + 72);
  *(_OWORD *)(v51 + 88) = *(_OWORD *)(v52 + 88);
  *(_OWORD *)(v51 + 104) = *(_OWORD *)(v52 + 104);
  v53 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v54 = (char *)a1 + v53;
  v55 = (char *)a2 + v53;
  *(_QWORD *)((char *)a1 + v53) = *(_QWORD *)((char *)a2 + v53);
  swift_bridgeObjectRelease();
  v56 = type metadata accessor for OvernightMetricsChartPointCollection();
  v57 = *(int *)(v56 + 20);
  v58 = &v54[v57];
  v59 = &v55[v57];
  v60 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 40))(v58, v59, v60);
  *(_QWORD *)&v54[*(int *)(v56 + 24)] = *(_QWORD *)&v55[*(int *)(v56 + 24)];
  swift_bridgeObjectRelease();
  v61 = a3[7];
  v62 = (char *)a1 + v61;
  v63 = (char *)a2 + v61;
  LODWORD(v59) = v144((char *)a1 + v61, 1, v10);
  v64 = v144(v63, 1, v10);
  if ((_DWORD)v59)
  {
    if (v64)
    {
      v65 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_14:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v65);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      goto LABEL_17;
    }
    v67 = sub_23DDC512C();
    v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32);
    v68(v62, v63, v67);
    v69 = v10[5];
    v70 = &v62[v69];
    v143 = v11;
    v71 = &v63[v69];
    v68(&v62[v69], &v63[v69], v67);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v68(&v70[*(int *)(v72 + 36)], &v71[*(int *)(v72 + 36)], v67);
    v73 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v70[v73[5]] = *(_QWORD *)&v71[v73[5]];
    *(_QWORD *)&v70[v73[6]] = *(_QWORD *)&v71[v73[6]];
    *(_QWORD *)&v70[v73[7]] = *(_QWORD *)&v71[v73[7]];
    v74 = v10[6];
    v75 = &v62[v74];
    v76 = &v63[v74];
    *(_OWORD *)v75 = *(_OWORD *)v76;
    v75[16] = v76[16];
    v62[v10[7]] = v63[v10[7]];
    v62[v10[8]] = v63[v10[8]];
    v62[v10[9]] = v63[v10[9]];
    *(_OWORD *)&v62[v10[10]] = *(_OWORD *)&v63[v10[10]];
    *(_OWORD *)&v62[v10[11]] = *(_OWORD *)&v63[v10[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v143 + 56))(v62, 0, 1, v10);
  }
  else
  {
    if (v64)
    {
      sub_23DCF59A8((uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v65 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_14;
    }
    v77 = sub_23DDC512C();
    v78 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 40);
    v78(v62, v63, v77);
    v79 = v10[5];
    v80 = &v62[v79];
    v81 = &v63[v79];
    v78(&v62[v79], &v63[v79], v77);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v78(&v80[*(int *)(v82 + 36)], &v81[*(int *)(v82 + 36)], v77);
    v83 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v80[v83[5]] = *(_QWORD *)&v81[v83[5]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v80[v83[6]] = *(_QWORD *)&v81[v83[6]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v80[v83[7]] = *(_QWORD *)&v81[v83[7]];
    swift_bridgeObjectRelease();
    v84 = v10[6];
    v85 = &v62[v84];
    v86 = &v63[v84];
    *(_OWORD *)v85 = *(_OWORD *)v86;
    v85[16] = v86[16];
    v62[v10[7]] = v63[v10[7]];
    v62[v10[8]] = v63[v10[8]];
    v62[v10[9]] = v63[v10[9]];
    v87 = v10[10];
    v88 = &v62[v87];
    v89 = &v63[v87];
    v91 = *(_QWORD *)v89;
    v90 = *((_QWORD *)v89 + 1);
    *(_QWORD *)v88 = v91;
    *((_QWORD *)v88 + 1) = v90;
    swift_bridgeObjectRelease();
    v92 = v10[11];
    v93 = &v62[v92];
    v94 = &v63[v92];
    v96 = *(_QWORD *)v94;
    v95 = *((_QWORD *)v94 + 1);
    *(_QWORD *)v93 = v96;
    *((_QWORD *)v93 + 1) = v95;
    swift_bridgeObjectRelease();
  }
LABEL_17:
  v97 = a3[8];
  v98 = (uint64_t)a1 + v97;
  v99 = (char *)a2 + v97;
  if (*(_QWORD *)((char *)a1 + v97))
  {
    if (*(_QWORD *)v99)
    {
      *(_QWORD *)v98 = *(_QWORD *)v99;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v98 + 8) = *((_QWORD *)v99 + 1);
      swift_bridgeObjectRelease();
      v100 = *((_OWORD *)v99 + 2);
      *(_OWORD *)(v98 + 16) = *((_OWORD *)v99 + 1);
      *(_OWORD *)(v98 + 32) = v100;
      *(_OWORD *)(v98 + 48) = *((_OWORD *)v99 + 3);
      *(_QWORD *)(v98 + 64) = *((_QWORD *)v99 + 8);
      goto LABEL_22;
    }
    sub_23DCF5648(v98);
  }
  v101 = *((_OWORD *)v99 + 3);
  *(_OWORD *)(v98 + 32) = *((_OWORD *)v99 + 2);
  *(_OWORD *)(v98 + 48) = v101;
  *(_QWORD *)(v98 + 64) = *((_QWORD *)v99 + 8);
  v102 = *((_OWORD *)v99 + 1);
  *(_OWORD *)v98 = *(_OWORD *)v99;
  *(_OWORD *)(v98 + 16) = v102;
LABEL_22:
  v103 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v104 = (char *)a1 + v103;
  v105 = (char *)a2 + v103;
  *(_QWORD *)((char *)a1 + v103) = *(_QWORD *)((char *)a2 + v103);
  swift_bridgeObjectRelease();
  *((_QWORD *)v104 + 1) = *((_QWORD *)v105 + 1);
  swift_bridgeObjectRelease();
  *((_OWORD *)v104 + 1) = *((_OWORD *)v105 + 1);
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v106 = a3[13];
    v107 = (char *)a1 + v106;
    v108 = (char *)a2 + v106;
    sub_23DCF59A8((uint64_t)a1 + v106, type metadata accessor for OvernightMetricsAxisConfiguration);
    type metadata accessor for OvernightMetricsAxisConfiguration(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v110 = sub_23DDC512C();
    v111 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 32);
    v111(v107, v108, v110);
    sub_23DD13DC0(0);
    v111(&v107[*(int *)(v112 + 36)], &v108[*(int *)(v112 + 36)], v110);
    if (EnumCaseMultiPayload == 1)
      v113 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
    else
      v113 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
    *(_QWORD *)&v107[*(int *)(v113 + 20)] = *(_QWORD *)&v108[*(int *)(v113 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  v114 = a3[14];
  v115 = (char *)a1 + v114;
  v116 = (char *)a2 + v114;
  v117 = sub_23DDC512C();
  v118 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 40);
  v118(v115, v116, v117);
  sub_23DD13DC0(0);
  v120 = v119;
  v118(&v115[*(int *)(v119 + 36)], &v116[*(int *)(v119 + 36)], v117);
  v121 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v122 = *(int *)(v121 + 20);
  v123 = &v115[v122];
  v145 = a1;
  v124 = a2;
  v125 = a3;
  v126 = &v116[v122];
  v118(&v115[v122], &v116[v122], v117);
  v118(&v123[*(int *)(v120 + 36)], &v126[*(int *)(v120 + 36)], v117);
  *(_QWORD *)&v115[*(int *)(v121 + 24)] = *(_QWORD *)&v116[*(int *)(v121 + 24)];
  swift_bridgeObjectRelease();
  v127 = v125[15];
  v128 = (uint64_t)v145 + v127;
  v129 = (char *)v124 + v127;
  if (!*(_QWORD *)((char *)v145 + v127))
    goto LABEL_31;
  if (!*(_QWORD *)v129)
  {
    sub_23DCF9EB8(v128);
LABEL_31:
    *(_OWORD *)v128 = *(_OWORD *)v129;
    *(_QWORD *)(v128 + 16) = *((_QWORD *)v129 + 2);
    goto LABEL_32;
  }
  *(_QWORD *)v128 = *(_QWORD *)v129;
  swift_release();
  *(_QWORD *)(v128 + 8) = *((_QWORD *)v129 + 1);
  swift_release();
  *(_QWORD *)(v128 + 16) = *((_QWORD *)v129 + 2);
  swift_release();
LABEL_32:
  *(_BYTE *)(v128 + 24) = v129[24];
  *(_BYTE *)(v128 + 32) = v129[32];
  *(_QWORD *)(v128 + 40) = *((_QWORD *)v129 + 5);
  swift_release();
  *(_QWORD *)(v128 + 48) = *((_QWORD *)v129 + 6);
  *(_BYTE *)(v128 + 56) = v129[56];
  *(_QWORD *)(v128 + 64) = *((_QWORD *)v129 + 8);
  *(_QWORD *)(v128 + 72) = *((_QWORD *)v129 + 9);
  swift_release();
  *(_QWORD *)(v128 + 80) = *((_QWORD *)v129 + 10);
  swift_release();
  *(_QWORD *)(v128 + 88) = *((_QWORD *)v129 + 11);
  *(_QWORD *)(v128 + 96) = *((_QWORD *)v129 + 12);
  *(_BYTE *)(v128 + 104) = v129[104];
  v130 = *((_OWORD *)v129 + 8);
  *(_OWORD *)(v128 + 112) = *((_OWORD *)v129 + 7);
  *(_OWORD *)(v128 + 128) = v130;
  v131 = *((_OWORD *)v129 + 10);
  *(_OWORD *)(v128 + 144) = *((_OWORD *)v129 + 9);
  *(_OWORD *)(v128 + 160) = v131;
  *(_QWORD *)(v128 + 176) = *((_QWORD *)v129 + 22);
  swift_release();
  *(_QWORD *)(v128 + 184) = *((_QWORD *)v129 + 23);
  swift_release();
  *(_QWORD *)(v128 + 192) = *((_QWORD *)v129 + 24);
  *(_BYTE *)(v128 + 200) = v129[200];
  *(_BYTE *)(v128 + 201) = v129[201];
  *(_QWORD *)(v128 + 208) = *((_QWORD *)v129 + 26);
  swift_release();
  *(_QWORD *)(v128 + 216) = *((_QWORD *)v129 + 27);
  swift_release();
  *(_QWORD *)(v128 + 224) = *((_QWORD *)v129 + 28);
  swift_release();
  *(_QWORD *)(v128 + 232) = *((_QWORD *)v129 + 29);
  swift_release();
  *(_QWORD *)(v128 + 240) = *((_QWORD *)v129 + 30);
  swift_release();
  *(_BYTE *)(v128 + 248) = v129[248];
  *(_QWORD *)(v128 + 256) = *((_QWORD *)v129 + 32);
  swift_release();
  *(_QWORD *)(v128 + 264) = *((_QWORD *)v129 + 33);
  swift_release();
  *(_QWORD *)(v128 + 272) = *((_QWORD *)v129 + 34);
  v132 = v125[16];
  v133 = (char *)v145 + v132;
  v134 = (char *)v124 + v132;
  v135 = *(_QWORD *)v134;
  LOBYTE(v134) = v134[8];
  v136 = *(_QWORD *)v133;
  v137 = v133[8];
  *(_QWORD *)v133 = v135;
  v133[8] = (char)v134;
  sub_23DD36804(v136, v137);
  return v145;
}

uint64_t sub_23DDBAABC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDBAAC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  v6 = type metadata accessor for OvernightMetricsChartLayout(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for OvernightMetricsChartPointCollection();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_14:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_14;
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v17 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
    v12 = *(_QWORD *)(v17 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v17;
      v13 = a3[13];
    }
    else
    {
      v8 = type metadata accessor for OvernightMetricsChart.Derivations(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = a3[14];
    }
    goto LABEL_14;
  }
  v15 = *(_QWORD *)(a1 + a3[10]);
  if (v15 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  return (v15 + 1);
}

uint64_t sub_23DDBABF4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DDBAC00(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = type metadata accessor for OvernightMetricsChartLayout(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for OvernightMetricsChartPointCollection();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(a1 + a4[10]) = (a2 - 1);
          return;
        }
        v17 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[13];
        }
        else
        {
          v10 = type metadata accessor for OvernightMetricsChart.Derivations(0);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[14];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for AnimatableOvernightMetricsChart()
{
  uint64_t result;

  result = qword_256CFFF10;
  if (!qword_256CFFF10)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DDBAD64()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for OvernightMetricsChartLayout(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for OvernightMetricsChartPointCollection();
    if (v1 <= 0x3F)
    {
      sub_23DCFB328(319, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for OvernightMetricsAxisConfiguration(319);
        if (v3 <= 0x3F)
        {
          type metadata accessor for OvernightMetricsChart.Derivations(319);
          if (v4 <= 0x3F)
            swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_23DDBAE94()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DDBAEA4()
{
  return sub_23DDC5D08();
}

uint64_t sub_23DDBAEC4(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = sub_23DDC51E0();
  v3 = MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return sub_23DDC5D14();
}

uint64_t sub_23DDBAF40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  result = sub_23DDBC778(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = sub_23DDC53A8();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    sub_23DDBC818(result, v5, a1, a2);
    v7 = sub_23DDC53A8();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

uint64_t sub_23DDBAFE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (**v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  _QWORD v79[36];
  _BYTE v80[288];
  _BYTE v81[281];
  _QWORD v82[36];
  _OWORD v83[19];

  v72 = a1;
  v77 = (int *)type metadata accessor for AnimatableOvernightMetricsChart();
  v2 = *(_QWORD *)(*((_QWORD *)v77 - 1) + 64);
  v70 = *((_QWORD *)v77 - 1);
  v71 = v2;
  MEMORY[0x24BDAC7A8](v77);
  v69 = (uint64_t)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  MEMORY[0x24BDAC7A8](v4);
  v63 = (uint64_t)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD221EC(0, (unint64_t *)&qword_256CFE2F8, (uint64_t (*)(void))sub_23DD543EC, (uint64_t)&type metadata for OvernightMetricsXAxisSpaceReserver, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for OvernightMetricsAxisStyle);
  v62 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v58 = (char *)&v56 - v7;
  sub_23DCFB328(0, &qword_256CFCA40, (uint64_t (*)(uint64_t))MEMORY[0x24BDB8338], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v56 - v9;
  sub_23DDBBF48();
  v12 = v11;
  v76 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDBBFC0(0);
  v65 = *(_QWORD *)(v15 - 8);
  v66 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v59 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDBC0C8();
  v64 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v61 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDBC14C();
  v68 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v67 = (uint64_t)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = v1;
  type metadata accessor for OvernightMetricsChartContent();
  sub_23DCF535C(&qword_256CFFF80, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartContent, (uint64_t)&unk_23DDCAA50);
  sub_23DDC59A8();
  v83[0] = *(_OWORD *)(v1 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20) + 56);
  v21 = sub_23DDC5A50();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v10, 1, 1, v21);
  sub_23DCFF9E8();
  sub_23DCF535C(&qword_256CFFF90, (uint64_t (*)(uint64_t))sub_23DDBBF48, MEMORY[0x24BDB8148]);
  sub_23DDBC070();
  sub_23DDC60C8();
  sub_23DCFEA1C((uint64_t)v10, &qword_256CFCA40, (uint64_t (*)(uint64_t))MEMORY[0x24BDB8338]);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v14, v12);
  v22 = v77[13];
  v60 = v1;
  v23 = v1 + v22;
  v24 = (uint64_t *)(v60 + v77[8]);
  v26 = *v24;
  v25 = v24[1];
  v28 = v24[2];
  v27 = v24[3];
  v30 = v24[4];
  v29 = v24[5];
  v75 = v24[6];
  v76 = v29;
  v32 = v24[7];
  v31 = v24[8];
  v73 = v27;
  v74 = v32;
  v56 = v26;
  v57 = v31;
  v79[0] = swift_getKeyPath();
  sub_23DD50E00((uint64_t)v79);
  sub_23DCFBB58((uint64_t)v79, (uint64_t)v80, (uint64_t (*)(_QWORD))sub_23DD50E08);
  memcpy(v81, v80, sizeof(v81));
  v33 = v63;
  sub_23DCF58EC(v23, v63, type metadata accessor for OvernightMetricsAxisConfiguration);
  v82[0] = swift_getKeyPath();
  sub_23DD50E00((uint64_t)v82);
  sub_23DCFBB58((uint64_t)v82, (uint64_t)v83, (uint64_t (*)(_QWORD))sub_23DD50E08);
  v34 = v62;
  v35 = (uint64_t)v58;
  memcpy(&v58[v62[10]], v81, 0x119uLL);
  sub_23DCFBB58(v33, v35, type metadata accessor for OvernightMetricsAxisConfiguration);
  v36 = (uint64_t *)(v35 + v34[9]);
  *v36 = v26;
  v36[1] = v25;
  v37 = v73;
  v36[2] = v28;
  v36[3] = v37;
  v38 = v76;
  v36[4] = v30;
  v36[5] = v38;
  v39 = v74;
  v36[6] = v75;
  v36[7] = v39;
  v36[8] = v57;
  memcpy((void *)(v35 + v34[11]), v83, 0x119uLL);
  v40 = (uint64_t *)(v35 + v34[12]);
  *v40 = swift_getKeyPath();
  sub_23DCFB328(0, (unint64_t *)&qword_256CFC9F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v42 = v65;
  v41 = v66;
  v43 = (uint64_t)v61;
  v44 = v59;
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v61, v59, v66);
  sub_23DDBC1DC(v35, v43 + *(int *)(v64 + 36));
  sub_23DCF59EC(v56);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
  v45 = v60;
  v46 = v69;
  sub_23DCF58EC(v60, v69, (uint64_t (*)(_QWORD))type metadata accessor for AnimatableOvernightMetricsChart);
  v47 = (*(unsigned __int8 *)(v70 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
  v48 = swift_allocObject();
  sub_23DCFBB58(v46, v48 + v47, (uint64_t (*)(_QWORD))type metadata accessor for AnimatableOvernightMetricsChart);
  v49 = v67;
  sub_23DCF58EC(v43, v67, (uint64_t (*)(_QWORD))sub_23DDBC0C8);
  v50 = (uint64_t (**)(uint64_t))(v49 + *(int *)(v68 + 36));
  *v50 = sub_23DDBC6B8;
  v50[1] = (uint64_t (*)(uint64_t))v48;
  sub_23DCF59A8(v43, (uint64_t (*)(_QWORD))sub_23DDBC0C8);
  v51 = sub_23DDC641C();
  LOBYTE(v47) = *(_BYTE *)(v45 + v77[5]);
  v52 = v72;
  sub_23DCF58EC(v49, v72, (uint64_t (*)(_QWORD))sub_23DDBC14C);
  sub_23DDBC6F4();
  v54 = v52 + *(int *)(v53 + 36);
  *(_QWORD *)v54 = v51;
  *(_BYTE *)(v54 + 8) = v47;
  return sub_23DCF59A8(v49, (uint64_t (*)(_QWORD))sub_23DDBC14C);
}

uint64_t *sub_23DDBB60C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int *v4;
  uint64_t v5;
  int *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  const void *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t __dst[36];

  v4 = (int *)type metadata accessor for AnimatableOvernightMetricsChart();
  v31 = *(_BYTE *)(a1 + v4[5]);
  v5 = a1 + v4[6];
  v6 = (int *)type metadata accessor for OvernightMetricsChartContent();
  sub_23DCF58EC(v5, (uint64_t)&a2[v6[5]], (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
  sub_23DD08000(a1 + v4[7], (uint64_t)&a2[v6[6]]);
  v7 = (uint64_t *)(a1 + v4[8]);
  v9 = *v7;
  v8 = v7[1];
  v23 = v7[2];
  v24 = v7[3];
  v25 = v7[4];
  v26 = v7[5];
  v27 = v7[6];
  v28 = v7[7];
  v29 = v7[8];
  v30 = *(_BYTE *)(a1 + v4[9]);
  sub_23DCF59EC(*v7);
  v22 = sub_23DDBB80C();
  v21 = sub_23DDBB9B4();
  v10 = (uint64_t *)(a1 + v4[10]);
  v11 = *v10;
  v12 = v10[1];
  v13 = v10[2];
  v14 = v10[3];
  v15 = *(_QWORD *)(a1 + v4[12]);
  v16 = (double *)&a2[v6[13]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23DDBBB58(v16);
  sub_23DCF58EC(a1, (uint64_t)&a2[v6[14]], type metadata accessor for OvernightMetricsChartLayout);
  v17 = (const void *)(a1 + v4[15]);
  memcpy(__dst, v17, 0x118uLL);
  *a2 = v31;
  v18 = (uint64_t *)&a2[v6[7]];
  *v18 = v9;
  v18[1] = v8;
  v18[2] = v23;
  v18[3] = v24;
  v18[4] = v25;
  v18[5] = v26;
  v18[6] = v27;
  v18[7] = v28;
  v18[8] = v29;
  a2[v6[8]] = v30;
  *(_QWORD *)&a2[v6[9]] = v22;
  *(_QWORD *)&a2[v6[10]] = v21;
  v19 = &a2[v6[11]];
  *v19 = v11;
  v19[1] = v12;
  v19[2] = v13;
  v19[3] = v14;
  *(_QWORD *)&a2[v6[12]] = v15;
  memcpy(&a2[v6[15]], v17, 0x118uLL);
  return sub_23DCFBB9C(__dst);
}

uint64_t sub_23DDBB80C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v16;

  sub_23DCFB328(0, &qword_256CFED88, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v16 - v2;
  v4 = sub_23DDC53A8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AnimatableOvernightMetricsChart();
  v9 = *(_QWORD *)(v0 + *(int *)(v8 + 40) + 8);
  sub_23DDBAF40(v9, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_23DCFEA1C((uint64_t)v3, &qword_256CFED88, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20]);
    return MEMORY[0x24BEE4AF8];
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  if (*(_QWORD *)(v9 + 16) != 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return MEMORY[0x24BEE4AF8];
  }
  v10 = v0 + *(int *)(v8 + 24);
  v11 = *(_QWORD *)(v10 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 24));
  if (*(_QWORD *)(v11 + 16) && (v12 = sub_23DD768A4((uint64_t)v7), (v13 & 1) != 0))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = MEMORY[0x24BEE4AF8];
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

uint64_t sub_23DDBB9B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v16;

  sub_23DCFB328(0, &qword_256CFED88, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v16 - v2;
  v4 = sub_23DDC53A8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AnimatableOvernightMetricsChart();
  v9 = *(_QWORD *)(v0 + *(int *)(v8 + 40));
  sub_23DDBAF40(v9, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_23DCFEA1C((uint64_t)v3, &qword_256CFED88, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20]);
    return MEMORY[0x24BEE4AF8];
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  if (*(_QWORD *)(v9 + 16) != 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return MEMORY[0x24BEE4AF8];
  }
  v10 = v0 + *(int *)(v8 + 24);
  v11 = *(_QWORD *)(v10 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 24));
  if (*(_QWORD *)(v11 + 16) && (v12 = sub_23DD768A4((uint64_t)v7), (v13 & 1) != 0))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = MEMORY[0x24BEE4AF8];
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

unint64_t sub_23DDBBB58@<X0>(double *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  unint64_t result;
  double v37;
  double v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  char v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  sub_23DD13DC0(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v43 - v7;
  v9 = (int *)type metadata accessor for AnimatableOvernightMetricsChart();
  v10 = (__int128 *)(v1 + v9[15]);
  if (*((_BYTE *)v10 + 24) == 1)
  {
    v11 = v1 + v9[14];
    if (*(_BYTE *)(v1 + v9[5]) == 1)
      v11 += *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
    sub_23DCF58EC(v11, (uint64_t)v5, (uint64_t (*)(_QWORD))sub_23DD13DC0);
    sub_23DCFBB58((uint64_t)v5, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DD13DC0);
    v12 = *((_QWORD *)v10 + 2);
    v13 = *((_BYTE *)v10 + 32);
    v14 = *((_QWORD *)v10 + 5);
    v15 = *((_QWORD *)v10 + 6);
    v16 = *((_BYTE *)v10 + 56);
    v17 = *((_QWORD *)v10 + 8);
    v18 = *((_QWORD *)v10 + 11);
    v19 = *((_QWORD *)v10 + 12);
    v20 = *((_BYTE *)v10 + 104);
    v21 = *((_QWORD *)v10 + 24);
    v22 = *((_BYTE *)v10 + 200);
    v23 = *((_BYTE *)v10 + 201);
    v24 = *((_QWORD *)v10 + 30);
    v25 = *((_BYTE *)v10 + 248);
    v26 = *((_QWORD *)v10 + 32);
    v27 = *((_QWORD *)v10 + 33);
    v28 = *((_QWORD *)v10 + 34);
    v43 = *v10;
    v44 = v12;
    v45 = 1;
    v46 = v13;
    v47 = v14;
    v48 = v15;
    v49 = v16;
    v50 = v17;
    v51 = *(__int128 *)((char *)v10 + 72);
    v52 = v18;
    v53 = v19;
    v54 = v20;
    v29 = v10[8];
    v55 = v10[7];
    v56 = v29;
    v30 = v10[10];
    v57 = v10[9];
    v58 = v30;
    v59 = v10[11];
    v60 = v21;
    v61 = v22;
    v62 = v23;
    v31 = v10[14];
    v63 = v10[13];
    v64 = v31;
    v65 = v24;
    v66 = v25;
    v67 = v26;
    v68 = v27;
    v69 = v28;
    v32 = (double *)(v1 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 24));
    v33 = *v32;
    sub_23DCFBB9C((uint64_t *)&v43);
    sub_23DD75560(v33);
    v35 = v34;
    result = sub_23DD75560(v32[1]);
    if (v35 > v37)
      v38 = v35;
    else
      v38 = v37;
    if (v35 > v38)
    {
      __break(1u);
    }
    else
    {
      v39 = type metadata accessor for BaselineSeparators.Configuration(0);
      sub_23DCF58EC((uint64_t)v8, (uint64_t)a1 + *(int *)(v39 + 20), (uint64_t (*)(_QWORD))sub_23DD13DC0);
      v40 = objc_msgSend((id)objc_opt_self(), sel_quaternaryLabelColor);
      v41 = MEMORY[0x242642C18](v40);
      sub_23DCFE908((uint64_t *)&v43);
      *a1 = v35;
      a1[1] = v38;
      *(_QWORD *)((char *)a1 + *(int *)(v39 + 24)) = v41;
      sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DD13DC0);
      return (*(uint64_t (**)(double *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(a1, 0, 1, v39);
    }
  }
  else
  {
    v42 = type metadata accessor for BaselineSeparators.Configuration(0);
    return (*(uint64_t (**)(double *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a1, 1, 1, v42);
  }
  return result;
}

uint64_t sub_23DDBBE28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  _BYTE v12[16];

  v3 = type metadata accessor for AnimatableOvernightMetricsChart();
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23DD23034();
  sub_23DDC5AC8();
  v6 = v12[15];
  sub_23DCF58EC(a2, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for AnimatableOvernightMetricsChart);
  if ((v6 & 1) == 0)
  {
    sub_23DCF59A8((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for AnimatableOvernightMetricsChart);
    return sub_23DDC5ABC();
  }
  v7 = &v5[*(int *)(v3 + 64)];
  v8 = *(_QWORD *)v7;
  v9 = v7[8];
  sub_23DDB7CE0(*(_QWORD *)v7, v9);
  v10 = sub_23DD365D8(v8, v9);
  sub_23DD36804(v8, v9);
  result = sub_23DCF59A8((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for AnimatableOvernightMetricsChart);
  if ((v10 & 1) != 0)
    return sub_23DDC5ABC();
  return result;
}

void sub_23DDBBF48()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFFF78)
  {
    type metadata accessor for OvernightMetricsChartContent();
    sub_23DCF535C(&qword_256CFFF80, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartContent, (uint64_t)&unk_23DDCAA50);
    v0 = sub_23DDC59B4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFFF78);
  }
}

void sub_23DDBBFC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_256CFFF88)
  {
    sub_23DDBBF48();
    v3 = v2;
    sub_23DCFF9E8();
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_23DCF535C(&qword_256CFFF90, (uint64_t (*)(uint64_t))sub_23DDBBF48, MEMORY[0x24BDB8148]);
    v7[3] = sub_23DDBC070();
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDB83E0], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256CFFF88);
  }
}

unint64_t sub_23DDBC070()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256CFFF98;
  if (!qword_256CFFF98)
  {
    sub_23DCFF9E8();
    v2 = MEMORY[0x24BDB84C8];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB8498], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256CFFF98);
  }
  return result;
}

void sub_23DDBC0C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFFFA0)
  {
    sub_23DDBBFC0(255);
    sub_23DD221EC(255, (unint64_t *)&qword_256CFE2F8, (uint64_t (*)(void))sub_23DD543EC, (uint64_t)&type metadata for OvernightMetricsXAxisSpaceReserver, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for OvernightMetricsAxisStyle);
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFFFA0);
  }
}

void sub_23DDBC14C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFFFA8)
  {
    sub_23DDBC0C8();
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFFFA8);
  }
}

uint64_t *sub_23DDBC1A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_23DDBB60C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_23DDBC1B8()
{
  return sub_23DDC5D08();
}

uint64_t sub_23DDBC1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DD221EC(0, (unint64_t *)&qword_256CFE2F8, (uint64_t (*)(void))sub_23DD543EC, (uint64_t)&type metadata for OvernightMetricsXAxisSpaceReserver, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for OvernightMetricsAxisStyle);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DDBC240()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = (int *)type metadata accessor for AnimatableOvernightMetricsChart();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  v3 = v2 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v4 = type metadata accessor for OvernightMetricsChartPoint();
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48);
  if (!v5(v3, 1, v4))
  {
    v6 = sub_23DDC512C();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v7(v3, v6);
    v8 = v3 + *(int *)(v4 + 20);
    v7(v8, v6);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v7(v8 + *(int *)(v9 + 36), v6);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v2 + v1[6];
  swift_bridgeObjectRelease();
  v11 = v10 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v12 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  v13 = v2 + v1[7];
  if (!v5(v13, 1, v4))
  {
    v14 = sub_23DDC512C();
    v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
    v15(v13, v14);
    v16 = v13 + *(int *)(v4 + 20);
    v15(v16, v14);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v15(v16 + *(int *)(v17 + 36), v14);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v2 + v1[8]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = v2 + v1[13];
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v20 = sub_23DDC512C();
  v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v21(v18, v20);
  sub_23DD13DC0(0);
  v23 = v22;
  v21(v18 + *(int *)(v22 + 36), v20);
  if (EnumCaseMultiPayload == 1)
    type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  else
    type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  swift_bridgeObjectRelease();
  v24 = v2 + v1[14];
  v21(v24, v20);
  v21(v24 + *(int *)(v23 + 36), v20);
  v25 = v24 + *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
  v21(v25, v20);
  v21(v25 + *(int *)(v23 + 36), v20);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + v1[15]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_23DD36804(*(_QWORD *)(v2 + v1[16]), *(_BYTE *)(v2 + v1[16] + 8));
  return swift_deallocObject();
}

uint64_t sub_23DDBC6B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnimatableOvernightMetricsChart() - 8) + 80);
  return sub_23DDBBE28(a1, v1 + ((v3 + 16) & ~v3));
}

void sub_23DDBC6F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFFFB0)
  {
    sub_23DDBC14C();
    sub_23DD221EC(255, (unint64_t *)&qword_256CFC3A0, (uint64_t (*)(void))sub_23DCFB664, (uint64_t)&type metadata for BalanceMetricsTimeScope, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEEBF0]);
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFFFB0);
  }
}

uint64_t sub_23DDBC778(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_23DDBC818@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = sub_23DDC53A8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

unint64_t sub_23DDBC8B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFFFB8;
  if (!qword_256CFFFB8)
  {
    sub_23DDBC6F4();
    v2 = v1;
    v3[0] = sub_23DDBC918();
    v3[1] = sub_23DCFB824();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFFFB8);
  }
  return result;
}

unint64_t sub_23DDBC918()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFFFC0;
  if (!qword_256CFFFC0)
  {
    sub_23DDBC14C();
    v2 = v1;
    v3[0] = sub_23DDBC980();
    v3[1] = MEMORY[0x24BDEF830];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFFFC0);
  }
  return result;
}

unint64_t sub_23DDBC980()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];

  result = qword_256CFFFC8;
  if (!qword_256CFFFC8)
  {
    sub_23DDBC0C8();
    v2 = v1;
    sub_23DDBBF48();
    v4 = v3;
    sub_23DCFF9E8();
    v6[2] = v4;
    v6[3] = v5;
    v6[4] = sub_23DCF535C(&qword_256CFFF90, (uint64_t (*)(uint64_t))sub_23DDBBF48, MEMORY[0x24BDB8148]);
    v6[5] = sub_23DDBC070();
    v6[0] = swift_getOpaqueTypeConformance2();
    v6[1] = sub_23DDBCA48();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v6);
    atomic_store(result, (unint64_t *)&qword_256CFFFC8);
  }
  return result;
}

unint64_t sub_23DDBCA48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFE328;
  if (!qword_256CFE328)
  {
    sub_23DD221EC(255, (unint64_t *)&qword_256CFE2F8, (uint64_t (*)(void))sub_23DD543EC, (uint64_t)&type metadata for OvernightMetricsXAxisSpaceReserver, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for OvernightMetricsAxisStyle);
    result = MEMORY[0x242643BD8](&unk_23DDC7E60, v1);
    atomic_store(result, (unint64_t *)&qword_256CFE328);
  }
  return result;
}

uint64_t sub_23DDBCAB0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDBCABC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for OvernightMetricsChartLayout(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_23DDBCB74()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23DDBCB80(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for OvernightMetricsChartLayout(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SingleMetricMinorPointMarks()
{
  uint64_t result;

  result = qword_256D00028;
  if (!qword_256D00028)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DDBCC70()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DCFB328(319, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for OvernightMetricsChartLayout(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_23DDBCD30()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DDBCD40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[288];

  v28 = a3;
  sub_23DDBE318(0);
  v26 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v25 - v9;
  v11 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v25 - v16;
  v18 = type metadata accessor for SingleMetricMinorPointMarks();
  v19 = *(int *)(v18 + 20);
  v25 = a2;
  sub_23DD1710C(a2 + v19, (uint64_t)v10);
  sub_23DCF58EC(a1, (uint64_t)v14, type metadata accessor for IndividualOvernightMetricChartPoint);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_23DCFBB58((uint64_t)v14, (uint64_t)v17, type metadata accessor for IndividualOvernightMetricChartPoint);
    sub_23DD7E69C((uint64_t)v10);
  }
  else
  {
    sub_23DCF59A8((uint64_t)v14, type metadata accessor for IndividualOvernightMetricChartPoint);
    sub_23DCFBB58((uint64_t)v10, (uint64_t)v17, type metadata accessor for IndividualOvernightMetricChartPoint);
  }
  v20 = &v17[*(int *)(v11 + 32)];
  if ((v20[8] & 1) != 0)
  {
    sub_23DD1E37C(0, &qword_256D00108, (uint64_t (*)(uint64_t))sub_23DDBE318, MEMORY[0x24BDB7B58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7F78]);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v21 = *(double *)v20;
    memcpy(v29, (const void *)(v25 + *(int *)(v18 + 32)), 0x118uLL);
    sub_23DDBCFF0((uint64_t)v17, v29, (uint64_t)v7, v21);
    v23 = v26;
    v22 = v27;
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 16))(v28, v7, v27);
    sub_23DD1E37C(0, &qword_256D00108, (uint64_t (*)(uint64_t))sub_23DDBE318, MEMORY[0x24BDB7B58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7F78]);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v22);
  }
  return sub_23DCF59A8((uint64_t)v17, type metadata accessor for IndividualOvernightMetricChartPoint);
}

uint64_t sub_23DDBCFF0@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t OpaqueTypeConformance2;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  char *v63;
  _QWORD v65[3];
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _BYTE v96[288];

  v88 = a1;
  v85 = a3;
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E88];
  sub_23DD315DC(0, (unint64_t *)&qword_256CFCF08, MEMORY[0x24BEE13C8], MEMORY[0x24BDB84C8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB7E88]);
  MEMORY[0x24BDAC7A8](v8);
  v75 = (char *)v65 - v9;
  sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v77 = (uint64_t)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v65 - v13;
  sub_23DCF9010();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1E37C(0, (unint64_t *)&qword_256CFCF10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDB7A98], v7);
  MEMORY[0x24BDAC7A8](v18);
  v68 = (char *)v65 - v19;
  v71 = sub_23DDC5A44();
  v73 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v69 = (char *)v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDBE5BC(0);
  v74 = v21;
  v76 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v70 = (char *)v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDBE504(0);
  v78 = v23;
  v80 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v72 = (char *)v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDBE420(0);
  v81 = v25;
  v84 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v87 = (char *)v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDBE318(0);
  v82 = *(_QWORD *)(v27 - 8);
  v83 = v27;
  MEMORY[0x24BDAC7A8](v27);
  v79 = (char *)v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v96, a2, 0x118uLL);
  sub_23DDC5DC8();
  v67 = v4 + *(int *)(type metadata accessor for SingleMetricMinorPointMarks() + 20);
  sub_23DD1710C(v67, (uint64_t)v14);
  v29 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48);
  v86 = v29;
  v30 = v66(v14, 1, v29);
  sub_23DD7E69C((uint64_t)v14);
  v31 = 28;
  if (v30 == 1)
    v31 = 24;
  sub_23DCF58EC(v88 + *(int *)(v29 + v31), (uint64_t)v17, (uint64_t (*)(_QWORD))sub_23DCF9010);
  v65[1] = sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_254326A30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  sub_23DDC58DC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DCF59A8((uint64_t)v17, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DDC5DC8();
  v32 = v65[2];
  sub_23DD75560(a4);
  v92 = v33;
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = v69;
  sub_23DDC5A38();
  v35 = v88;
  v89 = v32;
  v90 = v88;
  v91 = v96;
  sub_23DDBE650();
  v37 = v36;
  v38 = sub_23DDBE9A0();
  v39 = MEMORY[0x24BDB8320];
  v41 = v70;
  v40 = v71;
  sub_23DDC5870();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v34, v40);
  v42 = v77;
  sub_23DD1710C(v67, v77);
  v43 = v86;
  v66((char *)v42, 1, v86);
  sub_23DD7E69C(v42);
  v92 = v40;
  v93 = v37;
  v94 = v39;
  v95 = v38;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v45 = v72;
  v46 = v74;
  sub_23DDC5858();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v41, v46);
  v47 = (uint64_t *)(v35 + *(int *)(v43 + 40));
  v48 = v47[1];
  v92 = *v47;
  v93 = v48;
  sub_23DD0B190();
  swift_bridgeObjectRetain();
  v49 = sub_23DDC6098();
  v51 = v50;
  LOBYTE(v43) = v52 & 1;
  v92 = v46;
  v93 = OpaqueTypeConformance2;
  v53 = swift_getOpaqueTypeConformance2();
  v54 = v78;
  sub_23DDC5840();
  sub_23DD0B1D4(v49, v51, v43);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v45, v54);
  v55 = (uint64_t *)(v88 + *(int *)(v86 + 48));
  v56 = v55[1];
  v92 = *v55;
  v93 = v56;
  swift_bridgeObjectRetain();
  v57 = sub_23DDC6098();
  v59 = v58;
  LOBYTE(v49) = v60 & 1;
  v92 = v54;
  v93 = v53;
  swift_getOpaqueTypeConformance2();
  v61 = v79;
  v62 = v81;
  v63 = v87;
  sub_23DDC584C();
  sub_23DD0B1D4(v57, v59, v49);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v63, v62);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v82 + 32))(v85, v61, v83);
}

uint64_t sub_23DDBD730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a4;
  sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v36 - v11;
  sub_23DDBE6F4();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23DD1E37C(0, &qword_256D000A0, v16, MEMORY[0x24BDECC50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  v37 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v36 - v18;
  sub_23DDBE650();
  v38 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v15 = sub_23DDC63D4();
  v15[1] = v23;
  sub_23DDBEBF4();
  sub_23DDBDA04(a1, a2, a3, (uint64_t)v15 + *(int *)(v24 + 44));
  v25 = type metadata accessor for SingleMetricMinorPointMarks();
  v26 = a1;
  v27 = a1 + *(int *)(v25 + 20);
  sub_23DD1710C(v27, (uint64_t)v12);
  v28 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48);
  v30 = 0;
  if (v29(v12, 1, v28) == 1)
    v30 = *(_QWORD *)(v26 + *(int *)(v25 + 24));
  sub_23DD7E69C((uint64_t)v12);
  sub_23DCF58EC((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_23DDBE6F4);
  *(_QWORD *)&v19[*(int *)(v37 + 36)] = v30;
  sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))sub_23DDBE6F4);
  v31 = sub_23DDC6410();
  sub_23DD1710C(v27, (uint64_t)v9);
  v32 = v29(v9, 1, v28) != 1;
  sub_23DD7E69C((uint64_t)v9);
  v33 = MEMORY[0x24BDECC50];
  sub_23DDBECD4((uint64_t)v19, (uint64_t)v22, &qword_256D000A0, (uint64_t (*)(uint64_t))sub_23DDBE6F4, MEMORY[0x24BDECC50]);
  v34 = &v22[*(int *)(v38 + 36)];
  *(_QWORD *)v34 = v31;
  v34[8] = v32;
  sub_23DDBED30((uint64_t)v19, &qword_256D000A0, (uint64_t (*)(uint64_t))sub_23DDBE6F4, v33);
  return sub_23DCFBB58((uint64_t)v22, v39, (uint64_t (*)(_QWORD))sub_23DDBE650);
}

uint64_t sub_23DDBDA04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;

  v43 = a3;
  v44 = a2;
  v46 = (char *)a1;
  v47 = a4;
  v4 = sub_23DDC5C6C();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DDC6428();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDBE820();
  v12 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1E37C(0, &qword_256D000C0, v15, MEMORY[0x24BDEBEF8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  v17 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v42 - v21;
  v23 = sub_23DDC6218();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BDF50A0], v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
  v24 = (uint64_t)&v14[*(int *)(v12 + 36)];
  v25 = MEMORY[0x24BDEDB60];
  sub_23DCF58EC((uint64_t)v6, v24, (uint64_t (*)(_QWORD))MEMORY[0x24BDEDB60]);
  *(_QWORD *)v14 = v23;
  *((_WORD *)v14 + 4) = 256;
  swift_retain();
  sub_23DCF59A8((uint64_t)v6, (uint64_t (*)(_QWORD))v25);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
  type metadata accessor for SingleMetricMinorPointMarks();
  type metadata accessor for OvernightMetricsChartLayout(0);
  sub_23DDC63D4();
  sub_23DDC5B34();
  sub_23DCF58EC((uint64_t)v14, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_23DDBE820);
  v26 = &v19[*(int *)(v17 + 36)];
  v27 = v49;
  *(_OWORD *)v26 = v48;
  *((_OWORD *)v26 + 1) = v27;
  *((_OWORD *)v26 + 2) = v50;
  sub_23DCF59A8((uint64_t)v14, (uint64_t (*)(_QWORD))sub_23DDBE820);
  v45 = v22;
  v46 = v19;
  sub_23DDBEC70((uint64_t)v19, (uint64_t)v22);
  if ((*(_BYTE *)(v44 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32) + 8) & 1) != 0)
  {
    v28 = sub_23DDC6200();
  }
  else
  {
    v29 = *(_QWORD *)(v43 + 72);
    v28 = *(_QWORD *)(v43 + 80);
    if ((sub_23DDC54B0() & 1) != 0)
    {
      swift_retain();
    }
    else
    {
      swift_retain();
      v28 = v29;
    }
  }
  sub_23DDC63D4();
  sub_23DDC5B34();
  v30 = v52;
  v31 = v53;
  v32 = v54;
  v44 = v55;
  v42 = v51;
  v43 = v56;
  v33 = MEMORY[0x24BDEBEF8];
  v35 = (uint64_t)v45;
  v34 = (uint64_t)v46;
  sub_23DDBECD4((uint64_t)v45, (uint64_t)v46, &qword_256D000C0, (uint64_t (*)(uint64_t))sub_23DDBE820, MEMORY[0x24BDEBEF8]);
  v36 = v47;
  sub_23DDBECD4(v34, v47, &qword_256D000C0, (uint64_t (*)(uint64_t))sub_23DDBE820, v33);
  sub_23DDBE76C();
  v38 = v36 + *(int *)(v37 + 48);
  v39 = v42;
  *(_QWORD *)v38 = v28;
  *(_QWORD *)(v38 + 8) = v39;
  *(_BYTE *)(v38 + 16) = v30;
  *(_QWORD *)(v38 + 24) = v31;
  *(_BYTE *)(v38 + 32) = v32;
  v40 = v43;
  *(_QWORD *)(v38 + 40) = v44;
  *(_QWORD *)(v38 + 48) = v40;
  swift_retain();
  sub_23DDBED30(v35, &qword_256D000C0, (uint64_t (*)(uint64_t))sub_23DDBE820, v33);
  swift_release();
  return sub_23DDBED30(v34, &qword_256D000C0, (uint64_t (*)(uint64_t))sub_23DDBE820, v33);
}

uint64_t sub_23DDBDDE0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v8[1] = *v1;
  sub_23DCF58EC(v4, (uint64_t)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for SingleMetricMinorPointMarks);
  v5 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v6 = swift_allocObject();
  sub_23DCFBB58((uint64_t)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, (uint64_t (*)(_QWORD))type metadata accessor for SingleMetricMinorPointMarks);
  sub_23DCFB328(0, &qword_254326758, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  type metadata accessor for IndividualOvernightMetricChartPoint.ID(0);
  sub_23DD1E37C(0, &qword_256D00070, (uint64_t (*)(uint64_t))sub_23DDBE318, MEMORY[0x24BDB7B58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7F90]);
  sub_23DD7DEE0();
  sub_23DDBEAA8();
  sub_23DCF535C(&qword_256CFCF00, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t)&unk_23DDCB510);
  swift_bridgeObjectRetain();
  return sub_23DDC635C();
}

uint64_t sub_23DDBDF70()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v1 = (int *)type metadata accessor for SingleMetricMinorPointMarks();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  v3 = v2 + v1[5];
  v4 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v4 - 1) + 48))(v3, 1, v4))
  {
    v5 = sub_23DDC53A8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
    v6 = v3 + v4[5];
    v7 = sub_23DDC512C();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v6, v7);
    v9 = v3 + v4[6];
    v8(v9, v7);
    sub_23DCF9010();
    v11 = v10;
    v8(v9 + *(int *)(v10 + 36), v7);
    v12 = v3 + v4[7];
    v8(v12, v7);
    v8(v12 + *(int *)(v11 + 36), v7);
    v13 = v3 + v4[9];
    v14 = sub_23DDC54C8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = v2 + v1[7];
  swift_bridgeObjectRelease();
  v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v17 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v18 = sub_23DDC512C();
    v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
    v19(v16, v18);
    v20 = v16 + *(int *)(v17 + 20);
    v19(v20, v18);
    sub_23DCF9010();
    v19(v20 + *(int *)(v21 + 36), v18);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + v1[8]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DDBE2CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SingleMetricMinorPointMarks() - 8) + 80);
  return sub_23DDBCD40(a1, v2 + ((v5 + 16) & ~v5), a2);
}

void sub_23DDBE318(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_256D00078)
  {
    sub_23DDBE420(255);
    v3 = v2;
    sub_23DDBE504(255);
    sub_23DDBE5BC(255);
    sub_23DDC5A44();
    sub_23DDBE650();
    v4 = sub_23DDBE9A0();
    v7[2] = MEMORY[0x24BDB8320];
    v7[3] = v4;
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDB7C68], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256D00078);
  }
}

void sub_23DDBE420(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_256D00080)
  {
    sub_23DDBE504(255);
    v3 = v2;
    sub_23DDBE5BC(255);
    sub_23DDC5A44();
    sub_23DDBE650();
    v4 = sub_23DDBE9A0();
    v7[2] = MEMORY[0x24BDB8320];
    v7[3] = v4;
    swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDB7C48], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256D00080);
  }
}

void sub_23DDBE504(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_256D00088)
  {
    sub_23DDBE5BC(255);
    v3 = v2;
    sub_23DDC5A44();
    sub_23DDBE650();
    v4 = sub_23DDBE9A0();
    v7[2] = MEMORY[0x24BDB8320];
    v7[3] = v4;
    v7[0] = v3;
    v7[1] = swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDB7C88], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256D00088);
  }
}

void sub_23DDBE5BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_256D00090)
  {
    v2 = sub_23DDC5A44();
    sub_23DDBE650();
    v4 = v3;
    v5 = sub_23DDBE9A0();
    v8[0] = v2;
    v8[1] = v4;
    v8[2] = MEMORY[0x24BDB8320];
    v8[3] = v5;
    v6 = MEMORY[0x242643B9C](a1, v8, MEMORY[0x24BDB7D28], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_256D00090);
  }
}

void sub_23DDBE650()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D00098)
  {
    sub_23DD1E37C(255, &qword_256D000A0, (uint64_t (*)(uint64_t))sub_23DDBE6F4, MEMORY[0x24BDECC50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    sub_23DD315DC(255, &qword_256CFD838, MEMORY[0x24BEE1328], MEMORY[0x24BEE1340], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEEBF0]);
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D00098);
  }
}

void sub_23DDBE6F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D000A8)
  {
    sub_23DCFB328(255, &qword_256D000B0, (uint64_t (*)(uint64_t))sub_23DDBE76C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_23DDBE940();
    v0 = sub_23DDC6338();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D000A8);
  }
}

void sub_23DDBE76C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  unint64_t TupleTypeMetadata2;
  uint64_t v3;

  if (!qword_256D000B8)
  {
    v0 = MEMORY[0x24BDEBEF8];
    v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0];
    sub_23DD1E37C(255, &qword_256D000C0, (uint64_t (*)(uint64_t))sub_23DDBE820, MEMORY[0x24BDEBEF8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    sub_23DD1E37C(255, &qword_256CFD820, (uint64_t (*)(uint64_t))sub_23DD31560, v0, v1);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v3)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D000B8);
  }
}

void sub_23DDBE820()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D000C8)
  {
    sub_23DDBE884();
    sub_23DDC5C6C();
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D000C8);
  }
}

void sub_23DDBE884()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D000D0)
  {
    sub_23DDBE8FC();
    v0 = sub_23DDC5A80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D000D0);
  }
}

unint64_t sub_23DDBE8FC()
{
  unint64_t result;

  result = qword_256D000D8;
  if (!qword_256D000D8)
  {
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF4440], MEMORY[0x24BDF4458]);
    atomic_store(result, (unint64_t *)&qword_256D000D8);
  }
  return result;
}

unint64_t sub_23DDBE940()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256D000E0;
  if (!qword_256D000E0)
  {
    sub_23DCFB328(255, &qword_256D000B0, (uint64_t (*)(uint64_t))sub_23DDBE76C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF5428], v1);
    atomic_store(result, (unint64_t *)&qword_256D000E0);
  }
  return result;
}

unint64_t sub_23DDBE9A0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256D000E8;
  if (!qword_256D000E8)
  {
    sub_23DDBE650();
    v2 = v1;
    v3[0] = sub_23DDBEA08();
    v3[1] = sub_23DD317D8();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256D000E8);
  }
  return result;
}

unint64_t sub_23DDBEA08()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256D000F0;
  if (!qword_256D000F0)
  {
    sub_23DD1E37C(255, &qword_256D000A0, (uint64_t (*)(uint64_t))sub_23DDBE6F4, MEMORY[0x24BDECC50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256D000F8, (uint64_t (*)(uint64_t))sub_23DDBE6F4, MEMORY[0x24BDF4750]);
    v3[1] = MEMORY[0x24BDECC38];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256D000F0);
  }
  return result;
}

unint64_t sub_23DDBEAA8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  result = qword_256D00100;
  if (!qword_256D00100)
  {
    sub_23DD1E37C(255, &qword_256D00070, (uint64_t (*)(uint64_t))sub_23DDBE318, MEMORY[0x24BDB7B58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7F90]);
    v2 = v1;
    sub_23DDBE420(255);
    v4 = v3;
    sub_23DDBE504(255);
    sub_23DDBE5BC(255);
    sub_23DDC5A44();
    sub_23DDBE650();
    v5 = sub_23DDBE9A0();
    v6[4] = MEMORY[0x24BDB8320];
    v6[5] = v5;
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v6[2] = v4;
    v6[3] = swift_getOpaqueTypeConformance2();
    v6[0] = swift_getOpaqueTypeConformance2();
    v6[1] = MEMORY[0x24BDB7B48];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB7FA8], v2, v6);
    atomic_store(result, (unint64_t *)&qword_256D00100);
  }
  return result;
}

uint64_t sub_23DDBEBE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23DDBD730(v1[2], v1[3], v1[4], a1);
}

void sub_23DDBEBF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D00110)
  {
    sub_23DCFB328(255, &qword_256D000B0, (uint64_t (*)(uint64_t))sub_23DDBE76C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_23DDC5B94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D00110);
  }
}

uint64_t sub_23DDBEC70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DD1E37C(0, &qword_256D000C0, (uint64_t (*)(uint64_t))sub_23DDBE820, MEMORY[0x24BDEBEF8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DDBECD4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;

  sub_23DD1E37C(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_23DDBED30(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5;

  sub_23DD1E37C(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t sub_23DDBED78()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_256D00118;
  if (!qword_256D00118)
  {
    sub_23DDBEDD8();
    v2 = v1;
    v3 = sub_23DDBEAA8();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB8490], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256D00118);
  }
  return result;
}

void sub_23DDBEDD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D00120)
  {
    sub_23DCFB328(255, &qword_254326758, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for IndividualOvernightMetricChartPoint.ID(255);
    sub_23DD1E37C(255, &qword_256D00070, (uint64_t (*)(uint64_t))sub_23DDBE318, MEMORY[0x24BDB7B58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7F90]);
    sub_23DD7DEE0();
    sub_23DCF535C(&qword_256CFCE10, type metadata accessor for IndividualOvernightMetricChartPoint.ID, (uint64_t)&unk_23DDCB548);
    v0 = sub_23DDC6380();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D00120);
  }
}

void sub_23DDBEECC(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t ObjCClassFromMetadata;
  id v10;

  v2 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v3);
  v4 = sub_23DDC671C();
  MEMORY[0x24BDAC7A8](v4);
  if (a1 < -1.0)
  {
    v5 = (fabs(a1) + -1.0) * 0.5 * 100.0;
    if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) != 0)
    {
      if (v5 > -9.22337204e18)
      {
        if (v5 < 9.22337204e18)
          goto LABEL_19;
        goto LABEL_22;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (a1 < 0.0)
  {
    v6 = (1.0 - fabs(a1)) * 0.5 * 100.0;
    if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) != 0)
    {
      if (v6 > -9.22337204e18)
      {
        if (v6 < 9.22337204e18)
          goto LABEL_19;
        goto LABEL_25;
      }
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (a1 <= 1.0)
  {
    v7 = (1.0 - a1) * 0.5 * 100.0;
    if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) != 0)
    {
      if (v7 > -9.22337204e18)
      {
        if (v7 < 9.22337204e18)
          goto LABEL_19;
        goto LABEL_28;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v8 = (a1 + -1.0) * 0.5 * 100.0;
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v8 < 9.22337204e18)
  {
LABEL_19:
    sub_23DDC6710();
    sub_23DDC6704();
    sub_23DDC66EC();
    sub_23DDC6704();
    sub_23DDC6728();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    sub_23DDC6770();
    return;
  }
LABEL_31:
  __break(1u);
}

_QWORD *sub_23DDBF400(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = (int *)type metadata accessor for BaselineBand.Configuration(0);
    v8 = v7[5];
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23DDC512C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    sub_23DD13DC0(0);
    v12(&v9[*(int *)(v13 + 36)], &v10[*(int *)(v13 + 36)], v11);
    *(_QWORD *)((char *)v4 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
    *(_QWORD *)((char *)v4 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
    *((_BYTE *)v4 + v7[8]) = *((_BYTE *)a2 + v7[8]);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)((char *)a2 + v14);
    swift_retain();
    if (v17)
    {
      v18 = *((_QWORD *)v16 + 1);
      v19 = *((_QWORD *)v16 + 2);
      *(_QWORD *)v15 = v17;
      *((_QWORD *)v15 + 1) = v18;
      *((_QWORD *)v15 + 2) = v19;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
    }
    v15[24] = v16[24];
    v15[32] = v16[32];
    v21 = *((_QWORD *)v16 + 6);
    *((_QWORD *)v15 + 5) = *((_QWORD *)v16 + 5);
    *((_QWORD *)v15 + 6) = v21;
    v15[56] = v16[56];
    v22 = *((_QWORD *)v16 + 9);
    *((_QWORD *)v15 + 8) = *((_QWORD *)v16 + 8);
    *((_QWORD *)v15 + 9) = v22;
    *((_QWORD *)v15 + 10) = *((_QWORD *)v16 + 10);
    v23 = *(_OWORD *)(v16 + 88);
    *(_OWORD *)(v15 + 104) = *(_OWORD *)(v16 + 104);
    *(_OWORD *)(v15 + 88) = v23;
    v24 = *(_OWORD *)(v16 + 120);
    v25 = *(_OWORD *)(v16 + 136);
    *(_OWORD *)(v15 + 152) = *(_OWORD *)(v16 + 152);
    *(_OWORD *)(v15 + 136) = v25;
    *(_OWORD *)(v15 + 120) = v24;
    v26 = *((_QWORD *)v16 + 22);
    *((_QWORD *)v15 + 21) = *((_QWORD *)v16 + 21);
    *((_QWORD *)v15 + 22) = v26;
    v28 = *((_QWORD *)v16 + 23);
    v27 = *((_QWORD *)v16 + 24);
    v15[200] = v16[200];
    *((_QWORD *)v15 + 23) = v28;
    *((_QWORD *)v15 + 24) = v27;
    v15[201] = v16[201];
    v29 = *((_QWORD *)v16 + 27);
    *((_QWORD *)v15 + 26) = *((_QWORD *)v16 + 26);
    *((_QWORD *)v15 + 27) = v29;
    v30 = *((_QWORD *)v16 + 29);
    *((_QWORD *)v15 + 28) = *((_QWORD *)v16 + 28);
    *((_QWORD *)v15 + 29) = v30;
    *((_QWORD *)v15 + 30) = *((_QWORD *)v16 + 30);
    v15[248] = v16[248];
    v31 = *((_QWORD *)v16 + 33);
    *((_QWORD *)v15 + 32) = *((_QWORD *)v16 + 32);
    *((_QWORD *)v15 + 33) = v31;
    *((_QWORD *)v15 + 34) = *((_QWORD *)v16 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t type metadata accessor for BaselineBand.Configuration(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256D00210);
}

uint64_t sub_23DDBF670(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v4 = a1 + *(int *)(type metadata accessor for BaselineBand.Configuration(0) + 20);
  v5 = sub_23DDC512C();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  sub_23DD13DC0(0);
  v6(v4 + *(int *)(v7 + 36), v5);
  swift_release();
  if (*(_QWORD *)(a1 + *(int *)(a2 + 20)))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_OWORD *sub_23DDBF778(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for BaselineBand.Configuration(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23DDC512C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  sub_23DD13DC0(0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)((char *)a2 + v13);
  swift_retain();
  if (v16)
  {
    v17 = *((_QWORD *)v15 + 1);
    v18 = *((_QWORD *)v15 + 2);
    *(_QWORD *)v14 = v16;
    *((_QWORD *)v14 + 1) = v17;
    *((_QWORD *)v14 + 2) = v18;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
  }
  v14[24] = v15[24];
  v14[32] = v15[32];
  v19 = *((_QWORD *)v15 + 6);
  *((_QWORD *)v14 + 5) = *((_QWORD *)v15 + 5);
  *((_QWORD *)v14 + 6) = v19;
  v14[56] = v15[56];
  v20 = *((_QWORD *)v15 + 9);
  *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
  *((_QWORD *)v14 + 9) = v20;
  *((_QWORD *)v14 + 10) = *((_QWORD *)v15 + 10);
  v21 = *(_OWORD *)(v15 + 88);
  *(_OWORD *)(v14 + 104) = *(_OWORD *)(v15 + 104);
  *(_OWORD *)(v14 + 88) = v21;
  v22 = *(_OWORD *)(v15 + 120);
  v23 = *(_OWORD *)(v15 + 136);
  *(_OWORD *)(v14 + 152) = *(_OWORD *)(v15 + 152);
  *(_OWORD *)(v14 + 136) = v23;
  *(_OWORD *)(v14 + 120) = v22;
  v24 = *((_QWORD *)v15 + 22);
  *((_QWORD *)v14 + 21) = *((_QWORD *)v15 + 21);
  *((_QWORD *)v14 + 22) = v24;
  v26 = *((_QWORD *)v15 + 23);
  v25 = *((_QWORD *)v15 + 24);
  v14[200] = v15[200];
  *((_QWORD *)v14 + 23) = v26;
  *((_QWORD *)v14 + 24) = v25;
  v14[201] = v15[201];
  v27 = *((_QWORD *)v15 + 27);
  *((_QWORD *)v14 + 26) = *((_QWORD *)v15 + 26);
  *((_QWORD *)v14 + 27) = v27;
  v28 = *((_QWORD *)v15 + 29);
  *((_QWORD *)v14 + 28) = *((_QWORD *)v15 + 28);
  *((_QWORD *)v14 + 29) = v28;
  *((_QWORD *)v14 + 30) = *((_QWORD *)v15 + 30);
  v14[248] = v15[248];
  v29 = *((_QWORD *)v15 + 33);
  *((_QWORD *)v14 + 32) = *((_QWORD *)v15 + 32);
  *((_QWORD *)v14 + 33) = v29;
  *((_QWORD *)v14 + 34) = *((_QWORD *)v15 + 34);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_23DDBF9AC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = (int *)type metadata accessor for BaselineBand.Configuration(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23DDC512C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  sub_23DD13DC0(0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  swift_retain();
  swift_release();
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)((char *)a2 + v13);
  if (*(_QWORD *)((char *)a1 + v13))
  {
    if (v16)
    {
      *(_QWORD *)v14 = v16;
      swift_retain();
      swift_release();
      *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
      swift_retain();
      swift_release();
      *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_23DCF9EB8((uint64_t)a1 + v13);
      v17 = *((_QWORD *)v15 + 2);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_QWORD *)v14 + 2) = v17;
    }
  }
  else if (v16)
  {
    *(_QWORD *)v14 = v16;
    *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
    *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v18 = *(_OWORD *)v15;
    *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
    *(_OWORD *)v14 = v18;
  }
  v14[24] = v15[24];
  v14[32] = v15[32];
  *((_QWORD *)v14 + 5) = *((_QWORD *)v15 + 5);
  swift_retain();
  swift_release();
  v19 = *((_QWORD *)v15 + 6);
  v14[56] = v15[56];
  *((_QWORD *)v14 + 6) = v19;
  *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
  *((_QWORD *)v14 + 9) = *((_QWORD *)v15 + 9);
  swift_retain();
  swift_release();
  *((_QWORD *)v14 + 10) = *((_QWORD *)v15 + 10);
  swift_retain();
  swift_release();
  *((_QWORD *)v14 + 11) = *((_QWORD *)v15 + 11);
  v20 = *((_QWORD *)v15 + 12);
  v14[104] = v15[104];
  *((_QWORD *)v14 + 12) = v20;
  *((_QWORD *)v14 + 14) = *((_QWORD *)v15 + 14);
  *((_QWORD *)v14 + 15) = *((_QWORD *)v15 + 15);
  *((_QWORD *)v14 + 16) = *((_QWORD *)v15 + 16);
  *((_QWORD *)v14 + 17) = *((_QWORD *)v15 + 17);
  *((_QWORD *)v14 + 18) = *((_QWORD *)v15 + 18);
  *((_QWORD *)v14 + 19) = *((_QWORD *)v15 + 19);
  *((_QWORD *)v14 + 20) = *((_QWORD *)v15 + 20);
  *((_QWORD *)v14 + 21) = *((_QWORD *)v15 + 21);
  *((_QWORD *)v14 + 22) = *((_QWORD *)v15 + 22);
  swift_retain();
  swift_release();
  *((_QWORD *)v14 + 23) = *((_QWORD *)v15 + 23);
  swift_retain();
  swift_release();
  v21 = *((_QWORD *)v15 + 24);
  v14[200] = v15[200];
  *((_QWORD *)v14 + 24) = v21;
  v14[201] = v15[201];
  *((_QWORD *)v14 + 26) = *((_QWORD *)v15 + 26);
  swift_retain();
  swift_release();
  *((_QWORD *)v14 + 27) = *((_QWORD *)v15 + 27);
  swift_retain();
  swift_release();
  *((_QWORD *)v14 + 28) = *((_QWORD *)v15 + 28);
  swift_retain();
  swift_release();
  *((_QWORD *)v14 + 29) = *((_QWORD *)v15 + 29);
  swift_retain();
  swift_release();
  *((_QWORD *)v14 + 30) = *((_QWORD *)v15 + 30);
  swift_retain();
  swift_release();
  v14[248] = v15[248];
  *((_QWORD *)v14 + 32) = *((_QWORD *)v15 + 32);
  swift_retain();
  swift_release();
  *((_QWORD *)v14 + 33) = *((_QWORD *)v15 + 33);
  swift_retain();
  swift_release();
  *((_QWORD *)v14 + 34) = *((_QWORD *)v15 + 34);
  return a1;
}

_OWORD *sub_23DDBFD0C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for BaselineBand.Configuration(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23DDC512C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  sub_23DD13DC0(0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  memcpy((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20), 0x118uLL);
  return a1;
}

_OWORD *sub_23DDBFDE4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for BaselineBand.Configuration(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23DDC512C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  sub_23DD13DC0(0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  swift_release();
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v13 = *(int *)(a3 + 20);
  v14 = (uint64_t)a1 + v13;
  v15 = (char *)a2 + v13;
  if (!*(_QWORD *)((char *)a1 + v13))
    goto LABEL_5;
  if (!*(_QWORD *)v15)
  {
    sub_23DCF9EB8(v14);
LABEL_5:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
    goto LABEL_6;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  swift_release();
  *(_QWORD *)(v14 + 8) = *((_QWORD *)v15 + 1);
  swift_release();
  *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
  swift_release();
LABEL_6:
  *(_BYTE *)(v14 + 24) = v15[24];
  *(_BYTE *)(v14 + 32) = v15[32];
  *(_QWORD *)(v14 + 40) = *((_QWORD *)v15 + 5);
  swift_release();
  *(_QWORD *)(v14 + 48) = *((_QWORD *)v15 + 6);
  *(_BYTE *)(v14 + 56) = v15[56];
  *(_QWORD *)(v14 + 64) = *((_QWORD *)v15 + 8);
  *(_QWORD *)(v14 + 72) = *((_QWORD *)v15 + 9);
  swift_release();
  *(_QWORD *)(v14 + 80) = *((_QWORD *)v15 + 10);
  swift_release();
  *(_QWORD *)(v14 + 88) = *((_QWORD *)v15 + 11);
  *(_QWORD *)(v14 + 96) = *((_QWORD *)v15 + 12);
  *(_BYTE *)(v14 + 104) = v15[104];
  v16 = *((_OWORD *)v15 + 8);
  *(_OWORD *)(v14 + 112) = *((_OWORD *)v15 + 7);
  *(_OWORD *)(v14 + 128) = v16;
  v17 = *((_OWORD *)v15 + 10);
  *(_OWORD *)(v14 + 144) = *((_OWORD *)v15 + 9);
  *(_OWORD *)(v14 + 160) = v17;
  *(_QWORD *)(v14 + 176) = *((_QWORD *)v15 + 22);
  swift_release();
  *(_QWORD *)(v14 + 184) = *((_QWORD *)v15 + 23);
  swift_release();
  *(_QWORD *)(v14 + 192) = *((_QWORD *)v15 + 24);
  *(_BYTE *)(v14 + 200) = v15[200];
  *(_BYTE *)(v14 + 201) = v15[201];
  *(_QWORD *)(v14 + 208) = *((_QWORD *)v15 + 26);
  swift_release();
  *(_QWORD *)(v14 + 216) = *((_QWORD *)v15 + 27);
  swift_release();
  *(_QWORD *)(v14 + 224) = *((_QWORD *)v15 + 28);
  swift_release();
  *(_QWORD *)(v14 + 232) = *((_QWORD *)v15 + 29);
  swift_release();
  *(_QWORD *)(v14 + 240) = *((_QWORD *)v15 + 30);
  swift_release();
  *(_BYTE *)(v14 + 248) = v15[248];
  *(_QWORD *)(v14 + 256) = *((_QWORD *)v15 + 32);
  swift_release();
  *(_QWORD *)(v14 + 264) = *((_QWORD *)v15 + 33);
  swift_release();
  *(_QWORD *)(v14 + 272) = *((_QWORD *)v15 + 34);
  return a1;
}

uint64_t sub_23DDC0048()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDC0054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for BaselineBand.Configuration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 40);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_23DDC00D4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDC00E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for BaselineBand.Configuration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 40) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for BaselineBand(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256D00180);
}

uint64_t sub_23DDC0170()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BaselineBand.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_23DDC01E0(_OWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_23DDC512C();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    sub_23DD13DC0(0);
    v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
    v13 = a3[7];
    *(_QWORD *)((char *)v4 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *(_QWORD *)((char *)v4 + v13) = *(_QWORD *)((char *)a2 + v13);
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }
  swift_retain();
  return v4;
}

uint64_t sub_23DDC02C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_23DDC512C();
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(v2, v3);
  sub_23DD13DC0(0);
  v4(v2 + *(int *)(v5 + 36), v3);
  return swift_release();
}

_OWORD *sub_23DDC0338(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC512C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  sub_23DD13DC0(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  swift_retain();
  return a1;
}

_QWORD *sub_23DDC03F0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC512C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  sub_23DD13DC0(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_23DDC04C0(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC512C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  sub_23DD13DC0(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_23DDC0574(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC512C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  sub_23DD13DC0(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  swift_release();
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t sub_23DDC0630()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDC063C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_23DD13DC0(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_23DDC06BC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DDC06C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_23DD13DC0(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
}

void sub_23DDC0744()
{
  unint64_t v0;

  sub_23DD13DC0(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_23DDC07DC()
{
  sub_23DD5E9E8();
  type metadata accessor for BaselineBand.Configuration(0);
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DDC6674();
  sub_23DD13DC0(0);
  sub_23DDC6674();
  sub_23DDC6C74();
  swift_retain();
  sub_23DDC620C();
  swift_release();
  return sub_23DDC6C68();
}

uint64_t sub_23DDC08D0()
{
  sub_23DDC6C50();
  sub_23DDC07DC();
  return sub_23DDC6C80();
}

uint64_t sub_23DDC0910()
{
  sub_23DDC6C50();
  sub_23DDC07DC();
  return sub_23DDC6C80();
}

uint64_t sub_23DDC094C()
{
  return sub_23DCF535C(&qword_256D00258, type metadata accessor for BaselineBand.Configuration, (uint64_t)&unk_23DDCC0B8);
}

uint64_t sub_23DDC0978()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DDC0988@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *boxed_opaque_existential_1;
  char *v50;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79[3];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82[36];

  v72 = a1;
  v2 = sub_23DDC5DE0();
  v65 = *(_QWORD *)(v2 - 8);
  v66 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v64 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD25D8C();
  MEMORY[0x24BDAC7A8](v4);
  v60 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v56 = (char *)&v52 - v7;
  sub_23DD25DE8();
  MEMORY[0x24BDAC7A8](v8);
  v73 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v54 = (char *)&v52 - v11;
  v12 = sub_23DDC58A0();
  v13 = *(_QWORD *)(v12 - 8);
  v61 = v12;
  v62 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v58 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD83BA4(0);
  v57 = v15;
  v63 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v59 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD83AF8(0);
  v18 = *(_QWORD *)(v17 - 8);
  v68 = v17;
  v69 = v18;
  MEMORY[0x24BDAC7A8](v17);
  v74 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC108C();
  v70 = *(_QWORD *)(v20 - 8);
  v71 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v67 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC5DC8();
  v55 = type metadata accessor for BaselineBand.Configuration(0);
  sub_23DDC512C();
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DDC5DC8();
  sub_23DD13DC0(0);
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DDC5DC8();
  v82[0] = *v1;
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DDC5DC8();
  v22 = v1[1];
  v53 = v1;
  v82[0] = v22;
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v58;
  v24 = v57;
  sub_23DDC5894();
  v25 = v55;
  v27 = v64;
  v26 = v65;
  v28 = v66;
  (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v64, *MEMORY[0x24BDEEB68], v66);
  v29 = v59;
  v30 = v61;
  sub_23DDC581C();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v23, v30);
  v31 = v53;
  v79[0] = *(uint64_t *)((char *)v53 + *(int *)(v25 + 28));
  v82[0] = v30;
  v82[1] = MEMORY[0x24BDB7D80];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v33 = MEMORY[0x24BDF3E48];
  v34 = MEMORY[0x24BDF3E18];
  sub_23DDC5828();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v29, v24);
  v35 = *((unsigned __int8 *)v31 + *(int *)(v25 + 32));
  v36 = type metadata accessor for BaselineBand(0);
  memcpy(v82, (char *)v31 + *(int *)(v36 + 20), 0x118uLL);
  if (v35 == 1 && BYTE1(v82[25]) == 1)
  {
    sub_23DDC10F8(0);
    v80 = v37;
    sub_23DDC122C(255);
    v39 = v38;
    v75 = v24;
    v76 = v33;
    v77 = OpaqueTypeConformance2;
    v78 = v34;
    v40 = swift_getOpaqueTypeConformance2();
    sub_23DD83ADC(255);
    v42 = v41;
    v43 = sub_23DCF535C(&qword_256CFECF8, (uint64_t (*)(uint64_t))sub_23DD83ADC, MEMORY[0x24BDEFDC0]);
    v75 = v42;
    v76 = v43;
    v44 = swift_getOpaqueTypeConformance2();
    v45 = v68;
    v75 = v68;
    v76 = v39;
    v77 = v40;
    v78 = v44;
    v81 = swift_getOpaqueTypeConformance2();
    __swift_allocate_boxed_opaque_existential_1(v79);
    sub_23DCFBB9C(v82);
    swift_checkMetadataState();
    sub_23DDC5834();
    sub_23DCFE908(v82);
    v46 = v45;
    v47 = v69;
  }
  else
  {
    v48 = v68;
    v80 = v68;
    v75 = v24;
    v76 = v33;
    v77 = OpaqueTypeConformance2;
    v78 = v34;
    v81 = swift_getOpaqueTypeConformance2();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v79);
    v47 = v69;
    (*(void (**)(uint64_t *, char *, uint64_t))(v69 + 16))(boxed_opaque_existential_1, v74, v48);
    v46 = v48;
  }
  (*(void (**)(char *, uint64_t))(v47 + 8))(v74, v46);
  v50 = v67;
  sub_23DDC5858();
  sub_23DD1DE54((uint64_t)v79);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v70 + 32))(v72, v50, v71);
}

void sub_23DDC108C()
{
  unint64_t v0;
  uint64_t v1;
  _QWORD v2[2];

  if (!qword_256D00260)
  {
    v2[0] = MEMORY[0x24BDB7EA8];
    v2[1] = MEMORY[0x24BDB7E98];
    v0 = MEMORY[0x242643B9C](0, v2, MEMORY[0x24BDB7C88], 0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D00260);
  }
}

void sub_23DDC10F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  if (!qword_256D00268)
  {
    sub_23DD83AF8(255);
    v3 = v2;
    sub_23DDC122C(255);
    v5 = v4;
    sub_23DD83BA4(255);
    sub_23DDC58A0();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    sub_23DD83ADC(255);
    sub_23DCF535C(&qword_256CFECF8, (uint64_t (*)(uint64_t))sub_23DD83ADC, MEMORY[0x24BDEFDC0]);
    v9[0] = v3;
    v9[1] = v5;
    v9[2] = OpaqueTypeConformance2;
    v9[3] = swift_getOpaqueTypeConformance2();
    v7 = MEMORY[0x242643B9C](a1, v9, MEMORY[0x24BDB7C38], 0);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_256D00268);
  }
}

void sub_23DDC122C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_256D00270)
  {
    sub_23DD83ADC(255);
    v5[0] = v2;
    v5[1] = sub_23DCF535C(&qword_256CFECF8, (uint64_t (*)(uint64_t))sub_23DD83ADC, MEMORY[0x24BDEFDC0]);
    v3 = MEMORY[0x242643B9C](a1, v5, MEMORY[0x24BDFAC10], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_256D00270);
  }
}

uint64_t sub_23DDC12B8(double *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;

  sub_23DD13DC0(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - v8;
  if (*a1 != *a2 || a1[1] != a2[1])
    goto LABEL_12;
  v20 = type metadata accessor for BaselineBand.Configuration(0);
  v11 = *(int *)(v20 + 20);
  v12 = (uint64_t)a1 + v11;
  v13 = (uint64_t)a2 + v11;
  sub_23DDC512C();
  sub_23DCF535C(&qword_256CFCC60, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  v14 = sub_23DDC66C8();
  sub_23DD254A0(v12, (uint64_t)v9);
  sub_23DD254A0(v13, (uint64_t)v6);
  if ((v14 & 1) == 0)
  {
    sub_23DD254E4((uint64_t)v6);
    sub_23DD254E4((uint64_t)v9);
LABEL_12:
    v17 = 0;
    return v17 & 1;
  }
  v15 = sub_23DDC66C8();
  sub_23DD254E4((uint64_t)v6);
  sub_23DD254E4((uint64_t)v9);
  if ((v15 & 1) == 0)
    goto LABEL_12;
  v16 = v20;
  if (*(double *)((char *)a1 + *(int *)(v20 + 24)) != *(double *)((char *)a2 + *(int *)(v20 + 24))
    || (sub_23DDC61E8() & 1) == 0)
  {
    goto LABEL_12;
  }
  v17 = *((_BYTE *)a1 + *(int *)(v16 + 32)) ^ *((_BYTE *)a2 + *(int *)(v16 + 32)) ^ 1;
  return v17 & 1;
}

uint64_t sub_23DDC1474()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t static BaselineRelativeValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a2 + 8);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(double *)a1 == *(double *)a2;
  return result;
}

uint64_t BaselineRelativeValue.hash(into:)()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    return sub_23DDC6C5C();
  sub_23DDC6C5C();
  return sub_23DDC6C74();
}

uint64_t sub_23DDC1530()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D72657465646E69;
  else
    return 0x6E696D7265746564;
}

uint64_t sub_23DDC1580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DDC2480(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DDC15A4()
{
  sub_23DDC19BC();
  return sub_23DDC6CEC();
}

uint64_t sub_23DDC15CC()
{
  sub_23DDC19BC();
  return sub_23DDC6CF8();
}

uint64_t sub_23DDC15F4()
{
  sub_23DDC1978();
  return sub_23DDC6CEC();
}

uint64_t sub_23DDC161C()
{
  sub_23DDC1978();
  return sub_23DDC6CF8();
}

uint64_t sub_23DDC1644()
{
  return 0;
}

uint64_t sub_23DDC1650@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_23DDC167C()
{
  sub_23DDC1934();
  return sub_23DDC6CEC();
}

uint64_t sub_23DDC16A4()
{
  sub_23DDC1934();
  return sub_23DDC6CF8();
}

uint64_t BaselineRelativeValue.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  sub_23DD221EC(0, &qword_256D00278, (uint64_t (*)(void))sub_23DDC1934, (uint64_t)&type metadata for BaselineRelativeValue.IndeterminateCodingKeys, MEMORY[0x24BEE3520]);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v20 = (char *)&v19 - v5;
  sub_23DD221EC(0, &qword_256D00288, (uint64_t (*)(void))sub_23DDC1978, (uint64_t)&type metadata for BaselineRelativeValue.DeterminateCodingKeys, v3);
  v21 = v6;
  v19 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - v7;
  sub_23DD221EC(0, &qword_256D00298, (uint64_t (*)(void))sub_23DDC19BC, (uint64_t)&type metadata for BaselineRelativeValue.CodingKeys, v3);
  v24 = v9;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - v11;
  v13 = *(_BYTE *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DDC19BC();
  sub_23DDC6C98();
  if ((v13 & 1) != 0)
  {
    v26 = 1;
    sub_23DDC1934();
    v14 = v20;
    v15 = v24;
    sub_23DDC6B90();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v15);
  }
  else
  {
    v25 = 0;
    sub_23DDC1978();
    v17 = v24;
    sub_23DDC6B90();
    v18 = v21;
    sub_23DDC6BC0();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v17);
  }
}

unint64_t sub_23DDC1934()
{
  unint64_t result;

  result = qword_256D00280;
  if (!qword_256D00280)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCC518, &type metadata for BaselineRelativeValue.IndeterminateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D00280);
  }
  return result;
}

unint64_t sub_23DDC1978()
{
  unint64_t result;

  result = qword_256D00290;
  if (!qword_256D00290)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCC4C8, &type metadata for BaselineRelativeValue.DeterminateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D00290);
  }
  return result;
}

unint64_t sub_23DDC19BC()
{
  unint64_t result;

  result = qword_256D002A0;
  if (!qword_256D002A0)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCC478, &type metadata for BaselineRelativeValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D002A0);
  }
  return result;
}

uint64_t BaselineRelativeValue.hashValue.getter()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 8);
  sub_23DDC6C50();
  sub_23DDC6C5C();
  if ((v1 & 1) == 0)
    sub_23DDC6C74();
  return sub_23DDC6C80();
}

uint64_t BaselineRelativeValue.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;

  v37 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_23DD221EC(0, &qword_256D002A8, (uint64_t (*)(void))sub_23DDC1934, (uint64_t)&type metadata for BaselineRelativeValue.IndeterminateCodingKeys, MEMORY[0x24BEE33E0]);
  v36 = v4;
  v39 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v38 = (char *)&v32 - v5;
  sub_23DD221EC(0, &qword_256D002B0, (uint64_t (*)(void))sub_23DDC1978, (uint64_t)&type metadata for BaselineRelativeValue.DeterminateCodingKeys, v3);
  v7 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  v35 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v32 - v8;
  sub_23DD221EC(0, &qword_256D002B8, (uint64_t (*)(void))sub_23DDC19BC, (uint64_t)&type metadata for BaselineRelativeValue.CodingKeys, v3);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v32 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DDC19BC();
  v15 = v40;
  sub_23DDC6C8C();
  if (v15)
    goto LABEL_7;
  v16 = v38;
  v17 = v39;
  v40 = v12;
  v33 = a1;
  v18 = sub_23DDC6B84();
  v19 = v11;
  if (*(_QWORD *)(v18 + 16) != 1)
  {
    v22 = sub_23DDC6A4C();
    swift_allocError();
    v24 = v23;
    sub_23DDC1F0C();
    *v24 = &type metadata for BaselineRelativeValue;
    sub_23DDC6B3C();
    sub_23DDC6A34();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v19);
    a1 = v33;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0(v26);
  }
  v20 = *(_BYTE *)(v18 + 32);
  if ((v20 & 1) != 0)
  {
    v42 = 1;
    sub_23DDC1934();
    sub_23DDC6B30();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v16, v36);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v19);
    v21 = 0;
  }
  else
  {
    v41 = 0;
    sub_23DDC1978();
    v25 = v9;
    sub_23DDC6B30();
    v28 = v34;
    sub_23DDC6B6C();
    v29 = v40;
    v21 = v30;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v19);
  }
  v31 = v37;
  *v37 = v21;
  *((_BYTE *)v31 + 8) = v20;
  v26 = (uint64_t)v33;
  return __swift_destroy_boxed_opaque_existential_0(v26);
}

uint64_t sub_23DDC1E58()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    return sub_23DDC6C5C();
  sub_23DDC6C5C();
  return sub_23DDC6C74();
}

uint64_t sub_23DDC1EA4()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 8);
  sub_23DDC6C50();
  sub_23DDC6C5C();
  if ((v1 & 1) == 0)
    sub_23DDC6C74();
  return sub_23DDC6C80();
}

void sub_23DDC1F0C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFDDE0)
  {
    sub_23DD4C3F8();
    sub_23DDC6A40();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFDDE0);
  }
}

unint64_t sub_23DDC1F7C()
{
  unint64_t result;

  result = qword_256D002C0;
  if (!qword_256D002C0)
  {
    result = MEMORY[0x242643BD8](&protocol conformance descriptor for BaselineRelativeValue, &type metadata for BaselineRelativeValue);
    atomic_store(result, (unint64_t *)&qword_256D002C0);
  }
  return result;
}

uint64_t sub_23DDC1FC0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return BaselineRelativeValue.init(from:)(a1, a2);
}

uint64_t sub_23DDC1FD4(_QWORD *a1)
{
  return BaselineRelativeValue.encode(to:)(a1);
}

uint64_t sub_23DDC1FE8(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a2 + 8);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(double *)a1 == *(double *)a2;
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for BaselineRelativeValue(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BaselineRelativeValue(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_23DDC207C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23DDC2098(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for BaselineRelativeValue()
{
  return &type metadata for BaselineRelativeValue;
}

uint64_t storeEnumTagSinglePayload for BaselineRelativeValue.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DDC2114 + 4 * byte_23DDCC185[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DDC2148 + 4 * byte_23DDCC180[v4]))();
}

uint64_t sub_23DDC2148(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DDC2150(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DDC2158);
  return result;
}

uint64_t sub_23DDC2164(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DDC216CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DDC2170(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DDC2178(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BaselineRelativeValue.CodingKeys()
{
  return &type metadata for BaselineRelativeValue.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BaselineRelativeValue.DeterminateCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DDC21D4 + 4 * byte_23DDCC18A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DDC21F4 + 4 * byte_23DDCC18F[v4]))();
}

_BYTE *sub_23DDC21D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DDC21F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DDC21FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DDC2204(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DDC220C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DDC2214(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BaselineRelativeValue.DeterminateCodingKeys()
{
  return &type metadata for BaselineRelativeValue.DeterminateCodingKeys;
}

ValueMetadata *type metadata accessor for BaselineRelativeValue.IndeterminateCodingKeys()
{
  return &type metadata for BaselineRelativeValue.IndeterminateCodingKeys;
}

unint64_t sub_23DDC2244()
{
  unint64_t result;

  result = qword_256D002C8;
  if (!qword_256D002C8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCC398, &type metadata for BaselineRelativeValue.DeterminateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D002C8);
  }
  return result;
}

unint64_t sub_23DDC228C()
{
  unint64_t result;

  result = qword_256D002D0;
  if (!qword_256D002D0)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCC450, &type metadata for BaselineRelativeValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D002D0);
  }
  return result;
}

unint64_t sub_23DDC22D4()
{
  unint64_t result;

  result = qword_256D002D8;
  if (!qword_256D002D8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCC3C0, &type metadata for BaselineRelativeValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D002D8);
  }
  return result;
}

unint64_t sub_23DDC231C()
{
  unint64_t result;

  result = qword_256D002E0;
  if (!qword_256D002E0)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCC3E8, &type metadata for BaselineRelativeValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D002E0);
  }
  return result;
}

unint64_t sub_23DDC2364()
{
  unint64_t result;

  result = qword_256D002E8;
  if (!qword_256D002E8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCC308, &type metadata for BaselineRelativeValue.DeterminateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D002E8);
  }
  return result;
}

unint64_t sub_23DDC23AC()
{
  unint64_t result;

  result = qword_256D002F0;
  if (!qword_256D002F0)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCC330, &type metadata for BaselineRelativeValue.DeterminateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D002F0);
  }
  return result;
}

unint64_t sub_23DDC23F4()
{
  unint64_t result;

  result = qword_256D002F8;
  if (!qword_256D002F8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCC2B8, &type metadata for BaselineRelativeValue.IndeterminateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D002F8);
  }
  return result;
}

unint64_t sub_23DDC243C()
{
  unint64_t result;

  result = qword_256D00300;
  if (!qword_256D00300)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCC2E0, &type metadata for BaselineRelativeValue.IndeterminateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D00300);
  }
  return result;
}

uint64_t sub_23DDC2480(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E696D7265746564 && a2 == 0xEB00000000657461;
  if (v2 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D72657465646E69 && a2 == 0xED00006574616E69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DDC6C08();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23DDC25AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_23DDC51E0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC530C();
  sub_23DCFBD58(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t BalanceOneDayWidget.init()@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v2 = sub_23DDC5180();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DDC51E0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3C40]), sel_init);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDCEF70], v2);
  sub_23DDC518C();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)a1 = v10;
  sub_23DDC569C();
  v11 = v10;
  *((_QWORD *)a1 + 1) = sub_23DDC5690();
  v12 = type metadata accessor for BalanceWidgetDataProvider();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&a1[*(int *)(v12 + 24)], v9, v6);
  result = type metadata accessor for BalanceOneDayWidget();
  *(_QWORD *)&a1[*(int *)(result + 20)] = 0x40B0E00000000000;
  return result;
}

uint64_t type metadata accessor for BalanceOneDayWidget()
{
  uint64_t result;

  result = qword_254325FD8;
  if (!qword_254325FD8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BalanceOneDayWidget.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  double v22;
  uint64_t ObjCClassFromMetadata;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char **v65;

  v2 = v1;
  v59 = a1;
  v3 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v3);
  v4 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for BalanceWidgetTimelineProvider();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC2E3C();
  v9 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  v50 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC2EB4(0);
  v13 = *(_QWORD *)(v12 - 8);
  v53 = v12;
  v54 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v48 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC2F5C(0);
  v16 = *(_QWORD *)(v15 - 8);
  v55 = v15;
  *(_QWORD *)&v56 = v16;
  MEMORY[0x24BDAC7A8](v15);
  v51 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC3038(0);
  v19 = *(_QWORD *)(v18 - 8);
  v57 = v18;
  v58 = v19;
  MEMORY[0x24BDAC7A8](v18);
  v52 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC5288();
  v64 = type metadata accessor for BalanceWidgetDataProvider();
  v65 = &off_250E9C5D8;
  v21 = __swift_allocate_boxed_opaque_existential_1(&v61);
  sub_23DCF58EC(v2, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetDataProvider);
  v22 = *(double *)(v2 + *(int *)(type metadata accessor for BalanceOneDayWidget() + 20));
  LOBYTE(v60[0]) = 0;
  sub_23DD64520(&v61, (char *)v60, (uint64_t)v7, v22);
  type metadata accessor for BalanceWidgetEntryView();
  sub_23DCF535C(&qword_254326388, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetEntryView, (uint64_t)&unk_23DDC7A48);
  sub_23DCF535C(&qword_2543263C0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetTimelineProvider, (uint64_t)&unk_23DDCA3C0);
  sub_23DDC65CC();
  sub_23DDC66D4();
  type metadata accessor for HealthBalanceUI();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v24 = (void *)objc_opt_self();
  v25 = objc_msgSend(v24, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23DDC5168();
  v61 = sub_23DDC6770();
  v62 = v26;
  v27 = sub_23DCF535C(&qword_2543263F0, (uint64_t (*)(uint64_t))sub_23DDC2E3C, MEMORY[0x24BDFB170]);
  v28 = sub_23DD0B190();
  v30 = v48;
  v29 = v49;
  sub_23DDC5E4C();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v29);
  sub_23DDC66D4();
  v31 = objc_msgSend(v24, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23DDC5168();
  v60[0] = sub_23DDC6770();
  v60[1] = v32;
  v61 = v29;
  v33 = MEMORY[0x24BEE0D00];
  v62 = MEMORY[0x24BEE0D00];
  v63 = v27;
  v64 = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v35 = v51;
  v36 = v53;
  sub_23DDC5E28();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v30, v36);
  _s15HealthBalanceUI0B12OneDayWidgetV17supportedFamiliesSay0F3Kit0F6FamilyOGvgZ_0();
  v61 = v36;
  v62 = v33;
  v63 = OpaqueTypeConformance2;
  v64 = v28;
  v37 = swift_getOpaqueTypeConformance2();
  v38 = v52;
  v39 = v55;
  sub_23DDC5E34();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v39);
  v40 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
  sub_23DCFB328(0, &qword_2543264E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAFE0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_23DDC65A8();
  v41 = swift_allocObject();
  v56 = xmmword_23DDC7F50;
  *(_OWORD *)(v41 + 16) = xmmword_23DDC7F50;
  sub_23DDC659C();
  sub_23DCFB328(0, &qword_2543264D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], v40);
  v42 = sub_23DDC6590();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = v56;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v43 + 104))(v45 + v44, *MEMORY[0x24BDFAED8], v42);
  v61 = v39;
  v62 = v37;
  swift_getOpaqueTypeConformance2();
  v46 = v57;
  sub_23DDC5E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v38, v46);
}

void sub_23DDC2E3C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2543263F8)
  {
    type metadata accessor for BalanceWidgetEntryView();
    sub_23DCF535C(&qword_254326388, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetEntryView, (uint64_t)&unk_23DDC7A48);
    v0 = sub_23DDC65D8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2543263F8);
  }
}

void sub_23DDC2EB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_2543263E8)
  {
    sub_23DDC2E3C();
    v3 = v2;
    v4 = sub_23DCF535C(&qword_2543263F0, (uint64_t (*)(uint64_t))sub_23DDC2E3C, MEMORY[0x24BDFB170]);
    v5 = sub_23DD0B190();
    v8[0] = v3;
    v8[1] = MEMORY[0x24BEE0D00];
    v8[2] = v4;
    v8[3] = v5;
    v6 = MEMORY[0x242643B9C](a1, v8, MEMORY[0x24BDFABC8], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_2543263E8);
  }
}

void sub_23DDC2F5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_2543263E0)
  {
    sub_23DDC2EB4(255);
    v3 = v2;
    sub_23DDC2E3C();
    sub_23DCF535C(&qword_2543263F0, (uint64_t (*)(uint64_t))sub_23DDC2E3C, MEMORY[0x24BDFB170]);
    v4 = sub_23DD0B190();
    v7[0] = v3;
    v7[1] = MEMORY[0x24BEE0D00];
    v7[2] = swift_getOpaqueTypeConformance2();
    v7[3] = v4;
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDFAB98], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_2543263E0);
  }
}

void sub_23DDC3038(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_2543264C0)
  {
    sub_23DDC2F5C(255);
    v3 = v2;
    sub_23DDC2EB4(255);
    sub_23DDC2E3C();
    sub_23DCF535C(&qword_2543263F0, (uint64_t (*)(uint64_t))sub_23DDC2E3C, MEMORY[0x24BDFB170]);
    v4 = sub_23DD0B190();
    v7[2] = swift_getOpaqueTypeConformance2();
    v7[3] = v4;
    v7[0] = v3;
    v7[1] = swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDFABA8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_2543264C0);
  }
}

uint64_t sub_23DDC3140@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for BalanceWidgetTimelineEntry();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF58EC(a1, (uint64_t)v6, v7);
  *a2 = swift_getKeyPath();
  sub_23DCFB328(0, &qword_2543263D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v8 = type metadata accessor for BalanceWidgetEntryView();
  return sub_23DDC3D88((uint64_t)v6, (uint64_t)a2 + *(int *)(v8 + 20));
}

uint64_t sub_23DDC3210@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v4 = sub_23DDC5180();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23DDC51E0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3C40]), sel_init);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDCEF70], v4);
  sub_23DDC518C();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)a2 = v12;
  sub_23DDC569C();
  v13 = v12;
  *((_QWORD *)a2 + 1) = sub_23DDC5690();
  v14 = type metadata accessor for BalanceWidgetDataProvider();
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(&a2[*(int *)(v14 + 24)], v11, v8);
  *(_QWORD *)&a2[*(int *)(a1 + 20)] = 0x40B0E00000000000;
  return result;
}

uint64_t _s15HealthBalanceUI0B12OneDayWidgetV17supportedFamiliesSay0F3Kit0F6FamilyOGvgZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  unsigned int v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void (*v31)(unint64_t, _QWORD, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37[2];

  v37[1] = *MEMORY[0x24BDAC8D0];
  v0 = sub_23DDC6590();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23DDC57A4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - v9;
  v11 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (!v11)
  {
    __break(1u);
LABEL_13:
    __break(1u);
  }
  v12 = v11;
  v13 = objc_msgSend(v11, sel_features);

  if (!v13)
    goto LABEL_13;
  v14 = objc_msgSend(v13, sel_harmonia);

  if (v14)
  {
    sub_23DDC578C();
    v15 = sub_23DDC5798();
    v16 = sub_23DDC68F0();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v35 = v3;
      v19 = v18;
      v37[0] = v18;
      v34 = v4;
      *(_DWORD *)v17 = 136446210;
      v36 = sub_23DD02158(0xD000000000000013, 0x800000023DDCC5A0, v37);
      sub_23DDC698C();
      _os_log_impl(&dword_23DCF2000, v15, v16, "[%{public}s] Returning supported families", v17, 0xCu);
      swift_arrayDestroy();
      v20 = v19;
      v3 = v35;
      MEMORY[0x242643C80](v20, -1, -1);
      MEMORY[0x242643C80](v17, -1, -1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v34);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
    sub_23DCFB328(0, &qword_2543264D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v26 = *(_QWORD *)(v1 + 72);
    v27 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    v28 = v27 + 2 * v26;
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_23DDC7830;
    v30 = v29 + v27;
    v31 = *(void (**)(unint64_t, _QWORD, uint64_t))(v1 + 104);
    v31(v30, *MEMORY[0x24BDFAF00], v0);
    v31(v30 + v26, *MEMORY[0x24BDFAF08], v0);
    v31((unint64_t)v3, *MEMORY[0x24BDFAED8], v0);
    v25 = sub_23DD56F68(1, 3, 1, v29);
    *(_QWORD *)(v25 + 16) = 3;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v28 + v25, v3, v0);
  }
  else
  {
    sub_23DDC578C();
    v21 = sub_23DDC5798();
    v22 = sub_23DDC68F0();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v37[0] = v24;
      *(_DWORD *)v23 = 136446210;
      v36 = sub_23DD02158(0xD000000000000013, 0x800000023DDCC5A0, v37);
      sub_23DDC698C();
      _os_log_impl(&dword_23DCF2000, v21, v22, "[%{public}s] Feature flag off, returning empty families", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v24, -1, -1);
      MEMORY[0x242643C80](v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return MEMORY[0x24BEE4AF8];
  }
  return v25;
}

uint64_t sub_23DDC37F8()
{
  return swift_getOpaqueTypeConformance2();
}

char *initializeBufferWithCopyOfBuffer for BalanceOneDayWidget(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  char *v15;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    *((_QWORD *)a1 + 1) = v8;
    v9 = *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
    v10 = &v7[v9];
    v11 = (uint64_t)a2 + v9;
    v12 = sub_23DDC51E0();
    v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v14 = v4;
    v15 = v8;
    v13(v10, v11, v12);
    *(_QWORD *)&v7[*(int *)(a3 + 20)] = *(char **)((char *)a2 + *(int *)(a3 + 20));
  }
  return v7;
}

uint64_t destroy for BalanceOneDayWidget(id *a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)a1 + *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  v3 = sub_23DDC51E0();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for BalanceOneDayWidget(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  id v13;
  id v14;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  v8 = *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC51E0();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v13 = v6;
  v14 = v7;
  v12(v9, v10, v11);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for BalanceOneDayWidget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a2 + 8);
  v10 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  v11 = v9;

  v12 = *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

_OWORD *initializeWithTake for BalanceOneDayWidget(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for BalanceOneDayWidget(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  v8 = *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  v9 = a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23DDC51E0();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for BalanceOneDayWidget()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDC3B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BalanceWidgetDataProvider();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for BalanceOneDayWidget()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDC3BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BalanceWidgetDataProvider();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_23DDC3C10()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BalanceWidgetDataProvider();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23DDC3C84()
{
  sub_23DDC3038(255);
  sub_23DDC2F5C(255);
  sub_23DDC2EB4(255);
  sub_23DDC2E3C();
  sub_23DCF535C(&qword_2543263F0, (uint64_t (*)(uint64_t))sub_23DDC2E3C, MEMORY[0x24BDFB170]);
  sub_23DD0B190();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DDC3D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BalanceWidgetTimelineEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t BalanceSevenDaysWidget.init()@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v2 = sub_23DDC5180();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DDC51E0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3C40]), sel_init);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDCEF70], v2);
  sub_23DDC518C();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)a1 = v10;
  sub_23DDC569C();
  v11 = v10;
  *((_QWORD *)a1 + 1) = sub_23DDC5690();
  v12 = type metadata accessor for BalanceWidgetDataProvider();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&a1[*(int *)(v12 + 24)], v9, v6);
  result = type metadata accessor for BalanceSevenDaysWidget();
  *(_QWORD *)&a1[*(int *)(result + 20)] = 0x40B0E00000000000;
  return result;
}

uint64_t type metadata accessor for BalanceSevenDaysWidget()
{
  uint64_t result;

  result = qword_254326378;
  if (!qword_254326378)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BalanceSevenDaysWidget.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  double v22;
  uint64_t ObjCClassFromMetadata;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char **v65;

  v2 = v1;
  v59 = a1;
  v3 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v3);
  v4 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for BalanceWidgetTimelineProvider();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC2E3C();
  v9 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  v50 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC2EB4(0);
  v13 = *(_QWORD *)(v12 - 8);
  v53 = v12;
  v54 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v48 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC2F5C(0);
  v16 = *(_QWORD *)(v15 - 8);
  v55 = v15;
  *(_QWORD *)&v56 = v16;
  MEMORY[0x24BDAC7A8](v15);
  v51 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC3038(0);
  v19 = *(_QWORD *)(v18 - 8);
  v57 = v18;
  v58 = v19;
  MEMORY[0x24BDAC7A8](v18);
  v52 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC5294();
  v64 = type metadata accessor for BalanceWidgetDataProvider();
  v65 = &off_250E9C5D8;
  v21 = __swift_allocate_boxed_opaque_existential_1(&v61);
  sub_23DCF58EC(v2, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetDataProvider);
  v22 = *(double *)(v2 + *(int *)(type metadata accessor for BalanceSevenDaysWidget() + 20));
  LOBYTE(v60[0]) = 1;
  sub_23DD64520(&v61, (char *)v60, (uint64_t)v7, v22);
  type metadata accessor for BalanceWidgetEntryView();
  sub_23DCF535C(&qword_254326388, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetEntryView, (uint64_t)&unk_23DDC7A48);
  sub_23DCF535C(&qword_2543263C0, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetTimelineProvider, (uint64_t)&unk_23DDCA3C0);
  sub_23DDC65CC();
  sub_23DDC66D4();
  type metadata accessor for HealthBalanceUI();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v24 = (void *)objc_opt_self();
  v25 = objc_msgSend(v24, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23DDC5168();
  v61 = sub_23DDC6770();
  v62 = v26;
  v27 = sub_23DCF535C(&qword_2543263F0, (uint64_t (*)(uint64_t))sub_23DDC2E3C, MEMORY[0x24BDFB170]);
  v28 = sub_23DD0B190();
  v30 = v48;
  v29 = v49;
  sub_23DDC5E4C();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v29);
  sub_23DDC66D4();
  v31 = objc_msgSend(v24, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23DDC5168();
  v60[0] = sub_23DDC6770();
  v60[1] = v32;
  v61 = v29;
  v33 = MEMORY[0x24BEE0D00];
  v62 = MEMORY[0x24BEE0D00];
  v63 = v27;
  v64 = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v35 = v51;
  v36 = v53;
  sub_23DDC5E28();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v30, v36);
  _s15HealthBalanceUI0B15SevenDaysWidgetV17supportedFamiliesSay0F3Kit0F6FamilyOGvgZ_0();
  v61 = v36;
  v62 = v33;
  v63 = OpaqueTypeConformance2;
  v64 = v28;
  v37 = swift_getOpaqueTypeConformance2();
  v38 = v52;
  v39 = v55;
  sub_23DDC5E34();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v39);
  v40 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
  sub_23DCFB328(0, &qword_2543264E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAFE0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_23DDC65A8();
  v41 = swift_allocObject();
  v56 = xmmword_23DDC7F50;
  *(_OWORD *)(v41 + 16) = xmmword_23DDC7F50;
  sub_23DDC659C();
  sub_23DCFB328(0, &qword_2543264D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], v40);
  v42 = sub_23DDC6590();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = v56;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v43 + 104))(v45 + v44, *MEMORY[0x24BDFAED8], v42);
  v61 = v39;
  v62 = v37;
  swift_getOpaqueTypeConformance2();
  v46 = v57;
  sub_23DDC5E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v38, v46);
}

uint64_t sub_23DDC45B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for BalanceWidgetTimelineEntry();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF58EC(a1, (uint64_t)v6, v7);
  *a2 = swift_getKeyPath();
  sub_23DCFB328(0, &qword_2543263D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  v8 = type metadata accessor for BalanceWidgetEntryView();
  return sub_23DDC3D88((uint64_t)v6, (uint64_t)a2 + *(int *)(v8 + 20));
}

uint64_t sub_23DDC468C()
{
  return sub_23DDC5D2C();
}

uint64_t _s15HealthBalanceUI0B15SevenDaysWidgetV17supportedFamiliesSay0F3Kit0F6FamilyOGvgZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  unsigned int v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(unint64_t, _QWORD, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36[2];

  v36[1] = *MEMORY[0x24BDAC8D0];
  v0 = sub_23DDC6590();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23DDC57A4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v32 - v9;
  v11 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (!v11)
  {
    __break(1u);
LABEL_13:
    __break(1u);
  }
  v12 = v11;
  v13 = objc_msgSend(v11, sel_features);

  if (!v13)
    goto LABEL_13;
  v14 = objc_msgSend(v13, sel_harmonia);

  if (v14)
  {
    sub_23DDC578C();
    v15 = sub_23DDC5798();
    v16 = sub_23DDC68F0();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v34 = v3;
      v19 = v18;
      v36[0] = v18;
      v33 = v4;
      *(_DWORD *)v17 = 136446210;
      v35 = sub_23DD02158(0xD000000000000016, 0x800000023DDCC640, v36);
      sub_23DDC698C();
      _os_log_impl(&dword_23DCF2000, v15, v16, "[%{public}s] Returning supported families", v17, 0xCu);
      swift_arrayDestroy();
      v20 = v19;
      v3 = v34;
      MEMORY[0x242643C80](v20, -1, -1);
      MEMORY[0x242643C80](v17, -1, -1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v33);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
    sub_23DCFB328(0, &qword_2543264D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v26 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    v27 = v26 + *(_QWORD *)(v1 + 72);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_23DDC7F50;
    v29 = v28 + v26;
    v30 = *(void (**)(unint64_t, _QWORD, uint64_t))(v1 + 104);
    v30(v29, *MEMORY[0x24BDFAF08], v0);
    v30((unint64_t)v3, *MEMORY[0x24BDFAED8], v0);
    v25 = sub_23DD56F68(1, 2, 1, v28);
    *(_QWORD *)(v25 + 16) = 2;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v27 + v25, v3, v0);
  }
  else
  {
    sub_23DDC578C();
    v21 = sub_23DDC5798();
    v22 = sub_23DDC68F0();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v36[0] = v24;
      *(_DWORD *)v23 = 136446210;
      v35 = sub_23DD02158(0xD000000000000016, 0x800000023DDCC640, v36);
      sub_23DDC698C();
      _os_log_impl(&dword_23DCF2000, v21, v22, "[%{public}s] Feature flag off, returning empty families", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v24, -1, -1);
      MEMORY[0x242643C80](v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return MEMORY[0x24BEE4AF8];
  }
  return v25;
}

uint64_t sub_23DDC4B1C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for BalanceSevenDaysWidget()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDC4B38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BalanceWidgetDataProvider();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for BalanceSevenDaysWidget()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDC4B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BalanceWidgetDataProvider();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_23DDC4BC0()
{
  return sub_23DDC5D2C();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self();
}

id sub_23DDC4C00()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for ResourceBundleClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  qword_254326510 = (uint64_t)result;
  return result;
}

uint64_t sub_23DDC4C54(uint64_t a1)
{
  return sub_23DDC4D7C(a1, qword_256D06580);
}

uint64_t sub_23DDC4C80(uint64_t a1)
{
  return sub_23DDC4D7C(a1, qword_256D06598);
}

uint64_t sub_23DDC4CAC(uint64_t a1)
{
  return sub_23DDC4D7C(a1, qword_256D065B0);
}

uint64_t sub_23DDC4CD0(uint64_t a1)
{
  return sub_23DDC4D7C(a1, qword_256D065C8);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_23DDC4D34(uint64_t a1)
{
  return sub_23DDC4D7C(a1, qword_256D065E0);
}

uint64_t sub_23DDC4D58(uint64_t a1)
{
  return sub_23DDC4D7C(a1, qword_256D065F8);
}

uint64_t sub_23DDC4D7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  id v4;

  v3 = sub_23DDC5774();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  if (qword_254326850 != -1)
    swift_once();
  v4 = (id)qword_254326510;
  return sub_23DDC5768();
}

uint64_t sub_23DDC4E14()
{
  return MEMORY[0x24BDB5608]();
}

uint64_t sub_23DDC4E20()
{
  return MEMORY[0x24BDB5630]();
}

uint64_t sub_23DDC4E2C()
{
  return MEMORY[0x24BE3FA00]();
}

uint64_t sub_23DDC4E38()
{
  return MEMORY[0x24BE3FA08]();
}

uint64_t sub_23DDC4E44()
{
  return MEMORY[0x24BE3FA10]();
}

uint64_t sub_23DDC4E50()
{
  return MEMORY[0x24BE3FA18]();
}

uint64_t sub_23DDC4E5C()
{
  return MEMORY[0x24BE3FA20]();
}

uint64_t sub_23DDC4E68()
{
  return MEMORY[0x24BE3FA28]();
}

uint64_t sub_23DDC4E74()
{
  return MEMORY[0x24BDCB148]();
}

uint64_t sub_23DDC4E80()
{
  return MEMORY[0x24BE3FA30]();
}

uint64_t sub_23DDC4E8C()
{
  return MEMORY[0x24BDCB4A8]();
}

uint64_t sub_23DDC4E98()
{
  return MEMORY[0x24BDCB580]();
}

uint64_t sub_23DDC4EA4()
{
  return MEMORY[0x24BDCB810]();
}

uint64_t sub_23DDC4EB0()
{
  return MEMORY[0x24BDCB830]();
}

uint64_t sub_23DDC4EBC()
{
  return MEMORY[0x24BDCB838]();
}

uint64_t sub_23DDC4EC8()
{
  return MEMORY[0x24BDCB848]();
}

uint64_t sub_23DDC4ED4()
{
  return MEMORY[0x24BDCB868]();
}

uint64_t sub_23DDC4EE0()
{
  return MEMORY[0x24BDCB878]();
}

uint64_t sub_23DDC4EEC()
{
  return MEMORY[0x24BDCB930]();
}

uint64_t sub_23DDC4EF8()
{
  return MEMORY[0x24BDCBF70]();
}

uint64_t sub_23DDC4F04()
{
  return MEMORY[0x24BDCBFB0]();
}

uint64_t sub_23DDC4F10()
{
  return MEMORY[0x24BDCBFC8]();
}

uint64_t sub_23DDC4F1C()
{
  return MEMORY[0x24BDCBFE8]();
}

uint64_t sub_23DDC4F28()
{
  return MEMORY[0x24BDCC180]();
}

uint64_t sub_23DDC4F34()
{
  return MEMORY[0x24BDCC1B8]();
}

uint64_t sub_23DDC4F40()
{
  return MEMORY[0x24BDEAD78]();
}

uint64_t sub_23DDC4F4C()
{
  return MEMORY[0x24BDCC2F8]();
}

uint64_t sub_23DDC4F58()
{
  return MEMORY[0x24BDCC358]();
}

uint64_t sub_23DDC4F64()
{
  return MEMORY[0x24BDCC3F8]();
}

uint64_t sub_23DDC4F70()
{
  return MEMORY[0x24BDCC5A8]();
}

uint64_t sub_23DDC4F7C()
{
  return MEMORY[0x24BDCC5D8]();
}

uint64_t sub_23DDC4F88()
{
  return MEMORY[0x24BDCC868]();
}

uint64_t sub_23DDC4F94()
{
  return MEMORY[0x24BDCC878]();
}

uint64_t sub_23DDC4FA0()
{
  return MEMORY[0x24BDCC880]();
}

uint64_t sub_23DDC4FAC()
{
  return MEMORY[0x24BDCC890]();
}

uint64_t sub_23DDC4FB8()
{
  return MEMORY[0x24BDCC898]();
}

uint64_t sub_23DDC4FC4()
{
  return MEMORY[0x24BDCD2C8]();
}

uint64_t sub_23DDC4FD0()
{
  return MEMORY[0x24BDCD2D0]();
}

uint64_t sub_23DDC4FDC()
{
  return MEMORY[0x24BDEAD90]();
}

uint64_t sub_23DDC4FE8()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_23DDC4FF4()
{
  return MEMORY[0x24BDCD428]();
}

uint64_t sub_23DDC5000()
{
  return MEMORY[0x24BDCD6C8]();
}

uint64_t sub_23DDC500C()
{
  return MEMORY[0x24BDCD6D8]();
}

uint64_t sub_23DDC5018()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_23DDC5024()
{
  return MEMORY[0x24BDCDE78]();
}

uint64_t sub_23DDC5030()
{
  return MEMORY[0x24BDCDE90]();
}

uint64_t sub_23DDC503C()
{
  return MEMORY[0x24BDCDEE8]();
}

uint64_t sub_23DDC5048()
{
  return MEMORY[0x24BDCDF30]();
}

uint64_t sub_23DDC5054()
{
  return MEMORY[0x24BDCE020]();
}

uint64_t sub_23DDC5060()
{
  return MEMORY[0x24BDCE028]();
}

uint64_t sub_23DDC506C()
{
  return MEMORY[0x24BDCE098]();
}

uint64_t sub_23DDC5078()
{
  return MEMORY[0x24BDCE0B0]();
}

uint64_t sub_23DDC5084()
{
  return MEMORY[0x24BDCE0D0]();
}

uint64_t sub_23DDC5090()
{
  return MEMORY[0x24BDCE0E0]();
}

uint64_t sub_23DDC509C()
{
  return MEMORY[0x24BDCE168]();
}

uint64_t sub_23DDC50A8()
{
  return MEMORY[0x24BDCE178]();
}

uint64_t sub_23DDC50B4()
{
  return MEMORY[0x24BDCE1B8]();
}

uint64_t sub_23DDC50C0()
{
  return MEMORY[0x24BDCE1C8]();
}

uint64_t sub_23DDC50CC()
{
  return MEMORY[0x24BDCE1E0]();
}

uint64_t sub_23DDC50D8()
{
  return MEMORY[0x24BDCE230]();
}

uint64_t sub_23DDC50E4()
{
  return MEMORY[0x24BDCE250]();
}

uint64_t sub_23DDC50F0()
{
  return MEMORY[0x24BDCE2A0]();
}

uint64_t sub_23DDC50FC()
{
  return MEMORY[0x24BDCE468]();
}

uint64_t sub_23DDC5108()
{
  return MEMORY[0x24BDCE858]();
}

uint64_t sub_23DDC5114()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t sub_23DDC5120()
{
  return MEMORY[0x24BDCE8D8]();
}

uint64_t sub_23DDC512C()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_23DDC5138()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_23DDC5144()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_23DDC5150()
{
  return MEMORY[0x24BDCEC90]();
}

uint64_t sub_23DDC515C()
{
  return MEMORY[0x24BDCECA0]();
}

uint64_t sub_23DDC5168()
{
  return MEMORY[0x24BDCED58]();
}

uint64_t sub_23DDC5174()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_23DDC5180()
{
  return MEMORY[0x24BDCEF80]();
}

uint64_t sub_23DDC518C()
{
  return MEMORY[0x24BDCEFA0]();
}

uint64_t sub_23DDC5198()
{
  return MEMORY[0x24BDCEFC8]();
}

uint64_t sub_23DDC51A4()
{
  return MEMORY[0x24BDCEFD8]();
}

uint64_t sub_23DDC51B0()
{
  return MEMORY[0x24BDCF0D0]();
}

uint64_t sub_23DDC51BC()
{
  return MEMORY[0x24BDCF118]();
}

uint64_t sub_23DDC51C8()
{
  return MEMORY[0x24BDCF160]();
}

uint64_t sub_23DDC51D4()
{
  return MEMORY[0x24BDCF290]();
}

uint64_t sub_23DDC51E0()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t sub_23DDC51EC()
{
  return MEMORY[0x24BDCF4E0]();
}

uint64_t sub_23DDC51F8()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t sub_23DDC5204()
{
  return MEMORY[0x24BEE5C38]();
}

uint64_t sub_23DDC5210()
{
  return MEMORY[0x24BEE5C40]();
}

uint64_t sub_23DDC521C()
{
  return MEMORY[0x24BEE5C48]();
}

uint64_t sub_23DDC5228()
{
  return MEMORY[0x24BEE5C50]();
}

uint64_t sub_23DDC5234()
{
  return MEMORY[0x24BEE5C58]();
}

uint64_t sub_23DDC5240()
{
  return MEMORY[0x24BEE5C60]();
}

uint64_t sub_23DDC524C()
{
  return MEMORY[0x24BE3FA78]();
}

uint64_t sub_23DDC5258()
{
  return MEMORY[0x24BE3FAA0]();
}

uint64_t sub_23DDC5264()
{
  return MEMORY[0x24BE3FAF0]();
}

uint64_t sub_23DDC5270()
{
  return MEMORY[0x24BE3FB08]();
}

uint64_t sub_23DDC527C()
{
  return MEMORY[0x24BE3FB10]();
}

uint64_t sub_23DDC5288()
{
  return MEMORY[0x24BE3FBC8]();
}

uint64_t sub_23DDC5294()
{
  return MEMORY[0x24BE3FBD8]();
}

uint64_t sub_23DDC52A0()
{
  return MEMORY[0x24BE3FBE8]();
}

uint64_t sub_23DDC52AC()
{
  return MEMORY[0x24BE3FBF0]();
}

uint64_t sub_23DDC52B8()
{
  return MEMORY[0x24BE3FBF8]();
}

uint64_t sub_23DDC52C4()
{
  return MEMORY[0x24BE3FC00]();
}

uint64_t sub_23DDC52D0()
{
  return MEMORY[0x24BE3FC08]();
}

uint64_t sub_23DDC52DC()
{
  return MEMORY[0x24BE3FC10]();
}

uint64_t sub_23DDC52E8()
{
  return MEMORY[0x24BE3FCB8]();
}

uint64_t sub_23DDC52F4()
{
  return MEMORY[0x24BE3FCC0]();
}

uint64_t sub_23DDC5300()
{
  return MEMORY[0x24BE3FCD0]();
}

uint64_t sub_23DDC530C()
{
  return MEMORY[0x24BE3FCD8]();
}

uint64_t sub_23DDC5318()
{
  return MEMORY[0x24BE3FCE0]();
}

uint64_t sub_23DDC5324()
{
  return MEMORY[0x24BE3FCE8]();
}

uint64_t sub_23DDC5330()
{
  return MEMORY[0x24BE3FCF0]();
}

uint64_t sub_23DDC533C()
{
  return MEMORY[0x24BE3FD88]();
}

uint64_t sub_23DDC5348()
{
  return MEMORY[0x24BE3FDA8]();
}

uint64_t sub_23DDC5354()
{
  return MEMORY[0x24BE3FDB0]();
}

uint64_t sub_23DDC5360()
{
  return MEMORY[0x24BE3FDB8]();
}

uint64_t sub_23DDC536C()
{
  return MEMORY[0x24BE3FDE8]();
}

uint64_t sub_23DDC5378()
{
  return MEMORY[0x24BE3FDF8]();
}

uint64_t sub_23DDC5384()
{
  return MEMORY[0x24BE3FE00]();
}

uint64_t sub_23DDC5390()
{
  return MEMORY[0x24BE3FE08]();
}

uint64_t sub_23DDC539C()
{
  return MEMORY[0x24BE3FE18]();
}

uint64_t sub_23DDC53A8()
{
  return MEMORY[0x24BE3FE20]();
}

uint64_t sub_23DDC53B4()
{
  return MEMORY[0x24BE3FEC0]();
}

uint64_t sub_23DDC53C0()
{
  return MEMORY[0x24BE3FEC8]();
}

uint64_t sub_23DDC53CC()
{
  return MEMORY[0x24BE3FED0]();
}

uint64_t sub_23DDC53D8()
{
  return MEMORY[0x24BE3FEE8]();
}

uint64_t sub_23DDC53E4()
{
  return MEMORY[0x24BE3FEF8]();
}

uint64_t sub_23DDC53F0()
{
  return MEMORY[0x24BE3FF68]();
}

uint64_t sub_23DDC53FC()
{
  return MEMORY[0x24BE3FF70]();
}

uint64_t sub_23DDC5408()
{
  return MEMORY[0x24BE3FF78]();
}

uint64_t sub_23DDC5414()
{
  return MEMORY[0x24BE3FF80]();
}

uint64_t sub_23DDC5420()
{
  return MEMORY[0x24BE3FFB0]();
}

uint64_t sub_23DDC542C()
{
  return MEMORY[0x24BE3FFE0]();
}

uint64_t sub_23DDC5438()
{
  return MEMORY[0x24BE40000]();
}

uint64_t sub_23DDC5444()
{
  return MEMORY[0x24BE40020]();
}

uint64_t sub_23DDC5450()
{
  return MEMORY[0x24BE40040]();
}

uint64_t sub_23DDC545C()
{
  return MEMORY[0x24BE40058]();
}

uint64_t sub_23DDC5468()
{
  return MEMORY[0x24BE40150]();
}

uint64_t sub_23DDC5474()
{
  return MEMORY[0x24BE40158]();
}

uint64_t sub_23DDC5480()
{
  return MEMORY[0x24BE40160]();
}

uint64_t sub_23DDC548C()
{
  return MEMORY[0x24BE40178]();
}

uint64_t sub_23DDC5498()
{
  return MEMORY[0x24BE40180]();
}

uint64_t sub_23DDC54A4()
{
  return MEMORY[0x24BE40188]();
}

uint64_t sub_23DDC54B0()
{
  return MEMORY[0x24BE40198]();
}

uint64_t sub_23DDC54BC()
{
  return MEMORY[0x24BE401A0]();
}

uint64_t sub_23DDC54C8()
{
  return MEMORY[0x24BE401C0]();
}

uint64_t sub_23DDC54D4()
{
  return MEMORY[0x24BE401F0]();
}

uint64_t sub_23DDC54E0()
{
  return MEMORY[0x24BE401F8]();
}

uint64_t _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0()
{
  return MEMORY[0x24BE40200]();
}

uint64_t sub_23DDC54F8()
{
  return MEMORY[0x24BE40208]();
}

uint64_t sub_23DDC5504()
{
  return MEMORY[0x24BE40210]();
}

uint64_t sub_23DDC5510()
{
  return MEMORY[0x24BE40218]();
}

uint64_t sub_23DDC551C()
{
  return MEMORY[0x24BE40230]();
}

uint64_t sub_23DDC5528()
{
  return MEMORY[0x24BE40238]();
}

uint64_t sub_23DDC5534()
{
  return MEMORY[0x24BE403B0]();
}

uint64_t sub_23DDC5540()
{
  return MEMORY[0x24BE403B8]();
}

uint64_t sub_23DDC554C()
{
  return MEMORY[0x24BE403C0]();
}

uint64_t sub_23DDC5558()
{
  return MEMORY[0x24BE403C8]();
}

uint64_t sub_23DDC5564()
{
  return MEMORY[0x24BE403D0]();
}

uint64_t sub_23DDC5570()
{
  return MEMORY[0x24BE403D8]();
}

uint64_t sub_23DDC557C()
{
  return MEMORY[0x24BE40418]();
}

uint64_t sub_23DDC5588()
{
  return MEMORY[0x24BE40420]();
}

uint64_t sub_23DDC5594()
{
  return MEMORY[0x24BE40428]();
}

uint64_t sub_23DDC55A0()
{
  return MEMORY[0x24BE40438]();
}

uint64_t sub_23DDC55AC()
{
  return MEMORY[0x24BE40460]();
}

uint64_t sub_23DDC55B8()
{
  return MEMORY[0x24BE40468]();
}

uint64_t sub_23DDC55C4()
{
  return MEMORY[0x24BE40470]();
}

uint64_t sub_23DDC55D0()
{
  return MEMORY[0x24BE40478]();
}

uint64_t sub_23DDC55DC()
{
  return MEMORY[0x24BE40498]();
}

uint64_t sub_23DDC55E8()
{
  return MEMORY[0x24BE404A0]();
}

uint64_t sub_23DDC55F4()
{
  return MEMORY[0x24BE404A8]();
}

uint64_t sub_23DDC5600()
{
  return MEMORY[0x24BE404B8]();
}

uint64_t sub_23DDC560C()
{
  return MEMORY[0x24BE404C0]();
}

uint64_t sub_23DDC5618()
{
  return MEMORY[0x24BE404C8]();
}

uint64_t sub_23DDC5624()
{
  return MEMORY[0x24BE404D0]();
}

uint64_t sub_23DDC5630()
{
  return MEMORY[0x24BE404D8]();
}

uint64_t sub_23DDC563C()
{
  return MEMORY[0x24BE40508]();
}

uint64_t sub_23DDC5648()
{
  return MEMORY[0x24BE40510]();
}

uint64_t sub_23DDC5654()
{
  return MEMORY[0x24BE40520]();
}

uint64_t sub_23DDC5660()
{
  return MEMORY[0x24BE40528]();
}

uint64_t sub_23DDC566C()
{
  return MEMORY[0x24BE40538]();
}

uint64_t sub_23DDC5678()
{
  return MEMORY[0x24BE40550]();
}

uint64_t sub_23DDC5684()
{
  return MEMORY[0x24BE40580]();
}

uint64_t sub_23DDC5690()
{
  return MEMORY[0x24BE40588]();
}

uint64_t sub_23DDC569C()
{
  return MEMORY[0x24BE40598]();
}

uint64_t sub_23DDC56A8()
{
  return MEMORY[0x24BE405B0]();
}

uint64_t sub_23DDC56B4()
{
  return MEMORY[0x24BE405B8]();
}

uint64_t sub_23DDC56C0()
{
  return MEMORY[0x24BE405D0]();
}

uint64_t sub_23DDC56CC()
{
  return MEMORY[0x24BE405D8]();
}

uint64_t sub_23DDC56D8()
{
  return MEMORY[0x24BE40608]();
}

uint64_t sub_23DDC56E4()
{
  return MEMORY[0x24BE40610]();
}

uint64_t sub_23DDC56F0()
{
  return MEMORY[0x24BE40618]();
}

uint64_t sub_23DDC56FC()
{
  return MEMORY[0x24BE40620]();
}

uint64_t sub_23DDC5708()
{
  return MEMORY[0x24BE40658]();
}

uint64_t sub_23DDC5714()
{
  return MEMORY[0x24BE40660]();
}

uint64_t sub_23DDC5720()
{
  return MEMORY[0x24BE40668]();
}

uint64_t sub_23DDC572C()
{
  return MEMORY[0x24BE40670]();
}

uint64_t sub_23DDC5738()
{
  return MEMORY[0x24BE40678]();
}

uint64_t sub_23DDC5744()
{
  return MEMORY[0x24BE45750]();
}

uint64_t sub_23DDC5750()
{
  return MEMORY[0x24BE45760]();
}

uint64_t sub_23DDC575C()
{
  return MEMORY[0x24BE45768]();
}

uint64_t sub_23DDC5768()
{
  return MEMORY[0x24BDC6D18]();
}

uint64_t sub_23DDC5774()
{
  return MEMORY[0x24BDC6D28]();
}

uint64_t sub_23DDC5780()
{
  return MEMORY[0x24BEE76F0]();
}

uint64_t sub_23DDC578C()
{
  return MEMORY[0x24BE40688]();
}

uint64_t sub_23DDC5798()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_23DDC57A4()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_23DDC57B0()
{
  return MEMORY[0x24BDB7AB8]();
}

uint64_t sub_23DDC57BC()
{
  return MEMORY[0x24BDB7B10]();
}

uint64_t sub_23DDC57C8()
{
  return MEMORY[0x24BDB7B20]();
}

uint64_t sub_23DDC57D4()
{
  return MEMORY[0x24BDB7B60]();
}

uint64_t sub_23DDC57E0()
{
  return MEMORY[0x24BDB7B68]();
}

uint64_t sub_23DDC57EC()
{
  return MEMORY[0x24BDB7B90]();
}

uint64_t sub_23DDC57F8()
{
  return MEMORY[0x24BDB7B98]();
}

uint64_t sub_23DDC5804()
{
  return MEMORY[0x24BDB7BA0]();
}

uint64_t sub_23DDC5810()
{
  return MEMORY[0x24BDB7BA8]();
}

uint64_t sub_23DDC581C()
{
  return MEMORY[0x24BDB7C00]();
}

uint64_t sub_23DDC5828()
{
  return MEMORY[0x24BDB7C20]();
}

uint64_t sub_23DDC5834()
{
  return MEMORY[0x24BDB7C30]();
}

uint64_t sub_23DDC5840()
{
  return MEMORY[0x24BDB7C40]();
}

uint64_t sub_23DDC584C()
{
  return MEMORY[0x24BDB7C60]();
}

uint64_t sub_23DDC5858()
{
  return MEMORY[0x24BDB7C80]();
}

uint64_t sub_23DDC5864()
{
  return MEMORY[0x24BDB7C90]();
}

uint64_t sub_23DDC5870()
{
  return MEMORY[0x24BDB7D20]();
}

uint64_t sub_23DDC587C()
{
  return MEMORY[0x24BDB7D50]();
}

uint64_t sub_23DDC5888()
{
  return MEMORY[0x24BDB7D60]();
}

uint64_t sub_23DDC5894()
{
  return MEMORY[0x24BDB7D78]();
}

uint64_t sub_23DDC58A0()
{
  return MEMORY[0x24BDB7D88]();
}

uint64_t sub_23DDC58AC()
{
  return MEMORY[0x24BDB7DD0]();
}

uint64_t sub_23DDC58B8()
{
  return MEMORY[0x24BDB7DE0]();
}

uint64_t sub_23DDC58C4()
{
  return MEMORY[0x24BDB7E18]();
}

uint64_t sub_23DDC58D0()
{
  return MEMORY[0x24BDB7E28]();
}

uint64_t sub_23DDC58DC()
{
  return MEMORY[0x24BDB7E70]();
}

uint64_t sub_23DDC58E8()
{
  return MEMORY[0x24BDB7E78]();
}

uint64_t sub_23DDC58F4()
{
  return MEMORY[0x24BDB7E88]();
}

uint64_t sub_23DDC5900()
{
  return MEMORY[0x24BDB7F00]();
}

uint64_t sub_23DDC590C()
{
  return MEMORY[0x24BDB7F08]();
}

uint64_t sub_23DDC5918()
{
  return MEMORY[0x24BDB7F78]();
}

uint64_t sub_23DDC5924()
{
  return MEMORY[0x24BDB7F88]();
}

uint64_t sub_23DDC5930()
{
  return MEMORY[0x24BDB7F90]();
}

uint64_t sub_23DDC593C()
{
  return MEMORY[0x24BDB7FB8]();
}

uint64_t sub_23DDC5948()
{
  return MEMORY[0x24BDB7FF8]();
}

uint64_t sub_23DDC5954()
{
  return MEMORY[0x24BDB8048]();
}

uint64_t sub_23DDC5960()
{
  return MEMORY[0x24BDB8058]();
}

uint64_t sub_23DDC596C()
{
  return MEMORY[0x24BDB8060]();
}

uint64_t sub_23DDC5978()
{
  return MEMORY[0x24BDB80F0]();
}

uint64_t sub_23DDC5984()
{
  return MEMORY[0x24BDB80F8]();
}

uint64_t sub_23DDC5990()
{
  return MEMORY[0x24BDB8100]();
}

uint64_t sub_23DDC599C()
{
  return MEMORY[0x24BDB8108]();
}

uint64_t sub_23DDC59A8()
{
  return MEMORY[0x24BDB8120]();
}

uint64_t sub_23DDC59B4()
{
  return MEMORY[0x24BDB8128]();
}

uint64_t sub_23DDC59C0()
{
  return MEMORY[0x24BDB8158]();
}

uint64_t sub_23DDC59CC()
{
  return MEMORY[0x24BDB8170]();
}

uint64_t sub_23DDC59D8()
{
  return MEMORY[0x24BDB8220]();
}

uint64_t sub_23DDC59E4()
{
  return MEMORY[0x24BDB8238]();
}

uint64_t sub_23DDC59F0()
{
  return MEMORY[0x24BDB8278]();
}

uint64_t sub_23DDC59FC()
{
  return MEMORY[0x24BDB8288]();
}

uint64_t sub_23DDC5A08()
{
  return MEMORY[0x24BDB82D0]();
}

uint64_t sub_23DDC5A14()
{
  return MEMORY[0x24BDB82E0]();
}

uint64_t sub_23DDC5A20()
{
  return MEMORY[0x24BDB8300]();
}

uint64_t sub_23DDC5A2C()
{
  return MEMORY[0x24BDB8308]();
}

uint64_t sub_23DDC5A38()
{
  return MEMORY[0x24BDB8318]();
}

uint64_t sub_23DDC5A44()
{
  return MEMORY[0x24BDB8328]();
}

uint64_t sub_23DDC5A50()
{
  return MEMORY[0x24BDB8338]();
}

uint64_t sub_23DDC5A5C()
{
  return MEMORY[0x24BDEAE98]();
}

uint64_t sub_23DDC5A68()
{
  return MEMORY[0x24BDEAEB0]();
}

uint64_t sub_23DDC5A74()
{
  return MEMORY[0x24BDEB040]();
}

uint64_t sub_23DDC5A80()
{
  return MEMORY[0x24BDEB338]();
}

uint64_t sub_23DDC5A8C()
{
  return MEMORY[0x24BDEB3E0]();
}

uint64_t sub_23DDC5A98()
{
  return MEMORY[0x24BDEB418]();
}

uint64_t sub_23DDC5AA4()
{
  return MEMORY[0x24BDEB560]();
}

uint64_t sub_23DDC5AB0()
{
  return MEMORY[0x24BDEB7B8]();
}

uint64_t sub_23DDC5ABC()
{
  return MEMORY[0x24BDEB8A8]();
}

uint64_t sub_23DDC5AC8()
{
  return MEMORY[0x24BDEB8C8]();
}

uint64_t sub_23DDC5AD4()
{
  return MEMORY[0x24BDEB8D0]();
}

uint64_t sub_23DDC5AE0()
{
  return MEMORY[0x24BDEBC28]();
}

uint64_t sub_23DDC5AEC()
{
  return MEMORY[0x24BDEBC38]();
}

uint64_t sub_23DDC5AF8()
{
  return MEMORY[0x24BDEBC40]();
}

uint64_t sub_23DDC5B04()
{
  return MEMORY[0x24BDEBDE0]();
}

uint64_t sub_23DDC5B10()
{
  return MEMORY[0x24BDEBDF0]();
}

uint64_t sub_23DDC5B1C()
{
  return MEMORY[0x24BDEBE00]();
}

uint64_t sub_23DDC5B28()
{
  return MEMORY[0x24BDEBE30]();
}

uint64_t sub_23DDC5B34()
{
  return MEMORY[0x24BDEBED0]();
}

uint64_t sub_23DDC5B40()
{
  return MEMORY[0x24BDEBF88]();
}

uint64_t sub_23DDC5B4C()
{
  return MEMORY[0x24BDEBF98]();
}

uint64_t sub_23DDC5B58()
{
  return MEMORY[0x24BDEBFD0]();
}

uint64_t sub_23DDC5B64()
{
  return MEMORY[0x24BDEBFF0]();
}

uint64_t sub_23DDC5B70()
{
  return MEMORY[0x24BDEC120]();
}

uint64_t sub_23DDC5B7C()
{
  return MEMORY[0x24BDEC238]();
}

uint64_t sub_23DDC5B88()
{
  return MEMORY[0x24BDEC248]();
}

uint64_t sub_23DDC5B94()
{
  return MEMORY[0x24BDEC530]();
}

uint64_t sub_23DDC5BA0()
{
  return MEMORY[0x24BDEC638]();
}

uint64_t sub_23DDC5BAC()
{
  return MEMORY[0x24BDEC6D8]();
}

uint64_t sub_23DDC5BB8()
{
  return MEMORY[0x24BDEC6E0]();
}

uint64_t sub_23DDC5BC4()
{
  return MEMORY[0x24BDEC7B0]();
}

uint64_t sub_23DDC5BD0()
{
  return MEMORY[0x24BDEC7E8]();
}

uint64_t sub_23DDC5BDC()
{
  return MEMORY[0x24BDECBC8]();
}

uint64_t sub_23DDC5BE8()
{
  return MEMORY[0x24BDECCE0]();
}

uint64_t sub_23DDC5BF4()
{
  return MEMORY[0x24BDECE88]();
}

uint64_t sub_23DDC5C00()
{
  return MEMORY[0x24BDECF50]();
}

uint64_t sub_23DDC5C0C()
{
  return MEMORY[0x24BDED2D0]();
}

uint64_t sub_23DDC5C18()
{
  return MEMORY[0x24BDED6E8]();
}

uint64_t sub_23DDC5C24()
{
  return MEMORY[0x24BDED6F8]();
}

uint64_t sub_23DDC5C30()
{
  return MEMORY[0x24BDED708]();
}

uint64_t sub_23DDC5C3C()
{
  return MEMORY[0x24BDED718]();
}

uint64_t sub_23DDC5C48()
{
  return MEMORY[0x24BDED730]();
}

uint64_t sub_23DDC5C54()
{
  return MEMORY[0x24BDED738]();
}

uint64_t sub_23DDC5C60()
{
  return MEMORY[0x24BDED758]();
}

uint64_t sub_23DDC5C6C()
{
  return MEMORY[0x24BDEDB60]();
}

uint64_t sub_23DDC5C78()
{
  return MEMORY[0x24BDEDBA8]();
}

uint64_t sub_23DDC5C84()
{
  return MEMORY[0x24BDEDE90]();
}

uint64_t sub_23DDC5C90()
{
  return MEMORY[0x24BDEDE98]();
}

uint64_t sub_23DDC5C9C()
{
  return MEMORY[0x24BDEDEE8]();
}

uint64_t sub_23DDC5CA8()
{
  return MEMORY[0x24BDEE020]();
}

uint64_t sub_23DDC5CB4()
{
  return MEMORY[0x24BDEE0A0]();
}

uint64_t sub_23DDC5CC0()
{
  return MEMORY[0x24BDEE0A8]();
}

uint64_t sub_23DDC5CCC()
{
  return MEMORY[0x24BDEE190]();
}

uint64_t sub_23DDC5CD8()
{
  return MEMORY[0x24BDEE198]();
}

uint64_t sub_23DDC5CE4()
{
  return MEMORY[0x24BDEE2E0]();
}

uint64_t sub_23DDC5CF0()
{
  return MEMORY[0x24BDEE390]();
}

uint64_t sub_23DDC5CFC()
{
  return MEMORY[0x24BDEE3A0]();
}

uint64_t sub_23DDC5D08()
{
  return MEMORY[0x24BDEE428]();
}

uint64_t sub_23DDC5D14()
{
  return MEMORY[0x24BDEE430]();
}

uint64_t sub_23DDC5D20()
{
  return MEMORY[0x24BDFAAC0]();
}

uint64_t sub_23DDC5D2C()
{
  return MEMORY[0x24BDFAAE8]();
}

uint64_t sub_23DDC5D38()
{
  return MEMORY[0x24BDFAB60]();
}

uint64_t sub_23DDC5D44()
{
  return MEMORY[0x24BDFAB78]();
}

uint64_t sub_23DDC5D50()
{
  return MEMORY[0x24BDEE490]();
}

uint64_t sub_23DDC5D5C()
{
  return MEMORY[0x24BDEE4A0]();
}

uint64_t sub_23DDC5D68()
{
  return MEMORY[0x24BDEE4E0]();
}

uint64_t sub_23DDC5D74()
{
  return MEMORY[0x24BDEE4F8]();
}

uint64_t sub_23DDC5D80()
{
  return MEMORY[0x24BDEE530]();
}

uint64_t sub_23DDC5D8C()
{
  return MEMORY[0x24BDEE538]();
}

uint64_t sub_23DDC5D98()
{
  return MEMORY[0x24BDEE700]();
}

uint64_t sub_23DDC5DA4()
{
  return MEMORY[0x24BDEE730]();
}

uint64_t sub_23DDC5DB0()
{
  return MEMORY[0x24BDEE980]();
}

uint64_t sub_23DDC5DBC()
{
  return MEMORY[0x24BDEE988]();
}

uint64_t sub_23DDC5DC8()
{
  return MEMORY[0x24BDEEA50]();
}

uint64_t sub_23DDC5DD4()
{
  return MEMORY[0x24BDEEB70]();
}

uint64_t sub_23DDC5DE0()
{
  return MEMORY[0x24BDEEB88]();
}

uint64_t sub_23DDC5DEC()
{
  return MEMORY[0x24BDEEBE0]();
}

uint64_t sub_23DDC5DF8()
{
  return MEMORY[0x24BDEEBF0]();
}

uint64_t sub_23DDC5E04()
{
  return MEMORY[0x24BDEEC90]();
}

uint64_t sub_23DDC5E10()
{
  return MEMORY[0x24BDEEF60]();
}

uint64_t sub_23DDC5E1C()
{
  return MEMORY[0x24BDEEF78]();
}

uint64_t sub_23DDC5E28()
{
  return MEMORY[0x24BDFAB90]();
}

uint64_t sub_23DDC5E34()
{
  return MEMORY[0x24BDFABA0]();
}

uint64_t sub_23DDC5E40()
{
  return MEMORY[0x24BDFABB0]();
}

uint64_t sub_23DDC5E4C()
{
  return MEMORY[0x24BDFABC0]();
}

uint64_t sub_23DDC5E58()
{
  return MEMORY[0x24BDEF3A0]();
}

uint64_t sub_23DDC5E64()
{
  return MEMORY[0x24BDEF818]();
}

uint64_t sub_23DDC5E70()
{
  return MEMORY[0x24BDEFA58]();
}

uint64_t sub_23DDC5E7C()
{
  return MEMORY[0x24BDEFB28]();
}

uint64_t sub_23DDC5E88()
{
  return MEMORY[0x24BDEFB50]();
}

uint64_t sub_23DDC5E94()
{
  return MEMORY[0x24BDEFCB8]();
}

uint64_t sub_23DDC5EA0()
{
  return MEMORY[0x24BDEFCC8]();
}

uint64_t sub_23DDC5EAC()
{
  return MEMORY[0x24BDEFDB0]();
}

uint64_t sub_23DDC5EB8()
{
  return MEMORY[0x24BDF06F8]();
}

uint64_t sub_23DDC5EC4()
{
  return MEMORY[0x24BDF0C40]();
}

uint64_t sub_23DDC5ED0()
{
  return MEMORY[0x24BDF0C48]();
}

uint64_t sub_23DDC5EDC()
{
  return MEMORY[0x24BDF0C58]();
}

uint64_t sub_23DDC5EE8()
{
  return MEMORY[0x24BDFABF0]();
}

uint64_t sub_23DDC5EF4()
{
  return MEMORY[0x24BDF0DC8]();
}

uint64_t sub_23DDC5F00()
{
  return MEMORY[0x24BDF1008]();
}

uint64_t sub_23DDC5F0C()
{
  return MEMORY[0x24BDF1088]();
}

uint64_t sub_23DDC5F18()
{
  return MEMORY[0x24BDF1430]();
}

uint64_t sub_23DDC5F24()
{
  return MEMORY[0x24BDF1450]();
}

uint64_t sub_23DDC5F30()
{
  return MEMORY[0x24BDF1458]();
}

uint64_t sub_23DDC5F3C()
{
  return MEMORY[0x24BDF1468]();
}

uint64_t sub_23DDC5F48()
{
  return MEMORY[0x24BDF14A0]();
}

uint64_t sub_23DDC5F54()
{
  return MEMORY[0x24BDF14C0]();
}

uint64_t sub_23DDC5F60()
{
  return MEMORY[0x24BDF14C8]();
}

uint64_t sub_23DDC5F6C()
{
  return MEMORY[0x24BDF14E0]();
}

uint64_t sub_23DDC5F78()
{
  return MEMORY[0x24BDF14E8]();
}

uint64_t sub_23DDC5F84()
{
  return MEMORY[0x24BDF14F8]();
}

uint64_t sub_23DDC5F90()
{
  return MEMORY[0x24BDF15A8]();
}

uint64_t sub_23DDC5F9C()
{
  return MEMORY[0x24BDF15B0]();
}

uint64_t sub_23DDC5FA8()
{
  return MEMORY[0x24BDF1678]();
}

uint64_t sub_23DDC5FB4()
{
  return MEMORY[0x24BDF16D8]();
}

uint64_t sub_23DDC5FC0()
{
  return MEMORY[0x24BDF1700]();
}

uint64_t sub_23DDC5FCC()
{
  return MEMORY[0x24BDF1750]();
}

uint64_t sub_23DDC5FD8()
{
  return MEMORY[0x24BDF1758]();
}

uint64_t sub_23DDC5FE4()
{
  return MEMORY[0x24BDF1768]();
}

uint64_t sub_23DDC5FF0()
{
  return MEMORY[0x24BDF1798]();
}

uint64_t sub_23DDC5FFC()
{
  return MEMORY[0x24BDF17D8]();
}

uint64_t sub_23DDC6008()
{
  return MEMORY[0x24BDF17E8]();
}

uint64_t sub_23DDC6014()
{
  return MEMORY[0x24BDF17F8]();
}

uint64_t sub_23DDC6020()
{
  return MEMORY[0x24BDF1818]();
}

uint64_t sub_23DDC602C()
{
  return MEMORY[0x24BDF1828]();
}

uint64_t sub_23DDC6038()
{
  return MEMORY[0x24BDF1900]();
}

uint64_t sub_23DDC6044()
{
  return MEMORY[0x24BDF1B10]();
}

uint64_t sub_23DDC6050()
{
  return MEMORY[0x24BDF1BA0]();
}

uint64_t sub_23DDC605C()
{
  return MEMORY[0x24BDF1BB8]();
}

uint64_t sub_23DDC6068()
{
  return MEMORY[0x24BDF1D18]();
}

uint64_t sub_23DDC6074()
{
  return MEMORY[0x24BDF1DC8]();
}

uint64_t sub_23DDC6080()
{
  return MEMORY[0x24BDF1DE0]();
}

uint64_t sub_23DDC608C()
{
  return MEMORY[0x24BDF1DE8]();
}

uint64_t sub_23DDC6098()
{
  return MEMORY[0x24BDF1FF0]();
}

uint64_t sub_23DDC60A4()
{
  return MEMORY[0x24BDB8358]();
}

uint64_t sub_23DDC60B0()
{
  return MEMORY[0x24BDB8388]();
}

uint64_t sub_23DDC60BC()
{
  return MEMORY[0x24BDB83A8]();
}

uint64_t sub_23DDC60C8()
{
  return MEMORY[0x24BDB83D8]();
}

uint64_t sub_23DDC60D4()
{
  return MEMORY[0x24BDB83E8]();
}

uint64_t sub_23DDC60E0()
{
  return MEMORY[0x24BDB8408]();
}

uint64_t sub_23DDC60EC()
{
  return MEMORY[0x24BDFABF8]();
}

uint64_t sub_23DDC60F8()
{
  return MEMORY[0x24BDFAC08]();
}

uint64_t sub_23DDC6104()
{
  return MEMORY[0x24BDFAC48]();
}

uint64_t sub_23DDC6110()
{
  return MEMORY[0x24BDF2088]();
}

uint64_t sub_23DDC611C()
{
  return MEMORY[0x24BDF20A0]();
}

uint64_t sub_23DDC6128()
{
  return MEMORY[0x24BDF2170]();
}

uint64_t sub_23DDC6134()
{
  return MEMORY[0x24BDF2298]();
}

uint64_t sub_23DDC6140()
{
  return MEMORY[0x24BDF2698]();
}

uint64_t sub_23DDC614C()
{
  return MEMORY[0x24BDF27F0]();
}

uint64_t sub_23DDC6158()
{
  return MEMORY[0x24BDF2928]();
}

uint64_t sub_23DDC6164()
{
  return MEMORY[0x24BDF29C8]();
}

uint64_t sub_23DDC6170()
{
  return MEMORY[0x24BDF2C40]();
}

uint64_t sub_23DDC617C()
{
  return MEMORY[0x24BDF2DE0]();
}

uint64_t sub_23DDC6188()
{
  return MEMORY[0x24BDF3178]();
}

uint64_t sub_23DDC6194()
{
  return MEMORY[0x24BDF3630]();
}

uint64_t sub_23DDC61A0()
{
  return MEMORY[0x24BDF37A8]();
}

uint64_t sub_23DDC61AC()
{
  return MEMORY[0x24BDF37E0]();
}

uint64_t sub_23DDC61B8()
{
  return MEMORY[0x24BDF38E0]();
}

uint64_t sub_23DDC61C4()
{
  return MEMORY[0x24BDF3A40]();
}

uint64_t sub_23DDC61D0()
{
  return MEMORY[0x24BDF3BA8]();
}

uint64_t sub_23DDC61DC()
{
  return MEMORY[0x24BDF3BE8]();
}

uint64_t sub_23DDC61E8()
{
  return MEMORY[0x24BDF3C50]();
}

uint64_t sub_23DDC61F4()
{
  return MEMORY[0x24BDF3C70]();
}

uint64_t sub_23DDC6200()
{
  return MEMORY[0x24BDF3CA8]();
}

uint64_t sub_23DDC620C()
{
  return MEMORY[0x24BDF3CB8]();
}

uint64_t sub_23DDC6218()
{
  return MEMORY[0x24BDF3CF0]();
}

uint64_t sub_23DDC6224()
{
  return MEMORY[0x24BDF3D10]();
}

uint64_t sub_23DDC6230()
{
  return MEMORY[0x24BDF3D30]();
}

uint64_t sub_23DDC623C()
{
  return MEMORY[0x24BDF3D78]();
}

uint64_t sub_23DDC6248()
{
  return MEMORY[0x24BDF3D88]();
}

uint64_t sub_23DDC6254()
{
  return MEMORY[0x24BDF3DF8]();
}

uint64_t sub_23DDC6260()
{
  return MEMORY[0x24BDF3E08]();
}

uint64_t sub_23DDC626C()
{
  return MEMORY[0x24BDF3E98]();
}

uint64_t sub_23DDC6278()
{
  return MEMORY[0x24BDF3F28]();
}

uint64_t sub_23DDC6284()
{
  return MEMORY[0x24BDF3F80]();
}

uint64_t sub_23DDC6290()
{
  return MEMORY[0x24BDF4048]();
}

uint64_t sub_23DDC629C()
{
  return MEMORY[0x24BDF4090]();
}

uint64_t sub_23DDC62A8()
{
  return MEMORY[0x24BDF40C0]();
}

uint64_t sub_23DDC62B4()
{
  return MEMORY[0x24BDF4208]();
}

uint64_t sub_23DDC62C0()
{
  return MEMORY[0x24BDF4218]();
}

uint64_t sub_23DDC62CC()
{
  return MEMORY[0x24BDF4230]();
}

uint64_t sub_23DDC62D8()
{
  return MEMORY[0x24BDF4238]();
}

uint64_t sub_23DDC62E4()
{
  return MEMORY[0x24BDF4248]();
}

uint64_t sub_23DDC62F0()
{
  return MEMORY[0x24BDF4278]();
}

uint64_t sub_23DDC62FC()
{
  return MEMORY[0x24BDF4470]();
}

uint64_t sub_23DDC6308()
{
  return MEMORY[0x24BDF4480]();
}

uint64_t sub_23DDC6314()
{
  return MEMORY[0x24BDF46D8]();
}

uint64_t sub_23DDC6320()
{
  return MEMORY[0x24BDF46E0]();
}

uint64_t sub_23DDC632C()
{
  return MEMORY[0x24BDF4728]();
}

uint64_t sub_23DDC6338()
{
  return MEMORY[0x24BDF4730]();
}

uint64_t sub_23DDC6344()
{
  return MEMORY[0x24BDF47F8]();
}

uint64_t sub_23DDC6350()
{
  return MEMORY[0x24BDF48E8]();
}

uint64_t sub_23DDC635C()
{
  return MEMORY[0x24BDB8480]();
}

uint64_t sub_23DDC6368()
{
  return MEMORY[0x24BDB8488]();
}

uint64_t sub_23DDC6374()
{
  return MEMORY[0x24BDF49A0]();
}

uint64_t sub_23DDC6380()
{
  return MEMORY[0x24BDF49C8]();
}

uint64_t sub_23DDC638C()
{
  return MEMORY[0x24BDF4CC0]();
}

uint64_t sub_23DDC6398()
{
  return MEMORY[0x24BDF4CC8]();
}

uint64_t sub_23DDC63A4()
{
  return MEMORY[0x24BDF4CE0]();
}

uint64_t sub_23DDC63B0()
{
  return MEMORY[0x24BDF4D00]();
}

uint64_t sub_23DDC63BC()
{
  return MEMORY[0x24BDF4EC0]();
}

uint64_t sub_23DDC63C8()
{
  return MEMORY[0x24BDF4EF0]();
}

uint64_t sub_23DDC63D4()
{
  return MEMORY[0x24BDF4F18]();
}

uint64_t sub_23DDC63E0()
{
  return MEMORY[0x24BDF4F20]();
}

uint64_t sub_23DDC63EC()
{
  return MEMORY[0x24BDF4F38]();
}

uint64_t sub_23DDC63F8()
{
  return MEMORY[0x24BDF4F98]();
}

uint64_t sub_23DDC6404()
{
  return MEMORY[0x24BDF4FA0]();
}

uint64_t sub_23DDC6410()
{
  return MEMORY[0x24BDF4FE0]();
}

uint64_t sub_23DDC641C()
{
  return MEMORY[0x24BDF5018]();
}

uint64_t sub_23DDC6428()
{
  return MEMORY[0x24BDF5118]();
}

uint64_t sub_23DDC6434()
{
  return MEMORY[0x24BDF53F0]();
}

uint64_t sub_23DDC6440()
{
  return MEMORY[0x24BDF5418]();
}

uint64_t sub_23DDC644C()
{
  return MEMORY[0x24BDF5430]();
}

uint64_t sub_23DDC6458()
{
  return MEMORY[0x24BDF5440]();
}

uint64_t sub_23DDC6464()
{
  return MEMORY[0x24BDF5478]();
}

uint64_t sub_23DDC6470()
{
  return MEMORY[0x24BDF5490]();
}

uint64_t sub_23DDC647C()
{
  return MEMORY[0x24BDF54A0]();
}

uint64_t sub_23DDC6488()
{
  return MEMORY[0x24BDF54A8]();
}

uint64_t sub_23DDC6494()
{
  return MEMORY[0x24BDF54B0]();
}

uint64_t sub_23DDC64A0()
{
  return MEMORY[0x24BEE5618]();
}

uint64_t sub_23DDC64AC()
{
  return MEMORY[0x24BEE5648]();
}

uint64_t sub_23DDC64B8()
{
  return MEMORY[0x24BDD22E0]();
}

uint64_t sub_23DDC64C4()
{
  return MEMORY[0x24BDD22E8]();
}

uint64_t sub_23DDC64D0()
{
  return MEMORY[0x24BDD22F0]();
}

uint64_t sub_23DDC64DC()
{
  return MEMORY[0x24BDD2300]();
}

uint64_t sub_23DDC64E8()
{
  return MEMORY[0x24BDD2308]();
}

uint64_t sub_23DDC64F4()
{
  return MEMORY[0x24BDD2310]();
}

uint64_t sub_23DDC6500()
{
  return MEMORY[0x24BDD2420]();
}

uint64_t sub_23DDC650C()
{
  return MEMORY[0x24BDD2430]();
}

uint64_t sub_23DDC6518()
{
  return MEMORY[0x24BDD2448]();
}

uint64_t sub_23DDC6524()
{
  return MEMORY[0x24BDD2480]();
}

uint64_t sub_23DDC6530()
{
  return MEMORY[0x24BDD2488]();
}

uint64_t sub_23DDC653C()
{
  return MEMORY[0x24BDFACC0]();
}

uint64_t sub_23DDC6548()
{
  return MEMORY[0x24BDFADC0]();
}

uint64_t sub_23DDC6554()
{
  return MEMORY[0x24BDFADC8]();
}

uint64_t sub_23DDC6560()
{
  return MEMORY[0x24BDFADD0]();
}

uint64_t sub_23DDC656C()
{
  return MEMORY[0x24BDFADE0]();
}

uint64_t sub_23DDC6578()
{
  return MEMORY[0x24BDFADF8]();
}

uint64_t sub_23DDC6584()
{
  return MEMORY[0x24BDFAE00]();
}

uint64_t sub_23DDC6590()
{
  return MEMORY[0x24BDFAF10]();
}

uint64_t sub_23DDC659C()
{
  return MEMORY[0x24BDFAFD8]();
}

uint64_t sub_23DDC65A8()
{
  return MEMORY[0x24BDFAFE0]();
}

uint64_t sub_23DDC65B4()
{
  return MEMORY[0x24BDFB040]();
}

uint64_t sub_23DDC65C0()
{
  return MEMORY[0x24BDFB0B8]();
}

uint64_t sub_23DDC65CC()
{
  return MEMORY[0x24BDFB158]();
}

uint64_t sub_23DDC65D8()
{
  return MEMORY[0x24BDFB160]();
}

uint64_t sub_23DDC65E4()
{
  return MEMORY[0x24BDFB180]();
}

uint64_t sub_23DDC65F0()
{
  return MEMORY[0x24BDFB198]();
}

uint64_t sub_23DDC65FC()
{
  return MEMORY[0x24BDFB268]();
}

uint64_t sub_23DDC6608()
{
  return MEMORY[0x24BDFB270]();
}

uint64_t sub_23DDC6614()
{
  return MEMORY[0x24BDFB318]();
}

uint64_t sub_23DDC6620()
{
  return MEMORY[0x24BDFB4D0]();
}

uint64_t sub_23DDC662C()
{
  return MEMORY[0x24BDFB4D8]();
}

uint64_t sub_23DDC6638()
{
  return MEMORY[0x24BDCF7F0]();
}

uint64_t sub_23DDC6644()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_23DDC6650()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_23DDC665C()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t sub_23DDC6668()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_23DDC6674()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_23DDC6680()
{
  return MEMORY[0x24BEE0620]();
}

uint64_t sub_23DDC668C()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_23DDC6698()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t sub_23DDC66A4()
{
  return MEMORY[0x24BEE07F0]();
}

uint64_t sub_23DDC66B0()
{
  return MEMORY[0x24BEE08B8]();
}

uint64_t sub_23DDC66BC()
{
  return MEMORY[0x24BEE08D0]();
}

uint64_t sub_23DDC66C8()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_23DDC66D4()
{
  return MEMORY[0x24BDCF8D8]();
}

uint64_t sub_23DDC66E0()
{
  return MEMORY[0x24BDCF8F0]();
}

uint64_t sub_23DDC66EC()
{
  return MEMORY[0x24BDCF908]();
}

uint64_t sub_23DDC66F8()
{
  return MEMORY[0x24BDCF910]();
}

uint64_t sub_23DDC6704()
{
  return MEMORY[0x24BDCF930]();
}

uint64_t sub_23DDC6710()
{
  return MEMORY[0x24BDCF938]();
}

uint64_t sub_23DDC671C()
{
  return MEMORY[0x24BDCF948]();
}

uint64_t sub_23DDC6728()
{
  return MEMORY[0x24BDCF968]();
}

uint64_t sub_23DDC6734()
{
  return MEMORY[0x24BDCF978]();
}

uint64_t sub_23DDC6740()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_23DDC674C()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_23DDC6758()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_23DDC6764()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_23DDC6770()
{
  return MEMORY[0x24BDCFB20]();
}

uint64_t sub_23DDC677C()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_23DDC6788()
{
  return MEMORY[0x24BEE0A10]();
}

uint64_t sub_23DDC6794()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_23DDC67A0()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_23DDC67AC()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_23DDC67B8()
{
  return MEMORY[0x24BEE0E00]();
}

uint64_t sub_23DDC67C4()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t sub_23DDC67D0()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_23DDC67DC()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_23DDC67E8()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_23DDC67F4()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_23DDC6800()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_23DDC680C()
{
  return MEMORY[0x24BEE6830]();
}

uint64_t sub_23DDC6818()
{
  return MEMORY[0x24BEE68C8]();
}

uint64_t sub_23DDC6824()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t sub_23DDC6830()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t sub_23DDC683C()
{
  return MEMORY[0x24BEE6940]();
}

uint64_t sub_23DDC6848()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_23DDC6854()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_23DDC6860()
{
  return MEMORY[0x24BEE6AD0]();
}

uint64_t sub_23DDC686C()
{
  return MEMORY[0x24BEE6CE0]();
}

uint64_t sub_23DDC6878()
{
  return MEMORY[0x24BEE6CE8]();
}

uint64_t sub_23DDC6884()
{
  return MEMORY[0x24BEE6D20]();
}

uint64_t sub_23DDC6890()
{
  return MEMORY[0x24BEE13A8]();
}

uint64_t sub_23DDC689C()
{
  return MEMORY[0x24BDCFCC0]();
}

uint64_t sub_23DDC68A8()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_23DDC68B4()
{
  return MEMORY[0x24BEE1B68]();
}

uint64_t sub_23DDC68C0()
{
  return MEMORY[0x24BE40690]();
}

uint64_t sub_23DDC68CC()
{
  return MEMORY[0x24BE40698]();
}

uint64_t sub_23DDC68D8()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_23DDC68E4()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_23DDC68F0()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_23DDC68FC()
{
  return MEMORY[0x24BDD2530]();
}

uint64_t sub_23DDC6908()
{
  return MEMORY[0x24BDBD7E0]();
}

uint64_t sub_23DDC6914()
{
  return MEMORY[0x24BE406A0]();
}

uint64_t sub_23DDC6920()
{
  return MEMORY[0x24BE406B0]();
}

uint64_t sub_23DDC692C()
{
  return MEMORY[0x24BE406B8]();
}

uint64_t sub_23DDC6938()
{
  return MEMORY[0x24BEE5770]();
}

uint64_t sub_23DDC6944()
{
  return MEMORY[0x24BDD0010]();
}

uint64_t sub_23DDC6950()
{
  return MEMORY[0x24BDD0028]();
}

uint64_t sub_23DDC695C()
{
  return MEMORY[0x24BDD0058]();
}

uint64_t sub_23DDC6968()
{
  return MEMORY[0x24BEE5BB8]();
}

uint64_t sub_23DDC6974()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_23DDC6980()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_23DDC698C()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_23DDC6998()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_23DDC69A4()
{
  return MEMORY[0x24BEE1F68]();
}

uint64_t sub_23DDC69B0()
{
  return MEMORY[0x24BEE1F70]();
}

uint64_t sub_23DDC69BC()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t sub_23DDC69C8()
{
  return MEMORY[0x24BDD0660]();
}

uint64_t sub_23DDC69D4()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_23DDC69E0()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_23DDC69EC()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_23DDC69F8()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_23DDC6A04()
{
  return MEMORY[0x24BEE24D8]();
}

uint64_t sub_23DDC6A10()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_23DDC6A1C()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_23DDC6A28()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_23DDC6A34()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_23DDC6A40()
{
  return MEMORY[0x24BEE2700]();
}

uint64_t sub_23DDC6A4C()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_23DDC6A58()
{
  return MEMORY[0x24BEE2798]();
}

uint64_t sub_23DDC6A64()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_23DDC6A70()
{
  return MEMORY[0x24BEE6DC8]();
}

uint64_t sub_23DDC6A7C()
{
  return MEMORY[0x24BEE6E08]();
}

uint64_t sub_23DDC6A88()
{
  return MEMORY[0x24BEE6E10]();
}

uint64_t sub_23DDC6A94()
{
  return MEMORY[0x24BEE2AE0]();
}

uint64_t sub_23DDC6AA0()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_23DDC6AAC()
{
  return MEMORY[0x24BEE2F08]();
}

uint64_t sub_23DDC6AB8()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_23DDC6AC4()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_23DDC6AD0()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_23DDC6ADC()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_23DDC6AE8()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_23DDC6AF4()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_23DDC6B00()
{
  return MEMORY[0x24BEE30A0]();
}

uint64_t sub_23DDC6B0C()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_23DDC6B18()
{
  return MEMORY[0x24BEE30B8]();
}

uint64_t sub_23DDC6B24()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_23DDC6B30()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_23DDC6B3C()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_23DDC6B48()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_23DDC6B54()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_23DDC6B60()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_23DDC6B6C()
{
  return MEMORY[0x24BEE3360]();
}

uint64_t sub_23DDC6B78()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_23DDC6B84()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_23DDC6B90()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_23DDC6B9C()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_23DDC6BA8()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_23DDC6BB4()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_23DDC6BC0()
{
  return MEMORY[0x24BEE34B0]();
}

uint64_t sub_23DDC6BCC()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_23DDC6BD8()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_23DDC6BE4()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_23DDC6BF0()
{
  return MEMORY[0x24BEE3598]();
}

uint64_t sub_23DDC6BFC()
{
  return MEMORY[0x24BEE7040]();
}

uint64_t sub_23DDC6C08()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_23DDC6C14()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_23DDC6C20()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_23DDC6C2C()
{
  return MEMORY[0x24BEE7110]();
}

uint64_t sub_23DDC6C38()
{
  return MEMORY[0x24BEE7118]();
}

uint64_t sub_23DDC6C44()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t sub_23DDC6C50()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_23DDC6C5C()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_23DDC6C68()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_23DDC6C74()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_23DDC6C80()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_23DDC6C8C()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_23DDC6C98()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_23DDC6CA4()
{
  return MEMORY[0x24BEE4698]();
}

uint64_t sub_23DDC6CB0()
{
  return MEMORY[0x24BDD0960]();
}

uint64_t sub_23DDC6CBC()
{
  return MEMORY[0x24BDD0970]();
}

uint64_t sub_23DDC6CC8()
{
  return MEMORY[0x24BDD0AF0]();
}

uint64_t sub_23DDC6CD4()
{
  return MEMORY[0x24BDD0B20]();
}

uint64_t sub_23DDC6CE0()
{
  return MEMORY[0x24BE40720]();
}

uint64_t sub_23DDC6CEC()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_23DDC6CF8()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_23DDC6D04()
{
  return MEMORY[0x24BEE4A98]();
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x24BDBEE20](path);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x24BDBEE80]();
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x24BDBEFE0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF000]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF008]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _HKGenerateDefaultUnitForQuantityType()
{
  return MEMORY[0x24BDD4330]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x24BDAC890](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x24BDAD220](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAE3F0](__x, __y);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x24BEE4D20]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x24BEE4D28]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return MEMORY[0x24BEE4DC8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x24BEE4DF0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x24BEE4E00]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

