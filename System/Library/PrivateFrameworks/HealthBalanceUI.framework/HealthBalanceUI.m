uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void type metadata accessor for HKMCPregnancyState(uint64_t a1)
{
  sub_23DCF51D0(a1, &qword_256CFC150);
}

uint64_t sub_23DCF4950@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  char *v21;
  __int128 v22;
  char *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v29 = a1;
  sub_23DDC6350();
  v2 = MEMORY[0x24BDF48E8];
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF5820();
  v6 = v5;
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF58B4(0);
  v10 = v9;
  MEMORY[0x24BDAC7A8]();
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF58D0(0);
  v14 = v13;
  MEMORY[0x24BDAC7A8]();
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *MEMORY[0x24BDEEB68];
  v18 = sub_23DDC5DE0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v4, v17, v18);
  v19 = *(_QWORD *)(v1 + 96);
  sub_23DCF58EC((uint64_t)v4, (uint64_t)v8, (uint64_t (*)(_QWORD))v2);
  *(_QWORD *)&v8[*(int *)(v6 + 52)] = v19;
  *(_WORD *)&v8[*(int *)(v6 + 56)] = 256;
  swift_retain();
  sub_23DCF59A8((uint64_t)v4, (uint64_t (*)(_QWORD))v2);
  v20 = *(double *)(v1 + 8) - *(double *)v1;
  sub_23DDC63D4();
  sub_23DDC5B34();
  sub_23DCF58EC((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DCF5820);
  v21 = &v12[*(int *)(v10 + 36)];
  v22 = v31;
  *(_OWORD *)v21 = v30;
  *((_OWORD *)v21 + 1) = v22;
  *((_OWORD *)v21 + 2) = v32;
  sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DCF5820);
  sub_23DCF58EC((uint64_t)v12, (uint64_t)v16, (uint64_t (*)(_QWORD))sub_23DCF58B4);
  v23 = &v16[*(int *)(v14 + 36)];
  *(_QWORD *)v23 = 0;
  *((double *)v23 + 1) = v20 * 0.5;
  sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DCF58B4);
  v24 = sub_23DCF4BD4();
  v25 = v29;
  sub_23DCF58EC((uint64_t)v16, v29, (uint64_t (*)(_QWORD))sub_23DCF58D0);
  sub_23DCF5930(0);
  *(double *)(v25 + *(int *)(v26 + 36)) = v24;
  return sub_23DCF59A8((uint64_t)v16, (uint64_t (*)(_QWORD))sub_23DCF58D0);
}

double sub_23DCF4BD4()
{
  double *v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  uint64_t v7;

  v1 = *((_QWORD *)v0 + 2);
  v2 = v0[6];
  if (v1)
  {
    v3 = *((_QWORD *)v0 + 3);
  }
  else
  {
    if (qword_256CFC0B8 != -1)
      swift_once();
    v4 = qword_256D06578;
    swift_getKeyPath();
    sub_23DCF535C((unint64_t *)&qword_256CFC1C0, (uint64_t (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState, (uint64_t)&unk_23DDCAF88);
    sub_23DDC5210();
    swift_release();
    v3 = *(_QWORD *)(v4 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v5 = *(_QWORD *)(v3 + 16);
  sub_23DCF59EC(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = 0.0;
  if (v5 >= 2)
  {
    if (v1)
    {
      v6 = v2;
    }
    else
    {
      if (qword_256CFC0B8 != -1)
        swift_once();
      v7 = qword_256D06578;
      swift_getKeyPath();
      sub_23DCF535C((unint64_t *)&qword_256CFC1C0, (uint64_t (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState, (uint64_t)&unk_23DDCAF88);
      sub_23DDC5210();
      swift_release();
      v6 = *(double *)(v7 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_23DCF59EC(v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_23DCF4E20()
{
  return sub_23DDC6140();
}

uint64_t sub_23DCF4E38@<X0>(uint64_t a1@<X8>)
{
  return sub_23DCF4950(a1);
}

uint64_t sub_23DCF4E80(uint64_t a1, uint64_t a2)
{
  return sub_23DCF4FC8(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t sub_23DCF4E8C(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_23DDC674C();
  *a2 = 0;
  return result;
}

uint64_t sub_23DCF4F00(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_23DDC6758();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_23DCF4F7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_23DDC6764();
  v2 = sub_23DDC6740();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_23DCF4FBC(uint64_t a1, uint64_t a2)
{
  return sub_23DCF4FC8(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_23DCF4FC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_23DDC6764();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_23DCF5004()
{
  sub_23DDC6764();
  sub_23DDC6794();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DCF5044()
{
  uint64_t v0;

  sub_23DDC6764();
  sub_23DDC6C50();
  sub_23DDC6794();
  v0 = sub_23DDC6C80();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23DCF50B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_23DDC6764();
  v2 = v1;
  if (v0 == sub_23DDC6764() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_23DDC6C08();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_23DCF51D0(a1, &qword_256CFC158);
}

void type metadata accessor for HKFeatureIdentifier(uint64_t a1)
{
  sub_23DCF51D0(a1, &qword_256CFC160);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_23DCF5174(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23DCF5194(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_23DCF51D0(a1, &qword_256CFC168);
}

void sub_23DCF51D0(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_23DCF5214@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_23DDC6740();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_23DCF5258@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23DDC6764();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23DCF5280()
{
  sub_23DCF535C(&qword_256CFC188, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DDC74F0);
  sub_23DCF535C(&qword_256CFC190, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DDC7450);
  return sub_23DDC6B24();
}

uint64_t sub_23DCF5304()
{
  return sub_23DCF535C(&qword_256CFC170, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DDC7418);
}

uint64_t sub_23DCF5330()
{
  return sub_23DCF535C(&qword_256CFC178, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DDC73F0);
}

uint64_t sub_23DCF535C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x242643BD8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DCF539C()
{
  return sub_23DCF535C(&qword_256CFC180, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DDC7480);
}

uint64_t initializeBufferWithCopyOfBuffer for OvernightMetricsChartAnimationValues.IndividualMetricsState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for OvernightMetricsChartLozenge(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t initializeWithCopy for OvernightMetricsChartLozenge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v8;
  }
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for OvernightMetricsChartLozenge(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v7 = a2 + 2;
  v6 = a2[2];
  if (v5)
  {
    if (v6)
    {
      a1[2] = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
    }
    else
    {
      sub_23DCF5648(v4);
      *(_OWORD *)v4 = *(_OWORD *)v7;
      v9 = *((_OWORD *)v7 + 2);
      v8 = *((_OWORD *)v7 + 3);
      v10 = *((_OWORD *)v7 + 1);
      *(_QWORD *)(v4 + 64) = v7[8];
      *(_OWORD *)(v4 + 32) = v9;
      *(_OWORD *)(v4 + 48) = v8;
      *(_OWORD *)(v4 + 16) = v10;
    }
  }
  else if (v6)
  {
    a1[2] = v6;
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)v7;
    v11 = *((_OWORD *)a2 + 2);
    v12 = *((_OWORD *)a2 + 3);
    v13 = *((_OWORD *)a2 + 4);
    *(_QWORD *)(v4 + 64) = a2[10];
    *(_OWORD *)(v4 + 32) = v12;
    *(_OWORD *)(v4 + 48) = v13;
    *(_OWORD *)(v4 + 16) = v11;
  }
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23DCF5648(uint64_t a1)
{
  destroy for OvernightMetricsChartAnimationValues.IndividualMetricsState();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for OvernightMetricsChartLozenge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = a1 + 16;
  v6 = a2 + 16;
  v5 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_5;
  if (!v5)
  {
    sub_23DCF5648(v4);
LABEL_5:
    v8 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v4 + 48) = v8;
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(v6 + 64);
    v9 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v6;
    *(_OWORD *)(v4 + 16) = v9;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
LABEL_6:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartLozenge(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 96);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartLozenge(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 96) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartLozenge()
{
  return &type metadata for OvernightMetricsChartLozenge;
}

uint64_t sub_23DCF5810()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23DCF5820()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC198)
  {
    sub_23DDC6350();
    sub_23DCF535C(&qword_256CFC1A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF48E8], MEMORY[0x24BDF48D8]);
    v0 = sub_23DDC5A80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC198);
  }
}

void sub_23DCF58B4(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFC1A8, (void (*)(uint64_t))sub_23DCF5820);
}

void sub_23DCF58D0(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFC1B0, sub_23DCF58B4);
}

uint64_t sub_23DCF58EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_23DCF5930(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFC1B8, sub_23DCF58D0);
}

void sub_23DCF594C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DDC5C0C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_23DCF59A8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23DCF59EC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23DCF5A18()
{
  return sub_23DCF5A70(&qword_256CFC1C8, (uint64_t (*)(uint64_t))sub_23DCF5930, sub_23DCF5A4C, MEMORY[0x24BDECC38]);
}

uint64_t sub_23DCF5A4C()
{
  return sub_23DCF5A70(&qword_256CFC1D0, (uint64_t (*)(uint64_t))sub_23DCF58D0, (uint64_t (*)(void))sub_23DCF5AD8, MEMORY[0x24BDEC438]);
}

uint64_t sub_23DCF5A70(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DCF5AD8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFC1D8;
  if (!qword_256CFC1D8)
  {
    sub_23DCF58B4(255);
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFC1E0, (uint64_t (*)(uint64_t))sub_23DCF5820, MEMORY[0x24BDEB358]);
    v3[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFC1D8);
  }
  return result;
}

uint64_t BaselineRelativeChartPoint.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DDC512C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t BaselineRelativeChartPoint.init(date:value:color:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = *a2;
  v8 = *((_BYTE *)a2 + 8);
  v9 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a4, a1, v9);
  result = type metadata accessor for BaselineRelativeChartPoint();
  v11 = a4 + *(int *)(result + 20);
  *(_QWORD *)v11 = v7;
  *(_BYTE *)(v11 + 8) = v8;
  *(_QWORD *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t type metadata accessor for BaselineRelativeChartPoint()
{
  uint64_t result;

  result = qword_256CFC248;
  if (!qword_256CFC248)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t static BaselineRelativeChartPoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  char v6;
  double *v7;
  int v8;

  if ((sub_23DDC5108() & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for BaselineRelativeChartPoint() + 20);
  v5 = (double *)(a1 + v4);
  v6 = *(_BYTE *)(a1 + v4 + 8);
  v7 = (double *)(a2 + v4);
  v8 = *(unsigned __int8 *)(a2 + v4 + 8);
  if ((v6 & 1) != 0)
  {
    if (!v8)
      return 0;
  }
  else
  {
    if (*v5 != *v7)
      LOBYTE(v8) = 1;
    if ((v8 & 1) != 0)
      return 0;
  }
  return sub_23DDC61E8();
}

uint64_t sub_23DCF5CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double *v7;
  char v8;
  double *v9;
  int v10;

  if ((sub_23DDC5108() & 1) == 0)
    return 0;
  v6 = *(int *)(a3 + 20);
  v7 = (double *)(a1 + v6);
  v8 = *(_BYTE *)(a1 + v6 + 8);
  v9 = (double *)(a2 + v6);
  v10 = *(unsigned __int8 *)(a2 + v6 + 8);
  if ((v8 & 1) != 0)
  {
    if (!v10)
      return 0;
  }
  else
  {
    if (*v7 != *v9)
      LOBYTE(v10) = 1;
    if ((v10 & 1) != 0)
      return 0;
  }
  return sub_23DDC61E8();
}

unint64_t sub_23DCF5D4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFC1E8;
  if (!qword_256CFC1E8)
  {
    v1 = sub_23DDC512C();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDCE930], v1);
    atomic_store(result, (unint64_t *)&qword_256CFC1E8);
  }
  return result;
}

uint64_t sub_23DCF5D94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DDC512C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t *initializeBufferWithCopyOfBuffer for BaselineRelativeChartPoint(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_23DDC512C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for BaselineRelativeChartPoint(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for BaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for BaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for BaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BaselineRelativeChartPoint()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DCF60AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_23DDC512C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for BaselineRelativeChartPoint()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DCF6134(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23DDC512C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_23DCF61AC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC512C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *sub_23DCF622C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v3;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  int *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, int *);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v79;
  char *v80;
  char *v81;
  int *v82;

  v3 = a2;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC5330();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v3, v7);
    v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(_QWORD *)((char *)a1 + v8[5]) = *(_QWORD *)((char *)v3 + v8[5]);
    v9 = v8[6];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)v3 + v9);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v10 = *v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = sub_23DDC55A0();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14))
      {
        sub_23DCF6898(0, &qword_254326A70, (void (*)(uint64_t))MEMORY[0x24BE40438]);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v15 + 16))(v10, v11, v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
    v17 = v8[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)v3 + v17;
    v20 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v21 = *((_QWORD *)v20 - 1);
    v82 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = sub_23DDC512C();
      v24 = v21;
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      v25(v18, v19, v23);
      v26 = v20[5];
      v79 = a1;
      v27 = v3;
      v28 = v8;
      v29 = &v18[v26];
      v30 = &v19[v26];
      v25(&v18[v26], &v19[v26], v23);
      sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
      v25(&v29[*(int *)(v31 + 36)], &v30[*(int *)(v31 + 36)], v23);
      v32 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v29[v32[5]] = *(_QWORD *)&v30[v32[5]];
      *(_QWORD *)&v29[v32[6]] = *(_QWORD *)&v30[v32[6]];
      *(_QWORD *)&v29[v32[7]] = *(_QWORD *)&v30[v32[7]];
      v33 = v20[6];
      v34 = &v18[v33];
      v35 = &v19[v33];
      *(_OWORD *)v34 = *(_OWORD *)v35;
      v34[16] = v35[16];
      v18[v20[7]] = v19[v20[7]];
      v18[v20[8]] = v19[v20[8]];
      v18[v20[9]] = v19[v20[9]];
      v36 = v20[10];
      v37 = &v18[v36];
      v38 = &v19[v36];
      v39 = *((_QWORD *)v38 + 1);
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = v39;
      v40 = v20[11];
      v41 = &v18[v40];
      v42 = &v19[v40];
      v43 = *((_QWORD *)v42 + 1);
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = v43;
      v44 = *(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8 = v28;
      v3 = v27;
      a1 = v79;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44(v18, 0, 1, v20);
    }
    v45 = v8[8];
    v46 = (char *)a1 + v45;
    v47 = (char *)v3 + v45;
    *(_QWORD *)((char *)a1 + v45) = *(_QWORD *)((char *)v3 + v45);
    v48 = type metadata accessor for OvernightMetricsChartPointCollection();
    v49 = *(int *)(v48 + 20);
    v80 = &v46[v49];
    v50 = &v47[v49];
    v51 = (char *)a1;
    v52 = v8;
    v53 = sub_23DDC51E0();
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
    swift_bridgeObjectRetain();
    v54(v80, v50, v53);
    *(_QWORD *)&v46[*(int *)(v48 + 24)] = *(_QWORD *)&v47[*(int *)(v48 + 24)];
    *(_QWORD *)&v51[v52[9]] = *(_QWORD *)((char *)v3 + v52[9]);
    *(_QWORD *)&v51[v52[10]] = *(_QWORD *)((char *)v3 + v52[10]);
    v55 = v52[11];
    v56 = &v51[v55];
    v57 = (char *)v3 + v55;
    v58 = sub_23DDC512C();
    v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59(v56, v57, v58);
    sub_23DCF6834(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE08B8]);
    v61 = v60;
    v59(&v56[*(int *)(v60 + 36)], &v57[*(int *)(v60 + 36)], v58);
    v62 = v52[12];
    v63 = &v51[v62];
    v64 = (char *)v3 + v62;
    v59(&v51[v62], (char *)v3 + v62, v58);
    v59(&v63[*(int *)(v61 + 36)], &v64[*(int *)(v61 + 36)], v58);
    *(_QWORD *)&v51[v52[13]] = *(_QWORD *)((char *)v3 + v52[13]);
    v65 = v52[14];
    v13 = v51;
    *(_QWORD *)&v51[v65] = *(_QWORD *)((char *)v3 + v65);
    v66 = type metadata accessor for BalanceWidgetViewModel();
    v67 = *(int *)(v66 + 20);
    v68 = &v51[v67];
    v81 = (char *)v3 + v67;
    v69 = sub_23DDC527C();
    v70 = v3;
    v71 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v71(v68, v81, v69);
    v51[*(int *)(v66 + 24)] = *((_BYTE *)v70 + *(int *)(v66 + 24));
    v59(&v51[v82[5]], (char *)v70 + v82[5], v58);
    v72 = v82[6];
    v73 = &v51[v72];
    v74 = (char *)v70 + v72;
    v75 = sub_23DDC6608();
    v76 = *(_QWORD *)(v75 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
    {
      sub_23DCF6898(0, &qword_254326400, (void (*)(uint64_t))MEMORY[0x24BDFB270]);
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v73, v74, v75);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
    }
    v59(&v13[v82[7]], (char *)v70 + v82[7], v58);
  }
  return v13;
}

unint64_t sub_23DCF67EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254326A30;
  if (!qword_254326A30)
  {
    v1 = sub_23DDC512C();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDCE948], v1);
    atomic_store(result, (unint64_t *)&qword_254326A30);
  }
  return result;
}

void sub_23DCF6834(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = sub_23DDC512C();
    v7 = sub_23DCF67EC();
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_23DCF6898(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DDC6980();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_23DCF68E4(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v29)(uint64_t, uint64_t);

  v4 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  v6 = a1 + v5[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = sub_23DDC55A0();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  v9 = a1 + v5[7];
  v10 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = sub_23DDC512C();
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v9, v11);
    v13 = v9 + *(int *)(v10 + 20);
    v12(v13, v11);
    sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
    v12(v13 + *(int *)(v14 + 36), v11);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = a1 + v5[8];
  swift_bridgeObjectRelease();
  v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v17 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = a1 + v5[11];
  v19 = sub_23DDC512C();
  v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v29(v18, v19);
  sub_23DCF6834(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE08B8]);
  v21 = v20;
  v29(v18 + *(int *)(v20 + 36), v19);
  v22 = a1 + v5[12];
  v29(v22, v19);
  v29(v22 + *(int *)(v21 + 36), v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = a1 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  v24 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  v29(a1 + a2[5], v19);
  v25 = a1 + a2[6];
  v26 = sub_23DDC6608();
  v27 = *(_QWORD *)(v26 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
  return ((uint64_t (*)(uint64_t, uint64_t))v29)(a1 + a2[7], v19);
}

uint64_t sub_23DCF6C34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  int *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, _QWORD, uint64_t, int *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  void *v69;
  const void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v9 = *v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = sub_23DDC55A0();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_23DCF6898(0, &qword_254326A70, (void (*)(uint64_t))MEMORY[0x24BE40438]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  swift_storeEnumTagMultiPayload();
  v14 = v7[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  v78 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = sub_23DDC512C();
    v21 = v18;
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v22(v15, v16, v20);
    v23 = v17[5];
    v75 = a1;
    v24 = a2;
    v25 = v7;
    v26 = &v15[v23];
    v27 = &v16[v23];
    v22(&v15[v23], &v16[v23], v20);
    sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
    v22(&v26[*(int *)(v28 + 36)], &v27[*(int *)(v28 + 36)], v20);
    v29 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v26[v29[5]] = *(_QWORD *)&v27[v29[5]];
    *(_QWORD *)&v26[v29[6]] = *(_QWORD *)&v27[v29[6]];
    *(_QWORD *)&v26[v29[7]] = *(_QWORD *)&v27[v29[7]];
    v30 = v17[6];
    v31 = &v15[v30];
    v32 = &v16[v30];
    *(_OWORD *)v31 = *(_OWORD *)v32;
    v31[16] = v32[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v33 = v17[10];
    v34 = &v15[v33];
    v35 = &v16[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = v17[11];
    v38 = &v15[v37];
    v39 = &v16[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v41 = *(void (**)(char *, _QWORD, uint64_t, int *))(v21 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = v25;
    a2 = v24;
    a1 = v75;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41(v15, 0, 1, v17);
  }
  v42 = v7[8];
  v43 = a1 + v42;
  v44 = a2 + v42;
  *(_QWORD *)(a1 + v42) = *(_QWORD *)(a2 + v42);
  v45 = type metadata accessor for OvernightMetricsChartPointCollection();
  v46 = *(int *)(v45 + 20);
  v76 = v43 + v46;
  v47 = v44 + v46;
  v48 = v7;
  v49 = sub_23DDC51E0();
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain();
  v50(v76, v47, v49);
  *(_QWORD *)(v43 + *(int *)(v45 + 24)) = *(_QWORD *)(v44 + *(int *)(v45 + 24));
  *(_QWORD *)(a1 + v48[9]) = *(_QWORD *)(a2 + v48[9]);
  *(_QWORD *)(a1 + v48[10]) = *(_QWORD *)(a2 + v48[10]);
  v51 = v48[11];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = sub_23DDC512C();
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55(v52, v53, v54);
  sub_23DCF6834(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE08B8]);
  v57 = v56;
  v55(v52 + *(int *)(v56 + 36), v53 + *(int *)(v56 + 36), v54);
  v58 = v48[12];
  v59 = a1 + v58;
  v60 = a2 + v58;
  v55(a1 + v58, a2 + v58, v54);
  v55(v59 + *(int *)(v57 + 36), v60 + *(int *)(v57 + 36), v54);
  *(_QWORD *)(a1 + v48[13]) = *(_QWORD *)(a2 + v48[13]);
  *(_QWORD *)(a1 + v48[14]) = *(_QWORD *)(a2 + v48[14]);
  v61 = type metadata accessor for BalanceWidgetViewModel();
  v62 = *(int *)(v61 + 20);
  v63 = a1 + v62;
  v77 = a2 + v62;
  v64 = sub_23DDC527C();
  v65 = a1;
  v66 = a2;
  v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v67(v63, v77, v64);
  *(_BYTE *)(v65 + *(int *)(v61 + 24)) = *(_BYTE *)(v66 + *(int *)(v61 + 24));
  v55(v65 + v78[5], v66 + v78[5], v54);
  v68 = v78[6];
  v69 = (void *)(v65 + v68);
  v70 = (const void *)(v66 + v68);
  v71 = sub_23DDC6608();
  v72 = *(_QWORD *)(v71 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
  {
    sub_23DCF6898(0, &qword_254326400, (void (*)(uint64_t))MEMORY[0x24BDFB270]);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v72 + 16))(v69, v70, v71);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
  }
  v55(v65 + v78[7], v66 + v78[7], v54);
  return v65;
}

uint64_t sub_23DCF71C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(_BYTE *, uint64_t, int *);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(void *, uint64_t, uint64_t);
  int v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v8 = v7[6];
    v9 = (_QWORD *)(a1 + v8);
    v10 = (_QWORD *)(a2 + v8);
    sub_23DCF59A8(a1 + v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v9 = *v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      v11 = sub_23DDC55A0();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        sub_23DCF6898(0, &qword_254326A70, (void (*)(uint64_t))MEMORY[0x24BE40438]);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  v14 = v7[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  v92 = a3;
  if (v20)
  {
    if (v21)
      goto LABEL_13;
    v23 = sub_23DDC512C();
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    v24(v15, v16, v23);
    v91 = v18;
    v25 = v24;
    v26 = v17[5];
    v27 = &v15[v26];
    v28 = &v16[v26];
    v25(&v15[v26], &v16[v26], v23);
    sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
    v25(&v27[*(int *)(v29 + 36)], &v28[*(int *)(v29 + 36)], v23);
    v30 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v27[v30[5]] = *(_QWORD *)&v28[v30[5]];
    *(_QWORD *)&v27[v30[6]] = *(_QWORD *)&v28[v30[6]];
    *(_QWORD *)&v27[v30[7]] = *(_QWORD *)&v28[v30[7]];
    v31 = v17[6];
    v32 = &v15[v31];
    v33 = &v16[v31];
    v34 = v33[16];
    *(_OWORD *)v32 = *(_OWORD *)v33;
    v32[16] = v34;
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v35 = v17[10];
    v36 = &v15[v35];
    v37 = &v16[v35];
    *v36 = *v37;
    v36[1] = v37[1];
    v38 = v17[11];
    v39 = &v15[v38];
    v40 = &v16[v38];
    *v39 = *v40;
    v39[1] = v40[1];
    v41 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v91 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3 = v92;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41(v15, 0, 1, v17);
  }
  else
  {
    if (v21)
    {
      sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
      sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      goto LABEL_16;
    }
    v42 = sub_23DDC512C();
    v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 24);
    v43(v15, v16, v42);
    v44 = v17[5];
    v45 = &v15[v44];
    v46 = &v16[v44];
    v43(&v15[v44], &v16[v44], v42);
    sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
    v43(&v45[*(int *)(v47 + 36)], &v46[*(int *)(v47 + 36)], v42);
    v48 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v45[v48[5]] = *(_QWORD *)&v46[v48[5]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v45[v48[6]] = *(_QWORD *)&v46[v48[6]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v45[v48[7]] = *(_QWORD *)&v46[v48[7]];
    a3 = v92;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v49 = v17[6];
    v50 = &v15[v49];
    v51 = &v16[v49];
    v52 = *(_OWORD *)v51;
    v50[16] = v51[16];
    *(_OWORD *)v50 = v52;
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v53 = v17[10];
    v54 = &v15[v53];
    v55 = &v16[v53];
    *v54 = *v55;
    v54[1] = v55[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v56 = v17[11];
    v57 = &v15[v56];
    v58 = &v16[v56];
    *v57 = *v58;
    v57[1] = v58[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_16:
  v59 = v7[8];
  v60 = a1 + v59;
  v61 = a2 + v59;
  *(_QWORD *)(a1 + v59) = *(_QWORD *)(a2 + v59);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v62 = type metadata accessor for OvernightMetricsChartPointCollection();
  v63 = *(int *)(v62 + 20);
  v64 = v60 + v63;
  v65 = v61 + v63;
  v66 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 24))(v64, v65, v66);
  *(_QWORD *)(v60 + *(int *)(v62 + 24)) = *(_QWORD *)(v61 + *(int *)(v62 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v67 = v7[11];
  v68 = a1 + v67;
  v69 = a2 + v67;
  v70 = sub_23DDC512C();
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 24);
  v71(v68, v69, v70);
  sub_23DCF6834(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE08B8]);
  v73 = v72;
  v71(v68 + *(int *)(v72 + 36), v69 + *(int *)(v72 + 36), v70);
  v74 = v7[12];
  v75 = a1 + v74;
  v76 = a2 + v74;
  v71(a1 + v74, a2 + v74, v70);
  v71(v75 + *(int *)(v73 + 36), v76 + *(int *)(v73 + 36), v70);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v77 = type metadata accessor for BalanceWidgetViewModel();
  v78 = *(int *)(v77 + 20);
  v79 = a1 + v78;
  v80 = a2 + v78;
  v81 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 24))(v79, v80, v81);
  *(_BYTE *)(a1 + *(int *)(v77 + 24)) = *(_BYTE *)(a2 + *(int *)(v77 + 24));
  v71(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v70);
  v82 = *(int *)(a3 + 24);
  v83 = (void *)(a1 + v82);
  v84 = (void *)(a2 + v82);
  v85 = sub_23DDC6608();
  v86 = *(_QWORD *)(v85 - 8);
  v87 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v86 + 48);
  LODWORD(v77) = v87(v83, 1, v85);
  v88 = v87(v84, 1, v85);
  if (!(_DWORD)v77)
  {
    if (!v88)
    {
      (*(void (**)(void *, void *, uint64_t))(v86 + 24))(v83, v84, v85);
      goto LABEL_22;
    }
    (*(void (**)(void *, uint64_t))(v86 + 8))(v83, v85);
    goto LABEL_21;
  }
  if (v88)
  {
LABEL_21:
    sub_23DCF6898(0, &qword_254326400, (void (*)(uint64_t))MEMORY[0x24BDFB270]);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    goto LABEL_22;
  }
  (*(void (**)(void *, void *, uint64_t))(v86 + 16))(v83, v84, v85);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v83, 0, 1, v85);
LABEL_22:
  v71(a1 + *(int *)(v92 + 28), a2 + *(int *)(v92 + 28), v70);
  return a1;
}

uint64_t sub_23DCF7980(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  int *v64;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = sub_23DDC55A0();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      sub_23DCF6898(0, &qword_254326A70, (void (*)(uint64_t))MEMORY[0x24BE40438]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  v15 = v7[7];
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v19 = *((_QWORD *)v18 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = sub_23DDC512C();
    v63 = v19;
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
    v22(v16, v17, v21);
    v23 = v18[5];
    v24 = &v16[v23];
    v64 = a3;
    v25 = &v17[v23];
    v22(&v16[v23], &v17[v23], v21);
    sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
    v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v21);
    v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v24[v27[5]] = *(_QWORD *)&v25[v27[5]];
    *(_QWORD *)&v24[v27[6]] = *(_QWORD *)&v25[v27[6]];
    v28 = v27[7];
    v29 = *(_QWORD *)&v25[v28];
    a3 = v64;
    *(_QWORD *)&v24[v28] = v29;
    v30 = v18[6];
    v31 = &v16[v30];
    v32 = &v17[v30];
    *(_OWORD *)v31 = *(_OWORD *)v32;
    v31[16] = v32[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
    *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v63 + 56))(v16, 0, 1, v18);
  }
  v33 = v7[8];
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  v36 = type metadata accessor for OvernightMetricsChartPointCollection();
  v37 = *(int *)(v36 + 20);
  v38 = v34 + v37;
  v39 = v35 + v37;
  v40 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
  *(_QWORD *)(v34 + *(int *)(v36 + 24)) = *(_QWORD *)(v35 + *(int *)(v36 + 24));
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  v41 = v7[11];
  v42 = a1 + v41;
  v43 = a2 + v41;
  v44 = sub_23DDC512C();
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 32);
  v45(v42, v43, v44);
  sub_23DCF6834(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE08B8]);
  v47 = v46;
  v45(v42 + *(int *)(v46 + 36), v43 + *(int *)(v46 + 36), v44);
  v48 = v7[12];
  v49 = a1 + v48;
  v50 = a2 + v48;
  v45(a1 + v48, a2 + v48, v44);
  v45(v49 + *(int *)(v47 + 36), v50 + *(int *)(v47 + 36), v44);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v51 = type metadata accessor for BalanceWidgetViewModel();
  v52 = *(int *)(v51 + 20);
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  *(_BYTE *)(a1 + *(int *)(v51 + 24)) = *(_BYTE *)(a2 + *(int *)(v51 + 24));
  v45(a1 + a3[5], a2 + a3[5], v44);
  v56 = a3[6];
  v57 = (void *)(a1 + v56);
  v58 = (const void *)(a2 + v56);
  v59 = sub_23DDC6608();
  v60 = *(_QWORD *)(v59 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
  {
    sub_23DCF6898(0, &qword_254326400, (void (*)(uint64_t))MEMORY[0x24BDFB270]);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v60 + 32))(v57, v58, v59);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
  }
  v45(a1 + a3[7], a2 + a3[7], v44);
  return a1;
}

uint64_t sub_23DCF7E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, int *);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(void *, uint64_t, uint64_t);
  int v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v8 = v7[6];
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    sub_23DCF59A8(a1 + v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v12 = sub_23DDC55A0();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        sub_23DCF6898(0, &qword_254326A70, (void (*)(uint64_t))MEMORY[0x24BE40438]);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  v15 = v7[7];
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v19 = *((_QWORD *)v18 - 1);
  v20 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  v92 = a3;
  if (v21)
  {
    if (v22)
      goto LABEL_13;
    v24 = sub_23DDC512C();
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
    v25(v16, v17, v24);
    v91 = v19;
    v26 = v25;
    v27 = v18[5];
    v28 = &v16[v27];
    v29 = &v17[v27];
    v26(&v16[v27], &v17[v27], v24);
    sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
    v26(&v28[*(int *)(v30 + 36)], &v29[*(int *)(v30 + 36)], v24);
    v31 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v28[v31[5]] = *(_QWORD *)&v29[v31[5]];
    *(_QWORD *)&v28[v31[6]] = *(_QWORD *)&v29[v31[6]];
    v32 = v31[7];
    v33 = *(_QWORD *)&v29[v32];
    a3 = v92;
    *(_QWORD *)&v28[v32] = v33;
    v34 = v18[6];
    v35 = &v16[v34];
    v36 = &v17[v34];
    *(_OWORD *)v35 = *(_OWORD *)v36;
    v35[16] = v36[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
    *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v91 + 56))(v16, 0, 1, v18);
  }
  else
  {
    if (v22)
    {
      sub_23DCF59A8((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
      sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      goto LABEL_16;
    }
    v37 = sub_23DDC512C();
    v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 40);
    v38(v16, v17, v37);
    v39 = v18[5];
    v40 = &v16[v39];
    v41 = &v17[v39];
    v38(&v16[v39], &v17[v39], v37);
    sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
    v38(&v40[*(int *)(v42 + 36)], &v41[*(int *)(v42 + 36)], v37);
    v43 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v40[v43[5]] = *(_QWORD *)&v41[v43[5]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v40[v43[6]] = *(_QWORD *)&v41[v43[6]];
    swift_bridgeObjectRelease();
    v44 = v43[7];
    v45 = *(_QWORD *)&v41[v44];
    a3 = v92;
    *(_QWORD *)&v40[v44] = v45;
    swift_bridgeObjectRelease();
    v46 = v18[6];
    v47 = &v16[v46];
    v48 = &v17[v46];
    *(_OWORD *)v47 = *(_OWORD *)v48;
    v47[16] = v48[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    v49 = v18[10];
    v50 = &v16[v49];
    v51 = (uint64_t *)&v17[v49];
    v53 = *v51;
    v52 = v51[1];
    *(_QWORD *)v50 = v53;
    *((_QWORD *)v50 + 1) = v52;
    swift_bridgeObjectRelease();
    v54 = v18[11];
    v55 = &v16[v54];
    v56 = (uint64_t *)&v17[v54];
    v58 = *v56;
    v57 = v56[1];
    *(_QWORD *)v55 = v58;
    *((_QWORD *)v55 + 1) = v57;
    swift_bridgeObjectRelease();
  }
LABEL_16:
  v59 = v7[8];
  v60 = a1 + v59;
  v61 = a2 + v59;
  *(_QWORD *)(a1 + v59) = *(_QWORD *)(a2 + v59);
  swift_bridgeObjectRelease();
  v62 = type metadata accessor for OvernightMetricsChartPointCollection();
  v63 = *(int *)(v62 + 20);
  v64 = v60 + v63;
  v65 = v61 + v63;
  v66 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  *(_QWORD *)(v60 + *(int *)(v62 + 24)) = *(_QWORD *)(v61 + *(int *)(v62 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  swift_bridgeObjectRelease();
  v67 = v7[11];
  v68 = a1 + v67;
  v69 = a2 + v67;
  v70 = sub_23DDC512C();
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 40);
  v71(v68, v69, v70);
  sub_23DCF6834(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE08B8]);
  v73 = v72;
  v71(v68 + *(int *)(v72 + 36), v69 + *(int *)(v72 + 36), v70);
  v74 = v7[12];
  v75 = a1 + v74;
  v76 = a2 + v74;
  v71(a1 + v74, a2 + v74, v70);
  v71(v75 + *(int *)(v73 + 36), v76 + *(int *)(v73 + 36), v70);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  swift_bridgeObjectRelease();
  v77 = type metadata accessor for BalanceWidgetViewModel();
  v78 = *(int *)(v77 + 20);
  v79 = a1 + v78;
  v80 = a2 + v78;
  v81 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 40))(v79, v80, v81);
  *(_BYTE *)(a1 + *(int *)(v77 + 24)) = *(_BYTE *)(a2 + *(int *)(v77 + 24));
  v71(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v70);
  v82 = *(int *)(a3 + 24);
  v83 = (void *)(a1 + v82);
  v84 = (void *)(a2 + v82);
  v85 = sub_23DDC6608();
  v86 = *(_QWORD *)(v85 - 8);
  v87 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v86 + 48);
  LODWORD(v73) = v87(v83, 1, v85);
  v88 = v87(v84, 1, v85);
  if (!(_DWORD)v73)
  {
    if (!v88)
    {
      (*(void (**)(void *, void *, uint64_t))(v86 + 40))(v83, v84, v85);
      goto LABEL_22;
    }
    (*(void (**)(void *, uint64_t))(v86 + 8))(v83, v85);
    goto LABEL_21;
  }
  if (v88)
  {
LABEL_21:
    sub_23DCF6898(0, &qword_254326400, (void (*)(uint64_t))MEMORY[0x24BDFB270]);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    goto LABEL_22;
  }
  (*(void (**)(void *, void *, uint64_t))(v86 + 32))(v83, v84, v85);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v83, 0, 1, v85);
LABEL_22:
  v71(a1 + *(int *)(v92 + 28), a2 + *(int *)(v92 + 28), v70);
  return a1;
}

uint64_t sub_23DCF856C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DCF8578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for BalanceWidgetViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_23DDC512C();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      sub_23DCF6898(0, &qword_254326400, (void (*)(uint64_t))MEMORY[0x24BDFB270]);
      v8 = v14;
      v12 = *(_QWORD *)(v14 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_23DCF8620()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DCF862C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for BalanceWidgetViewModel();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_23DDC512C();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      sub_23DCF6898(0, &qword_254326400, (void (*)(uint64_t))MEMORY[0x24BDFB270]);
      v10 = v16;
      v14 = *(_QWORD *)(v16 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for BalanceWidgetTimelineEntry()
{
  uint64_t result;

  result = qword_2543263B0;
  if (!qword_2543263B0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DCF8718()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for BalanceWidgetViewModel();
  if (v0 <= 0x3F)
  {
    sub_23DDC512C();
    if (v1 <= 0x3F)
    {
      sub_23DCF6898(319, &qword_254326400, (void (*)(uint64_t))MEMORY[0x24BDFB270]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t sub_23DCF87C8@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a3;
  v50 = a4;
  v42 = a2;
  v43 = a1;
  v48 = a5;
  v5 = sub_23DDC527C();
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v45 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, &qword_254326A70, (void (*)(uint64_t))MEMORY[0x24BE40438]);
  MEMORY[0x24BDAC7A8](v7);
  v41 = (char *)&v37 - v8;
  v44 = type metadata accessor for BalanceWidgetViewModel();
  MEMORY[0x24BDAC7A8](v44);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23DDC55A0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23DDC512C();
  v39 = *(_QWORD *)(v15 - 8);
  v16 = v39;
  v40 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_23DDC5330();
  v19 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v37 - v23;
  LODWORD(v42) = *v42;
  sub_23DDC5114();
  sub_23DDC5300();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v25 = MEMORY[0x24BEE4AF8];
  sub_23DCFFD10(MEMORY[0x24BEE4AF8]);
  sub_23DDC557C();
  v26 = v38;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v24, v38);
  v27 = (uint64_t)v41;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v41, v14, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v27, 0, 1, v11);
  OvernightMetricsViewModel.init(dayRange:chronologicalDaySummaries:featureStatus:)((uint64_t)v21, v25, v27, (uint64_t)v10);
  v28 = v45;
  sub_23DDC5270();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v24, v26);
  v29 = v44;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&v10[*(int *)(v44 + 20)], v28, v47);
  v10[*(int *)(v29 + 24)] = (char)v42;
  v30 = v48;
  sub_23DCF8B4C((uint64_t)v10, v48);
  v31 = (int *)type metadata accessor for BalanceWidgetTimelineEntry();
  v32 = v40;
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
  v33(v30 + v31[5], v49, v40);
  v34 = v30 + v31[6];
  v35 = sub_23DDC6608();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v33)(v30 + v31[7], v50, v32);
}

uint64_t sub_23DCF8B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = sub_23DDC512C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23DCF8B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BalanceWidgetViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_23DCF8B90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  unsigned int (*v14)(char *, uint64_t, int *);
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t, int *);
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v66;
  uint64_t v67;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v17 = (uint64_t *)(v16 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[2];
    a1[1] = a2[1];
    a1[2] = v5;
    v6 = *(int *)(a3 + 28);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    *(uint64_t *)((char *)a1 + v6) = *(uint64_t *)((char *)a2 + v6);
    v9 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    v10 = v9[5];
    v11 = &v7[v10];
    v12 = &v8[v10];
    v13 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v67 = *((_QWORD *)v13 - 1);
    v14 = *(unsigned int (**)(char *, uint64_t, int *))(v67 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v12, 1, v13))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v18 = sub_23DDC512C();
      v66 = v9;
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      v19(v11, v12, v18);
      v20 = v13[5];
      v21 = &v11[v20];
      v22 = &v12[v20];
      v19(&v11[v20], &v12[v20], v18);
      sub_23DCF9010();
      v19(&v21[*(int *)(v23 + 36)], &v22[*(int *)(v23 + 36)], v18);
      v24 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v21[v24[5]] = *(_QWORD *)&v22[v24[5]];
      *(_QWORD *)&v21[v24[6]] = *(_QWORD *)&v22[v24[6]];
      *(_QWORD *)&v21[v24[7]] = *(_QWORD *)&v22[v24[7]];
      v25 = v13[6];
      v26 = &v11[v25];
      v27 = &v12[v25];
      *(_OWORD *)v26 = *(_OWORD *)v27;
      v26[16] = v27[16];
      v11[v13[7]] = v12[v13[7]];
      v11[v13[8]] = v12[v13[8]];
      v11[v13[9]] = v12[v13[9]];
      v28 = v13[10];
      v29 = &v11[v28];
      v30 = &v12[v28];
      v31 = *((_QWORD *)v30 + 1);
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *((_QWORD *)v29 + 1) = v31;
      v32 = v13[11];
      v33 = &v11[v32];
      v34 = &v12[v32];
      v35 = *((_QWORD *)v34 + 1);
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *((_QWORD *)v33 + 1) = v35;
      v36 = *(void (**)(char *, _QWORD, uint64_t, int *))(v67 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v11, 0, 1, v13);
      v9 = v66;
    }
    *(_OWORD *)&v7[v9[6]] = *(_OWORD *)&v8[v9[6]];
    v37 = v9[7];
    v38 = &v7[v37];
    v39 = &v8[v37];
    v40 = *((_OWORD *)v39 + 1);
    *(_OWORD *)v38 = *(_OWORD *)v39;
    *((_OWORD *)v38 + 1) = v40;
    *((_QWORD *)v38 + 10) = *((_QWORD *)v39 + 10);
    v41 = *((_OWORD *)v39 + 4);
    v42 = *((_OWORD *)v39 + 2);
    *((_OWORD *)v38 + 3) = *((_OWORD *)v39 + 3);
    *((_OWORD *)v38 + 4) = v41;
    *((_OWORD *)v38 + 2) = v42;
    *(_QWORD *)&v7[v9[8]] = *(_QWORD *)&v8[v9[8]];
    *(_QWORD *)&v7[v9[9]] = *(_QWORD *)&v8[v9[9]];
    v43 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    v44 = &v7[v43];
    v45 = &v8[v43];
    v46 = *((_QWORD *)v45 + 1);
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *((_QWORD *)v44 + 1) = v46;
    v47 = *((_QWORD *)v45 + 3);
    *((_QWORD *)v44 + 2) = *((_QWORD *)v45 + 2);
    *((_QWORD *)v44 + 3) = v47;
    *((_QWORD *)v44 + 4) = *((_QWORD *)v45 + 4);
    *(_OWORD *)(v44 + 40) = *(_OWORD *)(v45 + 40);
    *(_OWORD *)(v44 + 56) = *(_OWORD *)(v45 + 56);
    *(_OWORD *)(v44 + 72) = *(_OWORD *)(v45 + 72);
    *(_OWORD *)(v44 + 88) = *(_OWORD *)(v45 + 88);
    *(_OWORD *)(v44 + 104) = *(_OWORD *)(v45 + 104);
    v48 = *(int *)(a3 + 32);
    v49 = (char *)a1 + v48;
    v50 = (char *)a2 + v48;
    v51 = *(uint64_t *)((char *)a2 + v48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v51)
    {
      v52 = *((_QWORD *)v50 + 1);
      v53 = *((_QWORD *)v50 + 2);
      *(_QWORD *)v49 = v51;
      *((_QWORD *)v49 + 1) = v52;
      *((_QWORD *)v49 + 2) = v53;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v49 = *(_OWORD *)v50;
      *((_QWORD *)v49 + 2) = *((_QWORD *)v50 + 2);
    }
    v49[24] = v50[24];
    v49[32] = v50[32];
    v54 = *((_QWORD *)v50 + 6);
    *((_QWORD *)v49 + 5) = *((_QWORD *)v50 + 5);
    *((_QWORD *)v49 + 6) = v54;
    v49[56] = v50[56];
    v55 = *((_QWORD *)v50 + 9);
    *((_QWORD *)v49 + 8) = *((_QWORD *)v50 + 8);
    *((_QWORD *)v49 + 9) = v55;
    *((_QWORD *)v49 + 10) = *((_QWORD *)v50 + 10);
    v56 = *(_OWORD *)(v50 + 88);
    *(_OWORD *)(v49 + 104) = *(_OWORD *)(v50 + 104);
    *(_OWORD *)(v49 + 88) = v56;
    v57 = *(_OWORD *)(v50 + 120);
    v58 = *(_OWORD *)(v50 + 136);
    *(_OWORD *)(v49 + 152) = *(_OWORD *)(v50 + 152);
    *(_OWORD *)(v49 + 136) = v58;
    *(_OWORD *)(v49 + 120) = v57;
    v59 = *((_QWORD *)v50 + 22);
    *((_QWORD *)v49 + 21) = *((_QWORD *)v50 + 21);
    *((_QWORD *)v49 + 22) = v59;
    v61 = *((_QWORD *)v50 + 23);
    v60 = *((_QWORD *)v50 + 24);
    v49[200] = v50[200];
    *((_QWORD *)v49 + 23) = v61;
    *((_QWORD *)v49 + 24) = v60;
    v49[201] = v50[201];
    v62 = *((_QWORD *)v50 + 27);
    *((_QWORD *)v49 + 26) = *((_QWORD *)v50 + 26);
    *((_QWORD *)v49 + 27) = v62;
    v63 = *((_QWORD *)v50 + 29);
    *((_QWORD *)v49 + 28) = *((_QWORD *)v50 + 28);
    *((_QWORD *)v49 + 29) = v63;
    *((_QWORD *)v49 + 30) = *((_QWORD *)v50 + 30);
    v49[248] = v50[248];
    v64 = *((_QWORD *)v50 + 33);
    *((_QWORD *)v49 + 32) = *((_QWORD *)v50 + 32);
    *((_QWORD *)v49 + 33) = v64;
    *((_QWORD *)v49 + 34) = *((_QWORD *)v50 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v17 = a1;
  }
  swift_retain();
  return v17;
}

void sub_23DCF9010()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254326A68)
  {
    sub_23DDC512C();
    sub_23DCF535C((unint64_t *)&qword_254326A30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    v0 = sub_23DDC68B4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254326A68);
  }
}

uint64_t sub_23DCF9088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v6 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v7 = sub_23DDC512C();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v5, v7);
    v9 = v5 + *(int *)(v6 + 20);
    v8(v9, v7);
    sub_23DCF9010();
    v8(v9 + *(int *)(v10 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + *(int *)(a2 + 32)))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_23DCF925C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  unsigned int (*v13)(char *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, _QWORD, uint64_t, int *);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v66;

  v3 = a1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_QWORD *)(a1 + v5) = *(_QWORD *)(a2 + v5);
  v8 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v9 = v8[5];
  v10 = (char *)(v6 + v9);
  v11 = (char *)(v7 + v9);
  v12 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v63 = *((_QWORD *)v12 - 1);
  v13 = *(unsigned int (**)(char *, uint64_t, int *))(v63 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v66 = v3;
  if (v13(v11, 1, v12))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = sub_23DDC512C();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v16(v10, v11, v15);
    v17 = v12[5];
    v18 = &v10[v17];
    v19 = &v11[v17];
    v16(&v10[v17], &v11[v17], v15);
    sub_23DCF9010();
    v16(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v15);
    v21 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v18[v21[5]] = *(_QWORD *)&v19[v21[5]];
    *(_QWORD *)&v18[v21[6]] = *(_QWORD *)&v19[v21[6]];
    *(_QWORD *)&v18[v21[7]] = *(_QWORD *)&v19[v21[7]];
    v22 = v12[6];
    v23 = &v10[v22];
    v24 = &v11[v22];
    *(_OWORD *)v23 = *(_OWORD *)v24;
    v23[16] = v24[16];
    v10[v12[7]] = v11[v12[7]];
    v10[v12[8]] = v11[v12[8]];
    v10[v12[9]] = v11[v12[9]];
    v25 = v12[10];
    v26 = &v10[v25];
    v27 = &v11[v25];
    v28 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *((_QWORD *)v26 + 1) = v28;
    v29 = v12[11];
    v30 = &v10[v29];
    v31 = &v11[v29];
    v32 = *((_QWORD *)v31 + 1);
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = *(void (**)(char *, _QWORD, uint64_t, int *))(v63 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33(v10, 0, 1, v12);
    v3 = v66;
  }
  *(_OWORD *)(v6 + v8[6]) = *(_OWORD *)(v7 + v8[6]);
  v34 = v8[7];
  v35 = v6 + v34;
  v36 = v7 + v34;
  v37 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v37;
  *(_QWORD *)(v35 + 80) = *(_QWORD *)(v36 + 80);
  v38 = *(_OWORD *)(v36 + 64);
  v39 = *(_OWORD *)(v36 + 32);
  *(_OWORD *)(v35 + 48) = *(_OWORD *)(v36 + 48);
  *(_OWORD *)(v35 + 64) = v38;
  *(_OWORD *)(v35 + 32) = v39;
  *(_QWORD *)(v6 + v8[8]) = *(_QWORD *)(v7 + v8[8]);
  *(_QWORD *)(v6 + v8[9]) = *(_QWORD *)(v7 + v8[9]);
  v40 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v41 = v6 + v40;
  v42 = v7 + v40;
  v43 = *(_QWORD *)(v42 + 8);
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *(_QWORD *)(v41 + 8) = v43;
  v44 = *(_QWORD *)(v42 + 24);
  *(_QWORD *)(v41 + 16) = *(_QWORD *)(v42 + 16);
  *(_QWORD *)(v41 + 24) = v44;
  *(_QWORD *)(v41 + 32) = *(_QWORD *)(v42 + 32);
  *(_OWORD *)(v41 + 40) = *(_OWORD *)(v42 + 40);
  *(_OWORD *)(v41 + 56) = *(_OWORD *)(v42 + 56);
  *(_OWORD *)(v41 + 72) = *(_OWORD *)(v42 + 72);
  *(_OWORD *)(v41 + 88) = *(_OWORD *)(v42 + 88);
  *(_OWORD *)(v41 + 104) = *(_OWORD *)(v42 + 104);
  v45 = *(int *)(a3 + 32);
  v46 = v3 + v45;
  v47 = a2 + v45;
  v48 = *(_QWORD *)(a2 + v45);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v48)
  {
    v49 = *(_QWORD *)(v47 + 8);
    v50 = *(_QWORD *)(v47 + 16);
    *(_QWORD *)v46 = v48;
    *(_QWORD *)(v46 + 8) = v49;
    *(_QWORD *)(v46 + 16) = v50;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v46 = *(_OWORD *)v47;
    *(_QWORD *)(v46 + 16) = *(_QWORD *)(v47 + 16);
  }
  *(_BYTE *)(v46 + 24) = *(_BYTE *)(v47 + 24);
  *(_BYTE *)(v46 + 32) = *(_BYTE *)(v47 + 32);
  v51 = *(_QWORD *)(v47 + 48);
  *(_QWORD *)(v46 + 40) = *(_QWORD *)(v47 + 40);
  *(_QWORD *)(v46 + 48) = v51;
  *(_BYTE *)(v46 + 56) = *(_BYTE *)(v47 + 56);
  v52 = *(_QWORD *)(v47 + 72);
  *(_QWORD *)(v46 + 64) = *(_QWORD *)(v47 + 64);
  *(_QWORD *)(v46 + 72) = v52;
  *(_QWORD *)(v46 + 80) = *(_QWORD *)(v47 + 80);
  v53 = *(_OWORD *)(v47 + 88);
  *(_OWORD *)(v46 + 104) = *(_OWORD *)(v47 + 104);
  *(_OWORD *)(v46 + 88) = v53;
  v54 = *(_OWORD *)(v47 + 120);
  v55 = *(_OWORD *)(v47 + 136);
  *(_OWORD *)(v46 + 152) = *(_OWORD *)(v47 + 152);
  *(_OWORD *)(v46 + 136) = v55;
  *(_OWORD *)(v46 + 120) = v54;
  v56 = *(_QWORD *)(v47 + 176);
  *(_QWORD *)(v46 + 168) = *(_QWORD *)(v47 + 168);
  *(_QWORD *)(v46 + 176) = v56;
  v58 = *(_QWORD *)(v47 + 184);
  v57 = *(_QWORD *)(v47 + 192);
  *(_BYTE *)(v46 + 200) = *(_BYTE *)(v47 + 200);
  *(_QWORD *)(v46 + 184) = v58;
  *(_QWORD *)(v46 + 192) = v57;
  *(_BYTE *)(v46 + 201) = *(_BYTE *)(v47 + 201);
  v59 = *(_QWORD *)(v47 + 216);
  *(_QWORD *)(v46 + 208) = *(_QWORD *)(v47 + 208);
  *(_QWORD *)(v46 + 216) = v59;
  v60 = *(_QWORD *)(v47 + 232);
  *(_QWORD *)(v46 + 224) = *(_QWORD *)(v47 + 224);
  *(_QWORD *)(v46 + 232) = v60;
  *(_QWORD *)(v46 + 240) = *(_QWORD *)(v47 + 240);
  *(_BYTE *)(v46 + 248) = *(_BYTE *)(v47 + 248);
  v61 = *(_QWORD *)(v47 + 264);
  *(_QWORD *)(v46 + 256) = *(_QWORD *)(v47 + 256);
  *(_QWORD *)(v46 + 264) = v61;
  *(_QWORD *)(v46 + 272) = *(_QWORD *)(v47 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v66;
}

uint64_t sub_23DCF96B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, _QWORD, uint64_t, int *);
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  int *v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;

  v5 = a1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  v79 = a3;
  v80 = a2;
  v6 = *(int *)(a3 + 28);
  v7 = v5 + v6;
  v8 = a2 + v6;
  *(_QWORD *)(v5 + v6) = *(_QWORD *)(a2 + v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v10 = v9[5];
  v11 = (char *)(v7 + v10);
  v12 = (char *)(v8 + v10);
  v13 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (v17)
    {
      v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v18);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      goto LABEL_9;
    }
    v20 = sub_23DDC512C();
    v77 = v9;
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v21(v11, v12, v20);
    v22 = v13[5];
    v23 = &v11[v22];
    v76 = v5;
    v24 = &v12[v22];
    v21(&v11[v22], &v12[v22], v20);
    sub_23DCF9010();
    v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
    v9 = v77;
    v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v23[v26[5]] = *(_QWORD *)&v24[v26[5]];
    *(_QWORD *)&v23[v26[6]] = *(_QWORD *)&v24[v26[6]];
    *(_QWORD *)&v23[v26[7]] = *(_QWORD *)&v24[v26[7]];
    v27 = v13[6];
    v28 = &v11[v27];
    v29 = &v12[v27];
    v30 = v29[16];
    *(_OWORD *)v28 = *(_OWORD *)v29;
    v28[16] = v30;
    v11[v13[7]] = v12[v13[7]];
    v11[v13[8]] = v12[v13[8]];
    v11[v13[9]] = v12[v13[9]];
    v31 = v13[10];
    v32 = &v11[v31];
    v33 = &v12[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
    v34 = v13[11];
    v35 = &v11[v34];
    v36 = &v12[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
    v37 = *(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = v76;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37(v11, 0, 1, v13);
  }
  else
  {
    if (v17)
    {
      sub_23DCF59A8((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v38 = sub_23DDC512C();
    v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 24);
    v39(v11, v12, v38);
    v40 = v13[5];
    v78 = v9;
    v41 = v5;
    v42 = &v11[v40];
    v43 = &v12[v40];
    v39(&v11[v40], &v12[v40], v38);
    sub_23DCF9010();
    v39(&v42[*(int *)(v44 + 36)], &v43[*(int *)(v44 + 36)], v38);
    v45 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v42[v45[5]] = *(_QWORD *)&v43[v45[5]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v42[v45[6]] = *(_QWORD *)&v43[v45[6]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v42[v45[7]] = *(_QWORD *)&v43[v45[7]];
    v5 = v41;
    v9 = v78;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v46 = v13[6];
    v47 = &v11[v46];
    v48 = &v12[v46];
    v49 = *(_OWORD *)v48;
    v47[16] = v48[16];
    *(_OWORD *)v47 = v49;
    v11[v13[7]] = v12[v13[7]];
    v11[v13[8]] = v12[v13[8]];
    v11[v13[9]] = v12[v13[9]];
    v50 = v13[10];
    v51 = &v11[v50];
    v52 = &v12[v50];
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v53 = v13[11];
    v54 = &v11[v53];
    v55 = &v12[v53];
    *(_QWORD *)v54 = *(_QWORD *)v55;
    *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  v56 = v9[6];
  v57 = (_QWORD *)(v7 + v56);
  v58 = (_QWORD *)(v8 + v56);
  *v57 = *v58;
  v57[1] = v58[1];
  v59 = v9[7];
  v60 = v7 + v59;
  v61 = v8 + v59;
  *(_QWORD *)v60 = *(_QWORD *)v61;
  v62 = *(_QWORD *)(v61 + 8);
  *(_BYTE *)(v60 + 16) = *(_BYTE *)(v61 + 16);
  *(_QWORD *)(v60 + 8) = v62;
  *(_QWORD *)(v60 + 24) = *(_QWORD *)(v61 + 24);
  *(_QWORD *)(v60 + 32) = *(_QWORD *)(v61 + 32);
  *(_QWORD *)(v60 + 40) = *(_QWORD *)(v61 + 40);
  *(_QWORD *)(v60 + 48) = *(_QWORD *)(v61 + 48);
  *(_QWORD *)(v60 + 56) = *(_QWORD *)(v61 + 56);
  *(_QWORD *)(v60 + 64) = *(_QWORD *)(v61 + 64);
  *(_QWORD *)(v60 + 72) = *(_QWORD *)(v61 + 72);
  *(_QWORD *)(v60 + 80) = *(_QWORD *)(v61 + 80);
  *(_QWORD *)(v7 + v9[8]) = *(_QWORD *)(v8 + v9[8]);
  *(_QWORD *)(v7 + v9[9]) = *(_QWORD *)(v8 + v9[9]);
  v63 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v64 = (_QWORD *)(v7 + v63);
  v65 = (_QWORD *)(v8 + v63);
  *v64 = *(_QWORD *)(v8 + v63);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v64[1] = v65[1];
  v64[2] = v65[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v64[3] = v65[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v64[4] = v65[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v64[5] = v65[5];
  v64[6] = v65[6];
  v64[7] = v65[7];
  v64[8] = v65[8];
  v64[9] = v65[9];
  v64[10] = v65[10];
  v64[11] = v65[11];
  v64[12] = v65[12];
  v64[13] = v65[13];
  v64[14] = v65[14];
  v66 = *(int *)(v79 + 32);
  v67 = v5 + v66;
  v68 = (__int128 *)(v80 + v66);
  v69 = *(_QWORD *)(v80 + v66);
  if (*(_QWORD *)(v5 + v66))
  {
    if (v69)
    {
      *(_QWORD *)v67 = v69;
      swift_retain();
      swift_release();
      *(_QWORD *)(v67 + 8) = *((_QWORD *)v68 + 1);
      swift_retain();
      swift_release();
      *(_QWORD *)(v67 + 16) = *((_QWORD *)v68 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_23DCF9EB8(v5 + v66);
      v70 = *((_QWORD *)v68 + 2);
      *(_OWORD *)v67 = *v68;
      *(_QWORD *)(v67 + 16) = v70;
    }
  }
  else if (v69)
  {
    *(_QWORD *)v67 = v69;
    *(_QWORD *)(v67 + 8) = *((_QWORD *)v68 + 1);
    *(_QWORD *)(v67 + 16) = *((_QWORD *)v68 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v71 = *v68;
    *(_QWORD *)(v67 + 16) = *((_QWORD *)v68 + 2);
    *(_OWORD *)v67 = v71;
  }
  *(_BYTE *)(v67 + 24) = *((_BYTE *)v68 + 24);
  *(_BYTE *)(v67 + 32) = *((_BYTE *)v68 + 32);
  *(_QWORD *)(v67 + 40) = *((_QWORD *)v68 + 5);
  swift_retain();
  swift_release();
  v72 = *((_QWORD *)v68 + 6);
  *(_BYTE *)(v67 + 56) = *((_BYTE *)v68 + 56);
  *(_QWORD *)(v67 + 48) = v72;
  *(_QWORD *)(v67 + 64) = *((_QWORD *)v68 + 8);
  *(_QWORD *)(v67 + 72) = *((_QWORD *)v68 + 9);
  swift_retain();
  swift_release();
  *(_QWORD *)(v67 + 80) = *((_QWORD *)v68 + 10);
  swift_retain();
  swift_release();
  *(_QWORD *)(v67 + 88) = *((_QWORD *)v68 + 11);
  v73 = *((_QWORD *)v68 + 12);
  *(_BYTE *)(v67 + 104) = *((_BYTE *)v68 + 104);
  *(_QWORD *)(v67 + 96) = v73;
  *(_QWORD *)(v67 + 112) = *((_QWORD *)v68 + 14);
  *(_QWORD *)(v67 + 120) = *((_QWORD *)v68 + 15);
  *(_QWORD *)(v67 + 128) = *((_QWORD *)v68 + 16);
  *(_QWORD *)(v67 + 136) = *((_QWORD *)v68 + 17);
  *(_QWORD *)(v67 + 144) = *((_QWORD *)v68 + 18);
  *(_QWORD *)(v67 + 152) = *((_QWORD *)v68 + 19);
  *(_QWORD *)(v67 + 160) = *((_QWORD *)v68 + 20);
  *(_QWORD *)(v67 + 168) = *((_QWORD *)v68 + 21);
  *(_QWORD *)(v67 + 176) = *((_QWORD *)v68 + 22);
  swift_retain();
  swift_release();
  *(_QWORD *)(v67 + 184) = *((_QWORD *)v68 + 23);
  swift_retain();
  swift_release();
  v74 = *((_QWORD *)v68 + 24);
  *(_BYTE *)(v67 + 200) = *((_BYTE *)v68 + 200);
  *(_QWORD *)(v67 + 192) = v74;
  *(_BYTE *)(v67 + 201) = *((_BYTE *)v68 + 201);
  *(_QWORD *)(v67 + 208) = *((_QWORD *)v68 + 26);
  swift_retain();
  swift_release();
  *(_QWORD *)(v67 + 216) = *((_QWORD *)v68 + 27);
  swift_retain();
  swift_release();
  *(_QWORD *)(v67 + 224) = *((_QWORD *)v68 + 28);
  swift_retain();
  swift_release();
  *(_QWORD *)(v67 + 232) = *((_QWORD *)v68 + 29);
  swift_retain();
  swift_release();
  *(_QWORD *)(v67 + 240) = *((_QWORD *)v68 + 30);
  swift_retain();
  swift_release();
  *(_BYTE *)(v67 + 248) = *((_BYTE *)v68 + 248);
  *(_QWORD *)(v67 + 256) = *((_QWORD *)v68 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(v67 + 264) = *((_QWORD *)v68 + 33);
  swift_retain();
  swift_release();
  *(_QWORD *)(v67 + 272) = *((_QWORD *)v68 + 34);
  return v5;
}

uint64_t sub_23DCF9EB8(uint64_t a1)
{
  destroy for OvernightMetricsChartSpec.BaselineBandColors();
  return a1;
}

uint64_t sub_23DCF9EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_QWORD *)(a1 + v6) = *(_QWORD *)(a2 + v6);
  v9 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v10 = v9[5];
  v11 = (char *)(v7 + v10);
  v12 = (char *)(v8 + v10);
  v13 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v14 = *((_QWORD *)v13 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v42 = v4;
    v43 = v5;
    v16 = sub_23DDC512C();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
    v17(v11, v12, v16);
    v18 = v13[5];
    v40 = v14;
    v41 = v3;
    v19 = &v11[v18];
    v20 = &v12[v18];
    v17(&v11[v18], &v12[v18], v16);
    sub_23DCF9010();
    v22 = v16;
    v4 = v42;
    v17(&v19[*(int *)(v21 + 36)], &v20[*(int *)(v21 + 36)], v22);
    v5 = v43;
    v23 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v19[v23[5]] = *(_QWORD *)&v20[v23[5]];
    *(_QWORD *)&v19[v23[6]] = *(_QWORD *)&v20[v23[6]];
    *(_QWORD *)&v19[v23[7]] = *(_QWORD *)&v20[v23[7]];
    v3 = v41;
    v24 = v13[6];
    v25 = &v11[v24];
    v26 = &v12[v24];
    *(_OWORD *)v25 = *(_OWORD *)v26;
    v25[16] = v26[16];
    v11[v13[7]] = v12[v13[7]];
    v11[v13[8]] = v12[v13[8]];
    v11[v13[9]] = v12[v13[9]];
    *(_OWORD *)&v11[v13[10]] = *(_OWORD *)&v12[v13[10]];
    *(_OWORD *)&v11[v13[11]] = *(_OWORD *)&v12[v13[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v40 + 56))(v11, 0, 1, v13);
  }
  *(_OWORD *)(v7 + v9[6]) = *(_OWORD *)(v8 + v9[6]);
  v27 = v9[7];
  v28 = v7 + v27;
  v29 = v8 + v27;
  v30 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v30;
  *(_QWORD *)(v28 + 80) = *(_QWORD *)(v29 + 80);
  v31 = *(_OWORD *)(v29 + 64);
  v32 = *(_OWORD *)(v29 + 32);
  *(_OWORD *)(v28 + 48) = *(_OWORD *)(v29 + 48);
  *(_OWORD *)(v28 + 64) = v31;
  *(_OWORD *)(v28 + 32) = v32;
  *(_QWORD *)(v7 + v9[8]) = *(_QWORD *)(v8 + v9[8]);
  *(_QWORD *)(v7 + v9[9]) = *(_QWORD *)(v8 + v9[9]);
  v33 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v34 = v7 + v33;
  v35 = v8 + v33;
  v36 = *(_OWORD *)(v35 + 80);
  *(_OWORD *)(v34 + 64) = *(_OWORD *)(v35 + 64);
  *(_OWORD *)(v34 + 80) = v36;
  *(_OWORD *)(v34 + 96) = *(_OWORD *)(v35 + 96);
  *(_QWORD *)(v34 + 112) = *(_QWORD *)(v35 + 112);
  v37 = *(_OWORD *)(v35 + 16);
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 16) = v37;
  v38 = *(_OWORD *)(v35 + 48);
  *(_OWORD *)(v34 + 32) = *(_OWORD *)(v35 + 32);
  *(_OWORD *)(v34 + 48) = v38;
  memcpy((void *)(v5 + *(int *)(v3 + 32)), (const void *)(v4 + *(int *)(v3 + 32)), 0x118uLL);
  return v5;
}

uint64_t sub_23DCFA188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v5 = a1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  v70 = a3;
  v71 = a2;
  v6 = *(int *)(a3 + 28);
  v7 = v5 + v6;
  v8 = (_QWORD *)(a2 + v6);
  *(_QWORD *)(v5 + v6) = *v8;
  swift_bridgeObjectRelease();
  v9 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v10 = v9[5];
  v11 = (char *)(v7 + v10);
  v12 = (char *)v8 + v10;
  v13 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (v17)
    {
      v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v18);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      goto LABEL_9;
    }
    v20 = sub_23DDC512C();
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
    v21(v11, v12, v20);
    v67 = v14;
    v68 = v5;
    v22 = v21;
    v23 = v13[5];
    v24 = &v11[v23];
    v25 = &v12[v23];
    v22(&v11[v23], &v12[v23], v20);
    sub_23DCF9010();
    v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v20);
    v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v24[v27[5]] = *(_QWORD *)&v25[v27[5]];
    *(_QWORD *)&v24[v27[6]] = *(_QWORD *)&v25[v27[6]];
    v28 = v27[7];
    v29 = *(_QWORD *)&v25[v28];
    v5 = v68;
    *(_QWORD *)&v24[v28] = v29;
    v30 = v13[6];
    v31 = &v11[v30];
    v32 = &v12[v30];
    *(_OWORD *)v31 = *(_OWORD *)v32;
    v31[16] = v32[16];
    v11[v13[7]] = v12[v13[7]];
    v11[v13[8]] = v12[v13[8]];
    v11[v13[9]] = v12[v13[9]];
    *(_OWORD *)&v11[v13[10]] = *(_OWORD *)&v12[v13[10]];
    *(_OWORD *)&v11[v13[11]] = *(_OWORD *)&v12[v13[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v67 + 56))(v11, 0, 1, v13);
  }
  else
  {
    if (v17)
    {
      sub_23DCF59A8((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v33 = sub_23DDC512C();
    v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 40);
    v34(v11, v12, v33);
    v35 = v13[5];
    v36 = &v11[v35];
    v69 = v5;
    v37 = &v12[v35];
    v34(&v11[v35], &v12[v35], v33);
    sub_23DCF9010();
    v34(&v36[*(int *)(v38 + 36)], &v37[*(int *)(v38 + 36)], v33);
    v39 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v36[v39[5]] = *(_QWORD *)&v37[v39[5]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v36[v39[6]] = *(_QWORD *)&v37[v39[6]];
    swift_bridgeObjectRelease();
    v40 = v39[7];
    v41 = *(_QWORD *)&v37[v40];
    v5 = v69;
    *(_QWORD *)&v36[v40] = v41;
    swift_bridgeObjectRelease();
    v42 = v13[6];
    v43 = &v11[v42];
    v44 = &v12[v42];
    *(_OWORD *)v43 = *(_OWORD *)v44;
    v43[16] = v44[16];
    v11[v13[7]] = v12[v13[7]];
    v11[v13[8]] = v12[v13[8]];
    v11[v13[9]] = v12[v13[9]];
    v45 = v13[10];
    v46 = &v11[v45];
    v47 = &v12[v45];
    v49 = *(_QWORD *)v47;
    v48 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = v49;
    *((_QWORD *)v46 + 1) = v48;
    swift_bridgeObjectRelease();
    v50 = v13[11];
    v51 = &v11[v50];
    v52 = &v12[v50];
    v54 = *(_QWORD *)v52;
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = v54;
    *((_QWORD *)v51 + 1) = v53;
    swift_bridgeObjectRelease();
  }
LABEL_9:
  *(_OWORD *)(v7 + v9[6]) = *(_OWORD *)((char *)v8 + v9[6]);
  v55 = v9[7];
  v56 = v7 + v55;
  v57 = (char *)v8 + v55;
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *(_QWORD *)(v56 + 8) = *((_QWORD *)v57 + 1);
  *(_BYTE *)(v56 + 16) = v57[16];
  *(_OWORD *)(v56 + 24) = *(_OWORD *)(v57 + 24);
  *(_OWORD *)(v56 + 40) = *(_OWORD *)(v57 + 40);
  *(_OWORD *)(v56 + 56) = *(_OWORD *)(v57 + 56);
  *(_OWORD *)(v56 + 72) = *(_OWORD *)(v57 + 72);
  *(_QWORD *)(v7 + v9[8]) = *(_QWORD *)((char *)v8 + v9[8]);
  *(_QWORD *)(v7 + v9[9]) = *(_QWORD *)((char *)v8 + v9[9]);
  v58 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v59 = v7 + v58;
  v60 = (char *)v8 + v58;
  *(_QWORD *)(v7 + v58) = *(_QWORD *)v60;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v59 + 8) = *((_QWORD *)v60 + 1);
  *(_QWORD *)(v59 + 16) = *((_QWORD *)v60 + 2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v59 + 24) = *((_QWORD *)v60 + 3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v59 + 32) = *((_QWORD *)v60 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v59 + 40) = *(_OWORD *)(v60 + 40);
  *(_OWORD *)(v59 + 56) = *(_OWORD *)(v60 + 56);
  *(_OWORD *)(v59 + 72) = *(_OWORD *)(v60 + 72);
  *(_OWORD *)(v59 + 88) = *(_OWORD *)(v60 + 88);
  *(_OWORD *)(v59 + 104) = *(_OWORD *)(v60 + 104);
  v61 = *(int *)(v70 + 32);
  v62 = v5 + v61;
  v63 = v71 + v61;
  if (!*(_QWORD *)(v5 + v61))
  {
LABEL_13:
    *(_OWORD *)v62 = *(_OWORD *)v63;
    *(_QWORD *)(v62 + 16) = *(_QWORD *)(v63 + 16);
    goto LABEL_14;
  }
  if (!*(_QWORD *)v63)
  {
    sub_23DCF9EB8(v62);
    goto LABEL_13;
  }
  *(_QWORD *)v62 = *(_QWORD *)v63;
  swift_release();
  *(_QWORD *)(v62 + 8) = *(_QWORD *)(v63 + 8);
  swift_release();
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v63 + 16);
  swift_release();
LABEL_14:
  *(_BYTE *)(v62 + 24) = *(_BYTE *)(v63 + 24);
  *(_BYTE *)(v62 + 32) = *(_BYTE *)(v63 + 32);
  *(_QWORD *)(v62 + 40) = *(_QWORD *)(v63 + 40);
  swift_release();
  *(_QWORD *)(v62 + 48) = *(_QWORD *)(v63 + 48);
  *(_BYTE *)(v62 + 56) = *(_BYTE *)(v63 + 56);
  *(_QWORD *)(v62 + 64) = *(_QWORD *)(v63 + 64);
  *(_QWORD *)(v62 + 72) = *(_QWORD *)(v63 + 72);
  swift_release();
  *(_QWORD *)(v62 + 80) = *(_QWORD *)(v63 + 80);
  swift_release();
  *(_QWORD *)(v62 + 88) = *(_QWORD *)(v63 + 88);
  *(_QWORD *)(v62 + 96) = *(_QWORD *)(v63 + 96);
  *(_BYTE *)(v62 + 104) = *(_BYTE *)(v63 + 104);
  v64 = *(_OWORD *)(v63 + 128);
  *(_OWORD *)(v62 + 112) = *(_OWORD *)(v63 + 112);
  *(_OWORD *)(v62 + 128) = v64;
  v65 = *(_OWORD *)(v63 + 160);
  *(_OWORD *)(v62 + 144) = *(_OWORD *)(v63 + 144);
  *(_OWORD *)(v62 + 160) = v65;
  *(_QWORD *)(v62 + 176) = *(_QWORD *)(v63 + 176);
  swift_release();
  *(_QWORD *)(v62 + 184) = *(_QWORD *)(v63 + 184);
  swift_release();
  *(_QWORD *)(v62 + 192) = *(_QWORD *)(v63 + 192);
  *(_BYTE *)(v62 + 200) = *(_BYTE *)(v63 + 200);
  *(_BYTE *)(v62 + 201) = *(_BYTE *)(v63 + 201);
  *(_QWORD *)(v62 + 208) = *(_QWORD *)(v63 + 208);
  swift_release();
  *(_QWORD *)(v62 + 216) = *(_QWORD *)(v63 + 216);
  swift_release();
  *(_QWORD *)(v62 + 224) = *(_QWORD *)(v63 + 224);
  swift_release();
  *(_QWORD *)(v62 + 232) = *(_QWORD *)(v63 + 232);
  swift_release();
  *(_QWORD *)(v62 + 240) = *(_QWORD *)(v63 + 240);
  swift_release();
  *(_BYTE *)(v62 + 248) = *(_BYTE *)(v63 + 248);
  *(_QWORD *)(v62 + 256) = *(_QWORD *)(v63 + 256);
  swift_release();
  *(_QWORD *)(v62 + 264) = *(_QWORD *)(v63 + 264);
  swift_release();
  *(_QWORD *)(v62 + 272) = *(_QWORD *)(v63 + 272);
  return v5;
}

uint64_t sub_23DCFA794()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DCFA7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for OvernightMetricsChartLayout(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_23DCFA81C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DCFA828(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for OvernightMetricsChartLayout(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SevenDaySingleMetricChartContent()
{
  uint64_t result;

  result = qword_256CFC2E0;
  if (!qword_256CFC2E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DCFA8D8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for OvernightMetricsChartLayout(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23DCFA970()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DCFA980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[36];

  v33 = a2;
  sub_23DCFBAEC();
  v32 = v3;
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v30 = (uint64_t)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (int *)type metadata accessor for SingleMetricMinorPointMarks();
  v6 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v31 = (uint64_t)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v29 - v8);
  v10 = (int *)type metadata accessor for SmoothedLineTrace();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v34 = (uint64_t)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t *)((char *)&v29 - v14);
  v16 = *(_QWORD *)(a1 + 8);
  sub_23DCFAC8C((uint64_t)&v29 + *(int *)(v13 + 20) - v14);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = type metadata accessor for SevenDaySingleMetricChartContent();
  v19 = a1 + *(int *)(v18 + 28);
  sub_23DCF58EC(v19, (uint64_t)v15 + v10[7], type metadata accessor for OvernightMetricsChartLayout);
  v20 = (const void *)(a1 + *(int *)(v18 + 32));
  memcpy(v35, v20, 0x118uLL);
  *v15 = v16;
  *(_QWORD *)((char *)v15 + v10[6]) = v17;
  memcpy((char *)v15 + v10[8], v20, 0x118uLL);
  sub_23DCFAC8C((uint64_t)v9 + v5[5]);
  sub_23DCF58EC(v19, (uint64_t)v9 + v5[7], type metadata accessor for OvernightMetricsChartLayout);
  *v9 = v16;
  *(_QWORD *)((char *)v9 + v5[6]) = v17;
  memcpy((char *)v9 + v5[8], v35, 0x118uLL);
  v21 = v34;
  sub_23DCF58EC((uint64_t)v15, v34, (uint64_t (*)(_QWORD))type metadata accessor for SmoothedLineTrace);
  v22 = v31;
  sub_23DCF58EC((uint64_t)v9, v31, (uint64_t (*)(_QWORD))type metadata accessor for SingleMetricMinorPointMarks);
  sub_23DCF535C(&qword_256CFC340, (uint64_t (*)(uint64_t))type metadata accessor for SmoothedLineTrace, (uint64_t)&unk_23DDCA970);
  v23 = v30;
  sub_23DCF58EC(v21, v30, (uint64_t (*)(_QWORD))type metadata accessor for SmoothedLineTrace);
  sub_23DCF535C(&qword_256CFC348, (uint64_t (*)(uint64_t))type metadata accessor for SingleMetricMinorPointMarks, (uint64_t)&unk_23DDCBFF8);
  v24 = v32;
  v25 = v23 + *(int *)(v32 + 48);
  sub_23DCF58EC(v22, v25, (uint64_t (*)(_QWORD))type metadata accessor for SingleMetricMinorPointMarks);
  v26 = v23;
  v27 = v33;
  sub_23DCFBB58(v26, v33, (uint64_t (*)(_QWORD))type metadata accessor for SmoothedLineTrace);
  sub_23DCFBB58(v25, v27 + *(int *)(v24 + 48), (uint64_t (*)(_QWORD))type metadata accessor for SingleMetricMinorPointMarks);
  swift_bridgeObjectRetain();
  sub_23DCFBB9C(v35);
  swift_bridgeObjectRetain();
  sub_23DCFBB9C(v35);
  sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SingleMetricMinorPointMarks);
  sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SmoothedLineTrace);
  sub_23DCF59A8(v22, (uint64_t (*)(_QWORD))type metadata accessor for SingleMetricMinorPointMarks);
  return sub_23DCF59A8(v34, (uint64_t (*)(_QWORD))type metadata accessor for SmoothedLineTrace);
}

uint64_t sub_23DCFAC8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)v1 & 1) != 0 || (v3 = *(_QWORD *)(v1 + 8), (v4 = *(_QWORD *)(v3 + 16)) == 0))
  {
    v11 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
    v9 = a1;
    v10 = 1;
  }
  else
  {
    v5 = v4 - 1;
    v6 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
    v7 = *(_QWORD *)(v6 - 8);
    sub_23DCF58EC(v3+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v5, a1, type metadata accessor for IndividualOvernightMetricChartPoint);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v9 = a1;
    v10 = 0;
    v11 = v6;
  }
  return v8(v9, v10, 1, v11);
}

void sub_23DCFAD40(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = type metadata accessor for SevenDaySingleMetricChartContent();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = sub_23DDC63D4();
  v11 = v10;
  sub_23DCF58EC(a2, (uint64_t)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for SevenDaySingleMetricChartContent);
  v12 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v13 = swift_allocObject();
  sub_23DCFBB58((uint64_t)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (uint64_t (*)(_QWORD))type metadata accessor for SevenDaySingleMetricChartContent);
  sub_23DCFB30C(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a3, a1, v14);
  sub_23DCFB2F0(0);
  v16 = (uint64_t *)(a3 + *(int *)(v15 + 36));
  *v16 = v9;
  v16[1] = v11;
  v16[2] = (uint64_t)sub_23DCFBAA0;
  v16[3] = v13;
}

double sub_23DCFAE54@<D0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  __int128 v14;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  __int128 v39;

  sub_23DDC6218();
  v4 = *a1;
  v5 = sub_23DDC623C();
  swift_release();
  sub_23DDC6410();
  v6 = sub_23DDC6404();
  swift_release();
  sub_23DDC5B70();
  sub_23DDC63D4();
  sub_23DDC5B34();
  v31 = v5;
  v32 = 256;
  v33 = v6;
  v34 = v4;
  v35 = v26;
  v36 = v27;
  v37 = v28;
  v38 = v29;
  v39 = v30;
  sub_23DDC63EC();
  sub_23DD326D8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v15, 0.0, 1, 0.0, 1);
  swift_release();
  swift_release();
  sub_23DDC6410();
  v7 = sub_23DDC6404();
  swift_release();
  v8 = v23;
  *(_OWORD *)(a2 + 128) = v22;
  *(_OWORD *)(a2 + 144) = v8;
  v9 = v25;
  *(_OWORD *)(a2 + 160) = v24;
  *(_OWORD *)(a2 + 176) = v9;
  v10 = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = v10;
  v11 = v21;
  *(_OWORD *)(a2 + 96) = v20;
  *(_OWORD *)(a2 + 112) = v11;
  v12 = v15[1];
  *(_OWORD *)a2 = v15[0];
  *(_OWORD *)(a2 + 16) = v12;
  result = *(double *)&v16;
  v14 = v17;
  *(_OWORD *)(a2 + 32) = v16;
  *(_OWORD *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 192) = v7;
  *(_BYTE *)(a2 + 200) = v4;
  return result;
}

uint64_t sub_23DCFB014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;

  sub_23DCFB170();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = v0;
  sub_23DCFB1D0();
  sub_23DCFB240();
  sub_23DDC5990();
  v8 = v0;
  sub_23DCFB2F0(0);
  sub_23DCF535C(&qword_256CFC3E8, (uint64_t (*)(uint64_t))sub_23DCFB170, MEMORY[0x24BDB8118]);
  sub_23DCFB798(&qword_256CFC3F0, (uint64_t (*)(uint64_t))sub_23DCFB2F0, sub_23DCFB840, sub_23DCFB85C);
  sub_23DDC5834();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_23DCFB158()
{
  return sub_23DDC57F8();
}

void sub_23DCFB170()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC328)
  {
    sub_23DCFB1D0();
    sub_23DCFB240();
    v0 = sub_23DDC599C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC328);
  }
}

void sub_23DCFB1D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC330)
  {
    type metadata accessor for SmoothedLineTrace();
    type metadata accessor for SingleMetricMinorPointMarks();
    v0 = sub_23DDC57E0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC330);
  }
}

unint64_t sub_23DCFB240()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  result = qword_256CFC338;
  if (!qword_256CFC338)
  {
    sub_23DCFB1D0();
    v2 = v1;
    v4[0] = sub_23DCF535C(&qword_256CFC340, (uint64_t (*)(uint64_t))type metadata accessor for SmoothedLineTrace, (uint64_t)&unk_23DDCA970);
    v4[1] = sub_23DCF535C(&qword_256CFC348, (uint64_t (*)(uint64_t))type metadata accessor for SingleMetricMinorPointMarks, (uint64_t)&unk_23DDCBFF8);
    v3 = v4;
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB7B80], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CFC338);
  }
  return result;
}

uint64_t sub_23DCFB2E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DCFA980(*(_QWORD *)(v1 + 16), a1);
}

void sub_23DCFB2E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_23DCFAD40(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_23DCFB2F0(uint64_t a1)
{
  sub_23DCFB494(a1, &qword_256CFC350, sub_23DCFB30C, (void (*)(uint64_t))sub_23DCFB380);
}

void sub_23DCFB30C(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFC358, (uint64_t (*)(uint64_t))sub_23DCFB170, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEFDB0]);
}

void sub_23DCFB328(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_23DCFB380()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC360)
  {
    sub_23DCFB3F8();
    sub_23DCF535C(&qword_256CFC3E0, (uint64_t (*)(uint64_t))sub_23DCFB3F8, MEMORY[0x24BDEC6F8]);
    v0 = sub_23DDC5E64();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC360);
  }
}

void sub_23DCFB3F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC368)
  {
    sub_23DCFB478(255);
    sub_23DCFB798(&qword_256CFC3B0, (uint64_t (*)(uint64_t))sub_23DCFB478, (uint64_t (*)(void))sub_23DCFB6A8, sub_23DCFB824);
    v0 = sub_23DDC5BB8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC368);
  }
}

void sub_23DCFB478(uint64_t a1)
{
  sub_23DCFB494(a1, &qword_256CFC370, sub_23DCFB4FC, (void (*)(uint64_t))sub_23DCFB60C);
}

void sub_23DCFB494(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    v6 = sub_23DDC5C0C();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_23DCFB4FC(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFC378, sub_23DCFB518);
}

void sub_23DCFB518(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFC380, sub_23DCFB534);
}

void sub_23DCFB534(uint64_t a1)
{
  sub_23DCFB494(a1, &qword_256CFC388, (void (*)(uint64_t))sub_23DCFB550, (void (*)(uint64_t))sub_23DCFB60C);
}

void sub_23DCFB550()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC390)
  {
    sub_23DCFB5C8();
    v0 = sub_23DDC5A80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC390);
  }
}

unint64_t sub_23DCFB5C8()
{
  unint64_t result;

  result = qword_256CFC398;
  if (!qword_256CFC398)
  {
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF52E0], MEMORY[0x24BDF52F8]);
    atomic_store(result, (unint64_t *)&qword_256CFC398);
  }
  return result;
}

void sub_23DCFB60C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC3A0)
  {
    sub_23DCFB664();
    v0 = sub_23DDC5DF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC3A0);
  }
}

unint64_t sub_23DCFB664()
{
  unint64_t result;

  result = qword_256CFC3A8;
  if (!qword_256CFC3A8)
  {
    result = MEMORY[0x242643BD8](&protocol conformance descriptor for BalanceMetricsTimeScope, &type metadata for BalanceMetricsTimeScope);
    atomic_store(result, (unint64_t *)&qword_256CFC3A8);
  }
  return result;
}

unint64_t sub_23DCFB6A8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFC3B8;
  if (!qword_256CFC3B8)
  {
    sub_23DCFB4FC(255);
    v2 = v1;
    v3[0] = sub_23DCFB710();
    v3[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFC3B8);
  }
  return result;
}

unint64_t sub_23DCFB710()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFC3C0;
  if (!qword_256CFC3C0)
  {
    sub_23DCFB518(255);
    v2 = v1;
    v3[0] = sub_23DCFB798(&qword_256CFC3C8, (uint64_t (*)(uint64_t))sub_23DCFB534, sub_23DCFB808, sub_23DCFB824);
    v3[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFC3C0);
  }
  return result;
}

uint64_t sub_23DCFB798(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DCFB808()
{
  return sub_23DCF535C(&qword_256CFC3D0, (uint64_t (*)(uint64_t))sub_23DCFB550, MEMORY[0x24BDEB358]);
}

uint64_t sub_23DCFB824()
{
  return sub_23DCF535C(&qword_256CFC3D8, (uint64_t (*)(uint64_t))sub_23DCFB60C, MEMORY[0x24BDEEC10]);
}

uint64_t sub_23DCFB840()
{
  return sub_23DCF535C(&qword_256CFC3F8, (uint64_t (*)(uint64_t))sub_23DCFB30C, MEMORY[0x24BDEFDC0]);
}

uint64_t sub_23DCFB85C()
{
  return sub_23DCF535C(&qword_256CFC400, (uint64_t (*)(uint64_t))sub_23DCFB380, MEMORY[0x24BDEF828]);
}

uint64_t sub_23DCFB878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SevenDaySingleMetricChartContent();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));
  swift_bridgeObjectRelease();
  v3 = v2 + *(int *)(v1 + 28);
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v5 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = sub_23DDC512C();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v7(v4, v6);
    v8 = v4 + *(int *)(v5 + 20);
    v7(v8, v6);
    sub_23DCF9010();
    v7(v8 + *(int *)(v9 + 36), v6);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + *(int *)(v1 + 32)))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

double sub_23DCFBAA0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SevenDaySingleMetricChartContent() - 8) + 80);
  return sub_23DCFAE54((char *)(v1 + ((v3 + 16) & ~v3)), a1);
}

void sub_23DCFBAEC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFC408)
  {
    type metadata accessor for SmoothedLineTrace();
    type metadata accessor for SingleMetricMinorPointMarks();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFC408);
  }
}

uint64_t sub_23DCFBB58(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *sub_23DCFBB9C(uint64_t *a1)
{
  sub_23DCFBC78(*a1);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23DCFBC78(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_23DCFBCB0()
{
  sub_23DCFB170();
  sub_23DCFB2F0(255);
  sub_23DCF535C(&qword_256CFC3E8, (uint64_t (*)(uint64_t))sub_23DCFB170, MEMORY[0x24BDB8118]);
  sub_23DCFB798(&qword_256CFC3F0, (uint64_t (*)(uint64_t))sub_23DCFB2F0, sub_23DCFB840, sub_23DCFB85C);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DCFBD58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t);
  void (*v16)(char *, uint64_t);
  _QWORD v18[2];

  v18[1] = a1;
  v1 = sub_23DDC6530();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v18 - v6;
  v8 = sub_23DDC512C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v18 - v13;
  sub_23DDC6524();
  sub_23DDC6500();
  sub_23DDC650C();
  v15 = *(void (**)(char *, uint64_t))(v2 + 8);
  v15(v4, v1);
  sub_23DDC6524();
  v15(v7, v1);
  sub_23DDC5030();
  sub_23DDC5030();
  sub_23DDC5024();
  v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, v8);
}

_QWORD *sub_23DCFBEE8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC656C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_23DCFBF70(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23DDC656C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_23DCFBFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23DDC656C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23DCFC000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23DDC656C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23DCFC05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23DDC656C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23DCFC0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23DDC656C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23DCFC114()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DCFC120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_23DDC656C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_23DCFC1AC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DCFC1B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23DDC656C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for BalanceWidgetAccessoryCircularSpecs()
{
  uint64_t result;

  result = qword_256CFC468;
  if (!qword_256CFC468)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DCFC26C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC656C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

int *sub_23DCFC2DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *result;
  int *v7;
  unsigned __int8 v8;
  uint64_t v9;

  v2 = sub_23DDC656C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC5D38();
  result = (int *)objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v7 = result;
    v8 = objc_msgSend(result, sel_isAppleWatch);

    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
    result = (int *)type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
    *(_BYTE *)(a1 + result[5]) = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23DCFC3B0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  v0 = sub_23DD6F1CC();
  v2 = 0x656C637269632E35;
  if (v0 != 5)
    v2 = 0;
  if ((unint64_t)(v0 - 1) < 4)
    v2 = v0 + 0x656C637269632E30;
  if ((v1 & 1) != 0)
    return 0;
  else
    return v2;
}

uint64_t sub_23DCFC420(_QWORD *a1, id *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t);
  char v15;
  uint64_t v16;
  uint64_t v18;

  v5 = v2;
  v6 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23DDC656C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC6560();
  v13 = sub_23DDC6548();
  v14 = *(void (**)(char *, uint64_t))(v10 + 8);
  v14(v12, v9);
  sub_23DCF58EC(v5, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if ((v13 & 1) != 0)
  {
    sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
LABEL_4:
    sub_23DDC6230();
    goto LABEL_8;
  }
  sub_23DDC6554();
  v15 = sub_23DDC6548();
  v14(v12, v9);
  sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if ((v15 & 1) != 0)
    goto LABEL_4;
  if (*a1 != -1)
    swift_once();
  MEMORY[0x242642C18](*a2);
LABEL_8:
  v16 = sub_23DDC623C();
  swift_release();
  return v16;
}

uint64_t sub_23DCFC5C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  void (*v10)(char *, uint64_t);
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23DDC656C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC6560();
  v9 = sub_23DDC6548();
  v10 = *(void (**)(char *, uint64_t))(v6 + 8);
  v10(v8, v5);
  sub_23DCF58EC(v1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if ((v9 & 1) != 0)
  {
    sub_23DCF59A8((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  }
  else
  {
    sub_23DDC6554();
    v11 = sub_23DDC6548();
    v10(v8, v5);
    sub_23DCF59A8((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    if ((v11 & 1) == 0)
    {
      v12 = objc_msgSend((id)objc_opt_self(), sel_systemGrayColor);
      MEMORY[0x242642C18](v12);
      goto LABEL_6;
    }
  }
  sub_23DDC6230();
LABEL_6:
  v13 = sub_23DDC623C();
  swift_release();
  return v13;
}

uint64_t sub_23DCFC758(uint64_t a1, unsigned int *a2, _QWORD *a3, id *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  _QWORD v29[2];
  _QWORD *v30;
  id *v31;

  v30 = a3;
  v31 = a4;
  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v29 - v9;
  v11 = sub_23DDC54C8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v29 - v17;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v12 + 104))((char *)v29 - v17, *a2, v11, v16);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v10);
  v19 = sub_23DDC5420();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v10, 1, v19) == 1)
  {
    sub_23DCFEA1C((uint64_t)v10, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
LABEL_9:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    return sub_23DCFC5C8();
  }
  v29[1] = a5;
  v21 = sub_23DDC53FC();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v19);
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v29[0] = v5;
  v23 = *(_QWORD *)(sub_23DDC5528() - 8);
  v24 = v21 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  v25 = *(_QWORD *)(v23 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_23DDC54D4();
    v26 = sub_23DDC54BC();
    v27 = *(void (**)(char *, uint64_t))(v12 + 8);
    v27(v14, v11);
    if ((v26 & 1) != 0)
      break;
    v24 += v25;
    if (!--v22)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease_n();
  v27(v18, v11);
  return sub_23DCFC420(v30, v31);
}

uint64_t sub_23DCFC994(_QWORD *a1, id *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t);
  char v16;
  uint64_t v17;

  v5 = v2;
  v6 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23DDC656C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC6560();
  v13 = sub_23DDC6548();
  v14 = *(void (**)(char *, uint64_t))(v10 + 8);
  v14(v12, v9);
  sub_23DCF58EC(v5, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if ((v13 & 1) != 0)
  {
    sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    return sub_23DDC6230();
  }
  else
  {
    sub_23DDC6554();
    v16 = sub_23DDC6548();
    v14(v12, v9);
    sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    if ((v16 & 1) != 0)
    {
      return sub_23DDC6230();
    }
    else
    {
      if (*a1 != -1)
        swift_once();
      return MEMORY[0x242642C18](*a2);
    }
  }
}

uint64_t sub_23DCFCB10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  void (*v10)(char *, uint64_t);
  char v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23DDC656C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC6560();
  v9 = sub_23DDC6548();
  v10 = *(void (**)(char *, uint64_t))(v6 + 8);
  v10(v8, v5);
  sub_23DCF58EC(v1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if ((v9 & 1) != 0)
  {
    sub_23DCF59A8((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  }
  else
  {
    sub_23DDC6554();
    v11 = sub_23DDC6548();
    v10(v8, v5);
    sub_23DCF59A8((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    if ((v11 & 1) == 0)
    {
      sub_23DDC6230();
      v12 = sub_23DDC623C();
      swift_release();
      return v12;
    }
  }
  return sub_23DDC6230();
}

uint64_t sub_23DCFCC70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  void (*v9)(char *, uint64_t);
  char v10;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;

  v1 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23DDC656C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC6560();
  v8 = sub_23DDC6548();
  v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  v9(v7, v4);
  sub_23DCF58EC(v0, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if ((v8 & 1) != 0)
  {
    sub_23DCF59A8((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    return sub_23DDC6230();
  }
  sub_23DDC6554();
  v10 = sub_23DDC6548();
  v9(v7, v4);
  sub_23DCF59A8((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if ((v10 & 1) != 0)
    return sub_23DDC6230();
  v12 = sub_23DD6F1CC();
  if ((v13 & 1) != 0)
    return sub_23DDC6224();
  if (v12 == 1)
  {
    if (qword_256CFC0A0 != -1)
      swift_once();
    v14 = (void *)qword_256CFE660;
  }
  else if (v12)
  {
    if (qword_256CFC0A8 != -1)
      swift_once();
    v14 = (void *)qword_256CFE668;
  }
  else
  {
    if (qword_256CFC098 != -1)
      swift_once();
    v14 = (void *)qword_256CFE658;
  }
  return MEMORY[0x242642C18](v14);
}

uint64_t sub_23DCFCE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  void (*v10)(char *, uint64_t);
  char v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23DDC656C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC6560();
  v9 = sub_23DDC6548();
  v10 = *(void (**)(char *, uint64_t))(v6 + 8);
  v10(v8, v5);
  sub_23DCF58EC(v1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  if ((v9 & 1) != 0)
  {
    sub_23DCF59A8((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  }
  else
  {
    sub_23DDC6554();
    v11 = sub_23DDC6548();
    v10(v8, v5);
    sub_23DCF59A8((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
    if ((v11 & 1) == 0)
    {
      v13 = objc_msgSend((id)objc_opt_self(), sel_systemGrayColor);
      MEMORY[0x242642C18](v13);
      v12 = sub_23DDC623C();
      swift_release();
      return v12;
    }
  }
  return sub_23DDC6230();
}

id sub_23DCFCFF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id result;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  v0 = sub_23DDC6038();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, (unint64_t *)&qword_256CFC4A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - v5;
  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v8 = result;
    v9 = objc_msgSend(result, sel_isAppleWatch);

    if (v9)
    {
      sub_23DDC5FB4();
      v10 = sub_23DDC5FA8();
      v11 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678];
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
      v12 = sub_23DDC5FCC();
      sub_23DCFEA1C((uint64_t)v6, (unint64_t *)&qword_256CFC4A0, v11);
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDF18C8], v0);
      v13 = sub_23DDC5FA8();
      v14 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678];
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
      sub_23DDC5FB4();
      v12 = sub_23DDC5FE4();
      sub_23DCFEA1C((uint64_t)v6, (unint64_t *)&qword_256CFC4A0, v14);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    }
    return (id)v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_23DCFD1D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id result;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  v0 = sub_23DDC6038();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, (unint64_t *)&qword_256CFC4A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - v5;
  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v8 = result;
    v9 = objc_msgSend(result, sel_isAppleWatch);

    if (v9)
    {
      sub_23DDC5FB4();
      v10 = sub_23DDC5FA8();
      v11 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678];
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
      v12 = sub_23DDC5FCC();
      sub_23DCFEA1C((uint64_t)v6, (unint64_t *)&qword_256CFC4A0, v11);
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDF18F0], v0);
      v13 = sub_23DDC5FA8();
      v14 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678];
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
      v12 = sub_23DDC5FE4();
      sub_23DCFEA1C((uint64_t)v6, (unint64_t *)&qword_256CFC4A0, v14);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    }
    return (id)v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_23DCFD3B0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id result;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;

  sub_23DCFB328(0, (unint64_t *)&qword_256CFC4A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v8 - v1;
  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v4 = result;
    objc_msgSend(result, sel_isAppleWatch);

    sub_23DDC5FC0();
    v5 = sub_23DDC5FA8();
    v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678];
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 1, 1, v5);
    v7 = sub_23DDC5FCC();
    sub_23DCFEA1C((uint64_t)v2, (unint64_t *)&qword_256CFC4A0, v6);
    return (id)v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *sub_23DCFD4CC@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  char v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void *v35;
  _BYTE v36[280];
  __int128 v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[18];

  v35 = a1;
  v1 = sub_23DDC656C();
  v32 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v33 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)&v27 - v4;
  v5 = sub_23DDC5774();
  v28 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self();
  *(_QWORD *)&v41[0] = MEMORY[0x242642C18](objc_msgSend(v8, sel_systemGrayColor));
  v30 = sub_23DDC5B40();
  MEMORY[0x242642C18](objc_msgSend(v8, sel_systemGrayColor));
  v9 = sub_23DDC623C();
  swift_release();
  *(_QWORD *)&v41[0] = v9;
  v29 = sub_23DDC5B40();
  MEMORY[0x242642C18](objc_msgSend(v8, sel_systemGrayColor));
  v10 = sub_23DDC623C();
  swift_release();
  *(_QWORD *)&v41[0] = v10;
  v11 = sub_23DDC5B40();
  if (qword_256CFC0C0 != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v5, (uint64_t)qword_256D06580);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v13(v7, v12, v5);
  sub_23DDC626C();
  v14 = sub_23DDC623C();
  swift_release();
  if (qword_256CFC0C8 != -1)
    swift_once();
  v15 = __swift_project_value_buffer(v5, (uint64_t)qword_256D06598);
  v13(v7, v15, v5);
  sub_23DDC626C();
  v16 = sub_23DDC623C();
  swift_release();
  sub_23DDC6230();
  v17 = sub_23DDC623C();
  swift_release();
  *(_QWORD *)&v41[0] = sub_23DDC6218();
  v18 = sub_23DDC5B40();
  if (qword_256CFC098 != -1)
    swift_once();
  v19 = MEMORY[0x242642C18]((id)qword_256CFE658);
  if (qword_256CFC0A8 != -1)
    swift_once();
  v20 = MEMORY[0x242642C18]((id)qword_256CFE668);
  sub_23DD57640((uint64_t)&v37);
  *(_QWORD *)&v41[0] = v14;
  *((_QWORD *)&v41[0] + 1) = v16;
  *(_QWORD *)&v41[1] = v17;
  BYTE8(v41[1]) = 0;
  LOBYTE(v41[2]) = 1;
  *((_QWORD *)&v41[2] + 1) = v18;
  *(_QWORD *)&v41[3] = 0;
  BYTE8(v41[3]) = 1;
  *(_QWORD *)&v41[4] = 0x4014000000000000;
  *((_QWORD *)&v41[4] + 1) = v19;
  *(_QWORD *)&v41[5] = v20;
  *((_QWORD *)&v41[5] + 1) = 0x3FE0000000000000;
  *(_QWORD *)&v41[6] = 0;
  BYTE8(v41[6]) = 1;
  v41[7] = xmmword_23DDC77E0;
  v41[8] = xmmword_23DDC77F0;
  v41[9] = xmmword_23DDC7800;
  v41[10] = xmmword_23DDC7810;
  memset(&v41[11], 0, 24);
  WORD4(v41[12]) = 1;
  *(_QWORD *)&v41[13] = v30;
  *((_QWORD *)&v41[13] + 1) = v29;
  *(_QWORD *)&v41[14] = v11;
  *(_OWORD *)((char *)&v41[14] + 8) = v37;
  BYTE8(v41[15]) = v38;
  v41[16] = v39;
  *(_QWORD *)&v41[17] = v40;
  v21 = v32;
  v22 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, v31, v1);
  v23 = v33;
  sub_23DDC6560();
  sub_23DCFE8C0();
  LOBYTE(v20) = sub_23DDC66C8();
  v24 = *(void (**)(char *, uint64_t))(v21 + 8);
  v24(v23, v1);
  if ((v20 & 1) != 0)
  {
    v24(v22, v1);
    memcpy(v36, v41, sizeof(v36));
    static OvernightMetricsChartSpec.accented(_:)((uint64_t)v36, (uint64_t)v35);
    return sub_23DCFE908((uint64_t *)v41);
  }
  sub_23DDC6554();
  v25 = sub_23DDC66C8();
  v24(v23, v1);
  v24(v22, v1);
  if ((v25 & 1) != 0)
  {
    memcpy(v36, v41, sizeof(v36));
    static OvernightMetricsChartSpec.vibrant(_:)((uint64_t)v36, (uint64_t)v35);
    return sub_23DCFE908((uint64_t *)v41);
  }
  return (uint64_t *)memcpy(v35, v41, 0x118uLL);
}

unint64_t sub_23DCFD9EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v17;
  unint64_t v18;

  sub_23DCFB328(0, &qword_256CFC4B0, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v17 - v3;
  v5 = type metadata accessor for MultilayerCircularGaugeLayer();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v17 - v10;
  v12 = sub_23DCFDBE0(a1);
  v18 = v12;
  sub_23DCFDF98((uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_23DCFEA1C((uint64_t)v4, &qword_256CFC4B0, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer);
  }
  else
  {
    sub_23DCFEA60((uint64_t)v4, (uint64_t)v11);
    sub_23DCF58EC((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MultilayerCircularGaugeLayer);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_23DD567C8(0, *(_QWORD *)(v12 + 16) + 1, 1, v12);
    v14 = *(_QWORD *)(v12 + 16);
    v13 = *(_QWORD *)(v12 + 24);
    if (v14 >= v13 >> 1)
      v12 = sub_23DD567C8(v13 > 1, v14 + 1, 1, v12);
    *(_QWORD *)(v12 + 16) = v14 + 1;
    sub_23DCFEA60((uint64_t)v8, v12+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14);
    v18 = v12;
    sub_23DCF59A8((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for MultilayerCircularGaugeLayer);
  }
  v15 = sub_23DCFE1E8();
  sub_23DD95CB0(v15);
  return v18;
}

uint64_t sub_23DCFDBE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  double v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  unint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;

  v3 = sub_23DDC6428();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + *(int *)(type metadata accessor for BalanceWidgetAccessoryCircularSpecs() + 20)))
    v7 = 0.075;
  else
    v7 = 0.05;
  sub_23DCFB328(0, &qword_256CFC4B8, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v8 = (int *)type metadata accessor for MultilayerCircularGaugeLayer();
  v9 = *((_QWORD *)v8 - 1);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23DDC7820;
  result = _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0();
  v15 = v14 - v7;
  if (v14 - v7 < -1.5)
  {
    __break(1u);
    goto LABEL_9;
  }
  v35 = v12;
  v36 = v10;
  v16 = v12 + v11;
  v38 = a1;
  v39 = sub_23DCFC758(a1, MEMORY[0x24BE401A8], &qword_256CFC0A8, (id *)&qword_256CFE668, (uint64_t)sub_23DD62C64);
  v17 = sub_23DDC5B40();
  v18 = *MEMORY[0x24BDF50D0];
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v37(v6, v18, v3);
  sub_23DDC5138();
  *(_QWORD *)v16 = 0xBFF8000000000000;
  *(double *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 16) = v17;
  v19 = *(void (**)(unint64_t, char *, uint64_t))(v4 + 32);
  v19(v16 + v8[6], v6, v3);
  *(_QWORD *)(v16 + v8[7]) = 0x3FF0000000000000;
  *(_BYTE *)(v16 + v8[8]) = 2;
  v20 = v16 + v8[9];
  *(_QWORD *)v20 = 0x4000000000000000;
  *(_BYTE *)(v20 + 8) = 0;
  result = _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0();
  v22 = v7 + v21;
  if (v7 + v21 > 1.5)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v23 = v36;
  v24 = v16 + v36;
  v34 = v1;
  v39 = sub_23DCFC758(v38, MEMORY[0x24BE401B0], &qword_256CFC0A8, (id *)&qword_256CFE668, (uint64_t)sub_23DD62C64);
  v25 = sub_23DDC5B40();
  v37(v6, v18, v3);
  sub_23DDC5138();
  *(double *)v24 = v22;
  *(_QWORD *)(v24 + 8) = 0x3FF8000000000000;
  *(_QWORD *)(v24 + 16) = v25;
  v19(v24 + v8[6], v6, v3);
  *(_QWORD *)(v24 + v8[7]) = 0x3FF0000000000000;
  *(_BYTE *)(v24 + v8[8]) = 3;
  v26 = v24 + v8[9];
  *(_QWORD *)v26 = 0x4000000000000000;
  *(_BYTE *)(v26 + 8) = 0;
  _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0();
  v28 = v7 + v27;
  result = _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0();
  v30 = v29 - v7;
  if (v28 <= v30)
  {
    v31 = v16 + 2 * v23;
    v39 = sub_23DCFC758(v38, MEMORY[0x24BE401B8], &qword_256CFC098, (id *)&qword_256CFE658, (uint64_t)sub_23DD62A14);
    v32 = sub_23DDC5B40();
    v37(v6, v18, v3);
    sub_23DDC5138();
    *(double *)v31 = v28;
    *(double *)(v31 + 8) = v30;
    *(_QWORD *)(v31 + 16) = v32;
    v19(v31 + v8[6], v6, v3);
    *(_QWORD *)(v31 + v8[7]) = 0x3FF0000000000000;
    *(_BYTE *)(v31 + v8[8]) = 1;
    v33 = v31 + v8[9];
    *(_QWORD *)v33 = 0x4000000000000000;
    *(_BYTE *)(v33 + 8) = 0;
    return v35;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_23DCFDF98@<X0>(uint64_t a1@<X8>)
{
  double v2;
  double v3;
  char v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;

  v2 = COERCE_DOUBLE(sub_23DD6F310());
  if ((v4 & 1) == 0)
  {
    if (v2 <= 1.5)
      v5 = v2;
    else
      v5 = 1.5;
    if (v2 >= -1.5)
      v6 = v5;
    else
      v6 = -1.5;
    if (v3 >= -1.5)
      v7 = v3;
    else
      v7 = -1.5;
    if (v3 <= 1.5)
      v8 = v7;
    else
      v8 = 1.5;
    _s15HealthBalanceUI25OvernightMetricsViewModelV11medialRangeSNySdGvg_0();
    v10 = v9;
    v12 = v11;
    sub_23DCFC994(&qword_256CFC098, (id *)&qword_256CFE658);
    sub_23DCFC994(&qword_256CFC0A8, (id *)&qword_256CFE668);
    sub_23DD0C920(v6, v8, v10, v12);
  }
  v13 = type metadata accessor for MultilayerCircularGaugeLayer();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
}

size_t sub_23DCFE1E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  _BYTE v15[16];
  uint64_t v16;
  char v17[16];
  uint64_t v18;
  char v19[16];
  uint64_t v20;
  size_t v21;

  v1 = sub_23DDC54C8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, double))(v2 + 104))(v5, *MEMORY[0x24BE401B8], v1, v3);
  v6 = sub_23DD6F620((uint64_t)v5);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v5, v1);
  v20 = v0;
  v7 = sub_23DD8F6F0((void (*)(__int128 *__return_ptr, uint64_t *))sub_23DCFEAA4, (uint64_t)v19, (uint64_t)v6);
  swift_bridgeObjectRelease();
  v8 = sub_23DCFE6DC(v7, 0.25);
  swift_bridgeObjectRelease();
  v18 = v0;
  v9 = sub_23DD8F804((void (*)(uint64_t *__return_ptr, __int128 *))sub_23DCFEAB8, (uint64_t)v17, v8);
  swift_bridgeObjectRelease();
  v10 = sub_23DCFE370();
  v16 = v0;
  v11 = sub_23DD8F804((void (*)(uint64_t *__return_ptr, __int128 *))sub_23DCFEAEC, (uint64_t)v15, v10);
  swift_bridgeObjectRelease();
  v12 = sub_23DCFF4CC(v9);
  swift_bridgeObjectRelease();
  v13 = sub_23DCFF4CC(v11);
  swift_bridgeObjectRelease();
  v21 = v12;
  sub_23DD95CB0(v13);
  return v21;
}

uint64_t sub_23DCFE370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  _BYTE *v5;
  void (*v6)(_BYTE *, _QWORD, uint64_t, double);
  _QWORD *v7;
  void (*v8)(_BYTE *, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  _QWORD *v15;

  v1 = sub_23DDC54C8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = *(void (**)(_BYTE *, _QWORD, uint64_t, double))(v2 + 104);
  v6(v5, *MEMORY[0x24BE401A8], v1, v3);
  v7 = sub_23DD6F620((uint64_t)v5);
  v8 = *(void (**)(_BYTE *, uint64_t))(v2 + 8);
  v8(v5, v1);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v6)(v5, *MEMORY[0x24BE401B0], v1);
  v9 = sub_23DD6F620((uint64_t)v5);
  v8(v5, v1);
  v15 = v7;
  sub_23DD95B6C((uint64_t)v9);
  v14 = v0;
  v10 = sub_23DD8F6F0((void (*)(__int128 *__return_ptr, uint64_t *))sub_23DCFEAA4, (uint64_t)v13, (uint64_t)v15);
  swift_bridgeObjectRelease();
  v11 = sub_23DCFE6DC(v10, 0.25);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_23DCFE4AC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X3>, id *a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, _QWORD, uint64_t);
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  id *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v28 = a3;
  v29 = a4;
  v27 = a2;
  v30 = a5;
  v6 = sub_23DDC6428();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = a1[1];
  sub_23DCFB328(0, &qword_256CFC4B8, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v12 = (int *)type metadata accessor for MultilayerCircularGaugeLayer();
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_23DDC7830;
  v17 = (char *)(v16 + v15);
  v31 = sub_23DCFC994(v27, v28);
  v18 = sub_23DDC5B40();
  v19 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
  v19(v9, *MEMORY[0x24BDF50D0], v6);
  sub_23DDC5138();
  *(_QWORD *)v17 = v10;
  *((_QWORD *)v17 + 1) = v11;
  *((_QWORD *)v17 + 2) = v18;
  v20 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v20(&v17[v12[6]], v9, v6);
  *(_QWORD *)&v17[v12[7]] = 0x3FF0000000000000;
  v17[v12[8]] = 0;
  v21 = &v17[v12[9]];
  *(_QWORD *)v21 = 0;
  v21[8] = 1;
  v22 = &v17[v14];
  v31 = sub_23DDC6218();
  v23 = sub_23DDC5B40();
  v19(v9, *MEMORY[0x24BDF50A0], v6);
  sub_23DDC5138();
  *(_QWORD *)v22 = v10;
  *((_QWORD *)v22 + 1) = v11;
  *((_QWORD *)v22 + 2) = v23;
  result = ((uint64_t (*)(char *, char *, uint64_t))v20)(&v22[v12[6]], v9, v6);
  *(_QWORD *)&v22[v12[7]] = 0x3FE0000000000000;
  v22[v12[8]] = 0;
  v25 = &v22[v12[9]];
  *(_QWORD *)v25 = 0;
  v25[8] = 1;
  *v30 = v16;
  return result;
}

uint64_t sub_23DCFE6DC(uint64_t a1, double a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  double v8;
  double v9;
  int8x16_t v10;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  float64x2_t v19;
  _QWORD *v20;

  v20 = (_QWORD *)a1;
  swift_bridgeObjectRetain();
  sub_23DCFEB20((uint64_t *)&v20);
  v3 = v20;
  v4 = v20[2];
  if (v4 < 2)
    return (uint64_t)v3;
  v5 = 0;
  v6 = 1;
  while (v5 < v4)
  {
    if (v6 >= v4)
      goto LABEL_24;
    v7 = *(int8x16_t *)&v3[2 * v5 + 4];
    v8 = *(double *)&v3[2 * v5 + 5];
    v9 = v8 + a2;
    if (*(double *)v7.i64 - a2 > v8 + a2)
      goto LABEL_25;
    v10 = *(int8x16_t *)&v3[2 * v6 + 4];
    if (*(double *)v7.i64 - a2 > *(double *)v10.i64 || *(double *)v10.i64 > v9)
    {
      if (__OFADD__(v6++, 1))
        goto LABEL_26;
      ++v5;
      if (v6 >= (uint64_t)v4)
        return (uint64_t)v3;
    }
    else
    {
      *(_QWORD *)&v13.f64[0] = v3[2 * v5 + 4];
      *(_QWORD *)&v13.f64[1] = v3[2 * v6 + 5];
      *(_QWORD *)&v14.f64[0] = v3[2 * v6 + 4];
      *(_QWORD *)&v14.f64[1] = v3[2 * v5 + 5];
      v15 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v14, v13), v7, v10);
      if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1), v15))).u8[0] & 1) != 0)
        goto LABEL_27;
      v19 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_23DD451E0(v3);
      v16 = v3[2];
      if (v5 >= v16)
        goto LABEL_28;
      *(float64x2_t *)&v3[2 * v5 + 4] = v19;
      if (v6 >= v16)
        goto LABEL_29;
      v4 = v16 - 1;
      v17 = v16 - 1 - v6;
      if (v17 < 0)
        goto LABEL_30;
      memmove(&v3[2 * v6 + 4], &v3[2 * v6 + 6], 16 * v17);
      v3[2] = v4;
      if (v6 >= (uint64_t)v4)
        return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  sub_23DDC6B0C();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_23DCFE8C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFC4A8;
  if (!qword_256CFC4A8)
  {
    v1 = sub_23DDC656C();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDFADF0], v1);
    atomic_store(result, (unint64_t *)&qword_256CFC4A8);
  }
  return result;
}

uint64_t *sub_23DCFE908(uint64_t *a1)
{
  sub_23DCFE9E4(*a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_23DCFE9E4(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_23DCFEA1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_23DCFB328(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_23DCFEA60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MultilayerCircularGaugeLayer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_23DCFEAA4@<D0>(uint64_t *a1@<X0>, int8x16_t *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_23DCFF994(a1, a2).u64[0];
  return result;
}

uint64_t sub_23DCFEAB8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23DCFE4AC(a1, &qword_256CFC098, (id *)&qword_256CFE658, (uint64_t)sub_23DD62A14, a2);
}

uint64_t sub_23DCFEAEC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23DCFE4AC(a1, &qword_256CFC0A8, (id *)&qword_256CFE668, (uint64_t)sub_23DD62C64, a2);
}

uint64_t sub_23DCFEB20(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23DDA9698(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_23DCFEB88(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_23DCFEB88(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double *__dst;

  v3 = a1[1];
  result = sub_23DDC6BD8();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v82 = *a1;
      v83 = -1;
      v84 = 1;
      v85 = *a1;
      do
      {
        v86 = *(double *)(v82 + 16 * v84);
        v87 = v83;
        v88 = v85;
        do
        {
          if (v86 >= *(double *)v88)
            break;
          if (!v82)
            goto LABEL_141;
          v89 = *(_QWORD *)(v88 + 24);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(double *)v88 = v86;
          *(_QWORD *)(v88 + 8) = v89;
          v88 -= 16;
        }
        while (!__CFADD__(v87++, 1));
        ++v84;
        v85 += 16;
        --v83;
      }
      while (v84 != v3);
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v99 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v91 = v12;
      v102 = v9;
      if (v13 >= 2)
      {
        v92 = *v99;
        do
        {
          v93 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v92)
            goto LABEL_145;
          v94 = v91;
          v95 = *(_QWORD *)&v91[16 * v93 + 32];
          v96 = *(_QWORD *)&v91[16 * v13 + 24];
          sub_23DCFF254((double *)(v92 + 16 * v95), (double *)(v92 + 16 * *(_QWORD *)&v91[16 * v13 + 16]), v92 + 16 * v96, __dst);
          if (v1)
            break;
          if (v96 < v95)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v94 = sub_23DDA9670((uint64_t)v94);
          if (v93 >= *((_QWORD *)v94 + 2))
            goto LABEL_134;
          v97 = &v94[16 * v93 + 32];
          *(_QWORD *)v97 = v95;
          *((_QWORD *)v97 + 1) = v96;
          v98 = *((_QWORD *)v94 + 2);
          if (v13 > v98)
            goto LABEL_135;
          memmove(&v94[16 * v13 + 16], &v94[16 * v13 + 32], 16 * (v98 - v13));
          v91 = v94;
          *((_QWORD *)v94 + 2) = v98 - 1;
          v13 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v102 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    sub_23DCFF9E8();
    v8 = sub_23DDC67DC();
    *(_QWORD *)(v8 + 16) = v7;
    v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v100 = *a1 - 16;
  v101 = *a1 + 32;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v103 = v6;
  v104 = v3;
  v105 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 16 * v10);
      v16 = *(double *)(v11 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v101 + 16 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v15 < v16 == *v17 >= v19)
            break;
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v20 = (__int128 *)(v100 + 16 * v10);
          v21 = v10;
          v22 = v14;
          v23 = (__int128 *)(v11 + 16 * v14);
          do
          {
            if (v22 != --v21)
            {
              if (!v11)
                goto LABEL_144;
              v24 = *v23;
              *v23 = *v20;
              *v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v25 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v25 >= v3)
      v25 = v3;
    if (v25 < v14)
      break;
    if (v10 != v25)
    {
      v26 = v100 + 16 * v10;
      do
      {
        v27 = *(double *)(v11 + 16 * v10);
        v28 = v14;
        v29 = v26;
        do
        {
          if (v27 >= *(double *)v29)
            break;
          if (!v11)
            goto LABEL_142;
          v30 = *(_QWORD *)(v29 + 24);
          *(_OWORD *)(v29 + 16) = *(_OWORD *)v29;
          *(double *)v29 = v27;
          *(_QWORD *)(v29 + 8) = v30;
          v29 -= 16;
          ++v28;
        }
        while (v10 != v28);
        ++v10;
        v26 += 16;
      }
      while (v10 != v25);
      v10 = v25;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_23DDA92F0(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v32 = *((_QWORD *)v12 + 2);
    v31 = *((_QWORD *)v12 + 3);
    v13 = v32 + 1;
    v11 = v105;
    if (v32 >= v31 >> 1)
    {
      v81 = sub_23DDA92F0((char *)(v31 > 1), v32 + 1, 1, v12);
      v11 = v105;
      v12 = v81;
    }
    *((_QWORD *)v12 + 2) = v13;
    v33 = v12 + 32;
    v34 = &v12[16 * v32 + 32];
    *(_QWORD *)v34 = v14;
    *((_QWORD *)v34 + 1) = v10;
    if (v32)
    {
      while (1)
      {
        v35 = v13 - 1;
        if (v13 >= 4)
        {
          v40 = &v33[16 * v13];
          v41 = *((_QWORD *)v40 - 8);
          v42 = *((_QWORD *)v40 - 7);
          v46 = __OFSUB__(v42, v41);
          v43 = v42 - v41;
          if (v46)
            goto LABEL_120;
          v45 = *((_QWORD *)v40 - 6);
          v44 = *((_QWORD *)v40 - 5);
          v46 = __OFSUB__(v44, v45);
          v38 = v44 - v45;
          v39 = v46;
          if (v46)
            goto LABEL_121;
          v47 = v13 - 2;
          v48 = &v33[16 * v13 - 32];
          v50 = *(_QWORD *)v48;
          v49 = *((_QWORD *)v48 + 1);
          v46 = __OFSUB__(v49, v50);
          v51 = v49 - v50;
          if (v46)
            goto LABEL_123;
          v46 = __OFADD__(v38, v51);
          v52 = v38 + v51;
          if (v46)
            goto LABEL_126;
          if (v52 >= v43)
          {
            v70 = &v33[16 * v35];
            v72 = *(_QWORD *)v70;
            v71 = *((_QWORD *)v70 + 1);
            v46 = __OFSUB__(v71, v72);
            v73 = v71 - v72;
            if (v46)
              goto LABEL_130;
            v63 = v38 < v73;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v64 = *((_QWORD *)v12 + 4);
            v65 = *((_QWORD *)v12 + 5);
            v46 = __OFSUB__(v65, v64);
            v57 = v65 - v64;
            v58 = v46;
            goto LABEL_77;
          }
          v37 = *((_QWORD *)v12 + 4);
          v36 = *((_QWORD *)v12 + 5);
          v46 = __OFSUB__(v36, v37);
          v38 = v36 - v37;
          v39 = v46;
        }
        if ((v39 & 1) != 0)
          goto LABEL_122;
        v47 = v13 - 2;
        v53 = &v33[16 * v13 - 32];
        v55 = *(_QWORD *)v53;
        v54 = *((_QWORD *)v53 + 1);
        v56 = __OFSUB__(v54, v55);
        v57 = v54 - v55;
        v58 = v56;
        if (v56)
          goto LABEL_125;
        v59 = &v33[16 * v35];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v46 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if (v46)
          goto LABEL_128;
        if (__OFADD__(v57, v62))
          goto LABEL_129;
        if (v57 + v62 >= v38)
        {
          v63 = v38 < v62;
LABEL_83:
          if (v63)
            v35 = v47;
          goto LABEL_85;
        }
LABEL_77:
        if ((v58 & 1) != 0)
          goto LABEL_124;
        v66 = &v33[16 * v35];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v46 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v46)
          goto LABEL_127;
        if (v69 < v57)
          goto LABEL_15;
LABEL_85:
        v74 = v35 - 1;
        if (v35 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v75 = v12;
        v76 = &v33[16 * v74];
        v77 = *(_QWORD *)v76;
        v78 = &v33[16 * v35];
        v79 = *((_QWORD *)v78 + 1);
        sub_23DCFF254((double *)(v11 + 16 * *(_QWORD *)v76), (double *)(v11 + 16 * *(_QWORD *)v78), v11 + 16 * v79, __dst);
        if (v1)
          goto LABEL_93;
        if (v79 < v77)
          goto LABEL_117;
        if (v35 > *((_QWORD *)v75 + 2))
          goto LABEL_118;
        *(_QWORD *)v76 = v77;
        *(_QWORD *)&v33[16 * v74 + 8] = v79;
        v80 = *((_QWORD *)v75 + 2);
        if (v35 >= v80)
          goto LABEL_119;
        v12 = v75;
        v13 = v80 - 1;
        memmove(&v33[16 * v35], v78 + 16, 16 * (v80 - 1 - v35));
        *((_QWORD *)v75 + 2) = v80 - 1;
        v11 = v105;
        if (v80 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v103;
    v3 = v104;
    if (v10 >= v104)
    {
      v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = sub_23DDC6AB8();
  __break(1u);
  return result;
}

uint64_t sub_23DCFF254(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v16 = &v4[2 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v17 = (double *)(a3 - 16);
        v18 = v6;
        while (1)
        {
          v19 = v17 + 2;
          v20 = *(v18 - 2);
          v18 -= 2;
          if (*(v16 - 2) >= v20)
          {
            v22 = v16 - 2;
            if (v19 < v16 || v17 >= v16 || v19 != v16)
              *(_OWORD *)v17 = *((_OWORD *)v16 - 1);
            v18 = v6;
            v16 -= 2;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v19 != v6 || v17 >= v6)
              *(_OWORD *)v17 = *(_OWORD *)v18;
            v24 = v18;
            if (v18 <= v7)
              goto LABEL_42;
          }
          v17 -= 2;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[2 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 2;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 2;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 2;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_23DDA9408((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

size_t sub_23DCFF4CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;

  sub_23DCFB328(0, &qword_256CFC4B0, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v44 - v6;
  v8 = type metadata accessor for MultilayerCircularGaugeLayer();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v49 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v52 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v48 = (v11 + 32) & ~v11;
  v50 = MEMORY[0x24BEE4AF8] + v48;
  v46 = v11 | 7;
  result = swift_bridgeObjectRetain();
  v53 = 0;
  v51 = 0;
  v13 = 0;
  v47 = v7;
LABEL_4:
  v16 = *(_QWORD *)(a1 + 16);
  if (v13 != v16)
  {
    if (v13 < v16)
    {
      while (1)
      {
        v17 = *(_QWORD *)(a1 + 32 + 8 * v13);
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRelease();
        if (v17)
          break;
LABEL_9:
        ++v13;
        v18 = *(_QWORD *)(a1 + 16);
        if (v13 == v18)
          goto LABEL_37;
        if (v13 >= v18)
          goto LABEL_42;
      }
      v14 = *(_QWORD *)(v17 + 16);
      if (!v14)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v4, 1, 1, v8);
        result = sub_23DCFEA1C((uint64_t)v4, &qword_256CFC4B0, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer);
        goto LABEL_9;
      }
      v15 = 0;
      ++v13;
      while (1)
      {
        if (v15 >= v14)
          goto LABEL_43;
        v19 = *(_QWORD *)(v9 + 72);
        v53 = v15;
        sub_23DCF58EC(v17 + v48 + v19 * v15, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for MultilayerCircularGaugeLayer);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
        sub_23DCFF938((uint64_t)v4, (uint64_t)v7);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
          goto LABEL_38;
        result = sub_23DCFEA60((uint64_t)v7, v49);
        v20 = v51;
        if (!v51)
          break;
        v21 = v52;
LABEL_35:
        v35 = __OFSUB__(v20, 1);
        v36 = v20 - 1;
        if (v35)
          goto LABEL_44;
        v51 = v36;
        ++v53;
        v37 = v8;
        v38 = v21;
        v39 = v50;
        result = sub_23DCFEA60(v49, v50);
        v50 = v39 + v19;
        v52 = v38;
        v8 = v37;
        v7 = v47;
        v14 = *(_QWORD *)(v17 + 16);
        v15 = v53;
        if (v53 == v14)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v4, 1, 1, v8);
          result = sub_23DCFEA1C((uint64_t)v4, &qword_256CFC4B0, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer);
          goto LABEL_4;
        }
      }
      v22 = v52[3];
      if ((uint64_t)((v22 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_46;
      v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
      if (v23 <= 1)
        v24 = 1;
      else
        v24 = v23;
      sub_23DCFB328(0, &qword_256CFC4B8, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v25 = v48;
      v51 = v24;
      v21 = (_QWORD *)swift_allocObject();
      result = _swift_stdlib_malloc_size(v21);
      if (!v19)
        goto LABEL_47;
      v26 = result - v25;
      if (result - v25 == 0x8000000000000000 && v19 == -1)
        goto LABEL_48;
      v28 = v25;
      v29 = v26 / v19;
      v30 = (unint64_t)v52;
      v21[2] = v51;
      v21[3] = 2 * (v26 / v19);
      v31 = (unint64_t)v21 + v25;
      v32 = *(_QWORD *)(v30 + 24) >> 1;
      v33 = v32 * v19;
      if (!*(_QWORD *)(v30 + 16))
      {
LABEL_34:
        v50 = v31 + v33;
        v34 = (v29 & 0x7FFFFFFFFFFFFFFFLL) - v32;
        result = swift_release();
        v20 = v34;
        goto LABEL_35;
      }
      if ((unint64_t)v21 < v30 || v31 >= v30 + v28 + v33)
      {
        v50 = v31;
        v51 = v26 / v19;
        v45 = v32 * v19;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (v21 == v52)
        {
LABEL_33:
          v52[2] = 0;
          goto LABEL_34;
        }
        v50 = v31;
        v51 = v26 / v19;
        v45 = v32 * v19;
        swift_arrayInitWithTakeBackToFront();
      }
      v33 = v45;
      v31 = v50;
      v29 = v51;
      goto LABEL_33;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_37:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
LABEL_38:
  swift_bridgeObjectRelease();
  v40 = v52;
  swift_bridgeObjectRelease();
  result = sub_23DCFEA1C((uint64_t)v7, &qword_256CFC4B0, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer);
  v41 = v40[3];
  if (v41 < 2)
    return (size_t)v40;
  v42 = v41 >> 1;
  v35 = __OFSUB__(v42, v51);
  v43 = v42 - v51;
  if (!v35)
  {
    v40[2] = v43;
    return (size_t)v40;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_23DCFF938(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DCFB328(0, &qword_256CFC4B0, (uint64_t (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

int8x16_t sub_23DCFF994@<Q0>(uint64_t *a1@<X0>, int8x16_t *a2@<X8>)
{
  int64x2_t v8;
  int8x16_t v9;
  int8x16_t result;

  __asm { FMOV            V1.2D, #1.5 }
  *(_QWORD *)&_Q1.f64[0] = *a1;
  __asm { FMOV            V2.2D, #-1.5 }
  *(_QWORD *)&_Q2.f64[1] = *a1;
  v8 = vcgtq_f64(_Q2, _Q1);
  *(int32x2_t *)&_Q2.f64[0] = vrev64_s32(vmovn_s64(v8));
  v9.i64[0] = SLODWORD(_Q2.f64[0]);
  v9.i64[1] = SHIDWORD(_Q2.f64[0]);
  result = vbslq_s8((int8x16_t)v8, (int8x16_t)xmmword_23DDC7850, vbslq_s8(v9, (int8x16_t)xmmword_23DDC7840, (int8x16_t)vdupq_lane_s64(*a1, 0)));
  *a2 = result;
  return result;
}

void sub_23DCFF9E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC4C0)
  {
    v0 = sub_23DDC66B0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC4C0);
  }
}

BOOL static BalanceMetricsTimeScope.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t BalanceMetricsTimeScope.hash(into:)()
{
  return sub_23DDC6C5C();
}

uint64_t BalanceMetricsTimeScope.hashValue.getter()
{
  sub_23DDC6C50();
  sub_23DDC6C5C();
  return sub_23DDC6C80();
}

BOOL sub_23DCFFAC8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23DCFFAE0()
{
  sub_23DDC6C50();
  sub_23DDC6C5C();
  return sub_23DDC6C80();
}

uint64_t sub_23DCFFB24()
{
  return sub_23DDC6C5C();
}

uint64_t sub_23DCFFB4C()
{
  sub_23DDC6C50();
  sub_23DDC6C5C();
  return sub_23DDC6C80();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BalanceMetricsTimeScope(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BalanceMetricsTimeScope(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DCFFC78 + 4 * byte_23DDC78A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DCFFCAC + 4 * byte_23DDC78A0[v4]))();
}

uint64_t sub_23DCFFCAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DCFFCB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DCFFCBCLL);
  return result;
}

uint64_t sub_23DCFFCC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DCFFCD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DCFFCD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DCFFCDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DCFFCE8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_23DCFFCF4(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for BalanceMetricsTimeScope()
{
  return &type metadata for BalanceMetricsTimeScope;
}

unint64_t sub_23DCFFD10(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DD02C6C();
  v2 = (_QWORD *)sub_23DDC6AF4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = sub_23DD76A08((uint64_t)v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DCFFE14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  sub_23DD02D3C();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DD02DFC();
  v7 = sub_23DDC6AF4();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v3 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_23DCF58EC(v13, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DD02D3C);
    result = sub_23DD76970((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = sub_23DDC54C8();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v6, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v6[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DCFFFA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  sub_23DD02FC0();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DD03024();
  v7 = sub_23DDC6AF4();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = &v6[*(int *)(v3 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v25[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_23DCF58EC(v13, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DD02FC0);
    result = sub_23DD768A4((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = sub_23DDC53A8();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v6, v19);
    v20 = v8[7] + 16 * v17;
    v21 = v10[8];
    *(_QWORD *)v20 = *(_QWORD *)v10;
    *(_BYTE *)(v20 + 8) = v21;
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t BalanceWidgetDataProvider.init(healthStore:gregorianCalendar:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v6;
  char *v7;
  uint64_t v8;

  *a3 = a1;
  sub_23DDC569C();
  v6 = a1;
  a3[1] = sub_23DDC5690();
  v7 = (char *)a3 + *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  v8 = sub_23DDC51E0();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a2, v8);
}

uint64_t type metadata accessor for BalanceWidgetDataProvider()
{
  uint64_t result;

  result = qword_2543264B0;
  if (!qword_2543264B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BalanceWidgetDataProvider.loadSummaries(for:isLiveContent:isRetrying:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v5 + 128) = a2;
  *(_QWORD *)(v5 + 136) = v4;
  *(_BYTE *)(v5 + 505) = a4;
  *(_BYTE *)(v5 + 504) = a3;
  *(_QWORD *)(v5 + 120) = a1;
  v6 = sub_23DDC6A88();
  *(_QWORD *)(v5 + 144) = v6;
  *(_QWORD *)(v5 + 152) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 160) = swift_task_alloc();
  v7 = sub_23DDC545C();
  *(_QWORD *)(v5 + 168) = v7;
  *(_QWORD *)(v5 + 176) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 184) = swift_task_alloc();
  v8 = sub_23DDC512C();
  *(_QWORD *)(v5 + 192) = v8;
  *(_QWORD *)(v5 + 200) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 208) = swift_task_alloc();
  v9 = sub_23DDC5444();
  *(_QWORD *)(v5 + 216) = v9;
  *(_QWORD *)(v5 + 224) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 232) = swift_task_alloc();
  sub_23DD01A68(0, v10);
  *(_QWORD *)(v5 + 240) = v11;
  *(_QWORD *)(v5 + 248) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 256) = swift_task_alloc();
  *(_QWORD *)(v5 + 264) = swift_task_alloc();
  sub_23DD020E0();
  *(_QWORD *)(v5 + 272) = v12;
  *(_QWORD *)(v5 + 280) = swift_task_alloc();
  v13 = sub_23DDC5570();
  *(_QWORD *)(v5 + 288) = v13;
  *(_QWORD *)(v5 + 296) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v5 + 304) = swift_task_alloc();
  *(_QWORD *)(v5 + 312) = swift_task_alloc();
  v14 = sub_23DDC5660();
  *(_QWORD *)(v5 + 320) = v14;
  *(_QWORD *)(v5 + 328) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v5 + 336) = swift_task_alloc();
  v15 = sub_23DDC5330();
  *(_QWORD *)(v5 + 344) = v15;
  *(_QWORD *)(v5 + 352) = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v5 + 360) = swift_task_alloc();
  *(_QWORD *)(v5 + 368) = swift_task_alloc();
  *(_QWORD *)(v5 + 376) = swift_task_alloc();
  v16 = sub_23DDC57A4();
  *(_QWORD *)(v5 + 384) = v16;
  *(_QWORD *)(v5 + 392) = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v5 + 400) = swift_task_alloc();
  *(_QWORD *)(v5 + 408) = swift_task_alloc();
  *(_QWORD *)(v5 + 416) = swift_task_alloc();
  *(_QWORD *)(v5 + 424) = swift_task_alloc();
  *(_QWORD *)(v5 + 432) = swift_task_alloc();
  *(_QWORD *)(v5 + 440) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23DD00440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 128);
  if (*(_BYTE *)(v0 + 504) == 1)
  {
    v4 = *(_QWORD *)(v0 + 376);
    sub_23DDC578C();
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
    v5(v4, v3, v1);
    v6 = sub_23DDC5798();
    v7 = sub_23DDC68F0();
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 440);
    v10 = *(_QWORD *)(v0 + 384);
    v11 = *(_QWORD *)(v0 + 392);
    v12 = *(_QWORD *)(v0 + 376);
    v13 = *(_QWORD *)(v0 + 344);
    if (v8)
    {
      v55 = *(_QWORD *)(v0 + 440);
      v49 = *(_QWORD *)(v0 + 352);
      v57 = v5;
      v14 = swift_slowAlloc();
      v52 = v11;
      v15 = swift_slowAlloc();
      v59 = v15;
      *(_DWORD *)v14 = 136446466;
      *(_QWORD *)(v0 + 104) = sub_23DD02158(0xD000000000000019, 0x800000023DDC7930, &v59);
      sub_23DDC698C();
      *(_WORD *)(v14 + 12) = 2082;
      sub_23DCF535C(&qword_254326670, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FCF0], MEMORY[0x24BE3FD20]);
      v16 = sub_23DDC6BE4();
      *(_QWORD *)(v0 + 112) = sub_23DD02158(v16, v17, &v59);
      sub_23DDC698C();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v12, v13);
      _os_log_impl(&dword_23DCF2000, v6, v7, "[%{public}s] beginning query for days: %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v15, -1, -1);
      v18 = v14;
      v5 = v57;
      MEMORY[0x242643C80](v18, -1, -1);

      v19 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v19(v55, v10);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 344));

      v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v19(v9, v10);
    }
    *(_QWORD *)(v0 + 448) = v19;
    v5(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 344));
    sub_23DDC5654();
    v34 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 456) = v34;
    *v34 = v0;
    v34[1] = sub_23DD00B18;
    return sub_23DDC5648();
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 360);
    sub_23DDC578C();
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
    v58(v20, v3, v1);
    v21 = sub_23DDC5798();
    v22 = sub_23DDC68F0();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 424);
    v25 = *(_QWORD *)(v0 + 384);
    v26 = *(_QWORD *)(v0 + 392);
    v28 = *(_QWORD *)(v0 + 352);
    v27 = *(_QWORD *)(v0 + 360);
    v29 = *(_QWORD *)(v0 + 344);
    if (v23)
    {
      v56 = *(_QWORD *)(v0 + 384);
      v30 = swift_slowAlloc();
      v53 = v26;
      v31 = swift_slowAlloc();
      v59 = v31;
      *(_DWORD *)v30 = 136446466;
      *(_QWORD *)(v0 + 88) = sub_23DD02158(0xD000000000000019, 0x800000023DDC7930, &v59);
      sub_23DDC698C();
      *(_WORD *)(v30 + 12) = 2082;
      sub_23DCF535C(&qword_254326670, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FCF0], MEMORY[0x24BE3FD20]);
      v32 = sub_23DDC6BE4();
      *(_QWORD *)(v0 + 32) = sub_23DD02158(v32, v33, &v59);
      sub_23DDC698C();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
      _os_log_impl(&dword_23DCF2000, v21, v22, "[%{public}s] returning fake data for days: %{public}s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v31, -1, -1);
      MEMORY[0x242643C80](v30, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v24, v56);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v28 + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 344));

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v36 = *(_QWORD *)(v0 + 368);
    v37 = *(_QWORD *)(v0 + 344);
    v38 = *(_QWORD *)(v0 + 264);
    v39 = *(_QWORD *)(v0 + 240);
    v51 = *(_QWORD *)(v0 + 248);
    v54 = *(_QWORD *)(v0 + 256);
    v40 = *(_QWORD *)(v0 + 232);
    v41 = *(_QWORD *)(v0 + 208);
    v48 = *(_QWORD *)(v0 + 224);
    v50 = *(_QWORD *)(v0 + 216);
    v46 = *(_QWORD *)(v0 + 200);
    v42 = *(_QWORD *)(v0 + 184);
    v47 = *(_QWORD *)(v0 + 192);
    v44 = *(_QWORD *)(v0 + 176);
    v45 = *(_QWORD *)(v0 + 168);
    v43 = *(_QWORD *)(v0 + 128);
    sub_23DDC5678();
    v58(v36, v43, v37);
    sub_23DDC5438();
    sub_23DDC542C();
    sub_23DDC5114();
    sub_23DDC5450();
    sub_23DDC566C();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v45);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v41, v47);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v40, v50);
    v58(v36, v43, v37);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v54, v38, v39);
    swift_getOpaqueTypeConformance2();
    sub_23DDC67B8();
    sub_23DDC5534();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v38, v39);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23DD00B18()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DD00B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(v0 + 304);
  v1 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  sub_23DDC578C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  v5 = sub_23DDC5798();
  v6 = sub_23DDC68F0();
  if (os_log_type_enabled(v5, v6))
  {
    v26 = *(_QWORD *)(v0 + 384);
    v27 = *(_QWORD *)(v0 + 432);
    v30 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
    v31 = *(_QWORD *)(v0 + 336);
    v28 = *(_QWORD *)(v0 + 328);
    v29 = *(_QWORD *)(v0 + 320);
    v7 = *(_QWORD *)(v0 + 280);
    v24 = *(_QWORD *)(v0 + 296);
    v25 = *(_QWORD *)(v0 + 288);
    v23 = *(_QWORD *)(v0 + 304);
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v32 = v9;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 80) = sub_23DD02158(0xD000000000000019, 0x800000023DDC7930, &v32);
    sub_23DDC698C();
    *(_WORD *)(v8 + 12) = 2082;
    sub_23DDC5558();
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0xE000000000000000;
    sub_23DDC6530();
    sub_23DDC6AA0();
    sub_23DDC67A0();
    sub_23DDC6AA0();
    v10 = *(_QWORD *)(v0 + 16);
    v11 = *(_QWORD *)(v0 + 24);
    sub_23DD027E4(v7);
    *(_QWORD *)(v0 + 96) = sub_23DD02158(v10, v11, &v32);
    sub_23DDC698C();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    _os_log_impl(&dword_23DCF2000, v5, v6, "[%{public}s] received day summary collection for morning index range: %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v9, -1, -1);
    MEMORY[0x242643C80](v8, -1, -1);

    v30(v27, v26);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v31, v29);
  }
  else
  {
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
    v13 = *(_QWORD *)(v0 + 432);
    v14 = *(_QWORD *)(v0 + 384);
    v16 = *(_QWORD *)(v0 + 328);
    v15 = *(_QWORD *)(v0 + 336);
    v17 = *(_QWORD *)(v0 + 320);
    v18 = v5;
    v19 = *(_QWORD *)(v0 + 296);
    v20 = *(_QWORD *)(v0 + 304);
    v21 = *(_QWORD *)(v0 + 288);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
    v12(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 288));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DD00F5C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  _QWORD *v35;
  void (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t, uint64_t);
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v39[2];

  v1 = *(void **)(v0 + 464);
  sub_23DDC578C();
  v2 = v1;
  v3 = v1;
  v4 = sub_23DDC5798();
  v5 = sub_23DDC68D8();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 464);
    v36 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
    v7 = *(_QWORD *)(v0 + 416);
    v8 = *(_QWORD *)(v0 + 384);
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v39[0] = v10;
    *(_DWORD *)v9 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_23DD02158(0xD000000000000019, 0x800000023DDC7930, v39);
    sub_23DDC698C();
    *(_WORD *)(v9 + 12) = 2082;
    *(_QWORD *)(v0 + 64) = v6;
    v11 = v6;
    sub_23DD02790();
    v12 = sub_23DDC677C();
    *(_QWORD *)(v0 + 72) = sub_23DD02158(v12, v13, v39);
    sub_23DDC698C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_23DCF2000, v4, v5, "[%{public}s] error while fetching day summaries: %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v10, -1, -1);
    MEMORY[0x242643C80](v9, -1, -1);

    v36(v7, v8);
  }
  else
  {
    v14 = *(void **)(v0 + 464);
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
    v16 = *(_QWORD *)(v0 + 416);
    v17 = *(_QWORD *)(v0 + 384);

    v15(v16, v17);
  }
  if (*(_BYTE *)(v0 + 505) == 1)
  {
    sub_23DDC578C();
    v18 = sub_23DDC5798();
    v19 = sub_23DDC68D8();
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
    v22 = *(_QWORD *)(v0 + 408);
    v23 = *(_QWORD *)(v0 + 384);
    if (v20)
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v39[0] = v25;
      *(_DWORD *)v24 = 136446210;
      *(_QWORD *)(v0 + 48) = sub_23DD02158(0xD000000000000019, 0x800000023DDC7930, v39);
      sub_23DDC698C();
      _os_log_impl(&dword_23DCF2000, v18, v19, "[%{public}s] already retried once, throwing error", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v25, -1, -1);
      MEMORY[0x242643C80](v24, -1, -1);
    }

    v21(v22, v23);
    swift_willThrow();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 320));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_23DDC578C();
    v27 = sub_23DDC5798();
    v28 = sub_23DDC68F0();
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
    v31 = *(_QWORD *)(v0 + 400);
    v32 = *(_QWORD *)(v0 + 384);
    if (v29)
    {
      v37 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v39[0] = v34;
      *(_DWORD *)v33 = 136446210;
      *(_QWORD *)(v0 + 40) = sub_23DD02158(0xD000000000000019, 0x800000023DDC7930, v39);
      sub_23DDC698C();
      _os_log_impl(&dword_23DCF2000, v27, v28, "[%{public}s] retrying data fetch in 1 sec", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v34, -1, -1);
      MEMORY[0x242643C80](v33, -1, -1);

      v37(v31, v32);
    }
    else
    {

      v30(v31, v32);
    }
    sub_23DDC6A7C();
    v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_256CFC4D8 + dword_256CFC4D8);
    v35 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 472) = v35;
    *v35 = v0;
    v35[1] = sub_23DD01568;
    return v38(1000000000000000000, 0, 0, 0, 1);
  }
}

uint64_t sub_23DD01568()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = (_QWORD *)*v1;
  v2[60] = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[19] + 8))(v2[20], v2[18]);
  if (v0)
    return swift_task_switch();
  v4 = (_QWORD *)swift_task_alloc();
  v2[61] = v4;
  *v4 = v2;
  v4[1] = sub_23DD01614;
  return BalanceWidgetDataProvider.loadSummaries(for:isLiveContent:isRetrying:)(v2[15], v2[16], 1, 1);
}

uint64_t sub_23DD01614()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 496) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DD01678()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 320));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DD017C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 328);
  v1 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 320);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DD01918()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 320));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23DD01A68(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if (!qword_256CFC4D0)
  {
    v2 = MEMORY[0x242643B9C](0, a2, MEMORY[0x24BE40540], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_256CFC4D0);
  }
}

id sub_23DD01AC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id result;
  void *v12;
  char v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  v4 = sub_23DDC57A4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - v9;
  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v12 = result;
    v13 = sub_23DDC68CC();

    if ((v13 & 1) != 0)
    {
      sub_23DDC578C();
      v14 = sub_23DDC5798();
      v15 = sub_23DDC68F0();
      if (os_log_type_enabled(v14, v15))
      {
        v27 = v4;
        v16 = swift_slowAlloc();
        v28 = a1;
        v17 = (uint8_t *)v16;
        v18 = swift_slowAlloc();
        v26 = v2;
        v19 = v18;
        v30 = v18;
        *(_DWORD *)v17 = 136446210;
        v29 = sub_23DD02158(0xD000000000000019, 0x800000023DDC7930, &v30);
        sub_23DDC698C();
        _os_log_impl(&dword_23DCF2000, v14, v15, "[%{public}s] checking feature status", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x242643C80](v19, -1, -1);
        MEMORY[0x242643C80](v17, -1, -1);

        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v27);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      }
      return (id)sub_23DDC5684();
    }
    else
    {
      sub_23DDC578C();
      v20 = sub_23DDC5798();
      v21 = sub_23DDC68F0();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc();
        v27 = v4;
        v23 = (uint8_t *)v22;
        v24 = swift_slowAlloc();
        v28 = a1;
        v25 = v24;
        v30 = v24;
        *(_DWORD *)v23 = 136446210;
        v29 = sub_23DD02158(0xD000000000000019, 0x800000023DDC7930, &v30);
        sub_23DDC698C();
        _os_log_impl(&dword_23DCF2000, v20, v21, "[%{public}s] returning empty feature status", v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x242643C80](v25, -1, -1);
        MEMORY[0x242643C80](v23, -1, -1);

        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v27);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      }
      sub_23DCFFD10(MEMORY[0x24BEE4AF8]);
      return (id)sub_23DDC557C();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23DD01E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = sub_23DDC6A70();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t sub_23DD01EE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  sub_23DDC6A88();
  sub_23DCF535C(&qword_256CFC518, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E10], MEMORY[0x24BEE6E20]);
  sub_23DDC6C2C();
  sub_23DCF535C(&qword_256CFC520, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], MEMORY[0x24BEE6E00]);
  sub_23DDC69B0();
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v4;
  v4(v1, v2);
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_23DD01FF8;
  return sub_23DDC6C38();
}

uint64_t sub_23DD01FF8()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_23DD020A4()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23DD020E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254326750)
  {
    sub_23DDC6530();
    sub_23DCF535C(&qword_254326720, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
    v0 = sub_23DDC66B0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254326750);
  }
}

uint64_t sub_23DD02158(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_23DD02228(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_23DD030A4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_23DD030A4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_23DD02228(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_23DDC6998();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_23DD023E0(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_23DDC6A64();
  if (!v8)
  {
    sub_23DDC6AB8();
    __break(1u);
LABEL_17:
    result = sub_23DDC6B0C();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_23DD023E0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_23DD02474(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23DD02648(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_23DD02648(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_23DD02474(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_23DD025E8(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_23DDC6A1C();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_23DDC6AB8();
      __break(1u);
LABEL_10:
      v2 = sub_23DDC67AC();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_23DDC6B0C();
    __break(1u);
LABEL_14:
    result = sub_23DDC6AB8();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_23DD025E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_23DD030E0();
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_23DD02648(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DD030E0();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

unint64_t sub_23DD02790()
{
  unint64_t result;

  result = qword_256CFC4E0;
  if (!qword_256CFC4E0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_256CFC4E0);
  }
  return result;
}

uint64_t sub_23DD027E4(uint64_t a1)
{
  uint64_t v2;

  sub_23DD020E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeBufferWithCopyOfBuffer for BalanceWidgetDataProvider(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  char *v12;
  char *v13;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[1];
    *((_QWORD *)a1 + 1) = v6;
    v7 = *(int *)(a3 + 24);
    v8 = &a1[v7];
    v9 = (uint64_t)a2 + v7;
    v10 = sub_23DDC51E0();
    v11 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v12 = v4;
    v13 = v6;
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for BalanceWidgetDataProvider(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = sub_23DDC51E0();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for BalanceWidgetDataProvider(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  id v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = a2 + v6;
  v9 = sub_23DDC51E0();
  v10 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v11 = v4;
  v12 = v5;
  v10(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for BalanceWidgetDataProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a2 + 8);
  v10 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  v11 = v9;

  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

_OWORD *initializeWithTake for BalanceWidgetDataProvider(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for BalanceWidgetDataProvider(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23DDC51E0();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for BalanceWidgetDataProvider()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD02AF8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23DDC51E0();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for BalanceWidgetDataProvider()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23DD02B80(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23DDC51E0();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23DD02BF4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC51E0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_23DD02C6C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC4E8)
  {
    type metadata accessor for HKFeatureIdentifier(255);
    sub_23DD02D00();
    sub_23DCF535C(&qword_256CFC188, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DDC74F0);
    v0 = sub_23DDC6B00();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC4E8);
  }
}

unint64_t sub_23DD02D00()
{
  unint64_t result;

  result = qword_256CFC4F0;
  if (!qword_256CFC4F0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256CFC4F0);
  }
  return result;
}

void sub_23DD02D3C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFC4F8)
  {
    sub_23DDC54C8();
    sub_23DD02DA8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFC4F8);
  }
}

void sub_23DD02DA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC500)
  {
    sub_23DCFF9E8();
    v0 = sub_23DDC67E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC500);
  }
}

void sub_23DD02DFC()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_256CFC508)
  {
    sub_23DDC54C8();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0];
    sub_23DD02DA8();
    sub_23DCF535C(&qword_2543266C0, v0, MEMORY[0x24BE401D8]);
    v1 = sub_23DDC6B00();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_256CFC508);
  }
}

unint64_t sub_23DD02E90(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  double *i;
  double v5;
  double v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_23DD02F60();
    v3 = (_QWORD *)sub_23DDC6AF4();
    for (i = (double *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_23DD7693C(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(double *)(v3[6] + v9) = v5;
      *(double *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

void sub_23DD02F60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC510)
  {
    v0 = sub_23DDC6B00();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC510);
  }
}

void sub_23DD02FC0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_254326698)
  {
    sub_23DDC53A8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_254326698);
  }
}

void sub_23DD03024()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254326770)
  {
    sub_23DDC53A8();
    sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
    v0 = sub_23DDC6B00();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254326770);
  }
}

uint64_t sub_23DD030A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_23DD030E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2543267D8[0])
  {
    v0 = sub_23DDC6BF0();
    if (!v1)
      atomic_store(v0, qword_2543267D8);
  }
}

uint64_t WidgetFamily.balanceWidget(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v50 = a1;
  v54 = a2;
  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF380];
  sub_23DD03944(0, &qword_256CFC528, MEMORY[0x24BDEF380]);
  v51 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v41 - v4;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDEF3B8];
  sub_23DD03944(0, &qword_256CFC530, MEMORY[0x24BDEF3B8]);
  v53 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v52 = (char *)&v41 - v8;
  v9 = type metadata accessor for BalanceWidgetSystemSmallView(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for BalanceWidgetAccessoryRectangularView(0);
  MEMORY[0x24BDAC7A8](v46);
  v42 = (uint64_t *)((char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23DD03E64(0, &qword_256CFC538, v2);
  v49 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v41 - v14;
  sub_23DD039A4(0, &qword_256CFC548, v2);
  v44 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v45 = (uint64_t)&v41 - v17;
  sub_23DD039A4(0, &qword_256CFC540, v6);
  v19 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v47 = (char *)&v41 - v20;
  v21 = type metadata accessor for BalanceWidgetViewModel();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for BalanceWidgetAccessoryCircularView(0);
  MEMORY[0x24BDAC7A8](v43);
  v25 = (char *)&v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_23DDC6590();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v41 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v48, v26);
  v30 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v29, v26);
  if (v30 == *MEMORY[0x24BDFAED8])
  {
    sub_23DCF58EC(v50, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
    *(_QWORD *)&v11[*(int *)(v9 + 20)] = swift_getKeyPath();
    sub_23DCFB328(0, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_storeEnumTagMultiPayload();
    sub_23DCF8B4C((uint64_t)v23, (uint64_t)v11);
    v31 = type metadata accessor for BalanceWidgetSystemSmallView;
    sub_23DCF58EC((uint64_t)v11, (uint64_t)v5, type metadata accessor for BalanceWidgetSystemSmallView);
    swift_storeEnumTagMultiPayload();
    sub_23DCF535C(&qword_256CFC550, type metadata accessor for BalanceWidgetSystemSmallView, (uint64_t)&unk_23DDC8C50);
    v32 = (uint64_t)v52;
    sub_23DDC5E58();
    sub_23DD03C70(v32, (uint64_t)v15, (uint64_t)&qword_256CFC530, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_23DD03944);
    swift_storeEnumTagMultiPayload();
    sub_23DD03A0C();
    sub_23DD03AB4();
    sub_23DDC5E58();
    sub_23DD03CC4(v32, (uint64_t)&qword_256CFC530, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_23DD03944);
    v33 = (uint64_t)v11;
LABEL_7:
    v36 = v31;
    return sub_23DCF59A8(v33, v36);
  }
  v34 = (uint64_t)v52;
  v48 = v19;
  if (v30 != *MEMORY[0x24BDFAF00])
  {
    if (v30 != *MEMORY[0x24BDFAF08])
    {
      swift_storeEnumTagMultiPayload();
      sub_23DCF535C(&qword_256CFC550, type metadata accessor for BalanceWidgetSystemSmallView, (uint64_t)&unk_23DDC8C50);
      sub_23DDC5E58();
      sub_23DD03C70(v34, (uint64_t)v15, (uint64_t)&qword_256CFC530, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_23DD03944);
      swift_storeEnumTagMultiPayload();
      sub_23DD03A0C();
      sub_23DD03AB4();
      sub_23DDC5E58();
      sub_23DD03CC4(v34, (uint64_t)&qword_256CFC530, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_23DD03944);
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    }
    sub_23DCF58EC(v50, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
    KeyPath = swift_getKeyPath();
    v38 = (uint64_t)v42;
    *v42 = KeyPath;
    sub_23DCFB328(0, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    swift_storeEnumTagMultiPayload();
    sub_23DCF8B4C((uint64_t)v23, v38 + *(int *)(v46 + 20));
    v31 = type metadata accessor for BalanceWidgetAccessoryRectangularView;
    sub_23DCF58EC(v38, v45, type metadata accessor for BalanceWidgetAccessoryRectangularView);
    swift_storeEnumTagMultiPayload();
    sub_23DCF535C(&qword_256CFC560, type metadata accessor for BalanceWidgetAccessoryCircularView, (uint64_t)&unk_23DDCBB04);
    sub_23DCF535C(&qword_256CFC568, type metadata accessor for BalanceWidgetAccessoryRectangularView, (uint64_t)&unk_23DDC7AC8);
    v39 = (uint64_t)v47;
    sub_23DDC5E58();
    sub_23DD03C70(v39, (uint64_t)v15, (uint64_t)&qword_256CFC540, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_23DD039A4);
    swift_storeEnumTagMultiPayload();
    sub_23DD03A0C();
    sub_23DD03AB4();
    sub_23DDC5E58();
    sub_23DD03CC4(v39, (uint64_t)&qword_256CFC540, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_23DD039A4);
    v33 = v38;
    goto LABEL_7;
  }
  sub_23DCF58EC(v50, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
  *(_QWORD *)&v25[*(int *)(v43 + 20)] = swift_getKeyPath();
  sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  sub_23DCF8B4C((uint64_t)v23, (uint64_t)v25);
  sub_23DCF58EC((uint64_t)v25, v45, type metadata accessor for BalanceWidgetAccessoryCircularView);
  swift_storeEnumTagMultiPayload();
  sub_23DCF535C(&qword_256CFC560, type metadata accessor for BalanceWidgetAccessoryCircularView, (uint64_t)&unk_23DDCBB04);
  sub_23DCF535C(&qword_256CFC568, type metadata accessor for BalanceWidgetAccessoryRectangularView, (uint64_t)&unk_23DDC7AC8);
  v35 = (uint64_t)v47;
  sub_23DDC5E58();
  sub_23DD03C70(v35, (uint64_t)v15, (uint64_t)&qword_256CFC540, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_23DD039A4);
  swift_storeEnumTagMultiPayload();
  sub_23DD03A0C();
  sub_23DD03AB4();
  sub_23DDC5E58();
  sub_23DD03CC4(v35, (uint64_t)&qword_256CFC540, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sub_23DD039A4);
  v33 = (uint64_t)v25;
  v36 = type metadata accessor for BalanceWidgetAccessoryCircularView;
  return sub_23DCF59A8(v33, v36);
}

void sub_23DD03944(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for BalanceWidgetSystemSmallView(255);
    v7 = a3(a1, v6, MEMORY[0x24BDF5158]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_23DD039A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for BalanceWidgetAccessoryCircularView(255);
    v7 = type metadata accessor for BalanceWidgetAccessoryRectangularView(255);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t sub_23DD03A0C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFC558;
  if (!qword_256CFC558)
  {
    sub_23DD039A4(255, &qword_256CFC540, MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFC560, type metadata accessor for BalanceWidgetAccessoryCircularView, (uint64_t)&unk_23DDCBB04);
    v3[1] = sub_23DCF535C(&qword_256CFC568, type metadata accessor for BalanceWidgetAccessoryRectangularView, (uint64_t)&unk_23DDC7AC8);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFC558);
  }
  return result;
}

unint64_t sub_23DD03AB4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFC570;
  if (!qword_256CFC570)
  {
    sub_23DD03944(255, &qword_256CFC530, MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFC550, type metadata accessor for BalanceWidgetSystemSmallView, (uint64_t)&unk_23DDC8C50);
    v3[1] = MEMORY[0x24BDF5138];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFC570);
  }
  return result;
}

uint64_t sub_23DD03B44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = sub_23DDC6590();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD359DC((uint64_t)v8);
  WidgetFamily.balanceWidget(for:)(v2 + *(int *)(a1 + 20), a2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id sub_23DD03BDC@<X0>(uint64_t a1@<X8>)
{
  return sub_23DD29B08(a1);
}

uint64_t sub_23DD03BFC()
{
  sub_23DDC5C9C();
  type metadata accessor for BalanceWidgetSystemSmallSpecs();
  sub_23DDC5CA8();
  return sub_23DDC5D38();
}

id sub_23DD03C50@<X0>(uint64_t a1@<X8>)
{
  return sub_23DD29B08(a1);
}

uint64_t sub_23DD03C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, _QWORD))
{
  uint64_t v6;

  v6 = a4(0, a3, MEMORY[0x24BDEF3B8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_23DD03CC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, _QWORD))
{
  uint64_t v4;

  v4 = a3(0, a2, MEMORY[0x24BDEF3B8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

int *sub_23DD03D0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *result;
  int *v7;
  unsigned __int8 v8;
  uint64_t v9;

  v2 = sub_23DDC656C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC5D38();
  result = (int *)objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v7 = result;
    v8 = objc_msgSend(result, sel_isAppleWatch);

    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
    result = (int *)type metadata accessor for BalanceWidgetAccessoryCircularSpecs();
    *(_BYTE *)(a1 + result[5]) = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_23DD03DEC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFC590;
  if (!qword_256CFC590)
  {
    sub_23DD03E64(255, &qword_256CFC598, MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_23DD03A0C();
    v3[1] = sub_23DD03AB4();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFC590);
  }
  return result;
}

void sub_23DD03E64(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v6 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))MEMORY[0x24BDEF3B8];
    sub_23DD039A4(255, &qword_256CFC540, MEMORY[0x24BDEF3B8]);
    v8 = v7;
    sub_23DD03944(255, &qword_256CFC530, v6);
    v10 = a3(a1, v8, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t *sub_23DD03EF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, _QWORD, uint64_t, int *);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v82;
  uint64_t v83;
  char *v84;
  char *v85;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    v9 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_23DCFB328(0, &qword_2543263D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_23DDC6590();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_23DDC5330();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(_QWORD *)&v11[v14[5]] = *(_QWORD *)&v12[v14[5]];
    v15 = v14[6];
    v16 = &v11[v15];
    v17 = &v12[v15];
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      swift_bridgeObjectRetain();
    }
    else
    {
      v18 = sub_23DDC55A0();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
    }
    swift_storeEnumTagMultiPayload();
    v21 = v14[7];
    v22 = &v11[v21];
    v23 = &v12[v21];
    v24 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v25 = *((_QWORD *)v24 - 1);
    v82 = a1;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v25 + 48))(v23, 1, v24))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v27 = sub_23DDC512C();
      v83 = v25;
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      v28(v22, v23, v27);
      v29 = v24[5];
      v30 = &v22[v29];
      v31 = &v23[v29];
      v28(&v22[v29], &v23[v29], v27);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v28(&v30[*(int *)(v32 + 36)], &v31[*(int *)(v32 + 36)], v27);
      v33 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v30[v33[5]] = *(_QWORD *)&v31[v33[5]];
      *(_QWORD *)&v30[v33[6]] = *(_QWORD *)&v31[v33[6]];
      *(_QWORD *)&v30[v33[7]] = *(_QWORD *)&v31[v33[7]];
      v34 = v24[6];
      v35 = &v22[v34];
      v36 = &v23[v34];
      *(_OWORD *)v35 = *(_OWORD *)v36;
      v35[16] = v36[16];
      v22[v24[7]] = v23[v24[7]];
      v22[v24[8]] = v23[v24[8]];
      v22[v24[9]] = v23[v24[9]];
      v37 = v24[10];
      v38 = &v22[v37];
      v39 = &v23[v37];
      v40 = *((_QWORD *)v39 + 1);
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *((_QWORD *)v38 + 1) = v40;
      v41 = v24[11];
      v42 = &v22[v41];
      v43 = &v23[v41];
      v44 = *((_QWORD *)v43 + 1);
      *(_QWORD *)v42 = *(_QWORD *)v43;
      *((_QWORD *)v42 + 1) = v44;
      v45 = *(void (**)(char *, _QWORD, uint64_t, int *))(v83 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45(v22, 0, 1, v24);
    }
    v46 = v14[8];
    v47 = &v11[v46];
    v48 = &v12[v46];
    *(_QWORD *)&v11[v46] = *(_QWORD *)&v12[v46];
    v49 = type metadata accessor for OvernightMetricsChartPointCollection();
    v50 = *(int *)(v49 + 20);
    v84 = &v47[v50];
    v51 = &v48[v50];
    v52 = sub_23DDC51E0();
    v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
    swift_bridgeObjectRetain();
    v53(v84, v51, v52);
    *(_QWORD *)&v47[*(int *)(v49 + 24)] = *(_QWORD *)&v48[*(int *)(v49 + 24)];
    *(_QWORD *)&v11[v14[9]] = *(_QWORD *)&v12[v14[9]];
    *(_QWORD *)&v11[v14[10]] = *(_QWORD *)&v12[v14[10]];
    v54 = v14[11];
    v55 = &v11[v54];
    v56 = &v12[v54];
    v57 = sub_23DDC512C();
    v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v58(v55, v56, v57);
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v60 = v59;
    v58(&v55[*(int *)(v59 + 36)], &v56[*(int *)(v59 + 36)], v57);
    v61 = v14[12];
    v62 = &v11[v61];
    v63 = &v12[v61];
    v58(&v11[v61], &v12[v61], v57);
    v58(&v62[*(int *)(v60 + 36)], &v63[*(int *)(v60 + 36)], v57);
    *(_QWORD *)&v11[v14[13]] = *(_QWORD *)&v12[v14[13]];
    *(_QWORD *)&v11[v14[14]] = *(_QWORD *)&v12[v14[14]];
    v64 = type metadata accessor for BalanceWidgetViewModel();
    v65 = *(int *)(v64 + 20);
    v66 = &v11[v65];
    v85 = &v12[v65];
    v67 = sub_23DDC527C();
    v68 = v12;
    v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v70 = v67;
    v71 = v11;
    v69(v66, v85, v70);
    v72 = v68;
    v73 = v57;
    v11[*(int *)(v64 + 24)] = v72[*(int *)(v64 + 24)];
    v74 = (int *)type metadata accessor for BalanceWidgetTimelineEntry();
    v58(&v11[v74[5]], &v72[v74[5]], v57);
    v75 = v74[6];
    v76 = &v11[v75];
    v77 = &v72[v75];
    v78 = sub_23DDC6608();
    v79 = *(_QWORD *)(v78 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
    {
      sub_23DCFB328(0, &qword_254326400, (uint64_t (*)(uint64_t))MEMORY[0x24BDFB270], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v77, v78);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
    }
    v9 = v82;
    v58(&v71[v74[7]], &v72[v74[7]], v73);
  }
  return v9;
}

void sub_23DD04550(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = sub_23DDC512C();
    v7 = sub_23DCF535C((unint64_t *)&qword_254326A30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_23DD045CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v32)(uint64_t, uint64_t);

  sub_23DCFB328(0, &qword_2543263D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_23DDC6590();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  v8 = v5 + v7[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = sub_23DDC55A0();
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  v11 = v5 + v7[7];
  v12 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v13 = sub_23DDC512C();
    v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
    v14(v11, v13);
    v15 = v11 + *(int *)(v12 + 20);
    v14(v15, v13);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v14(v15 + *(int *)(v16 + 36), v13);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v17 = v5 + v7[8];
  swift_bridgeObjectRelease();
  v18 = v17 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v19 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = v5 + v7[11];
  v21 = sub_23DDC512C();
  v32 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
  v32(v20, v21);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v23 = v22;
  v32(v20 + *(int *)(v22 + 36), v21);
  v24 = v5 + v7[12];
  v32(v24, v21);
  v32(v24 + *(int *)(v23 + 36), v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = v5 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  v26 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v27 = (int *)type metadata accessor for BalanceWidgetTimelineEntry();
  v32(v5 + v27[5], v21);
  v28 = v5 + v27[6];
  v29 = sub_23DDC6608();
  v30 = *(_QWORD *)(v29 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
  return ((uint64_t (*)(uint64_t, uint64_t))v32)(v5 + v27[7], v21);
}

_QWORD *sub_23DD0498C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, _QWORD, uint64_t, int *);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  char *v80;

  sub_23DCFB328(0, &qword_2543263D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_23DDC6590();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23DDC5330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)&v8[v11[5]] = *(_QWORD *)&v9[v11[5]];
  v12 = v11[6];
  v13 = &v8[v12];
  v14 = &v9[v12];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    v15 = sub_23DDC55A0();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  swift_storeEnumTagMultiPayload();
  v18 = v11[7];
  v19 = &v8[v18];
  v20 = &v9[v18];
  v21 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v22 = *((_QWORD *)v21 - 1);
  v77 = a1;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = sub_23DDC512C();
    v78 = v22;
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v25(v19, v20, v24);
    v26 = v21[5];
    v27 = &v19[v26];
    v28 = &v20[v26];
    v25(&v19[v26], &v20[v26], v24);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v25(&v27[*(int *)(v29 + 36)], &v28[*(int *)(v29 + 36)], v24);
    v30 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v27[v30[5]] = *(_QWORD *)&v28[v30[5]];
    *(_QWORD *)&v27[v30[6]] = *(_QWORD *)&v28[v30[6]];
    *(_QWORD *)&v27[v30[7]] = *(_QWORD *)&v28[v30[7]];
    v31 = v21[6];
    v32 = &v19[v31];
    v33 = &v20[v31];
    *(_OWORD *)v32 = *(_OWORD *)v33;
    v32[16] = v33[16];
    v19[v21[7]] = v20[v21[7]];
    v19[v21[8]] = v20[v21[8]];
    v19[v21[9]] = v20[v21[9]];
    v34 = v21[10];
    v35 = &v19[v34];
    v36 = &v20[v34];
    v37 = *((_QWORD *)v36 + 1);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *((_QWORD *)v35 + 1) = v37;
    v38 = v21[11];
    v39 = &v19[v38];
    v40 = &v20[v38];
    v41 = *((_QWORD *)v40 + 1);
    *(_QWORD *)v39 = *(_QWORD *)v40;
    *((_QWORD *)v39 + 1) = v41;
    v42 = *(void (**)(char *, _QWORD, uint64_t, int *))(v78 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42(v19, 0, 1, v21);
  }
  v43 = v11[8];
  v44 = &v8[v43];
  v45 = &v9[v43];
  *(_QWORD *)&v8[v43] = *(_QWORD *)&v9[v43];
  v46 = type metadata accessor for OvernightMetricsChartPointCollection();
  v47 = *(int *)(v46 + 20);
  v79 = &v44[v47];
  v48 = &v45[v47];
  v49 = sub_23DDC51E0();
  v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain();
  v50(v79, v48, v49);
  *(_QWORD *)&v44[*(int *)(v46 + 24)] = *(_QWORD *)&v45[*(int *)(v46 + 24)];
  *(_QWORD *)&v8[v11[9]] = *(_QWORD *)&v9[v11[9]];
  *(_QWORD *)&v8[v11[10]] = *(_QWORD *)&v9[v11[10]];
  v51 = v11[11];
  v52 = &v8[v51];
  v53 = &v9[v51];
  v54 = sub_23DDC512C();
  v55 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55(v52, v53, v54);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v57 = v56;
  v55(&v52[*(int *)(v56 + 36)], &v53[*(int *)(v56 + 36)], v54);
  v58 = v11[12];
  v59 = &v8[v58];
  v60 = &v9[v58];
  v55(&v8[v58], &v9[v58], v54);
  v55(&v59[*(int *)(v57 + 36)], &v60[*(int *)(v57 + 36)], v54);
  *(_QWORD *)&v8[v11[13]] = *(_QWORD *)&v9[v11[13]];
  *(_QWORD *)&v8[v11[14]] = *(_QWORD *)&v9[v11[14]];
  v61 = type metadata accessor for BalanceWidgetViewModel();
  v62 = *(int *)(v61 + 20);
  v63 = &v8[v62];
  v80 = &v9[v62];
  v64 = sub_23DDC527C();
  v65 = v9;
  v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v66(v63, v80, v64);
  v67 = v65;
  v68 = v54;
  v8[*(int *)(v61 + 24)] = v67[*(int *)(v61 + 24)];
  v69 = (int *)type metadata accessor for BalanceWidgetTimelineEntry();
  v55(&v8[v69[5]], &v67[v69[5]], v54);
  v70 = v69[6];
  v71 = &v8[v70];
  v72 = &v67[v70];
  v73 = sub_23DDC6608();
  v74 = *(_QWORD *)(v73 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
  {
    sub_23DCFB328(0, &qword_254326400, (uint64_t (*)(uint64_t))MEMORY[0x24BDFB270], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v71, v72, v73);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
  }
  v55(&v8[v69[7]], &v67[v69[7]], v68);
  return v77;
}

_QWORD *sub_23DD04FBC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, int *);
  int v24;
  int v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  void (*v45)(char *, _QWORD, uint64_t, int *);
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  int v93;
  uint64_t v94;
  uint64_t v96;
  char *v97;
  _QWORD *v98;

  if (a1 != a2)
  {
    sub_23DD05838((uint64_t)a1);
    sub_23DCFB328(0, &qword_2543263D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_23DDC6590();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23DDC5330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)&v8[v11[5]] = *(_QWORD *)&v9[v11[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v98 = a1;
  if (a1 != a2)
  {
    v12 = v11[6];
    v13 = &v8[v12];
    v14 = &v9[v12];
    sub_23DCF59A8((uint64_t)&v8[v12], type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRetain();
    }
    else
    {
      v15 = sub_23DDC55A0();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  v18 = v11[7];
  v19 = &v8[v18];
  v20 = &v9[v18];
  v21 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v22 = *((_QWORD *)v21 - 1);
  v23 = *(uint64_t (**)(char *, uint64_t, int *))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (v25)
    {
      v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_18:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v26);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      goto LABEL_21;
    }
    v28 = sub_23DDC512C();
    v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
    v29(v19, v20, v28);
    v30 = v21[5];
    v31 = &v19[v30];
    v96 = v22;
    v32 = &v20[v30];
    v29(&v19[v30], &v20[v30], v28);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v29(&v31[*(int *)(v33 + 36)], &v32[*(int *)(v33 + 36)], v28);
    v34 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v31[v34[5]] = *(_QWORD *)&v32[v34[5]];
    *(_QWORD *)&v31[v34[6]] = *(_QWORD *)&v32[v34[6]];
    *(_QWORD *)&v31[v34[7]] = *(_QWORD *)&v32[v34[7]];
    v35 = v21[6];
    v36 = &v19[v35];
    v37 = &v20[v35];
    v38 = v37[16];
    *(_OWORD *)v36 = *(_OWORD *)v37;
    v36[16] = v38;
    v19[v21[7]] = v20[v21[7]];
    v19[v21[8]] = v20[v21[8]];
    v19[v21[9]] = v20[v21[9]];
    v39 = v21[10];
    v40 = &v19[v39];
    v41 = &v20[v39];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
    v42 = v21[11];
    v43 = &v19[v42];
    v44 = &v20[v42];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
    v45 = *(void (**)(char *, _QWORD, uint64_t, int *))(v96 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45(v19, 0, 1, v21);
  }
  else
  {
    if (v25)
    {
      sub_23DCF59A8((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_18;
    }
    v46 = sub_23DDC512C();
    v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 24);
    v47(v19, v20, v46);
    v48 = v21[5];
    v49 = &v19[v48];
    v50 = &v20[v48];
    v47(&v19[v48], &v20[v48], v46);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v47(&v49[*(int *)(v51 + 36)], &v50[*(int *)(v51 + 36)], v46);
    v52 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v49[v52[5]] = *(_QWORD *)&v50[v52[5]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v49[v52[6]] = *(_QWORD *)&v50[v52[6]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v49[v52[7]] = *(_QWORD *)&v50[v52[7]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v53 = v21[6];
    v54 = &v19[v53];
    v55 = &v20[v53];
    v56 = *(_OWORD *)v55;
    v54[16] = v55[16];
    *(_OWORD *)v54 = v56;
    v19[v21[7]] = v20[v21[7]];
    v19[v21[8]] = v20[v21[8]];
    v19[v21[9]] = v20[v21[9]];
    v57 = v21[10];
    v58 = &v19[v57];
    v59 = &v20[v57];
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *((_QWORD *)v58 + 1) = *((_QWORD *)v59 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v60 = v21[11];
    v61 = &v19[v60];
    v62 = &v20[v60];
    *(_QWORD *)v61 = *(_QWORD *)v62;
    *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_21:
  v63 = v11[8];
  v64 = &v8[v63];
  v65 = &v9[v63];
  *(_QWORD *)&v8[v63] = *(_QWORD *)&v9[v63];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v66 = type metadata accessor for OvernightMetricsChartPointCollection();
  v67 = *(int *)(v66 + 20);
  v68 = &v64[v67];
  v69 = &v65[v67];
  v70 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 24))(v68, v69, v70);
  *(_QWORD *)&v64[*(int *)(v66 + 24)] = *(_QWORD *)&v65[*(int *)(v66 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v8[v11[9]] = *(_QWORD *)&v9[v11[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v8[v11[10]] = *(_QWORD *)&v9[v11[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v71 = v11[11];
  v72 = &v8[v71];
  v73 = &v9[v71];
  v74 = sub_23DDC512C();
  v75 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 24);
  v75(v72, v73, v74);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v77 = v76;
  v75(&v72[*(int *)(v76 + 36)], &v73[*(int *)(v76 + 36)], v74);
  v78 = v11[12];
  v79 = &v8[v78];
  v80 = &v9[v78];
  v75(&v8[v78], &v9[v78], v74);
  v75(&v79[*(int *)(v77 + 36)], &v80[*(int *)(v77 + 36)], v74);
  *(_QWORD *)&v8[v11[13]] = *(_QWORD *)&v9[v11[13]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v8[v11[14]] = *(_QWORD *)&v9[v11[14]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v81 = type metadata accessor for BalanceWidgetViewModel();
  v82 = *(int *)(v81 + 20);
  v83 = &v8[v82];
  v84 = &v9[v82];
  v85 = sub_23DDC527C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 24))(v83, v84, v85);
  v8[*(int *)(v81 + 24)] = v9[*(int *)(v81 + 24)];
  v86 = (int *)type metadata accessor for BalanceWidgetTimelineEntry();
  v75(&v8[v86[5]], &v9[v86[5]], v74);
  v87 = v86[6];
  v88 = &v8[v87];
  v97 = v9;
  v89 = &v9[v87];
  v90 = sub_23DDC6608();
  v91 = *(_QWORD *)(v90 - 8);
  v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 48);
  LODWORD(v81) = v92(v88, 1, v90);
  v93 = v92(v89, 1, v90);
  if (!(_DWORD)v81)
  {
    if (!v93)
    {
      (*(void (**)(char *, char *, uint64_t))(v91 + 24))(v88, v89, v90);
      goto LABEL_27;
    }
    (*(void (**)(char *, uint64_t))(v91 + 8))(v88, v90);
    goto LABEL_26;
  }
  if (v93)
  {
LABEL_26:
    sub_23DCFB328(0, &qword_254326400, (uint64_t (*)(uint64_t))MEMORY[0x24BDFB270], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v88, v89, v90);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
LABEL_27:
  v75(&v8[v86[7]], &v97[v86[7]], v74);
  return v98;
}

uint64_t sub_23DD05838(uint64_t a1)
{
  uint64_t v2;

  sub_23DCFB328(0, &qword_2543263D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_23DD0588C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  char *v71;

  sub_23DCFB328(0, &qword_2543263D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_23DDC6590();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_23DDC5330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)&v10[v13[5]] = *(_QWORD *)&v11[v13[5]];
  v14 = v13[6];
  v15 = &v10[v14];
  v16 = &v11[v14];
  v17 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = sub_23DDC55A0();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v15, v16, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
    }
    swift_storeEnumTagMultiPayload();
  }
  v21 = v13[7];
  v22 = &v10[v21];
  v23 = &v11[v21];
  v24 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v25 = *((_QWORD *)v24 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v25 + 48))(v23, 1, v24))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = sub_23DDC512C();
    v70 = v25;
    v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
    v28(v22, v23, v27);
    v29 = v24[5];
    v30 = &v22[v29];
    v71 = a1;
    v31 = &v23[v29];
    v28(&v22[v29], &v23[v29], v27);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v28(&v30[*(int *)(v32 + 36)], &v31[*(int *)(v32 + 36)], v27);
    v33 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v30[v33[5]] = *(_QWORD *)&v31[v33[5]];
    *(_QWORD *)&v30[v33[6]] = *(_QWORD *)&v31[v33[6]];
    v34 = v33[7];
    v35 = *(_QWORD *)&v31[v34];
    a1 = v71;
    *(_QWORD *)&v30[v34] = v35;
    v36 = v24[6];
    v37 = &v22[v36];
    v38 = &v23[v36];
    *(_OWORD *)v37 = *(_OWORD *)v38;
    v37[16] = v38[16];
    v22[v24[7]] = v23[v24[7]];
    v22[v24[8]] = v23[v24[8]];
    v22[v24[9]] = v23[v24[9]];
    *(_OWORD *)&v22[v24[10]] = *(_OWORD *)&v23[v24[10]];
    *(_OWORD *)&v22[v24[11]] = *(_OWORD *)&v23[v24[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v70 + 56))(v22, 0, 1, v24);
  }
  v39 = v13[8];
  v40 = &v10[v39];
  v41 = &v11[v39];
  *(_QWORD *)&v10[v39] = *(_QWORD *)&v11[v39];
  v42 = type metadata accessor for OvernightMetricsChartPointCollection();
  v43 = *(int *)(v42 + 20);
  v44 = &v40[v43];
  v45 = &v41[v43];
  v46 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  *(_QWORD *)&v40[*(int *)(v42 + 24)] = *(_QWORD *)&v41[*(int *)(v42 + 24)];
  *(_QWORD *)&v10[v13[9]] = *(_QWORD *)&v11[v13[9]];
  *(_QWORD *)&v10[v13[10]] = *(_QWORD *)&v11[v13[10]];
  v47 = v13[11];
  v48 = &v10[v47];
  v49 = &v11[v47];
  v50 = sub_23DDC512C();
  v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32);
  v51(v48, v49, v50);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v53 = v52;
  v51(&v48[*(int *)(v52 + 36)], &v49[*(int *)(v52 + 36)], v50);
  v54 = v13[12];
  v55 = &v10[v54];
  v56 = &v11[v54];
  v51(&v10[v54], &v11[v54], v50);
  v51(&v55[*(int *)(v53 + 36)], &v56[*(int *)(v53 + 36)], v50);
  *(_QWORD *)&v10[v13[13]] = *(_QWORD *)&v11[v13[13]];
  *(_QWORD *)&v10[v13[14]] = *(_QWORD *)&v11[v13[14]];
  v57 = type metadata accessor for BalanceWidgetViewModel();
  v58 = *(int *)(v57 + 20);
  v59 = &v10[v58];
  v60 = &v11[v58];
  v61 = sub_23DDC527C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
  v10[*(int *)(v57 + 24)] = v11[*(int *)(v57 + 24)];
  v62 = (int *)type metadata accessor for BalanceWidgetTimelineEntry();
  v51(&v10[v62[5]], &v11[v62[5]], v50);
  v63 = v62[6];
  v64 = &v10[v63];
  v65 = &v11[v63];
  v66 = sub_23DDC6608();
  v67 = *(_QWORD *)(v66 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
  {
    sub_23DCFB328(0, &qword_254326400, (uint64_t (*)(uint64_t))MEMORY[0x24BDFB270], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v64, v65, v66);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  }
  v51(&v10[v62[7]], &v11[v62[7]], v50);
  return a1;
}

char *sub_23DD05E28(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, int *);
  int v27;
  int v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(char *, uint64_t, uint64_t);
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v96;
  char *v97;
  char *v98;

  if (a1 != a2)
  {
    sub_23DD05838((uint64_t)a1);
    sub_23DCFB328(0, &qword_2543263D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_23DDC6590();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_23DDC5330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)&v10[v13[5]] = *(_QWORD *)&v11[v13[5]];
  swift_bridgeObjectRelease();
  v98 = a1;
  if (a1 != a2)
  {
    v14 = v13[6];
    v15 = &v10[v14];
    v16 = &v11[v14];
    sub_23DCF59A8((uint64_t)&v10[v14], type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v17 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v18 = sub_23DDC55A0();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v15, v16, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  v21 = v13[7];
  v22 = &v10[v21];
  v23 = &v11[v21];
  v24 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v25 = *((_QWORD *)v24 - 1);
  v26 = *(uint64_t (**)(char *, uint64_t, int *))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (v28)
    {
      v29 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_17:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v29);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      goto LABEL_20;
    }
    v31 = sub_23DDC512C();
    v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32);
    v32(v22, v23, v31);
    v96 = v25;
    v33 = v32;
    v34 = v24[5];
    v35 = &v22[v34];
    v36 = &v23[v34];
    v33(&v22[v34], &v23[v34], v31);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v33(&v35[*(int *)(v37 + 36)], &v36[*(int *)(v37 + 36)], v31);
    v38 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v35[v38[5]] = *(_QWORD *)&v36[v38[5]];
    *(_QWORD *)&v35[v38[6]] = *(_QWORD *)&v36[v38[6]];
    *(_QWORD *)&v35[v38[7]] = *(_QWORD *)&v36[v38[7]];
    v39 = v24[6];
    v40 = &v22[v39];
    v41 = &v23[v39];
    *(_OWORD *)v40 = *(_OWORD *)v41;
    v40[16] = v41[16];
    v22[v24[7]] = v23[v24[7]];
    v22[v24[8]] = v23[v24[8]];
    v22[v24[9]] = v23[v24[9]];
    *(_OWORD *)&v22[v24[10]] = *(_OWORD *)&v23[v24[10]];
    *(_OWORD *)&v22[v24[11]] = *(_OWORD *)&v23[v24[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v96 + 56))(v22, 0, 1, v24);
  }
  else
  {
    if (v28)
    {
      sub_23DCF59A8((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v29 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_17;
    }
    v42 = sub_23DDC512C();
    v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 40);
    v43(v22, v23, v42);
    v44 = v24[5];
    v45 = &v22[v44];
    v46 = &v23[v44];
    v43(&v22[v44], &v23[v44], v42);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v43(&v45[*(int *)(v47 + 36)], &v46[*(int *)(v47 + 36)], v42);
    v48 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v45[v48[5]] = *(_QWORD *)&v46[v48[5]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v45[v48[6]] = *(_QWORD *)&v46[v48[6]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v45[v48[7]] = *(_QWORD *)&v46[v48[7]];
    swift_bridgeObjectRelease();
    v49 = v24[6];
    v50 = &v22[v49];
    v51 = &v23[v49];
    *(_OWORD *)v50 = *(_OWORD *)v51;
    v50[16] = v51[16];
    v22[v24[7]] = v23[v24[7]];
    v22[v24[8]] = v23[v24[8]];
    v22[v24[9]] = v23[v24[9]];
    v52 = v24[10];
    v53 = &v22[v52];
    v54 = &v23[v52];
    v56 = *(_QWORD *)v54;
    v55 = *((_QWORD *)v54 + 1);
    *(_QWORD *)v53 = v56;
    *((_QWORD *)v53 + 1) = v55;
    swift_bridgeObjectRelease();
    v57 = v24[11];
    v58 = &v22[v57];
    v59 = &v23[v57];
    v61 = *(_QWORD *)v59;
    v60 = *((_QWORD *)v59 + 1);
    *(_QWORD *)v58 = v61;
    *((_QWORD *)v58 + 1) = v60;
    swift_bridgeObjectRelease();
  }
LABEL_20:
  v62 = v13[8];
  v63 = &v10[v62];
  v64 = &v11[v62];
  *(_QWORD *)&v10[v62] = *(_QWORD *)&v11[v62];
  swift_bridgeObjectRelease();
  v65 = type metadata accessor for OvernightMetricsChartPointCollection();
  v66 = *(int *)(v65 + 20);
  v67 = &v63[v66];
  v68 = &v64[v66];
  v69 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 40))(v67, v68, v69);
  *(_QWORD *)&v63[*(int *)(v65 + 24)] = *(_QWORD *)&v64[*(int *)(v65 + 24)];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v10[v13[9]] = *(_QWORD *)&v11[v13[9]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v10[v13[10]] = *(_QWORD *)&v11[v13[10]];
  swift_bridgeObjectRelease();
  v70 = v13[11];
  v71 = &v10[v70];
  v72 = &v11[v70];
  v73 = sub_23DDC512C();
  v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 40);
  v74(v71, v72, v73);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v76 = v75;
  v74(&v71[*(int *)(v75 + 36)], &v72[*(int *)(v75 + 36)], v73);
  v77 = v13[12];
  v78 = &v10[v77];
  v79 = &v11[v77];
  v74(&v10[v77], &v11[v77], v73);
  v74(&v78[*(int *)(v76 + 36)], &v79[*(int *)(v76 + 36)], v73);
  *(_QWORD *)&v10[v13[13]] = *(_QWORD *)&v11[v13[13]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v10[v13[14]] = *(_QWORD *)&v11[v13[14]];
  swift_bridgeObjectRelease();
  v80 = type metadata accessor for BalanceWidgetViewModel();
  v81 = *(int *)(v80 + 20);
  v82 = &v10[v81];
  v83 = &v11[v81];
  v84 = sub_23DDC527C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 40))(v82, v83, v84);
  v10[*(int *)(v80 + 24)] = v11[*(int *)(v80 + 24)];
  v85 = (int *)type metadata accessor for BalanceWidgetTimelineEntry();
  v74(&v10[v85[5]], &v11[v85[5]], v73);
  v86 = v85[6];
  v87 = &v10[v86];
  v97 = v11;
  v88 = &v11[v86];
  v89 = sub_23DDC6608();
  v90 = *(_QWORD *)(v89 - 8);
  v91 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48);
  v92 = v91(v87, 1, v89);
  v93 = v91(v88, 1, v89);
  if (!v92)
  {
    if (!v93)
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 40))(v87, v88, v89);
      goto LABEL_26;
    }
    (*(void (**)(char *, uint64_t))(v90 + 8))(v87, v89);
    goto LABEL_25;
  }
  if (v93)
  {
LABEL_25:
    sub_23DCFB328(0, &qword_254326400, (uint64_t (*)(uint64_t))MEMORY[0x24BDFB270], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v87, v88, v89);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
LABEL_26:
  v74(&v10[v85[7]], &v97[v85[7]], v73);
  return v98;
}

uint64_t sub_23DD065EC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD065F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  sub_23DCFB328(0, &qword_256CFC5A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], MEMORY[0x24BDEB580]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for BalanceWidgetTimelineEntry();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_23DD06684()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD06690(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  sub_23DCFB328(0, &qword_256CFC5A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], MEMORY[0x24BDEB580]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for BalanceWidgetTimelineEntry();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for BalanceWidgetEntryView()
{
  uint64_t result;

  result = qword_254326390;
  if (!qword_254326390)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DD06760()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DCFB328(319, &qword_2543263D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for BalanceWidgetTimelineEntry();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_23DD067FC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD06824()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD06834()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for BalanceWidgetAccessoryRectangularView(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFC608);
}

uint64_t sub_23DD0685C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD0686C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[288];

  v50 = a1;
  v51 = sub_23DDC5EF4();
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v48 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for BalanceWidgetViewModel();
  MEMORY[0x24BDAC7A8](v3);
  v45 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_256CFC640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v42 = (uint64_t)&v41 - v6;
  v7 = type metadata accessor for BalanceWidgetAccessoryRectangularSpecs();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (unsigned __int8 *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD07224();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD0A9C8(0, &qword_256CFC668, v13, (unint64_t *)&qword_256CFC670, (uint64_t)&type metadata for OvernightMetricsChartSpec);
  v15 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v41 - v16;
  sub_23DD073B0();
  v44 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD0742C(0);
  v22 = *(_QWORD *)(v21 - 8);
  v46 = v21;
  v47 = v22;
  MEMORY[0x24BDAC7A8](v21);
  v43 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v12 = sub_23DDC5E1C();
  *((_QWORD *)v12 + 1) = 0x400C000000000000;
  v12[16] = 0;
  sub_23DD07578();
  sub_23DD06D94(v1, (uint64_t)&v12[*(int *)(v24 + 44)]);
  KeyPath = swift_getKeyPath();
  sub_23DD35C3C((uint64_t)v9);
  v26 = v1 + *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularView(0) + 20);
  v41 = v1;
  sub_23DD29628(v55);
  sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs);
  sub_23DCF58EC((uint64_t)v12, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_23DD07224);
  v27 = *(int *)(v15 + 36);
  *(_QWORD *)&v17[v27] = KeyPath;
  memcpy(&v17[v27 + 8], v55, 0x118uLL);
  sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DD07224);
  v28 = sub_23DDC63BC();
  sub_23DD32880(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v20, 0.0, 1, INFINITY, 0, v28, v29);
  sub_23DD0B154((uint64_t)v17, &qword_256CFC668, (void (*)(uint64_t))sub_23DD07224, (unint64_t *)&qword_256CFC670, (uint64_t)&type metadata for OvernightMetricsChartSpec);
  v30 = v45;
  sub_23DCF58EC(v26, v45, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
  sub_23DD35C3C((uint64_t)v9);
  v31 = *v9 == 2;
  sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs);
  v32 = v42;
  sub_23DD6F8D0(v31, v42);
  sub_23DCF59A8(v30, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
  v33 = sub_23DDC5018();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 0, 1, v33);
  v34 = sub_23DD0B068(&qword_256CFC688, (uint64_t (*)(uint64_t))sub_23DD073B0, (uint64_t (*)(void))sub_23DD074B8);
  v35 = v43;
  v36 = v44;
  sub_23DDC6104();
  sub_23DD0B1E4(v32, &qword_256CFC640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  sub_23DCF59A8((uint64_t)v20, (uint64_t (*)(_QWORD))sub_23DD073B0);
  sub_23DD35C3C((uint64_t)v9);
  sub_23DD29C20();
  v37 = sub_23DDC6254();
  swift_release();
  sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs);
  v54 = v37;
  v38 = v48;
  sub_23DDC5EE8();
  v52 = v36;
  v53 = v34;
  swift_getOpaqueTypeConformance2();
  v39 = v46;
  sub_23DDC617C();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v51);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v35, v39);
}

uint64_t sub_23DD06D94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;

  v47 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, qword_256CFC6B0, type metadata accessor for OvernightMetricsChart.Derivations, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v46 = (char *)&v41 - v5;
  sub_23DCFB328(0, &qword_2543266F8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, v3);
  MEMORY[0x24BDAC7A8](v6);
  v45 = (uint64_t)&v41 - v7;
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v3);
  MEMORY[0x24BDAC7A8](v8);
  v43 = (uint64_t)&v41 - v9;
  v10 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x24BDAC7A8](v10);
  v42 = (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OvernightMetricsChart(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v44 = (uint64_t)&v41 - v19;
  v20 = type metadata accessor for BalanceWidgetViewModel();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (uint64_t *)((char *)&v41 - v27);
  v29 = a1 + *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularView(0) + 20);
  sub_23DCF58EC(v29, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
  *v28 = swift_getKeyPath();
  sub_23DCFB328(0, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  sub_23DCFBB58((uint64_t)v22, (uint64_t)v28 + *(int *)(v23 + 20), (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
  LOBYTE(v20) = *(_BYTE *)(v29 + *(int *)(v20 + 24));
  sub_23DCF58EC(v29, (uint64_t)v14, type metadata accessor for OvernightMetricsViewModel);
  v48 = v20;
  v30 = v42;
  sub_23DCF58EC((uint64_t)&v14[v12[8]], v42, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
  v31 = v43;
  sub_23DD08000((uint64_t)&v14[v12[7]], v43);
  v32 = *(_QWORD **)&v14[v12[14]];
  v33 = *(_QWORD *)&v14[v12[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = v45;
  OvernightMetricsViewModel.warmupProgress.getter(v45);
  v35 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v36 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v46, 1, 1, v35);
  OvernightMetricsChart.init(timeScope:chartPointCollection:emphasizedChartPoint:tabProgress:shouldMergeOverlappingIndividualMetrics:visibleDataTypes:keyDates:warmupProgress:alignWarmupProgressCounterToChartPlotArea:precomputedDerivations:)(&v48, v30, v31, 0, 1, 1, v32, v33, v17, v34, 0, v36);
  sub_23DCF59A8((uint64_t)v14, type metadata accessor for OvernightMetricsViewModel);
  v37 = v44;
  sub_23DCFBB58((uint64_t)v17, v44, type metadata accessor for OvernightMetricsChart);
  sub_23DCF58EC((uint64_t)v28, (uint64_t)v25, type metadata accessor for BalanceWidgetAccessoryRectangularTitleView);
  sub_23DCF58EC(v37, (uint64_t)v17, type metadata accessor for OvernightMetricsChart);
  v38 = v47;
  sub_23DCF58EC((uint64_t)v25, v47, type metadata accessor for BalanceWidgetAccessoryRectangularTitleView);
  sub_23DD0729C();
  sub_23DCF58EC((uint64_t)v17, v38 + *(int *)(v39 + 48), type metadata accessor for OvernightMetricsChart);
  sub_23DCF59A8(v37, type metadata accessor for OvernightMetricsChart);
  sub_23DCF59A8((uint64_t)v28, type metadata accessor for BalanceWidgetAccessoryRectangularTitleView);
  sub_23DCF59A8((uint64_t)v17, type metadata accessor for OvernightMetricsChart);
  return sub_23DCF59A8((uint64_t)v25, type metadata accessor for BalanceWidgetAccessoryRectangularTitleView);
}

void sub_23DD07224()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC648)
  {
    sub_23DCFB328(255, &qword_256CFC650, (uint64_t (*)(uint64_t))sub_23DD0729C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    sub_23DD07350();
    v0 = sub_23DDC6320();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC648);
  }
}

void sub_23DD0729C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFC658)
  {
    type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(255);
    type metadata accessor for OvernightMetricsChart(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFC658);
  }
}

uint64_t type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFC710);
}

uint64_t sub_23DD0731C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23DD07350()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFC660;
  if (!qword_256CFC660)
  {
    sub_23DCFB328(255, &qword_256CFC650, (uint64_t (*)(uint64_t))sub_23DD0729C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF5428], v1);
    atomic_store(result, (unint64_t *)&qword_256CFC660);
  }
  return result;
}

void sub_23DD073B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC678)
  {
    sub_23DD0A9C8(255, &qword_256CFC668, (void (*)(uint64_t))sub_23DD07224, (unint64_t *)&qword_256CFC670, (uint64_t)&type metadata for OvernightMetricsChartSpec);
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC678);
  }
}

void sub_23DD0742C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_256CFC680)
  {
    sub_23DD073B0();
    v5[0] = v2;
    v5[1] = sub_23DD0B068(&qword_256CFC688, (uint64_t (*)(uint64_t))sub_23DD073B0, (uint64_t (*)(void))sub_23DD074B8);
    v3 = MEMORY[0x242643B9C](a1, v5, MEMORY[0x24BDFAC50], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_256CFC680);
  }
}

unint64_t sub_23DD074B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFC690;
  if (!qword_256CFC690)
  {
    sub_23DD0A9C8(255, &qword_256CFC668, (void (*)(uint64_t))sub_23DD07224, (unint64_t *)&qword_256CFC670, (uint64_t)&type metadata for OvernightMetricsChartSpec);
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFC698, (uint64_t (*)(uint64_t))sub_23DD07224, MEMORY[0x24BDF4700]);
    v3[1] = sub_23DD0B10C((unint64_t *)&qword_256CFC6A0, (unint64_t *)&qword_256CFC670, (uint64_t)&type metadata for OvernightMetricsChartSpec);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFC690);
  }
  return result;
}

void sub_23DD07578()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC6A8)
  {
    sub_23DCFB328(255, &qword_256CFC650, (uint64_t (*)(uint64_t))sub_23DD0729C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
    v0 = sub_23DDC5B94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC6A8);
  }
}

uint64_t sub_23DD075FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  char *v38;
  uint64_t v39;
  char *v40;
  _QWORD v42[2];
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v50 = a1;
  v1 = type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(0);
  v44 = *(_QWORD *)(v1 - 8);
  v2 = *(_QWORD *)(v44 + 64);
  MEMORY[0x24BDAC7A8](v1);
  sub_23DD0A4D0();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v46 = (uint64_t)v42 - v7;
  sub_23DD0A86C();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD0A8E4();
  MEMORY[0x24BDAC7A8](v11);
  v48 = (uint64_t)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD0A940(0);
  v47 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD0A9C8(0, &qword_256CFC7D0, v16, &qword_256CFC7D8, MEMORY[0x24BEE1328]);
  v49 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v42 - v18;
  *(_QWORD *)v10 = sub_23DDC5DA4();
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v20 = sub_23DDC5F24();
  v21 = sub_23DDC5F3C();
  v22 = sub_23DDC5F30();
  sub_23DDC5F30();
  if (sub_23DDC5F30() != v20)
    v22 = sub_23DDC5F30();
  sub_23DDC5F30();
  if (sub_23DDC5F30() != v21)
    v22 = sub_23DDC5F30();
  sub_23DD0AA90();
  v43 = &v10[*(int *)(v23 + 44)];
  *v5 = v22;
  sub_23DD0AAF4();
  v42[1] = &v5[*(int *)(v24 + 44)];
  v25 = v45;
  v26 = sub_23DD6FBA0();
  v51 = MEMORY[0x24BEE4B08];
  v27 = sub_23DDB5FC0(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v53 = v27;
  swift_getKeyPath();
  sub_23DCF58EC(v25, (uint64_t)v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BalanceWidgetAccessoryRectangularTitleView);
  v28 = (*(unsigned __int8 *)(v44 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  v29 = swift_allocObject();
  sub_23DCFBB58((uint64_t)v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v29 + v28, type metadata accessor for BalanceWidgetAccessoryRectangularTitleView);
  sub_23DD0AA4C(0, (unint64_t *)&qword_256CFC758, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DD0A5E8(0);
  sub_23DD0A770(&qword_256CFC790, MEMORY[0x24BEE12D8]);
  sub_23DD0A67C(255);
  v31 = v30;
  v32 = sub_23DCFB798(&qword_256CFC778, (uint64_t (*)(uint64_t))sub_23DD0A67C, (uint64_t (*)(void))sub_23DD0A6F4, sub_23DD0A754);
  v51 = v31;
  v52 = v32;
  swift_getOpaqueTypeConformance2();
  sub_23DDC6374();
  v33 = v46;
  sub_23DCFBB58((uint64_t)v5, v46, (uint64_t (*)(_QWORD))sub_23DD0A4D0);
  sub_23DCFBB58(v33, (uint64_t)v43, (uint64_t (*)(_QWORD))sub_23DD0A4D0);
  v34 = sub_23DDC63E0();
  v35 = v48;
  sub_23DD328D8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v48, 0.0, 1, 0.0, 1, v34, v36);
  sub_23DCF59A8((uint64_t)v10, (uint64_t (*)(_QWORD))sub_23DD0A86C);
  KeyPath = swift_getKeyPath();
  sub_23DCF58EC(v35, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_23DD0A8E4);
  v38 = &v15[*(int *)(v47 + 36)];
  *(_QWORD *)v38 = KeyPath;
  *((_QWORD *)v38 + 1) = 1;
  v38[16] = 0;
  sub_23DCF59A8(v35, (uint64_t (*)(_QWORD))sub_23DD0A8E4);
  v39 = swift_getKeyPath();
  sub_23DCF58EC((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_23DD0A940);
  v40 = &v19[*(int *)(v49 + 36)];
  *(_QWORD *)v40 = v39;
  v40[8] = 1;
  sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))sub_23DD0A940);
  sub_23DD0AF84();
  sub_23DDC6164();
  return sub_23DD0B154((uint64_t)v19, &qword_256CFC7D0, sub_23DD0A940, &qword_256CFC7D8, MEMORY[0x24BEE1328]);
}

uint64_t sub_23DD07B3C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;

  v55 = a3;
  sub_23DCFB328(0, (unint64_t *)&qword_256CFC4A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v48 - v6;
  v8 = sub_23DDC5F9C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BalanceWidgetAccessoryRectangularSpecs();
  MEMORY[0x24BDAC7A8](v12);
  v56 = (uint64_t)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v48 - v15;
  sub_23DD0A67C(0);
  v57 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v54 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD0A5E8(0);
  v52 = *(_QWORD *)(v19 - 8);
  v53 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v51 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a1;
  v22 = a1[1];
  v60 = v21;
  v61 = v22;
  sub_23DD0B190();
  swift_bridgeObjectRetain();
  v23 = sub_23DDC6098();
  v25 = v24;
  v50 = v26;
  v58 = a2;
  sub_23DD35C3C((uint64_t)v16);
  if (*v16)
  {
    sub_23DDC6008();
  }
  else
  {
    sub_23DDC5F90();
    v27 = *MEMORY[0x24BDF1668];
    v28 = v9;
    v29 = sub_23DDC5FA8();
    v49 = v8;
    v30 = *(_QWORD *)(v29 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v7, v27, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v7, 0, 1, v29);
    sub_23DDC5FD8();
    sub_23DD0B1E4((uint64_t)v7, (unint64_t *)&qword_256CFC4A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v49);
    sub_23DDC5FC0();
    sub_23DDC5FF0();
    swift_release();
  }
  v31 = v50 & 1;
  sub_23DCF59A8((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs);
  v32 = sub_23DDC6074();
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  sub_23DD0B1D4(v23, v25, v31);
  swift_release();
  swift_bridgeObjectRelease();
  v39 = sub_23DDC5F6C();
  sub_23DDC5A74();
  v60 = v32;
  v61 = v34;
  v62 = v38;
  v63 = v36;
  v64 = v39;
  v65 = v40;
  v66 = v41;
  v67 = v42;
  v68 = v43;
  v69 = 0;
  v59 = &unk_250E9BE08;
  sub_23DD95E24((uint64_t)&unk_250E9BE48);
  sub_23DD0AA4C(0, (unint64_t *)&qword_256CFC758, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DD0A770((unint64_t *)&qword_256CFC828, MEMORY[0x24BEE12B0]);
  sub_23DDC668C();
  swift_bridgeObjectRelease();
  sub_23DD0A698();
  sub_23DD0A6F4();
  v44 = (uint64_t)v54;
  sub_23DDC6188();
  swift_bridgeObjectRelease();
  sub_23DD0B1D4(v32, v34, v38);
  swift_bridgeObjectRelease();
  v45 = v56;
  sub_23DD35C3C(v56);
  type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(0);
  sub_23DD6F1CC();
  sub_23DCF59A8(v45, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs);
  sub_23DCFB798(&qword_256CFC778, (uint64_t (*)(uint64_t))sub_23DD0A67C, (uint64_t (*)(void))sub_23DD0A6F4, sub_23DD0A754);
  v46 = v51;
  sub_23DDC60F8();
  sub_23DCF59A8(v44, (uint64_t (*)(_QWORD))sub_23DD0A67C);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v52 + 32))(v55, v46, v53);
}

uint64_t sub_23DD08000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD0805C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, _QWORD, uint64_t, int *);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    v12 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    sub_23DCFB328(0, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      v7 = *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
      v8 = a1 + v7;
      v9 = (uint64_t)a2 + v7;
      v10 = sub_23DDC656C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *(_QWORD *)a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v13 = *(int *)(a3 + 20);
    v14 = a1 + v13;
    v15 = (uint64_t)a2 + v13;
    v16 = sub_23DDC5330();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(_QWORD *)(v14 + v17[5]) = *(_QWORD *)(v15 + v17[5]);
    v18 = v17[6];
    v19 = (_QWORD *)(v14 + v18);
    v20 = (_QWORD *)(v15 + v18);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v19 = *v20;
      swift_bridgeObjectRetain();
    }
    else
    {
      v21 = sub_23DDC55A0();
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v22 + 16))(v19, v20, v21);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
    }
    swift_storeEnumTagMultiPayload();
    v24 = v17[7];
    v25 = (char *)(v14 + v24);
    v26 = (char *)(v15 + v24);
    v27 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v28 = *((_QWORD *)v27 - 1);
    v76 = a1;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v74 = v28;
      v30 = sub_23DDC512C();
      v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
      v31(v25, v26, v30);
      v32 = v27[5];
      v33 = &v25[v32];
      v34 = &v26[v32];
      v31(&v25[v32], &v26[v32], v30);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v31(&v33[*(int *)(v35 + 36)], &v34[*(int *)(v35 + 36)], v30);
      v36 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v33[v36[5]] = *(_QWORD *)&v34[v36[5]];
      *(_QWORD *)&v33[v36[6]] = *(_QWORD *)&v34[v36[6]];
      *(_QWORD *)&v33[v36[7]] = *(_QWORD *)&v34[v36[7]];
      v37 = v27[6];
      v38 = &v25[v37];
      v39 = &v26[v37];
      *(_OWORD *)v38 = *(_OWORD *)v39;
      v38[16] = v39[16];
      v25[v27[7]] = v26[v27[7]];
      v25[v27[8]] = v26[v27[8]];
      v25[v27[9]] = v26[v27[9]];
      v40 = v27[10];
      v41 = &v25[v40];
      v42 = &v26[v40];
      v43 = *((_QWORD *)v42 + 1);
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = v43;
      v44 = v27[11];
      v45 = &v25[v44];
      v46 = &v26[v44];
      v47 = *((_QWORD *)v46 + 1);
      *(_QWORD *)v45 = *(_QWORD *)v46;
      *((_QWORD *)v45 + 1) = v47;
      v48 = *(void (**)(char *, _QWORD, uint64_t, int *))(v74 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v48(v25, 0, 1, v27);
    }
    v49 = v17[8];
    v50 = v14 + v49;
    v51 = v15 + v49;
    *(_QWORD *)(v14 + v49) = *(_QWORD *)(v15 + v49);
    v52 = type metadata accessor for OvernightMetricsChartPointCollection();
    v53 = *(int *)(v52 + 20);
    v75 = v50 + v53;
    v54 = v51 + v53;
    v55 = sub_23DDC51E0();
    v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
    swift_bridgeObjectRetain();
    v56(v75, v54, v55);
    *(_QWORD *)(v50 + *(int *)(v52 + 24)) = *(_QWORD *)(v51 + *(int *)(v52 + 24));
    *(_QWORD *)(v14 + v17[9]) = *(_QWORD *)(v15 + v17[9]);
    *(_QWORD *)(v14 + v17[10]) = *(_QWORD *)(v15 + v17[10]);
    v57 = v17[11];
    v58 = v14 + v57;
    v59 = v15 + v57;
    v60 = sub_23DDC512C();
    v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v61(v58, v59, v60);
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v63 = v62;
    v61(v58 + *(int *)(v62 + 36), v59 + *(int *)(v62 + 36), v60);
    v64 = v17[12];
    v65 = v14 + v64;
    v66 = v15 + v64;
    v61(v14 + v64, v15 + v64, v60);
    v61(v65 + *(int *)(v63 + 36), v66 + *(int *)(v63 + 36), v60);
    *(_QWORD *)(v14 + v17[13]) = *(_QWORD *)(v15 + v17[13]);
    *(_QWORD *)(v14 + v17[14]) = *(_QWORD *)(v15 + v17[14]);
    v67 = type metadata accessor for BalanceWidgetViewModel();
    v68 = *(int *)(v67 + 20);
    v69 = v14 + v68;
    v70 = v15 + v68;
    v71 = sub_23DDC527C();
    v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v72(v69, v70, v71);
    *(_BYTE *)(v14 + *(int *)(v67 + 24)) = *(_BYTE *)(v15 + *(int *)(v67 + 24));
    return v76;
  }
  return v12;
}

uint64_t sub_23DD085FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_23DCFB328(0, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = a1 + *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
    v5 = sub_23DDC656C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v6 = a1 + *(int *)(a2 + 20);
  v7 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  v9 = v6 + v8[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = sub_23DDC55A0();
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  v12 = v6 + v8[7];
  v13 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v14 = sub_23DDC512C();
    v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
    v15(v12, v14);
    v16 = v12 + *(int *)(v13 + 20);
    v15(v16, v14);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v15(v16 + *(int *)(v17 + 36), v14);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v18 = v6 + v8[8];
  swift_bridgeObjectRelease();
  v19 = v18 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v20 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v6 + v8[11];
  v22 = sub_23DDC512C();
  v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
  v23(v21, v22);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v25 = v24;
  v23(v21 + *(int *)(v24 + 36), v22);
  v26 = v6 + v8[12];
  v23(v26, v22);
  v23(v26 + *(int *)(v25 + 36), v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = v6 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  v28 = sub_23DDC527C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
}

uint64_t sub_23DD0893C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, _QWORD, uint64_t, int *);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  sub_23DCFB328(0, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    v6 = *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
    v7 = a1 + v6;
    v8 = a2 + v6;
    v9 = sub_23DDC656C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(v11 + v14[5]) = *(_QWORD *)(v12 + v14[5]);
  v15 = v14[6];
  v16 = (_QWORD *)(v11 + v15);
  v17 = (_QWORD *)(v12 + v15);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v16 = *v17;
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = sub_23DDC55A0();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  swift_storeEnumTagMultiPayload();
  v21 = v14[7];
  v22 = (char *)(v11 + v21);
  v23 = (char *)(v12 + v21);
  v24 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v25 = *((_QWORD *)v24 - 1);
  v73 = a1;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v25 + 48))(v23, 1, v24))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = sub_23DDC512C();
    v71 = v25;
    v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
    v28(v22, v23, v27);
    v29 = v24[5];
    v30 = &v22[v29];
    v31 = &v23[v29];
    v28(&v22[v29], &v23[v29], v27);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v28(&v30[*(int *)(v32 + 36)], &v31[*(int *)(v32 + 36)], v27);
    v33 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v30[v33[5]] = *(_QWORD *)&v31[v33[5]];
    *(_QWORD *)&v30[v33[6]] = *(_QWORD *)&v31[v33[6]];
    *(_QWORD *)&v30[v33[7]] = *(_QWORD *)&v31[v33[7]];
    v34 = v24[6];
    v35 = &v22[v34];
    v36 = &v23[v34];
    *(_OWORD *)v35 = *(_OWORD *)v36;
    v35[16] = v36[16];
    v22[v24[7]] = v23[v24[7]];
    v22[v24[8]] = v23[v24[8]];
    v22[v24[9]] = v23[v24[9]];
    v37 = v24[10];
    v38 = &v22[v37];
    v39 = &v23[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v41 = v24[11];
    v42 = &v22[v41];
    v43 = &v23[v41];
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = *(void (**)(char *, _QWORD, uint64_t, int *))(v71 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45(v22, 0, 1, v24);
  }
  v46 = v14[8];
  v47 = v11 + v46;
  v48 = v12 + v46;
  *(_QWORD *)(v11 + v46) = *(_QWORD *)(v12 + v46);
  v49 = type metadata accessor for OvernightMetricsChartPointCollection();
  v50 = *(int *)(v49 + 20);
  v72 = v47 + v50;
  v51 = v48 + v50;
  v52 = sub_23DDC51E0();
  v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
  swift_bridgeObjectRetain();
  v53(v72, v51, v52);
  *(_QWORD *)(v47 + *(int *)(v49 + 24)) = *(_QWORD *)(v48 + *(int *)(v49 + 24));
  *(_QWORD *)(v11 + v14[9]) = *(_QWORD *)(v12 + v14[9]);
  *(_QWORD *)(v11 + v14[10]) = *(_QWORD *)(v12 + v14[10]);
  v54 = v14[11];
  v55 = v11 + v54;
  v56 = v12 + v54;
  v57 = sub_23DDC512C();
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v58(v55, v56, v57);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v60 = v59;
  v58(v55 + *(int *)(v59 + 36), v56 + *(int *)(v59 + 36), v57);
  v61 = v14[12];
  v62 = v11 + v61;
  v63 = v12 + v61;
  v58(v11 + v61, v12 + v61, v57);
  v58(v62 + *(int *)(v60 + 36), v63 + *(int *)(v60 + 36), v57);
  *(_QWORD *)(v11 + v14[13]) = *(_QWORD *)(v12 + v14[13]);
  *(_QWORD *)(v11 + v14[14]) = *(_QWORD *)(v12 + v14[14]);
  v64 = type metadata accessor for BalanceWidgetViewModel();
  v65 = *(int *)(v64 + 20);
  v66 = v11 + v65;
  v67 = v12 + v65;
  v68 = sub_23DDC527C();
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69(v66, v67, v68);
  *(_BYTE *)(v11 + *(int *)(v64 + 24)) = *(_BYTE *)(v12 + *(int *)(v64 + 24));
  return v73;
}

uint64_t sub_23DD08EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, int *);
  int v29;
  int v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(char *, _QWORD, uint64_t, int *);
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v5 = a1;
  if (a1 != a2)
  {
    v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_23DD0B1E4(a1, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_23DCFB328(0, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, v6);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_BYTE *)v5 = *(_BYTE *)a2;
      v7 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v5 + 8) = v7;
      v8 = *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
      v9 = v5 + v8;
      v10 = a2 + v8;
      v11 = sub_23DDC656C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      *(_QWORD *)v5 = *(_QWORD *)a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v12 = *(int *)(a3 + 20);
  v13 = v5 + v12;
  v14 = a2 + v12;
  v15 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(v13 + v16[5]) = *(_QWORD *)(v14 + v16[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v5 != a2)
  {
    v17 = v16[6];
    v18 = (_QWORD *)(v13 + v17);
    v19 = (_QWORD *)(v14 + v17);
    sub_23DCF59A8(v13 + v17, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v18 = *v19;
      swift_bridgeObjectRetain();
    }
    else
    {
      v20 = sub_23DDC55A0();
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  v23 = v16[7];
  v24 = (char *)(v13 + v23);
  v25 = (char *)(v14 + v23);
  v26 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(uint64_t (**)(char *, uint64_t, int *))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      v33 = sub_23DDC512C();
      v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
      v34(v24, v25, v33);
      v95 = v27;
      v96 = v5;
      v35 = v34;
      v36 = v26[5];
      v37 = &v24[v36];
      v38 = &v25[v36];
      v35(&v24[v36], &v25[v36], v33);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v35(&v37[*(int *)(v39 + 36)], &v38[*(int *)(v39 + 36)], v33);
      v40 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v37[v40[5]] = *(_QWORD *)&v38[v40[5]];
      *(_QWORD *)&v37[v40[6]] = *(_QWORD *)&v38[v40[6]];
      *(_QWORD *)&v37[v40[7]] = *(_QWORD *)&v38[v40[7]];
      v41 = v26[6];
      v42 = &v24[v41];
      v43 = &v25[v41];
      v44 = v43[16];
      *(_OWORD *)v42 = *(_OWORD *)v43;
      v42[16] = v44;
      v24[v26[7]] = v25[v26[7]];
      v24[v26[8]] = v25[v26[8]];
      v24[v26[9]] = v25[v26[9]];
      v45 = v26[10];
      v46 = &v24[v45];
      v47 = &v25[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
      v48 = v26[11];
      v49 = &v24[v48];
      v50 = &v25[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      *((_QWORD *)v49 + 1) = *((_QWORD *)v50 + 1);
      v51 = *(void (**)(char *, _QWORD, uint64_t, int *))(v95 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v5 = v96;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v51(v24, 0, 1, v26);
      goto LABEL_21;
    }
    v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  else
  {
    if (!v30)
    {
      v52 = sub_23DDC512C();
      v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 24);
      v53(v24, v25, v52);
      v54 = v26[5];
      v55 = &v24[v54];
      v97 = v5;
      v56 = &v25[v54];
      v53(&v24[v54], &v25[v54], v52);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v53(&v55[*(int *)(v57 + 36)], &v56[*(int *)(v57 + 36)], v52);
      v58 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v55[v58[5]] = *(_QWORD *)&v56[v58[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v55[v58[6]] = *(_QWORD *)&v56[v58[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v59 = v58[7];
      v60 = *(_QWORD *)&v56[v59];
      v5 = v97;
      *(_QWORD *)&v55[v59] = v60;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v61 = v26[6];
      v62 = &v24[v61];
      v63 = &v25[v61];
      v64 = *(_OWORD *)v63;
      v62[16] = v63[16];
      *(_OWORD *)v62 = v64;
      v24[v26[7]] = v25[v26[7]];
      v24[v26[8]] = v25[v26[8]];
      v24[v26[9]] = v25[v26[9]];
      v65 = v26[10];
      v66 = &v24[v65];
      v67 = &v25[v65];
      *(_QWORD *)v66 = *(_QWORD *)v67;
      *((_QWORD *)v66 + 1) = *((_QWORD *)v67 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v68 = v26[11];
      v69 = &v24[v68];
      v70 = &v25[v68];
      *(_QWORD *)v69 = *(_QWORD *)v70;
      *((_QWORD *)v69 + 1) = *((_QWORD *)v70 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    sub_23DCF59A8((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v31);
  memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
LABEL_21:
  v71 = v16[8];
  v72 = v13 + v71;
  v73 = v14 + v71;
  *(_QWORD *)(v13 + v71) = *(_QWORD *)(v14 + v71);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v74 = type metadata accessor for OvernightMetricsChartPointCollection();
  v75 = *(int *)(v74 + 20);
  v76 = v72 + v75;
  v77 = v73 + v75;
  v78 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 24))(v76, v77, v78);
  *(_QWORD *)(v72 + *(int *)(v74 + 24)) = *(_QWORD *)(v73 + *(int *)(v74 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + v16[9]) = *(_QWORD *)(v14 + v16[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + v16[10]) = *(_QWORD *)(v14 + v16[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v79 = v16[11];
  v80 = v13 + v79;
  v81 = v14 + v79;
  v82 = sub_23DDC512C();
  v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 24);
  v83(v80, v81, v82);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v85 = v84;
  v83(v80 + *(int *)(v84 + 36), v81 + *(int *)(v84 + 36), v82);
  v86 = v16[12];
  v87 = v13 + v86;
  v88 = v14 + v86;
  v83(v13 + v86, v14 + v86, v82);
  v83(v87 + *(int *)(v85 + 36), v88 + *(int *)(v85 + 36), v82);
  *(_QWORD *)(v13 + v16[13]) = *(_QWORD *)(v14 + v16[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + v16[14]) = *(_QWORD *)(v14 + v16[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v89 = type metadata accessor for BalanceWidgetViewModel();
  v90 = *(int *)(v89 + 20);
  v91 = v13 + v90;
  v92 = v14 + v90;
  v93 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 24))(v91, v92, v93);
  *(_BYTE *)(v13 + *(int *)(v89 + 24)) = *(_BYTE *)(v14 + *(int *)(v89 + 24));
  return v5;
}

char *sub_23DD09658(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v64;
  char *v65;

  sub_23DCFB328(0, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    v8 = *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = sub_23DDC656C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = sub_23DDC5330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)&v13[v16[5]] = *(_QWORD *)&v14[v16[5]];
  v17 = v16[6];
  v18 = &v13[v17];
  v19 = &v14[v17];
  v20 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = sub_23DDC55A0();
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v18, v19, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
    }
    swift_storeEnumTagMultiPayload();
  }
  v24 = v16[7];
  v25 = &v13[v24];
  v26 = &v14[v24];
  v27 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v28 = *((_QWORD *)v27 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v30 = sub_23DDC512C();
    v64 = v28;
    v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32);
    v31(v25, v26, v30);
    v32 = v27[5];
    v65 = a1;
    v33 = &v25[v32];
    v34 = &v26[v32];
    v31(&v25[v32], &v26[v32], v30);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v31(&v33[*(int *)(v35 + 36)], &v34[*(int *)(v35 + 36)], v30);
    v36 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v33[v36[5]] = *(_QWORD *)&v34[v36[5]];
    *(_QWORD *)&v33[v36[6]] = *(_QWORD *)&v34[v36[6]];
    *(_QWORD *)&v33[v36[7]] = *(_QWORD *)&v34[v36[7]];
    a1 = v65;
    v37 = v27[6];
    v38 = &v25[v37];
    v39 = &v26[v37];
    *(_OWORD *)v38 = *(_OWORD *)v39;
    v38[16] = v39[16];
    v25[v27[7]] = v26[v27[7]];
    v25[v27[8]] = v26[v27[8]];
    v25[v27[9]] = v26[v27[9]];
    *(_OWORD *)&v25[v27[10]] = *(_OWORD *)&v26[v27[10]];
    *(_OWORD *)&v25[v27[11]] = *(_OWORD *)&v26[v27[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v64 + 56))(v25, 0, 1, v27);
  }
  v40 = v16[8];
  v41 = &v13[v40];
  v42 = &v14[v40];
  *(_QWORD *)&v13[v40] = *(_QWORD *)&v14[v40];
  v43 = type metadata accessor for OvernightMetricsChartPointCollection();
  v44 = *(int *)(v43 + 20);
  v45 = &v41[v44];
  v46 = &v42[v44];
  v47 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v45, v46, v47);
  *(_QWORD *)&v41[*(int *)(v43 + 24)] = *(_QWORD *)&v42[*(int *)(v43 + 24)];
  *(_QWORD *)&v13[v16[9]] = *(_QWORD *)&v14[v16[9]];
  *(_QWORD *)&v13[v16[10]] = *(_QWORD *)&v14[v16[10]];
  v48 = v16[11];
  v49 = &v13[v48];
  v50 = &v14[v48];
  v51 = sub_23DDC512C();
  v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32);
  v52(v49, v50, v51);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v54 = v53;
  v52(&v49[*(int *)(v53 + 36)], &v50[*(int *)(v53 + 36)], v51);
  v55 = v16[12];
  v56 = &v13[v55];
  v57 = &v14[v55];
  v52(&v13[v55], &v14[v55], v51);
  v52(&v56[*(int *)(v54 + 36)], &v57[*(int *)(v54 + 36)], v51);
  *(_QWORD *)&v13[v16[13]] = *(_QWORD *)&v14[v16[13]];
  *(_QWORD *)&v13[v16[14]] = *(_QWORD *)&v14[v16[14]];
  v58 = type metadata accessor for BalanceWidgetViewModel();
  v59 = *(int *)(v58 + 20);
  v60 = &v13[v59];
  v61 = &v14[v59];
  v62 = sub_23DDC527C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v60, v61, v62);
  v13[*(int *)(v58 + 24)] = v14[*(int *)(v58 + 24)];
  return a1;
}

char *sub_23DD09B54(uint64_t a1, char *a2, uint64_t a3)
{
  char *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, int *);
  int v31;
  int v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v94;
  char *v95;
  char *v96;

  v5 = (char *)a1;
  if ((char *)a1 != a2)
  {
    v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_23DD0B1E4(a1, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_23DCFB328(0, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, v6);
    v8 = v7;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v5 = *a2;
      *(_OWORD *)(v5 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 24);
      v9 = *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
      v10 = &v5[v9];
      v11 = &a2[v9];
      v12 = sub_23DDC656C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v5, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
  }
  v13 = *(int *)(a3 + 20);
  v14 = &v5[v13];
  v15 = &a2[v13];
  v16 = sub_23DDC5330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)&v14[v17[5]] = *(_QWORD *)&v15[v17[5]];
  swift_bridgeObjectRelease();
  if (v5 != a2)
  {
    v18 = v17[6];
    v19 = &v14[v18];
    v20 = &v15[v18];
    sub_23DCF59A8((uint64_t)&v14[v18], type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v21 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v22 = sub_23DDC55A0();
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v19, v20, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  v25 = v17[7];
  v26 = &v14[v25];
  v27 = &v15[v25];
  v28 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v29 = *((_QWORD *)v28 - 1);
  v30 = *(uint64_t (**)(char *, uint64_t, int *))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      v35 = sub_23DDC512C();
      v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32);
      v36(v26, v27, v35);
      v94 = v29;
      v95 = v5;
      v37 = v36;
      v38 = v28[5];
      v39 = &v26[v38];
      v40 = &v27[v38];
      v37(&v26[v38], &v27[v38], v35);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v37(&v39[*(int *)(v41 + 36)], &v40[*(int *)(v41 + 36)], v35);
      v42 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v39[v42[5]] = *(_QWORD *)&v40[v42[5]];
      *(_QWORD *)&v39[v42[6]] = *(_QWORD *)&v40[v42[6]];
      v43 = v42[7];
      v44 = *(_QWORD *)&v40[v43];
      v5 = v95;
      *(_QWORD *)&v39[v43] = v44;
      v45 = v28[6];
      v46 = &v26[v45];
      v47 = &v27[v45];
      *(_OWORD *)v46 = *(_OWORD *)v47;
      v46[16] = v47[16];
      v26[v28[7]] = v27[v28[7]];
      v26[v28[8]] = v27[v28[8]];
      v26[v28[9]] = v27[v28[9]];
      *(_OWORD *)&v26[v28[10]] = *(_OWORD *)&v27[v28[10]];
      *(_OWORD *)&v26[v28[11]] = *(_OWORD *)&v27[v28[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v94 + 56))(v26, 0, 1, v28);
      goto LABEL_20;
    }
    v33 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  else
  {
    if (!v32)
    {
      v48 = sub_23DDC512C();
      v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40);
      v49(v26, v27, v48);
      v50 = v28[5];
      v51 = &v26[v50];
      v96 = v5;
      v52 = &v27[v50];
      v49(&v26[v50], &v27[v50], v48);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v49(&v51[*(int *)(v53 + 36)], &v52[*(int *)(v53 + 36)], v48);
      v54 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v51[v54[5]] = *(_QWORD *)&v52[v54[5]];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v51[v54[6]] = *(_QWORD *)&v52[v54[6]];
      swift_bridgeObjectRelease();
      v55 = v54[7];
      v56 = *(_QWORD *)&v52[v55];
      v5 = v96;
      *(_QWORD *)&v51[v55] = v56;
      swift_bridgeObjectRelease();
      v57 = v28[6];
      v58 = &v26[v57];
      v59 = &v27[v57];
      *(_OWORD *)v58 = *(_OWORD *)v59;
      v58[16] = v59[16];
      v26[v28[7]] = v27[v28[7]];
      v26[v28[8]] = v27[v28[8]];
      v26[v28[9]] = v27[v28[9]];
      v60 = v28[10];
      v61 = &v26[v60];
      v62 = &v27[v60];
      v64 = *(_QWORD *)v62;
      v63 = *((_QWORD *)v62 + 1);
      *(_QWORD *)v61 = v64;
      *((_QWORD *)v61 + 1) = v63;
      swift_bridgeObjectRelease();
      v65 = v28[11];
      v66 = &v26[v65];
      v67 = &v27[v65];
      v69 = *(_QWORD *)v67;
      v68 = *((_QWORD *)v67 + 1);
      *(_QWORD *)v66 = v69;
      *((_QWORD *)v66 + 1) = v68;
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    sub_23DCF59A8((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    v33 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v33);
  memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
LABEL_20:
  v70 = v17[8];
  v71 = &v14[v70];
  v72 = &v15[v70];
  *(_QWORD *)&v14[v70] = *(_QWORD *)&v15[v70];
  swift_bridgeObjectRelease();
  v73 = type metadata accessor for OvernightMetricsChartPointCollection();
  v74 = *(int *)(v73 + 20);
  v75 = &v71[v74];
  v76 = &v72[v74];
  v77 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 40))(v75, v76, v77);
  *(_QWORD *)&v71[*(int *)(v73 + 24)] = *(_QWORD *)&v72[*(int *)(v73 + 24)];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v14[v17[9]] = *(_QWORD *)&v15[v17[9]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v14[v17[10]] = *(_QWORD *)&v15[v17[10]];
  swift_bridgeObjectRelease();
  v78 = v17[11];
  v79 = &v14[v78];
  v80 = &v15[v78];
  v81 = sub_23DDC512C();
  v82 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 40);
  v82(v79, v80, v81);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v84 = v83;
  v82(&v79[*(int *)(v83 + 36)], &v80[*(int *)(v83 + 36)], v81);
  v85 = v17[12];
  v86 = &v14[v85];
  v87 = &v15[v85];
  v82(&v14[v85], &v15[v85], v81);
  v82(&v86[*(int *)(v84 + 36)], &v87[*(int *)(v84 + 36)], v81);
  *(_QWORD *)&v14[v17[13]] = *(_QWORD *)&v15[v17[13]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v14[v17[14]] = *(_QWORD *)&v15[v17[14]];
  swift_bridgeObjectRelease();
  v88 = type metadata accessor for BalanceWidgetViewModel();
  v89 = *(int *)(v88 + 20);
  v90 = &v14[v89];
  v91 = &v15[v89];
  v92 = sub_23DDC527C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 40))(v90, v91, v92);
  v14[*(int *)(v88 + 24)] = v15[*(int *)(v88 + 24)];
  return v5;
}

uint64_t sub_23DD0A24C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  sub_23DCFB328(0, qword_256CFC5A8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x24BDEB580]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for BalanceWidgetViewModel();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_23DD0A2E8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  sub_23DCFB328(0, qword_256CFC5A8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, MEMORY[0x24BDEB580]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for BalanceWidgetViewModel();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23DD0A38C()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DCFB328(319, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for BalanceWidgetViewModel();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_23DD0A428()
{
  sub_23DD0742C(255);
  sub_23DD073B0();
  sub_23DD0B068(&qword_256CFC688, (uint64_t (*)(uint64_t))sub_23DD073B0, (uint64_t (*)(void))sub_23DD074B8);
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD0A4C0()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23DD0A4D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC748)
  {
    sub_23DD0A530();
    sub_23DD0A7C8();
    v0 = sub_23DDC5B28();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC748);
  }
}

void sub_23DD0A530()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC750)
  {
    sub_23DD0AA4C(255, (unint64_t *)&qword_256CFC758, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DD0A5E8(255);
    sub_23DD0A770(&qword_256CFC790, MEMORY[0x24BEE12D8]);
    v0 = sub_23DDC6380();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC750);
  }
}

void sub_23DD0A5E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_256CFC760)
  {
    sub_23DD0A67C(255);
    v5[0] = v2;
    v5[1] = sub_23DCFB798(&qword_256CFC778, (uint64_t (*)(uint64_t))sub_23DD0A67C, (uint64_t (*)(void))sub_23DD0A6F4, sub_23DD0A754);
    v3 = MEMORY[0x242643B9C](a1, v5, MEMORY[0x24BDFAC10], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_256CFC760);
  }
}

void sub_23DD0A67C(uint64_t a1)
{
  sub_23DCFB494(a1, &qword_256CFC768, (void (*)(uint64_t))sub_23DD0A698, (void (*)(uint64_t))MEMORY[0x24BDF1088]);
}

void sub_23DD0A698()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC770)
  {
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC770);
  }
}

unint64_t sub_23DD0A6F4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256CFC780;
  if (!qword_256CFC780)
  {
    sub_23DD0A698();
    v2[0] = MEMORY[0x24BDF1F80];
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256CFC780);
  }
  return result;
}

uint64_t sub_23DD0A754()
{
  return sub_23DCF535C(&qword_256CFC788, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
}

uint64_t sub_23DD0A770(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_23DD0AA4C(255, (unint64_t *)&qword_256CFC758, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x242643BD8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DD0A7C8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[3];

  result = qword_256CFC798;
  if (!qword_256CFC798)
  {
    sub_23DD0A530();
    v2 = v1;
    sub_23DD0A67C(255);
    v4[1] = v3;
    v4[2] = sub_23DCFB798(&qword_256CFC778, (uint64_t (*)(uint64_t))sub_23DD0A67C, (uint64_t (*)(void))sub_23DD0A6F4, sub_23DD0A754);
    v4[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF4A08], v2, v4);
    atomic_store(result, (unint64_t *)&qword_256CFC798);
  }
  return result;
}

void sub_23DD0A86C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC7A0)
  {
    sub_23DD0A4D0();
    sub_23DCF535C(&qword_256CFC7A8, (uint64_t (*)(uint64_t))sub_23DD0A4D0, MEMORY[0x24BDEBE40]);
    v0 = sub_23DDC6308();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC7A0);
  }
}

void sub_23DD0A8E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC7B0)
  {
    sub_23DD0A86C();
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC7B0);
  }
}

void sub_23DD0A940(uint64_t a1)
{
  sub_23DCFB494(a1, &qword_256CFC7B8, (void (*)(uint64_t))sub_23DD0A8E4, (void (*)(uint64_t))sub_23DD0A95C);
}

void sub_23DD0A95C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC7C0)
  {
    sub_23DD0AA4C(255, &qword_256CFC7C8, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = sub_23DDC5F00();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC7C0);
  }
}

void sub_23DD0A9C8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    a3(255);
    sub_23DD0AA4C(255, a4, a5, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
    v8 = sub_23DDC5C0C();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_23DD0AA4C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_23DD0AA90()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC7E0)
  {
    sub_23DD0A4D0();
    v0 = sub_23DDC5B94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC7E0);
  }
}

void sub_23DD0AAF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC7E8)
  {
    sub_23DD0A530();
    sub_23DD0AB5C();
    v0 = sub_23DDC5B94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC7E8);
  }
}

unint64_t sub_23DD0AB5C()
{
  unint64_t result;

  result = qword_256CFC7F0;
  if (!qword_256CFC7F0)
  {
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEDC40], MEMORY[0x24BDEDC50]);
    atomic_store(result, (unint64_t *)&qword_256CFC7F0);
  }
  return result;
}

uint64_t sub_23DD0ABA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  sub_23DCFB328(0, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = v3 + *(int *)(type metadata accessor for BalanceWidgetAccessoryRectangularSpecs() + 24);
    v5 = sub_23DDC656C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v6 = v3 + *(int *)(v1 + 20);
  v7 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  v9 = v6 + v8[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = sub_23DDC55A0();
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  v12 = v6 + v8[7];
  v13 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v14 = sub_23DDC512C();
    v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
    v15(v12, v14);
    v16 = v12 + *(int *)(v13 + 20);
    v15(v16, v14);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v15(v16 + *(int *)(v17 + 36), v14);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v18 = v6 + v8[8];
  swift_bridgeObjectRelease();
  v19 = v18 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v20 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v6 + v8[11];
  v22 = sub_23DDC512C();
  v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
  v23(v21, v22);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v25 = v24;
  v23(v21 + *(int *)(v24 + 36), v22);
  v26 = v6 + v8[12];
  v23(v26, v22);
  v23(v26 + *(int *)(v25 + 36), v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = v6 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  v28 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  return swift_deallocObject();
}

uint64_t sub_23DD0AF28@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BalanceWidgetAccessoryRectangularTitleView(0) - 8)
                          + 80);
  return sub_23DD07B3C(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_23DD0AF84()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_256CFC7F8;
  if (!qword_256CFC7F8)
  {
    v1 = MEMORY[0x24BEE1328];
    sub_23DD0A9C8(255, &qword_256CFC7D0, sub_23DD0A940, &qword_256CFC7D8, MEMORY[0x24BEE1328]);
    v3 = v2;
    v4[0] = sub_23DCFB798(&qword_256CFC800, (uint64_t (*)(uint64_t))sub_23DD0A940, sub_23DD0B04C, sub_23DD0B0F0);
    v4[1] = sub_23DD0B10C((unint64_t *)&qword_256CFC820, &qword_256CFC7D8, v1);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v3, v4);
    atomic_store(result, (unint64_t *)&qword_256CFC7F8);
  }
  return result;
}

uint64_t sub_23DD0B04C()
{
  return sub_23DD0B068(&qword_256CFC808, (uint64_t (*)(uint64_t))sub_23DD0A8E4, sub_23DD0B0D4);
}

uint64_t sub_23DD0B068(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DD0B0D4()
{
  return sub_23DCF535C(&qword_256CFC810, (uint64_t (*)(uint64_t))sub_23DD0A86C, MEMORY[0x24BDF4498]);
}

uint64_t sub_23DD0B0F0()
{
  return sub_23DCF535C(&qword_256CFC818, (uint64_t (*)(uint64_t))sub_23DD0A95C, MEMORY[0x24BDF1028]);
}

uint64_t sub_23DD0B10C(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_23DD0AA4C(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF1028], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DD0B154(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v6;

  sub_23DD0A9C8(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

unint64_t sub_23DD0B190()
{
  unint64_t result;

  result = qword_254326408;
  if (!qword_254326408)
  {
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_254326408);
  }
  return result;
}

uint64_t sub_23DD0B1D4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_23DD0B1E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v5;

  sub_23DCFB328(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_23DD0B220()
{
  sub_23DD0A9C8(255, &qword_256CFC7D0, sub_23DD0A940, &qword_256CFC7D8, MEMORY[0x24BEE1328]);
  sub_23DD0AF84();
  return swift_getOpaqueTypeConformance2();
}

id SettingsModelProvider.__allocating_init(healthStore:)(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  uint64_t v5;
  id v6;

  v2 = v1;
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3BF8]), sel_initWithFeatureIdentifier_healthStore_currentCountryCode_, *MEMORY[0x24BDD2E80], a1, 0);
  sub_23DDC5738();
  v5 = sub_23DDC572C();
  v6 = sub_23DD0BBE0(v4, v5, objc_allocWithZone(v2));

  return v6;
}

uint64_t SettingsModelProvider.featureStatusProviding(_:didUpdate:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  swift_getObjectType();
  return sub_23DD0BFFC(a2, v2);
}

uint64_t SettingsModelProvider.onboardingEligible.getter()
{
  return sub_23DD0B588((uint64_t)&unk_23DDC7C70, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__onboardingEligible);
}

uint64_t sub_23DD0B360@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_23DD0B608(a1, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__onboardingEligible, a2);
}

uint64_t sub_23DD0B374()
{
  swift_getKeyPath();
  sub_23DD0C5C4();
  sub_23DDC5204();
  return swift_release();
}

uint64_t SettingsModelProvider.isAgeGated.getter()
{
  return sub_23DD0B588((uint64_t)&unk_23DDC7C98, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__isAgeGated);
}

uint64_t sub_23DD0B418@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_23DD0B608(a1, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__isAgeGated, a2);
}

uint64_t sub_23DD0B42C()
{
  swift_getKeyPath();
  sub_23DD0C5C4();
  sub_23DDC5204();
  return swift_release();
}

uint64_t SettingsModelProvider.settingsVisible.getter()
{
  return sub_23DD0B588((uint64_t)&unk_23DDC7CC0, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsVisible);
}

uint64_t sub_23DD0B4D0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_23DD0B608(a1, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsVisible, a2);
}

uint64_t sub_23DD0B4E4()
{
  swift_getKeyPath();
  sub_23DD0C5C4();
  sub_23DDC5204();
  return swift_release();
}

uint64_t SettingsModelProvider.settingsUserInteractionEnabled.getter()
{
  return sub_23DD0B588((uint64_t)&unk_23DDC7CE8, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled);
}

uint64_t sub_23DD0B588(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  swift_getKeyPath();
  sub_23DD0C5C4();
  sub_23DDC5210();
  swift_release();
  return *(unsigned __int8 *)(v2 + *a2);
}

uint64_t sub_23DD0B5F4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_23DD0B608(a1, &OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled, a2);
}

uint64_t sub_23DD0B608@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X4>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = *a1;
  swift_getKeyPath();
  sub_23DD0C5C4();
  sub_23DDC5210();
  result = swift_release();
  *a3 = *(_BYTE *)(v5 + *a2);
  return result;
}

uint64_t sub_23DD0B688()
{
  swift_getKeyPath();
  sub_23DD0C5C4();
  sub_23DDC5204();
  return swift_release();
}

BOOL SettingsModelProvider.settingsUserInteractionDisabled.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_23DD0C5C4();
  sub_23DDC5210();
  swift_release();
  return (*(_BYTE *)(v0 + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled) & 1) == 0;
}

uint64_t SettingsModelProvider.sleepingSampleChangeNotificationsEnabled.getter()
{
  uint64_t v0;

  if ((sub_23DDC56F0() & 1) == 0)
    return 0;
  swift_getKeyPath();
  sub_23DD0C5C4();
  sub_23DDC5210();
  swift_release();
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled);
}

uint64_t SettingsModelProvider.sleepingSampleChangeNotificationsEnabled.setter()
{
  return sub_23DDC56FC();
}

uint64_t (*SettingsModelProvider.sleepingSampleChangeNotificationsEnabled.modify(_QWORD *a1))()
{
  uint64_t v1;
  _BYTE *v3;
  char v4;

  v3 = a1 + 2;
  a1[1] = *(_QWORD *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider_settings);
  if ((sub_23DDC56F0() & 1) != 0)
  {
    swift_getKeyPath();
    *a1 = v1;
    sub_23DD0C5C4();
    sub_23DDC5210();
    swift_release();
    v4 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled);
  }
  else
  {
    v4 = 0;
  }
  *v3 = v4;
  return sub_23DD0B900;
}

uint64_t sub_23DD0B900()
{
  return sub_23DDC56FC();
}

uint64_t SettingsModelProvider.notificationsEnabled.getter()
{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  id v3;
  uint64_t v5;

  v1 = (_QWORD *)swift_allocObject();
  v1[2] = 0;
  v1[3] = 0;
  v1[4] = v0;
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = 0;
  v2[3] = 0;
  v2[4] = v0;
  v3 = v0;
  sub_23DDC6344();
  return v5;
}

uint64_t sub_23DD0B9C4@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = sub_23DDC56F0();
  if ((result & 1) != 0)
  {
    swift_getKeyPath();
    sub_23DD0C5C4();
    sub_23DDC5210();
    result = swift_release();
    v5 = *(_BYTE *)(a1 + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled);
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

id SettingsModelProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SettingsModelProvider.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SettingsModelProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_23DD0BBE0(void *a1, uint64_t a2, _BYTE *a3)
{
  objc_class *ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  os_log_t v31;
  void *v32;
  uint64_t v34;
  os_log_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  objc_super v41;
  id v42[2];

  v42[1] = *(id *)MEMORY[0x24BDAC8D0];
  ObjectType = (objc_class *)swift_getObjectType();
  v7 = sub_23DDC57A4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3[OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__onboardingEligible] = 0;
  a3[OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__isAgeGated] = 0;
  a3[OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsVisible] = 1;
  a3[OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled] = 0;
  v11 = a3;
  sub_23DDC5234();
  *(_QWORD *)&v11[OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider_featureStatusManager] = a1;
  *(_QWORD *)&v11[OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider_settings] = a2;
  v12 = a1;
  swift_retain();

  v41.receiver = v11;
  v41.super_class = ObjectType;
  v13 = objc_msgSendSuper2(&v41, sel_init);
  sub_23DD0C898(0, (unint64_t *)&qword_256CFC908);
  v14 = v13;
  v15 = (void *)sub_23DDC6938();
  objc_msgSend(v12, sel_registerObserver_queue_, v14, v15);

  v42[0] = 0;
  v16 = objc_msgSend(v12, sel_featureStatusWithError_, v42);
  if (v16)
  {
    v17 = v16;
    v18 = v42[0];
    sub_23DD0BFFC(v17, (uint64_t)v14);

    swift_release();
  }
  else
  {
    v38 = v8;
    v39 = v7;
    v19 = v42[0];
    v20 = (void *)sub_23DDC4FE8();

    swift_willThrow();
    sub_23DDC578C();
    v21 = v20;
    v22 = v20;
    v23 = sub_23DDC5798();
    v24 = sub_23DDC68D8();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc();
      v36 = (_QWORD *)swift_slowAlloc();
      v37 = (void *)swift_slowAlloc();
      v42[0] = v37;
      *(_DWORD *)v25 = 136446466;
      v26 = sub_23DDC6D04();
      v40 = sub_23DD02158(v26, v27, (uint64_t *)v42);
      v35 = v23;
      sub_23DDC698C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2114;
      v28 = v20;
      v29 = _swift_stdlib_bridgeErrorToNSError();
      v40 = v29;
      sub_23DDC698C();
      v30 = v36;
      *v36 = v29;

      v31 = v35;
      _os_log_impl(&dword_23DCF2000, v35, v24, "[%{public}s] Failed to fetch initial status: %{public}@", (uint8_t *)v25, 0x16u);
      sub_23DD0C834();
      swift_arrayDestroy();
      MEMORY[0x242643C80](v30, -1, -1);
      v32 = v37;
      swift_arrayDestroy();
      MEMORY[0x242643C80](v32, -1, -1);
      MEMORY[0x242643C80](v25, -1, -1);

      swift_release();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v39);
  }
  return v14;
}

uint64_t sub_23DD0BFFC(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t result;
  void *v16;
  unsigned __int8 v17;
  uint64_t KeyPath;
  void *v19;
  unsigned __int8 v20;
  uint64_t v21;
  void *v22;
  unsigned __int8 v23;
  uint64_t v24;
  void *v25;
  unsigned __int8 v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD v39[2];
  char *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v39[1] = swift_getObjectType();
  v4 = sub_23DDC57A4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v46 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DDC5744();
  v45 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DDC64A0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (_QWORD *)((char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23DD0C898(0, (unint64_t *)&qword_256CFC908);
  *v13 = sub_23DDC6938();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BEE5610], v10);
  v14 = sub_23DDC64AC();
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    v42 = v5;
    v43 = v7;
    v44 = v4;
    v41 = a1;
    sub_23DDC5750();
    v16 = (void *)sub_23DDC575C();
    v17 = objc_msgSend(v16, sel_isRequirementSatisfiedWithIdentifier_, *MEMORY[0x24BDD2D48]);

    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    v39[-2] = a2;
    LOBYTE(v39[-1]) = v17 ^ 1;
    v48 = a2;
    sub_23DD0C5C4();
    sub_23DDC5204();
    swift_release();
    v19 = (void *)sub_23DDC575C();
    v20 = objc_msgSend(v19, sel_areAllRequirementsSatisfied);

    v21 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v21);
    v39[-2] = a2;
    LOBYTE(v39[-1]) = v20;
    v48 = a2;
    sub_23DDC5204();
    swift_release();
    v22 = (void *)sub_23DDC575C();
    v23 = objc_msgSend(v22, sel_areAllRequirementsSatisfied);

    v24 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v24);
    v39[-2] = a2;
    LOBYTE(v39[-1]) = v23;
    v48 = a2;
    sub_23DDC5204();
    swift_release();
    v40 = v9;
    v25 = (void *)sub_23DDC575C();
    v26 = objc_msgSend(v25, sel_areAllRequirementsSatisfied);

    v27 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v27);
    v39[-2] = a2;
    LOBYTE(v39[-1]) = v26;
    v48 = a2;
    sub_23DDC5204();
    swift_release();
    sub_23DDC578C();
    v28 = v41;
    v29 = sub_23DDC5798();
    v30 = sub_23DDC68F0();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc();
      v48 = swift_slowAlloc();
      v32 = v48;
      *(_DWORD *)v31 = 136446466;
      v33 = sub_23DDC6D04();
      v47 = sub_23DD02158(v33, v34, &v48);
      sub_23DDC698C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v35 = objc_msgSend(v28, sel_debugDescription);
      v36 = sub_23DDC6764();
      v38 = v37;

      v47 = sub_23DD02158(v36, v38, &v48);
      sub_23DDC698C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DCF2000, v29, v30, "[%{public}s] Did update feature status: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v32, -1, -1);
      MEMORY[0x242643C80](v31, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v46, v44);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v40, v43);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_23DD0C5C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFC838;
  if (!qword_256CFC838)
  {
    v1 = type metadata accessor for SettingsModelProvider();
    result = MEMORY[0x242643BD8](&protocol conformance descriptor for SettingsModelProvider, v1);
    atomic_store(result, (unint64_t *)&qword_256CFC838);
  }
  return result;
}

uint64_t type metadata accessor for SettingsModelProvider()
{
  uint64_t result;

  result = qword_256CFC8F8;
  if (!qword_256CFC8F8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD0C664@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_23DD0B9C4(*(_QWORD *)(v1 + 32), a1);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_23DD0C6A0()
{
  return sub_23DDC56FC();
}

uint64_t sub_23DD0C6D0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SettingsModelProvider.sleepingSampleChangeNotificationsEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_23DD0C6FC()
{
  return sub_23DDC56FC();
}

uint64_t sub_23DD0C72C()
{
  return type metadata accessor for SettingsModelProvider();
}

uint64_t sub_23DD0C734()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC5240();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SettingsModelProvider()
{
  return swift_lookUpClassMethod();
}

void sub_23DD0C7D4()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16)
           + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsUserInteractionEnabled) = *(_BYTE *)(v0 + 24);
}

void sub_23DD0C7EC()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__settingsVisible) = *(_BYTE *)(v0 + 24);
}

void sub_23DD0C804()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__isAgeGated) = *(_BYTE *)(v0 + 24);
}

void sub_23DD0C81C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC15HealthBalanceUI21SettingsModelProvider__onboardingEligible) = *(_BYTE *)(v0 + 24);
}

void sub_23DD0C834()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254326420)
  {
    sub_23DD0C898(255, &qword_254326418);
    v0 = sub_23DDC6980();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254326420);
  }
}

uint64_t sub_23DD0C898(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_23DD0C8D0()
{
  sub_23DD0C804();
}

void sub_23DD0C8E4()
{
  sub_23DD0C81C();
}

void sub_23DD0C8F8()
{
  sub_23DD0C7EC();
}

void sub_23DD0C90C()
{
  sub_23DD0C7D4();
}

void sub_23DD0C920(double a1, double a2, double a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;

  if (a1 >= a3)
  {
    swift_retain();
    v13 = sub_23DDC63A4();
    v15 = v18;
    v9 = sub_23DD56598(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v17 = v9[2];
    v16 = v9[3];
  }
  else
  {
    swift_retain();
    v6 = sub_23DDC63A4();
    v8 = v7;
    v9 = sub_23DD56598(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v11 = v9[2];
    v10 = v9[3];
    if (v11 >= v10 >> 1)
      v9 = sub_23DD56598((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
    v9[2] = v11 + 1;
    v12 = &v9[2 * v11];
    v12[4] = v6;
    v12[5] = v8;
    swift_retain();
    v13 = sub_23DDC63A4();
    v15 = v14;
    v17 = v9[2];
    v16 = v9[3];
  }
  if (v17 >= v16 >> 1)
    v9 = sub_23DD56598((_QWORD *)(v16 > 1), v17 + 1, 1, v9);
  v9[2] = v17 + 1;
  v19 = &v9[2 * v17];
  v19[4] = v13;
  v19[5] = v15;
  if (a4 < a2)
  {
    swift_retain();
    v20 = sub_23DDC63A4();
    v22 = v21;
    v24 = v9[2];
    v23 = v9[3];
    if (v24 >= v23 >> 1)
      v9 = sub_23DD56598((_QWORD *)(v23 > 1), v24 + 1, 1, v9);
    v9[2] = v24 + 1;
    v25 = &v9[2 * v24];
    v25[4] = v20;
    v25[5] = v22;
    swift_retain();
    v26 = sub_23DDC63A4();
    v28 = v27;
    v30 = v9[2];
    v29 = v9[3];
    if (v30 >= v29 >> 1)
      v9 = sub_23DD56598((_QWORD *)(v29 > 1), v30 + 1, 1, v9);
    v9[2] = v30 + 1;
    v31 = &v9[2 * v30];
    v31[4] = v26;
    v31[5] = v28;
  }
  JUMPOUT(0x242642DECLL);
}

uint64_t sub_23DD0CB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if ((a36 & 1) != 0)
  {
    sub_23DCFBC78(a1);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  return swift_retain();
}

uint64_t destroy for OvernightMetricsXAxisSpaceReserver(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a1 + 240);
  v4 = *(_OWORD *)(a1 + 256);
  v2 = *(_OWORD *)(a1 + 208);
  return sub_23DD0CCE4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160),
           *(_QWORD *)(a1 + 168),
           *(_QWORD *)(a1 + 176),
           *(_QWORD *)(a1 + 184),
           *(_QWORD *)(a1 + 192),
           *(_QWORD *)(a1 + 200),
           v2,
           *((uint64_t *)&v2 + 1),
           *(_QWORD *)(a1 + 224),
           *(_QWORD *)(a1 + 232),
           v3,
           *((uint64_t *)&v3 + 1),
           v4,
           *((uint64_t *)&v4 + 1),
           *(_QWORD *)(a1 + 272),
           *(_BYTE *)(a1 + 280));
}

uint64_t sub_23DD0CCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if ((a36 & 1) != 0)
  {
    sub_23DCFE9E4(a1);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t initializeWithCopy for OvernightMetricsXAxisSpaceReserver(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a2 + 168);
  v26 = *(_QWORD *)(a2 + 176);
  v27 = *(_QWORD *)(a2 + 184);
  v28 = *(_QWORD *)(a2 + 192);
  v29 = *(_QWORD *)(a2 + 200);
  v30 = *(_QWORD *)(a2 + 208);
  v31 = *(_QWORD *)(a2 + 216);
  v32 = *(_QWORD *)(a2 + 224);
  v33 = *(_QWORD *)(a2 + 232);
  v34 = *(_QWORD *)(a2 + 240);
  v35 = *(_QWORD *)(a2 + 248);
  v36 = *(_QWORD *)(a2 + 256);
  v37 = *(_QWORD *)(a2 + 264);
  v38 = *(_QWORD *)(a2 + 272);
  v39 = *(_BYTE *)(a2 + 280);
  v3 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 48);
  sub_23DD0CB9C(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v3, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 160) = v24;
  *(_QWORD *)(a1 + 168) = v25;
  *(_QWORD *)(a1 + 176) = v26;
  *(_QWORD *)(a1 + 184) = v27;
  *(_QWORD *)(a1 + 192) = v28;
  *(_QWORD *)(a1 + 200) = v29;
  *(_QWORD *)(a1 + 208) = v30;
  *(_QWORD *)(a1 + 216) = v31;
  *(_QWORD *)(a1 + 224) = v32;
  *(_QWORD *)(a1 + 232) = v33;
  *(_QWORD *)(a1 + 240) = v34;
  *(_QWORD *)(a1 + 248) = v35;
  *(_QWORD *)(a1 + 256) = v36;
  *(_QWORD *)(a1 + 264) = v37;
  *(_QWORD *)(a1 + 272) = v38;
  *(_BYTE *)(a1 + 280) = v39;
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsXAxisSpaceReserver(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)a2;
  v62 = *(_QWORD *)(a2 + 8);
  v59 = *(_QWORD *)(a2 + 24);
  v60 = *(_QWORD *)(a2 + 16);
  v57 = *(_QWORD *)(a2 + 40);
  v58 = *(_QWORD *)(a2 + 32);
  v55 = *(_QWORD *)(a2 + 56);
  v56 = *(_QWORD *)(a2 + 48);
  v36 = *(_QWORD *)(a2 + 72);
  v37 = *(_QWORD *)(a2 + 80);
  v38 = *(_QWORD *)(a2 + 88);
  v39 = *(_QWORD *)(a2 + 96);
  v40 = *(_QWORD *)(a2 + 104);
  v41 = *(_QWORD *)(a2 + 112);
  v42 = *(_QWORD *)(a2 + 120);
  v43 = *(_QWORD *)(a2 + 128);
  v3 = *(_QWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 152);
  v5 = *(_QWORD *)(a2 + 160);
  v6 = *(_QWORD *)(a2 + 168);
  v7 = *(_QWORD *)(a2 + 176);
  v8 = *(_QWORD *)(a2 + 184);
  v9 = *(_QWORD *)(a2 + 192);
  v10 = *(_QWORD *)(a2 + 200);
  v44 = *(_QWORD *)(a2 + 136);
  v45 = *(_QWORD *)(a2 + 208);
  v46 = *(_QWORD *)(a2 + 216);
  v47 = *(_QWORD *)(a2 + 224);
  v48 = *(_QWORD *)(a2 + 232);
  v49 = *(_QWORD *)(a2 + 240);
  v50 = *(_QWORD *)(a2 + 248);
  v51 = *(_QWORD *)(a2 + 256);
  v52 = *(_QWORD *)(a2 + 264);
  v53 = *(_QWORD *)(a2 + 272);
  v54 = *(_BYTE *)(a2 + 280);
  v11 = *(_QWORD *)(a2 + 64);
  sub_23DD0CB9C(*(_QWORD *)a2, v62, v60, v59, v58, v57, v56, v55, v11, v36, v37, v38, v39, v40, v41, v42, v43, v44, v3,
    v4,
    v5,
    v6,
    v7,
    v8,
    v9,
    v10,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v61;
  *(_QWORD *)(a1 + 8) = v62;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v60;
  *(_QWORD *)(a1 + 24) = v59;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v58;
  *(_QWORD *)(a1 + 40) = v57;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v56;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 56) = v55;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v36;
  *(_QWORD *)(a1 + 80) = v37;
  *(_QWORD *)(a1 + 88) = v38;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v39;
  *(_QWORD *)(a1 + 104) = v40;
  *(_QWORD *)(a1 + 112) = v41;
  *(_QWORD *)(a1 + 120) = v42;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v43;
  *(_QWORD *)(a1 + 136) = v44;
  *(_QWORD *)(a1 + 144) = v3;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 152) = v4;
  *(_QWORD *)(a1 + 160) = v5;
  *(_QWORD *)(a1 + 168) = v6;
  *(_QWORD *)(a1 + 176) = v7;
  v28 = *(_OWORD *)(a1 + 192);
  v29 = *(_OWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 184) = v8;
  *(_QWORD *)(a1 + 192) = v9;
  *(_QWORD *)(a1 + 200) = v10;
  *(_QWORD *)(a1 + 208) = v45;
  *(_QWORD *)(a1 + 216) = v46;
  v30 = *(_OWORD *)(a1 + 224);
  v31 = *(_OWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v47;
  *(_QWORD *)(a1 + 232) = v48;
  *(_QWORD *)(a1 + 240) = v49;
  *(_QWORD *)(a1 + 248) = v50;
  v32 = *(_OWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v51;
  *(_QWORD *)(a1 + 264) = v52;
  v33 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v53;
  v34 = *(_BYTE *)(a1 + 280);
  *(_BYTE *)(a1 + 280) = v54;
  sub_23DD0CCE4(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    v34);
  return a1;
}

void *__swift_memcpy281_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x119uLL);
}

uint64_t assignWithTake for OvernightMetricsXAxisSpaceReserver(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v4 = *(_QWORD *)(a2 + 272);
  v5 = *(_BYTE *)(a2 + 280);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_OWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 80);
  v16 = *(_OWORD *)(a1 + 96);
  v17 = *(_OWORD *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 128);
  v19 = *(_OWORD *)(a1 + 144);
  v20 = *(_OWORD *)(a1 + 160);
  v21 = *(_OWORD *)(a1 + 176);
  v22 = *(_OWORD *)(a1 + 192);
  v23 = *(_OWORD *)(a1 + 208);
  v24 = *(_OWORD *)(a1 + 224);
  v25 = *(_OWORD *)(a1 + 240);
  v26 = *(_OWORD *)(a1 + 256);
  v27 = *(_QWORD *)(a1 + 272);
  v28 = *(_BYTE *)(a1 + 280);
  v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v29;
  v30 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v30;
  v31 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v31;
  v32 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v32;
  v33 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v33;
  v34 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v34;
  v35 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v35;
  v36 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v36;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = v4;
  *(_BYTE *)(a1 + 280) = v5;
  sub_23DD0CCE4(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsXAxisSpaceReserver(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 281))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 280);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsXAxisSpaceReserver(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 280) = 0;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 281) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 281) = 0;
    if (a2)
      *(_BYTE *)(result + 280) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsXAxisSpaceReserver()
{
  return &type metadata for OvernightMetricsXAxisSpaceReserver;
}

uint64_t sub_23DD0D438()
{
  return swift_allocateGenericValueMetadata();
}

void sub_23DD0D440()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for OvernightMetricsAxisConfiguration(319);
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
    {
      sub_23DCFB328(319, (unint64_t *)&qword_256CFC9F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

_QWORD *sub_23DD0D50C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  BOOL v31;
  void (*v32)(_QWORD *, _QWORD *, uint64_t);
  char *v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;

  v5 = sub_23DDC512C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v7 + v8;
  v10 = (v9 & ~(unint64_t)v8) + v7;
  v89 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v89 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12;
  v87 = v11;
  v83 = v12 + 72;
  v85 = *(_QWORD *)(v11 + 64) + 7;
  v14 = *(_QWORD *)(sub_23DDC51E0() - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = v15 & 0xF8 | 7;
  v17 = (v15 & 0xF8) + 288;
  v18 = 8;
  if (*(_QWORD *)(v14 + 64) > 8uLL)
    v18 = *(_QWORD *)(v14 + 64);
  v19 = v12 | v8 | (unint64_t)v16;
  v20 = (v12 | v8 | v15) & 0x100000;
  if (v19 != 7
    || v20 != 0
    || v18
     + ((v17
       + ((v85
         + ((v12 + 72 + ((v10 + 23) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v12)) & 0xFFFFFFFFFFFFFFF8)) & ~v16)
     + 1 > 0x18)
  {
    v23 = *a2;
    *a1 = *a2;
    v24 = (_QWORD *)(v23 + ((v19 + 16) & ~v19));
LABEL_28:
    swift_retain();
    return v24;
  }
  v81 = v17;
  v82 = v18;
  v54 = v14;
  v25 = ~(unint64_t)v8;
  v26 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = v26 + 8;
  v28 = v26 + 9;
  v29 = *((unsigned __int8 *)a2 + v26 + 8);
  if (v29 >= 2 && (v27 & 0xFFFFFFF8) != 0)
    v29 = *(_DWORD *)a2 + 2;
  v78 = ~v13;
  v80 = ~v16;
  v31 = v29 == 1;
  v32 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16);
  v32(a1, a2, v5);
  v32((_QWORD *)(((unint64_t)a1 + v9) & v25), (_QWORD *)(((unint64_t)a2 + v9) & v25), v5);
  v33 = (char *)a2 + 7;
  *(_QWORD *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&v33[v10] & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  *((_BYTE *)a1 + v27) = v31;
  v34 = ((unint64_t)a1 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v35 = (unint64_t)&v33[v28] & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v35 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v34 = *(_OWORD *)v35;
    v36 = *(_OWORD *)(v35 + 16);
    v37 = *(_OWORD *)(v35 + 32);
    v38 = *(_OWORD *)(v35 + 48);
    *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
    *(_OWORD *)(v34 + 32) = v37;
    *(_OWORD *)(v34 + 48) = v38;
    *(_OWORD *)(v34 + 16) = v36;
  }
  else
  {
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
    *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
    *(_QWORD *)(v34 + 24) = *(_QWORD *)(v35 + 24);
    *(_QWORD *)(v34 + 32) = *(_QWORD *)(v35 + 32);
    *(_QWORD *)(v34 + 40) = *(_QWORD *)(v35 + 40);
    *(_QWORD *)(v34 + 48) = *(_QWORD *)(v35 + 48);
    *(_QWORD *)(v34 + 56) = *(_QWORD *)(v35 + 56);
    *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v87 + 16))((v83 + v34) & v78, (v83 + v35) & v78, v89);
  v39 = (v85 + ((v83 + v35) & v78)) & 0xFFFFFFFFFFFFFFF8;
  v40 = (v85 + ((v83 + v34) & v78)) & 0xFFFFFFFFFFFFFFF8;
  v90 = *(_QWORD *)(v39 + 64);
  v55 = *(_QWORD *)(v39 + 72);
  v56 = *(_QWORD *)(v39 + 80);
  v57 = *(_QWORD *)(v39 + 88);
  v58 = *(_QWORD *)(v39 + 96);
  v59 = *(_QWORD *)(v39 + 104);
  v60 = *(_QWORD *)(v39 + 112);
  v61 = *(_QWORD *)(v39 + 120);
  v62 = *(_QWORD *)(v39 + 128);
  v63 = *(_QWORD *)(v39 + 136);
  v64 = *(_QWORD *)(v39 + 144);
  v65 = *(_QWORD *)(v39 + 152);
  v66 = *(_QWORD *)(v39 + 160);
  v67 = *(_QWORD *)(v39 + 168);
  v68 = *(_QWORD *)(v39 + 176);
  v69 = *(_QWORD *)(v39 + 184);
  v70 = *(_QWORD *)(v39 + 192);
  v71 = *(_QWORD *)(v39 + 200);
  v72 = *(_QWORD *)(v39 + 208);
  v73 = *(_QWORD *)(v39 + 216);
  v74 = *(_QWORD *)(v39 + 224);
  v75 = *(_QWORD *)(v39 + 232);
  v76 = *(_QWORD *)(v39 + 240);
  v77 = *(_QWORD *)(v39 + 248);
  v79 = *(_QWORD *)(v39 + 256);
  v84 = *(_QWORD *)(v39 + 264);
  v86 = *(_QWORD *)(v39 + 272);
  v88 = *(_BYTE *)(v39 + 280);
  v42 = *(_QWORD *)(v39 + 8);
  v41 = *(_QWORD *)v39;
  v44 = *(_QWORD *)(v39 + 24);
  v43 = *(_QWORD *)(v39 + 16);
  v46 = *(_QWORD *)(v39 + 40);
  v45 = *(_QWORD *)(v39 + 32);
  v47 = *(_QWORD *)(v39 + 56);
  v48 = *(_QWORD *)(v39 + 48);
  sub_23DD0CB9C(*(_QWORD *)v39, v42, v43, v44, v45, v46, v48, v47, v90, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64,
    v65,
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74,
    v75,
    v76,
    v77,
    v79,
    v84,
    v86,
    v88);
  *(_QWORD *)v40 = v41;
  *(_QWORD *)(v40 + 8) = v42;
  *(_QWORD *)(v40 + 16) = v43;
  *(_QWORD *)(v40 + 24) = v44;
  *(_QWORD *)(v40 + 32) = v45;
  *(_QWORD *)(v40 + 40) = v46;
  *(_QWORD *)(v40 + 48) = v48;
  *(_QWORD *)(v40 + 56) = v47;
  *(_QWORD *)(v40 + 64) = v90;
  *(_QWORD *)(v40 + 72) = v55;
  *(_QWORD *)(v40 + 80) = v56;
  *(_QWORD *)(v40 + 88) = v57;
  *(_QWORD *)(v40 + 96) = v58;
  *(_QWORD *)(v40 + 104) = v59;
  *(_QWORD *)(v40 + 112) = v60;
  *(_QWORD *)(v40 + 120) = v61;
  *(_QWORD *)(v40 + 128) = v62;
  *(_QWORD *)(v40 + 136) = v63;
  *(_QWORD *)(v40 + 144) = v64;
  *(_QWORD *)(v40 + 152) = v65;
  *(_QWORD *)(v40 + 160) = v66;
  *(_QWORD *)(v40 + 168) = v67;
  *(_QWORD *)(v40 + 176) = v68;
  *(_QWORD *)(v40 + 184) = v69;
  *(_QWORD *)(v40 + 192) = v70;
  *(_QWORD *)(v40 + 200) = v71;
  *(_QWORD *)(v40 + 208) = v72;
  *(_QWORD *)(v40 + 216) = v73;
  *(_QWORD *)(v40 + 224) = v74;
  *(_QWORD *)(v40 + 232) = v75;
  *(_QWORD *)(v40 + 240) = v76;
  *(_QWORD *)(v40 + 248) = v77;
  *(_QWORD *)(v40 + 256) = v79;
  *(_QWORD *)(v40 + 264) = v84;
  *(_QWORD *)(v40 + 272) = v86;
  v49 = (_QWORD *)((v81 + v40) & v80);
  v50 = (_QWORD *)((v81 + v39) & v80);
  *(_BYTE *)(v40 + 280) = v88;
  v51 = *((unsigned __int8 *)v50 + v82);
  if (v51 >= 2)
  {
    if (v82 <= 3)
      v52 = v82;
    else
      v52 = 4;
    __asm { BR              X12 }
  }
  v24 = a1;
  if (v51 != 1)
  {
    *v49 = *v50;
    *((_BYTE *)v49 + v82) = 0;
    goto LABEL_28;
  }
  (*(void (**)(_QWORD *))(v54 + 16))(v49);
  *((_BYTE *)v49 + v82) = 1;
  return v24;
}

uint64_t sub_23DD0DAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = sub_23DDC512C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  v9 = (((v6 + v7) & ~v7) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(a1, v4);
  v10((v8 + a1) & ~v7, v4);
  swift_bridgeObjectRelease();
  v11 = (_QWORD *)((a1 + v9 + 16) & 0xFFFFFFFFFFFFFFF8);
  if (*v11 >= 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v13 = ((unint64_t)v11 + *(unsigned __int8 *)(v12 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t))(v12 + 8))(v13);
  v14 = (*(_QWORD *)(v12 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_OWORD *)(v14 + 240);
  v24 = *(_OWORD *)(v14 + 256);
  v22 = *(_OWORD *)(v14 + 208);
  sub_23DD0CCE4(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), *(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), *(_QWORD *)(v14 + 48), *(_QWORD *)(v14 + 56), *(_QWORD *)(v14 + 64), *(_QWORD *)(v14 + 72), *(_QWORD *)(v14 + 80), *(_QWORD *)(v14 + 88), *(_QWORD *)(v14 + 96), *(_QWORD *)(v14 + 104), *(_QWORD *)(v14 + 112), *(_QWORD *)(v14 + 120), *(_QWORD *)(v14 + 128), *(_QWORD *)(v14 + 136), *(_QWORD *)(v14 + 144),
    *(_QWORD *)(v14 + 152),
    *(_QWORD *)(v14 + 160),
    *(_QWORD *)(v14 + 168),
    *(_QWORD *)(v14 + 176),
    *(_QWORD *)(v14 + 184),
    *(_QWORD *)(v14 + 192),
    *(_QWORD *)(v14 + 200),
    v22,
    *((uint64_t *)&v22 + 1),
    *(_QWORD *)(v14 + 224),
    *(_QWORD *)(v14 + 232),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    *(_QWORD *)(v14 + 272),
    *(_BYTE *)(v14 + 280));
  v15 = *(_QWORD *)(sub_23DDC51E0() - 8);
  v16 = *(_DWORD *)(v15 + 80) & 0xF8 | 7;
  v17 = (v14 + v16 + 281) & ~v16;
  v18 = *(_QWORD *)(v15 + 64);
  if (v18 <= 8)
    v18 = 8;
  v19 = *(unsigned __int8 *)(v17 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X14 }
  }
  if (v19 == 1)
    return (*(uint64_t (**)(void))(v15 + 8))();
  else
    return swift_release();
}

uint64_t sub_23DD0DCE0(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v14;
  void (*v15)(uint64_t, _DWORD *, uint64_t);
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v77;

  v4 = sub_23DDC512C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ~v7;
  v9 = v6 + v7;
  v10 = ((v6 + v7) & ~v7) + v6;
  v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = *((unsigned __int8 *)a2 + v11 + 8);
  if (v12 >= 2 && ((v11 + 8) & 0xFFFFFFF8) != 0)
    v12 = *a2 + 2;
  v14 = v12 == 1;
  v15 = *(void (**)(uint64_t, _DWORD *, uint64_t))(v5 + 16);
  v15(a1, a2, v4);
  v15((v9 + a1) & v8, (_DWORD *)(((unint64_t)a2 + v9) & v8), v4);
  *(_QWORD *)((a1 + v10 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  *(_BYTE *)(a1 + v11 + 8) = v14;
  v16 = v11 + 16;
  v17 = (v11 + 16 + a1) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)a2 + v16) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v18 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
    v19 = *(_OWORD *)(v18 + 16);
    v20 = *(_OWORD *)(v18 + 32);
    v21 = *(_OWORD *)(v18 + 48);
    *(_QWORD *)(v17 + 64) = *(_QWORD *)(v18 + 64);
    *(_OWORD *)(v17 + 32) = v20;
    *(_OWORD *)(v17 + 48) = v21;
    *(_OWORD *)(v17 + 16) = v19;
  }
  else
  {
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
    *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
    *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
    *(_QWORD *)(v17 + 40) = *(_QWORD *)(v18 + 40);
    *(_QWORD *)(v17 + 48) = *(_QWORD *)(v18 + 48);
    *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
    *(_QWORD *)(v17 + 64) = *(_QWORD *)(v18 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (v17 + v23 + 72) & ~v23;
  v25 = (v18 + v23 + 72) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v22 + 16))(v24, v25);
  v26 = *(_QWORD *)(v22 + 64) + 7;
  v27 = (v26 + v24) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v26 + v25) & 0xFFFFFFFFFFFFFFF8;
  v77 = *(_QWORD *)(v28 + 64);
  v49 = *(_QWORD *)(v28 + 72);
  v50 = *(_QWORD *)(v28 + 80);
  v51 = *(_QWORD *)(v28 + 88);
  v52 = *(_QWORD *)(v28 + 96);
  v53 = *(_QWORD *)(v28 + 104);
  v54 = *(_QWORD *)(v28 + 112);
  v55 = *(_QWORD *)(v28 + 120);
  v56 = *(_QWORD *)(v28 + 128);
  v57 = *(_QWORD *)(v28 + 136);
  v58 = *(_QWORD *)(v28 + 144);
  v59 = *(_QWORD *)(v28 + 152);
  v60 = *(_QWORD *)(v28 + 160);
  v61 = *(_QWORD *)(v28 + 168);
  v62 = *(_QWORD *)(v28 + 176);
  v63 = *(_QWORD *)(v28 + 184);
  v64 = *(_QWORD *)(v28 + 192);
  v65 = *(_QWORD *)(v28 + 200);
  v66 = *(_QWORD *)(v28 + 208);
  v67 = *(_QWORD *)(v28 + 216);
  v68 = *(_QWORD *)(v28 + 224);
  v69 = *(_QWORD *)(v28 + 232);
  v70 = *(_QWORD *)(v28 + 240);
  v71 = *(_QWORD *)(v28 + 248);
  v72 = *(_QWORD *)(v28 + 256);
  v73 = *(_QWORD *)(v28 + 264);
  v74 = *(_QWORD *)(v28 + 272);
  v75 = *(_BYTE *)(v28 + 280);
  v30 = *(_QWORD *)(v28 + 8);
  v29 = *(_QWORD *)v28;
  v32 = *(_QWORD *)(v28 + 24);
  v31 = *(_QWORD *)(v28 + 16);
  v34 = *(_QWORD *)(v28 + 40);
  v33 = *(_QWORD *)(v28 + 32);
  v35 = *(_QWORD *)(v28 + 56);
  v36 = *(_QWORD *)(v28 + 48);
  sub_23DD0CB9C(*(_QWORD *)v28, v30, v31, v32, v33, v34, v36, v35, v77, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58,
    v59,
    v60,
    v61,
    v62,
    v63,
    v64,
    v65,
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74,
    v75);
  *(_QWORD *)v27 = v29;
  *(_QWORD *)(v27 + 8) = v30;
  *(_QWORD *)(v27 + 16) = v31;
  *(_QWORD *)(v27 + 24) = v32;
  *(_QWORD *)(v27 + 32) = v33;
  *(_QWORD *)(v27 + 40) = v34;
  *(_QWORD *)(v27 + 48) = v36;
  *(_QWORD *)(v27 + 56) = v35;
  *(_QWORD *)(v27 + 64) = v77;
  *(_QWORD *)(v27 + 72) = v49;
  *(_QWORD *)(v27 + 80) = v50;
  *(_QWORD *)(v27 + 88) = v51;
  *(_QWORD *)(v27 + 96) = v52;
  *(_QWORD *)(v27 + 104) = v53;
  *(_QWORD *)(v27 + 112) = v54;
  *(_QWORD *)(v27 + 120) = v55;
  *(_QWORD *)(v27 + 128) = v56;
  *(_QWORD *)(v27 + 136) = v57;
  *(_QWORD *)(v27 + 144) = v58;
  *(_QWORD *)(v27 + 152) = v59;
  *(_QWORD *)(v27 + 160) = v60;
  *(_QWORD *)(v27 + 168) = v61;
  *(_QWORD *)(v27 + 176) = v62;
  *(_QWORD *)(v27 + 184) = v63;
  *(_QWORD *)(v27 + 192) = v64;
  *(_QWORD *)(v27 + 200) = v65;
  *(_QWORD *)(v27 + 208) = v66;
  *(_QWORD *)(v27 + 216) = v67;
  *(_QWORD *)(v27 + 224) = v68;
  *(_QWORD *)(v27 + 232) = v69;
  *(_QWORD *)(v27 + 240) = v70;
  *(_QWORD *)(v27 + 248) = v71;
  *(_QWORD *)(v27 + 256) = v72;
  *(_QWORD *)(v27 + 264) = v73;
  *(_QWORD *)(v27 + 272) = v74;
  *(_BYTE *)(v27 + 280) = v75;
  v37 = *(_QWORD *)(sub_23DDC51E0() - 8);
  v38 = *(_DWORD *)(v37 + 80) & 0xF8;
  v39 = v38 + 288;
  v40 = v38 + 288 + v27;
  v41 = ~v38 & 0xFFFFFFFFFFFFFFF8;
  v42 = (_QWORD *)(v40 & v41);
  v43 = (_QWORD *)((v39 + v28) & v41);
  if (*(_QWORD *)(v37 + 64) <= 8uLL)
    v44 = 8;
  else
    v44 = *(_QWORD *)(v37 + 64);
  v45 = *((unsigned __int8 *)v43 + v44);
  if (v45 >= 2)
  {
    if (v44 <= 3)
      v46 = v44;
    else
      v46 = 4;
    __asm { BR              X13 }
  }
  if (v45 == 1)
  {
    (*(void (**)(_QWORD *))(v37 + 16))(v42);
    v47 = 1;
  }
  else
  {
    *v42 = *v43;
    swift_retain();
    v47 = 0;
  }
  *((_BYTE *)v42 + v44) = v47;
  return a1;
}

_DWORD *sub_23DD0E1D4(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(_DWORD *, uint64_t);
  unint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  void (*v17)(_DWORD *, _DWORD *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;

  v3 = a3;
  v5 = a1;
  if (a1 != a2)
  {
    v6 = sub_23DDC512C();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v106 = ~v9;
    v10 = v8 + v9;
    v108 = ((v8 + v9) & ~v9) + v8;
    v11 = ((v108 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    v12 = *(void (**)(_DWORD *, uint64_t))(v7 + 8);
    v12(v5, v6);
    v13 = ((unint64_t)v5 + v10) & ~v9;
    v12((_DWORD *)v13, v6);
    v14 = (_QWORD *)(((unint64_t)v5 + v108 + 7) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRelease();
    v15 = *((unsigned __int8 *)a2 + v11);
    if ((v11 & 0xFFFFFFF8) != 0 && v15 >= 2)
      v15 = *a2 + 2;
    v17 = *(void (**)(_DWORD *, _DWORD *, uint64_t))(v7 + 16);
    v5 = a1;
    v17(a1, a2, v6);
    v17((_DWORD *)v13, (_DWORD *)(((unint64_t)a2 + v10) & v106), v6);
    *v14 = *(_QWORD *)(((unint64_t)a2 + v108 + 7) & 0xFFFFFFFFFFFFF8);
    *((_BYTE *)a1 + v11) = v15 == 1;
    swift_bridgeObjectRetain();
    v3 = a3;
  }
  v18 = sub_23DDC512C();
  v19 = ((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64)
        + ((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80))
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v20 = (_QWORD *)(((unint64_t)v5 + v19) & 0xFFFFFFFFFFFFFFF8);
  v21 = (unint64_t *)(((unint64_t)a2 + v19) & 0xFFFFFFFFFFFFFFF8);
  v22 = *v21;
  if (*v20 < 0xFFFFFFFFuLL)
  {
    if (v22 >= 0xFFFFFFFF)
    {
      *v20 = v22;
      v20[1] = v21[1];
      v20[2] = v21[2];
      v20[3] = v21[3];
      v20[4] = v21[4];
      v20[5] = v21[5];
      v20[6] = v21[6];
      v20[7] = v21[7];
      v20[8] = v21[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_19;
    }
  }
  else
  {
    if (v22 >= 0xFFFFFFFF)
    {
      *v20 = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v20[1] = v21[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v20[2] = v21[2];
      v20[3] = v21[3];
      v20[4] = v21[4];
      v20[5] = v21[5];
      v20[6] = v21[6];
      v20[7] = v21[7];
      v20[8] = v21[8];
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(_OWORD *)v20 = *(_OWORD *)v21;
  v23 = *((_OWORD *)v21 + 1);
  v24 = *((_OWORD *)v21 + 2);
  v25 = *((_OWORD *)v21 + 3);
  v20[8] = v21[8];
  *((_OWORD *)v20 + 2) = v24;
  *((_OWORD *)v20 + 3) = v25;
  *((_OWORD *)v20 + 1) = v23;
LABEL_19:
  v26 = *(_QWORD *)(*(_QWORD *)(v3 + 16) - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = ((unint64_t)v20 + v27 + 72) & ~v27;
  v29 = ((unint64_t)v21 + v27 + 72) & ~v27;
  (*(void (**)(uint64_t, uint64_t))(v26 + 24))(v28, v29);
  v30 = *(_QWORD *)(v26 + 64) + 7;
  v31 = (v30 + v28) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v30 + v29) & 0xFFFFFFFFFFFFFFF8;
  v109 = *(_QWORD *)(v32 + 8);
  v111 = *(_QWORD *)v32;
  v105 = *(_QWORD *)(v32 + 24);
  v107 = *(_QWORD *)(v32 + 16);
  v103 = *(_QWORD *)(v32 + 40);
  v104 = *(_QWORD *)(v32 + 32);
  v101 = *(_QWORD *)(v32 + 56);
  v102 = *(_QWORD *)(v32 + 48);
  v100 = *(_QWORD *)(v32 + 64);
  v80 = *(_QWORD *)(v32 + 72);
  v81 = *(_QWORD *)(v32 + 80);
  v82 = *(_QWORD *)(v32 + 88);
  v83 = *(_QWORD *)(v32 + 96);
  v84 = *(_QWORD *)(v32 + 104);
  v85 = *(_QWORD *)(v32 + 112);
  v86 = *(_QWORD *)(v32 + 120);
  v87 = *(_QWORD *)(v32 + 128);
  v33 = *(_QWORD *)(v32 + 144);
  v34 = *(_QWORD *)(v32 + 152);
  v35 = *(_QWORD *)(v32 + 160);
  v36 = *(_QWORD *)(v32 + 168);
  v37 = *(_QWORD *)(v32 + 176);
  v38 = *(_QWORD *)(v32 + 184);
  v39 = *(_QWORD *)(v32 + 192);
  v40 = *(_QWORD *)(v32 + 200);
  v88 = *(_QWORD *)(v32 + 136);
  v89 = *(_QWORD *)(v32 + 208);
  v90 = *(_QWORD *)(v32 + 216);
  v91 = *(_QWORD *)(v32 + 224);
  v92 = *(_QWORD *)(v32 + 232);
  v93 = *(_QWORD *)(v32 + 240);
  v94 = *(_QWORD *)(v32 + 248);
  v95 = *(_QWORD *)(v32 + 256);
  v96 = *(_QWORD *)(v32 + 264);
  v97 = *(_QWORD *)(v32 + 272);
  v98 = *(_BYTE *)(v32 + 280);
  sub_23DD0CB9C(*(_QWORD *)v32, v109, v107, v105, v104, v103, v102, v101, v100, v80, v81, v82, v83, v84, v85, v86, v87, v88, v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39,
    v40,
    v89,
    v90,
    v91,
    v92,
    v93,
    v94,
    v95,
    v96,
    v97,
    v98);
  v41 = *(_QWORD *)v31;
  v42 = *(_QWORD *)(v31 + 8);
  *(_QWORD *)v31 = v111;
  *(_QWORD *)(v31 + 8) = v109;
  v43 = *(_QWORD *)(v31 + 16);
  v44 = *(_QWORD *)(v31 + 24);
  *(_QWORD *)(v31 + 16) = v107;
  *(_QWORD *)(v31 + 24) = v105;
  v45 = *(_QWORD *)(v31 + 32);
  v46 = *(_QWORD *)(v31 + 40);
  *(_QWORD *)(v31 + 32) = v104;
  *(_QWORD *)(v31 + 40) = v103;
  v47 = *(_QWORD *)(v31 + 48);
  v48 = *(_QWORD *)(v31 + 56);
  *(_QWORD *)(v31 + 48) = v102;
  *(_QWORD *)(v31 + 56) = v101;
  v49 = *(_OWORD *)(v31 + 64);
  v50 = *(_OWORD *)(v31 + 80);
  *(_QWORD *)(v31 + 64) = v100;
  *(_QWORD *)(v31 + 72) = v80;
  *(_QWORD *)(v31 + 80) = v81;
  *(_QWORD *)(v31 + 88) = v82;
  v51 = *(_OWORD *)(v31 + 96);
  v52 = *(_OWORD *)(v31 + 112);
  *(_QWORD *)(v31 + 96) = v83;
  *(_QWORD *)(v31 + 104) = v84;
  *(_QWORD *)(v31 + 112) = v85;
  *(_QWORD *)(v31 + 120) = v86;
  v53 = *(_OWORD *)(v31 + 128);
  v54 = *(_OWORD *)(v31 + 144);
  *(_QWORD *)(v31 + 128) = v87;
  *(_QWORD *)(v31 + 136) = v88;
  *(_QWORD *)(v31 + 144) = v33;
  v55 = *(_OWORD *)(v31 + 160);
  v56 = *(_OWORD *)(v31 + 176);
  *(_QWORD *)(v31 + 152) = v34;
  *(_QWORD *)(v31 + 160) = v35;
  *(_QWORD *)(v31 + 168) = v36;
  *(_QWORD *)(v31 + 176) = v37;
  v57 = *(_OWORD *)(v31 + 192);
  v58 = *(_OWORD *)(v31 + 208);
  *(_QWORD *)(v31 + 184) = v38;
  *(_QWORD *)(v31 + 192) = v39;
  *(_QWORD *)(v31 + 200) = v40;
  *(_QWORD *)(v31 + 208) = v89;
  *(_QWORD *)(v31 + 216) = v90;
  v59 = *(_OWORD *)(v31 + 224);
  v60 = *(_OWORD *)(v31 + 240);
  *(_QWORD *)(v31 + 224) = v91;
  *(_QWORD *)(v31 + 232) = v92;
  *(_QWORD *)(v31 + 240) = v93;
  *(_QWORD *)(v31 + 248) = v94;
  v61 = *(_OWORD *)(v31 + 256);
  *(_QWORD *)(v31 + 256) = v95;
  *(_QWORD *)(v31 + 264) = v96;
  v62 = *(_QWORD *)(v31 + 272);
  *(_QWORD *)(v31 + 272) = v97;
  v63 = *(_BYTE *)(v31 + 280);
  *(_BYTE *)(v31 + 280) = v98;
  sub_23DD0CCE4(v41, v42, v43, v44, v45, v46, v47, v48, v49, *((uint64_t *)&v49 + 1), v50, *((uint64_t *)&v50 + 1), v51, *((uint64_t *)&v51 + 1), v52, *((uint64_t *)&v52 + 1), v53, *((uint64_t *)&v53 + 1), v54,
    *((uint64_t *)&v54 + 1),
    v55,
    *((uint64_t *)&v55 + 1),
    v56,
    *((uint64_t *)&v56 + 1),
    v57,
    *((uint64_t *)&v57 + 1),
    v58,
    *((uint64_t *)&v58 + 1),
    v59,
    *((uint64_t *)&v59 + 1),
    v60,
    *((uint64_t *)&v60 + 1),
    v61,
    *((uint64_t *)&v61 + 1),
    v62,
    v63);
  v64 = sub_23DDC51E0();
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(_DWORD *)(v65 + 80) & 0xF8;
  v67 = v66 + 288;
  v68 = v66 + 288 + v31;
  v69 = ~v66 & 0xFFFFFFFFFFFFFFF8;
  v70 = (_QWORD *)(v68 & v69);
  v71 = v67 + v32;
  v72 = (_QWORD *)(v71 & v69);
  if ((v68 & v69) != (v71 & v69))
  {
    v73 = v64;
    if (*(_QWORD *)(v65 + 64) <= 8uLL)
      v74 = 8;
    else
      v74 = *(_QWORD *)(v65 + 64);
    v75 = *((unsigned __int8 *)v70 + v74);
    if (v75 >= 2)
    {
      if (v74 <= 3)
        v76 = v74;
      else
        v76 = 4;
      __asm { BR              X12 }
    }
    if (v75 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v65 + 8))(v70, v64);
    else
      swift_release();
    v77 = *((unsigned __int8 *)v72 + v74);
    if (v77 >= 2)
    {
      if (v74 <= 3)
        v78 = v74;
      else
        v78 = 4;
      __asm { BR              X12 }
    }
    if (v77 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v65 + 16))(v70, v72, v73);
      *((_BYTE *)v70 + v74) = 1;
    }
    else
    {
      *v70 = *v72;
      *((_BYTE *)v70 + v74) = 0;
      swift_retain();
    }
  }
  return a1;
}

uint64_t sub_23DD0E8C0(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  BOOL v15;
  void (*v16)(uint64_t, _DWORD *, uint64_t);
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  char v39;

  v5 = sub_23DDC512C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  v11 = ((v7 + v8) & ~v8) + v7;
  v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *((unsigned __int8 *)a2 + v12 + 8);
  if (v13 >= 2 && ((v12 + 8) & 0xFFFFFFF8) != 0)
    v13 = *a2 + 2;
  v15 = v13 == 1;
  v16 = *(void (**)(uint64_t, _DWORD *, uint64_t))(v6 + 32);
  v16(a1, a2, v5);
  v16((v10 + a1) & v9, (_DWORD *)(((unint64_t)a2 + v10) & v9), v5);
  *(_QWORD *)((a1 + v11 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFF8);
  *(_BYTE *)(a1 + v12 + 8) = v15;
  v17 = (v12 + 16 + a1) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)a2 + v12 + 16) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_OWORD *)(v18 + 16);
  v20 = *(_OWORD *)(v18 + 32);
  v21 = *(_OWORD *)(v18 + 48);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(v18 + 64);
  *(_OWORD *)(v17 + 32) = v20;
  *(_OWORD *)(v17 + 48) = v21;
  *(_OWORD *)(v17 + 16) = v19;
  *(_OWORD *)v17 = *(_OWORD *)v18;
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (v17 + v23 + 72) & ~v23;
  v25 = (v18 + v23 + 72) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v24, v25);
  v26 = *(_QWORD *)(v22 + 64) + 7;
  v27 = (char *)((v26 + v24) & 0xFFFFFFFFFFFFFFF8);
  v28 = (const void *)((v26 + v25) & 0xFFFFFFFFFFFFFFF8);
  memcpy(v27, v28, 0x119uLL);
  v29 = *(_QWORD *)(sub_23DDC51E0() - 8);
  v30 = *(_DWORD *)(v29 + 80) & 0xF8;
  v31 = v30 + 288;
  v32 = (unint64_t)&v27[v30 + 288];
  v33 = ~v30 & 0xFFFFFFFFFFFFFFF8;
  v34 = (_QWORD *)(v32 & v33);
  v35 = (_QWORD *)(((unint64_t)v28 + v31) & v33);
  if (*(_QWORD *)(v29 + 64) <= 8uLL)
    v36 = 8;
  else
    v36 = *(_QWORD *)(v29 + 64);
  v37 = *((unsigned __int8 *)v35 + v36);
  if (v37 >= 2)
  {
    if (v36 <= 3)
      v38 = v36;
    else
      v38 = 4;
    __asm { BR              X13 }
  }
  if (v37 == 1)
  {
    (*(void (**)(_QWORD *))(v29 + 32))(v34);
    v39 = 1;
  }
  else
  {
    v39 = 0;
    *v34 = *v35;
  }
  *((_BYTE *)v34 + v36) = v39;
  return a1;
}

_DWORD *sub_23DD0EB2C(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(_DWORD *, uint64_t);
  unint64_t v13;
  unsigned int v14;
  void (*v16)(_DWORD *, _DWORD *, uint64_t);
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  char v86;
  uint64_t v88;
  uint64_t v89;

  v3 = a3;
  if (a1 != a2)
  {
    v6 = sub_23DDC512C();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v88 = ~v9;
    v10 = v8 + v9;
    v89 = ((v8 + v9) & ~v9) + v8;
    v11 = ((v89 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    v12 = *(void (**)(_DWORD *, uint64_t))(v7 + 8);
    v12(a1, v6);
    v13 = ((unint64_t)a1 + v10) & ~v9;
    v12((_DWORD *)v13, v6);
    swift_bridgeObjectRelease();
    v14 = *((unsigned __int8 *)a2 + v11);
    if ((v11 & 0xFFFFFFF8) != 0 && v14 >= 2)
      v14 = *a2 + 2;
    v16 = *(void (**)(_DWORD *, _DWORD *, uint64_t))(v7 + 32);
    v16(a1, a2, v6);
    v16((_DWORD *)v13, (_DWORD *)(((unint64_t)a2 + v10) & v88), v6);
    *(_QWORD *)(((unint64_t)a1 + v89 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v89 + 7) & 0xFFFFFFFFFFFFF8);
    *((_BYTE *)a1 + v11) = v14 == 1;
    v3 = a3;
  }
  v17 = sub_23DDC512C();
  v18 = ((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64)
        + ((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80))
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v19 = (_QWORD *)(((unint64_t)a1 + v18) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)a2 + v18) & 0xFFFFFFFFFFFFFFF8);
  if (*v19 >= 0xFFFFFFFFuLL)
  {
    if (*v20 >= 0xFFFFFFFFuLL)
    {
      *v19 = *v20;
      swift_bridgeObjectRelease();
      v19[1] = v20[1];
      swift_bridgeObjectRelease();
      v19[2] = v20[2];
      v19[3] = v20[3];
      v19[4] = v20[4];
      v19[5] = v20[5];
      v19[6] = v20[6];
      v19[7] = v20[7];
      v19[8] = v20[8];
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(_OWORD *)v19 = *(_OWORD *)v20;
  v21 = *((_OWORD *)v20 + 1);
  v22 = *((_OWORD *)v20 + 2);
  v23 = *((_OWORD *)v20 + 3);
  v19[8] = v20[8];
  *((_OWORD *)v19 + 2) = v22;
  *((_OWORD *)v19 + 3) = v23;
  *((_OWORD *)v19 + 1) = v21;
LABEL_17:
  v24 = *(_QWORD *)(*(_QWORD *)(v3 + 16) - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = ((unint64_t)v19 + v25 + 72) & ~v25;
  v27 = ((unint64_t)v20 + v25 + 72) & ~v25;
  (*(void (**)(uint64_t, uint64_t))(v24 + 40))(v26, v27);
  v28 = *(_QWORD *)(v24 + 64) + 7;
  v29 = (v28 + v27) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(_QWORD *)(v29 + 272);
  v31 = (v28 + v26) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v28) = *(_BYTE *)(v29 + 280);
  v32 = *(_QWORD *)v31;
  v33 = *(_QWORD *)(v31 + 8);
  v34 = *(_QWORD *)(v31 + 16);
  v35 = *(_QWORD *)(v31 + 24);
  v36 = *(_QWORD *)(v31 + 32);
  v37 = *(_QWORD *)(v31 + 40);
  v38 = *(_QWORD *)(v31 + 48);
  v39 = *(_QWORD *)(v31 + 56);
  v40 = *(_OWORD *)(v31 + 64);
  v41 = *(_OWORD *)(v31 + 80);
  v42 = *(_OWORD *)(v31 + 96);
  v43 = *(_OWORD *)(v31 + 112);
  v44 = *(_OWORD *)(v31 + 128);
  v45 = *(_OWORD *)(v31 + 144);
  v46 = *(_OWORD *)(v31 + 160);
  v47 = *(_OWORD *)(v31 + 176);
  v48 = *(_OWORD *)(v31 + 192);
  v49 = *(_OWORD *)(v31 + 208);
  v50 = *(_OWORD *)(v31 + 224);
  v51 = *(_OWORD *)(v31 + 240);
  v52 = *(_OWORD *)(v31 + 256);
  v53 = *(_QWORD *)(v31 + 272);
  v54 = *(_BYTE *)(v31 + 280);
  v55 = *(_OWORD *)(v29 + 16);
  v56 = *(_OWORD *)(v29 + 32);
  v57 = *(_OWORD *)(v29 + 48);
  v58 = *(_OWORD *)(v29 + 64);
  v59 = *(_OWORD *)(v29 + 80);
  v60 = *(_OWORD *)(v29 + 96);
  v61 = *(_OWORD *)(v29 + 112);
  v62 = *(_OWORD *)(v29 + 128);
  v63 = *(_OWORD *)(v29 + 144);
  v65 = *(_OWORD *)(v29 + 160);
  v64 = *(_OWORD *)(v29 + 176);
  v66 = *(_OWORD *)(v29 + 192);
  v67 = *(_OWORD *)(v29 + 208);
  v68 = *(_OWORD *)(v29 + 224);
  v69 = *(_OWORD *)(v29 + 240);
  v70 = *(_OWORD *)(v29 + 256);
  *(_OWORD *)v31 = *(_OWORD *)v29;
  *(_OWORD *)(v31 + 16) = v55;
  *(_OWORD *)(v31 + 32) = v56;
  *(_OWORD *)(v31 + 48) = v57;
  *(_OWORD *)(v31 + 64) = v58;
  *(_OWORD *)(v31 + 80) = v59;
  *(_OWORD *)(v31 + 96) = v60;
  *(_OWORD *)(v31 + 112) = v61;
  *(_OWORD *)(v31 + 128) = v62;
  *(_OWORD *)(v31 + 144) = v63;
  *(_OWORD *)(v31 + 160) = v65;
  *(_OWORD *)(v31 + 176) = v64;
  *(_OWORD *)(v31 + 192) = v66;
  *(_OWORD *)(v31 + 208) = v67;
  *(_OWORD *)(v31 + 224) = v68;
  *(_OWORD *)(v31 + 240) = v69;
  *(_OWORD *)(v31 + 256) = v70;
  *(_QWORD *)(v31 + 272) = v30;
  *(_BYTE *)(v31 + 280) = v28;
  sub_23DD0CCE4(v32, v33, v34, v35, v36, v37, v38, v39, v40, *((uint64_t *)&v40 + 1), v41, *((uint64_t *)&v41 + 1), v42, *((uint64_t *)&v42 + 1), v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45,
    *((uint64_t *)&v45 + 1),
    v46,
    *((uint64_t *)&v46 + 1),
    v47,
    *((uint64_t *)&v47 + 1),
    v48,
    *((uint64_t *)&v48 + 1),
    v49,
    *((uint64_t *)&v49 + 1),
    v50,
    *((uint64_t *)&v50 + 1),
    v51,
    *((uint64_t *)&v51 + 1),
    v52,
    *((uint64_t *)&v52 + 1),
    v53,
    v54);
  v71 = sub_23DDC51E0();
  v72 = *(_QWORD *)(v71 - 8);
  v73 = *(_DWORD *)(v72 + 80) & 0xF8;
  v74 = v73 + 288;
  v75 = v73 + 288 + v31;
  v76 = ~v73 & 0xFFFFFFFFFFFFFFF8;
  v77 = (_QWORD *)(v75 & v76);
  v78 = v74 + v29;
  v79 = (_QWORD *)(v78 & v76);
  if ((v75 & v76) != (v78 & v76))
  {
    v80 = v71;
    if (*(_QWORD *)(v72 + 64) <= 8uLL)
      v81 = 8;
    else
      v81 = *(_QWORD *)(v72 + 64);
    v82 = *((unsigned __int8 *)v77 + v81);
    if (v82 >= 2)
    {
      if (v81 <= 3)
        v83 = v81;
      else
        v83 = 4;
      __asm { BR              X12 }
    }
    if (v82 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v72 + 8))(v77, v71);
    else
      swift_release();
    v84 = *((unsigned __int8 *)v79 + v81);
    if (v84 >= 2)
    {
      if (v81 <= 3)
        v85 = v81;
      else
        v85 = 4;
      __asm { BR              X12 }
    }
    if (v84 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v72 + 32))(v77, v79, v80);
      v86 = 1;
    }
    else
    {
      v86 = 0;
      *v77 = *v79;
    }
    *((_BYTE *)v77 + v81) = v86;
  }
  return a1;
}

uint64_t sub_23DD0F034(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  int v20;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;

  v6 = *(_QWORD *)(sub_23DDC512C() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= 0x7FFFFFFE)
    v12 = 2147483646;
  else
    v12 = *(_DWORD *)(v10 + 84);
  v13 = *(_QWORD *)(sub_23DDC51E0() - 8);
  if (*(_QWORD *)(v13 + 64) <= 8uLL)
    v14 = 8;
  else
    v14 = *(_QWORD *)(v13 + 64);
  if (!a2)
    return 0;
  v15 = ((v7 + v8) & ~v8) + v7;
  v16 = *(unsigned __int8 *)(v10 + 80);
  if (a2 <= v12)
    goto LABEL_27;
  v17 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  v18 = v14
      + ((((*(_QWORD *)(v10 + 64) + ((v16 + ((v15 + 23) & 0xFFFFFFFFFFFFFFF8) + 72) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8)
        + v17
        + 281) & ~v17)
      + 1;
  v19 = 8 * v18;
  if (v18 <= 3)
  {
    v22 = ((a2 - v12 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      v20 = *(_DWORD *)(a1 + v18);
      if (!v20)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v22 > 0xFF)
    {
      v20 = *(unsigned __int16 *)(a1 + v18);
      if (!*(_WORD *)(a1 + v18))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v22 < 2)
    {
LABEL_27:
      v25 = (uint64_t *)((a1 + ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFFFFFFFFFF8);
      if (v11 > 0x7FFFFFFE)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(((unint64_t)v25 + v16 + 72) & ~v16, v11, v9);
      v26 = *v25;
      if ((unint64_t)*v25 >= 0xFFFFFFFF)
        LODWORD(v26) = -1;
      if ((v26 + 1) >= 2)
        return v26;
      else
        return 0;
    }
  }
  v20 = *(unsigned __int8 *)(a1 + v18);
  if (!*(_BYTE *)(a1 + v18))
    goto LABEL_27;
LABEL_18:
  v23 = (v20 - 1) << v19;
  if (v18 > 3)
    v23 = 0;
  if ((_DWORD)v18)
  {
    if (v18 <= 3)
      v24 = v18;
    else
      v24 = 4;
    __asm { BR              X11 }
  }
  return v12 + v23 + 1;
}

void sub_23DD0F264(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;

  v8 = sub_23DDC512C();
  v9 = ((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= 0x7FFFFFFEu)
    v11 = 2147483646;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_QWORD *)(sub_23DDC51E0() - 8);
  v13 = 8;
  if (*(_QWORD *)(v12 + 64) > 8uLL)
    v13 = *(_QWORD *)(v12 + 64);
  v14 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  v15 = v13
      + ((((*(_QWORD *)(v10 + 64)
          + ((*(unsigned __int8 *)(v10 + 80) + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 72) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
          + 7) & 0xFFFFFFFFFFFFFFF8)
        + v14
        + 281) & ~v14)
      + 1;
  if (a3 <= v11)
  {
    v16 = 0;
  }
  else if (v15 <= 3)
  {
    v18 = ((a3 - v11 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v18))
    {
      v16 = 4u;
    }
    else if (v18 >= 0x100)
    {
      v16 = 2;
    }
    else
    {
      v16 = v18 > 1;
    }
  }
  else
  {
    v16 = 1u;
  }
  if (v11 < a2)
  {
    v17 = ~v11 + a2;
    if (v15 < 4)
    {
      if ((_DWORD)v15)
      {
        v19 = v17 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if ((_DWORD)v15 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if ((_DWORD)v15 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v17;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for OvernightMetricsAxisStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OvernightMetricsAxisStyle);
}

uint64_t sub_23DD0F538()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD0F56C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = sub_23DDC512C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v16[1] = v1;
    v19 = MEMORY[0x24BEE4AF8];
    sub_23DD92AD0(0, v7, 0);
    v8 = v19;
    v9 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    v18 = v9;
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v18 + 24), v3);
      v19 = v8;
      v14 = *(_QWORD *)(v8 + 16);
      v13 = *(_QWORD *)(v8 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_23DD92AD0(v13 > 1, v14 + 1, 1);
        v8 = v19;
      }
      *(_QWORD *)(v8 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v14, v6, v3);
      v11 += v17;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_23DD0F6DC@<X0>(const void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE __dst[281];
  uint64_t v8[35];

  v4 = SleepingSampleDataType.preferredImage.getter();
  memcpy(__dst, a1, sizeof(__dst));
  sub_23DD144A8((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
  sub_23DD35E8C(v8);
  sub_23DD144A8((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CCE4);
  v5 = v8[33];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23DCFE908(v8);
  swift_release();
  swift_release();
  swift_release();
  result = swift_getKeyPath();
  *a2 = v4;
  a2[1] = result;
  a2[2] = v5;
  return result;
}

uint64_t sub_23DD0F7C8@<X0>(uint64_t *a1@<X8>)
{
  const void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  _BYTE __dst[288];

  memcpy(__dst, v1, 0x119uLL);
  *a1 = sub_23DDC63D4();
  a1[1] = v3;
  sub_23DD13A0C();
  sub_23DDC536C();
  swift_getKeyPath();
  v4 = swift_allocObject();
  memcpy((void *)(v4 + 16), v1, 0x119uLL);
  sub_23DD144A8((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20];
  sub_23DCFB328(0, &qword_256CFCA08, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DD13B40();
  sub_23DD13C08();
  sub_23DCF535C(&qword_254326680, v5, MEMORY[0x24BE3FE38]);
  sub_23DD13CF0();
  return sub_23DDC6374();
}

uint64_t sub_23DD0F90C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[288];

  memcpy(v5, (const void *)(v2 + *(int *)(a1 + 44)), 0x119uLL);
  sub_23DD144A8((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
  sub_23DD35E8C(a2);
  return sub_23DD144A8((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CCE4);
}

uint64_t sub_23DD0F978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t, uint64_t);
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[2];
  _QWORD v128[2];
  _QWORD *v129;
  _QWORD v130[2];
  _QWORD *v131;
  _QWORD v132[4];
  _QWORD *v133;
  uint64_t v134;
  _QWORD v135[2];
  _QWORD v136[2];
  _QWORD v137[6];
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;

  v116 = a3;
  v117 = a2;
  v113 = a1;
  sub_23DD13DC0(0);
  v5 = v4;
  v121 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v114 = (uint64_t)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_256CFCA40, (uint64_t (*)(uint64_t))MEMORY[0x24BDB8338], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v110 = (char *)&v85 - v8;
  v9 = sub_23DDC5954();
  v112 = *(_QWORD *)(v9 - 8);
  v10 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v107 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23DDC5948();
  v111 = *(_QWORD *)(v12 - 8);
  v13 = v12;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v105 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x242643BD8](&unk_23DDC7E60, a2, v14);
  v16 = sub_23DDC5E88();
  v17 = MEMORY[0x242643BD8](MEMORY[0x24BDEFB78], v16);
  v138 = v16;
  v139 = v13;
  v99 = v16;
  v102 = v13;
  v103 = v10;
  v140 = v10;
  v141 = v17;
  v18 = v17;
  v104 = v17;
  v19 = MEMORY[0x24BDB8040];
  v142 = MEMORY[0x24BDB7FF0];
  v143 = MEMORY[0x24BDB8040];
  v20 = MEMORY[0x24BDB7FF0];
  v21 = MEMORY[0x242643B9C](0, &v138, MEMORY[0x24BDB83F0], 0);
  v109 = *(_QWORD *)(v21 - 8);
  v22 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v101 = (char *)&v85 - v23;
  v138 = v16;
  v139 = v13;
  v140 = v10;
  v141 = v18;
  v142 = v20;
  v143 = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v97 = v22;
  v98 = OpaqueTypeConformance2;
  v138 = v22;
  v139 = OpaqueTypeConformance2;
  v25 = OpaqueTypeConformance2;
  v26 = MEMORY[0x242643B9C](0, &v138, MEMORY[0x24BDB8390], 0);
  v108 = *(_QWORD *)(v26 - 8);
  v27 = v26;
  v118 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v96 = (char *)&v85 - v28;
  v138 = v22;
  v139 = v25;
  v29 = swift_getOpaqueTypeConformance2();
  v120 = v29;
  v119 = sub_23DD13DE4();
  v138 = v27;
  v139 = v5;
  v140 = v29;
  v141 = v119;
  v122 = MEMORY[0x242643B9C](0, &v138, MEMORY[0x24BDB83B0], 0);
  v106 = *(_QWORD *)(v122 - 8);
  MEMORY[0x24BDAC7A8](v122);
  v94 = (char *)&v85 - v30;
  v31 = v117;
  v100 = *(_QWORD *)(v117 + 16);
  v32 = sub_23DDC5C0C();
  v33 = sub_23DDC5C0C();
  v95 = *(_QWORD *)(v31 + 24);
  v137[0] = v95;
  v137[1] = MEMORY[0x24BDECC38];
  v34 = MEMORY[0x24BDED308];
  v136[0] = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v32, v137);
  v136[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242643BD8](v34, v33, v136);
  v35 = sub_23DDC58D0();
  v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E28];
  v37 = sub_23DDC6980();
  v137[2] = v37;
  sub_23DD145CC(255, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C, v36);
  v137[3] = v38;
  v39 = sub_23DDC57E0();
  v134 = MEMORY[0x242643BD8](MEMORY[0x24BDB7E40], v35);
  v93 = MEMORY[0x242643BD8](MEMORY[0x24BDB84F8], v37, &v134);
  v135[0] = v93;
  v135[1] = sub_23DD13E58(&qword_256CFCA60, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C);
  v133 = v135;
  MEMORY[0x242643BD8](MEMORY[0x24BDB7B88], v39, &v133);
  v40 = sub_23DDC5A14();
  v41 = sub_23DDC5EAC();
  v42 = MEMORY[0x242643BD8](MEMORY[0x24BDEFDC0], v41);
  v138 = v41;
  v139 = v42;
  v43 = MEMORY[0x242643B9C](255, &v138, MEMORY[0x24BDFAC10], 0);
  v92 = v43;
  v44 = MEMORY[0x242643BD8](MEMORY[0x24BDB82F0], v40);
  v138 = v41;
  v139 = v42;
  v45 = swift_getOpaqueTypeConformance2();
  v138 = v40;
  v139 = v43;
  v140 = v44;
  v141 = v45;
  v137[4] = MEMORY[0x242643B9C](255, &v138, MEMORY[0x24BDB7B18], 0);
  v137[5] = v40;
  v46 = sub_23DDC57E0();
  v47 = sub_23DDC5930();
  v132[2] = v37;
  sub_23DD145CC(255, &qword_256CFCA68, (uint64_t (*)(uint64_t))sub_23DD0A698, (uint64_t (*)(void))sub_23DD0A6F4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E28]);
  v132[3] = v48;
  v49 = sub_23DDC57E0();
  v132[0] = v93;
  v132[1] = sub_23DD13E58(&qword_256CFCA70, &qword_256CFCA68, (uint64_t (*)(uint64_t))sub_23DD0A698, (uint64_t (*)(void))sub_23DD0A6F4);
  v131 = v132;
  MEMORY[0x242643BD8](MEMORY[0x24BDB7B88], v49, &v131);
  v50 = sub_23DDC5A14();
  v51 = sub_23DDC5930();
  v52 = sub_23DDC6980();
  v138 = v118;
  v139 = v121;
  v140 = v120;
  v141 = v119;
  v53 = swift_getOpaqueTypeConformance2();
  v91 = v53;
  v138 = v40;
  v139 = v92;
  v140 = v44;
  v141 = v45;
  v130[0] = swift_getOpaqueTypeConformance2();
  v130[1] = v44;
  v129 = v130;
  v128[0] = MEMORY[0x242643BD8](MEMORY[0x24BDB7B78], v46, &v129);
  v128[1] = v44;
  v54 = MEMORY[0x24BDB7FA0];
  v55 = MEMORY[0x242643BD8](MEMORY[0x24BDB7FA0], v47, v128);
  v56 = MEMORY[0x242643BD8](MEMORY[0x24BDB82F0], v50);
  v127[0] = v55;
  v127[1] = v56;
  v126 = MEMORY[0x242643BD8](v54, v51, v127);
  v88 = v52;
  v90 = MEMORY[0x242643BD8](MEMORY[0x24BDB84E8], v52, &v126);
  v138 = v122;
  v139 = v52;
  v140 = v53;
  v141 = v90;
  v57 = MEMORY[0x242643B9C](0, &v138, MEMORY[0x24BDB8360], 0);
  v58 = *(_QWORD *)(v57 - 8);
  v92 = v57;
  v93 = v58;
  MEMORY[0x24BDAC7A8](v57);
  v87 = (char *)&v85 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v60);
  v89 = (uint64_t)&v85 - v61;
  v62 = v105;
  sub_23DDC57C8();
  v63 = v107;
  sub_23DDC593C();
  v64 = sub_23DDC5A50();
  v86 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56);
  v65 = (uint64_t)v110;
  v86(v110, 1, 1, v64);
  swift_checkMetadataState();
  v67 = v101;
  v66 = v102;
  v68 = v103;
  sub_23DDC60D4();
  sub_23DD13EA0(v65);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v63, v68);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v62, v66);
  v70 = v96;
  v69 = v97;
  sub_23DDC60B0();
  (*(void (**)(char *, uint64_t))(v109 + 8))(v67, v69);
  v71 = v114;
  v72 = v115;
  sub_23DD10338(v114);
  v73 = v65;
  v86((char *)v65, 1, 1, v64);
  v74 = v94;
  v75 = v118;
  sub_23DDC60BC();
  sub_23DD13EA0(v73);
  sub_23DCF59A8(v71, (uint64_t (*)(_QWORD))sub_23DD13DC0);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v70, v75);
  v123 = v100;
  v124 = v95;
  v125 = v72;
  v76 = swift_checkMetadataState();
  v77 = (uint64_t)v87;
  v78 = v122;
  v80 = v90;
  v79 = v91;
  sub_23DDC60A4();
  (*(void (**)(char *, uint64_t))(v106 + 8))(v74, v78);
  v138 = v78;
  v139 = v76;
  v140 = v79;
  v141 = v80;
  swift_getOpaqueTypeConformance2();
  v81 = v89;
  v82 = v92;
  sub_23DD272F4(v77, v92, v89);
  v83 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
  v83(v77, v82);
  sub_23DD26D88(v81, v82, v116);
  return ((uint64_t (*)(uint64_t, uint64_t))v83)(v81, v82);
}

uint64_t sub_23DD10338@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v17;

  v2 = v1;
  v4 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF58EC(v2, (uint64_t)v12, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23DCFBB58((uint64_t)v12, (uint64_t)v6, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
    sub_23DCF58EC((uint64_t)v6, a1, (uint64_t (*)(_QWORD))sub_23DD13DC0);
    v14 = (uint64_t)v6;
    v15 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration;
  }
  else
  {
    sub_23DCFBB58((uint64_t)v12, (uint64_t)v9, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration);
    sub_23DCF58EC((uint64_t)v9, a1, (uint64_t (*)(_QWORD))sub_23DD13DC0);
    v14 = (uint64_t)v9;
    v15 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration;
  }
  return sub_23DCF59A8(v14, v15);
}

uint64_t sub_23DD104A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];
  _QWORD v69[2];
  uint64_t *v70;
  uint64_t v71;
  _QWORD v72[2];
  _QWORD v73[2];
  uint64_t *v74;
  _QWORD v75[2];
  _QWORD v76[2];
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD v83[4];
  _QWORD *v84;
  uint64_t v85;
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[6];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;

  v57 = a3;
  v58 = a2;
  v59 = a1;
  v61 = a4;
  v5 = sub_23DDC5C0C();
  v6 = sub_23DDC5C0C();
  v88[0] = a3;
  v88[1] = MEMORY[0x24BDECC38];
  v7 = MEMORY[0x24BDED308];
  v87[0] = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v5, v88);
  v87[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242643BD8](v7, v6, v87);
  v8 = sub_23DDC58D0();
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E28];
  v10 = sub_23DDC6980();
  v88[2] = v10;
  sub_23DD145CC(255, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C, v9);
  v88[3] = v11;
  v12 = sub_23DDC57E0();
  v85 = MEMORY[0x242643BD8](MEMORY[0x24BDB7E40], v8);
  v13 = MEMORY[0x242643BD8](MEMORY[0x24BDB84F8], v10, &v85);
  v86[0] = v13;
  v86[1] = sub_23DD13E58(&qword_256CFCA60, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C);
  v84 = v86;
  v14 = MEMORY[0x24BDB7B88];
  MEMORY[0x242643BD8](MEMORY[0x24BDB7B88], v12, &v84);
  v15 = sub_23DDC5A14();
  v16 = sub_23DDC5EAC();
  v17 = MEMORY[0x242643BD8](MEMORY[0x24BDEFDC0], v16);
  v89 = v16;
  v90 = v17;
  v18 = MEMORY[0x242643B9C](255, &v89, MEMORY[0x24BDFAC10], 0);
  v19 = MEMORY[0x242643BD8](MEMORY[0x24BDB82F0], v15);
  v89 = v16;
  v90 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v89 = v15;
  v90 = v18;
  v65 = OpaqueTypeConformance2;
  v66 = v18;
  v60 = v19;
  v91 = v19;
  v92 = OpaqueTypeConformance2;
  v88[4] = MEMORY[0x242643B9C](255, &v89, MEMORY[0x24BDB7B18], 0);
  v88[5] = v15;
  v63 = sub_23DDC57E0();
  v67 = v15;
  v21 = sub_23DDC5930();
  v83[2] = v10;
  sub_23DD145CC(255, &qword_256CFCA68, (uint64_t (*)(uint64_t))sub_23DD0A698, (uint64_t (*)(void))sub_23DD0A6F4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E28]);
  v83[3] = v22;
  v23 = sub_23DDC57E0();
  v83[0] = v13;
  v83[1] = sub_23DD13E58(&qword_256CFCA70, &qword_256CFCA68, (uint64_t (*)(uint64_t))sub_23DD0A698, (uint64_t (*)(void))sub_23DD0A6F4);
  v82 = v83;
  MEMORY[0x242643BD8](v14, v23, &v82);
  v64 = v21;
  v62 = sub_23DDC5A14();
  v24 = sub_23DDC5930();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v55 - v29;
  v31 = sub_23DDC6980();
  v55 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v55 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v56 = (char *)&v55 - v35;
  v37 = type metadata accessor for OvernightMetricsAxisStyle(0, v58, v57, v36);
  sub_23DD0F90C(v37, &v89);
  sub_23DCFE908(&v89);
  if (v93 == 1)
  {
    sub_23DD10B40(v37, (uint64_t)v27);
    v78 = v67;
    v79 = v66;
    v38 = v60;
    v80 = v60;
    v81 = v65;
    v78 = swift_getOpaqueTypeConformance2();
    v79 = v38;
    v70 = &v78;
    v69[0] = MEMORY[0x242643BD8](MEMORY[0x24BDB7B78], v63, &v70);
    v69[1] = v38;
    v39 = MEMORY[0x24BDB7FA0];
    v40 = MEMORY[0x242643BD8](MEMORY[0x24BDB7FA0], v64, v69);
    v41 = MEMORY[0x242643BD8](MEMORY[0x24BDB82F0], v62);
    v68[0] = v40;
    v68[1] = v41;
    MEMORY[0x242643BD8](v39, v24, v68);
    v42 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v42(v30, v27, v24);
    v43 = *(void (**)(char *, uint64_t))(v25 + 8);
    v43(v27, v24);
    v42(v33, v30, v24);
    v43(v30, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v33, 0, 1, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v33, 1, 1, v24);
    v78 = v67;
    v79 = v66;
    v38 = v60;
    v80 = v60;
    v81 = v65;
    v78 = swift_getOpaqueTypeConformance2();
    v79 = v38;
    v77 = &v78;
    v76[0] = MEMORY[0x242643BD8](MEMORY[0x24BDB7B78], v63, &v77);
    v76[1] = v38;
    v44 = MEMORY[0x24BDB7FA0];
    v45 = MEMORY[0x242643BD8](MEMORY[0x24BDB7FA0], v64, v76);
    v46 = MEMORY[0x242643BD8](MEMORY[0x24BDB82F0], v62);
    v75[0] = v45;
    v75[1] = v46;
    MEMORY[0x242643BD8](v44, v24, v75);
  }
  v47 = v55;
  v48 = v56;
  v49 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v49(v56, v33, v31);
  v50 = *(void (**)(char *, uint64_t))(v47 + 8);
  v50(v33, v31);
  v78 = v67;
  v79 = v66;
  v80 = v38;
  v81 = v65;
  v78 = swift_getOpaqueTypeConformance2();
  v79 = v38;
  v74 = &v78;
  v73[0] = MEMORY[0x242643BD8](MEMORY[0x24BDB7B78], v63, &v74);
  v73[1] = v38;
  v51 = MEMORY[0x24BDB7FA0];
  v52 = MEMORY[0x242643BD8](MEMORY[0x24BDB7FA0], v64, v73);
  v53 = MEMORY[0x242643BD8](MEMORY[0x24BDB82F0], v62);
  v72[0] = v52;
  v72[1] = v53;
  v71 = MEMORY[0x242643BD8](v51, v24, v72);
  MEMORY[0x242643BD8](MEMORY[0x24BDB84E8], v31, &v71);
  v49(v61, v48, v31);
  return ((uint64_t (*)(char *, uint64_t))v50)(v48, v31);
}

uint64_t sub_23DD10B40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  int EnumCaseMultiPayload;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void (*v88)(_QWORD, _QWORD);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t, uint64_t);
  char *v93;
  void (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t result;
  unint64_t v108;
  uint64_t (*v109)(uint64_t);
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(uint64_t);
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t, uint64_t);
  char *v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  void (*v140)(uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t, uint64_t);
  char *v157;
  void (*v158)(char *, uint64_t);
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t);
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  void (*v203)(char *, char *, uint64_t);
  char *v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(_QWORD, _QWORD);
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD v229[2];
  _QWORD v230[2];
  uint64_t *v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  _QWORD v242[2];
  _QWORD v243[2];
  uint64_t *v244;
  _QWORD v245[2];
  uint64_t *v246;
  _QWORD *v247;
  _QWORD v248[4];
  _QWORD v249[2];
  _QWORD *v250;
  uint64_t v251;
  _QWORD v252[2];
  _QWORD v253[2];
  _QWORD v254[5];

  v211 = a2;
  v3 = sub_23DDC590C();
  MEMORY[0x24BDAC7A8](v3);
  v203 = (void (*)(char *, char *, uint64_t))((char *)&v176 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v202 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v200 = v6;
  v201 = (char *)&v176 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DDC58B8();
  MEMORY[0x24BDAC7A8](v7);
  v215 = (char *)&v176 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = *(_QWORD *)(a1 + 16);
  v9 = sub_23DDC5C0C();
  v10 = sub_23DDC5C0C();
  v217 = a1;
  v207 = *(void (**)(_QWORD, _QWORD))(a1 + 24);
  v254[0] = v207;
  v254[1] = MEMORY[0x24BDECC38];
  v11 = MEMORY[0x24BDED308];
  v253[0] = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v9, v254);
  v253[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242643BD8](v11, v10, v253);
  v12 = sub_23DDC58D0();
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E28];
  v14 = sub_23DDC6980();
  v254[2] = v14;
  sub_23DD145CC(255, &qword_256CFCA68, (uint64_t (*)(uint64_t))sub_23DD0A698, (uint64_t (*)(void))sub_23DD0A6F4, v13);
  v254[3] = v15;
  v16 = sub_23DDC57E0();
  v251 = MEMORY[0x242643BD8](MEMORY[0x24BDB7E40], v12);
  v17 = MEMORY[0x242643BD8](MEMORY[0x24BDB84F8], v14, &v251);
  v252[0] = v17;
  v252[1] = sub_23DD13E58(&qword_256CFCA70, &qword_256CFCA68, (uint64_t (*)(uint64_t))sub_23DD0A698, (uint64_t (*)(void))sub_23DD0A6F4);
  v250 = v252;
  v18 = MEMORY[0x24BDB7B88];
  v19 = MEMORY[0x242643BD8](MEMORY[0x24BDB7B88], v16, &v250);
  v197 = v16;
  v195 = v19;
  v20 = sub_23DDC5A14();
  v196 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v199 = (char *)&v176 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v198 = (char *)&v176 - v23;
  v24 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  v25 = *(_QWORD *)(v24 - 8);
  v191 = v24;
  v192 = v25;
  MEMORY[0x24BDAC7A8](v24);
  v193 = v26;
  v194 = (uint64_t)&v176 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v214 = (uint64_t)&v176 - v28;
  v248[2] = v14;
  sub_23DD145CC(255, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C, v13);
  v248[3] = v29;
  v30 = sub_23DDC57E0();
  v248[0] = v17;
  v248[1] = sub_23DD13E58(&qword_256CFCA60, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C);
  v247 = v248;
  MEMORY[0x242643BD8](v18, v30, &v247);
  v31 = sub_23DDC5A14();
  v32 = sub_23DDC5EAC();
  v33 = MEMORY[0x242643BD8](MEMORY[0x24BDEFDC0], v32);
  v237 = v32;
  v238 = v33;
  v34 = MEMORY[0x242643B9C](255, &v237, MEMORY[0x24BDFAC10], 0);
  v35 = MEMORY[0x242643BD8](MEMORY[0x24BDB82F0], v31);
  v237 = v32;
  v238 = v33;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v237 = v31;
  v238 = v34;
  v221 = OpaqueTypeConformance2;
  v222 = v34;
  v216 = v35;
  v239 = v35;
  v240 = OpaqueTypeConformance2;
  v37 = MEMORY[0x242643B9C](255, &v237, MEMORY[0x24BDB7B18], 0);
  v249[0] = v37;
  v249[1] = v31;
  v38 = sub_23DDC57E0();
  v181 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v180 = (uint64_t)&v176 - v39;
  v40 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  v226 = *(_QWORD *)(v40 - 8);
  v227 = v40;
  MEMORY[0x24BDAC7A8](v40);
  v223 = (uint64_t)&v176 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v42);
  v225 = (char *)&v176 - v43;
  MEMORY[0x24BDAC7A8](v44);
  v224 = (uint64_t *)((char *)&v176 - v45);
  MEMORY[0x24BDAC7A8](v46);
  v48 = (char *)&v176 - v47;
  v205 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v185 = (uint64_t)&v176 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v51);
  v187 = (char *)&v176 - v52;
  MEMORY[0x24BDAC7A8](v53);
  v177 = (char *)&v176 - v54;
  MEMORY[0x24BDAC7A8](v55);
  v179 = (char *)&v176 - v56;
  MEMORY[0x24BDAC7A8](v57);
  v182 = (uint64_t)&v176 - v58;
  v186 = v37;
  v184 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v178 = (char *)&v176 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v61);
  v183 = (char *)&v176 - v62;
  MEMORY[0x24BDAC7A8](v63);
  v204 = (char *)&v176 - v64;
  v209 = v38;
  v65 = sub_23DDC5930();
  v190 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v189 = (char *)&v176 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v67);
  v188 = (char *)&v176 - v68;
  v69 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  MEMORY[0x24BDAC7A8](v69);
  v71 = (char *)&v176 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  MEMORY[0x24BDAC7A8](v72);
  v74 = (char *)&v176 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = v65;
  v210 = v20;
  v75 = sub_23DDC5930();
  v212 = *(_QWORD *)(v75 - 8);
  v213 = v75;
  MEMORY[0x24BDAC7A8](v75);
  v77 = (char *)&v176 - v76;
  v78 = v218;
  sub_23DCF58EC(v218, (uint64_t)v74, type metadata accessor for OvernightMetricsAxisConfiguration);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v220 = v31;
  if (EnumCaseMultiPayload == 1)
  {
    v80 = v214;
    sub_23DCFBB58((uint64_t)v74, v214, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
    sub_23DDC58AC();
    v227 = *(_QWORD *)(v80 + *(int *)(v191 + 20));
    v82 = v201;
    v81 = v202;
    v83 = v217;
    (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v201, v78, v217);
    v84 = v194;
    sub_23DCF58EC(v80, v194, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
    v85 = (*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
    v86 = (v200 + *(unsigned __int8 *)(v192 + 80) + v85) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80);
    v87 = swift_allocObject();
    v88 = v207;
    *(_QWORD *)(v87 + 16) = v206;
    *(_QWORD *)(v87 + 24) = v88;
    (*(void (**)(unint64_t, char *, uint64_t))(v81 + 32))(v87 + v85, v82, v83);
    sub_23DCFBB58(v84, v87 + v86, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
    sub_23DDC512C();
    swift_bridgeObjectRetain();
    sub_23DDC5900();
    v89 = (uint64_t)v199;
    sub_23DDC5A08();
    v90 = v210;
    v227 = MEMORY[0x242643BD8](MEMORY[0x24BDB82F0], v210);
    v91 = v196;
    v92 = *(void (**)(char *, uint64_t, uint64_t))(v196 + 16);
    v93 = v198;
    v92(v198, v89, v90);
    v94 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
    v94(v89, v90);
    v92((char *)v89, (uint64_t)v93, v90);
    v237 = v31;
    v238 = v222;
    v95 = v216;
    v239 = v216;
    v240 = v221;
    v237 = swift_getOpaqueTypeConformance2();
    v238 = v95;
    v246 = &v237;
    v96 = v209;
    v245[0] = MEMORY[0x242643BD8](MEMORY[0x24BDB7B78], v209, &v246);
    v245[1] = v95;
    v97 = v208;
    MEMORY[0x242643BD8](MEMORY[0x24BDB7FA0], v208, v245);
    sub_23DD12390(v89, v97, v90);
    v94(v89, v90);
    v94((uint64_t)v93, v90);
    sub_23DCF59A8(v214, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
    v98 = v211;
    v99 = v220;
    v100 = v221;
    v101 = v222;
LABEL_33:
    v237 = v99;
    v238 = v101;
    v239 = v95;
    v240 = v100;
    v237 = swift_getOpaqueTypeConformance2();
    v238 = v95;
    v244 = &v237;
    v243[0] = MEMORY[0x242643BD8](MEMORY[0x24BDB7B78], v96, &v244);
    v243[1] = v95;
    v170 = MEMORY[0x24BDB7FA0];
    v171 = MEMORY[0x242643BD8](MEMORY[0x24BDB7FA0], v97, v243);
    v172 = MEMORY[0x242643BD8](MEMORY[0x24BDB82F0], v90);
    v242[0] = v171;
    v242[1] = v172;
    v173 = v170;
    v174 = v213;
    MEMORY[0x242643BD8](v173, v213, v242);
    v175 = v212;
    (*(void (**)(uint64_t, char *, uint64_t))(v212 + 16))(v98, v77, v174);
    return (*(uint64_t (**)(char *, uint64_t))(v175 + 8))(v77, v174);
  }
  v215 = v77;
  sub_23DCFBB58((uint64_t)v74, (uint64_t)v71, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration);
  v102 = v217;
  sub_23DD0F90C(v217, &v237);
  sub_23DCFE908(&v237);
  v103 = *(int *)(v69 + 20);
  v104 = *(_QWORD *)&v71[v103];
  v176 = v71;
  if (v241 != 1)
  {
    v119 = v185;
    sub_23DD11D20(v104, v102, v185);
    v120 = v205;
    v121 = *(void (**)(char *, uint64_t, uint64_t))(v205 + 16);
    v122 = v187;
    v123 = v220;
    v121(v187, v119, v220);
    v124 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
    v124(v119, v123);
    v121((char *)v119, (uint64_t)v122, v123);
    v125 = v222;
    v233 = v123;
    v234 = v222;
    v95 = v216;
    v235 = v216;
    v236 = v221;
    v126 = v221;
    v233 = swift_getOpaqueTypeConformance2();
    v234 = v95;
    v232 = &v233;
    v127 = v209;
    MEMORY[0x242643BD8](MEMORY[0x24BDB7B78], v209, &v232);
    v128 = v188;
    sub_23DD12390(v119, v127, v123);
    v124(v119, v123);
    v124((uint64_t)v122, v123);
    v129 = v127;
    v97 = v208;
    v130 = v210;
LABEL_32:
    v233 = v123;
    v234 = v125;
    v235 = v95;
    v236 = v126;
    v233 = swift_getOpaqueTypeConformance2();
    v234 = v95;
    v231 = &v233;
    v230[0] = MEMORY[0x242643BD8](MEMORY[0x24BDB7B78], v129, &v231);
    v230[1] = v95;
    MEMORY[0x242643BD8](MEMORY[0x24BDB7FA0], v97, v230);
    v166 = v190;
    v96 = v129;
    v167 = (uint64_t)v189;
    (*(void (**)(char *, char *, uint64_t))(v190 + 16))(v189, v128, v97);
    v168 = v130;
    MEMORY[0x242643BD8](MEMORY[0x24BDB82F0], v130);
    v77 = v215;
    sub_23DD122E4(v167, v97);
    v169 = *(void (**)(uint64_t, uint64_t))(v166 + 8);
    v169(v167, v97);
    v169((uint64_t)v128, v97);
    sub_23DCF59A8((uint64_t)v176, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration);
    v98 = v211;
    v90 = v168;
    v100 = v221;
    v101 = v222;
    v99 = v220;
    goto LABEL_33;
  }
  v105 = MEMORY[0x24BEE4AF8];
  v233 = MEMORY[0x24BEE4AF8];
  v106 = *(_QWORD *)(v104 + 16);
  result = swift_bridgeObjectRetain();
  v214 = v103;
  if (v106)
  {
    v108 = 0;
    v109 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label;
    v110 = (uint64_t)v225;
    v219 = v48;
    while (v108 < *(_QWORD *)(v104 + 16))
    {
      v111 = (*(unsigned __int8 *)(v226 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v226 + 80);
      v112 = *(_QWORD *)(v226 + 72);
      sub_23DCF58EC(v104 + v111 + v112 * v108, (uint64_t)v48, v109);
      if (v48[*(int *)(v227 + 36)] == 1)
      {
        v113 = v109;
        v114 = v106;
        v115 = (uint64_t)v48;
        v116 = v113;
        sub_23DCFBB58(v115, (uint64_t)v224, v113);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_23DD92BA8(0, *(_QWORD *)(v105 + 16) + 1, 1);
        v105 = v233;
        v118 = *(_QWORD *)(v233 + 16);
        v117 = *(_QWORD *)(v233 + 24);
        if (v118 >= v117 >> 1)
        {
          sub_23DD92BA8(v117 > 1, v118 + 1, 1);
          v105 = v233;
        }
        *(_QWORD *)(v105 + 16) = v118 + 1;
        result = sub_23DCFBB58((uint64_t)v224, v105 + v111 + v118 * v112, v116);
        v110 = (uint64_t)v225;
        v106 = v114;
        v109 = v116;
        v48 = v219;
      }
      else
      {
        result = sub_23DCF59A8((uint64_t)v48, v109);
      }
      if (v106 == ++v108)
      {
        v131 = v233;
        v132 = v220;
        v133 = v221;
        v135 = v216;
        v134 = v217;
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_35;
  }
  v131 = v105;
  v132 = v220;
  v133 = v221;
  v135 = v216;
  v134 = v217;
  v110 = (uint64_t)v225;
LABEL_18:
  swift_bridgeObjectRelease();
  v136 = v182;
  sub_23DD11D20(v131, v134, v182);
  v137 = swift_release();
  v224 = (uint64_t *)&v176;
  MEMORY[0x24BDAC7A8](v137);
  v138 = swift_checkMetadataState();
  v139 = v183;
  sub_23DDC57BC();
  v140 = *(void (**)(uint64_t, uint64_t))(v205 + 8);
  v140(v136, v132);
  v233 = v132;
  v234 = v138;
  v235 = v135;
  v236 = v133;
  v206 = swift_getOpaqueTypeConformance2();
  v141 = v184;
  v142 = v186;
  v203 = *(void (**)(char *, char *, uint64_t))(v184 + 16);
  v203(v204, v139, v186);
  v207 = *(void (**)(_QWORD, _QWORD))(v141 + 8);
  v207(v139, v142);
  v143 = *(_QWORD *)&v176[v214];
  v144 = MEMORY[0x24BEE4AF8];
  v233 = MEMORY[0x24BEE4AF8];
  v145 = *(_QWORD *)(v143 + 16);
  result = swift_bridgeObjectRetain();
  v219 = (char *)v140;
  if (!v145)
  {
    v153 = v217;
    v155 = (uint64_t)v177;
    v152 = v144;
    v154 = v135;
LABEL_31:
    swift_bridgeObjectRelease();
    sub_23DD11D20(v152, v153, v155);
    swift_release();
    v156 = *(void (**)(char *, uint64_t, uint64_t))(v205 + 16);
    v157 = v179;
    v156(v179, v155, v132);
    v158 = (void (*)(char *, uint64_t))v219;
    ((void (*)(uint64_t, uint64_t))v219)(v155, v132);
    v159 = (uint64_t)v178;
    v160 = v186;
    v203(v178, v204, v186);
    v233 = v159;
    v161 = v187;
    v156(v187, (uint64_t)v157, v132);
    v234 = (uint64_t)v161;
    v229[0] = v206;
    v229[1] = v154;
    v162 = v180;
    sub_23DD12F78(&v233, 2uLL, (uint64_t)v249, v180);
    v158(v161, v132);
    v163 = (void (*)(char *, uint64_t))v207;
    v207(v159, v160);
    v228 = v229;
    v164 = v209;
    MEMORY[0x242643BD8](MEMORY[0x24BDB7B78], v209, &v228);
    v165 = v188;
    sub_23DD122E4(v162, v164);
    (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v162, v164);
    v158(v157, v132);
    v163(v204, v160);
    v95 = v154;
    v123 = v132;
    v128 = v165;
    v126 = v221;
    v125 = v222;
    v129 = v164;
    v130 = v210;
    v97 = v208;
    goto LABEL_32;
  }
  v146 = 0;
  v147 = MEMORY[0x24BEE4AF8];
  while (v146 < *(_QWORD *)(v143 + 16))
  {
    v148 = (*(unsigned __int8 *)(v226 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v226 + 80);
    v149 = *(_QWORD *)(v226 + 72);
    sub_23DCF58EC(v143 + v148 + v149 * v146, v110, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
    if ((*(_BYTE *)(v110 + *(int *)(v227 + 36)) & 1) != 0)
    {
      result = sub_23DCF59A8(v110, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
    }
    else
    {
      sub_23DCFBB58(v110, v223, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_23DD92BA8(0, *(_QWORD *)(v147 + 16) + 1, 1);
      v147 = v233;
      v151 = *(_QWORD *)(v233 + 16);
      v150 = *(_QWORD *)(v233 + 24);
      if (v151 >= v150 >> 1)
      {
        sub_23DD92BA8(v150 > 1, v151 + 1, 1);
        v147 = v233;
      }
      *(_QWORD *)(v147 + 16) = v151 + 1;
      result = sub_23DCFBB58(v223, v147 + v148 + v151 * v149, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      v110 = (uint64_t)v225;
    }
    if (v145 == ++v146)
    {
      v152 = v233;
      v132 = v220;
      v154 = v216;
      v153 = v217;
      v155 = (uint64_t)v177;
      goto LABEL_31;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_23DD11D20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[4];
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[4];

  v24[3] = a3;
  v6 = sub_23DDC590C();
  MEMORY[0x24BDAC7A8](v6);
  v24[2] = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v11 = sub_23DDC58B8();
  MEMORY[0x24BDAC7A8](v11);
  sub_23DDC58AC();
  v24[1] = sub_23DD0F56C(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = swift_allocObject();
  v14 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v13 + 24) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  *(_QWORD *)(v13 + ((v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = a1;
  swift_bridgeObjectRetain();
  v15 = sub_23DDC5C0C();
  v16 = sub_23DDC5C0C();
  v29[0] = v14;
  v29[1] = MEMORY[0x24BDECC38];
  v17 = MEMORY[0x24BDED308];
  v28[0] = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v15, v29);
  v28[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242643BD8](v17, v16, v28);
  v18 = sub_23DDC58D0();
  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E28];
  v20 = sub_23DDC6980();
  v29[2] = v20;
  sub_23DD145CC(255, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C, v19);
  v29[3] = v21;
  v22 = sub_23DDC57E0();
  sub_23DDC512C();
  v26 = MEMORY[0x242643BD8](MEMORY[0x24BDB7E40], v18);
  v27[0] = MEMORY[0x242643BD8](MEMORY[0x24BDB84F8], v20, &v26);
  v27[1] = sub_23DD13E58(&qword_256CFCA60, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C);
  v25 = v27;
  MEMORY[0x242643BD8](MEMORY[0x24BDB7B88], v22, &v25);
  sub_23DDC5900();
  return sub_23DDC5A08();
}

uint64_t sub_23DD12030@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[4];

  v4 = sub_23DDC5C0C();
  v5 = sub_23DDC5C0C();
  v30[0] = a1;
  v30[1] = MEMORY[0x24BDECC38];
  v6 = MEMORY[0x24BDED308];
  v29[0] = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v4, v30);
  v29[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242643BD8](v6, v5, v29);
  v7 = sub_23DDC58D0();
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E28];
  v9 = sub_23DDC6980();
  v30[2] = v9;
  sub_23DD145CC(255, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C, v8);
  v30[3] = v10;
  v11 = sub_23DDC57E0();
  v27 = MEMORY[0x242643BD8](MEMORY[0x24BDB7E40], v7);
  v28[0] = MEMORY[0x242643BD8](MEMORY[0x24BDB84F8], v9, &v27);
  v28[1] = sub_23DD13E58(&qword_256CFCA60, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C);
  v26 = v28;
  MEMORY[0x242643BD8](MEMORY[0x24BDB7B88], v11, &v26);
  sub_23DDC5A14();
  v12 = sub_23DDC5EAC();
  v13 = MEMORY[0x242643BD8](MEMORY[0x24BDEFDC0], v12);
  v24 = v12;
  v25 = v13;
  v14 = MEMORY[0x242643B9C](0, &v24, MEMORY[0x24BDFAC10], 0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v24 - v19;
  v21 = swift_checkMetadataState();
  sub_23DDC60F8();
  v24 = v21;
  v25 = v13;
  swift_getOpaqueTypeConformance2();
  sub_23DD272F4((uint64_t)v17, v14, (uint64_t)v20);
  v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v17, v14);
  sub_23DD26D88((uint64_t)v20, v14, a2);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v14);
}

uint64_t sub_23DD122E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v4 = sub_23DDC5918();
  v5 = MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 16))((char *)&v8 - v6, a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return sub_23DDC5924();
}

uint64_t sub_23DD12390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v9;

  v5 = sub_23DDC5918();
  v6 = MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a3 - 8) + 16))((char *)&v9 - v7, a1, a3, v6);
  swift_storeEnumTagMultiPayload();
  return sub_23DDC5924();
}

unint64_t sub_23DD1243C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  unint64_t result;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t (*v54)(char *, uint64_t);
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)@<X0>(uint64_t@<X8>);
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD v63[3];
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  _QWORD v77[3];
  _QWORD v78[2];
  uint64_t v79[2];
  _QWORD v80[2];
  _QWORD v81[3];

  v69 = a3;
  v72 = a2;
  v76 = a1;
  v65 = a6;
  v8 = sub_23DDC596C();
  MEMORY[0x24BDAC7A8](v8);
  v63[2] = (char *)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DDC5984();
  MEMORY[0x24BDAC7A8](v10);
  v63[1] = (char *)v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD145CC(0, &qword_256CFCA68, (uint64_t (*)(uint64_t))sub_23DD0A698, (uint64_t (*)(void))sub_23DD0A6F4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E28]);
  v68 = v12;
  v66 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v67 = (char *)v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v64 = (char *)v63 - v15;
  v16 = sub_23DDC512C();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v75 = (char *)v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = a4;
  v19 = sub_23DDC5C0C();
  v20 = sub_23DDC5C0C();
  v71 = a5;
  v81[0] = a5;
  v81[1] = MEMORY[0x24BDECC38];
  v21 = MEMORY[0x24BDED308];
  v80[0] = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v19, v81);
  v80[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242643BD8](v21, v20, v80);
  v22 = sub_23DDC58D0();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)v63 - v27;
  v29 = sub_23DDC6980();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)v63 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v74 = (char *)v63 - v34;
  v35 = sub_23DDC5A2C();
  v73 = v17;
  if (v35)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v32, 1, 1, v22);
    MEMORY[0x242643BD8](MEMORY[0x24BDB7E40], v22);
  }
  else
  {
    v37 = type metadata accessor for OvernightMetricsAxisStyle(0, v70, v71, v36);
    sub_23DD12A64(v37);
    MEMORY[0x242643BD8](MEMORY[0x24BDB7E40], v22);
    v38 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
    v38(v28, v25, v22);
    v39 = v16;
    v40 = *(void (**)(char *, uint64_t))(v23 + 8);
    v40(v25, v22);
    v38(v32, v28, v22);
    v40(v28, v22);
    v16 = v39;
    v17 = v73;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v32, 0, 1, v22);
  }
  v41 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v41(v74, v32, v29);
  v42 = *(void (**)(char *, uint64_t))(v30 + 8);
  v42(v32, v29);
  v43 = *(_QWORD *)&v69[*(int *)(type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0)
                               + 20)];
  result = sub_23DDC5A2C();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (result >= *(_QWORD *)(v43 + 16))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v75, v43+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * result, v16);
  sub_23DDC5A2C();
  result = sub_23DDC5A20();
  if (!__OFSUB__(result, 1))
  {
    sub_23DDC5E10();
    v76 = v16;
    v45 = sub_23DDC5D98();
    v69 = (char *)v42;
    v63[0] = v63;
    MEMORY[0x24BDAC7A8](v45);
    v58 = v71;
    sub_23DDC5978();
    sub_23DDC5960();
    sub_23DD0A698();
    v61 = v46;
    v62 = sub_23DD0A6F4();
    v59 = sub_23DD14494;
    v60 = &v55;
    LOBYTE(v58) = 1;
    v57 = 0;
    v56 = 1;
    v55 = 0;
    v47 = v64;
    sub_23DDC58C4();
    v48 = v74;
    v41(v32, v74, v29);
    v79[0] = (uint64_t)v32;
    v49 = v66;
    v51 = (uint64_t)v67;
    v50 = v68;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v67, v47, v68);
    v79[1] = v51;
    v78[0] = v29;
    v78[1] = v50;
    v77[0] = MEMORY[0x242643BD8](MEMORY[0x24BDB7E40], v22);
    v77[1] = MEMORY[0x242643BD8](MEMORY[0x24BDB84F8], v29, v77);
    v77[2] = sub_23DD13E58(&qword_256CFCA70, &qword_256CFCA68, (uint64_t (*)(uint64_t))sub_23DD0A698, (uint64_t (*)(void))sub_23DD0A6F4);
    sub_23DD12F78(v79, 2uLL, (uint64_t)v78, v65);
    v52 = *(void (**)(char *, uint64_t))(v49 + 8);
    v52(v47, v50);
    v53 = v48;
    v54 = (uint64_t (*)(char *, uint64_t))v69;
    ((void (*)(char *, uint64_t))v69)(v53, v29);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v76);
    v52((char *)v51, v50);
    return v54(v32, v29);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_23DD12A64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[2];

  v2 = sub_23DDC596C();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23DDC5984();
  MEMORY[0x24BDAC7A8](v3);
  sub_23DDC5E10();
  sub_23DDC5D98();
  v8 = *(_QWORD *)(a1 + 24);
  v4 = sub_23DDC5C0C();
  v5 = sub_23DDC5C0C();
  v10[0] = v8;
  v10[1] = MEMORY[0x24BDECC38];
  v6 = MEMORY[0x24BDED308];
  v9[0] = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v4, v10);
  v9[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242643BD8](v6, v5, v9);
  sub_23DDC5978();
  sub_23DDC5960();
  return sub_23DDC58C4();
}

uint64_t sub_23DD12C08@<X0>(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BYTE *v17;
  void (*v18)(_BYTE *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[4];
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[35];
  uint64_t v56[36];

  v52 = a3;
  v53 = a4;
  v54 = a2;
  LODWORD(v51) = a1;
  v6 = sub_23DDC50CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v45[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_23DDC50F0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v45[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = &v45[-v16];
  MEMORY[0x2426418B0](v15);
  sub_23DDC50C0();
  sub_23DDC50E4();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  v18 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
  v18(v13, v10);
  sub_23DCF535C(&qword_254326658, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE2A0], MEMORY[0x24BDCE290]);
  sub_23DDC5120();
  v18(v17, v10);
  v55[0] = v56[0];
  v55[1] = v56[1];
  sub_23DD0B190();
  v20 = sub_23DDC6098();
  v22 = v21;
  v24 = v23;
  v26 = v52;
  v25 = v53;
  if ((v51 & 1) != 0)
  {
    v51 = type metadata accessor for OvernightMetricsAxisStyle(0, v52, v53, v19);
    sub_23DD0F90C(v51, v56);
    v27 = v56[30];
  }
  else
  {
    v51 = type metadata accessor for OvernightMetricsAxisStyle(0, v52, v53, v19);
    sub_23DD0F90C(v51, v56);
    v27 = v56[29];
  }
  swift_retain();
  sub_23DCFE908(v56);
  v56[0] = v27;
  v52 = sub_23DDC6068();
  v53 = v28;
  v50 = v29;
  v49 = v30 & 1;
  sub_23DD0B1D4(v20, v22, v24 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for OvernightMetricsAxisStyle(0, v26, v25, v31);
  v32 = v51;
  sub_23DD0F90C(v51, v55);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23DCFE908(v55);
  swift_release();
  swift_release();
  swift_release();
  v33 = v52;
  v34 = v50;
  v35 = v49;
  v47 = sub_23DDC6074();
  v48 = v36;
  v38 = v37;
  v46 = v39;
  sub_23DD0B1D4(v33, v34, v35);
  swift_release();
  swift_bridgeObjectRelease();
  LOBYTE(v33) = sub_23DDC5F54();
  sub_23DD0F90C(v32, v56);
  sub_23DCFE908(v56);
  result = sub_23DDC5A74();
  *(_QWORD *)a5 = v47;
  *(_QWORD *)(a5 + 8) = v38;
  *(_BYTE *)(a5 + 16) = v46 & 1;
  *(_QWORD *)(a5 + 24) = v48;
  *(_BYTE *)(a5 + 32) = v33;
  *(_QWORD *)(a5 + 40) = v41;
  *(_QWORD *)(a5 + 48) = v42;
  *(_QWORD *)(a5 + 56) = v43;
  *(_QWORD *)(a5 + 64) = v44;
  *(_BYTE *)(a5 + 72) = 0;
  return result;
}

uint64_t sub_23DD12F78@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata;
  char *v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  char **v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD v33[2];

  v5 = a1;
  v33[0] = a4;
  v33[1] = a3;
  v6 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  v7 = 8 * a2;
  if (a2 == 1)
  {
    TupleTypeMetadata = *v6;
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v9 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      v10 = 0;
      if (a2 < 4)
        goto LABEL_9;
      if ((unint64_t)(v9 - (char *)v6) < 0x20)
        goto LABEL_9;
      v10 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      v11 = (__int128 *)(v6 + 2);
      v12 = v9 + 16;
      v13 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v10 != a2)
      {
LABEL_9:
        v15 = a2 - v10;
        v16 = v10;
        v17 = &v9[8 * v10];
        v18 = &v6[v16];
        do
        {
          v19 = *v18++;
          *(_QWORD *)v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v21 = (char *)v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  if (a2)
  {
    v24 = (int *)(v23 + 32);
    v25 = (char **)((char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    v26 = a2;
    do
    {
      if (a2 == 1)
        v27 = 0;
      else
        v27 = *v24;
      v29 = *v6++;
      v28 = v29;
      v30 = &v21[v27];
      v31 = *v5++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v30, v31);
      *v25++ = v30;
      v24 += 4;
      --v26;
    }
    while (v26);
  }
  return sub_23DDC57D4();
}

unint64_t sub_23DD13144@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  void (*v37)(char *, uint64_t);
  void (*v38)(char *, char *, uint64_t);
  void (*v39)(char *, uint64_t);
  unint64_t result;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t (*v49)(char *, uint64_t);
  uint64_t v50;
  char v51;
  void *(*v52)@<X0>(uint64_t@<X8>);
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD v69[3];
  _QWORD v70[2];
  uint64_t v71[2];
  _QWORD v72[2];
  _QWORD v73[3];

  v64 = a3;
  v67 = a2;
  v57 = a6;
  v9 = sub_23DDC596C();
  MEMORY[0x24BDAC7A8](v9);
  v59 = (char *)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23DDC5984();
  MEMORY[0x24BDAC7A8](v11);
  v58 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD145CC(0, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E28]);
  v63 = v13;
  v61 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v62 = (char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v60 = (char *)v56 - v16;
  v17 = sub_23DDC5C0C();
  v18 = sub_23DDC5C0C();
  v66 = a5;
  v73[0] = a5;
  v73[1] = MEMORY[0x24BDECC38];
  v19 = MEMORY[0x24BDED308];
  v72[0] = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v17, v73);
  v72[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242643BD8](v19, v18, v72);
  v20 = sub_23DDC58D0();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)v56 - v25;
  v27 = sub_23DDC6980();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)v56 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v68 = (char *)v56 - v32;
  v65 = a1;
  v33 = sub_23DDC5A2C();
  v56[1] = a4;
  if (v33)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v30, 1, 1, v20);
    MEMORY[0x242643BD8](MEMORY[0x24BDB7E40], v20);
  }
  else
  {
    v35 = type metadata accessor for OvernightMetricsAxisStyle(0, a4, v66, v34);
    sub_23DD12A64(v35);
    MEMORY[0x242643BD8](MEMORY[0x24BDB7E40], v20);
    v36 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
    v36(v26, v23, v20);
    v37 = *(void (**)(char *, uint64_t))(v21 + 8);
    v37(v23, v20);
    v36(v30, v26, v20);
    v37(v26, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v30, 0, 1, v20);
  }
  v38 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v38(v68, v30, v27);
  v39 = *(void (**)(char *, uint64_t))(v28 + 8);
  v39(v30, v27);
  result = sub_23DDC5A2C();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < v64[2])
  {
    type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
    sub_23DDC5E10();
    v41 = sub_23DDC5D98();
    v64 = v56;
    v65 = v39;
    MEMORY[0x24BDAC7A8](v41);
    sub_23DDC5978();
    sub_23DDC5960();
    v54 = type metadata accessor for OvernightMetricsChartDayAxisLabel();
    v55 = sub_23DD13E3C();
    v52 = sub_23DD1447C;
    v53 = &v50;
    v51 = 1;
    v50 = 0;
    v42 = v60;
    sub_23DDC58C4();
    v43 = v68;
    v38(v30, v68, v27);
    v71[0] = (uint64_t)v30;
    v44 = v61;
    v45 = (uint64_t)v62;
    v46 = v63;
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v62, v42, v63);
    v71[1] = v45;
    v70[0] = v27;
    v70[1] = v46;
    v69[0] = MEMORY[0x242643BD8](MEMORY[0x24BDB7E40], v20);
    v69[1] = MEMORY[0x242643BD8](MEMORY[0x24BDB84F8], v27, v69);
    v69[2] = sub_23DD13E58(&qword_256CFCA60, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C);
    sub_23DD12F78(v71, 2uLL, (uint64_t)v70, v57);
    v47 = *(void (**)(char *, uint64_t))(v44 + 8);
    v47(v42, v46);
    v48 = v43;
    v49 = (uint64_t (*)(char *, uint64_t))v65;
    v65(v48, v27);
    v47((char *)v45, v46);
    return v49(v30, v27);
  }
  __break(1u);
  return result;
}

void *sub_23DD136BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _BYTE __src[288];

  sub_23DCF58EC(a1, a5, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
  v9 = type metadata accessor for OvernightMetricsAxisStyle(0, a3, a4, v8);
  v10 = (uint64_t *)(a2 + *(int *)(v9 + 36));
  v11 = *v10;
  v12 = v10[1];
  v13 = v10[2];
  v14 = v10[3];
  v15 = v10[4];
  v16 = v10[5];
  v18 = v10[6];
  v17 = v10[7];
  v19 = v10[8];
  sub_23DCF59EC(*v10);
  sub_23DD0F90C(v9, __src);
  v20 = type metadata accessor for OvernightMetricsChartDayAxisLabel();
  v21 = (uint64_t *)(a5 + *(int *)(v20 + 20));
  *v21 = v11;
  v21[1] = v12;
  v21[2] = v13;
  v21[3] = v14;
  v21[4] = v15;
  v21[5] = v16;
  v21[6] = v18;
  v21[7] = v17;
  v21[8] = v19;
  return memcpy((void *)(a5 + *(int *)(v20 + 24)), __src, 0x118uLL);
}

uint64_t sub_23DD137C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[2];
  uint64_t v26[36];

  v23 = a3;
  v5 = sub_23DDC5C0C();
  v21 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v20 - v6;
  v8 = sub_23DDC5C0C();
  v22 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v20 = (uint64_t)&v20 - v12;
  v14 = type metadata accessor for OvernightMetricsAxisStyle(0, a1, a2, v13);
  sub_23DDC61A0();
  sub_23DDC5F54();
  sub_23DD0F90C(v14, v26);
  sub_23DCFE908(v26);
  v25[0] = a2;
  v25[1] = MEMORY[0x24BDECC38];
  v15 = MEMORY[0x24BDED308];
  v16 = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v5, v25);
  sub_23DDC61AC();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  v24[0] = v16;
  v24[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242643BD8](v15, v8, v24);
  v17 = v20;
  sub_23DD272F4((uint64_t)v10, v8, v20);
  v18 = *(void (**)(char *, uint64_t))(v22 + 8);
  v18(v10, v8);
  sub_23DD26D88(v17, v8, v23);
  return ((uint64_t (*)(uint64_t, uint64_t))v18)(v17, v8);
}

uint64_t sub_23DD139E0()
{
  return sub_23DDC5B1C();
}

uint64_t sub_23DD139FC()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23DD13A0C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC9F8)
  {
    sub_23DD13A70();
    v0 = sub_23DDC5B94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC9F8);
  }
}

void sub_23DD13A70()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_256CFCA00)
  {
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20];
    sub_23DCFB328(255, &qword_256CFCA08, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DDC53A8();
    sub_23DD13B40();
    sub_23DD13C08();
    sub_23DCF535C(&qword_254326680, v0, MEMORY[0x24BE3FE38]);
    v1 = sub_23DDC6380();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_256CFCA00);
  }
}

void sub_23DD13B40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFCA10)
  {
    sub_23DCFB328(255, (unint64_t *)&qword_256CFCA18, (uint64_t (*)(uint64_t))sub_23DD13BB4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFCA10);
  }
}

void sub_23DD13BB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFCA20)
  {
    v0 = sub_23DDC6980();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFCA20);
  }
}

unint64_t sub_23DD13C08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFCA28;
  if (!qword_256CFCA28)
  {
    sub_23DCFB328(255, &qword_256CFCA08, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE12D8], v1);
    atomic_store(result, (unint64_t *)&qword_256CFCA28);
  }
  return result;
}

uint64_t sub_23DD13C68()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(v0 + 256);
  v4 = *(_OWORD *)(v0 + 272);
  v2 = *(_OWORD *)(v0 + 224);
  sub_23DD0CCE4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(_QWORD *)(v0 + 176),
    *(_QWORD *)(v0 + 184),
    *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(v0 + 240),
    *(_QWORD *)(v0 + 248),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(_QWORD *)(v0 + 288),
    *(_BYTE *)(v0 + 296));
  return swift_deallocObject();
}

uint64_t sub_23DD13CE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23DD0F6DC((const void *)(v1 + 16), a1);
}

unint64_t sub_23DD13CF0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_256CFCA30;
  if (!qword_256CFCA30)
  {
    sub_23DD13B40();
    v2 = v1;
    v3 = sub_23DD13D58();
    v4[0] = MEMORY[0x24BDF40E8];
    v4[1] = v3;
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_256CFCA30);
  }
  return result;
}

unint64_t sub_23DD13D58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFCA38;
  if (!qword_256CFCA38)
  {
    sub_23DCFB328(255, (unint64_t *)&qword_256CFCA18, (uint64_t (*)(uint64_t))sub_23DD13BB4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF1008]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF1028], v1);
    atomic_store(result, (unint64_t *)&qword_256CFCA38);
  }
  return result;
}

void sub_23DD13DC0(uint64_t a1)
{
  sub_23DD145CC(a1, &qword_254326A60, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(void))sub_23DCF67EC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
}

unint64_t sub_23DD13DE4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256CFCA48;
  if (!qword_256CFCA48)
  {
    sub_23DD13DC0(255);
    v2 = MEMORY[0x24BDB7A98];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB8498], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256CFCA48);
  }
  return result;
}

uint64_t sub_23DD13E3C()
{
  return sub_23DCF535C(&qword_256CFCA58, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, (uint64_t)&unk_23DDCBA28);
}

uint64_t sub_23DD13E58(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_23DD145CC(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E28]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB7E40], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DD13EA0(uint64_t a1)
{
  uint64_t v2;

  sub_23DCFB328(0, &qword_256CFCA40, (uint64_t (*)(uint64_t))MEMORY[0x24BDB8338], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DD13EF4@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_23DD104A4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23DD13F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for OvernightMetricsAxisStyle(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v23 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0)
                                      - 8)
                          + 80);
  v24 = v8;
  v10 = v4 + v8;
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v12 = sub_23DDC512C();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v10, v12);
  sub_23DD13DC0(0);
  v22 = v14;
  v13(v10 + *(int *)(v14 + 36), v12);
  if (EnumCaseMultiPayload != 1)
    type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v10 + v6[9]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v10 + v6[10], v5);
  v15 = v10 + v6[11];
  v20 = *(_OWORD *)(v15 + 240);
  v21 = *(_OWORD *)(v15 + 256);
  v19 = *(_OWORD *)(v15 + 208);
  sub_23DD0CCE4(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), *(_QWORD *)(v15 + 40), *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), *(_QWORD *)(v15 + 64), *(_QWORD *)(v15 + 72), *(_QWORD *)(v15 + 80), *(_QWORD *)(v15 + 88), *(_QWORD *)(v15 + 96), *(_QWORD *)(v15 + 104), *(_QWORD *)(v15 + 112), *(_QWORD *)(v15 + 120), *(_QWORD *)(v15 + 128), *(_QWORD *)(v15 + 136), *(_QWORD *)(v15 + 144),
    *(_QWORD *)(v15 + 152),
    *(_QWORD *)(v15 + 160),
    *(_QWORD *)(v15 + 168),
    *(_QWORD *)(v15 + 176),
    *(_QWORD *)(v15 + 184),
    *(_QWORD *)(v15 + 192),
    *(_QWORD *)(v15 + 200),
    v19,
    *((uint64_t *)&v19 + 1),
    *(_QWORD *)(v15 + 224),
    *(_QWORD *)(v15 + 232),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    *(_QWORD *)(v15 + 272),
    *(_BYTE *)(v15 + 280));
  v16 = v10 + v6[12];
  sub_23DCFB328(0, (unint64_t *)&qword_256CFC9F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = sub_23DDC51E0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  else
  {
    swift_release();
  }
  v13(v4 + ((v24 + v23 + v9) & ~v9), v12);
  v13(v4 + ((v24 + v23 + v9) & ~v9) + *(int *)(v22 + 36), v12);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_23DD1415C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(type metadata accessor for OvernightMetricsAxisStyle(0, v6, v7, a2) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0)
                                       - 8)
                           + 80);
  return sub_23DD1243C(a1, v3 + v9, (char *)(v3 + ((v9 + v10 + v11) & ~v11)), v6, v7, a3);
}

uint64_t sub_23DD141F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DD12030(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23DD141F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for OvernightMetricsAxisStyle(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = v4
     + ((*(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80));
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v9 = sub_23DDC512C();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v7, v9);
  sub_23DD13DC0(0);
  v10(v7 + *(int *)(v11 + 36), v9);
  if (EnumCaseMultiPayload == 1)
    type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  else
    type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v7 + v6[9]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v7 + v6[10], v5);
  v12 = v7 + v6[11];
  v17 = *(_OWORD *)(v12 + 240);
  v18 = *(_OWORD *)(v12 + 256);
  v16 = *(_OWORD *)(v12 + 208);
  sub_23DD0CCE4(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), *(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40), *(_QWORD *)(v12 + 48), *(_QWORD *)(v12 + 56), *(_QWORD *)(v12 + 64), *(_QWORD *)(v12 + 72), *(_QWORD *)(v12 + 80), *(_QWORD *)(v12 + 88), *(_QWORD *)(v12 + 96), *(_QWORD *)(v12 + 104), *(_QWORD *)(v12 + 112), *(_QWORD *)(v12 + 120), *(_QWORD *)(v12 + 128), *(_QWORD *)(v12 + 136), *(_QWORD *)(v12 + 144),
    *(_QWORD *)(v12 + 152),
    *(_QWORD *)(v12 + 160),
    *(_QWORD *)(v12 + 168),
    *(_QWORD *)(v12 + 176),
    *(_QWORD *)(v12 + 184),
    *(_QWORD *)(v12 + 192),
    *(_QWORD *)(v12 + 200),
    v16,
    *((uint64_t *)&v16 + 1),
    *(_QWORD *)(v12 + 224),
    *(_QWORD *)(v12 + 232),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(_QWORD *)(v12 + 272),
    *(_BYTE *)(v12 + 280));
  v13 = v7 + v6[12];
  sub_23DCFB328(0, (unint64_t *)&qword_256CFC9F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = sub_23DDC51E0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_23DD14400@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(type metadata accessor for OvernightMetricsAxisStyle(0, v6, v7, a2) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return sub_23DD13144(a1, v3 + v9, *(_QWORD **)(v3 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8)), v6, v7, a3);
}

void *sub_23DD1447C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23DD136BC(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_23DD14488@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DD137C0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23DD14494@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DD12C08(*(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23DD144A8(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  __int128 v5;
  char v6;

  v6 = *(_BYTE *)(a1 + 280);
  v4 = *(_OWORD *)(a1 + 240);
  v5 = *(_OWORD *)(a1 + 256);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    *(_QWORD *)(a1 + 272),
    v6);
  return a1;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x242643B54](a1, v6, a5);
}

unint64_t sub_23DD14564()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFCA78;
  if (!qword_256CFCA78)
  {
    sub_23DD145CC(255, &qword_256CFCA80, (uint64_t (*)(uint64_t))sub_23DD13A70, (uint64_t (*)(void))sub_23DD1463C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDF4730]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF4750], v1);
    atomic_store(result, (unint64_t *)&qword_256CFCA78);
  }
  return result;
}

void sub_23DD145CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4();
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

unint64_t sub_23DD1463C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_256CFCA88;
  if (!qword_256CFCA88)
  {
    sub_23DD13A70();
    v2 = v1;
    v3 = sub_23DD13CF0();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF4A08], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CFCA88);
  }
  return result;
}

uint64_t sub_23DD1469C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[2];
  _QWORD *v50;
  _QWORD v51[2];
  _QWORD *v52;
  _QWORD v53[4];
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[6];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = a1[1];
  v5 = type metadata accessor for OvernightMetricsAxisStyle(255, *a1, v4, a4);
  MEMORY[0x242643BD8](&unk_23DDC7E60, v5);
  v6 = sub_23DDC5E88();
  v7 = sub_23DDC5948();
  v8 = sub_23DDC5954();
  v9 = MEMORY[0x242643BD8](MEMORY[0x24BDEFB78], v6);
  v59 = v6;
  v60 = v7;
  v61 = v8;
  v62 = v9;
  v10 = MEMORY[0x24BDB7FF0];
  v11 = MEMORY[0x24BDB8040];
  v63 = MEMORY[0x24BDB7FF0];
  v64 = MEMORY[0x24BDB8040];
  v12 = MEMORY[0x242643B9C](255, &v59, MEMORY[0x24BDB83F0], 0);
  v59 = v6;
  v60 = v7;
  v61 = v8;
  v62 = v9;
  v63 = v10;
  v64 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v59 = v12;
  v60 = OpaqueTypeConformance2;
  v45 = MEMORY[0x242643B9C](255, &v59, MEMORY[0x24BDB8390], 0);
  sub_23DD13DC0(255);
  v15 = v14;
  v44 = v14;
  v59 = v12;
  v60 = OpaqueTypeConformance2;
  v43 = swift_getOpaqueTypeConformance2();
  v42 = sub_23DD13DE4();
  v59 = v45;
  v60 = v15;
  v61 = v43;
  v62 = v42;
  v46 = MEMORY[0x242643B9C](255, &v59, MEMORY[0x24BDB83B0], 0);
  v16 = sub_23DDC5C0C();
  v17 = sub_23DDC5C0C();
  v58[0] = v4;
  v58[1] = MEMORY[0x24BDECC38];
  v18 = MEMORY[0x24BDED308];
  v57[0] = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v16, v58);
  v57[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242643BD8](v18, v17, v57);
  v19 = sub_23DDC58D0();
  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E28];
  v21 = sub_23DDC6980();
  v58[2] = v21;
  sub_23DD145CC(255, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C, v20);
  v58[3] = v22;
  v23 = sub_23DDC57E0();
  v55 = MEMORY[0x242643BD8](MEMORY[0x24BDB7E40], v19);
  v41 = MEMORY[0x242643BD8](MEMORY[0x24BDB84F8], v21, &v55);
  v56[0] = v41;
  v56[1] = sub_23DD13E58(&qword_256CFCA60, &qword_256CFCA50, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartDayAxisLabel, sub_23DD13E3C);
  v54 = v56;
  MEMORY[0x242643BD8](MEMORY[0x24BDB7B88], v23, &v54);
  v24 = sub_23DDC5A14();
  v25 = sub_23DDC5EAC();
  v26 = MEMORY[0x242643BD8](MEMORY[0x24BDEFDC0], v25);
  v59 = v25;
  v60 = v26;
  v27 = MEMORY[0x242643B9C](255, &v59, MEMORY[0x24BDFAC10], 0);
  v28 = MEMORY[0x242643BD8](MEMORY[0x24BDB82F0], v24);
  v59 = v25;
  v60 = v26;
  v29 = swift_getOpaqueTypeConformance2();
  v59 = v24;
  v60 = v27;
  v61 = v28;
  v62 = v29;
  v58[4] = MEMORY[0x242643B9C](255, &v59, MEMORY[0x24BDB7B18], 0);
  v58[5] = v24;
  v30 = sub_23DDC57E0();
  v31 = sub_23DDC5930();
  v53[2] = v21;
  sub_23DD145CC(255, &qword_256CFCA68, (uint64_t (*)(uint64_t))sub_23DD0A698, (uint64_t (*)(void))sub_23DD0A6F4, v20);
  v53[3] = v32;
  v33 = sub_23DDC57E0();
  v53[0] = v41;
  v53[1] = sub_23DD13E58(&qword_256CFCA70, &qword_256CFCA68, (uint64_t (*)(uint64_t))sub_23DD0A698, (uint64_t (*)(void))sub_23DD0A6F4);
  v52 = v53;
  MEMORY[0x242643BD8](MEMORY[0x24BDB7B88], v33, &v52);
  v34 = sub_23DDC5A14();
  v35 = sub_23DDC5930();
  v36 = sub_23DDC6980();
  v59 = v45;
  v60 = v44;
  v61 = v43;
  v62 = v42;
  v37 = swift_getOpaqueTypeConformance2();
  v59 = v24;
  v60 = v27;
  v61 = v28;
  v62 = v29;
  v51[0] = swift_getOpaqueTypeConformance2();
  v51[1] = v28;
  v50 = v51;
  v49[0] = MEMORY[0x242643BD8](MEMORY[0x24BDB7B78], v30, &v50);
  v49[1] = v28;
  v38 = MEMORY[0x24BDB7FA0];
  v48[0] = MEMORY[0x242643BD8](MEMORY[0x24BDB7FA0], v31, v49);
  v48[1] = MEMORY[0x242643BD8](MEMORY[0x24BDB82F0], v34);
  v47 = MEMORY[0x242643BD8](v38, v35, v48);
  v39 = MEMORY[0x242643BD8](MEMORY[0x24BDB84E8], v36, &v47);
  v59 = v46;
  v60 = v36;
  v61 = v37;
  v62 = v39;
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD14C08()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD14C18()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFCAE8);
}

uint64_t *sub_23DD14C40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC512C();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_23DD13DC0(0);
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23DD14CF4(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = sub_23DDC512C();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(a1, v2);
  sub_23DD13DC0(0);
  v3(a1 + *(int *)(v4 + 36), v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DD14D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_23DD13DC0(0);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23DD14DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_23DD13DC0(0);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23DD14E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_23DD13DC0(0);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23DD14EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_23DD13DC0(0);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23DD14F88()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_23DD13DC0(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_23DD15014()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_23DD13DC0(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
}

uint64_t type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFCB78);
}

void sub_23DD150B0()
{
  unint64_t v0;

  sub_23DD13DC0(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *sub_23DD15124(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = sub_23DDC512C();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_23DD13DC0(0);
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    if (EnumCaseMultiPayload == 1)
      v10 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
    else
      v10 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
    *(uint64_t *)((char *)a1 + *(int *)(v10 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v10 + 20));
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23DD15230(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v3 = sub_23DDC512C();
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(a1, v3);
  sub_23DD13DC0(0);
  v4(a1 + *(int *)(v5 + 36), v3);
  if (EnumCaseMultiPayload == 1)
    type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  else
    type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DD152B8(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = sub_23DDC512C();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  sub_23DD13DC0(0);
  v6(a1 + *(int *)(v7 + 36), a2 + *(int *)(v7 + 36), v5);
  if (EnumCaseMultiPayload == 1)
    v8 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  else
    v8 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  *(_QWORD *)(a1 + *(int *)(v8 + 20)) = *(_QWORD *)(a2 + *(int *)(v8 + 20));
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_23DD15380(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_23DCF59A8(a1, type metadata accessor for OvernightMetricsAxisConfiguration);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = sub_23DDC512C();
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
    v6(a1, a2, v5);
    sub_23DD13DC0(0);
    v6(a1 + *(int *)(v7 + 36), a2 + *(int *)(v7 + 36), v5);
    if (EnumCaseMultiPayload == 1)
      v8 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
    else
      v8 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
    *(_QWORD *)(a1 + *(int *)(v8 + 20)) = *(_QWORD *)(a2 + *(int *)(v8 + 20));
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for OvernightMetricsAxisConfiguration(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFCC20);
}

uint64_t sub_23DD15474(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = sub_23DDC512C();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  sub_23DD13DC0(0);
  v6(a1 + *(int *)(v7 + 36), a2 + *(int *)(v7 + 36), v5);
  if (EnumCaseMultiPayload == 1)
    v8 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  else
    v8 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  *(_QWORD *)(a1 + *(int *)(v8 + 20)) = *(_QWORD *)(a2 + *(int *)(v8 + 20));
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_23DD15538(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_23DCF59A8(a1, type metadata accessor for OvernightMetricsAxisConfiguration);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = sub_23DDC512C();
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
    v6(a1, a2, v5);
    sub_23DD13DC0(0);
    v6(a1 + *(int *)(v7 + 36), a2 + *(int *)(v7 + 36), v5);
    if (EnumCaseMultiPayload == 1)
      v8 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
    else
      v8 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
    *(_QWORD *)(a1 + *(int *)(v8 + 20)) = *(_QWORD *)(a2 + *(int *)(v8 + 20));
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23DD15614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_23DD15620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_23DD15630()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23DD15640()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_23DD156C4(uint64_t a1, uint64_t a2)
{
  return sub_23DD167B4(a1, a2, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration, sub_23DD40FA0) & 1;
}

uint64_t sub_23DD156EC(uint64_t a1, uint64_t a2)
{
  return sub_23DD167B4(a1, a2, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration, sub_23DD411E8) & 1;
}

uint64_t sub_23DD15718@<X0>(void *__src@<X7>, char *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X4>, uint64_t a7@<X5>, uint64_t a8@<X6>, uint64_t a9@<X8>)
{
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[6];
  uint64_t v21[36];

  v16 = *a2;
  memcpy(v21, __src, 0x118uLL);
  if ((v16 & 1) != 0)
  {
    sub_23DCF59A8(a3, (uint64_t (*)(_QWORD))sub_23DD13DC0);
    swift_bridgeObjectRelease();
    sub_23DCFE908(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DCFBB58(a4, a9, (uint64_t (*)(_QWORD))sub_23DD13DC0);
    v17 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  }
  else
  {
    v18 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v18);
    v20[2] = a8;
    v20[3] = v21;
    a5 = sub_23DD169BC(a7, a6, (void (*)(char *, char *))sub_23DD169B4, (uint64_t)v20);
    sub_23DCF59A8(a4, (uint64_t (*)(_QWORD))sub_23DD13DC0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DCFE908(v21);
    sub_23DCFBB58(a3, a9, (uint64_t (*)(_QWORD))sub_23DD13DC0);
    v17 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  }
  *(_QWORD *)(a9 + *(int *)(v17 + 20)) = a5;
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23DD158A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v72 = a4;
  v77 = a2;
  v84 = a1;
  v7 = sub_23DDC512C();
  v79 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v76 = (char *)&v63 - v11;
  v85 = sub_23DDC53A8();
  v12 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85);
  v75 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v74 = (char *)&v63 - v15;
  v16 = sub_23DDC54C8();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v71 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v19 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v70 = (uint64_t)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v63 - v22;
  sub_23DCFB328(0, &qword_254326710, v24, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](a3);
  v73 = (uint64_t)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v81 = (char *)&v63 - v27;
  v30.n128_f64[0] = MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v63 - v31;
  v33 = *(_QWORD *)(v29 + 16);
  v83 = (char *)&v63 - v31;
  v80 = a5;
  v78 = v12;
  if (v33)
  {
    v66 = v17;
    v67 = v16;
    v68 = v9;
    v69 = v7;
    v34 = v29 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v64 = v19;
    v35 = *(_QWORD *)(v19 + 72);
    v65 = v29;
    swift_bridgeObjectRetain();
    v36 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20];
    v37 = MEMORY[0x24BE3FE48];
    while (1)
    {
      sub_23DCF58EC(v34, (uint64_t)v23, type metadata accessor for IndividualOvernightMetricChartPoint);
      sub_23DCF535C(&qword_254326690, v36, v37);
      sub_23DDC67C4();
      sub_23DDC67C4();
      if (v87 == v86)
        break;
      sub_23DCF59A8((uint64_t)v23, type metadata accessor for IndividualOvernightMetricChartPoint);
      v34 += v35;
      if (!--v33)
      {
        swift_bridgeObjectRelease();
        v38 = 1;
        v9 = v68;
        v7 = v69;
        v32 = v83;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    v32 = v83;
    sub_23DCFBB58((uint64_t)v23, (uint64_t)v83, type metadata accessor for IndividualOvernightMetricChartPoint);
    v38 = 0;
    v9 = v68;
    v7 = v69;
LABEL_8:
    v16 = v67;
    v17 = v66;
    v39 = (uint64_t)v81;
    v40 = v82;
    v19 = v64;
  }
  else
  {
    v38 = 1;
    v39 = (uint64_t)v81;
    v40 = v82;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v19 + 56))(v32, v38, 1, v40, v30);
  sub_23DD1710C((uint64_t)v32, v39);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (v41(v39, 1, v40) == 1)
  {
    sub_23DCFEA1C(v39, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint);
    v72 = sub_23DDC6200();
  }
  else
  {
    if ((*(_BYTE *)(v39 + *(int *)(v40 + 32) + 8) & 1) != 0)
    {
      v72 = sub_23DDC6200();
    }
    else
    {
      v42 = *(_QWORD *)(v72 + 72);
      v43 = *(_QWORD *)(v72 + 80);
      if ((sub_23DDC54B0() & 1) != 0)
      {
        v72 = v43;
        swift_retain();
      }
      else
      {
        swift_retain();
        v72 = v42;
      }
      v39 = (uint64_t)v81;
      v40 = v82;
    }
    sub_23DCF59A8(v39, type metadata accessor for IndividualOvernightMetricChartPoint);
  }
  v44 = (uint64_t)v32;
  v45 = v73;
  sub_23DD1710C(v44, v73);
  if (v41(v45, 1, v40) == 1)
  {
    sub_23DCFEA1C(v45, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint);
    LODWORD(v82) = 0;
  }
  else
  {
    v46 = v45;
    v47 = v70;
    sub_23DCFBB58(v46, v70, type metadata accessor for IndividualOvernightMetricChartPoint);
    v48 = v71;
    (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v71, *MEMORY[0x24BE401B8], v16);
    v49 = sub_23DDC54BC();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v48, v16);
    sub_23DCF59A8(v47, type metadata accessor for IndividualOvernightMetricChartPoint);
    LODWORD(v82) = v49 ^ 1;
  }
  v50 = v78;
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
  v52 = v74;
  v53 = v85;
  v51(v74, v84, v85);
  v54 = v79;
  v55 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 16);
  v56 = v76;
  v55(v76, v77, v7);
  v57 = v7;
  v58 = v75;
  v51(v75, (uint64_t)v52, v53);
  v55(v9, (uint64_t)v56, v57);
  v59 = SleepingSampleDataType.preferredImage.getter();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v57);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v53);
  v60 = v80;
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v80, v58, v53);
  v61 = (int *)type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  LOBYTE(v50) = v82;
  *(_BYTE *)(v60 + v61[5]) = v82 & 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v60 + v61[6], v9, v57);
  *(_QWORD *)(v60 + v61[7]) = v59;
  *(_QWORD *)(v60 + v61[8]) = v72;
  *(_BYTE *)(v60 + v61[9]) = (v50 & 1) == 0;
  return sub_23DCFEA1C((uint64_t)v83, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint);
}

uint64_t sub_23DD15EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, double);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a1;
  v29 = a2;
  v28 = sub_23DDC512C();
  v30 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v3;
  v4 = sub_23DDC53A8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - v9;
  v11 = (int *)type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *MEMORY[0x24BE3FE10];
  v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 104);
  v17(v10, v16, v4, v13);
  v18 = v3;
  v19 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v18, v31, v28);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v7, v16, v4);
  v20 = SleepingSampleDataType.preferredImage.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v21 = sub_23DDC6218();
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v15, v10, v4);
  v15[v11[5]] = 0;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v15[v11[6]], v27, v19);
  *(_QWORD *)&v15[v11[7]] = v20;
  *(_QWORD *)&v15[v11[8]] = v21;
  v15[v11[9]] = 0;
  sub_23DCFB328(0, &qword_256CFCC58, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v22 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_23DDC7F50;
  sub_23DCFBB58((uint64_t)v15, v23 + v22, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
  v24 = v29;
  sub_23DCF58EC(v31, v29, (uint64_t (*)(_QWORD))sub_23DD13DC0);
  *(_QWORD *)(v24 + *(int *)(type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0) + 20)) = v23;
  type metadata accessor for OvernightMetricsAxisConfiguration(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFCCC8);
}

uint64_t sub_23DD16134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;

  sub_23DDC53A8();
  sub_23DCF535C(&qword_254326690, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE48]);
  sub_23DDC67C4();
  sub_23DDC67C4();
  if (v9 == v8
    && (v4 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0),
        *(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v4 + 20)))
    && (v5 = v4, (sub_23DDC5108() & 1) != 0)
    && (sub_23DDC629C() & 1) != 0
    && (sub_23DDC61E8() & 1) != 0)
  {
    v6 = *(_BYTE *)(a1 + *(int *)(v5 + 36)) ^ *(_BYTE *)(a2 + *(int *)(v5 + 36)) ^ 1;
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_23DD16250(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD);
  char v40;
  char v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  _QWORD v45[2];
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;

  v50 = (char *)a1;
  v51 = a2;
  v49 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration(0);
  MEMORY[0x24BDAC7A8](v49);
  v48 = (char *)v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD13DC0(0);
  v45[1] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v46 = (uint64_t)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v47 = (char *)v45 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v45 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v45 - v11;
  v13 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v45 - v20;
  sub_23DD16954();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (uint64_t)&v24[*(int *)(v25 + 48)];
  sub_23DCF58EC((uint64_t)v50, (uint64_t)v24, type metadata accessor for OvernightMetricsAxisConfiguration);
  sub_23DCF58EC(v51, v26, type metadata accessor for OvernightMetricsAxisConfiguration);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v28 = (uint64_t)v47;
    v27 = (uint64_t)v48;
    v29 = v49;
    sub_23DCF58EC((uint64_t)v24, (uint64_t)v18, type metadata accessor for OvernightMetricsAxisConfiguration);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_23DCFBB58(v26, v27, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
      sub_23DDC512C();
      sub_23DCF535C(&qword_256CFCC60, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
      v30 = sub_23DDC66C8();
      v31 = v28;
      sub_23DCF58EC((uint64_t)v18, v28, (uint64_t (*)(_QWORD))sub_23DD13DC0);
      v32 = v46;
      sub_23DCF58EC(v27, v46, (uint64_t (*)(_QWORD))sub_23DD13DC0);
      if ((v30 & 1) != 0)
      {
        v33 = sub_23DDC66C8();
        sub_23DCF59A8(v32, (uint64_t (*)(_QWORD))sub_23DD13DC0);
        sub_23DCF59A8(v31, (uint64_t (*)(_QWORD))sub_23DD13DC0);
        if ((v33 & 1) != 0
          && (sub_23DD411E8(*(_QWORD *)&v18[*(int *)(v29 + 20)], *(_QWORD *)(v27 + *(int *)(v29 + 20))) & 1) != 0)
        {
          v34 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration;
          sub_23DCF59A8(v27, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
          v35 = (uint64_t)v18;
LABEL_15:
          sub_23DCF59A8(v35, v34);
          v38 = 1;
LABEL_21:
          v39 = type metadata accessor for OvernightMetricsAxisConfiguration;
          goto LABEL_22;
        }
      }
      else
      {
        sub_23DCF59A8(v32, (uint64_t (*)(_QWORD))sub_23DD13DC0);
        sub_23DCF59A8(v31, (uint64_t (*)(_QWORD))sub_23DD13DC0);
      }
      v42 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration;
      sub_23DCF59A8(v27, type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration);
      v43 = (uint64_t)v18;
      goto LABEL_20;
    }
    v36 = type metadata accessor for OvernightMetricsAxisConfiguration.SevenDayConfiguration;
    v37 = (uint64_t)v18;
  }
  else
  {
    v51 = v13;
    sub_23DCF58EC((uint64_t)v24, (uint64_t)v21, type metadata accessor for OvernightMetricsAxisConfiguration);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v50 = v24;
      sub_23DCFBB58(v26, (uint64_t)v15, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration);
      sub_23DDC512C();
      sub_23DCF535C(&qword_256CFCC60, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
      v40 = sub_23DDC66C8();
      sub_23DCF58EC((uint64_t)v21, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DD13DC0);
      sub_23DCF58EC((uint64_t)v15, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DD13DC0);
      if ((v40 & 1) != 0)
      {
        v41 = sub_23DDC66C8();
        sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DD13DC0);
        sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DD13DC0);
        v24 = v50;
        if ((v41 & 1) != 0
          && (sub_23DD40FA0(*(_QWORD *)&v21[*(int *)(v51 + 20)], *(_QWORD *)&v15[*(int *)(v51 + 20)]) & 1) != 0)
        {
          v34 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration;
          sub_23DCF59A8((uint64_t)v15, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration);
          v35 = (uint64_t)v21;
          goto LABEL_15;
        }
      }
      else
      {
        sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DD13DC0);
        sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DD13DC0);
        v24 = v50;
      }
      v42 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration;
      sub_23DCF59A8((uint64_t)v15, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration);
      v43 = (uint64_t)v21;
LABEL_20:
      sub_23DCF59A8(v43, v42);
      v38 = 0;
      goto LABEL_21;
    }
    v36 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration;
    v37 = (uint64_t)v21;
  }
  sub_23DCF59A8(v37, v36);
  v38 = 0;
  v39 = (uint64_t (*)(_QWORD))sub_23DD16954;
LABEL_22:
  sub_23DCF59A8((uint64_t)v24, v39);
  return v38;
}

uint64_t sub_23DD167B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t (*v14)(_QWORD);
  uint64_t (*v15)(_QWORD, _QWORD);
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(_QWORD, _QWORD);

  v21 = a4;
  sub_23DD13DC0(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v20 - v11;
  sub_23DDC512C();
  sub_23DCF535C(&qword_256CFCC60, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  v13 = sub_23DDC66C8();
  sub_23DCF58EC(a1, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DD13DC0);
  sub_23DCF58EC(a2, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DD13DC0);
  if ((v13 & 1) == 0)
  {
    sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DD13DC0);
    sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DD13DC0);
    goto LABEL_5;
  }
  v14 = a3;
  v15 = v21;
  v16 = sub_23DDC66C8();
  sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DD13DC0);
  sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DD13DC0);
  if ((v16 & 1) == 0)
  {
LABEL_5:
    v18 = 0;
    return v18 & 1;
  }
  v17 = v14(0);
  v18 = v15(*(_QWORD *)(a1 + *(int *)(v17 + 20)), *(_QWORD *)(a2 + *(int *)(v17 + 20)));
  return v18 & 1;
}

void sub_23DD16954()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFCC68)
  {
    type metadata accessor for OvernightMetricsAxisConfiguration(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFCC68);
  }
}

uint64_t sub_23DD169B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_23DD158A8(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t sub_23DD169BC(uint64_t a1, uint64_t a2, void (*a3)(char *, char *), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *);
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  int64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;

  v65 = a3;
  v66 = a4;
  v6 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  v64 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v71 = (uint64_t)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v59 = (uint64_t)&v54 - v9;
  sub_23DCFB328(0, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v58 = (char *)&v54 - v14;
  v15 = sub_23DDC512C();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v62 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v57 = (char *)&v54 - v19;
  v73 = sub_23DDC53A8();
  v20 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v72 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v60 = (char *)&v54 - v23;
  sub_23DD170A0();
  v63 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v56 = (char *)&v54 - v28;
  MEMORY[0x24BDAC7A8](v29);
  v55 = (uint64_t)&v54 - v30;
  v31 = *(_QWORD *)(a2 + 16);
  v68 = *(_QWORD *)(a1 + 16);
  v69 = (char *)v31;
  if (v31 >= v68)
    v32 = v68;
  else
    v32 = v31;
  v74 = MEMORY[0x24BEE4AF8];
  sub_23DD92BA8(0, v32, 0);
  v67 = a2;
  v70 = v32;
  if (v32)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33 = 0;
    v61 = a1;
    while ((char *)v68 != v33)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v72, a1+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * (_QWORD)v33, v73);
      if (v69 == v33)
        goto LABEL_34;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16))(v12, a2+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * (_QWORD)v33, v15);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15) == 1)
        goto LABEL_37;
      v34 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 32);
      v35 = v62;
      v34(v62, v12, v15);
      v36 = &v26[*(int *)(v63 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v26, v72, v73);
      v34(v36, (uint64_t)v35, v15);
      v65(v26, v36);
      sub_23DCF59A8((uint64_t)v26, (uint64_t (*)(_QWORD))sub_23DD170A0);
      v37 = v74;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23DD92BA8(0, *(_QWORD *)(v37 + 16) + 1, 1);
        v37 = v74;
      }
      v39 = *(_QWORD *)(v37 + 16);
      v38 = *(_QWORD *)(v37 + 24);
      if (v39 >= v38 >> 1)
      {
        sub_23DD92BA8(v38 > 1, v39 + 1, 1);
        v37 = v74;
      }
      ++v33;
      *(_QWORD *)(v37 + 16) = v39 + 1;
      sub_23DCFBB58(v71, v37+ ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))+ *(_QWORD *)(v64 + 72) * v39, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      a1 = v61;
      a2 = v67;
      if ((char *)v70 == v33)
        goto LABEL_16;
    }
    __break(1u);
LABEL_34:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_16:
    v40 = v68;
    v12 = v70;
    if (v68 <= (unint64_t)v69)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v74;
    }
    v41 = v69;
    if (v70 > (uint64_t)v69)
      v41 = (char *)v70;
    v72 = v41;
    v42 = v57;
    while (v40 != v12)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v60, a1+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v12, v73);
      if (v69 == (char *)v12)
      {
        v43 = (uint64_t)v58;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v58, 1, 1, v15);
LABEL_31:
        (*(void (**)(char *, uint64_t))(v20 + 8))(v60, v73);
        sub_23DCFEA1C(v43, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
        goto LABEL_32;
      }
      v43 = (uint64_t)v58;
      if (v72 == (char *)v12)
        goto LABEL_36;
      (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v58, a2+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v12, v15);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v43, 0, 1, v15);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v43, 1, v15) == 1)
        goto LABEL_31;
      v70 = v12;
      v44 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 32);
      v44(v42, v43, v15);
      v45 = v63;
      v46 = (uint64_t)v56;
      v47 = &v56[*(int *)(v63 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v56, v60, v73);
      v44(v47, (uint64_t)v42, v15);
      v48 = v55;
      sub_23DCFBB58(v46, v55, (uint64_t (*)(_QWORD))sub_23DD170A0);
      v65((char *)v48, (char *)(v48 + *(int *)(v45 + 48)));
      sub_23DCF59A8(v48, (uint64_t (*)(_QWORD))sub_23DD170A0);
      v49 = v74;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23DD92BA8(0, *(_QWORD *)(v49 + 16) + 1, 1);
        v49 = v74;
      }
      v51 = *(_QWORD *)(v49 + 16);
      v50 = *(_QWORD *)(v49 + 24);
      v52 = v70;
      if (v51 >= v50 >> 1)
      {
        sub_23DD92BA8(v50 > 1, v51 + 1, 1);
        v49 = v74;
      }
      v12 = v52 + 1;
      *(_QWORD *)(v49 + 16) = v51 + 1;
      sub_23DCFBB58(v59, v49+ ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))+ *(_QWORD *)(v64 + 72) * v51, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      a2 = v67;
      v40 = v68;
      if (v68 == v12)
        goto LABEL_32;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  (*(void (**)(char *, uint64_t))(v20 + 8))(v72, v73);
  result = sub_23DCFEA1C(v12, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  __break(1u);
  return result;
}

void sub_23DD170A0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2543266A8)
  {
    sub_23DDC53A8();
    sub_23DDC512C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2543266A8);
  }
}

uint64_t sub_23DD1710C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_23DD17168(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_23DDC53A8();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[6];
    *((_BYTE *)v4 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23DDC512C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    *(_QWORD *)((char *)v4 + v12) = *(_QWORD *)((char *)a2 + v12);
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_23DD17248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  return swift_release();
}

uint64_t sub_23DD172C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23DD1737C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_23DD17450(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_23DD174FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_release();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_release();
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_23DD175BC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD175C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_23DDC53A8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_23DDC512C();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_23DD17670()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD1767C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_23DDC53A8();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_23DDC512C();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_23DD17720()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23DDC53A8();
  if (v1 <= 0x3F)
  {
    result = sub_23DDC512C();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *sub_23DD177BC(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  unsigned int (*v31)(char *, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD, uint64_t, int *);
  uint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  void (*v80)(char *, char *, uint64_t);
  int *v81;
  _QWORD *v82;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v19 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_23DDC512C();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_23DCF9010();
    v78 = v9;
    v10 = v7;
    v80 = v8;
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    v11 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&a1[v11[5]] = *(_QWORD *)&a2[v11[5]];
    *(_QWORD *)&a1[v11[6]] = *(_QWORD *)&a2[v11[6]];
    v79 = v11;
    *(_QWORD *)&a1[v11[7]] = *(_QWORD *)&a2[v11[7]];
    v12 = a3[5];
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = *(_QWORD *)&a2[v12];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15)
    {
      v16 = *((_QWORD *)v14 + 1);
      *(_QWORD *)v13 = v15;
      *((_QWORD *)v13 + 1) = v16;
      v17 = *((_OWORD *)v14 + 2);
      *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
      *((_OWORD *)v13 + 2) = v17;
      *((_OWORD *)v13 + 3) = *((_OWORD *)v14 + 3);
      *((_QWORD *)v13 + 8) = *((_QWORD *)v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v20 = *((_OWORD *)v14 + 3);
      *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
      *((_OWORD *)v13 + 3) = v20;
      *((_QWORD *)v13 + 8) = *((_QWORD *)v14 + 8);
      v21 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v21;
    }
    v22 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v22] = a2[v22];
    v23 = a3[9];
    v81 = a3;
    v82 = a1;
    a1[a3[8]] = a2[a3[8]];
    v24 = &a1[v23];
    v25 = &a2[v23];
    *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
    v26 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    v27 = v26[5];
    v28 = &v24[v27];
    v29 = &v25[v27];
    v30 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v77 = *((_QWORD *)v30 - 1);
    v31 = *(unsigned int (**)(char *, uint64_t, int *))(v77 + 48);
    swift_bridgeObjectRetain();
    if (v31(v29, 1, v30))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v80(v28, v29, v10);
      v33 = v30[5];
      v34 = &v28[v33];
      v35 = &v29[v33];
      v80(&v28[v33], &v29[v33], v10);
      v80(&v34[*(int *)(v78 + 36)], &v35[*(int *)(v78 + 36)], v10);
      *(_QWORD *)&v34[v79[5]] = *(_QWORD *)&v35[v79[5]];
      *(_QWORD *)&v34[v79[6]] = *(_QWORD *)&v35[v79[6]];
      *(_QWORD *)&v34[v79[7]] = *(_QWORD *)&v35[v79[7]];
      v36 = v30[6];
      v37 = &v28[v36];
      v38 = &v29[v36];
      v37[16] = v38[16];
      *(_OWORD *)v37 = *(_OWORD *)v38;
      v28[v30[7]] = v29[v30[7]];
      v28[v30[8]] = v29[v30[8]];
      v28[v30[9]] = v29[v30[9]];
      v39 = v30[10];
      v40 = &v28[v39];
      v41 = &v29[v39];
      v42 = *((_QWORD *)v41 + 1);
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_QWORD *)v40 + 1) = v42;
      v43 = v30[11];
      v44 = &v28[v43];
      v45 = &v29[v43];
      v46 = *((_QWORD *)v45 + 1);
      *(_QWORD *)v44 = *(_QWORD *)v45;
      *((_QWORD *)v44 + 1) = v46;
      v47 = *(void (**)(char *, _QWORD, uint64_t, int *))(v77 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47(v28, 0, 1, v30);
    }
    *(_OWORD *)&v24[v26[6]] = *(_OWORD *)&v25[v26[6]];
    v48 = v26[7];
    v49 = &v24[v48];
    v50 = &v25[v48];
    v51 = *((_OWORD *)v50 + 1);
    *(_OWORD *)v49 = *(_OWORD *)v50;
    *((_OWORD *)v49 + 1) = v51;
    *((_QWORD *)v49 + 10) = *((_QWORD *)v50 + 10);
    v52 = *((_OWORD *)v50 + 4);
    v53 = *((_OWORD *)v50 + 2);
    *((_OWORD *)v49 + 3) = *((_OWORD *)v50 + 3);
    *((_OWORD *)v49 + 4) = v52;
    *((_OWORD *)v49 + 2) = v53;
    *(_QWORD *)&v24[v26[8]] = *(_QWORD *)&v25[v26[8]];
    *(_QWORD *)&v24[v26[9]] = *(_QWORD *)&v25[v26[9]];
    v54 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    v55 = &v24[v54];
    v56 = &v25[v54];
    v57 = *((_QWORD *)v56 + 1);
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *((_QWORD *)v55 + 1) = v57;
    v58 = *((_QWORD *)v56 + 3);
    *((_QWORD *)v55 + 2) = *((_QWORD *)v56 + 2);
    *((_QWORD *)v55 + 3) = v58;
    *((_QWORD *)v55 + 4) = *((_QWORD *)v56 + 4);
    *(_OWORD *)(v55 + 40) = *(_OWORD *)(v56 + 40);
    *(_OWORD *)(v55 + 56) = *(_OWORD *)(v56 + 56);
    *(_OWORD *)(v55 + 72) = *(_OWORD *)(v56 + 72);
    *(_OWORD *)(v55 + 88) = *(_OWORD *)(v56 + 88);
    *(_OWORD *)(v55 + 104) = *(_OWORD *)(v56 + 104);
    v59 = v81[10];
    v60 = (char *)v82 + v59;
    v61 = &a2[v59];
    v62 = *(_QWORD *)&a2[v59];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v62)
    {
      v63 = *((_QWORD *)v61 + 1);
      v64 = *((_QWORD *)v61 + 2);
      *(_QWORD *)v60 = v62;
      *((_QWORD *)v60 + 1) = v63;
      *((_QWORD *)v60 + 2) = v64;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v60 = *(_OWORD *)v61;
      *((_QWORD *)v60 + 2) = *((_QWORD *)v61 + 2);
    }
    v60[24] = v61[24];
    v60[32] = v61[32];
    v65 = *((_QWORD *)v61 + 6);
    *((_QWORD *)v60 + 5) = *((_QWORD *)v61 + 5);
    *((_QWORD *)v60 + 6) = v65;
    v60[56] = v61[56];
    v66 = *((_QWORD *)v61 + 9);
    *((_QWORD *)v60 + 8) = *((_QWORD *)v61 + 8);
    *((_QWORD *)v60 + 9) = v66;
    *((_QWORD *)v60 + 10) = *((_QWORD *)v61 + 10);
    v67 = *(_OWORD *)(v61 + 88);
    *(_OWORD *)(v60 + 104) = *(_OWORD *)(v61 + 104);
    *(_OWORD *)(v60 + 88) = v67;
    v68 = *(_OWORD *)(v61 + 120);
    v69 = *(_OWORD *)(v61 + 136);
    *(_OWORD *)(v60 + 152) = *(_OWORD *)(v61 + 152);
    *(_OWORD *)(v60 + 136) = v69;
    *(_OWORD *)(v60 + 120) = v68;
    v70 = *((_QWORD *)v61 + 22);
    *((_QWORD *)v60 + 21) = *((_QWORD *)v61 + 21);
    *((_QWORD *)v60 + 22) = v70;
    v72 = *((_QWORD *)v61 + 23);
    v71 = *((_QWORD *)v61 + 24);
    v60[200] = v61[200];
    *((_QWORD *)v60 + 23) = v72;
    *((_QWORD *)v60 + 24) = v71;
    v60[201] = v61[201];
    v73 = *((_QWORD *)v61 + 27);
    *((_QWORD *)v60 + 26) = *((_QWORD *)v61 + 26);
    *((_QWORD *)v60 + 27) = v73;
    v74 = *((_QWORD *)v61 + 29);
    *((_QWORD *)v60 + 28) = *((_QWORD *)v61 + 28);
    *((_QWORD *)v60 + 29) = v74;
    *((_QWORD *)v60 + 30) = *((_QWORD *)v61 + 30);
    v60[248] = v61[248];
    v75 = *((_QWORD *)v61 + 33);
    *((_QWORD *)v60 + 32) = *((_QWORD *)v61 + 32);
    *((_QWORD *)v60 + 33) = v75;
    *((_QWORD *)v60 + 34) = *((_QWORD *)v61 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v19 = v82;
  }
  swift_retain();
  return v19;
}

uint64_t sub_23DD17D24(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_23DDC512C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  sub_23DCF9010();
  v7 = v6;
  v5(a1 + *(int *)(v6 + 36), v4);
  type metadata accessor for IndividualOvernightMetricChartPointCollection();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[5]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v8 = a1 + a2[9];
  swift_bridgeObjectRelease();
  v9 = v8 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v10 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v5(v9, v4);
    v11 = v9 + *(int *)(v10 + 20);
    v5(v11, v4);
    v5(v11 + *(int *)(v7 + 36), v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[10]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_23DD17F58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  unsigned int (*v28)(char *, uint64_t, int *);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, int *);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  void (*v77)(char *, char *, uint64_t);
  int *v78;
  uint64_t v79;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_23DCF9010();
  v75 = v8;
  v9 = v6;
  v77 = (void (*)(char *, char *, uint64_t))v7;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v10 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)(a1 + v10[5]) = *(_QWORD *)(a2 + v10[5]);
  *(_QWORD *)(a1 + v10[6]) = *(_QWORD *)(a2 + v10[6]);
  v76 = v10;
  *(_QWORD *)(a1 + v10[7]) = *(_QWORD *)(a2 + v10[7]);
  v11 = a3[5];
  v79 = a1;
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)v12 = v14;
    *(_QWORD *)(v12 + 8) = v15;
    v16 = *(_OWORD *)(v13 + 32);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
    *(_OWORD *)(v12 + 32) = v16;
    *(_OWORD *)(v12 + 48) = *(_OWORD *)(v13 + 48);
    *(_QWORD *)(v12 + 64) = *(_QWORD *)(v13 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(v13 + 48);
    *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
    *(_OWORD *)(v12 + 48) = v17;
    *(_QWORD *)(v12 + 64) = *(_QWORD *)(v13 + 64);
    v18 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v18;
  }
  v19 = a3[7];
  *(_BYTE *)(v79 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(v79 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[9];
  v78 = a3;
  *(_BYTE *)(v79 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v21 = v79 + v20;
  v22 = a2 + v20;
  *(_QWORD *)(v79 + v20) = *(_QWORD *)(a2 + v20);
  v23 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v24 = v23[5];
  v25 = (char *)(v21 + v24);
  v26 = (char *)(v22 + v24);
  v27 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v74 = *((_QWORD *)v27 - 1);
  v28 = *(unsigned int (**)(char *, uint64_t, int *))(v74 + 48);
  swift_bridgeObjectRetain();
  if (v28(v26, 1, v27))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v77(v25, v26, v9);
    v30 = v27[5];
    v31 = &v25[v30];
    v32 = &v26[v30];
    v77(&v25[v30], &v26[v30], v9);
    v77(&v31[*(int *)(v75 + 36)], &v32[*(int *)(v75 + 36)], v9);
    *(_QWORD *)&v31[v76[5]] = *(_QWORD *)&v32[v76[5]];
    *(_QWORD *)&v31[v76[6]] = *(_QWORD *)&v32[v76[6]];
    *(_QWORD *)&v31[v76[7]] = *(_QWORD *)&v32[v76[7]];
    v33 = v27[6];
    v34 = &v25[v33];
    v35 = &v26[v33];
    v34[16] = v35[16];
    *(_OWORD *)v34 = *(_OWORD *)v35;
    v25[v27[7]] = v26[v27[7]];
    v25[v27[8]] = v26[v27[8]];
    v25[v27[9]] = v26[v27[9]];
    v36 = v27[10];
    v37 = &v25[v36];
    v38 = &v26[v36];
    v39 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = v39;
    v40 = v27[11];
    v41 = &v25[v40];
    v42 = &v26[v40];
    v43 = *((_QWORD *)v42 + 1);
    *(_QWORD *)v41 = *(_QWORD *)v42;
    *((_QWORD *)v41 + 1) = v43;
    v44 = *(void (**)(char *, _QWORD, uint64_t, int *))(v74 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44(v25, 0, 1, v27);
  }
  *(_OWORD *)(v21 + v23[6]) = *(_OWORD *)(v22 + v23[6]);
  v45 = v23[7];
  v46 = v21 + v45;
  v47 = v22 + v45;
  v48 = *(_OWORD *)(v47 + 16);
  *(_OWORD *)v46 = *(_OWORD *)v47;
  *(_OWORD *)(v46 + 16) = v48;
  *(_QWORD *)(v46 + 80) = *(_QWORD *)(v47 + 80);
  v49 = *(_OWORD *)(v47 + 64);
  v50 = *(_OWORD *)(v47 + 32);
  *(_OWORD *)(v46 + 48) = *(_OWORD *)(v47 + 48);
  *(_OWORD *)(v46 + 64) = v49;
  *(_OWORD *)(v46 + 32) = v50;
  *(_QWORD *)(v21 + v23[8]) = *(_QWORD *)(v22 + v23[8]);
  *(_QWORD *)(v21 + v23[9]) = *(_QWORD *)(v22 + v23[9]);
  v51 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v52 = v21 + v51;
  v53 = v22 + v51;
  v54 = *(_QWORD *)(v53 + 8);
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *(_QWORD *)(v52 + 8) = v54;
  v55 = *(_QWORD *)(v53 + 24);
  *(_QWORD *)(v52 + 16) = *(_QWORD *)(v53 + 16);
  *(_QWORD *)(v52 + 24) = v55;
  *(_QWORD *)(v52 + 32) = *(_QWORD *)(v53 + 32);
  *(_OWORD *)(v52 + 40) = *(_OWORD *)(v53 + 40);
  *(_OWORD *)(v52 + 56) = *(_OWORD *)(v53 + 56);
  *(_OWORD *)(v52 + 72) = *(_OWORD *)(v53 + 72);
  *(_OWORD *)(v52 + 88) = *(_OWORD *)(v53 + 88);
  *(_OWORD *)(v52 + 104) = *(_OWORD *)(v53 + 104);
  v56 = v78[10];
  v57 = v79 + v56;
  v58 = a2 + v56;
  v59 = *(_QWORD *)(a2 + v56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v59)
  {
    v60 = *(_QWORD *)(v58 + 8);
    v61 = *(_QWORD *)(v58 + 16);
    *(_QWORD *)v57 = v59;
    *(_QWORD *)(v57 + 8) = v60;
    *(_QWORD *)(v57 + 16) = v61;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v57 = *(_OWORD *)v58;
    *(_QWORD *)(v57 + 16) = *(_QWORD *)(v58 + 16);
  }
  *(_BYTE *)(v57 + 24) = *(_BYTE *)(v58 + 24);
  *(_BYTE *)(v57 + 32) = *(_BYTE *)(v58 + 32);
  v62 = *(_QWORD *)(v58 + 48);
  *(_QWORD *)(v57 + 40) = *(_QWORD *)(v58 + 40);
  *(_QWORD *)(v57 + 48) = v62;
  *(_BYTE *)(v57 + 56) = *(_BYTE *)(v58 + 56);
  v63 = *(_QWORD *)(v58 + 72);
  *(_QWORD *)(v57 + 64) = *(_QWORD *)(v58 + 64);
  *(_QWORD *)(v57 + 72) = v63;
  *(_QWORD *)(v57 + 80) = *(_QWORD *)(v58 + 80);
  v64 = *(_OWORD *)(v58 + 88);
  *(_OWORD *)(v57 + 104) = *(_OWORD *)(v58 + 104);
  *(_OWORD *)(v57 + 88) = v64;
  v65 = *(_OWORD *)(v58 + 120);
  v66 = *(_OWORD *)(v58 + 136);
  *(_OWORD *)(v57 + 152) = *(_OWORD *)(v58 + 152);
  *(_OWORD *)(v57 + 136) = v66;
  *(_OWORD *)(v57 + 120) = v65;
  v67 = *(_QWORD *)(v58 + 176);
  *(_QWORD *)(v57 + 168) = *(_QWORD *)(v58 + 168);
  *(_QWORD *)(v57 + 176) = v67;
  v69 = *(_QWORD *)(v58 + 184);
  v68 = *(_QWORD *)(v58 + 192);
  *(_BYTE *)(v57 + 200) = *(_BYTE *)(v58 + 200);
  *(_QWORD *)(v57 + 184) = v69;
  *(_QWORD *)(v57 + 192) = v68;
  *(_BYTE *)(v57 + 201) = *(_BYTE *)(v58 + 201);
  v70 = *(_QWORD *)(v58 + 216);
  *(_QWORD *)(v57 + 208) = *(_QWORD *)(v58 + 208);
  *(_QWORD *)(v57 + 216) = v70;
  v71 = *(_QWORD *)(v58 + 232);
  *(_QWORD *)(v57 + 224) = *(_QWORD *)(v58 + 224);
  *(_QWORD *)(v57 + 232) = v71;
  *(_QWORD *)(v57 + 240) = *(_QWORD *)(v58 + 240);
  *(_BYTE *)(v57 + 248) = *(_BYTE *)(v58 + 248);
  v72 = *(_QWORD *)(v58 + 264);
  *(_QWORD *)(v57 + 256) = *(_QWORD *)(v58 + 256);
  *(_QWORD *)(v57 + 264) = v72;
  *(_QWORD *)(v57 + 272) = *(_QWORD *)(v58 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v79;
}

uint64_t sub_23DD1849C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, int *);
  int v30;
  int v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void (*v48)(char *, _QWORD, uint64_t, int *);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  int *v88;
  int *v89;

  v6 = sub_23DDC512C();
  v84 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 24);
  v7(a1, a2, v6);
  sub_23DCF9010();
  v85 = v8;
  v9 = v6;
  v82 = (void (*)(char *, char *, uint64_t))v7;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v10 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)(a1 + v10[5]) = *(_QWORD *)(a2 + v10[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v10[6]) = *(_QWORD *)(a2 + v10[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v86 = v10;
  *(_QWORD *)(a1 + v10[7]) = *(_QWORD *)(a2 + v10[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = a3[5];
  v12 = (_QWORD *)(a1 + v11);
  v13 = a2 + v11;
  v14 = *(_QWORD *)(a2 + v11);
  if (*(_QWORD *)(a1 + v11))
  {
    if (v14)
    {
      *v12 = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12[1] = *(_QWORD *)(v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12[2] = *(_QWORD *)(v13 + 16);
      v12[3] = *(_QWORD *)(v13 + 24);
      v12[4] = *(_QWORD *)(v13 + 32);
      v12[5] = *(_QWORD *)(v13 + 40);
      v12[6] = *(_QWORD *)(v13 + 48);
      v12[7] = *(_QWORD *)(v13 + 56);
      v12[8] = *(_QWORD *)(v13 + 64);
    }
    else
    {
      sub_23DCF5648(a1 + v11);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      v16 = *(_OWORD *)(v13 + 32);
      v15 = *(_OWORD *)(v13 + 48);
      v17 = *(_OWORD *)(v13 + 16);
      v12[8] = *(_QWORD *)(v13 + 64);
      *((_OWORD *)v12 + 2) = v16;
      *((_OWORD *)v12 + 3) = v15;
      *((_OWORD *)v12 + 1) = v17;
    }
  }
  else if (v14)
  {
    *v12 = v14;
    v12[1] = *(_QWORD *)(v13 + 8);
    v12[2] = *(_QWORD *)(v13 + 16);
    v12[3] = *(_QWORD *)(v13 + 24);
    v12[4] = *(_QWORD *)(v13 + 32);
    v12[5] = *(_QWORD *)(v13 + 40);
    v12[6] = *(_QWORD *)(v13 + 48);
    v12[7] = *(_QWORD *)(v13 + 56);
    v12[8] = *(_QWORD *)(v13 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v18 = *(_OWORD *)(v13 + 16);
    v19 = *(_OWORD *)(v13 + 32);
    v20 = *(_OWORD *)(v13 + 48);
    v12[8] = *(_QWORD *)(v13 + 64);
    *((_OWORD *)v12 + 2) = v19;
    *((_OWORD *)v12 + 3) = v20;
    *((_OWORD *)v12 + 1) = v18;
  }
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v89 = a3;
  v21 = a3[9];
  v22 = a1 + v21;
  v87 = a2;
  v23 = (_QWORD *)(a2 + v21);
  *(_QWORD *)(a1 + v21) = *v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v88 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v24 = v88[5];
  v25 = (char *)(v22 + v24);
  v26 = (char *)v23 + v24;
  v27 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v28 = *((_QWORD *)v27 - 1);
  v29 = *(uint64_t (**)(char *, uint64_t, int *))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (v31)
    {
      v32 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_13:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v32);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      goto LABEL_16;
    }
    v83 = a1;
    v34 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
    v34(v25, v26, v9);
    v35 = v27[5];
    v36 = &v25[v35];
    v37 = &v26[v35];
    v34(&v25[v35], &v26[v35], v9);
    v34(&v36[*(int *)(v85 + 36)], &v37[*(int *)(v85 + 36)], v9);
    *(_QWORD *)&v36[v86[5]] = *(_QWORD *)&v37[v86[5]];
    *(_QWORD *)&v36[v86[6]] = *(_QWORD *)&v37[v86[6]];
    *(_QWORD *)&v36[v86[7]] = *(_QWORD *)&v37[v86[7]];
    v38 = v27[6];
    v39 = &v25[v38];
    v40 = &v26[v38];
    v41 = v40[16];
    *(_OWORD *)v39 = *(_OWORD *)v40;
    v39[16] = v41;
    v25[v27[7]] = v26[v27[7]];
    v25[v27[8]] = v26[v27[8]];
    v25[v27[9]] = v26[v27[9]];
    v42 = v27[10];
    v43 = &v25[v42];
    v44 = &v26[v42];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
    v45 = v27[11];
    v46 = &v25[v45];
    v47 = &v26[v45];
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
    v48 = *(void (**)(char *, _QWORD, uint64_t, int *))(v28 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v25, 0, 1, v27);
    a1 = v83;
  }
  else
  {
    if (v31)
    {
      sub_23DCF59A8((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v32 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_13;
    }
    v82(v25, v26, v9);
    v49 = v27[5];
    v50 = &v25[v49];
    v51 = &v26[v49];
    v82(&v25[v49], &v26[v49], v9);
    v82(&v50[*(int *)(v85 + 36)], &v51[*(int *)(v85 + 36)], v9);
    *(_QWORD *)&v50[v86[5]] = *(_QWORD *)&v51[v86[5]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v50[v86[6]] = *(_QWORD *)&v51[v86[6]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v50[v86[7]] = *(_QWORD *)&v51[v86[7]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v52 = v27[6];
    v53 = &v25[v52];
    v54 = &v26[v52];
    v55 = *(_OWORD *)v54;
    v53[16] = v54[16];
    *(_OWORD *)v53 = v55;
    v25[v27[7]] = v26[v27[7]];
    v25[v27[8]] = v26[v27[8]];
    v25[v27[9]] = v26[v27[9]];
    v56 = v27[10];
    v57 = &v25[v56];
    v58 = &v26[v56];
    *(_QWORD *)v57 = *(_QWORD *)v58;
    *((_QWORD *)v57 + 1) = *((_QWORD *)v58 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v59 = v27[11];
    v60 = &v25[v59];
    v61 = &v26[v59];
    *(_QWORD *)v60 = *(_QWORD *)v61;
    *((_QWORD *)v60 + 1) = *((_QWORD *)v61 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_16:
  v62 = v88[6];
  v63 = (_QWORD *)(v22 + v62);
  v64 = (_QWORD *)((char *)v23 + v62);
  *v63 = *v64;
  v63[1] = v64[1];
  v65 = v88[7];
  v66 = v22 + v65;
  v67 = (char *)v23 + v65;
  *(_QWORD *)v66 = *(_QWORD *)v67;
  v68 = *((_QWORD *)v67 + 1);
  *(_BYTE *)(v66 + 16) = v67[16];
  *(_QWORD *)(v66 + 8) = v68;
  *(_QWORD *)(v66 + 24) = *((_QWORD *)v67 + 3);
  *(_QWORD *)(v66 + 32) = *((_QWORD *)v67 + 4);
  *(_QWORD *)(v66 + 40) = *((_QWORD *)v67 + 5);
  *(_QWORD *)(v66 + 48) = *((_QWORD *)v67 + 6);
  *(_QWORD *)(v66 + 56) = *((_QWORD *)v67 + 7);
  *(_QWORD *)(v66 + 64) = *((_QWORD *)v67 + 8);
  *(_QWORD *)(v66 + 72) = *((_QWORD *)v67 + 9);
  *(_QWORD *)(v66 + 80) = *((_QWORD *)v67 + 10);
  *(_QWORD *)(v22 + v88[8]) = *(_QWORD *)((char *)v23 + v88[8]);
  *(_QWORD *)(v22 + v88[9]) = *(_QWORD *)((char *)v23 + v88[9]);
  v69 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v70 = (_QWORD *)(v22 + v69);
  v71 = (_QWORD *)((char *)v23 + v69);
  *v70 = *(_QWORD *)((char *)v23 + v69);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v70[1] = v71[1];
  v70[2] = v71[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v70[3] = v71[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v70[4] = v71[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v70[5] = v71[5];
  v70[6] = v71[6];
  v70[7] = v71[7];
  v70[8] = v71[8];
  v70[9] = v71[9];
  v70[10] = v71[10];
  v70[11] = v71[11];
  v70[12] = v71[12];
  v70[13] = v71[13];
  v70[14] = v71[14];
  v72 = v89[10];
  v73 = a1 + v72;
  v74 = (__int128 *)(v87 + v72);
  v75 = *(_QWORD *)(v87 + v72);
  if (*(_QWORD *)(a1 + v72))
  {
    if (v75)
    {
      *(_QWORD *)v73 = v75;
      swift_retain();
      swift_release();
      *(_QWORD *)(v73 + 8) = *((_QWORD *)v74 + 1);
      swift_retain();
      swift_release();
      *(_QWORD *)(v73 + 16) = *((_QWORD *)v74 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_23DCF9EB8(a1 + v72);
      v76 = *((_QWORD *)v74 + 2);
      *(_OWORD *)v73 = *v74;
      *(_QWORD *)(v73 + 16) = v76;
    }
  }
  else if (v75)
  {
    *(_QWORD *)v73 = v75;
    *(_QWORD *)(v73 + 8) = *((_QWORD *)v74 + 1);
    *(_QWORD *)(v73 + 16) = *((_QWORD *)v74 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v77 = *v74;
    *(_QWORD *)(v73 + 16) = *((_QWORD *)v74 + 2);
    *(_OWORD *)v73 = v77;
  }
  *(_BYTE *)(v73 + 24) = *((_BYTE *)v74 + 24);
  *(_BYTE *)(v73 + 32) = *((_BYTE *)v74 + 32);
  *(_QWORD *)(v73 + 40) = *((_QWORD *)v74 + 5);
  swift_retain();
  swift_release();
  v78 = *((_QWORD *)v74 + 6);
  *(_BYTE *)(v73 + 56) = *((_BYTE *)v74 + 56);
  *(_QWORD *)(v73 + 48) = v78;
  *(_QWORD *)(v73 + 64) = *((_QWORD *)v74 + 8);
  *(_QWORD *)(v73 + 72) = *((_QWORD *)v74 + 9);
  swift_retain();
  swift_release();
  *(_QWORD *)(v73 + 80) = *((_QWORD *)v74 + 10);
  swift_retain();
  swift_release();
  *(_QWORD *)(v73 + 88) = *((_QWORD *)v74 + 11);
  v79 = *((_QWORD *)v74 + 12);
  *(_BYTE *)(v73 + 104) = *((_BYTE *)v74 + 104);
  *(_QWORD *)(v73 + 96) = v79;
  *(_QWORD *)(v73 + 112) = *((_QWORD *)v74 + 14);
  *(_QWORD *)(v73 + 120) = *((_QWORD *)v74 + 15);
  *(_QWORD *)(v73 + 128) = *((_QWORD *)v74 + 16);
  *(_QWORD *)(v73 + 136) = *((_QWORD *)v74 + 17);
  *(_QWORD *)(v73 + 144) = *((_QWORD *)v74 + 18);
  *(_QWORD *)(v73 + 152) = *((_QWORD *)v74 + 19);
  *(_QWORD *)(v73 + 160) = *((_QWORD *)v74 + 20);
  *(_QWORD *)(v73 + 168) = *((_QWORD *)v74 + 21);
  *(_QWORD *)(v73 + 176) = *((_QWORD *)v74 + 22);
  swift_retain();
  swift_release();
  *(_QWORD *)(v73 + 184) = *((_QWORD *)v74 + 23);
  swift_retain();
  swift_release();
  v80 = *((_QWORD *)v74 + 24);
  *(_BYTE *)(v73 + 200) = *((_BYTE *)v74 + 200);
  *(_QWORD *)(v73 + 192) = v80;
  *(_BYTE *)(v73 + 201) = *((_BYTE *)v74 + 201);
  *(_QWORD *)(v73 + 208) = *((_QWORD *)v74 + 26);
  swift_retain();
  swift_release();
  *(_QWORD *)(v73 + 216) = *((_QWORD *)v74 + 27);
  swift_retain();
  swift_release();
  *(_QWORD *)(v73 + 224) = *((_QWORD *)v74 + 28);
  swift_retain();
  swift_release();
  *(_QWORD *)(v73 + 232) = *((_QWORD *)v74 + 29);
  swift_retain();
  swift_release();
  *(_QWORD *)(v73 + 240) = *((_QWORD *)v74 + 30);
  swift_retain();
  swift_release();
  *(_BYTE *)(v73 + 248) = *((_BYTE *)v74 + 248);
  *(_QWORD *)(v73 + 256) = *((_QWORD *)v74 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(v73 + 264) = *((_QWORD *)v74 + 33);
  swift_retain();
  swift_release();
  *(_QWORD *)(v73 + 272) = *((_QWORD *)v74 + 34);
  return a1;
}

uint64_t sub_23DD18E40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_23DCF9010();
  v47 = v8;
  v49 = (void (*)(char *, char *, uint64_t))v7;
  v50 = v6;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)(a1 + v9[5]) = *(_QWORD *)(a2 + v9[5]);
  *(_QWORD *)(a1 + v9[6]) = *(_QWORD *)(a2 + v9[6]);
  *(_QWORD *)(a1 + v9[7]) = *(_QWORD *)(a2 + v9[7]);
  v10 = a3[5];
  v11 = a3[6];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_QWORD *)(v12 + 64) = *(_QWORD *)(v13 + 64);
  v14 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(v12 + 48) = v14;
  v15 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v15;
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v16 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v48 = a3;
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v20 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v21 = v20[5];
  v22 = (char *)(v18 + v21);
  v23 = (char *)(v19 + v21);
  v24 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v46 = *((_QWORD *)v24 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v46 + 48))(v23, 1, v24))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v49(v22, v23, v50);
    v26 = v24[5];
    v45 = v20;
    v27 = &v22[v26];
    v28 = &v23[v26];
    v49(&v22[v26], &v23[v26], v50);
    v49(&v27[*(int *)(v47 + 36)], &v28[*(int *)(v47 + 36)], v50);
    *(_QWORD *)&v27[v9[5]] = *(_QWORD *)&v28[v9[5]];
    *(_QWORD *)&v27[v9[6]] = *(_QWORD *)&v28[v9[6]];
    *(_QWORD *)&v27[v9[7]] = *(_QWORD *)&v28[v9[7]];
    v20 = v45;
    v29 = v24[6];
    v30 = &v22[v29];
    v31 = &v23[v29];
    v30[16] = v31[16];
    *(_OWORD *)v30 = *(_OWORD *)v31;
    v22[v24[7]] = v23[v24[7]];
    v22[v24[8]] = v23[v24[8]];
    v22[v24[9]] = v23[v24[9]];
    *(_OWORD *)&v22[v24[10]] = *(_OWORD *)&v23[v24[10]];
    *(_OWORD *)&v22[v24[11]] = *(_OWORD *)&v23[v24[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v46 + 56))(v22, 0, 1, v24);
  }
  *(_OWORD *)(v18 + v20[6]) = *(_OWORD *)(v19 + v20[6]);
  v32 = v20[7];
  v33 = v18 + v32;
  v34 = v19 + v32;
  v35 = *(_OWORD *)(v34 + 16);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *(_OWORD *)(v33 + 16) = v35;
  *(_QWORD *)(v33 + 80) = *(_QWORD *)(v34 + 80);
  v36 = *(_OWORD *)(v34 + 64);
  v37 = *(_OWORD *)(v34 + 32);
  *(_OWORD *)(v33 + 48) = *(_OWORD *)(v34 + 48);
  *(_OWORD *)(v33 + 64) = v36;
  *(_OWORD *)(v33 + 32) = v37;
  *(_QWORD *)(v18 + v20[8]) = *(_QWORD *)(v19 + v20[8]);
  *(_QWORD *)(v18 + v20[9]) = *(_QWORD *)(v19 + v20[9]);
  v38 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v39 = v18 + v38;
  v40 = v19 + v38;
  v41 = *(_OWORD *)(v40 + 80);
  *(_OWORD *)(v39 + 64) = *(_OWORD *)(v40 + 64);
  *(_OWORD *)(v39 + 80) = v41;
  *(_OWORD *)(v39 + 96) = *(_OWORD *)(v40 + 96);
  *(_QWORD *)(v39 + 112) = *(_QWORD *)(v40 + 112);
  v42 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_OWORD *)(v39 + 16) = v42;
  v43 = *(_OWORD *)(v40 + 48);
  *(_OWORD *)(v39 + 32) = *(_OWORD *)(v40 + 32);
  *(_OWORD *)(v39 + 48) = v43;
  memcpy((void *)(a1 + v48[10]), (const void *)(a2 + v48[10]), 0x118uLL);
  return a1;
}

uint64_t sub_23DD19164(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, int *);
  int v26;
  int v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  void (*v68)(char *, char *, uint64_t);
  void (*v69)(char *, char *, uint64_t);
  int *v70;
  int *v71;

  v6 = sub_23DDC512C();
  v64 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 40);
  v7(a1, a2, v6);
  sub_23DCF9010();
  v65 = v8;
  v66 = v6;
  v68 = (void (*)(char *, char *, uint64_t))v7;
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)(a1 + v9[5]) = *(_QWORD *)(a2 + v9[5]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v9[6]) = *(_QWORD *)(a2 + v9[6]);
  swift_bridgeObjectRelease();
  v67 = v9;
  *(_QWORD *)(a1 + v9[7]) = *(_QWORD *)(a2 + v9[7]);
  swift_bridgeObjectRelease();
  v10 = a3[5];
  v11 = a1 + v10;
  v12 = a2 + v10;
  if (*(_QWORD *)(a1 + v10))
  {
    if (*(_QWORD *)v12)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
      swift_bridgeObjectRelease();
      v13 = *(_OWORD *)(v12 + 32);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)(v12 + 16);
      *(_OWORD *)(v11 + 32) = v13;
      *(_OWORD *)(v11 + 48) = *(_OWORD *)(v12 + 48);
      *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
      goto LABEL_6;
    }
    sub_23DCF5648(v11);
  }
  v14 = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)(v12 + 32);
  *(_OWORD *)(v11 + 48) = v14;
  *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
  v15 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v15;
LABEL_6:
  v16 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v17 = a3[9];
  v71 = a3;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  swift_bridgeObjectRelease();
  v70 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v20 = v70[5];
  v21 = (char *)(v18 + v20);
  v22 = (char *)(v19 + v20);
  v23 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v24 = *((_QWORD *)v23 - 1);
  v25 = *(uint64_t (**)(char *, uint64_t, int *))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (v27)
    {
      v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_11:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v28);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      goto LABEL_14;
    }
    v69 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
    v69(v21, v22, v66);
    v30 = v23[5];
    v31 = &v21[v30];
    v32 = &v22[v30];
    v69(&v21[v30], &v22[v30], v66);
    v69(&v31[*(int *)(v65 + 36)], &v32[*(int *)(v65 + 36)], v66);
    *(_QWORD *)&v31[v67[5]] = *(_QWORD *)&v32[v67[5]];
    *(_QWORD *)&v31[v67[6]] = *(_QWORD *)&v32[v67[6]];
    *(_QWORD *)&v31[v67[7]] = *(_QWORD *)&v32[v67[7]];
    v33 = v23[6];
    v34 = &v21[v33];
    v35 = &v22[v33];
    v34[16] = v35[16];
    *(_OWORD *)v34 = *(_OWORD *)v35;
    v21[v23[7]] = v22[v23[7]];
    v21[v23[8]] = v22[v23[8]];
    v21[v23[9]] = v22[v23[9]];
    *(_OWORD *)&v21[v23[10]] = *(_OWORD *)&v22[v23[10]];
    *(_OWORD *)&v21[v23[11]] = *(_OWORD *)&v22[v23[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  else
  {
    if (v27)
    {
      sub_23DCF59A8((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_11;
    }
    v68(v21, v22, v66);
    v36 = v23[5];
    v37 = &v21[v36];
    v38 = &v22[v36];
    v68(&v21[v36], &v22[v36], v66);
    v68(&v37[*(int *)(v65 + 36)], &v38[*(int *)(v65 + 36)], v66);
    *(_QWORD *)&v37[v67[5]] = *(_QWORD *)&v38[v67[5]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v37[v67[6]] = *(_QWORD *)&v38[v67[6]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v37[v67[7]] = *(_QWORD *)&v38[v67[7]];
    swift_bridgeObjectRelease();
    v39 = v23[6];
    v40 = &v21[v39];
    v41 = &v22[v39];
    *(_OWORD *)v40 = *(_OWORD *)v41;
    v40[16] = v41[16];
    v21[v23[7]] = v22[v23[7]];
    v21[v23[8]] = v22[v23[8]];
    v21[v23[9]] = v22[v23[9]];
    v42 = v23[10];
    v43 = &v21[v42];
    v44 = &v22[v42];
    v46 = *(_QWORD *)v44;
    v45 = *((_QWORD *)v44 + 1);
    *(_QWORD *)v43 = v46;
    *((_QWORD *)v43 + 1) = v45;
    swift_bridgeObjectRelease();
    v47 = v23[11];
    v48 = &v21[v47];
    v49 = &v22[v47];
    v51 = *(_QWORD *)v49;
    v50 = *((_QWORD *)v49 + 1);
    *(_QWORD *)v48 = v51;
    *((_QWORD *)v48 + 1) = v50;
    swift_bridgeObjectRelease();
  }
LABEL_14:
  *(_OWORD *)(v18 + v70[6]) = *(_OWORD *)(v19 + v70[6]);
  v52 = v70[7];
  v53 = v18 + v52;
  v54 = v19 + v52;
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *(_QWORD *)(v53 + 8) = *(_QWORD *)(v54 + 8);
  *(_BYTE *)(v53 + 16) = *(_BYTE *)(v54 + 16);
  *(_OWORD *)(v53 + 24) = *(_OWORD *)(v54 + 24);
  *(_OWORD *)(v53 + 40) = *(_OWORD *)(v54 + 40);
  *(_OWORD *)(v53 + 56) = *(_OWORD *)(v54 + 56);
  *(_OWORD *)(v53 + 72) = *(_OWORD *)(v54 + 72);
  *(_QWORD *)(v18 + v70[8]) = *(_QWORD *)(v19 + v70[8]);
  *(_QWORD *)(v18 + v70[9]) = *(_QWORD *)(v19 + v70[9]);
  v55 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v56 = v18 + v55;
  v57 = v19 + v55;
  *(_QWORD *)(v18 + v55) = *(_QWORD *)(v19 + v55);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v56 + 8) = *(_QWORD *)(v57 + 8);
  *(_QWORD *)(v56 + 16) = *(_QWORD *)(v57 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v56 + 24) = *(_QWORD *)(v57 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v56 + 32) = *(_QWORD *)(v57 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v56 + 40) = *(_OWORD *)(v57 + 40);
  *(_OWORD *)(v56 + 56) = *(_OWORD *)(v57 + 56);
  *(_OWORD *)(v56 + 72) = *(_OWORD *)(v57 + 72);
  *(_OWORD *)(v56 + 88) = *(_OWORD *)(v57 + 88);
  *(_OWORD *)(v56 + 104) = *(_OWORD *)(v57 + 104);
  v58 = v71[10];
  v59 = a1 + v58;
  v60 = a2 + v58;
  if (!*(_QWORD *)(a1 + v58))
  {
LABEL_18:
    *(_OWORD *)v59 = *(_OWORD *)v60;
    *(_QWORD *)(v59 + 16) = *(_QWORD *)(v60 + 16);
    goto LABEL_19;
  }
  if (!*(_QWORD *)v60)
  {
    sub_23DCF9EB8(v59);
    goto LABEL_18;
  }
  *(_QWORD *)v59 = *(_QWORD *)v60;
  swift_release();
  *(_QWORD *)(v59 + 8) = *(_QWORD *)(v60 + 8);
  swift_release();
  *(_QWORD *)(v59 + 16) = *(_QWORD *)(v60 + 16);
  swift_release();
LABEL_19:
  *(_BYTE *)(v59 + 24) = *(_BYTE *)(v60 + 24);
  *(_BYTE *)(v59 + 32) = *(_BYTE *)(v60 + 32);
  *(_QWORD *)(v59 + 40) = *(_QWORD *)(v60 + 40);
  swift_release();
  *(_QWORD *)(v59 + 48) = *(_QWORD *)(v60 + 48);
  *(_BYTE *)(v59 + 56) = *(_BYTE *)(v60 + 56);
  *(_QWORD *)(v59 + 64) = *(_QWORD *)(v60 + 64);
  *(_QWORD *)(v59 + 72) = *(_QWORD *)(v60 + 72);
  swift_release();
  *(_QWORD *)(v59 + 80) = *(_QWORD *)(v60 + 80);
  swift_release();
  *(_QWORD *)(v59 + 88) = *(_QWORD *)(v60 + 88);
  *(_QWORD *)(v59 + 96) = *(_QWORD *)(v60 + 96);
  *(_BYTE *)(v59 + 104) = *(_BYTE *)(v60 + 104);
  v61 = *(_OWORD *)(v60 + 128);
  *(_OWORD *)(v59 + 112) = *(_OWORD *)(v60 + 112);
  *(_OWORD *)(v59 + 128) = v61;
  v62 = *(_OWORD *)(v60 + 160);
  *(_OWORD *)(v59 + 144) = *(_OWORD *)(v60 + 144);
  *(_OWORD *)(v59 + 160) = v62;
  *(_QWORD *)(v59 + 176) = *(_QWORD *)(v60 + 176);
  swift_release();
  *(_QWORD *)(v59 + 184) = *(_QWORD *)(v60 + 184);
  swift_release();
  *(_QWORD *)(v59 + 192) = *(_QWORD *)(v60 + 192);
  *(_BYTE *)(v59 + 200) = *(_BYTE *)(v60 + 200);
  *(_BYTE *)(v59 + 201) = *(_BYTE *)(v60 + 201);
  *(_QWORD *)(v59 + 208) = *(_QWORD *)(v60 + 208);
  swift_release();
  *(_QWORD *)(v59 + 216) = *(_QWORD *)(v60 + 216);
  swift_release();
  *(_QWORD *)(v59 + 224) = *(_QWORD *)(v60 + 224);
  swift_release();
  *(_QWORD *)(v59 + 232) = *(_QWORD *)(v60 + 232);
  swift_release();
  *(_QWORD *)(v59 + 240) = *(_QWORD *)(v60 + 240);
  swift_release();
  *(_BYTE *)(v59 + 248) = *(_BYTE *)(v60 + 248);
  *(_QWORD *)(v59 + 256) = *(_QWORD *)(v60 + 256);
  swift_release();
  *(_QWORD *)(v59 + 264) = *(_QWORD *)(v60 + 264);
  swift_release();
  *(_QWORD *)(v59 + 272) = *(_QWORD *)(v60 + 272);
  return a1;
}

uint64_t sub_23DD19854()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD19860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for OvernightMetricsChartLayout(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 40) + 40);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_23DD1990C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD19918(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for OvernightMetricsChartLayout(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 40) + 40) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for IndividualOvernightMetricsChartPoints()
{
  uint64_t result;

  result = qword_256CFCD68;
  if (!qword_256CFCD68)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD199FC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for OvernightMetricsChartLayout(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_23DD19AA0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD19AB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = sub_23DDC6428();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1E758(0, &qword_256CFCED8, (uint64_t (*)(uint64_t))sub_23DD1DFBC, sub_23DD1DFD8);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v13 - v9;
  sub_23DD1DFBC(0);
  sub_23DD1DFD8();
  sub_23DDC60F8();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDF50A0], v2);
  sub_23DD1DF40();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1 + *(int *)(v11 + 36), v5, v2);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(a1, v10, v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_23DD19C0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(unint64_t, _QWORD, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v59;
  unint64_t v60;
  uint64_t KeyPath;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _BYTE v77[40];
  uint64_t v78[4];
  __int128 v79;
  __int128 v80;
  uint64_t OpaqueTypeConformance2;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85[36];

  v73 = a1;
  sub_23DD1CDA4();
  v69 = *(_QWORD *)(v2 - 8);
  v70 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v67 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1D454();
  v74 = v4;
  v71 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v72 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v76 = (char *)&v59 - v7;
  v8 = type metadata accessor for IndividualOvernightMetricsChartPoints();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  sub_23DD1D528(0);
  MEMORY[0x24BDAC7A8](v11);
  v68 = (uint64_t)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v59 - v14;
  v63 = v8;
  v64 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = (unsigned __int8 *)(v1 + *(int *)(v8 + 40));
  v66 = (uint64_t)&v59 - v14;
  v16 = v65[32];
  v75 = v1;
  if (v16 == 1)
  {
    v85[0] = *(_QWORD *)(v1 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 20));
    sub_23DCF58EC(v1, (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
    v17 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v18 = swift_allocObject();
    v62 = v9;
    sub_23DCFBB58((uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
    sub_23DD1CEC4(0);
    KeyPath = v19;
    type metadata accessor for IndividualOvernightMetricChartPoint.ID(0);
    sub_23DD1D634(0);
    sub_23DCF535C((unint64_t *)&qword_256CFCE08, (uint64_t (*)(uint64_t))sub_23DD1CEC4, MEMORY[0x24BEE12D8]);
    sub_23DD1E098();
    sub_23DCF535C(&qword_256CFCF00, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t)&unk_23DDCB510);
    swift_bridgeObjectRetain();
    sub_23DDC635C();
    sub_23DD1D544(0);
    v21 = v20;
    v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
    v23 = v15;
    v24 = v62;
    v22(v23, 0, 1, v21);
  }
  else
  {
    sub_23DD1D544(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v15, 1, 1, v25);
    v24 = v9;
  }
  sub_23DCFB328(0, &qword_256CFCE90, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v26 = sub_23DDC54C8();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(_QWORD *)(v27 + 72);
  v29 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_23DDC7820;
  v31 = *(void (**)(unint64_t, _QWORD, uint64_t))(v27 + 104);
  v31(v30 + v29, *MEMORY[0x24BE401B8], v26);
  v31(v30 + v29 + v28, *MEMORY[0x24BE401A8], v26);
  v31(v30 + v29 + 2 * v28, *MEMORY[0x24BE401B0], v26);
  v32 = v75;
  v33 = v75 + *(int *)(v63 + 36);
  v34 = v33 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v36 = *(_QWORD *)(v34 + 16);
  v35 = *(_QWORD *)(v34 + 24);
  v85[0] = v30;
  KeyPath = swift_getKeyPath();
  v37 = v64;
  sub_23DCF58EC(v32, v64, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
  v38 = *(unsigned __int8 *)(v24 + 80);
  v39 = (v38 + 16) & ~v38;
  v60 = (v10 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  v62 = v60 + 8;
  v63 = v38 | 7;
  v40 = swift_allocObject();
  sub_23DCFBB58(v37, v40 + v39, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
  *(_QWORD *)(v40 + ((v10 + v39 + 7) & 0xFFFFFFFFFFFFFFF8)) = v35;
  sub_23DD1CE94(0);
  sub_23DCF535C(&qword_256CFCE50, (uint64_t (*)(uint64_t))sub_23DD1CE94, MEMORY[0x24BEE12D8]);
  v59 = sub_23DCF535C(&qword_2543266C0, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], MEMORY[0x24BE401D8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23DDC6368();
  v78[3] = v30;
  swift_getKeyPath();
  sub_23DCF58EC(v75, v37, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
  v41 = swift_allocObject();
  sub_23DCFBB58(v37, v41 + v39, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
  *(_QWORD *)(v41 + v60) = v36;
  sub_23DD1E2D0(0, &qword_256CFCDC8, sub_23DD1CEB0, sub_23DD1D174);
  sub_23DD1DA94();
  v42 = v67;
  sub_23DDC6368();
  memcpy(v85, v65, 0x118uLL);
  if (BYTE1(v85[25]) == 1)
  {
    sub_23DD1DE88(0);
    *((_QWORD *)&v80 + 1) = v43;
    sub_23DD1DF40();
    v45 = v44;
    v46 = sub_23DD1DCB4(&qword_256CFCEC0, (uint64_t (*)(uint64_t))sub_23DD1CDA4, (uint64_t (*)(void))sub_23DD1DA94, MEMORY[0x24BDB8490]);
    v47 = sub_23DD1DFF4();
    v48 = v70;
    *(_QWORD *)&v82 = v70;
    *((_QWORD *)&v82 + 1) = v45;
    *(_QWORD *)&v83 = v46;
    *((_QWORD *)&v83 + 1) = v47;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v79);
    sub_23DCFBB9C(v85);
    swift_checkMetadataState();
    sub_23DDC5834();
    sub_23DCFE908(v85);
    v49 = v69;
  }
  else
  {
    v48 = v70;
    *((_QWORD *)&v80 + 1) = v70;
    OpaqueTypeConformance2 = sub_23DD1DCB4(&qword_256CFCEC0, (uint64_t (*)(uint64_t))sub_23DD1CDA4, (uint64_t (*)(void))sub_23DD1DA94, MEMORY[0x24BDB8490]);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v79);
    v49 = v69;
    (*(void (**)(uint64_t *, char *, uint64_t))(v69 + 16))(boxed_opaque_existential_1, v42, v48);
  }
  (*(void (**)(char *, uint64_t))(v49 + 8))(v42, v48);
  v82 = v79;
  v83 = v80;
  v84 = OpaqueTypeConformance2;
  v51 = v66;
  v52 = v68;
  sub_23DCF58EC(v66, v68, (uint64_t (*)(_QWORD))sub_23DD1D528);
  v78[0] = v52;
  v54 = v71;
  v53 = (uint64_t)v72;
  v55 = v76;
  v56 = v74;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v72, v76, v74);
  v78[1] = v53;
  sub_23DD1DE18((uint64_t)&v82, (uint64_t)v77);
  v78[2] = (uint64_t)v77;
  sub_23DD82058(v78, v73);
  sub_23DD1DE54((uint64_t)&v82);
  v57 = *(void (**)(char *, uint64_t))(v54 + 8);
  v57(v55, v56);
  sub_23DCF59A8(v51, (uint64_t (*)(_QWORD))sub_23DD1D528);
  sub_23DD1DE54((uint64_t)v77);
  v57((char *)v53, v56);
  return sub_23DCF59A8(v52, (uint64_t (*)(_QWORD))sub_23DD1D528);
}

uint64_t sub_23DD1A3BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD v35[3];
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v46 = a2;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E88];
  sub_23DD1E178(0, (unint64_t *)&qword_256CFCF08, MEMORY[0x24BDB84C8], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BDB7E88]);
  MEMORY[0x24BDAC7A8](v7);
  v41 = (char *)v35 - v8;
  sub_23DCF9010();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  sub_23DD1E37C(0, (unint64_t *)&qword_256CFCF10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDB7A98], v6);
  MEMORY[0x24BDAC7A8](v13);
  v35[2] = (char *)v35 - v14;
  v39 = sub_23DDC5A44();
  v42 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v36 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1D674(0, &qword_256CFCE80, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointShadow, sub_23DD1D710);
  v17 = *(_QWORD *)(v16 - 8);
  v44 = v16;
  v45 = v17;
  MEMORY[0x24BDAC7A8](v16);
  v37 = (char *)v35 - v18;
  sub_23DD1D650(0);
  v43 = v19;
  v40 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v38 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC5DC8();
  v21 = *(unsigned __int8 *)(v3 + *(int *)(type metadata accessor for IndividualOvernightMetricsChartPoints() + 28));
  v22 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v23 = 28;
  if (v21)
    v23 = 24;
  sub_23DCF58EC(a1 + *(int *)(v22 + v23), (uint64_t)v11, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_254326A30, v12, MEMORY[0x24BDCE948]);
  sub_23DDC58DC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DCF59A8((uint64_t)v11, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DDC5DC8();
  v24 = v35[1];
  sub_23DD75560(a3);
  v49 = v25;
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = v36;
  sub_23DDC5A38();
  v47 = a1;
  v48 = v24;
  v27 = type metadata accessor for OvernightMetricsChartPointShadow();
  v28 = sub_23DD1D710();
  v29 = MEMORY[0x24BDB8320];
  v30 = v37;
  v31 = v39;
  sub_23DDC5870();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v31);
  v49 = v31;
  v50 = v27;
  v51 = v29;
  v52 = v28;
  swift_getOpaqueTypeConformance2();
  v32 = v38;
  v33 = v44;
  sub_23DDC5858();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v33);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v40 + 32))(v46, v32, v43);
}

double sub_23DD1A820@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t *boxed_opaque_existential_1;
  double result;
  __int128 v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47[36];

  v8 = sub_23DDC54C8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1E2B4(0);
  v38 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 28));
  v16 = *(_QWORD *)(v15 + 16);
  v39 = a4;
  if (v16 && (v17 = sub_23DD76970(a1), (v18 & 1) != 0))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v17);
    swift_bridgeObjectRetain();
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_8;
  }
  else
  {
    v19 = MEMORY[0x24BEE4AF8];
    if (!*(_QWORD *)(a3 + 16))
    {
LABEL_8:
      v22 = MEMORY[0x24BEE4AF8];
      goto LABEL_9;
    }
  }
  v20 = sub_23DD76970(a1);
  if ((v21 & 1) == 0)
    goto LABEL_8;
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v20);
  swift_bridgeObjectRetain();
LABEL_9:
  sub_23DD1AB24(v19, v22, a1, (uint64_t)v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BE401B8], v8);
  v23 = sub_23DDC54BC();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v24 = type metadata accessor for IndividualOvernightMetricsChartPoints();
  memcpy(v47, (const void *)(a2 + *(int *)(v24 + 40)), 0x118uLL);
  if ((v23 & 1) != 0 && BYTE1(v47[25]) == 1)
  {
    sub_23DD1E680(0);
    *((_QWORD *)&v45 + 1) = v25;
    sub_23DD1E758(255, &qword_256CFCF70, (uint64_t (*)(uint64_t))sub_23DD1E7D0, sub_23DD1E7EC);
    v27 = v26;
    v28 = sub_23DD1E4E8();
    sub_23DD1E7D0(255);
    v30 = v29;
    v31 = sub_23DD1E7EC();
    v40 = v30;
    v41 = v31;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v40 = v38;
    v41 = v27;
    v42 = v28;
    v43 = OpaqueTypeConformance2;
    v46 = swift_getOpaqueTypeConformance2();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v44);
    sub_23DCFBB9C(v47);
    swift_checkMetadataState();
    sub_23DDC5834();
    sub_23DCFE908(v47);
  }
  else
  {
    *((_QWORD *)&v45 + 1) = v38;
    v46 = sub_23DD1E4E8();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v44);
    sub_23DCF58EC((uint64_t)v14, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))sub_23DD1E2B4);
  }
  sub_23DCF59A8((uint64_t)v14, (uint64_t (*)(_QWORD))sub_23DD1E2B4);
  result = *(double *)&v44;
  v35 = v45;
  v36 = v39;
  *v39 = v44;
  v36[1] = v35;
  *((_QWORD *)v36 + 4) = v46;
  return result;
}

uint64_t sub_23DD1AB24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  _QWORD v55[3];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  ValueMetadata *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;

  v56 = a3;
  v57 = a1;
  v65 = a4;
  sub_23DD1E808(0, &qword_256CFCF88, sub_23DD1D174, sub_23DD1E344);
  v64 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v61 = (uint64_t)v55 - v7;
  sub_23DD1E344(0);
  v58 = v8;
  v62 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v63 = (char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v60 = (char *)v55 - v11;
  v12 = sub_23DDC54C8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for IndividualOvernightMetricsChartPoints();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  MEMORY[0x24BDAC7A8](v16);
  sub_23DD1D174(0);
  MEMORY[0x24BDAC7A8](v19);
  v59 = (uint64_t)v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v66 = (uint64_t)v55 - v22;
  if (*(_BYTE *)(v4 + *(int *)(v16 + 24)) == 1)
  {
    v71 = a2;
    v55[2] = swift_getKeyPath();
    sub_23DCF58EC(v4, (uint64_t)v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v56, v12);
    v23 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v24 = *(unsigned __int8 *)(v13 + 80);
    v56 = a2;
    v25 = v17;
    v26 = (v18 + v24 + v23) & ~v24;
    v27 = swift_allocObject();
    sub_23DCFBB58((uint64_t)v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v23, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
    v28 = v27 + v26;
    v17 = v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v28, v15, v12);
    sub_23DD02DA8();
    sub_23DD1D264(0);
    v55[1] = sub_23DCF535C(&qword_256CFCE40, (uint64_t (*)(uint64_t))sub_23DD02DA8, MEMORY[0x24BEE12D8]);
    v55[0] = sub_23DD1D3E4();
    sub_23DD1D318(255);
    v30 = v29;
    v31 = sub_23DDC5A44();
    v32 = sub_23DD1D3A0();
    swift_bridgeObjectRetain();
    v67 = v31;
    v68 = &type metadata for OvernightMetricsChartLozenge;
    v69 = MEMORY[0x24BDB8320];
    v70 = v32;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v67 = v30;
    v68 = (ValueMetadata *)OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2();
    v34 = v4;
    v35 = v66;
    sub_23DDC6368();
    sub_23DD1D190();
    v37 = v36;
    v38 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
    v39 = v35;
    v4 = v34;
    v38(v39, 0, 1, v37);
  }
  else
  {
    sub_23DD1D190();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v66, 1, 1, v40);
  }
  v67 = v57;
  sub_23DCF58EC(v4, (uint64_t)v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
  v41 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v42 = swift_allocObject();
  sub_23DCFBB58((uint64_t)v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v42 + v41, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
  sub_23DD1CEC4(0);
  type metadata accessor for IndividualOvernightMetricChartPoint.ID(0);
  sub_23DD1E358(0);
  sub_23DCF535C((unint64_t *)&qword_256CFCE08, (uint64_t (*)(uint64_t))sub_23DD1CEC4, MEMORY[0x24BEE12D8]);
  sub_23DD1E598();
  sub_23DCF535C(&qword_256CFCF00, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t)&unk_23DDCB510);
  swift_bridgeObjectRetain();
  v43 = v60;
  sub_23DDC635C();
  v44 = v59;
  sub_23DCF58EC(v66, v59, (uint64_t (*)(_QWORD))sub_23DD1D174);
  v46 = v62;
  v45 = v63;
  v47 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
  v48 = v58;
  v47(v63, v43, v58);
  sub_23DD1DCB4(&qword_256CFCEB0, (uint64_t (*)(uint64_t))sub_23DD1D174, (uint64_t (*)(void))sub_23DD1DD18, MEMORY[0x24BDB84F0]);
  v49 = v61;
  sub_23DCF58EC(v44, v61, (uint64_t (*)(_QWORD))sub_23DD1D174);
  sub_23DD1DCB4(&qword_256CFCF58, (uint64_t (*)(uint64_t))sub_23DD1E344, (uint64_t (*)(void))sub_23DD1E598, MEMORY[0x24BDB8490]);
  v50 = v64;
  v51 = v49 + *(int *)(v64 + 48);
  v47((char *)v51, v45, v48);
  v52 = v65;
  sub_23DCFBB58(v49, v65, (uint64_t (*)(_QWORD))sub_23DD1D174);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v52 + *(int *)(v50 + 48), v51, v48);
  v53 = *(void (**)(char *, uint64_t))(v46 + 8);
  v53(v43, v48);
  sub_23DCF59A8(v66, (uint64_t (*)(_QWORD))sub_23DD1D174);
  v53(v45, v48);
  return sub_23DCF59A8(v44, (uint64_t (*)(_QWORD))sub_23DD1D174);
}

uint64_t sub_23DD1B0E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  char v9;
  char *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 28));
  if (*(_QWORD *)(v7 + 16) && (v8 = sub_23DD76970(a1), (v9 & 1) != 0))
  {
    v10 = *(char **)(*(_QWORD *)(v7 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_8;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
    if (!*(_QWORD *)(a3 + 16))
    {
LABEL_8:
      v13 = MEMORY[0x24BEE4AF8];
      goto LABEL_9;
    }
  }
  v11 = sub_23DD76970(a1);
  if ((v12 & 1) == 0)
    goto LABEL_8;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v11);
  swift_bridgeObjectRetain();
LABEL_9:
  sub_23DD1B1B8(v10, v13, a4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DD1B1B8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  ValueMetadata *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;

  v4 = v3;
  v45 = a2;
  v55 = a3;
  v56 = a1;
  sub_23DD1E808(0, &qword_256CFCF18, sub_23DD1CEB0, sub_23DD1D174);
  v54 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)v44 - v7;
  sub_23DD1D174(0);
  MEMORY[0x24BDAC7A8](v8);
  v53 = (uint64_t)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)v44 - v11;
  v47 = type metadata accessor for IndividualOvernightMetricsChartPoints();
  v12 = *(_QWORD *)(v47 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v47);
  v14 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1CEB0(0);
  v50 = v15;
  v48 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v49 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v44 - v18;
  v57 = (uint64_t)a1;
  sub_23DCF58EC(v4, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
  v20 = *(unsigned __int8 *)(v12 + 80);
  v21 = (v20 + 16) & ~v20;
  v44[0] = v20 | 7;
  v44[1] = v21 + v13;
  v22 = swift_allocObject();
  sub_23DCFBB58((uint64_t)v14, v22 + v21, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
  sub_23DD1CEC4(0);
  type metadata accessor for IndividualOvernightMetricChartPoint.ID(0);
  sub_23DD1CEE0(0);
  sub_23DCF535C((unint64_t *)&qword_256CFCE08, (uint64_t (*)(uint64_t))sub_23DD1CEC4, MEMORY[0x24BEE12D8]);
  sub_23DD1DB64();
  sub_23DCF535C(&qword_256CFCF00, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t)&unk_23DDCB510);
  swift_bridgeObjectRetain();
  v23 = v46;
  v56 = v19;
  sub_23DDC635C();
  if (*(_BYTE *)(v23 + *(int *)(v47 + 24)) == 1)
  {
    v61 = v45;
    swift_getKeyPath();
    sub_23DCF58EC(v23, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
    v24 = swift_allocObject();
    sub_23DCFBB58((uint64_t)v14, v24 + v21, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricsChartPoints);
    sub_23DD02DA8();
    sub_23DD1D264(0);
    sub_23DCF535C(&qword_256CFCE40, (uint64_t (*)(uint64_t))sub_23DD02DA8, MEMORY[0x24BEE12D8]);
    sub_23DD1D3E4();
    sub_23DD1D318(255);
    v26 = v25;
    v27 = sub_23DDC5A44();
    v28 = sub_23DD1D3A0();
    swift_bridgeObjectRetain();
    v57 = v27;
    v58 = &type metadata for OvernightMetricsChartLozenge;
    v59 = MEMORY[0x24BDB8320];
    v60 = v28;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v57 = v26;
    v58 = (ValueMetadata *)OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2();
    v30 = (uint64_t)v51;
    sub_23DDC6368();
    sub_23DD1D190();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  }
  else
  {
    sub_23DD1D190();
    v30 = (uint64_t)v51;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v51, 1, 1, v32);
  }
  v34 = v48;
  v33 = v49;
  v35 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v36 = v50;
  v35(v49, v56, v50);
  v37 = v53;
  sub_23DCF58EC(v30, v53, (uint64_t (*)(_QWORD))sub_23DD1D174);
  sub_23DD1DCB4(&qword_256CFCEA0, (uint64_t (*)(uint64_t))sub_23DD1CEB0, (uint64_t (*)(void))sub_23DD1DB64, MEMORY[0x24BDB8490]);
  v38 = v52;
  v35(v52, v33, v36);
  sub_23DD1DCB4(&qword_256CFCEB0, (uint64_t (*)(uint64_t))sub_23DD1D174, (uint64_t (*)(void))sub_23DD1DD18, MEMORY[0x24BDB84F0]);
  v39 = v54;
  v40 = (uint64_t)&v38[*(int *)(v54 + 48)];
  sub_23DCF58EC(v37, v40, (uint64_t (*)(_QWORD))sub_23DD1D174);
  v41 = v55;
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v55, v38, v36);
  sub_23DCFBB58(v40, v41 + *(int *)(v39 + 48), (uint64_t (*)(_QWORD))sub_23DD1D174);
  sub_23DCF59A8(v30, (uint64_t (*)(_QWORD))sub_23DD1D174);
  v42 = *(void (**)(char *, uint64_t))(v34 + 8);
  v42(v56, v36);
  sub_23DCF59A8(v37, (uint64_t (*)(_QWORD))sub_23DD1D174);
  return ((uint64_t (*)(char *, uint64_t))v42)(v33, v36);
}

uint64_t sub_23DD1B6F0@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _QWORD v17[2];

  sub_23DD1D264(0);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = a1[1];
  v13 = a2 + *(int *)(type metadata accessor for IndividualOvernightMetricsChartPoints() + 36);
  v14 = *(double *)(v13 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20) + 72);
  sub_23DDC54B0();
  v17[1] = swift_retain();
  v15 = sub_23DDC5B40();
  sub_23DD1B824(v15, (uint64_t)v10, v11, v12, v14);
  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v10, v7);
}

uint64_t sub_23DD1B824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  ValueMetadata *v37;
  uint64_t v38;
  unint64_t v39;

  v29 = a1;
  v30 = a2;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E88];
  sub_23DD1E178(0, (unint64_t *)&qword_256CFCF08, MEMORY[0x24BDB84C8], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BDB7E88]);
  MEMORY[0x24BDAC7A8](v9);
  v25[2] = (char *)v25 - v10;
  sub_23DD1E37C(0, (unint64_t *)&qword_256CFCF10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDB7A98], v8);
  MEMORY[0x24BDAC7A8](v11);
  v25[0] = (char *)v25 - v12;
  v13 = sub_23DDC5A44();
  v26 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1D318(0);
  v17 = *(_QWORD *)(v16 - 8);
  v27 = v16;
  v28 = v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC5DC8();
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_254326A30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v20 = v25[1];
  sub_23DDC58DC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DDC5DC8();
  v36 = a4;
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DDC5A38();
  v31 = a3;
  v32 = a4;
  v33 = v20;
  v34 = a5;
  v35 = v29;
  v21 = sub_23DD1D3A0();
  v22 = MEMORY[0x24BDB8320];
  sub_23DDC5870();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v13);
  v36 = *(double *)&v13;
  v37 = &type metadata for OvernightMetricsChartLozenge;
  v38 = v22;
  v39 = v21;
  swift_getOpaqueTypeConformance2();
  v23 = v27;
  sub_23DDC5858();
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v19, v23);
}

uint64_t sub_23DD1BB5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  sub_23DD1E3DC(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32);
  if ((*(_BYTE *)(v9 + 8) & 1) != 0)
  {
    sub_23DD1E37C(0, &qword_256CFCF90, (uint64_t (*)(uint64_t))sub_23DD1E3DC, MEMORY[0x24BDB7B58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7F78]);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    sub_23DD1BC9C(a1, (uint64_t)v8, *(double *)v9);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(a2, v8, v5);
    sub_23DD1E37C(0, &qword_256CFCF90, (uint64_t (*)(uint64_t))sub_23DD1E3DC, MEMORY[0x24BDB7B58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7F78]);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_23DD1BC9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD v35[3];
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v46 = a2;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E88];
  sub_23DD1E178(0, (unint64_t *)&qword_256CFCF08, MEMORY[0x24BDB84C8], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BDB7E88]);
  MEMORY[0x24BDAC7A8](v7);
  v41 = (char *)v35 - v8;
  sub_23DCF9010();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  sub_23DD1E37C(0, (unint64_t *)&qword_256CFCF10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDB7A98], v6);
  MEMORY[0x24BDAC7A8](v13);
  v35[2] = (char *)v35 - v14;
  v39 = sub_23DDC5A44();
  v42 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v36 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1D674(0, &qword_256CFCF40, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointBackground, sub_23DD1E4CC);
  v17 = *(_QWORD *)(v16 - 8);
  v44 = v16;
  v45 = v17;
  MEMORY[0x24BDAC7A8](v16);
  v37 = (char *)v35 - v18;
  sub_23DD1E3DC(0);
  v43 = v19;
  v40 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v38 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC5DC8();
  v21 = *(unsigned __int8 *)(v3 + *(int *)(type metadata accessor for IndividualOvernightMetricsChartPoints() + 28));
  v22 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v23 = 28;
  if (v21)
    v23 = 24;
  sub_23DCF58EC(a1 + *(int *)(v22 + v23), (uint64_t)v11, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_254326A30, v12, MEMORY[0x24BDCE948]);
  sub_23DDC58DC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DCF59A8((uint64_t)v11, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DDC5DC8();
  v24 = v35[1];
  sub_23DD75560(a3);
  v49 = v25;
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = v36;
  sub_23DDC5A38();
  v47 = a1;
  v48 = v24;
  v27 = type metadata accessor for OvernightMetricsChartPointBackground();
  v28 = sub_23DD1E4CC();
  v29 = MEMORY[0x24BDB8320];
  v30 = v37;
  v31 = v39;
  sub_23DDC5870();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v31);
  v49 = v31;
  v50 = v27;
  v51 = v29;
  v52 = v28;
  swift_getOpaqueTypeConformance2();
  v32 = v38;
  v33 = v44;
  sub_23DDC5858();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v33);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v40 + 32))(v46, v32, v43);
}

uint64_t sub_23DD1C100@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, double)@<X2>, uint64_t (*a3)(_QWORD)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v8 = a1 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32);
  if ((*(_BYTE *)(v8 + 8) & 1) != 0)
  {
    v9 = a3(0);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
    v11 = a4;
    v12 = 1;
  }
  else
  {
    a2(a1, *(double *)v8);
    v9 = a3(0);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
    v11 = a4;
    v12 = 0;
  }
  return v10(v11, v12, 1, v9);
}

uint64_t sub_23DD1C1A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = v3;
  v76 = a2;
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E88];
  sub_23DD1E178(0, (unint64_t *)&qword_256CFCF08, MEMORY[0x24BDB84C8], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BDB7E88]);
  MEMORY[0x24BDAC7A8](v8);
  v64 = (char *)&v58 - v9;
  sub_23DCF9010();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1E37C(0, (unint64_t *)&qword_256CFCF10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDB7A98], v7);
  MEMORY[0x24BDAC7A8](v13);
  v77 = (char *)&v58 - v14;
  v63 = sub_23DDC5A44();
  v65 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v60 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1D674(0, &qword_256CFCDF8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, sub_23DD1D158);
  v66 = v16;
  v67 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v61 = (char *)&v58 - v17;
  sub_23DD1E400(0, &qword_256CFCDF0, &qword_256CFCDF8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, sub_23DD1D158);
  v69 = v18;
  v71 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v62 = (char *)&v58 - v19;
  sub_23DD1D03C(0);
  v72 = v20;
  v75 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v68 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1CEFC(0);
  v73 = *(_QWORD *)(v22 - 8);
  v74 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v70 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC5DC8();
  v24 = *(unsigned __int8 *)(v4 + *(int *)(type metadata accessor for IndividualOvernightMetricsChartPoints() + 28));
  v25 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v59 = v25;
  v26 = 28;
  if (v24)
    v26 = 24;
  sub_23DCF58EC(a1 + *(int *)(v25 + v26), (uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_254326A30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  sub_23DDC58DC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DDC5DC8();
  sub_23DD75560(a3);
  v80 = v27;
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = v60;
  sub_23DDC5A38();
  v29 = a1;
  v58 = a1;
  v78 = a1;
  v79 = v4;
  v30 = type metadata accessor for OvernightMetricsChartPointForeground();
  v31 = sub_23DD1D158();
  v32 = MEMORY[0x24BDB8320];
  v33 = v61;
  v34 = v63;
  sub_23DDC5870();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v28, v34);
  v80 = v34;
  v81 = v30;
  v82 = v32;
  v83 = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v36 = v62;
  v37 = v66;
  sub_23DDC5858();
  v38 = v37;
  (*(void (**)(char *, uint64_t))(v67 + 8))(v33, v37);
  type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v39 = v59;
  v40 = (uint64_t *)(v29 + *(int *)(v59 + 44));
  v41 = v40[1];
  v80 = *v40;
  v81 = v41;
  v77 = (char *)sub_23DD0B190();
  swift_bridgeObjectRetain();
  v42 = sub_23DDC6098();
  v44 = v43;
  LOBYTE(v32) = v45 & 1;
  v80 = v38;
  v81 = OpaqueTypeConformance2;
  v46 = swift_getOpaqueTypeConformance2();
  v47 = v68;
  v48 = v69;
  sub_23DDC5840();
  sub_23DD0B1D4(v42, v44, v32);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v36, v48);
  v49 = (uint64_t *)(v58 + *(int *)(v39 + 48));
  v50 = v49[1];
  v80 = *v49;
  v81 = v50;
  swift_bridgeObjectRetain();
  v51 = sub_23DDC6098();
  v53 = v52;
  LOBYTE(v44) = v54 & 1;
  v80 = v48;
  v81 = v46;
  swift_getOpaqueTypeConformance2();
  v55 = v70;
  v56 = v72;
  sub_23DDC584C();
  sub_23DD0B1D4(v51, v53, v44);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v47, v56);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v73 + 32))(v76, v55, v74);
}

uint64_t sub_23DD1C86C@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2 + *(int *)(type metadata accessor for IndividualOvernightMetricsChartPoints() + 36);
  v7 = *(double *)(v6 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20) + 88);
  v8 = swift_retain();
  sub_23DD1B824(v8, a3, v4, v5, v7);
  return swift_release();
}

uint64_t *sub_23DD1C8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t *v14;
  void *__src;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t __dst[36];

  sub_23DCF58EC(a1, a3, type metadata accessor for IndividualOvernightMetricChartPoint);
  v5 = (int *)type metadata accessor for IndividualOvernightMetricsChartPoints();
  v6 = (uint64_t *)(a2 + v5[5]);
  v7 = v6[2];
  v20 = v6[1];
  v21 = *v6;
  v8 = v6[3];
  v9 = v6[4];
  v11 = v6[5];
  v10 = v6[6];
  v18 = v6[8];
  v19 = v6[7];
  v17 = *(_BYTE *)(a2 + v5[8]);
  v12 = a2 + v5[9];
  v13 = (int *)type metadata accessor for OvernightMetricsChartPointShadow();
  sub_23DCF58EC(v12, a3 + v13[7], type metadata accessor for OvernightMetricsChartLayout);
  __src = (void *)(a2 + v5[10]);
  memcpy(__dst, __src, 0x118uLL);
  v14 = (uint64_t *)(a3 + v13[5]);
  *v14 = v21;
  v14[1] = v20;
  v14[2] = v7;
  v14[3] = v8;
  v14[4] = v9;
  v14[5] = v11;
  v14[6] = v10;
  v14[7] = v19;
  v14[8] = v18;
  *(_BYTE *)(a3 + v13[6]) = v17;
  memcpy((void *)(a3 + v13[8]), __src, 0x118uLL);
  sub_23DCF59EC(v21);
  return sub_23DCFBB9C(__dst);
}

uint64_t sub_23DD1CA48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = (uint64_t *)(a1 + *(int *)(type metadata accessor for IndividualOvernightMetricsChartPoints() + 20));
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  v15 = v11[3];
  v16 = v11[4];
  v17 = v11[5];
  v18 = v11[6];
  v19 = v11[7];
  v20 = v11[8];
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(_QWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 32) = v14;
  *(_QWORD *)(a3 + 40) = v15;
  *(_QWORD *)(a3 + 48) = v16;
  *(_QWORD *)(a3 + 56) = v17;
  *(_QWORD *)(a3 + 64) = v18;
  *(_QWORD *)(a3 + 72) = v19;
  *(_QWORD *)(a3 + 80) = v20;
  *(double *)(a3 + 88) = a6;
  *(_QWORD *)(a3 + 96) = a2;
  sub_23DCF59EC(v12);
  return swift_retain();
}

uint64_t *sub_23DD1CAE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  const void *v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t __dst[36];

  sub_23DCF58EC(a1, a3, type metadata accessor for IndividualOvernightMetricChartPoint);
  v5 = (int *)type metadata accessor for IndividualOvernightMetricsChartPoints();
  v6 = (uint64_t *)(a2 + v5[5]);
  v7 = v6[1];
  v8 = v6[2];
  v9 = v6[3];
  v16 = *v6;
  v10 = v6[4];
  v22 = v6[5];
  v17 = v6[6];
  v18 = v6[7];
  v19 = v6[8];
  v11 = a2 + v5[9];
  v20 = *(_BYTE *)(a2 + v5[8]);
  v21 = *(_BYTE *)(a2 + v5[6]);
  v12 = (int *)type metadata accessor for OvernightMetricsChartPointBackground();
  sub_23DCF58EC(v11, a3 + v12[8], type metadata accessor for OvernightMetricsChartLayout);
  v13 = (const void *)(a2 + v5[10]);
  memcpy(__dst, v13, 0x118uLL);
  v14 = (uint64_t *)(a3 + v12[5]);
  *v14 = v16;
  v14[1] = v7;
  v14[2] = v8;
  v14[3] = v9;
  v14[4] = v10;
  v14[5] = v22;
  v14[6] = v17;
  v14[7] = v18;
  v14[8] = v19;
  *(_BYTE *)(a3 + v12[6]) = v20;
  *(_BYTE *)(a3 + v12[7]) = v21;
  memcpy((void *)(a3 + v12[9]), v13, 0x118uLL);
  sub_23DCF59EC(v16);
  return sub_23DCFBB9C(__dst);
}

uint64_t *sub_23DD1CC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  const void *v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t __dst[36];

  sub_23DCF58EC(a1, a3, type metadata accessor for IndividualOvernightMetricChartPoint);
  v5 = (int *)type metadata accessor for IndividualOvernightMetricsChartPoints();
  v6 = (uint64_t *)(a2 + v5[5]);
  v7 = v6[1];
  v8 = v6[2];
  v9 = v6[3];
  v16 = *v6;
  v10 = v6[4];
  v21 = v6[5];
  v17 = v6[6];
  v18 = v6[7];
  v19 = v6[8];
  v20 = *(_BYTE *)(a2 + v5[6]);
  v11 = a2 + v5[9];
  v12 = (int *)type metadata accessor for OvernightMetricsChartPointForeground();
  sub_23DCF58EC(v11, a3 + v12[7], type metadata accessor for OvernightMetricsChartLayout);
  v13 = (const void *)(a2 + v5[10]);
  memcpy(__dst, v13, 0x118uLL);
  v14 = (uint64_t *)(a3 + v12[5]);
  *v14 = v16;
  v14[1] = v7;
  v14[2] = v8;
  v14[3] = v9;
  v14[4] = v10;
  v14[5] = v21;
  v14[6] = v17;
  v14[7] = v18;
  v14[8] = v19;
  *(_BYTE *)(a3 + v12[6]) = v20;
  memcpy((void *)(a3 + v12[8]), v13, 0x118uLL);
  sub_23DCF59EC(v16);
  return sub_23DCFBB9C(__dst);
}

void sub_23DD1CDA4()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_256CFCDB8)
  {
    sub_23DD1CE94(255);
    sub_23DDC54C8();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0];
    sub_23DD1E2D0(255, &qword_256CFCDC8, sub_23DD1CEB0, sub_23DD1D174);
    sub_23DCF535C(&qword_256CFCE50, (uint64_t (*)(uint64_t))sub_23DD1CE94, MEMORY[0x24BEE12D8]);
    sub_23DCF535C(&qword_2543266C0, v0, MEMORY[0x24BE401D8]);
    v1 = sub_23DDC6380();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_256CFCDB8);
  }
}

void sub_23DD1CE94(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFCDC0, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

void sub_23DD1CEB0(uint64_t a1)
{
  sub_23DD1D558(a1, &qword_256CFCDD0, sub_23DD1CEE0);
}

void sub_23DD1CEC4(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_254326758, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

void sub_23DD1CEE0(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFCDD8, (uint64_t (*)(uint64_t))sub_23DD1CEFC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_23DD1CEFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_256CFCDE0)
  {
    sub_23DD1D03C(255);
    v3 = v2;
    sub_23DD1E400(255, &qword_256CFCDF0, &qword_256CFCDF8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, sub_23DD1D158);
    sub_23DD1D674(255, &qword_256CFCDF8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, sub_23DD1D158);
    sub_23DDC5A44();
    type metadata accessor for OvernightMetricsChartPointForeground();
    v4 = sub_23DD1D158();
    v7[2] = MEMORY[0x24BDB8320];
    v7[3] = v4;
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDB7C68], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256CFCDE0);
  }
}

void sub_23DD1D03C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_256CFCDE8)
  {
    sub_23DD1E400(255, &qword_256CFCDF0, &qword_256CFCDF8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, sub_23DD1D158);
    v3 = v2;
    sub_23DD1D674(255, &qword_256CFCDF8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, sub_23DD1D158);
    sub_23DDC5A44();
    type metadata accessor for OvernightMetricsChartPointForeground();
    v4 = sub_23DD1D158();
    v7[2] = MEMORY[0x24BDB8320];
    v7[3] = v4;
    swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDB7C48], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256CFCDE8);
  }
}

uint64_t sub_23DD1D158()
{
  return sub_23DCF535C(&qword_256CFCE00, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, (uint64_t)&unk_23DDC9A70);
}

void sub_23DD1D174(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFCE18, (uint64_t (*)(uint64_t))sub_23DD1D190, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_23DD1D190()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFCE20)
  {
    sub_23DD02DA8();
    sub_23DD1E178(255, (unint64_t *)&qword_256CFC4C0, MEMORY[0x24BEE13F0], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE08B8]);
    sub_23DD1D264(255);
    sub_23DCF535C(&qword_256CFCE40, (uint64_t (*)(uint64_t))sub_23DD02DA8, MEMORY[0x24BEE12D8]);
    sub_23DD1D3E4();
    v0 = sub_23DDC6380();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFCE20);
  }
}

void sub_23DD1D264(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_256CFCE28)
  {
    sub_23DD1D318(255);
    v3 = v2;
    sub_23DDC5A44();
    v4 = sub_23DD1D3A0();
    v7[2] = MEMORY[0x24BDB8320];
    v7[3] = v4;
    v7[0] = v3;
    v7[1] = swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDB7C88], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256CFCE28);
  }
}

void sub_23DD1D318(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_256CFCE30)
  {
    v2 = sub_23DDC5A44();
    v3 = sub_23DD1D3A0();
    v6[0] = v2;
    v6[1] = &type metadata for OvernightMetricsChartLozenge;
    v6[2] = MEMORY[0x24BDB8320];
    v6[3] = v3;
    v4 = MEMORY[0x242643B9C](a1, v6, MEMORY[0x24BDB7D28], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_256CFCE30);
  }
}

unint64_t sub_23DD1D3A0()
{
  unint64_t result;

  result = qword_256CFCE38;
  if (!qword_256CFCE38)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC7560, &type metadata for OvernightMetricsChartLozenge);
    atomic_store(result, (unint64_t *)&qword_256CFCE38);
  }
  return result;
}

unint64_t sub_23DD1D3E4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256CFCE48;
  if (!qword_256CFCE48)
  {
    sub_23DD1E178(255, (unint64_t *)&qword_256CFC4C0, MEMORY[0x24BEE13F0], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE08B8]);
    v2 = MEMORY[0x24BEE13E8];
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE08E8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256CFCE48);
  }
  return result;
}

void sub_23DD1D454()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_256CFCE58)
  {
    sub_23DD1CE94(255);
    sub_23DDC54C8();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0];
    sub_23DCF535C(&qword_256CFCE50, (uint64_t (*)(uint64_t))sub_23DD1CE94, MEMORY[0x24BEE12D8]);
    sub_23DCF535C(&qword_2543266C0, v0, MEMORY[0x24BE401D8]);
    v1 = sub_23DDC6380();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_256CFCE58);
  }
}

void sub_23DD1D528(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFCE60, (uint64_t (*)(uint64_t))sub_23DD1D544, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_23DD1D544(uint64_t a1)
{
  sub_23DD1D558(a1, &qword_256CFCE68, sub_23DD1D634);
}

void sub_23DD1D558(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_23DD1CEC4(255);
    type metadata accessor for IndividualOvernightMetricChartPoint.ID(255);
    a3(255);
    sub_23DCF535C((unint64_t *)&qword_256CFCE08, (uint64_t (*)(uint64_t))sub_23DD1CEC4, MEMORY[0x24BEE12D8]);
    sub_23DCF535C(&qword_256CFCE10, type metadata accessor for IndividualOvernightMetricChartPoint.ID, (uint64_t)&unk_23DDCB548);
    v5 = sub_23DDC6380();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_23DD1D634(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFCE70, (uint64_t (*)(uint64_t))sub_23DD1D650, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_23DD1D650(uint64_t a1)
{
  sub_23DD1E400(a1, &qword_256CFCE78, &qword_256CFCE80, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointShadow, sub_23DD1D710);
}

void sub_23DD1D674(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  if (!*a2)
  {
    v8 = sub_23DDC5A44();
    v9 = a3(255);
    v10 = a4();
    v13[0] = v8;
    v13[1] = v9;
    v13[2] = MEMORY[0x24BDB8320];
    v13[3] = v10;
    v11 = MEMORY[0x242643B9C](a1, v13, MEMORY[0x24BDB7D28], 0);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t sub_23DD1D710()
{
  return sub_23DCF535C(&qword_256CFCE88, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointShadow, (uint64_t)&unk_23DDCA4F0);
}

double sub_23DD1D730@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for IndividualOvernightMetricsChartPoints() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_23DD1A820(a1, v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (int *)type metadata accessor for IndividualOvernightMetricsChartPoints();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  v3 = sub_23DDC512C();
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(v2, v3);
  sub_23DCF9010();
  v6 = v5;
  v4(v2 + *(int *)(v5 + 36), v3);
  type metadata accessor for IndividualOvernightMetricChartPointCollection();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + v1[5]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v7 = v2 + v1[9];
  swift_bridgeObjectRelease();
  v8 = v7 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v9 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v4(v8, v3);
    v10 = v8 + *(int *)(v9 + 20);
    v4(v10, v3);
    v4(v10 + *(int *)(v6 + 36), v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + v1[10]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23DD1DA34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for IndividualOvernightMetricsChartPoints() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_23DD1B0E0(a1, v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

unint64_t sub_23DD1DA94()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  result = qword_256CFCE98;
  if (!qword_256CFCE98)
  {
    sub_23DD1E2D0(255, &qword_256CFCDC8, sub_23DD1CEB0, sub_23DD1D174);
    v2 = v1;
    v4[0] = sub_23DD1DCB4(&qword_256CFCEA0, (uint64_t (*)(uint64_t))sub_23DD1CEB0, (uint64_t (*)(void))sub_23DD1DB64, MEMORY[0x24BDB8490]);
    v4[1] = sub_23DD1DCB4(&qword_256CFCEB0, (uint64_t (*)(uint64_t))sub_23DD1D174, (uint64_t (*)(void))sub_23DD1DD18, MEMORY[0x24BDB84F0]);
    v3 = v4;
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB7B80], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CFCE98);
  }
  return result;
}

unint64_t sub_23DD1DB64()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];

  result = qword_256CFCEA8;
  if (!qword_256CFCEA8)
  {
    sub_23DD1CEE0(255);
    v2 = v1;
    sub_23DD1D03C(255);
    v4 = v3;
    sub_23DD1E400(255, &qword_256CFCDF0, &qword_256CFCDF8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, sub_23DD1D158);
    sub_23DD1D674(255, &qword_256CFCDF8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointForeground, sub_23DD1D158);
    sub_23DDC5A44();
    type metadata accessor for OvernightMetricsChartPointForeground();
    v5 = sub_23DD1D158();
    v6[3] = MEMORY[0x24BDB8320];
    v6[4] = v5;
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v6[1] = v4;
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB84F0], v2, v6);
    atomic_store(result, (unint64_t *)&qword_256CFCEA8);
  }
  return result;
}

uint64_t sub_23DD1DCB4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9 = a3();
    result = MEMORY[0x242643BD8](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DD1DD18()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  result = qword_256CFCEB8;
  if (!qword_256CFCEB8)
  {
    sub_23DD1D190();
    v2 = v1;
    sub_23DD1D318(255);
    v4 = v3;
    sub_23DDC5A44();
    v5 = sub_23DD1D3A0();
    v6[3] = MEMORY[0x24BDB8320];
    v6[4] = v5;
    v6[1] = v4;
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB8490], v2, v6);
    atomic_store(result, (unint64_t *)&qword_256CFCEB8);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_23DD1DE18(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BDB7EA8] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_23DD1DE54(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDB7EA8] - 8) + 8))();
  return a1;
}

void sub_23DD1DE88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_256CFCEC8)
  {
    sub_23DD1CDA4();
    v3 = v2;
    sub_23DD1DF40();
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_23DD1DCB4(&qword_256CFCEC0, (uint64_t (*)(uint64_t))sub_23DD1CDA4, (uint64_t (*)(void))sub_23DD1DA94, MEMORY[0x24BDB8490]);
    v7[3] = sub_23DD1DFF4();
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDB7C38], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256CFCEC8);
  }
}

void sub_23DD1DF40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFCED0)
  {
    sub_23DD1E758(255, &qword_256CFCED8, (uint64_t (*)(uint64_t))sub_23DD1DFBC, sub_23DD1DFD8);
    sub_23DDC5C6C();
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFCED0);
  }
}

void sub_23DD1DFBC(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFCEE0, (uint64_t (*)(uint64_t))sub_23DD1CDA4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEFDB0]);
}

uint64_t sub_23DD1DFD8()
{
  return sub_23DCF535C(&qword_256CFCEE8, (uint64_t (*)(uint64_t))sub_23DD1DFBC, MEMORY[0x24BDEFDC0]);
}

unint64_t sub_23DD1DFF4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_256CFCEF0;
  if (!qword_256CFCEF0)
  {
    sub_23DD1DF40();
    v2 = v1;
    sub_23DD1DFBC(255);
    v4[2] = v3;
    v4[3] = sub_23DD1DFD8();
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = MEMORY[0x24BDEDB58];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_256CFCEF0);
  }
  return result;
}

uint64_t sub_23DD1E084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DD1E1E0(a1, (void (*)(uint64_t, double))sub_23DD1A3BC, (uint64_t (*)(_QWORD))sub_23DD1D650, a2);
}

unint64_t sub_23DD1E098()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];

  result = qword_256CFCEF8;
  if (!qword_256CFCEF8)
  {
    sub_23DD1D634(255);
    v2 = v1;
    sub_23DD1D674(255, &qword_256CFCE80, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointShadow, sub_23DD1D710);
    v4 = v3;
    sub_23DDC5A44();
    type metadata accessor for OvernightMetricsChartPointShadow();
    v5 = sub_23DD1D710();
    v6[3] = MEMORY[0x24BDB8320];
    v6[4] = v5;
    v6[1] = v4;
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB84F0], v2, v6);
    atomic_store(result, (unint64_t *)&qword_256CFCEF8);
  }
  return result;
}

void sub_23DD1E178(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x24BEE13C8]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t *sub_23DD1E1C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DD1C8FC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23DD1E1CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DD1E1E0(a1, (void (*)(uint64_t, double))sub_23DD1C1A4, (uint64_t (*)(_QWORD))sub_23DD1CEFC, a2);
}

uint64_t sub_23DD1E1E0@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, double)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for IndividualOvernightMetricsChartPoints();
  return sub_23DD1C100(a1, a2, a3, a4);
}

uint64_t sub_23DD1E24C@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for IndividualOvernightMetricsChartPoints() - 8) + 80);
  return sub_23DD1C86C(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_23DD1E298@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DD1CA48(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48), a1, *(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 40));
}

uint64_t *sub_23DD1E2AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DD1CC4C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_23DD1E2B4(uint64_t a1)
{
  sub_23DD1E2D0(a1, &qword_256CFCF20, sub_23DD1D174, sub_23DD1E344);
}

void sub_23DD1E2D0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    v6 = sub_23DDC57E0();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_23DD1E344(uint64_t a1)
{
  sub_23DD1D558(a1, &qword_256CFCF28, sub_23DD1E358);
}

void sub_23DD1E358(uint64_t a1)
{
  sub_23DD1E37C(a1, &qword_256CFCF30, (uint64_t (*)(uint64_t))sub_23DD1E3DC, MEMORY[0x24BDB7B58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7F90]);
}

void sub_23DD1E37C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a5(a1, v9, a4);
    if (!v11)
      atomic_store(v10, a2);
  }
}

void sub_23DD1E3DC(uint64_t a1)
{
  sub_23DD1E400(a1, &qword_256CFCF38, &qword_256CFCF40, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointBackground, sub_23DD1E4CC);
}

void sub_23DD1E400(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(void))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  if (!*a2)
  {
    sub_23DD1D674(255, a3, a4, a5);
    v10 = v9;
    sub_23DDC5A44();
    a4(255);
    v11 = a5();
    v14[2] = MEMORY[0x24BDB8320];
    v14[3] = v11;
    v14[0] = v10;
    v14[1] = swift_getOpaqueTypeConformance2();
    v12 = MEMORY[0x242643B9C](a1, v14, MEMORY[0x24BDB7C88], 0);
    if (!v13)
      atomic_store(v12, a2);
  }
}

uint64_t sub_23DD1E4CC()
{
  return sub_23DCF535C(&qword_256CFCF48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointBackground, (uint64_t)&unk_23DDC8B80);
}

unint64_t sub_23DD1E4E8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  result = qword_256CFCF50;
  if (!qword_256CFCF50)
  {
    sub_23DD1E2B4(255);
    v2 = v1;
    v4[0] = sub_23DD1DCB4(&qword_256CFCEB0, (uint64_t (*)(uint64_t))sub_23DD1D174, (uint64_t (*)(void))sub_23DD1DD18, MEMORY[0x24BDB84F0]);
    v4[1] = sub_23DD1DCB4(&qword_256CFCF58, (uint64_t (*)(uint64_t))sub_23DD1E344, (uint64_t (*)(void))sub_23DD1E598, MEMORY[0x24BDB8490]);
    v3 = v4;
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB7B80], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CFCF50);
  }
  return result;
}

unint64_t sub_23DD1E598()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];

  result = qword_256CFCF60;
  if (!qword_256CFCF60)
  {
    sub_23DD1E358(255);
    v2 = v1;
    sub_23DD1D674(255, &qword_256CFCF40, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointBackground, sub_23DD1E4CC);
    v4 = v3;
    sub_23DDC5A44();
    type metadata accessor for OvernightMetricsChartPointBackground();
    v5 = sub_23DD1E4CC();
    v6[4] = MEMORY[0x24BDB8320];
    v6[5] = v5;
    v6[2] = v4;
    v6[3] = swift_getOpaqueTypeConformance2();
    v6[0] = swift_getOpaqueTypeConformance2();
    v6[1] = MEMORY[0x24BDB7B48];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB7FA8], v2, v6);
    atomic_store(result, (unint64_t *)&qword_256CFCF60);
  }
  return result;
}

void sub_23DD1E680(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  if (!qword_256CFCF68)
  {
    sub_23DD1E2B4(255);
    v3 = v2;
    sub_23DD1E758(255, &qword_256CFCF70, (uint64_t (*)(uint64_t))sub_23DD1E7D0, sub_23DD1E7EC);
    v5 = v4;
    v6 = sub_23DD1E4E8();
    sub_23DD1E7D0(255);
    sub_23DD1E7EC();
    v9[0] = v3;
    v9[1] = v5;
    v9[2] = v6;
    v9[3] = swift_getOpaqueTypeConformance2();
    v7 = MEMORY[0x242643B9C](a1, v9, MEMORY[0x24BDB7C38], 0);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_256CFCF68);
  }
}

void sub_23DD1E758(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  if (!*a2)
  {
    v9[0] = a3(255);
    v9[1] = a4();
    v7 = MEMORY[0x242643B9C](a1, v9, MEMORY[0x24BDFAC10], 0);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_23DD1E7D0(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFCF78, (uint64_t (*)(uint64_t))sub_23DD1E2B4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEFDB0]);
}

uint64_t sub_23DD1E7EC()
{
  return sub_23DCF535C(&qword_256CFCF80, (uint64_t (*)(uint64_t))sub_23DD1E7D0, MEMORY[0x24BDEFDC0]);
}

void sub_23DD1E808(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (int *)type metadata accessor for IndividualOvernightMetricsChartPoints();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  v3 = sub_23DDC512C();
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(v2, v3);
  sub_23DCF9010();
  v6 = v5;
  v4(v2 + *(int *)(v5 + 36), v3);
  type metadata accessor for IndividualOvernightMetricChartPointCollection();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + v1[5]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v7 = v2 + v1[9];
  swift_bridgeObjectRelease();
  v8 = v7 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v9 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v4(v8, v3);
    v10 = v8 + *(int *)(v9 + 20);
    v4(v10, v3);
    v4(v10 + *(int *)(v6 + 36), v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + v1[10]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DD1EB08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for IndividualOvernightMetricsChartPoints();
  return sub_23DD1BB5C(a1, a2);
}

uint64_t sub_23DD1EB54()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = (int *)type metadata accessor for IndividualOvernightMetricsChartPoints();
  v3 = *((_QWORD *)v2 - 1);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v18 = *(_QWORD *)(v3 + 64);
  v5 = sub_23DDC54C8();
  v20 = *(_QWORD *)(v5 - 8);
  v21 = v5;
  v17 = *(unsigned __int8 *)(v20 + 80);
  v19 = v4;
  v6 = v0 + v4;
  v7 = sub_23DDC512C();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  sub_23DCF9010();
  v10 = v9;
  v8(v6 + *(int *)(v9 + 36), v7);
  type metadata accessor for IndividualOvernightMetricChartPointCollection();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v6 + v2[5]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v11 = v6 + v2[9];
  swift_bridgeObjectRelease();
  v12 = v11 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v13 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v8(v12, v7);
    v16 = v1;
    v14 = v12 + *(int *)(v13 + 20);
    v8(v14, v7);
    v8(v14 + *(int *)(v10 + 36), v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v6 + v2[10]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v20 + 8))(v1 + ((v19 + v18 + v17) & ~v17), v21);
  return swift_deallocObject();
}

uint64_t sub_23DD1EE28@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = type metadata accessor for IndividualOvernightMetricsChartPoints();
  v6 = (*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  sub_23DDC54C8();
  return sub_23DD1B6F0(a1, v2 + v6, a2);
}

uint64_t *sub_23DD1EEA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DD1CAE8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_23DD1EEAC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[3];

  result = qword_256CFCF98;
  if (!qword_256CFCF98)
  {
    sub_23DD1EF44();
    v2 = v1;
    v4[0] = sub_23DD1DCB4(&qword_256CFCFA8, (uint64_t (*)(uint64_t))sub_23DD1D528, sub_23DD1EFBC, MEMORY[0x24BDB84F0]);
    v4[1] = sub_23DD1EFE0();
    v4[2] = MEMORY[0x24BDB7E98];
    v3 = v4;
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB7B80], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CFCF98);
  }
  return result;
}

void sub_23DD1EF44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFCFA0)
  {
    sub_23DD1D528(255);
    sub_23DD1D454();
    v0 = sub_23DDC57E0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFCFA0);
  }
}

uint64_t sub_23DD1EFBC()
{
  return sub_23DD1DCB4(&qword_256CFCFB0, (uint64_t (*)(uint64_t))sub_23DD1D544, (uint64_t (*)(void))sub_23DD1E098, MEMORY[0x24BDB8490]);
}

unint64_t sub_23DD1EFE0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256CFCFB8;
  if (!qword_256CFCFB8)
  {
    sub_23DD1D454();
    v2 = MEMORY[0x24BDB7E98];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB8490], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256CFCFB8);
  }
  return result;
}

uint64_t HKQuantity.formattedAttributedValue(for:unit:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  char *v42;
  int v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  id v62;
  id v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  id v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t);
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  id v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;

  v140 = a2;
  v143 = a3;
  v109 = sub_23DDC6CB0();
  v108 = *(_QWORD *)(v109 - 8);
  MEMORY[0x24BDAC7A8](v109);
  v107 = (char *)&v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_23DDC6CC8();
  v105 = *(_QWORD *)(v106 - 8);
  MEMORY[0x24BDAC7A8](v106);
  v104 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_23DDC4EF8();
  v122 = *(_QWORD *)(v124 - 8);
  MEMORY[0x24BDAC7A8](v124);
  v121 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1FDA4();
  v123 = v7;
  v120 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v119 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD1FE58(0, &qword_256CFCFD0, MEMORY[0x24BDCB528]);
  v115 = v9;
  v114 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v113 = (char *)&v104 - v10;
  sub_23DD1FE58(0, &qword_256CFCFE0, MEMORY[0x24BDCB508]);
  v112 = v11;
  v111 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v110 = (char *)&v104 - v12;
  sub_23DD1FE58(0, &qword_256CFCFE8, MEMORY[0x24BDCB588]);
  v118 = v13;
  v117 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v116 = (char *)&v104 - v14;
  v139 = sub_23DDC608C();
  v137 = *(_QWORD *)(v139 - 8);
  MEMORY[0x24BDAC7A8](v139);
  v136 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDCC880];
  sub_23DD221EC(0, &qword_256CFCFF0, (uint64_t (*)(void))sub_23DD1FEB0, MEMORY[0x24BDEAD28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDCC880]);
  v138 = v17;
  v135 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v134 = (char *)&v104 - v18;
  v19 = sub_23DDC4F10();
  v129 = *(_QWORD *)(v19 - 8);
  v130 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v128 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD221EC(0, &qword_256CFD000, (uint64_t (*)(void))sub_23DD1FEF4, MEMORY[0x24BDCBFE0], v16);
  v126 = *(_QWORD *)(v21 - 8);
  v127 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v125 = (char *)&v104 - v22;
  v23 = MEMORY[0x24BEE13C8];
  sub_23DD221EC(0, &qword_256CFD010, (uint64_t (*)(void))sub_23DD1FF38, MEMORY[0x24BEE13C8], MEMORY[0x24BDCD3F8]);
  v25 = v24;
  v26 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v104 - v27;
  sub_23DD221EC(0, &qword_256CFD020, (uint64_t (*)(void))sub_23DD1FF38, v23, MEMORY[0x24BDCD460]);
  v30 = v29;
  v31 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v104 - v32;
  v34 = sub_23DDC4FB8();
  v132 = *(_QWORD *)(v34 - 8);
  v133 = v34;
  MEMORY[0x24BDAC7A8](v34);
  v131 = (char *)&v104 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36);
  v142 = (char *)&v104 - v37;
  v38 = sub_23DDC53A8();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = MEMORY[0x24BDAC7A8](v38);
  v42 = (char *)&v104 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v39 + 16))(v42, a1, v38, v40);
  v43 = (*(uint64_t (**)(char *, uint64_t))(v39 + 88))(v42, v38);
  if (v43 == *MEMORY[0x24BE3FE10] || v43 == *MEMORY[0x24BE3FDD0])
  {
    sub_23DDC68C0();
    sub_23DDC4FAC();
    return sub_23DDC4F7C();
  }
  if (v43 == *MEMORY[0x24BE3FDC8])
  {
    v44 = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
    objc_msgSend(v141, sel_doubleValueForUnit_, v44);
    v46 = v45;

    v144 = v46;
    sub_23DDC4E2C();
    sub_23DDC4FF4();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    sub_23DD1FF38();
    sub_23DD20270(&qword_256CFD038, &qword_256CFD010, MEMORY[0x24BDCD3F8], MEMORY[0x24BDCD400]);
    sub_23DDC6638();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    *(&v104 - 2) = v48;
    swift_getKeyPath();
    sub_23DD1FEF4();
    v49 = v125;
    sub_23DDC4F88();
    swift_release();
    v51 = v128;
    v50 = v129;
    v52 = v130;
    (*(void (**)(char *, _QWORD, uint64_t))(v129 + 104))(v128, *MEMORY[0x24BDCBFC0], v130);
    v53 = v142;
    v54 = v127;
    sub_23DDC4F94();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
    (*(void (**)(char *, uint64_t))(v126 + 8))(v49, v54);
    v55 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v55);
    *(&v104 - 2) = v56;
    swift_getKeyPath();
    sub_23DD1FEB0();
    v57 = v134;
    sub_23DDC4F88();
    swift_release();
    v58 = v136;
    sub_23DDC6080();
    v59 = v131;
    v60 = v138;
    sub_23DDC4F94();
    (*(void (**)(char *, uint64_t))(v137 + 8))(v58, v139);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v57, v60);
LABEL_10:
    sub_23DDC4F58();
    v102 = v133;
    v103 = *(void (**)(char *, uint64_t))(v132 + 8);
    v103(v59, v133);
    return ((uint64_t (*)(char *, uint64_t))v103)(v53, v102);
  }
  if (v43 == *MEMORY[0x24BE3FDD8])
  {
    v62 = v141;
    v63 = v140;
    v64 = v116;
    sub_23DDC4E80();
    v65 = v110;
    sub_23DDC4E5C();
    v66 = v113;
    v67 = v112;
    sub_23DDC4E8C();
    (*(void (**)(char *, uint64_t))(v111 + 8))(v65, v67);
    sub_23DD20218();
    v68 = v118;
    v69 = v115;
    sub_23DDC4E98();
    (*(void (**)(char *, uint64_t))(v114 + 8))(v66, v69);
    v70 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v70);
    *(&v104 - 2) = v71;
    swift_getKeyPath();
    sub_23DCF535C(&qword_256CFCFC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBFB0], MEMORY[0x24BDCBF98]);
    v72 = v119;
    sub_23DDC4F88();
    swift_release();
    v73 = v122;
    v74 = v121;
    v75 = v124;
    (*(void (**)(char *, _QWORD, uint64_t))(v122 + 104))(v121, *MEMORY[0x24BDCBF60], v124);
    v76 = v142;
    v77 = v123;
    sub_23DDC4F94();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v75);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v72, v77);
    v78 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v78);
    *(&v104 - 2) = v79;
    swift_getKeyPath();
    sub_23DD1FEB0();
    v80 = v134;
    sub_23DDC4F88();
    swift_release();
    v81 = v136;
    sub_23DDC6080();
    v82 = v131;
    v83 = v138;
    sub_23DDC4F94();
    (*(void (**)(char *, uint64_t))(v137 + 8))(v81, v139);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v80, v83);
    sub_23DDC4F58();
    v84 = v133;
    v85 = *(void (**)(char *, uint64_t))(v132 + 8);
    v85(v82, v133);
    v85(v76, v84);
    return (*(uint64_t (**)(char *, uint64_t))(v117 + 8))(v64, v68);
  }
  if (v43 == *MEMORY[0x24BE3FDC0])
  {
    v86 = v141;
    sub_23DDC6CE0();
    v87 = v104;
    sub_23DDC4E68();
    v88 = v107;
    sub_23DDC6CBC();
    (*(void (**)(char *, uint64_t))(v105 + 8))(v87, v106);
    sub_23DCF535C(&qword_256CFD028, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0960], MEMORY[0x24BDD0958]);
    v89 = v109;
    sub_23DDC6CD4();
    (*(void (**)(char *, uint64_t))(v108 + 8))(v88, v89);
    v90 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v90);
    *(&v104 - 2) = v91;
    swift_getKeyPath();
    sub_23DCF535C(&qword_256CFCFC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBFB0], MEMORY[0x24BDCBF98]);
    v92 = v119;
    sub_23DDC4F88();
    swift_release();
    v93 = v122;
    v94 = v121;
    v95 = v124;
    (*(void (**)(char *, _QWORD, uint64_t))(v122 + 104))(v121, *MEMORY[0x24BDCBF60], v124);
    v53 = v142;
    v96 = v123;
    sub_23DDC4F94();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v94, v95);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v92, v96);
    v97 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v97);
    *(&v104 - 2) = v98;
    swift_getKeyPath();
    sub_23DD1FEB0();
    v99 = v134;
    sub_23DDC4F88();
    swift_release();
    v100 = v136;
    sub_23DDC6080();
    v59 = v131;
    v101 = v138;
    sub_23DDC4F94();
    (*(void (**)(char *, uint64_t))(v137 + 8))(v100, v139);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v99, v101);
    goto LABEL_10;
  }
  sub_23DDC4F4C();
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v42, v38);
}

void sub_23DD1FDA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFCFC0)
  {
    sub_23DDC4F04();
    sub_23DCF535C(&qword_256CFCFC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBFB0], MEMORY[0x24BDCBF98]);
    v0 = sub_23DDC4FA0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFCFC0);
  }
}

unint64_t sub_23DD1FE1C()
{
  unint64_t result;

  result = qword_256CFCFD8;
  if (!qword_256CFCFD8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256CFCFD8);
  }
  return result;
}

void sub_23DD1FE58(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DD1FE1C();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_23DD1FEB0()
{
  unint64_t result;

  result = qword_256CFCFF8;
  if (!qword_256CFCFF8)
  {
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEAD18], MEMORY[0x24BDEAD28]);
    atomic_store(result, (unint64_t *)&qword_256CFCFF8);
  }
  return result;
}

unint64_t sub_23DD1FEF4()
{
  unint64_t result;

  result = qword_256CFD008;
  if (!qword_256CFD008)
  {
    result = MEMORY[0x242643BD8](MEMORY[0x24BDCBFD0], MEMORY[0x24BDCBFE0]);
    atomic_store(result, (unint64_t *)&qword_256CFD008);
  }
  return result;
}

unint64_t sub_23DD1FF38()
{
  unint64_t result;

  result = qword_256CFD018;
  if (!qword_256CFD018)
  {
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE13D0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&qword_256CFD018);
  }
  return result;
}

uint64_t sub_23DD1FF7C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  sub_23DD22574(0, a4, a5);
  return sub_23DDC66C8() & 1;
}

uint64_t sub_23DD1FFDC()
{
  sub_23DD225D0();
  return sub_23DDC66C8() & 1;
}

uint64_t sub_23DD20030()
{
  return sub_23DDC4F28();
}

uint64_t sub_23DD20050()
{
  return sub_23DCF535C(&qword_256CFCFC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBFB0], MEMORY[0x24BDCBF98]);
}

uint64_t sub_23DD2007C()
{
  sub_23DCF535C(&qword_256CFCFC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBFB0], MEMORY[0x24BDCBF98]);
  return sub_23DDC4FD0();
}

uint64_t sub_23DD200C4()
{
  return 8;
}

uint64_t sub_23DD200D0()
{
  return swift_release();
}

uint64_t sub_23DD200D8(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_23DD200E8()
{
  sub_23DD225D0();
  return sub_23DDC6680();
}

_QWORD *sub_23DD20128(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_23DD20134()
{
  sub_23DDC4F40();
  __break(1u);
}

void sub_23DD20150()
{
  sub_23DD1FEB0();
  sub_23DDC4FDC();
  __break(1u);
}

uint64_t sub_23DD20174()
{
  return 8;
}

uint64_t sub_23DD20180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DD1FF7C(a1, a2, a3, &qword_256CFD060, MEMORY[0x24BDEAD80]) & 1;
}

uint64_t sub_23DD201B0(uint64_t a1, uint64_t a2)
{
  return keypath_hash_26Tm(a1, a2, &qword_256CFD060, MEMORY[0x24BDEAD80]);
}

uint64_t keypath_hash_26Tm(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_23DD22574(0, a3, a4);
  return sub_23DDC6680();
}

unint64_t sub_23DD20218()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFD030;
  if (!qword_256CFD030)
  {
    sub_23DD1FE58(255, &qword_256CFCFD0, MEMORY[0x24BDCB528]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDCB538], v1);
    atomic_store(result, (unint64_t *)&qword_256CFD030);
  }
  return result;
}

uint64_t sub_23DD20270(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_23DD221EC(255, a2, (uint64_t (*)(void))sub_23DD1FF38, MEMORY[0x24BEE13C8], a3);
    result = MEMORY[0x242643BD8](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23DD202C4()
{
  sub_23DDC4F1C();
  __break(1u);
}

void sub_23DD202E0()
{
  sub_23DD1FEF4();
  sub_23DDC4FC4();
  __break(1u);
}

uint64_t sub_23DD20304()
{
  return 8;
}

uint64_t sub_23DD20310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DD1FF7C(a1, a2, a3, &qword_256CFD058, MEMORY[0x24BDCBFF0]) & 1;
}

uint64_t sub_23DD20340(uint64_t a1, uint64_t a2)
{
  return keypath_hash_26Tm(a1, a2, &qword_256CFD058, MEMORY[0x24BDCBFF0]);
}

BOOL static HKQuantity.MedialRangeRelativeStringVariant.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t HKQuantity.MedialRangeRelativeStringVariant.hash(into:)()
{
  return sub_23DDC6C5C();
}

uint64_t HKQuantity.MedialRangeRelativeStringVariant.hashValue.getter()
{
  sub_23DDC6C50();
  sub_23DDC6C5C();
  return sub_23DDC6C80();
}

uint64_t HKQuantity.formatted(for:relativeToMedialRange:middle:unit:variant:)(unint64_t a1, void *a2, void *a3, uint64_t a4, unsigned __int8 *a5)
{
  void *v5;
  void *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t result;
  void *v34;
  void *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t ObjCClassFromMetadata;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  id v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  id v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  double v73;
  void *v74;
  char *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  double v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  id v115;
  void *v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  void *v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  id v144;
  void *v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  id v160;
  id v161;
  void (*v162)(char *, uint64_t);
  void (*v163)(char *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  id v172;
  unint64_t v173;
  uint64_t v174;
  double v175;

  v6 = v5;
  v171 = a4;
  v172 = a3;
  v173 = a1;
  v9 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v9);
  v170 = (char *)&v157 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v11);
  v169 = (char *)&v157 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD221EC(0, &qword_256CFD040, (uint64_t (*)(void))sub_23DD1FF38, MEMORY[0x24BEE13C8], MEMORY[0x24BDCD4A8]);
  v174 = v13;
  v168 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v157 - v14;
  v16 = sub_23DDC671C();
  MEMORY[0x24BDAC7A8](v16);
  v17 = sub_23DDC53A8();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v157 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = *a5;
  v22 = objc_msgSend(a2, sel_maximum, v19);
  v23 = objc_msgSend(v6, sel_compare_, v22);

  v24 = objc_msgSend(a2, sel_minimum);
  v25 = objc_msgSend(v6, sel_compare_, v24);

  v26 = v171;
  objc_msgSend(v6, sel_doubleValueForUnit_, v171);
  v28 = v27;
  objc_msgSend(v172, sel_doubleValueForUnit_, v26);
  v30 = v29 - v28;
  v31 = v28 - v29;
  if (v23 == (id)1)
    v32 = v31;
  else
    v32 = v30;
  (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v21, v173, v17);
  result = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v21, v17);
  if ((_DWORD)result == *MEMORY[0x24BE3FE10])
  {
    LODWORD(v173) = v25 == (id)-1;
    LODWORD(v172) = v23 == (id)1;
    sub_23DDC6710();
    sub_23DDC6704();
    v175 = v32;
    sub_23DDC4E50();
    v34 = (void *)sub_23DD20270(&qword_256CFD048, &qword_256CFD040, MEMORY[0x24BDCD4A8], MEMORY[0x24BDCD4C0]);
    v35 = (void *)sub_23DD0B190();
    v36 = v174;
    sub_23DDC66E0();
    v37 = *(void (**)(char *, uint64_t))(v168 + 8);
    v37(v15, v36);
    v162 = v37;
    sub_23DDC6704();
    sub_23DDC6728();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v159 = ObjCClassFromMetadata;
    v158 = (id)objc_opt_self();
    v39 = objc_msgSend(v158, sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    v171 = sub_23DDC6770();
    v168 = v40;
    sub_23DDC6710();
    sub_23DDC6704();
    v175 = v32;
    sub_23DDC4E50();
    v161 = v34;
    v160 = v35;
    sub_23DDC66E0();
    v37(v15, v36);
    sub_23DDC6704();
    sub_23DDC6728();
    v41 = v158;
    v42 = v159;
    v43 = objc_msgSend(v158, sel_bundleForClass_, v159);
    sub_23DDC5168();
    v44 = sub_23DDC6770();
    v165 = v45;
    v166 = v44;
    sub_23DDC6710();
    sub_23DDC6704();
    v175 = v32;
    sub_23DDC4E50();
    sub_23DDC66E0();
    v46 = v162;
    v162(v15, v36);
    sub_23DDC6704();
    sub_23DDC6728();
    v47 = objc_msgSend(v41, sel_bundleForClass_, v42);
    sub_23DDC5168();
    v48 = sub_23DDC6770();
    v163 = v49;
    v164 = v48;
    sub_23DDC6710();
    sub_23DDC6704();
    v175 = v32;
    sub_23DDC4E50();
    sub_23DDC66E0();
    v46(v15, v36);
    sub_23DDC6704();
    sub_23DDC6728();
    v50 = objc_msgSend(v41, sel_bundleForClass_, v42);
    sub_23DDC5168();
    v51 = sub_23DDC6770();
    v53 = sub_23DD22248(v171, v168, v166, v165, v164, (uint64_t)v163, v51, v52, (char)v172, v167, v173);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    return v53;
  }
  v54 = v168;
  v55 = v15;
  v56 = v174;
  if ((_DWORD)result == *MEMORY[0x24BE3FDD0])
  {
    LODWORD(v172) = v25 == (id)-1;
    LODWORD(v171) = v23 == (id)1;
    sub_23DDC6710();
    sub_23DDC6704();
    v175 = v32;
    v57 = v55;
    sub_23DDC4E44();
    v58 = sub_23DD20270(&qword_256CFD048, &qword_256CFD040, MEMORY[0x24BDCD4A8], MEMORY[0x24BDCD4C0]);
    v173 = sub_23DD0B190();
    sub_23DDC66E0();
    v163 = *(void (**)(char *, uint64_t))(v54 + 8);
    v163(v57, v56);
    v165 = 0xD00000000000001FLL;
    sub_23DDC6704();
    sub_23DDC6728();
    type metadata accessor for HealthBalanceUI();
    v59 = (void *)swift_getObjCClassFromMetadata();
    v60 = (void *)objc_opt_self();
    v161 = v60;
    v160 = v59;
    v61 = objc_msgSend(v60, sel_bundleForClass_, v59);
    sub_23DDC5168();
    v168 = sub_23DDC6770();
    v166 = v62;
    sub_23DDC6710();
    sub_23DDC6704();
    v175 = v32;
    sub_23DDC4E44();
    v159 = v58;
    sub_23DDC66E0();
    v63 = v163;
    v163(v57, v56);
    sub_23DDC6704();
    sub_23DDC6728();
    v64 = objc_msgSend(v60, sel_bundleForClass_, v59);
    sub_23DDC5168();
    v65 = sub_23DDC6770();
    v164 = v66;
    v165 = v65;
    sub_23DDC6710();
    sub_23DDC6704();
    v175 = v32;
    sub_23DDC4E44();
    sub_23DDC66E0();
    v63(v57, v56);
    sub_23DDC6704();
    sub_23DDC6728();
    v67 = v161;
    v68 = v160;
    v69 = objc_msgSend(v161, sel_bundleForClass_, v160);
    sub_23DDC5168();
    v162 = (void (*)(char *, uint64_t))sub_23DDC6770();
    v71 = v70;
    sub_23DDC6710();
    sub_23DDC6704();
    v175 = v32;
    sub_23DDC4E44();
    sub_23DDC66E0();
    v63(v57, v56);
    sub_23DDC6704();
    sub_23DDC6728();
    v72 = objc_msgSend(v67, sel_bundleForClass_, v68);
LABEL_11:
    v89 = v72;
    sub_23DDC5168();
    v90 = sub_23DDC6770();
    v53 = sub_23DD22248(v168, v166, v165, v164, (uint64_t)v162, v71, v90, v91, v171, v167, (char)v172);
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if ((_DWORD)result == *MEMORY[0x24BE3FDC8])
  {
    LODWORD(v172) = v25 == (id)-1;
    LODWORD(v171) = v23 == (id)1;
    v73 = v32 * 100.0;
    sub_23DDC6710();
    sub_23DDC6704();
    v175 = v73;
    sub_23DDC4E38();
    v74 = (void *)sub_23DD20270(&qword_256CFD048, &qword_256CFD040, MEMORY[0x24BDCD4A8], MEMORY[0x24BDCD4C0]);
    v173 = sub_23DD0B190();
    sub_23DDC66E0();
    v163 = *(void (**)(char *, uint64_t))(v54 + 8);
    v163(v55, v56);
    v75 = v55;
    sub_23DDC6704();
    sub_23DDC6728();
    type metadata accessor for HealthBalanceUI();
    v76 = swift_getObjCClassFromMetadata();
    v160 = (id)objc_opt_self();
    v77 = objc_msgSend(v160, sel_bundleForClass_, v76);
    sub_23DDC5168();
    v168 = sub_23DDC6770();
    v166 = v78;
    sub_23DDC6710();
    sub_23DDC6704();
    v175 = v73;
    sub_23DDC4E38();
    v161 = v74;
    sub_23DDC66E0();
    v79 = v163;
    v163(v75, v56);
    sub_23DDC6704();
    sub_23DDC6728();
    v80 = v160;
    v81 = objc_msgSend(v160, sel_bundleForClass_, v76);
    sub_23DDC5168();
    v82 = sub_23DDC6770();
    v164 = v83;
    v165 = v82;
    sub_23DDC6710();
    sub_23DDC6704();
    v175 = v73;
    sub_23DDC4E38();
    v84 = v174;
    sub_23DDC66E0();
    v85 = v84;
    v79(v75, v84);
    sub_23DDC6704();
    sub_23DDC6728();
    v86 = v76;
    v87 = objc_msgSend(v80, sel_bundleForClass_, v76);
    sub_23DDC5168();
    v162 = (void (*)(char *, uint64_t))sub_23DDC6770();
    v71 = v88;
    sub_23DDC6710();
    sub_23DDC6704();
    v175 = v73;
    sub_23DDC4E38();
    sub_23DDC66E0();
    v79(v75, v85);
    sub_23DDC6704();
    sub_23DDC6728();
    v72 = objc_msgSend(v80, sel_bundleForClass_, v86);
    goto LABEL_11;
  }
  if ((_DWORD)result == *MEMORY[0x24BE3FDD8])
  {
    LODWORD(v174) = v25 == (id)-1;
    LODWORD(v173) = v23 == (id)1;
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    v92 = swift_getObjCClassFromMetadata();
    v93 = (void *)objc_opt_self();
    v94 = objc_msgSend(v93, sel_bundleForClass_, v92);
    sub_23DDC5168();
    v172 = (id)sub_23DDC6770();
    v96 = v95;
    sub_23DDC66D4();
    v97 = objc_msgSend(v93, (SEL)0x250EA0701, v92);
    sub_23DDC5168();
    v98 = sub_23DDC6770();
    v100 = v99;
    sub_23DDC66D4();
    v101 = objc_msgSend(v93, (SEL)0x250EA0701, v92);
    sub_23DDC5168();
    v102 = sub_23DDC6770();
    v104 = v103;
    sub_23DDC66D4();
    v105 = objc_msgSend(v93, sel_bundleForClass_, v92);
    sub_23DDC5168();
    v106 = sub_23DDC6770();
    v53 = sub_23DD22248((uint64_t)v172, v96, v98, v100, v102, v104, v106, v107, v173, v167, v174);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if ((_DWORD)result != *MEMORY[0x24BE3FDC0])
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    return 0;
  }
  v108 = v32 / 60.0;
  if (v32 / 60.0 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v108 >= 9.22337204e18)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v109 = v32 / 3600.0;
  if ((*(_QWORD *)&v108 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (COERCE_UNSIGNED_INT64(v32 / 3600.0) & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_35;
  }
  if (v109 <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v109 < 9.22337204e18)
  {
    v111 = (uint64_t)v108 % 60;
    v112 = (uint64_t)v109;
    if ((uint64_t)v109)
    {
      if (v111)
      {
        LODWORD(v174) = v25 == (id)-1;
        LODWORD(v173) = v23 == (id)1;
        sub_23DDC6710();
        sub_23DDC6704();
        v175 = *(double *)&v112;
        sub_23DDC66EC();
        sub_23DDC6704();
        v175 = *(double *)&v111;
        sub_23DDC66EC();
        sub_23DDC6704();
        sub_23DDC6728();
        type metadata accessor for HealthBalanceUI();
        v113 = swift_getObjCClassFromMetadata();
        v114 = (void *)objc_opt_self();
        v115 = objc_msgSend(v114, sel_bundleForClass_, v113);
        sub_23DDC5168();
        v116 = (void *)sub_23DDC6770();
        v171 = v117;
        v172 = v116;
        sub_23DDC6710();
        sub_23DDC6704();
        v175 = *(double *)&v112;
        sub_23DDC66EC();
        sub_23DDC6704();
        v175 = *(double *)&v111;
        sub_23DDC66EC();
        sub_23DDC6704();
        sub_23DDC6728();
        v118 = objc_msgSend(v114, sel_bundleForClass_, v113);
        sub_23DDC5168();
        v168 = sub_23DDC6770();
        v166 = v119;
        sub_23DDC6710();
        sub_23DDC6704();
        v175 = *(double *)&v112;
        sub_23DDC66EC();
        sub_23DDC6704();
        v175 = *(double *)&v111;
        sub_23DDC66EC();
        sub_23DDC6704();
        sub_23DDC6728();
        v120 = objc_msgSend(v114, sel_bundleForClass_, v113);
        sub_23DDC5168();
        v165 = sub_23DDC6770();
        v122 = v121;
        sub_23DDC6710();
        sub_23DDC6704();
        v175 = *(double *)&v112;
        sub_23DDC66EC();
        sub_23DDC6704();
        v175 = *(double *)&v111;
        sub_23DDC66EC();
        sub_23DDC6704();
        sub_23DDC6728();
        v123 = objc_msgSend(v114, sel_bundleForClass_, v113);
        sub_23DDC5168();
        v124 = sub_23DDC6770();
        v53 = sub_23DD22248((uint64_t)v172, v171, v168, v166, v165, v122, v124, v125, v173, v167, v174);
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      LODWORD(v174) = v25 == (id)-1;
      LODWORD(v173) = v23 == (id)1;
      sub_23DDC6710();
      sub_23DDC6704();
      v175 = *(double *)&v112;
      sub_23DDC66EC();
      sub_23DDC6704();
      sub_23DDC6728();
      type metadata accessor for HealthBalanceUI();
      v142 = swift_getObjCClassFromMetadata();
      v143 = (void *)objc_opt_self();
      v144 = objc_msgSend(v143, sel_bundleForClass_, v142);
      sub_23DDC5168();
      v145 = (void *)sub_23DDC6770();
      v171 = v146;
      v172 = v145;
      sub_23DDC6710();
      sub_23DDC6704();
      v175 = *(double *)&v112;
      sub_23DDC66EC();
      sub_23DDC6704();
      sub_23DDC6728();
      v147 = objc_msgSend(v143, sel_bundleForClass_, v142);
      sub_23DDC5168();
      v168 = sub_23DDC6770();
      v149 = v148;
      sub_23DDC6710();
      sub_23DDC6704();
      v175 = *(double *)&v112;
      sub_23DDC66EC();
      sub_23DDC6704();
      sub_23DDC6728();
      v150 = objc_msgSend(v143, sel_bundleForClass_, v142);
      sub_23DDC5168();
      v151 = sub_23DDC6770();
      v153 = v152;
      sub_23DDC6710();
      sub_23DDC6704();
      v175 = *(double *)&v112;
      sub_23DDC66EC();
      sub_23DDC6704();
      sub_23DDC6728();
      v154 = objc_msgSend(v143, sel_bundleForClass_, v142);
      sub_23DDC5168();
      v155 = sub_23DDC6770();
      v141 = sub_23DD22248((uint64_t)v172, v171, v168, v149, v151, v153, v155, v156, v173, v167, v174);
    }
    else
    {
      LODWORD(v174) = v25 == (id)-1;
      LODWORD(v173) = v23 == (id)1;
      sub_23DDC6710();
      sub_23DDC6704();
      v175 = *(double *)&v111;
      sub_23DDC66EC();
      sub_23DDC6704();
      sub_23DDC6728();
      type metadata accessor for HealthBalanceUI();
      v126 = swift_getObjCClassFromMetadata();
      v127 = (void *)objc_opt_self();
      v128 = objc_msgSend(v127, sel_bundleForClass_, v126);
      sub_23DDC5168();
      v129 = (void *)sub_23DDC6770();
      v171 = v130;
      v172 = v129;
      sub_23DDC6710();
      sub_23DDC6704();
      v175 = *(double *)&v111;
      sub_23DDC66EC();
      sub_23DDC6704();
      sub_23DDC6728();
      v131 = objc_msgSend(v127, sel_bundleForClass_, v126);
      sub_23DDC5168();
      v168 = sub_23DDC6770();
      v133 = v132;
      sub_23DDC6710();
      sub_23DDC6704();
      v175 = *(double *)&v111;
      sub_23DDC66EC();
      sub_23DDC6704();
      sub_23DDC6728();
      v134 = objc_msgSend(v127, sel_bundleForClass_, v126);
      sub_23DDC5168();
      v135 = sub_23DDC6770();
      v137 = v136;
      sub_23DDC6710();
      sub_23DDC6704();
      v175 = *(double *)&v111;
      sub_23DDC66EC();
      sub_23DDC6704();
      sub_23DDC6728();
      v138 = objc_msgSend(v127, sel_bundleForClass_, v126);
      sub_23DDC5168();
      v139 = sub_23DDC6770();
      v141 = sub_23DD22248((uint64_t)v172, v171, v168, v133, v135, v137, v139, v140, v173, v167, v174);
    }
    v53 = v141;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_23DD221EC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t sub_23DD22248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, char a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjCClassFromMetadata;
  id v16;

  v13 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v13);
  v14 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v14);
  if ((a9 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((a10 & 1) != 0)
      return a5;
  }
  else if ((a11 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((a10 & 1) != 0)
      return a7;
    else
      return a3;
  }
  else
  {
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v16 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    return sub_23DDC6770();
  }
  return a1;
}

unint64_t sub_23DD22464()
{
  unint64_t result;

  result = qword_256CFD050;
  if (!qword_256CFD050)
  {
    result = MEMORY[0x242643BD8](&protocol conformance descriptor for HKQuantity.MedialRangeRelativeStringVariant, &type metadata for HKQuantity.MedialRangeRelativeStringVariant);
    atomic_store(result, (unint64_t *)&qword_256CFD050);
  }
  return result;
}

uint64_t _s32MedialRangeRelativeStringVariantOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DD224F4 + 4 * byte_23DDC8195[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DD22528 + 4 * byte_23DDC8190[v4]))();
}

uint64_t sub_23DD22528(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD22530(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DD22538);
  return result;
}

uint64_t sub_23DD22544(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DD2254CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DD22550(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD22558(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HKQuantity.MedialRangeRelativeStringVariant()
{
  return &type metadata for HKQuantity.MedialRangeRelativeStringVariant;
}

void sub_23DD22574(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DDC6CA4();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_23DD225D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFD068)
  {
    sub_23DDC4F34();
    sub_23DDC4F04();
    v0 = sub_23DDC6CA4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFD068);
  }
}

id InternalSettingsModelProvider.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

_QWORD *InternalSettingsModelProvider.__allocating_init(healthStore:settingsProvider:)(void *a1, uint64_t a2)
{
  _QWORD *v4;
  id v5;
  uint64_t v6;

  v4 = (_QWORD *)swift_allocObject();
  sub_23DDC5234();
  v4[2] = a1;
  sub_23DD2274C();
  v5 = a1;
  v4[3] = sub_23DDC6914();
  v6 = sub_23DDC6920();

  v4[4] = v6;
  v4[5] = a2;
  return v4;
}

uint64_t InternalSettingsModelProvider.init(healthStore:settingsProvider:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  uint64_t v7;

  v3 = v2;
  sub_23DDC5234();
  *(_QWORD *)(v2 + 16) = a1;
  sub_23DD2274C();
  v6 = a1;
  *(_QWORD *)(v2 + 24) = sub_23DDC6914();
  v7 = sub_23DDC6920();

  *(_QWORD *)(v3 + 32) = v7;
  *(_QWORD *)(v3 + 40) = a2;
  return v3;
}

unint64_t sub_23DD2274C()
{
  unint64_t result;

  result = qword_256CFD078;
  if (!qword_256CFD078)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256CFD078);
  }
  return result;
}

uint64_t InternalSettingsModelProvider.notificationThreshold.getter()
{
  swift_getKeyPath();
  sub_23DD22914();
  sub_23DDC5210();
  swift_release();
  return sub_23DDC5708();
}

uint64_t sub_23DD227FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  swift_getKeyPath();
  sub_23DD22914();
  sub_23DDC5210();
  swift_release();
  result = sub_23DDC5708();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_23DD2287C()
{
  swift_getKeyPath();
  sub_23DD22914();
  sub_23DDC5204();
  return swift_release();
}

unint64_t sub_23DD22914()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFD080;
  if (!qword_256CFD080)
  {
    v1 = type metadata accessor for InternalSettingsModelProvider();
    result = MEMORY[0x242643BD8](&protocol conformance descriptor for InternalSettingsModelProvider, v1);
    atomic_store(result, (unint64_t *)&qword_256CFD080);
  }
  return result;
}

uint64_t type metadata accessor for InternalSettingsModelProvider()
{
  uint64_t result;

  result = qword_256CFD0B8;
  if (!qword_256CFD0B8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t InternalSettingsModelProvider.notificationThreshold.setter()
{
  swift_getKeyPath();
  sub_23DD22914();
  sub_23DDC5204();
  return swift_release();
}

uint64_t sub_23DD22A30()
{
  return sub_23DD22F9C();
}

void (*InternalSettingsModelProvider.notificationThreshold.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  swift_getKeyPath();
  v4[4] = OBJC_IVAR____TtC15HealthBalanceUI29InternalSettingsModelProvider___observationRegistrar;
  v4[2] = v2;
  v4[5] = sub_23DD22914();
  sub_23DDC5210();
  swift_release();
  *v4 = sub_23DDC5708();
  *((_BYTE *)v4 + 8) = 0;
  return sub_23DD22AEC;
}

void sub_23DD22AEC(_QWORD **a1)
{
  _QWORD *v1;

  v1 = *a1;
  swift_getKeyPath();
  v1[2] = v1[3];
  sub_23DDC5204();
  swift_release();
  free(v1);
}

uint64_t InternalSettingsModelProvider.resetAll()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  sub_23DDC6830();
  v1[3] = sub_23DDC6824();
  v1[4] = sub_23DDC67F4();
  v1[5] = v2;
  return swift_task_switch();
}

uint64_t sub_23DD22C1C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_23DD22C6C;
  return sub_23DDC692C();
}

uint64_t sub_23DD22C6C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DD22CCC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_23DD22D1C;
  return sub_23DDC692C();
}

uint64_t sub_23DD22D1C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DD22D7C()
{
  uint64_t v0;

  swift_release();
  sub_23DDC5720();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DD22DB8()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DD22DEC()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id *InternalSettingsModelProvider.deinit()
{
  id *v0;
  char *v1;
  uint64_t v2;

  swift_release();
  v1 = (char *)v0 + OBJC_IVAR____TtC15HealthBalanceUI29InternalSettingsModelProvider___observationRegistrar;
  v2 = sub_23DDC5240();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t InternalSettingsModelProvider.__deallocating_deinit()
{
  id *v0;
  char *v1;
  uint64_t v2;

  swift_release();
  v1 = (char *)v0 + OBJC_IVAR____TtC15HealthBalanceUI29InternalSettingsModelProvider___observationRegistrar;
  v2 = sub_23DDC5240();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_23DD22EF4()
{
  return type metadata accessor for InternalSettingsModelProvider();
}

uint64_t sub_23DD22EFC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC5240();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for InternalSettingsModelProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InternalSettingsModelProvider.__allocating_init(healthStore:settingsProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_23DD22F9C()
{
  return sub_23DDC5714();
}

uint64_t static ChangeCountColorThreshold.partiallyOutOfRange.getter()
{
  return 1;
}

uint64_t static ChangeCountColorThreshold.outOfRange.getter()
{
  return 2;
}

ValueMetadata *type metadata accessor for ChangeCountColorThreshold()
{
  return &type metadata for ChangeCountColorThreshold;
}

uint64_t Transaction.isTogglingOvernightMetricsChartTimeScope.getter()
{
  unsigned __int8 v1;

  sub_23DD23034();
  sub_23DDC5AC8();
  return v1;
}

unint64_t sub_23DD23034()
{
  unint64_t result;

  result = qword_256CFD160;
  if (!qword_256CFD160)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC8474, &type metadata for TimeScopeTransitionTransactionKey);
    atomic_store(result, (unint64_t *)&qword_256CFD160);
  }
  return result;
}

uint64_t Transaction.isTogglingOvernightMetricsChartTimeScope.setter()
{
  sub_23DD23034();
  return sub_23DDC5AD4();
}

uint64_t (*Transaction.isTogglingOvernightMetricsChartTimeScope.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = sub_23DD23034();
  sub_23DDC5AC8();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return sub_23DD23118;
}

uint64_t sub_23DD23118(uint64_t a1)
{
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 16);
  return sub_23DDC5AD4();
}

uint64_t sub_23DD2314C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  sub_23DD23034();
  result = sub_23DDC5AC8();
  *a1 = v3;
  return result;
}

uint64_t sub_23DD2319C()
{
  sub_23DD23034();
  return sub_23DDC5AD4();
}

ValueMetadata *type metadata accessor for TimeScopeTransitionTransactionKey()
{
  return &type metadata for TimeScopeTransitionTransactionKey;
}

void sub_23DD231F4(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_23DD231FC()
{
  return sub_23DDC5BDC();
}

uint64_t sub_23DD23208(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  sub_23DD6D360(*a1, *a2);
  if ((v6 & 1) != 0 && (sub_23DD6D360(v2, v4), (v7 & 1) != 0))
    return sub_23DD9B944(v3, v5);
  else
    return 0;
}

void sub_23DD23274(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t sub_23DD23284(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_23DDC54C8();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_23DD2331C(uint64_t a1, uint64_t a2, double a3)
{
  int64_t v3;
  uint64_t v4;
  unint64_t result;
  double *v9;
  double v10;
  char v11;
  uint64_t v12;
  double v13;
  char v14;
  double v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v20 = MEMORY[0x24BEE4AF8];
  result = sub_23DD92B28(0, v3, 0);
  v4 = v20;
  v9 = (double *)(a1 + 40);
  while (*(_QWORD *)(a2 + 16))
  {
    v10 = *v9;
    result = sub_23DD7693C(*(v9 - 1));
    if ((v11 & 1) == 0)
      goto LABEL_12;
    v12 = *(_QWORD *)(a2 + 56);
    v13 = *(double *)(v12 + 8 * result);
    result = sub_23DD7693C(v10);
    if ((v14 & 1) == 0)
      goto LABEL_13;
    v15 = v13 - a3;
    v16 = *(double *)(v12 + 8 * result) + a3;
    if (v15 > v16)
      goto LABEL_14;
    v18 = *(_QWORD *)(v20 + 16);
    v17 = *(_QWORD *)(v20 + 24);
    if (v18 >= v17 >> 1)
      result = sub_23DD92B28(v17 > 1, v18 + 1, 1);
    *(_QWORD *)(v20 + 16) = v18 + 1;
    v19 = v20 + 16 * v18;
    *(double *)(v19 + 32) = v15;
    *(double *)(v19 + 40) = v16;
    v9 += 2;
    if (!--v3)
      return v4;
  }
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_23DD23448(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t i;
  BOOL v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;

  v40 = a2;
  v5 = sub_23DDC54C8();
  v37 = *(_QWORD *)(v5 - 8);
  v38 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v35 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD02DFC();
  result = sub_23DDC6ADC();
  v8 = result;
  v9 = 0;
  v39 = a1;
  v12 = *(_QWORD *)(a1 + 64);
  v11 = a1 + 64;
  v10 = v12;
  v13 = 1 << *(_BYTE *)(v11 - 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v10;
  v32 = v11;
  v33 = (unint64_t)(v13 + 63) >> 6;
  v34 = result + 64;
  v36 = result;
  v17 = v37;
  v16 = v38;
  v18 = v35;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v41 = (v15 - 1) & v15;
  v42 = v9;
  for (i = __clz(__rbit64(v15)) | (v9 << 6); ; i = __clz(__rbit64(v22)) + (v21 << 6))
  {
    v24 = v39;
    v25 = *(_QWORD *)(v17 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v18, *(_QWORD *)(v39 + 48) + v25, v16);
    v26 = 8 * i;
    v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    v28 = v40;
    swift_bridgeObjectRetain();
    v43 = sub_23DD2331C(v27, v28, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v34 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v8 = v36;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v36 + 48) + v25, v18, v16);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v26) = v43;
    v29 = *(_QWORD *)(v8 + 16);
    v20 = __OFADD__(v29, 1);
    v30 = v29 + 1;
    if (v20)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    *(_QWORD *)(v8 + 16) = v30;
    v15 = v41;
    v9 = v42;
    if (v41)
      goto LABEL_4;
LABEL_5:
    v20 = __OFADD__(v9, 1);
    v21 = v9 + 1;
    if (v20)
      goto LABEL_25;
    if (v21 >= v33)
      return v8;
    v22 = *(_QWORD *)(v32 + 8 * v21);
    if (!v22)
      break;
LABEL_15:
    v41 = (v22 - 1) & v22;
    v42 = v21;
  }
  v23 = v21 + 1;
  if (v21 + 1 >= v33)
    return v8;
  v22 = *(_QWORD *)(v32 + 8 * v23);
  if (v22)
    goto LABEL_14;
  v23 = v21 + 2;
  if (v21 + 2 >= v33)
    return v8;
  v22 = *(_QWORD *)(v32 + 8 * v23);
  if (v22)
    goto LABEL_14;
  v23 = v21 + 3;
  if (v21 + 3 >= v33)
    return v8;
  v22 = *(_QWORD *)(v32 + 8 * v23);
  if (v22)
  {
LABEL_14:
    v21 = v23;
    goto LABEL_15;
  }
  while (1)
  {
    v21 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v21 >= v33)
      return v8;
    v22 = *(_QWORD *)(v32 + 8 * v21);
    ++v23;
    if (v22)
      goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_23DD23704(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  char v38;
  double v39;
  double v40;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  double v43;
  unint64_t v44;
  char v45;
  double v46;
  double v47;
  double v48;
  unint64_t v49;
  char v50;
  double v51;
  double v52;
  double v53;
  double v55;
  char v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  char v62;
  BOOL v63;
  double v64;
  double v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  double *v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  void (*v77)(_QWORD *@<X8>);
  void (*v78)(_QWORD *@<X8>);
  char *v79;
  double v80;
  char v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  double v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t result;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  void (*v103)(_QWORD *@<X8>);
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t, uint64_t);
  double v111[4];

  v8 = sub_23DDC54C8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v101 = (char *)&v97 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v97 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v105 = (uint64_t)&v97 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v107 = (char *)&v97 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v97 - v22;
  sub_23DCFB328(0, qword_256CFD168, v24, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (unint64_t)&v97 - v29;
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v97 - v32;
  v34 = a3 * 0.5;
  *(double *)&v104 = COERCE_DOUBLE(sub_23DCFFE14(MEMORY[0x24BEE4AF8]));
  *(_QWORD *)&v111[2] = MEMORY[0x24BEE4B08];
  v110 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v110(v33, 1, 1, v8);
  v35 = a1;
  v109 = *(_QWORD *)(a1 + 16);
  if (!v109)
  {
    swift_bridgeObjectRelease();
    v77 = 0;
    v78 = 0;
    goto LABEL_67;
  }
  v106 = v30;
  v100 = v27;
  v98 = v11;
  v99 = v16;
  v102 = a2;
  v103 = 0;
  v36 = 0;
  v37 = 0.0;
  v38 = 1;
  v39 = 0.0;
  v40 = 0.0;
  isUniquelyReferenced_nonNull_native = 1;
  v108 = a1;
  while (1)
  {
    v43 = v37;
    v37 = *(double *)(v35 + 8 * v36 + 32);
    sub_23DDC54A4();
    if ((v38 & 1) != 0)
      goto LABEL_4;
    v42 = v106;
    sub_23DD24088((uint64_t)v33, v106);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v42, 1, v8) != 1)
      break;
    sub_23DD24024(v42);
LABEL_4:
    ++v36;
    sub_23DD24024((uint64_t)v33);
    v42 = *(_QWORD *)(v9 + 16);
    ((void (*)(char *, char *, uint64_t))v42)(v33, v23, v8);
    v110(v33, 0, 1, v8);
    v30 = *(_QWORD *)(v9 + 8);
    ((void (*)(char *, uint64_t))v30)(v23, v8);
    v38 = 0;
    v35 = v108;
    if (v109 == v36)
    {
      swift_bridgeObjectRelease();
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_54:
        v77 = 0;
        v78 = v103;
        goto LABEL_67;
      }
      v76 = (uint64_t)v100;
      sub_23DD24088((uint64_t)v33, (uint64_t)v100);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v76, 1, v8) == 1)
      {
        sub_23DD24024(v76);
        goto LABEL_54;
      }
      v79 = v99;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v99, v76, v8);
      v9 = (uint64_t)v101;
      ((void (*)(char *, char *, uint64_t))v42)(v101, v79, v8);
      v80 = *(double *)&v104;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v111[0] = v80;
      v36 = sub_23DD76970(v9);
      v82 = *(_QWORD *)(*(_QWORD *)&v80 + 16);
      v83 = (v81 & 1) == 0;
      v84 = v82 + v83;
      if (!__OFADD__(v82, v83))
      {
        LOBYTE(v23) = v81;
        if (*(_QWORD *)(*(_QWORD *)&v80 + 24) >= v84)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            goto LABEL_81;
          goto LABEL_61;
        }
        sub_23DD77320(v84, isUniquelyReferenced_nonNull_native);
        v85 = sub_23DD76970(v9);
        if ((v23 & 1) == (v86 & 1))
        {
          v36 = v85;
          goto LABEL_61;
        }
LABEL_82:
        result = sub_23DDC6C20();
        __break(1u);
        return result;
      }
      goto LABEL_77;
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v107, v42, v8);
  if ((sub_23DDC54BC() & 1) == 0)
    goto LABEL_18;
  if (!*(_QWORD *)(a2 + 16))
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_23DD566B0(0, *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) + 1, 1, (_QWORD *)isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v42 + 8 * v36) = isUniquelyReferenced_nonNull_native;
    goto LABEL_64;
  }
  v44 = sub_23DD7693C(v43);
  if ((v45 & 1) == 0)
    goto LABEL_69;
  v42 = *(_QWORD *)(a2 + 56);
  v46 = *(double *)(v42 + 8 * v44);
  v47 = v46 - v34;
  v48 = v34 + v46;
  if (v46 - v34 > v34 + v46)
    goto LABEL_70;
  v49 = sub_23DD7693C(v37);
  if ((v50 & 1) == 0)
    goto LABEL_71;
  v51 = *(double *)(v42 + 8 * v49);
  v52 = v51 - v34;
  v53 = v34 + v51;
  if (v52 > v53)
    goto LABEL_72;
  if (v53 < v47 || v48 < v52)
  {
LABEL_18:
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = 1;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v107, v8);
    }
    else
    {
      a2 = *(_QWORD *)(v9 + 16);
      isUniquelyReferenced_nonNull_native = v105;
      ((void (*)(uint64_t, char *, uint64_t))a2)(v105, v107, v8);
      sub_23DD24078((uint64_t)v103);
      v55 = *(double *)&v104;
      v42 = swift_isUniquelyReferenced_nonNull_native();
      v111[0] = v55;
      v30 = sub_23DD76970(isUniquelyReferenced_nonNull_native);
      v57 = *(_QWORD *)(*(_QWORD *)&v55 + 16);
      v58 = (v56 & 1) == 0;
      v59 = v57 + v58;
      if (__OFADD__(v57, v58))
        goto LABEL_73;
      v60 = v56;
      if (*(_QWORD *)(*(_QWORD *)&v55 + 24) >= v59)
      {
        if ((v42 & 1) == 0)
          sub_23DD786A4();
      }
      else
      {
        sub_23DD77320(v59, v42);
        v61 = sub_23DD76970(v105);
        if ((v60 & 1) != (v62 & 1))
          goto LABEL_82;
        v30 = v61;
      }
      v64 = v111[0];
      swift_bridgeObjectRelease();
      if ((v60 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        v65 = v64;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)&v64 + 8 * (v30 >> 6) + 64) |= 1 << v30;
        isUniquelyReferenced_nonNull_native = *(_QWORD *)(*(_QWORD *)&v64 + 48) + *(_QWORD *)(v9 + 72) * v30;
        swift_bridgeObjectRetain();
        ((void (*)(uint64_t, uint64_t, uint64_t))a2)(isUniquelyReferenced_nonNull_native, v105, v8);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v64 + 56) + 8 * v30) = MEMORY[0x24BEE4AF8];
        v66 = *(_QWORD *)(*(_QWORD *)&v64 + 16);
        v67 = __OFADD__(v66, 1);
        v68 = v66 + 1;
        if (v67)
          goto LABEL_74;
        v65 = v64;
        *(_QWORD *)(*(_QWORD *)&v64 + 16) = v68;
      }
      v69 = *(_QWORD *)(*(_QWORD *)&v65 + 56);
      swift_bridgeObjectRelease();
      v70 = *(_QWORD **)(v69 + 8 * v30);
      v71 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v69 + 8 * v30) = v70;
      *(double *)&v104 = v65;
      if ((v71 & 1) == 0)
      {
        v70 = sub_23DD566B0(0, v70[2] + 1, 1, v70);
        *(_QWORD *)(v69 + 8 * v30) = v70;
      }
      v73 = v70[2];
      v72 = v70[3];
      if (v73 >= v72 >> 1)
      {
        v70 = sub_23DD566B0((_QWORD *)(v72 > 1), v73 + 1, 1, v70);
        *(_QWORD *)(v69 + 8 * v30) = v70;
      }
      v70[2] = v73 + 1;
      v74 = (double *)&v70[2 * v73];
      v74[4] = v39;
      v74[5] = v40;
      v75 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v75(v105, v8);
      isUniquelyReferenced_nonNull_native = 1;
      v39 = 0.0;
      v103 = sub_23DD23274;
      v40 = 0.0;
      a2 = v102;
      v75((uint64_t)v107, v8);
    }
    goto LABEL_4;
  }
  sub_23DD9BCD0(v111, v43);
  sub_23DD9BCD0(v111, v37);
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v63 = v37 > v43;
    if (v37 >= v43)
    {
      if (v43 >= v37)
      {
        v40 = v43;
      }
      else
      {
        v40 = v37;
        if (v43 > v37)
          goto LABEL_80;
      }
    }
    else
    {
      v40 = v43;
      v43 = v37;
      if (v63)
        goto LABEL_76;
    }
    isUniquelyReferenced_nonNull_native = 0;
    v39 = v43;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v107, v8);
    goto LABEL_4;
  }
  if (v37 < v39)
  {
    v39 = v37;
    if (v37 > v40)
      goto LABEL_75;
    goto LABEL_45;
  }
  if (v40 >= v37 || (v40 = v37, v39 <= v37))
  {
LABEL_45:
    isUniquelyReferenced_nonNull_native = 0;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v107, v8);
    goto LABEL_4;
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  sub_23DD786A4();
LABEL_61:
  v87 = v111[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v23 & 1) == 0)
  {
    v88 = (uint64_t)v98;
    ((void (*)(char *, uint64_t, uint64_t))v42)(v98, v9, v8);
    sub_23DD23284(v36, v88, MEMORY[0x24BEE4AF8], *(_QWORD **)&v87);
  }
  v42 = *(_QWORD *)(*(_QWORD *)&v87 + 56);
  *(double *)&v104 = v87;
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = *(_QWORD *)(v42 + 8 * v36);
  v89 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v42 + 8 * v36) = isUniquelyReferenced_nonNull_native;
  if ((v89 & 1) == 0)
    goto LABEL_78;
LABEL_64:
  v91 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
  v90 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24);
  if (v91 >= v90 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_23DD566B0((_QWORD *)(v90 > 1), v91 + 1, 1, (_QWORD *)isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v42 + 8 * v36) = isUniquelyReferenced_nonNull_native;
  }
  v78 = v103;
  *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v91 + 1;
  v92 = isUniquelyReferenced_nonNull_native + 16 * v91;
  *(double *)(v92 + 32) = v39;
  *(double *)(v92 + 40) = v40;
  ((void (*)(uint64_t, uint64_t))v30)(v9, v8);
  ((void (*)(char *, uint64_t))v30)(v99, v8);
  v77 = sub_23DD23274;
LABEL_67:
  swift_bridgeObjectRetain();
  v93 = swift_bridgeObjectRetain();
  v94 = sub_23DD23448(v93, a2, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v95 = swift_bridgeObjectRetain();
  sub_23DD23448(v95, a2, a4 * 0.5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DD24024((uint64_t)v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DD24078((uint64_t)v78);
  sub_23DD24078((uint64_t)v77);
  return v94;
}

uint64_t sub_23DD24024(uint64_t a1)
{
  uint64_t v2;

  sub_23DCFB328(0, qword_256CFD168, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DD24078(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_23DD24088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DCFB328(0, qword_256CFD168, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t destroy for MergedLozenges()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s15HealthBalanceUI14MergedLozengesVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MergedLozenges(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MergedLozenges(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MergedLozenges(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MergedLozenges(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MergedLozenges()
{
  return &type metadata for MergedLozenges;
}

uint64_t *sub_23DD242D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_23DDC512C();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    sub_23DD13DC0(0);
    v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return v4;
}

uint64_t sub_23DD2439C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_23DDC512C();
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(v2, v3);
  sub_23DD13DC0(0);
  v4(v2 + *(int *)(v5 + 36), v3);
  return swift_release();
}

_OWORD *sub_23DD24414(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC512C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  sub_23DD13DC0(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

_QWORD *sub_23DD244B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC512C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  sub_23DD13DC0(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_23DD24570(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC512C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  sub_23DD13DC0(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_23DD24610(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC512C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  sub_23DD13DC0(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t sub_23DD246B8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD246C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_23DD13DC0(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_23DD24744()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DD24750(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_23DD13DC0(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
}

uint64_t type metadata accessor for BaselineSeparators.Configuration(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFD1C8);
}

void sub_23DD247E0()
{
  unint64_t v0;

  sub_23DD13DC0(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_23DD24860()
{
  sub_23DDC6C50();
  sub_23DD5E9E8();
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DDC6674();
  sub_23DD13DC0(0);
  sub_23DDC6674();
  swift_retain();
  sub_23DDC620C();
  swift_release();
  return sub_23DDC6C80();
}

uint64_t sub_23DD24940()
{
  sub_23DD5E9E8();
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DDC6674();
  sub_23DD13DC0(0);
  sub_23DDC6674();
  swift_retain();
  sub_23DDC620C();
  return swift_release();
}

uint64_t sub_23DD24A00()
{
  sub_23DDC6C50();
  sub_23DD5E9E8();
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DDC6674();
  sub_23DD13DC0(0);
  sub_23DDC6674();
  swift_retain();
  sub_23DDC620C();
  swift_release();
  return sub_23DDC6C80();
}

uint64_t sub_23DD24AE0()
{
  return sub_23DCF535C(qword_256CFD208, type metadata accessor for BaselineSeparators.Configuration, (uint64_t)&unk_23DDC8544);
}

uint64_t sub_23DD24B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[40];

  v1 = v0;
  sub_23DD25A58();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23DD25C1C(0);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = v1;
  sub_23DD25AB8();
  sub_23DD25B90();
  sub_23DDC5990();
  sub_23DD25CB0();
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23DDC7830;
  *(_OWORD *)(v12 + 32) = xmmword_23DDC84F0;
  sub_23DDC5AB0();
  v13 = sub_23DCF535C(&qword_256CFD2C8, (uint64_t (*)(uint64_t))sub_23DD25A58, MEMORY[0x24BDB8118]);
  sub_23DDC5888();
  sub_23DD25D04((uint64_t)v21);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  v14 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for BaselineSeparators.Configuration(0) + 24));
  v19 = v13;
  v20 = v14;
  v18 = v3;
  swift_getOpaqueTypeConformance2();
  sub_23DDC5828();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_23DD24CF0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void (*v29)(uint64_t, char *, uint64_t);
  uint64_t v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;

  v52 = a2;
  sub_23DD25D2C();
  v51 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v50 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD25D8C();
  MEMORY[0x24BDAC7A8](v5);
  v46 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD25DE8();
  MEMORY[0x24BDAC7A8](v7);
  v42 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v53 = (char *)&v40 - v10;
  v45 = sub_23DDC59FC();
  v47 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD25B1C(0);
  v14 = v13;
  v54 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v49 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v48 = (char *)&v40 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v56 = (char *)&v40 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v55 = (char *)&v40 - v21;
  sub_23DDC5DC8();
  v22 = *(int *)(type metadata accessor for BaselineSeparators.Configuration(0) + 20);
  v43 = a1;
  v23 = (char *)a1 + v22;
  sub_23DDC512C();
  v40 = v23;
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DDC5DC8();
  sub_23DD13DC0(0);
  v44 = &v23[*(int *)(v24 + 36)];
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DDC5DC8();
  v57 = a1[1];
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DDC59F0();
  v25 = v56;
  v26 = v45;
  sub_23DDC5858();
  v47 = *(_QWORD *)(v47 + 8);
  ((void (*)(char *, uint64_t))v47)(v12, v26);
  v41 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
  v41(v55, v25, v14);
  sub_23DDC5DC8();
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DDC5DC8();
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DDC5DC8();
  v57 = *v43;
  sub_23DDC58E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DDC59F0();
  v27 = v48;
  sub_23DDC5858();
  ((void (*)(char *, uint64_t))v47)(v12, v26);
  v28 = v56;
  v29 = (void (*)(uint64_t, char *, uint64_t))v41;
  v41(v56, v27, v14);
  v30 = v54;
  v31 = v55;
  v32 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  v32(v27, v55, v14);
  v33 = v49;
  v32(v49, v28, v14);
  v34 = v50;
  v32(v50, v27, v14);
  v35 = v51;
  v36 = &v34[*(int *)(v51 + 48)];
  v32(v36, v33, v14);
  v37 = v52;
  v29(v52, v34, v14);
  v29(v37 + *(int *)(v35 + 48), v36, v14);
  v38 = *(void (**)(char *, uint64_t))(v30 + 8);
  v38(v56, v14);
  v38(v31, v14);
  v38(v33, v14);
  return ((uint64_t (*)(char *, uint64_t))v38)(v27, v14);
}

uint64_t sub_23DD25318(double *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  sub_23DD13DC0(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v18 - v8;
  if (*a1 != *a2 || a1[1] != a2[1])
    goto LABEL_10;
  v19 = type metadata accessor for BaselineSeparators.Configuration(0);
  v11 = *(int *)(v19 + 20);
  v12 = (uint64_t)a1 + v11;
  v13 = (uint64_t)a2 + v11;
  sub_23DDC512C();
  sub_23DCF535C(&qword_256CFCC60, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  v14 = sub_23DDC66C8();
  sub_23DD254A0(v12, (uint64_t)v9);
  sub_23DD254A0(v13, (uint64_t)v6);
  if ((v14 & 1) == 0)
  {
    sub_23DD254E4((uint64_t)v6);
    sub_23DD254E4((uint64_t)v9);
    goto LABEL_10;
  }
  v15 = sub_23DDC66C8();
  sub_23DD254E4((uint64_t)v6);
  sub_23DD254E4((uint64_t)v9);
  if ((v15 & 1) == 0)
  {
LABEL_10:
    v16 = 0;
    return v16 & 1;
  }
  v16 = sub_23DDC61E8();
  return v16 & 1;
}

uint64_t sub_23DD254A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DD13DC0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD254E4(uint64_t a1)
{
  uint64_t v2;

  sub_23DD13DC0(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_23DD25520(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = v4;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(v4 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_23DDC512C();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    sub_23DD13DC0(0);
    v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 24));
  }
  swift_retain();
  return a1;
}

uint64_t sub_23DD255F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v1 = a1 + *(int *)(type metadata accessor for BaselineSeparators.Configuration(0) + 20);
  v2 = sub_23DDC512C();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  sub_23DD13DC0(0);
  v3(v1 + *(int *)(v4 + 36), v2);
  return swift_release();
}

_OWORD *sub_23DD25674(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  *a1 = *a2;
  v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  v5 = *(int *)(v4 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23DDC512C();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v9(v6, v7, v8);
  sub_23DD13DC0(0);
  v9(&v6[*(int *)(v10 + 36)], &v7[*(int *)(v10 + 36)], v8);
  *(_QWORD *)((char *)a1 + *(int *)(v4 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v4 + 24));
  swift_retain();
  return a1;
}

_QWORD *sub_23DD25720(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  v5 = *(int *)(v4 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23DDC512C();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 24);
  v9(v6, v7, v8);
  sub_23DD13DC0(0);
  v9(&v6[*(int *)(v10 + 36)], &v7[*(int *)(v10 + 36)], v8);
  *(_QWORD *)((char *)a1 + *(int *)(v4 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v4 + 24));
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_23DD257E0(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  *a1 = *a2;
  v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  v5 = *(int *)(v4 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23DDC512C();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(v6, v7, v8);
  sub_23DD13DC0(0);
  v9(&v6[*(int *)(v10 + 36)], &v7[*(int *)(v10 + 36)], v8);
  *(_QWORD *)((char *)a1 + *(int *)(v4 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v4 + 24));
  return a1;
}

_OWORD *sub_23DD25888(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  *a1 = *a2;
  v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  v5 = *(int *)(v4 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23DDC512C();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 40);
  v9(v6, v7, v8);
  sub_23DD13DC0(0);
  v9(&v6[*(int *)(v10 + 36)], &v7[*(int *)(v10 + 36)], v8);
  *(_QWORD *)((char *)a1 + *(int *)(v4 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v4 + 24));
  swift_release();
  return a1;
}

uint64_t sub_23DD25938()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD25944(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_23DD25980()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD2598C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BaselineSeparators.Configuration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for BaselineSeparators(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFD268);
}

uint64_t sub_23DD259E0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BaselineSeparators.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23DD25A48()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23DD25A58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFD2A0)
  {
    sub_23DD25AB8();
    sub_23DD25B90();
    v0 = sub_23DDC599C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFD2A0);
  }
}

void sub_23DD25AB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFD2A8)
  {
    sub_23DD25B1C(255);
    v0 = sub_23DDC57E0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFD2A8);
  }
}

void sub_23DD25B1C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_256CFD2B0)
  {
    v4[0] = sub_23DDC59FC();
    v4[1] = MEMORY[0x24BDB8280];
    v2 = MEMORY[0x242643B9C](a1, v4, MEMORY[0x24BDB7C88], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_256CFD2B0);
  }
}

unint64_t sub_23DD25B90()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  result = qword_256CFD2B8;
  if (!qword_256CFD2B8)
  {
    sub_23DD25AB8();
    v2 = v1;
    sub_23DDC59FC();
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = v4[0];
    v3 = v4;
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB7B80], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CFD2B8);
  }
  return result;
}

void sub_23DD25C1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_256CFD2C0)
  {
    sub_23DD25A58();
    v5[0] = v2;
    v5[1] = sub_23DCF535C(&qword_256CFD2C8, (uint64_t (*)(uint64_t))sub_23DD25A58, MEMORY[0x24BDB8118]);
    v3 = MEMORY[0x242643B9C](a1, v5, MEMORY[0x24BDB7D68], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_256CFD2C0);
  }
}

uint64_t sub_23DD25CA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DD24CF0(*(uint64_t **)(v1 + 16), a1);
}

void sub_23DD25CB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFD2D0)
  {
    v0 = sub_23DDC6BF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFD2D0);
  }
}

uint64_t sub_23DD25D04(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void sub_23DD25D2C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFD2D8)
  {
    sub_23DD25B1C(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFD2D8);
  }
}

void sub_23DD25D8C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFCF08)
  {
    v0 = sub_23DDC58F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFCF08);
  }
}

void sub_23DD25DE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFCF10)
  {
    sub_23DDC512C();
    v0 = sub_23DDC58F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFCF10);
  }
}

uint64_t sub_23DD25E44()
{
  sub_23DD25C1C(255);
  sub_23DD25A58();
  sub_23DCF535C(&qword_256CFD2C8, (uint64_t (*)(uint64_t))sub_23DD25A58, MEMORY[0x24BDB8118]);
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for SingleMetricChartPointCollection()
{
  return &type metadata for SingleMetricChartPointCollection;
}

uint64_t sub_23DD25EEC()
{
  return 1;
}

uint64_t sub_23DD25EF4()
{
  sub_23DDC6C50();
  sub_23DDC6C5C();
  return sub_23DDC6C80();
}

uint64_t sub_23DD25F34()
{
  return sub_23DDC6C5C();
}

uint64_t sub_23DD25F58()
{
  sub_23DDC6C50();
  sub_23DDC6C5C();
  return sub_23DDC6C80();
}

uint64_t sub_23DD25F94()
{
  return 0x73746E696F70;
}

uint64_t sub_23DD25FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x73746E696F70 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23DDC6C08();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23DD26034()
{
  return 0;
}

void sub_23DD26040(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23DD2604C()
{
  sub_23DD26210();
  return sub_23DDC6CEC();
}

uint64_t sub_23DD26074()
{
  sub_23DD26210();
  return sub_23DDC6CF8();
}

uint64_t sub_23DD2609C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  sub_23DD263D8(0, &qword_256CFD2E0, MEMORY[0x24BEE3520]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v10 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DD26210();
  sub_23DDC6C98();
  v10[1] = a2;
  sub_23DD1CEC4(0);
  sub_23DD26434(&qword_256CFD2F0, &qword_256CFD2F8, (uint64_t)&unk_23DDCB618, MEMORY[0x24BEE12A0]);
  sub_23DDC6BCC();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23DD261C4(uint64_t *a1, uint64_t *a2)
{
  return sub_23DD40A48(*a1, *a2);
}

_QWORD *sub_23DD261D0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_23DD26278(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_23DD261F8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23DD2609C(a1, *v1);
}

unint64_t sub_23DD26210()
{
  unint64_t result;

  result = qword_256CFD2E8;
  if (!qword_256CFD2E8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC8780, &type metadata for SingleMetricChartPointCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFD2E8);
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

_QWORD *sub_23DD26278(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD v10[2];

  sub_23DD263D8(0, &qword_256CFD300, MEMORY[0x24BEE33E0]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v10 - v6;
  v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DD26210();
  sub_23DDC6C8C();
  if (!v1)
  {
    sub_23DD1CEC4(0);
    sub_23DD26434(&qword_256CFD308, &qword_256CFD310, (uint64_t)&unk_23DDCB5F0, MEMORY[0x24BEE12D0]);
    sub_23DDC6B78();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v8 = (_QWORD *)v10[1];
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v8;
}

void sub_23DD263D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DD26210();
    v7 = a3(a1, &type metadata for SingleMetricChartPointCollection.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DD26434(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_23DD1CEC4(255);
    v10 = v9;
    v11 = sub_23DD264AC(a2, a3);
    result = MEMORY[0x242643BD8](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DD264AC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for IndividualOvernightMetricChartPoint(255);
    result = MEMORY[0x242643BD8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SingleMetricChartPointCollection.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for SingleMetricChartPointCollection.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DD26580 + 4 * byte_23DDC8610[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DD265A0 + 4 * byte_23DDC8615[v4]))();
}

_BYTE *sub_23DD26580(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DD265A0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DD265A8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DD265B0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DD265B8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DD265C0(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_23DD265CC()
{
  return 0;
}

ValueMetadata *type metadata accessor for SingleMetricChartPointCollection.CodingKeys()
{
  return &type metadata for SingleMetricChartPointCollection.CodingKeys;
}

unint64_t sub_23DD265E8()
{
  unint64_t result;

  result = qword_256CFD318;
  if (!qword_256CFD318)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC8758, &type metadata for SingleMetricChartPointCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFD318);
  }
  return result;
}

unint64_t sub_23DD26630()
{
  unint64_t result;

  result = qword_256CFD320;
  if (!qword_256CFD320)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC86C8, &type metadata for SingleMetricChartPointCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFD320);
  }
  return result;
}

unint64_t sub_23DD26678()
{
  unint64_t result;

  result = qword_256CFD328[0];
  if (!qword_256CFD328[0])
  {
    result = MEMORY[0x242643BD8](&unk_23DDC86F0, &type metadata for SingleMetricChartPointCollection.CodingKeys);
    atomic_store(result, qword_256CFD328);
  }
  return result;
}

uint64_t sub_23DD266BC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23DD266C4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23DD26748(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 16) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v10 = ((unint64_t)a1 + v5 + 16) & ~v5;
    v11 = ((unint64_t)a2 + v5 + 16) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    v12 = (_QWORD *)((v6 + v11) & 0xFFFFFFFFFFFFFFF8);
    v13 = v12[1];
    v14 = (_QWORD *)((v6 + v10) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v12;
    v14[1] = v13;
  }
  swift_retain();
  return v3;
}

uint64_t sub_23DD2681C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_release();
}

_OWORD *sub_23DD2686C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_QWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_retain();
  return a1;
}

_QWORD *sub_23DD268F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_QWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_23DD26988(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  *(_OWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *sub_23DD26A08(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  *(_OWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_23DD26A90(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 16) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((v8 + v13) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((v8 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23DD26B1C + 4 * byte_23DDC87D0[v11]))();
  }
}

void sub_23DD26BAC(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 16) & ~(_DWORD)v7)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 16) & ~(_DWORD)v7)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_23DD26CB4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23DD26D30);
}

void sub_23DD26CBC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23DD26CC4);
  JUMPOUT(0x23DD26D30);
}

void sub_23DD26D08()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23DD26D30);
}

void sub_23DD26D10()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23DD26D30);
}

uint64_t sub_23DD26D18@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x23DD26D30);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x23DD26D2CLL);
    JUMPOUT(0x23DD26D24);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))((v6 + v5 + 16) & a3);
}

void type metadata accessor for ChartPlotSizeReader()
{
  JUMPOUT(0x242643B54);
}

uint64_t sub_23DD26D54()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD26D88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_23DD26DA0@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t);
  _QWORD v32[3];
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD v43[4];
  _QWORD v44[3];

  v3 = v2;
  v42 = a2;
  v5 = *(_QWORD *)(*(a1 - 1) + 64);
  v39 = *(a1 - 1);
  v40 = v5;
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[0] = v7;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = sub_23DDC5C0C();
  v41 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v12 = a1[4];
  v36 = a1[3];
  v13 = v36;
  v33 = v12;
  v34 = (char *)v32 - v14;
  v44[0] = v12;
  v44[1] = MEMORY[0x24BDECC38];
  v37 = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v10, v44, v11);
  v35 = a1[5];
  v43[0] = v10;
  v43[1] = v13;
  v43[2] = v37;
  v43[3] = v35;
  v15 = MEMORY[0x242643B9C](0, v43, MEMORY[0x24BDB8410], 0);
  v38 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v32 - v19;
  v21 = v33;
  sub_23DDC61A0();
  v22 = *v3;
  v32[1] = v3[1];
  v32[2] = v22;
  v23 = v39;
  (*(void (**)(char *, uint64_t *, _QWORD *))(v39 + 16))(v7, v3, a1);
  v24 = v23;
  v25 = (*(unsigned __int8 *)(v23 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v26 = (char *)swift_allocObject();
  *((_QWORD *)v26 + 2) = v9;
  *((_QWORD *)v26 + 3) = v36;
  *((_QWORD *)v26 + 4) = v21;
  *((_QWORD *)v26 + 5) = v35;
  (*(void (**)(char *, _QWORD, _QWORD *))(v24 + 32))(&v26[v25], v32[0], a1);
  v27 = v34;
  sub_23DDC60E0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v10);
  v28 = v38;
  v29 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  v29(v20, v17, v15);
  v30 = *(void (**)(char *, uint64_t))(v28 + 8);
  v30(v17, v15);
  v29(v42, v20, v15);
  return ((uint64_t (*)(char *, uint64_t))v30)(v20, v15);
}

void sub_23DD27034(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for ChartPlotSizeReader();
}

uint64_t sub_23DD270C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);

  v7 = *(void (**)(uint64_t))(v2 + *(int *)(a1 + 56));
  v8 = sub_23DDC57B0();
  v7(v8);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v9(v5, v4, v1);
  v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v10(v4, v1);
  v9(v3, v5, v1);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(v5, v1);
}

void sub_23DD27144()
{
  type metadata accessor for ChartPlotSizeReader();
}

uint64_t sub_23DD27174(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v1 + ((v2 + 48) & ~v2) + *(int *)(a1 + 52));
  swift_release();
  return swift_deallocObject();
}

void sub_23DD271EC()
{
  type metadata accessor for ChartPlotSizeReader();
}

void sub_23DD2722C()
{
  uint64_t v0;

  sub_23DD27034(v0);
}

uint64_t sub_23DD27274(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = sub_23DDC5C0C();
  v4[0] = v1;
  v4[1] = MEMORY[0x24BDECC38];
  MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v4);
  return swift_getOpaqueTypeConformance2();
}

void *sub_23DD272F8@<X0>(void *a1@<X8>)
{
  _BYTE __src[280];

  sub_23DD29138();
  sub_23DDC5D80();
  return memcpy(a1, __src, 0x118uLL);
}

uint64_t sub_23DD27354(void *__src)
{
  _BYTE v3[280];
  uint64_t __dst[35];

  memcpy(__dst, __src, sizeof(__dst));
  memcpy(v3, __src, sizeof(v3));
  sub_23DCFBB9C(__dst);
  sub_23DD29138();
  return sub_23DDC5D8C();
}

uint64_t ChartViewModelProvider.__allocating_init(model:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  sub_23DCF6898(0, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v9[-v3];
  v5 = swift_allocObject();
  v6 = v5 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model;
  v7 = type metadata accessor for OvernightMetricsViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  sub_23DDC5234();
  sub_23DD28518(a1, (uint64_t)v4, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  swift_getKeyPath();
  v10 = v5;
  v11 = v4;
  v12 = v5;
  sub_23DCF535C(&qword_256CFD3C8, type metadata accessor for ChartViewModelProvider, (uint64_t)&protocol conformance descriptor for ChartViewModelProvider);
  sub_23DDC5204();
  swift_release();
  sub_23DD290A0((uint64_t)v4, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  sub_23DD290A0(a1, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  return v5;
}

uint64_t ChartViewModelProvider.init(model:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v2 = v1;
  sub_23DCF6898(0, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v10[-v5];
  v7 = v1 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model;
  v8 = type metadata accessor for OvernightMetricsViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  sub_23DDC5234();
  sub_23DD28518(a1, (uint64_t)v6, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  swift_getKeyPath();
  v11 = v2;
  v12 = v6;
  v13 = v2;
  sub_23DCF535C(&qword_256CFD3C8, type metadata accessor for ChartViewModelProvider, (uint64_t)&protocol conformance descriptor for ChartViewModelProvider);
  sub_23DDC5204();
  swift_release();
  sub_23DD290A0((uint64_t)v6, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  sub_23DD290A0(a1, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  return v2;
}

uint64_t sub_23DD276B0(uint64_t a1)
{
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFD3C8, type metadata accessor for ChartViewModelProvider, (uint64_t)&protocol conformance descriptor for ChartViewModelProvider);
  sub_23DDC5204();
  swift_release();
  return sub_23DD290A0(a1, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
}

uint64_t (*sub_23DD2776C())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_23DD277B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFD3C8, type metadata accessor for ChartViewModelProvider, (uint64_t)&protocol conformance descriptor for ChartViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v4 = v3 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model;
  swift_beginAccess();
  return sub_23DD28518(v4, a2, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
}

uint64_t sub_23DD27878(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  sub_23DCF6898(0, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v9[-v5];
  sub_23DD28518(a1, (uint64_t)&v9[-v5], &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  v7 = *a2;
  swift_getKeyPath();
  v10 = v7;
  v11 = v6;
  v12 = v7;
  sub_23DCF535C(&qword_256CFD3C8, type metadata accessor for ChartViewModelProvider, (uint64_t)&protocol conformance descriptor for ChartViewModelProvider);
  sub_23DDC5204();
  swift_release();
  return sub_23DD290A0((uint64_t)v6, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
}

uint64_t sub_23DD27998@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFD3C8, type metadata accessor for ChartViewModelProvider, (uint64_t)&protocol conformance descriptor for ChartViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v3 = v1 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model;
  swift_beginAccess();
  return sub_23DD28518(v3, a1, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
}

uint64_t sub_23DD27A58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  sub_23DCF6898(0, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - v5;
  sub_23DD28518(a2, (uint64_t)&v9 - v5, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  v7 = a1 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model;
  swift_beginAccess();
  sub_23DD2917C((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t sub_23DD27B28()
{
  uint64_t v0;

  return sub_23DD27A58(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for ChartViewModelProvider(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFD418);
}

void (*sub_23DD27B54(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider___observationRegistrar;
  *v4 = v2;
  v4[6] = sub_23DCF535C(&qword_256CFD3C8, type metadata accessor for ChartViewModelProvider, (uint64_t)&protocol conformance descriptor for ChartViewModelProvider);
  sub_23DDC5210();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  sub_23DDC5228();
  swift_release();
  v4[7] = sub_23DD2776C();
  return sub_23DD27C3C;
}

void sub_23DD27C3C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  *v1 = v1[4];
  swift_getKeyPath();
  sub_23DDC521C();
  swift_release();
  free(v1);
}

uint64_t ChartViewModelProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23DD290A0(v0 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider___observationRegistrar;
  v2 = sub_23DDC5240();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ChartViewModelProvider.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23DD290A0(v0 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider___observationRegistrar;
  v2 = sub_23DDC5240();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t AlertTileChart.init(viewModelProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  sub_23DD1FF38();
  sub_23DDC5AE0();
  result = type metadata accessor for AlertTileChart(0);
  *(_QWORD *)(a2 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t type metadata accessor for AlertTileChart(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFD548);
}

uint64_t AlertTileChart.viewModelProvider.getter()
{
  type metadata accessor for AlertTileChart(0);
  return swift_retain();
}

uint64_t AlertTileChart.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[35];

  v57 = a1;
  sub_23DD29040(0, &qword_256CFD3D0, MEMORY[0x24BDEF380]);
  v55 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v56 = (uint64_t)&v45 - v3;
  sub_23DCF6898(0, qword_256CFC6B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChart.Derivations);
  MEMORY[0x24BDAC7A8](v4);
  v52 = (char *)&v45 - v5;
  sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x24BDAC7A8](v6);
  v50 = (uint64_t)&v45 - v7;
  sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  MEMORY[0x24BDAC7A8](v8);
  v47 = (uint64_t)&v45 - v9;
  v10 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x24BDAC7A8](v10);
  v46 = (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OvernightMetricsChart(0);
  MEMORY[0x24BDAC7A8](v12);
  v49 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD283C8();
  v54 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v48 = (uint64_t)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v51 = (uint64_t)&v45 - v17;
  sub_23DCF6898(0, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v45 - v19;
  v21 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  v22 = *((_QWORD *)v21 - 1);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v45 - v26;
  v28 = *(int *)(type metadata accessor for AlertTileChart(0) + 20);
  v53 = v1;
  v29 = *(_QWORD *)(v1 + v28);
  swift_getKeyPath();
  v58[0] = v29;
  sub_23DCF535C(&qword_256CFD3C8, type metadata accessor for ChartViewModelProvider, (uint64_t)&protocol conformance descriptor for ChartViewModelProvider);
  sub_23DDC5210();
  swift_release();
  v30 = v29 + OBJC_IVAR____TtC15HealthBalanceUI22ChartViewModelProvider__model;
  swift_beginAccess();
  sub_23DD28518(v30, (uint64_t)v20, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_23DD290A0((uint64_t)v20, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
    swift_storeEnumTagMultiPayload();
    sub_23DD28480();
    return sub_23DDC5E58();
  }
  else
  {
    sub_23DCFBB58((uint64_t)v20, (uint64_t)v27, type metadata accessor for OvernightMetricsViewModel);
    sub_23DCF58EC((uint64_t)v27, (uint64_t)v24, type metadata accessor for OvernightMetricsViewModel);
    LOBYTE(v58[0]) = 0;
    v32 = v46;
    sub_23DCF58EC((uint64_t)&v24[v21[8]], v46, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
    v33 = v47;
    sub_23DD28518((uint64_t)&v24[v21[7]], v47, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    v34 = *(_QWORD **)&v24[v21[14]];
    v35 = *(_QWORD *)&v24[v21[10]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36 = v50;
    OvernightMetricsViewModel.warmupProgress.getter(v50);
    v37 = type metadata accessor for OvernightMetricsChart.Derivations(0);
    v38 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v52, 1, 1, v37);
    v44 = v36;
    v39 = v49;
    OvernightMetricsChart.init(timeScope:chartPointCollection:emphasizedChartPoint:tabProgress:shouldMergeOverlappingIndividualMetrics:visibleDataTypes:keyDates:warmupProgress:alignWarmupProgressCounterToChartPlotArea:precomputedDerivations:)((char *)v58, v32, v33, 0, 1, 1, v34, v35, v49, v44, 0, v38);
    sub_23DCF59A8((uint64_t)v24, type metadata accessor for OvernightMetricsViewModel);
    KeyPath = swift_getKeyPath();
    sub_23DD28564((uint64_t)v58);
    v41 = v48;
    sub_23DCF58EC((uint64_t)v39, v48, type metadata accessor for OvernightMetricsChart);
    v42 = *(int *)(v54 + 36);
    *(_QWORD *)(v41 + v42) = KeyPath;
    memcpy((void *)(v41 + v42 + 8), v58, 0x118uLL);
    sub_23DCF59A8((uint64_t)v39, type metadata accessor for OvernightMetricsChart);
    v43 = v51;
    sub_23DCFBB58(v41, v51, (uint64_t (*)(_QWORD))sub_23DD283C8);
    sub_23DCF58EC(v43, v56, (uint64_t (*)(_QWORD))sub_23DD283C8);
    swift_storeEnumTagMultiPayload();
    sub_23DD28480();
    sub_23DDC5E58();
    sub_23DCF59A8(v43, (uint64_t (*)(_QWORD))sub_23DD283C8);
    return sub_23DCF59A8((uint64_t)v27, type metadata accessor for OvernightMetricsViewModel);
  }
}

void sub_23DD283C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFD3D8)
  {
    type metadata accessor for OvernightMetricsChart(255);
    sub_23DD2842C();
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFD3D8);
  }
}

void sub_23DD2842C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC670)
  {
    v0 = sub_23DDC5F00();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC670);
  }
}

unint64_t sub_23DD28480()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFD3E0;
  if (!qword_256CFD3E0)
  {
    sub_23DD283C8();
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFD3E8, type metadata accessor for OvernightMetricsChart, (uint64_t)&protocol conformance descriptor for OvernightMetricsChart);
    v3[1] = sub_23DCF535C((unint64_t *)&qword_256CFC6A0, (uint64_t (*)(uint64_t))sub_23DD2842C, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFD3E0);
  }
  return result;
}

uint64_t sub_23DD28518(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_23DCF6898(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

double sub_23DD28564@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[11];
  __int16 v38;
  char v39;
  _BYTE v40[7];
  char v41;
  _BYTE v42[7];
  _BYTE v43[7];

  v2 = sub_23DDC5FFC();
  v32 = *(_QWORD *)(v2 - 8);
  v33 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, (unint64_t *)&qword_256CFC4A0, (void (*)(uint64_t))MEMORY[0x24BDF1678]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v28 - v6;
  v8 = sub_23DDC6038();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)objc_opt_self();
  v36 = MEMORY[0x242642C18](objc_msgSend(v12, sel_secondarySystemGroupedBackgroundColor));
  v35 = sub_23DDC5B40();
  if (qword_256CFC098 != -1)
    swift_once();
  v34 = MEMORY[0x242642C18]((id)qword_256CFE658);
  if (qword_256CFC0A8 != -1)
    swift_once();
  v30 = MEMORY[0x242642C18]((id)qword_256CFE668);
  sub_23DD28C1C();
  sub_23DDC5AEC();
  v29 = v36;
  v31 = MEMORY[0x242642C18](objc_msgSend(v12, sel_tertiaryLabelColor));
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BDF1860], v8);
  v13 = *MEMORY[0x24BDF1668];
  v14 = sub_23DDC5FA8();
  v15 = (void (*)(uint64_t))MEMORY[0x24BDF1678];
  v16 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v7, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v7, 0, 1, v14);
  sub_23DDC5FB4();
  sub_23DDC5FE4();
  sub_23DD290A0((uint64_t)v7, (unint64_t *)&qword_256CFC4A0, v15);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v18 = v32;
  v17 = v33;
  (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v4, *MEMORY[0x24BDF17C8], v33);
  v19 = sub_23DDC6020();
  swift_release();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v17);
  LODWORD(v36) = sub_23DDC5EA0();
  v20 = sub_23DDC5B40();
  v36 = sub_23DDC6230();
  v21 = sub_23DDC5B40();
  v36 = sub_23DDC6200();
  v22 = sub_23DDC5B40();
  sub_23DDC6200();
  v23 = sub_23DDC623C();
  swift_release();
  v36 = v23;
  v24 = sub_23DDC5B40();
  LODWORD(v36) = sub_23DDC5E94();
  HIDWORD(v36) = 1036831949;
  sub_23DD290DC();
  sub_23DCF535C((unint64_t *)&qword_256CFD598, (uint64_t (*)(uint64_t))sub_23DD290DC, MEMORY[0x24BDEECA0]);
  v25 = sub_23DDC5B40();
  v41 = 0;
  v39 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 25) = v36;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 33) = *(_DWORD *)v43;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v43[3];
  *(_QWORD *)(a1 + 40) = v35;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 57) = *(_DWORD *)v42;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)&v42[3];
  v26 = v34;
  *(_QWORD *)(a1 + 64) = 0x4014000000000000;
  *(_QWORD *)(a1 + 72) = v26;
  *(_QWORD *)(a1 + 80) = v30;
  *(_QWORD *)(a1 + 88) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 96) = v29;
  *(_BYTE *)(a1 + 104) = v41;
  *(_DWORD *)(a1 + 105) = *(_DWORD *)v40;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)&v40[3];
  *(_OWORD *)(a1 + 112) = xmmword_23DDC77E0;
  *(_OWORD *)(a1 + 128) = xmmword_23DDC77F0;
  result = 0.09;
  *(_OWORD *)(a1 + 144) = xmmword_23DDC7800;
  *(_OWORD *)(a1 + 160) = xmmword_23DDC7810;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = v39;
  *(_BYTE *)(a1 + 201) = 0;
  *(_WORD *)(a1 + 206) = v38;
  *(_DWORD *)(a1 + 202) = *(_DWORD *)&v37[7];
  *(_QWORD *)(a1 + 208) = v22;
  *(_QWORD *)(a1 + 216) = v24;
  *(_QWORD *)(a1 + 224) = v25;
  *(_QWORD *)(a1 + 232) = v20;
  *(_QWORD *)(a1 + 240) = v21;
  *(_BYTE *)(a1 + 248) = 1;
  LODWORD(v26) = *(_DWORD *)v37;
  *(_DWORD *)(a1 + 252) = *(_DWORD *)&v37[3];
  *(_DWORD *)(a1 + 249) = v26;
  *(_QWORD *)(a1 + 256) = v31;
  *(_QWORD *)(a1 + 264) = v19;
  *(_QWORD *)(a1 + 272) = 0x4010000000000000;
  return result;
}

void *sub_23DD28A4C@<X0>(void *a1@<X8>)
{
  _BYTE __src[280];

  sub_23DD29138();
  sub_23DDC5D80();
  return memcpy(a1, __src, 0x118uLL);
}

uint64_t sub_23DD28AAC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD28ABC()
{
  return type metadata accessor for ChartViewModelProvider(0);
}

void sub_23DD28AC4()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DCF6898(319, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  if (v0 <= 0x3F)
  {
    sub_23DDC5240();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ChartViewModelProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ChartViewModelProvider.__allocating_init(model:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ChartViewModelProvider.model.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ChartViewModelProvider.model.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ChartViewModelProvider.model.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t *initializeBufferWithCopyOfBuffer for AlertTileChart(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_23DD28C1C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

void sub_23DD28C1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFD4E8)
  {
    sub_23DD1FF38();
    v0 = sub_23DDC5AF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFD4E8);
  }
}

uint64_t destroy for AlertTileChart(uint64_t a1)
{
  uint64_t v2;

  sub_23DD28C1C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for AlertTileChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23DD28C1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AlertTileChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23DD28C1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AlertTileChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23DD28C1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AlertTileChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23DD28C1C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertTileChart()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD28E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_23DD28C1C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AlertTileChart()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DD28ED8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_23DD28C1C();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
}

void sub_23DD28F50()
{
  unint64_t v0;

  sub_23DD28C1C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_23DD28FC8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFD580;
  if (!qword_256CFD580)
  {
    sub_23DD29040(255, &qword_256CFD588, MEMORY[0x24BDEF3B8]);
    v2 = v1;
    v3[0] = sub_23DD28480();
    v3[1] = MEMORY[0x24BDF5138];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEF3E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFD580);
  }
  return result;
}

void sub_23DD29040(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_23DD283C8();
    v7 = a3(a1, v6, MEMORY[0x24BDF5158]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DD290A0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_23DCF6898(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_23DD290DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFD590)
  {
    v0 = sub_23DDC5E04();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFD590);
  }
}

unint64_t sub_23DD29138()
{
  unint64_t result;

  result = qword_256CFD5A0;
  if (!qword_256CFD5A0)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9CE0, &type metadata for OvernightMetricsChartSpecKey);
    atomic_store(result, (unint64_t *)&qword_256CFD5A0);
  }
  return result;
}

uint64_t sub_23DD2917C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DCF6898(0, &qword_256CFD3B0, (void (*)(uint64_t))type metadata accessor for OvernightMetricsViewModel);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD291D0()
{
  return sub_23DD27B28();
}

_QWORD *sub_23DD291E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    v5 = *(int *)(a3 + 24);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = sub_23DDC656C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_23DD2927C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = sub_23DDC656C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_23DD292B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23DDC656C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_23DD29320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23DDC656C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t sub_23DD2939C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23DDC656C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_23DD29408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23DDC656C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_23DD29474()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD29480(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *a1;
    if (v4 >= 3)
      return v4 - 2;
    else
      return 0;
  }
  else
  {
    v8 = sub_23DDC656C();
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_23DD294F4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_23DD29500(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *result = a2 + 2;
  }
  else
  {
    v7 = sub_23DDC656C();
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for BalanceWidgetAccessoryRectangularSpecs()
{
  uint64_t result;

  result = qword_256CFD600;
  if (!qword_256CFD600)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD295AC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC656C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23DD29628@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  void *v33;
  _BYTE v34[280];
  _OWORD v35[18];

  v33 = a1;
  v1 = sub_23DDC656C();
  v31 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v23 - v5;
  if (qword_256CFC098 != -1)
    swift_once();
  v32 = v6;
  MEMORY[0x242642C18]((id)qword_256CFE658);
  v29 = sub_23DDC623C();
  swift_release();
  if (qword_256CFC0A8 != -1)
    swift_once();
  MEMORY[0x242642C18]((id)qword_256CFE668);
  v28 = sub_23DDC623C();
  swift_release();
  v7 = (void *)objc_opt_self();
  MEMORY[0x242642C18](objc_msgSend(v7, sel_systemGrayColor));
  v27 = sub_23DDC623C();
  swift_release();
  v26 = MEMORY[0x242642C18]((id)qword_256CFE658);
  v25 = MEMORY[0x242642C18]((id)qword_256CFE668);
  *(_QWORD *)&v35[0] = sub_23DDC6218();
  v23 = sub_23DDC5B40();
  *(_QWORD *)&v35[0] = MEMORY[0x242642C18](objc_msgSend(v7, sel_systemGrayColor));
  v24 = sub_23DDC5B40();
  MEMORY[0x242642C18](objc_msgSend(v7, sel_systemGrayColor));
  v8 = sub_23DDC623C();
  swift_release();
  *(_QWORD *)&v35[0] = v8;
  v9 = sub_23DDC5B40();
  MEMORY[0x242642C18](objc_msgSend(v7, sel_systemGrayColor));
  v10 = sub_23DDC623C();
  swift_release();
  *(_QWORD *)&v35[0] = v10;
  v11 = sub_23DDC5B40();
  *(_QWORD *)&v35[0] = MEMORY[0x242642C18](objc_msgSend(v7, sel_systemGrayColor));
  v12 = sub_23DDC5B40();
  *(_QWORD *)&v35[0] = sub_23DDC6230();
  v13 = sub_23DDC5B40();
  v14 = v30;
  v15 = *v30 != 0;
  v16 = sub_23DDC6014();
  *(_QWORD *)&v35[0] = v29;
  *((_QWORD *)&v35[0] + 1) = v28;
  *(_QWORD *)&v35[1] = v27;
  BYTE8(v35[1]) = 0;
  LOBYTE(v35[2]) = 1;
  *((_QWORD *)&v35[2] + 1) = v23;
  *(_QWORD *)&v35[3] = 0;
  BYTE8(v35[3]) = 1;
  *(_QWORD *)&v35[4] = 0x4014000000000000;
  *((_QWORD *)&v35[4] + 1) = v26;
  *(_QWORD *)&v35[5] = v25;
  *((_QWORD *)&v35[5] + 1) = 0x3FE0000000000000;
  *(_QWORD *)&v35[6] = 0;
  BYTE8(v35[6]) = 1;
  v35[7] = xmmword_23DDC8980;
  v35[8] = xmmword_23DDC77F0;
  v35[9] = xmmword_23DDC7800;
  v35[10] = xmmword_23DDC7810;
  memset(&v35[11], 0, 24);
  WORD4(v35[12]) = 1;
  *(_QWORD *)&v35[13] = v24;
  *((_QWORD *)&v35[13] + 1) = v9;
  *(_QWORD *)&v35[14] = v11;
  *((_QWORD *)&v35[14] + 1) = v12;
  *(_QWORD *)&v35[15] = v13;
  BYTE8(v35[15]) = v15;
  *(_QWORD *)&v35[16] = 0;
  *((_QWORD *)&v35[16] + 1) = v16;
  *(_QWORD *)&v35[17] = 0;
  v17 = type metadata accessor for BalanceWidgetAccessoryRectangularSpecs();
  v18 = v31;
  v19 = v32;
  (*(void (**)(char *, _BYTE *, uint64_t))(v31 + 16))(v32, &v14[*(int *)(v17 + 24)], v1);
  sub_23DDC6560();
  sub_23DCF535C((unint64_t *)&qword_256CFC4A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFADE0], MEMORY[0x24BDFADF0]);
  LOBYTE(v13) = sub_23DDC66C8();
  v20 = *(void (**)(char *, uint64_t))(v18 + 8);
  v20(v3, v1);
  if ((v13 & 1) != 0)
  {
    v20(v19, v1);
    memcpy(v34, v35, sizeof(v34));
    static OvernightMetricsChartSpec.accented(_:)((uint64_t)v34, (uint64_t)v33);
    return sub_23DCFE908((uint64_t *)v35);
  }
  sub_23DDC6554();
  v21 = sub_23DDC66C8();
  v20(v3, v1);
  v20(v19, v1);
  if ((v21 & 1) != 0)
  {
    memcpy(v34, v35, sizeof(v34));
    static OvernightMetricsChartSpec.vibrant(_:)((uint64_t)v34, (uint64_t)v33);
    return sub_23DCFE908((uint64_t *)v35);
  }
  return (uint64_t *)memcpy(v33, v35, 0x118uLL);
}

id sub_23DD29B08@<X0>(uint64_t a1@<X8>)
{
  id result;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  char v6;
  char v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, sel_isAppleWatch);

    sub_23DDC5D20();
    sub_23DCF535C(&qword_256CFD640, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAAC0], MEMORY[0x24BDFAAB8]);
    v5 = sub_23DDC5D80();
    if (v15)
      v6 = 2;
    else
      v6 = 1;
    if (v4)
      v7 = v6;
    else
      v7 = 0;
    v8 = MEMORY[0x242642780](v5);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    type metadata accessor for BalanceWidgetAccessoryRectangularSpecs();
    result = (id)sub_23DDC5D38();
    *(_BYTE *)a1 = v7;
    *(double *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL sub_23DD29C0C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23DD29C20()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;

  v1 = sub_23DDC5774();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v0 != 2)
    return sub_23DDC6224();
  v5 = sub_23DD6F1CC();
  if ((v6 & 1) != 0)
    return sub_23DDC6218();
  if (v5 == 1)
  {
    if (qword_256CFC0E8 != -1)
      swift_once();
    v7 = qword_256D065F8;
  }
  else if (v5)
  {
    if (qword_256CFC0E0 != -1)
      swift_once();
    v7 = qword_256D065E0;
  }
  else
  {
    if (qword_256CFC0D8 != -1)
      swift_once();
    v7 = qword_256D065C8;
  }
  v9 = __swift_project_value_buffer(v1, (uint64_t)v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v9, v1);
  return sub_23DDC626C();
}

uint64_t getEnumTagSinglePayload for BalanceWidgetAccessoryRectangularSpecs.PresentationContext(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BalanceWidgetAccessoryRectangularSpecs.PresentationContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DD29E74 + 4 * byte_23DDC8995[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DD29EA8 + 4 * byte_23DDC8990[v4]))();
}

uint64_t sub_23DD29EA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD29EB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DD29EB8);
  return result;
}

uint64_t sub_23DD29EC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DD29ECCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DD29ED0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD29ED8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23DD29EE4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for BalanceWidgetAccessoryRectangularSpecs.PresentationContext()
{
  return &type metadata for BalanceWidgetAccessoryRectangularSpecs.PresentationContext;
}

unint64_t sub_23DD29F00()
{
  unint64_t result;

  result = qword_256CFD648;
  if (!qword_256CFD648)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC8A54, &type metadata for BalanceWidgetAccessoryRectangularSpecs.PresentationContext);
    atomic_store(result, (unint64_t *)&qword_256CFD648);
  }
  return result;
}

_QWORD *sub_23DD29F44(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, int *);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, _QWORD, uint64_t, int *);
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, _QWORD, uint64_t, int *);
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v15 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v5 = a3;
    v6 = a2;
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v12 = *((_QWORD *)v11 - 1);
    v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
    swift_bridgeObjectRetain();
    v94 = v5;
    v91 = v12;
    if (v13(v10, 1, v11))
    {
      sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = sub_23DDC512C();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(v9, v10, v16);
      v18 = v11[5];
      v19 = &v9[v18];
      v92 = v6;
      v20 = &v10[v18];
      v17(&v9[v18], &v10[v18], v16);
      sub_23DCF9010();
      v17(&v19[*(int *)(v21 + 36)], &v20[*(int *)(v21 + 36)], v16);
      v22 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v19[v22[5]] = *(_QWORD *)&v20[v22[5]];
      *(_QWORD *)&v19[v22[6]] = *(_QWORD *)&v20[v22[6]];
      *(_QWORD *)&v19[v22[7]] = *(_QWORD *)&v20[v22[7]];
      v23 = v11[6];
      v24 = &v9[v23];
      v25 = &v10[v23];
      *(_OWORD *)v24 = *(_OWORD *)v25;
      v24[16] = v25[16];
      v9[v11[7]] = v10[v11[7]];
      v9[v11[8]] = v10[v11[8]];
      v9[v11[9]] = v10[v11[9]];
      v26 = v11[10];
      v27 = &v9[v26];
      v28 = &v10[v26];
      v29 = *((_QWORD *)v28 + 1);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *((_QWORD *)v27 + 1) = v29;
      v30 = v11[11];
      v31 = &v9[v30];
      v32 = &v10[v30];
      v33 = *((_QWORD *)v32 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v33;
      v34 = *(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v6 = v92;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34(v9, 0, 1, v11);
      v5 = v94;
    }
    v35 = *(int *)(v5 + 28);
    *(_QWORD *)((char *)v7 + *(int *)(v5 + 24)) = *(_QWORD *)((char *)v6 + *(int *)(v5 + 24));
    v36 = (char *)v7 + v35;
    v37 = (char *)v6 + v35;
    *(_QWORD *)((char *)v7 + v35) = *(_QWORD *)((char *)v6 + v35);
    v38 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    v39 = v38[5];
    v40 = &v36[v39];
    v41 = &v37[v39];
    swift_bridgeObjectRetain();
    v95 = v7;
    if (v13(v41, 1, v11))
    {
      sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v43 = sub_23DDC512C();
      v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16);
      v44(v40, v41, v43);
      v45 = v11[5];
      v93 = v6;
      v46 = &v40[v45];
      v47 = &v41[v45];
      v44(&v40[v45], &v41[v45], v43);
      sub_23DCF9010();
      v44(&v46[*(int *)(v48 + 36)], &v47[*(int *)(v48 + 36)], v43);
      v49 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v46[v49[5]] = *(_QWORD *)&v47[v49[5]];
      *(_QWORD *)&v46[v49[6]] = *(_QWORD *)&v47[v49[6]];
      *(_QWORD *)&v46[v49[7]] = *(_QWORD *)&v47[v49[7]];
      v50 = v11[6];
      v51 = &v40[v50];
      v52 = &v41[v50];
      *(_OWORD *)v51 = *(_OWORD *)v52;
      v51[16] = v52[16];
      v40[v11[7]] = v41[v11[7]];
      v40[v11[8]] = v41[v11[8]];
      v40[v11[9]] = v41[v11[9]];
      v53 = v11[10];
      v54 = &v40[v53];
      v55 = &v41[v53];
      v56 = *((_QWORD *)v55 + 1);
      *(_QWORD *)v54 = *(_QWORD *)v55;
      *((_QWORD *)v54 + 1) = v56;
      v57 = v11[11];
      v58 = &v40[v57];
      v59 = &v41[v57];
      v60 = *((_QWORD *)v59 + 1);
      *(_QWORD *)v58 = *(_QWORD *)v59;
      *((_QWORD *)v58 + 1) = v60;
      v61 = *(void (**)(char *, _QWORD, uint64_t, int *))(v91 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v6 = v93;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v61(v40, 0, 1, v11);
      v7 = v95;
    }
    *(_OWORD *)&v36[v38[6]] = *(_OWORD *)&v37[v38[6]];
    v62 = v38[7];
    v63 = &v36[v62];
    v64 = &v37[v62];
    v65 = *((_OWORD *)v64 + 1);
    *(_OWORD *)v63 = *(_OWORD *)v64;
    *((_OWORD *)v63 + 1) = v65;
    *((_QWORD *)v63 + 10) = *((_QWORD *)v64 + 10);
    v66 = *((_OWORD *)v64 + 4);
    v67 = *((_OWORD *)v64 + 2);
    *((_OWORD *)v63 + 3) = *((_OWORD *)v64 + 3);
    *((_OWORD *)v63 + 4) = v66;
    *((_OWORD *)v63 + 2) = v67;
    *(_QWORD *)&v36[v38[8]] = *(_QWORD *)&v37[v38[8]];
    *(_QWORD *)&v36[v38[9]] = *(_QWORD *)&v37[v38[9]];
    v68 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    v69 = &v36[v68];
    v70 = &v37[v68];
    v71 = *((_QWORD *)v70 + 1);
    *(_QWORD *)v69 = *(_QWORD *)v70;
    *((_QWORD *)v69 + 1) = v71;
    v72 = *((_QWORD *)v70 + 3);
    *((_QWORD *)v69 + 2) = *((_QWORD *)v70 + 2);
    *((_QWORD *)v69 + 3) = v72;
    *((_QWORD *)v69 + 4) = *((_QWORD *)v70 + 4);
    *(_OWORD *)(v69 + 40) = *(_OWORD *)(v70 + 40);
    *(_OWORD *)(v69 + 56) = *(_OWORD *)(v70 + 56);
    *(_OWORD *)(v69 + 72) = *(_OWORD *)(v70 + 72);
    *(_OWORD *)(v69 + 88) = *(_OWORD *)(v70 + 88);
    *(_OWORD *)(v69 + 104) = *(_OWORD *)(v70 + 104);
    v73 = *(int *)(v94 + 32);
    v74 = (char *)v7 + v73;
    v75 = (char *)v6 + v73;
    v76 = *(_QWORD *)((char *)v6 + v73);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v76)
    {
      v77 = *((_QWORD *)v75 + 1);
      v78 = *((_QWORD *)v75 + 2);
      *(_QWORD *)v74 = v76;
      *((_QWORD *)v74 + 1) = v77;
      *((_QWORD *)v74 + 2) = v78;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v74 = *(_OWORD *)v75;
      *((_QWORD *)v74 + 2) = *((_QWORD *)v75 + 2);
    }
    v74[24] = v75[24];
    v74[32] = v75[32];
    v79 = *((_QWORD *)v75 + 6);
    *((_QWORD *)v74 + 5) = *((_QWORD *)v75 + 5);
    *((_QWORD *)v74 + 6) = v79;
    v74[56] = v75[56];
    v80 = *((_QWORD *)v75 + 9);
    *((_QWORD *)v74 + 8) = *((_QWORD *)v75 + 8);
    *((_QWORD *)v74 + 9) = v80;
    *((_QWORD *)v74 + 10) = *((_QWORD *)v75 + 10);
    v81 = *(_OWORD *)(v75 + 88);
    *(_OWORD *)(v74 + 104) = *(_OWORD *)(v75 + 104);
    *(_OWORD *)(v74 + 88) = v81;
    v82 = *(_OWORD *)(v75 + 120);
    v83 = *(_OWORD *)(v75 + 136);
    *(_OWORD *)(v74 + 152) = *(_OWORD *)(v75 + 152);
    *(_OWORD *)(v74 + 136) = v83;
    *(_OWORD *)(v74 + 120) = v82;
    v84 = *((_QWORD *)v75 + 22);
    *((_QWORD *)v74 + 21) = *((_QWORD *)v75 + 21);
    *((_QWORD *)v74 + 22) = v84;
    v86 = *((_QWORD *)v75 + 23);
    v85 = *((_QWORD *)v75 + 24);
    v74[200] = v75[200];
    *((_QWORD *)v74 + 23) = v86;
    *((_QWORD *)v74 + 24) = v85;
    v74[201] = v75[201];
    v87 = *((_QWORD *)v75 + 27);
    *((_QWORD *)v74 + 26) = *((_QWORD *)v75 + 26);
    *((_QWORD *)v74 + 27) = v87;
    v88 = *((_QWORD *)v75 + 29);
    *((_QWORD *)v74 + 28) = *((_QWORD *)v75 + 28);
    *((_QWORD *)v74 + 29) = v88;
    *((_QWORD *)v74 + 30) = *((_QWORD *)v75 + 30);
    v74[248] = v75[248];
    v89 = *((_QWORD *)v75 + 33);
    *((_QWORD *)v74 + 32) = *((_QWORD *)v75 + 32);
    *((_QWORD *)v74 + 33) = v89;
    *((_QWORD *)v74 + 34) = *((_QWORD *)v75 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v15 = v95;
  }
  swift_retain();
  return v15;
}

uint64_t sub_23DD2A550(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for OvernightMetricsChartPoint();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    v7 = sub_23DDC512C();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v4, v7);
    v9 = v4 + *(int *)(v5 + 20);
    v8(v9, v7);
    sub_23DCF9010();
    v8(v9 + *(int *)(v10 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v11 = a1 + a2[7];
  swift_bridgeObjectRelease();
  v12 = v11 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  if (!v6(v12, 1, v5))
  {
    v13 = sub_23DDC512C();
    v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
    v14(v12, v13);
    v15 = v12 + *(int *)(v5 + 20);
    v14(v15, v13);
    sub_23DCF9010();
    v14(v15 + *(int *)(v16 + 36), v13);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[8]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *sub_23DD2A7DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, int *);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t, int *);
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD, uint64_t, int *);
  uint64_t v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned int (**)(char *, uint64_t, int *))(v10 + 48);
  swift_bridgeObjectRetain();
  v91 = v3;
  v88 = v10;
  if (v11(v8, 1, v9))
  {
    sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = sub_23DDC512C();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v7, v8, v13);
    v15 = v9[5];
    v16 = &v7[v15];
    v89 = v4;
    v17 = &v8[v15];
    v14(&v7[v15], &v8[v15], v13);
    sub_23DCF9010();
    v14(&v16[*(int *)(v18 + 36)], &v17[*(int *)(v18 + 36)], v13);
    v19 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v16[v19[5]] = *(_QWORD *)&v17[v19[5]];
    *(_QWORD *)&v16[v19[6]] = *(_QWORD *)&v17[v19[6]];
    *(_QWORD *)&v16[v19[7]] = *(_QWORD *)&v17[v19[7]];
    v20 = v9[6];
    v21 = &v7[v20];
    v22 = &v8[v20];
    *(_OWORD *)v21 = *(_OWORD *)v22;
    v21[16] = v22[16];
    v7[v9[7]] = v8[v9[7]];
    v7[v9[8]] = v8[v9[8]];
    v7[v9[9]] = v8[v9[9]];
    v23 = v9[10];
    v24 = &v7[v23];
    v25 = &v8[v23];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    v27 = v9[11];
    v28 = &v7[v27];
    v29 = &v8[v27];
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    v31 = *(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v4 = v89;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(v7, 0, 1, v9);
    v3 = v91;
  }
  v32 = *(int *)(v3 + 28);
  *(_QWORD *)((char *)v5 + *(int *)(v3 + 24)) = *(_QWORD *)((char *)v4 + *(int *)(v3 + 24));
  v33 = (char *)v5 + v32;
  v34 = (char *)v4 + v32;
  *(_QWORD *)((char *)v5 + v32) = *(_QWORD *)((char *)v4 + v32);
  v35 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v36 = v35[5];
  v37 = &v33[v36];
  v38 = &v34[v36];
  swift_bridgeObjectRetain();
  v92 = v5;
  if (v11(v38, 1, v9))
  {
    sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v40 = sub_23DDC512C();
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
    v41(v37, v38, v40);
    v42 = v9[5];
    v90 = v4;
    v43 = &v37[v42];
    v44 = &v38[v42];
    v41(&v37[v42], &v38[v42], v40);
    sub_23DCF9010();
    v41(&v43[*(int *)(v45 + 36)], &v44[*(int *)(v45 + 36)], v40);
    v46 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v43[v46[5]] = *(_QWORD *)&v44[v46[5]];
    *(_QWORD *)&v43[v46[6]] = *(_QWORD *)&v44[v46[6]];
    *(_QWORD *)&v43[v46[7]] = *(_QWORD *)&v44[v46[7]];
    v47 = v9[6];
    v48 = &v37[v47];
    v49 = &v38[v47];
    *(_OWORD *)v48 = *(_OWORD *)v49;
    v48[16] = v49[16];
    v37[v9[7]] = v38[v9[7]];
    v37[v9[8]] = v38[v9[8]];
    v37[v9[9]] = v38[v9[9]];
    v50 = v9[10];
    v51 = &v37[v50];
    v52 = &v38[v50];
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *((_QWORD *)v51 + 1) = v53;
    v54 = v9[11];
    v55 = &v37[v54];
    v56 = &v38[v54];
    v57 = *((_QWORD *)v56 + 1);
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *((_QWORD *)v55 + 1) = v57;
    v58 = *(void (**)(char *, _QWORD, uint64_t, int *))(v88 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v4 = v90;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v58(v37, 0, 1, v9);
    v5 = v92;
  }
  *(_OWORD *)&v33[v35[6]] = *(_OWORD *)&v34[v35[6]];
  v59 = v35[7];
  v60 = &v33[v59];
  v61 = &v34[v59];
  v62 = *((_OWORD *)v61 + 1);
  *(_OWORD *)v60 = *(_OWORD *)v61;
  *((_OWORD *)v60 + 1) = v62;
  *((_QWORD *)v60 + 10) = *((_QWORD *)v61 + 10);
  v63 = *((_OWORD *)v61 + 4);
  v64 = *((_OWORD *)v61 + 2);
  *((_OWORD *)v60 + 3) = *((_OWORD *)v61 + 3);
  *((_OWORD *)v60 + 4) = v63;
  *((_OWORD *)v60 + 2) = v64;
  *(_QWORD *)&v33[v35[8]] = *(_QWORD *)&v34[v35[8]];
  *(_QWORD *)&v33[v35[9]] = *(_QWORD *)&v34[v35[9]];
  v65 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v66 = &v33[v65];
  v67 = &v34[v65];
  v68 = *((_QWORD *)v67 + 1);
  *(_QWORD *)v66 = *(_QWORD *)v67;
  *((_QWORD *)v66 + 1) = v68;
  v69 = *((_QWORD *)v67 + 3);
  *((_QWORD *)v66 + 2) = *((_QWORD *)v67 + 2);
  *((_QWORD *)v66 + 3) = v69;
  *((_QWORD *)v66 + 4) = *((_QWORD *)v67 + 4);
  *(_OWORD *)(v66 + 40) = *(_OWORD *)(v67 + 40);
  *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
  *(_OWORD *)(v66 + 72) = *(_OWORD *)(v67 + 72);
  *(_OWORD *)(v66 + 88) = *(_OWORD *)(v67 + 88);
  *(_OWORD *)(v66 + 104) = *(_OWORD *)(v67 + 104);
  v70 = *(int *)(v91 + 32);
  v71 = (char *)v5 + v70;
  v72 = (char *)v4 + v70;
  v73 = *(_QWORD *)((char *)v4 + v70);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v73)
  {
    v74 = *((_QWORD *)v72 + 1);
    v75 = *((_QWORD *)v72 + 2);
    *(_QWORD *)v71 = v73;
    *((_QWORD *)v71 + 1) = v74;
    *((_QWORD *)v71 + 2) = v75;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v71 = *(_OWORD *)v72;
    *((_QWORD *)v71 + 2) = *((_QWORD *)v72 + 2);
  }
  v71[24] = v72[24];
  v71[32] = v72[32];
  v76 = *((_QWORD *)v72 + 6);
  *((_QWORD *)v71 + 5) = *((_QWORD *)v72 + 5);
  *((_QWORD *)v71 + 6) = v76;
  v71[56] = v72[56];
  v77 = *((_QWORD *)v72 + 9);
  *((_QWORD *)v71 + 8) = *((_QWORD *)v72 + 8);
  *((_QWORD *)v71 + 9) = v77;
  *((_QWORD *)v71 + 10) = *((_QWORD *)v72 + 10);
  v78 = *(_OWORD *)(v72 + 88);
  *(_OWORD *)(v71 + 104) = *(_OWORD *)(v72 + 104);
  *(_OWORD *)(v71 + 88) = v78;
  v79 = *(_OWORD *)(v72 + 120);
  v80 = *(_OWORD *)(v72 + 136);
  *(_OWORD *)(v71 + 152) = *(_OWORD *)(v72 + 152);
  *(_OWORD *)(v71 + 136) = v80;
  *(_OWORD *)(v71 + 120) = v79;
  v81 = *((_QWORD *)v72 + 22);
  *((_QWORD *)v71 + 21) = *((_QWORD *)v72 + 21);
  *((_QWORD *)v71 + 22) = v81;
  v83 = *((_QWORD *)v72 + 23);
  v82 = *((_QWORD *)v72 + 24);
  v71[200] = v72[200];
  *((_QWORD *)v71 + 23) = v83;
  *((_QWORD *)v71 + 24) = v82;
  v71[201] = v72[201];
  v84 = *((_QWORD *)v72 + 27);
  *((_QWORD *)v71 + 26) = *((_QWORD *)v72 + 26);
  *((_QWORD *)v71 + 27) = v84;
  v85 = *((_QWORD *)v72 + 29);
  *((_QWORD *)v71 + 28) = *((_QWORD *)v72 + 28);
  *((_QWORD *)v71 + 29) = v85;
  *((_QWORD *)v71 + 30) = *((_QWORD *)v72 + 30);
  v71[248] = v72[248];
  v86 = *((_QWORD *)v72 + 33);
  *((_QWORD *)v71 + 32) = *((_QWORD *)v72 + 32);
  *((_QWORD *)v71 + 33) = v86;
  *((_QWORD *)v71 + 34) = *((_QWORD *)v72 + 34);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v92;
}

_QWORD *sub_23DD2ADC4(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t (*v10)(char *, uint64_t, int *);
  int v11;
  int v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, _QWORD, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void (*v59)(char *, _QWORD, uint64_t, int *);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  __int128 v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  int *v123;

  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)v5 + v6;
  v8 = (char *)v4 + v6;
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v122 = *((_QWORD *)v9 - 1);
  v10 = *(uint64_t (**)(char *, uint64_t, int *))(v122 + 48);
  v11 = v10(v7, 1, v9);
  v12 = v10(v8, 1, v9);
  v123 = a3;
  if (v11)
  {
    if (!v12)
    {
      v13 = sub_23DDC512C();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      v14(v7, v8, v13);
      v15 = v9[5];
      v16 = &v7[v15];
      v17 = v4;
      v18 = &v8[v15];
      v14(&v7[v15], &v8[v15], v13);
      sub_23DCF9010();
      v14(&v16[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v13);
      v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v16[v20[5]] = *(_QWORD *)&v18[v20[5]];
      *(_QWORD *)&v16[v20[6]] = *(_QWORD *)&v18[v20[6]];
      *(_QWORD *)&v16[v20[7]] = *(_QWORD *)&v18[v20[7]];
      v21 = v9[6];
      v22 = &v7[v21];
      v23 = &v8[v21];
      v24 = v23[16];
      *(_OWORD *)v22 = *(_OWORD *)v23;
      v22[16] = v24;
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      v25 = v9[10];
      v26 = &v7[v25];
      v27 = &v8[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
      v28 = v9[11];
      v29 = &v7[v28];
      v30 = &v8[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
      v31 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v122 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v4 = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31(v7, 0, 1, v9);
      a3 = v123;
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    sub_23DCF59A8((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  v76 = sub_23DDC512C();
  v77 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 24);
  v77(v7, v8, v76);
  v78 = v9[5];
  v79 = &v7[v78];
  v80 = v4;
  v81 = &v8[v78];
  v77(&v7[v78], &v8[v78], v76);
  sub_23DCF9010();
  v77(&v79[*(int *)(v82 + 36)], &v81[*(int *)(v82 + 36)], v76);
  v83 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v79[v83[5]] = *(_QWORD *)&v81[v83[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v79[v83[6]] = *(_QWORD *)&v81[v83[6]];
  swift_bridgeObjectRetain();
  a3 = v123;
  swift_bridgeObjectRelease();
  v84 = v83[7];
  v85 = *(_QWORD *)&v81[v84];
  v4 = v80;
  *(_QWORD *)&v79[v84] = v85;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v86 = v9[6];
  v87 = &v7[v86];
  v88 = &v8[v86];
  v89 = *(_OWORD *)v88;
  v87[16] = v88[16];
  *(_OWORD *)v87 = v89;
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v7[v9[9]] = v8[v9[9]];
  v90 = v9[10];
  v91 = &v7[v90];
  v92 = &v8[v90];
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *((_QWORD *)v91 + 1) = *((_QWORD *)v92 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v93 = v9[11];
  v94 = &v7[v93];
  v95 = &v8[v93];
  *(_QWORD *)v94 = *(_QWORD *)v95;
  *((_QWORD *)v94 + 1) = *((_QWORD *)v95 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  *(_QWORD *)((char *)v5 + a3[6]) = *(_QWORD *)((char *)v4 + a3[6]);
  v33 = a3[7];
  v34 = (char *)v5 + v33;
  v35 = (char *)v4 + v33;
  *(_QWORD *)((char *)v5 + v33) = *(_QWORD *)((char *)v4 + v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v37 = v36[5];
  v38 = &v34[v37];
  v39 = &v35[v37];
  v40 = v10(&v34[v37], 1, v9);
  v41 = v10(v39, 1, v9);
  if (v40)
  {
    if (!v41)
    {
      v42 = sub_23DDC512C();
      v120 = v5;
      v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
      v43(v38, v39, v42);
      v44 = v9[5];
      v45 = &v38[v44];
      v118 = v4;
      v46 = &v39[v44];
      v43(&v38[v44], &v39[v44], v42);
      sub_23DCF9010();
      v43(&v45[*(int *)(v47 + 36)], &v46[*(int *)(v47 + 36)], v42);
      v48 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v45[v48[5]] = *(_QWORD *)&v46[v48[5]];
      *(_QWORD *)&v45[v48[6]] = *(_QWORD *)&v46[v48[6]];
      *(_QWORD *)&v45[v48[7]] = *(_QWORD *)&v46[v48[7]];
      v49 = v9[6];
      v50 = &v38[v49];
      v51 = &v39[v49];
      v52 = v51[16];
      *(_OWORD *)v50 = *(_OWORD *)v51;
      v50[16] = v52;
      v38[v9[7]] = v39[v9[7]];
      v38[v9[8]] = v39[v9[8]];
      v38[v9[9]] = v39[v9[9]];
      v53 = v9[10];
      v54 = &v38[v53];
      v55 = &v39[v53];
      *(_QWORD *)v54 = *(_QWORD *)v55;
      *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
      v56 = v9[11];
      v57 = &v38[v56];
      v58 = &v39[v56];
      *(_QWORD *)v57 = *(_QWORD *)v58;
      *((_QWORD *)v57 + 1) = *((_QWORD *)v58 + 1);
      v59 = *(void (**)(char *, _QWORD, uint64_t, int *))(v122 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v4 = v118;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v59(v38, 0, 1, v9);
      v5 = v120;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v41)
  {
    sub_23DCF59A8((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_12:
    sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_13;
  }
  v96 = sub_23DDC512C();
  v97 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 24);
  v97(v38, v39, v96);
  v98 = v9[5];
  v119 = v4;
  v121 = v5;
  v99 = &v38[v98];
  v100 = &v39[v98];
  v97(&v38[v98], &v39[v98], v96);
  sub_23DCF9010();
  v97(&v99[*(int *)(v101 + 36)], &v100[*(int *)(v101 + 36)], v96);
  v102 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v99[v102[5]] = *(_QWORD *)&v100[v102[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v99[v102[6]] = *(_QWORD *)&v100[v102[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v99[v102[7]] = *(_QWORD *)&v100[v102[7]];
  v4 = v119;
  v5 = v121;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v103 = v9[6];
  v104 = &v38[v103];
  v105 = &v39[v103];
  v106 = *(_OWORD *)v105;
  v104[16] = v105[16];
  *(_OWORD *)v104 = v106;
  v38[v9[7]] = v39[v9[7]];
  v38[v9[8]] = v39[v9[8]];
  v38[v9[9]] = v39[v9[9]];
  v107 = v9[10];
  v108 = &v38[v107];
  v109 = &v39[v107];
  *(_QWORD *)v108 = *(_QWORD *)v109;
  *((_QWORD *)v108 + 1) = *((_QWORD *)v109 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v110 = v9[11];
  v111 = &v38[v110];
  v112 = &v39[v110];
  *(_QWORD *)v111 = *(_QWORD *)v112;
  *((_QWORD *)v111 + 1) = *((_QWORD *)v112 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  v61 = v36[6];
  v62 = &v34[v61];
  v63 = &v35[v61];
  *(_QWORD *)v62 = *(_QWORD *)v63;
  *((_QWORD *)v62 + 1) = *((_QWORD *)v63 + 1);
  v64 = v36[7];
  v65 = &v34[v64];
  v66 = &v35[v64];
  *(_QWORD *)v65 = *(_QWORD *)v66;
  v67 = *((_QWORD *)v66 + 1);
  v65[16] = v66[16];
  *((_QWORD *)v65 + 1) = v67;
  *((_QWORD *)v65 + 3) = *((_QWORD *)v66 + 3);
  *((_QWORD *)v65 + 4) = *((_QWORD *)v66 + 4);
  *((_QWORD *)v65 + 5) = *((_QWORD *)v66 + 5);
  *((_QWORD *)v65 + 6) = *((_QWORD *)v66 + 6);
  *((_QWORD *)v65 + 7) = *((_QWORD *)v66 + 7);
  *((_QWORD *)v65 + 8) = *((_QWORD *)v66 + 8);
  *((_QWORD *)v65 + 9) = *((_QWORD *)v66 + 9);
  *((_QWORD *)v65 + 10) = *((_QWORD *)v66 + 10);
  *(_QWORD *)&v34[v36[8]] = *(_QWORD *)&v35[v36[8]];
  *(_QWORD *)&v34[v36[9]] = *(_QWORD *)&v35[v36[9]];
  v68 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v69 = &v34[v68];
  v70 = &v35[v68];
  *(_QWORD *)v69 = *(_QWORD *)v70;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v69 + 1) = *((_QWORD *)v70 + 1);
  *((_QWORD *)v69 + 2) = *((_QWORD *)v70 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v69 + 3) = *((_QWORD *)v70 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v69 + 4) = *((_QWORD *)v70 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v69 + 5) = *((_QWORD *)v70 + 5);
  *((_QWORD *)v69 + 6) = *((_QWORD *)v70 + 6);
  *((_QWORD *)v69 + 7) = *((_QWORD *)v70 + 7);
  *((_QWORD *)v69 + 8) = *((_QWORD *)v70 + 8);
  *((_QWORD *)v69 + 9) = *((_QWORD *)v70 + 9);
  *((_QWORD *)v69 + 10) = *((_QWORD *)v70 + 10);
  *((_QWORD *)v69 + 11) = *((_QWORD *)v70 + 11);
  *((_QWORD *)v69 + 12) = *((_QWORD *)v70 + 12);
  *((_QWORD *)v69 + 13) = *((_QWORD *)v70 + 13);
  *((_QWORD *)v69 + 14) = *((_QWORD *)v70 + 14);
  v71 = v123[8];
  v72 = (char *)v5 + v71;
  v73 = (char *)v4 + v71;
  v74 = *(_QWORD *)((char *)v4 + v71);
  if (*(_QWORD *)((char *)v5 + v71))
  {
    if (v74)
    {
      *(_QWORD *)v72 = v74;
      swift_retain();
      swift_release();
      *((_QWORD *)v72 + 1) = *((_QWORD *)v73 + 1);
      swift_retain();
      swift_release();
      *((_QWORD *)v72 + 2) = *((_QWORD *)v73 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_23DCF9EB8((uint64_t)v5 + v71);
      v75 = *((_QWORD *)v73 + 2);
      *(_OWORD *)v72 = *(_OWORD *)v73;
      *((_QWORD *)v72 + 2) = v75;
    }
  }
  else if (v74)
  {
    *(_QWORD *)v72 = v74;
    *((_QWORD *)v72 + 1) = *((_QWORD *)v73 + 1);
    *((_QWORD *)v72 + 2) = *((_QWORD *)v73 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v113 = *(_OWORD *)v73;
    *((_QWORD *)v72 + 2) = *((_QWORD *)v73 + 2);
    *(_OWORD *)v72 = v113;
  }
  v72[24] = v73[24];
  v72[32] = v73[32];
  *((_QWORD *)v72 + 5) = *((_QWORD *)v73 + 5);
  swift_retain();
  swift_release();
  v114 = *((_QWORD *)v73 + 6);
  v72[56] = v73[56];
  *((_QWORD *)v72 + 6) = v114;
  *((_QWORD *)v72 + 8) = *((_QWORD *)v73 + 8);
  *((_QWORD *)v72 + 9) = *((_QWORD *)v73 + 9);
  swift_retain();
  swift_release();
  *((_QWORD *)v72 + 10) = *((_QWORD *)v73 + 10);
  swift_retain();
  swift_release();
  *((_QWORD *)v72 + 11) = *((_QWORD *)v73 + 11);
  v115 = *((_QWORD *)v73 + 12);
  v72[104] = v73[104];
  *((_QWORD *)v72 + 12) = v115;
  *((_QWORD *)v72 + 14) = *((_QWORD *)v73 + 14);
  *((_QWORD *)v72 + 15) = *((_QWORD *)v73 + 15);
  *((_QWORD *)v72 + 16) = *((_QWORD *)v73 + 16);
  *((_QWORD *)v72 + 17) = *((_QWORD *)v73 + 17);
  *((_QWORD *)v72 + 18) = *((_QWORD *)v73 + 18);
  *((_QWORD *)v72 + 19) = *((_QWORD *)v73 + 19);
  *((_QWORD *)v72 + 20) = *((_QWORD *)v73 + 20);
  *((_QWORD *)v72 + 21) = *((_QWORD *)v73 + 21);
  *((_QWORD *)v72 + 22) = *((_QWORD *)v73 + 22);
  swift_retain();
  swift_release();
  *((_QWORD *)v72 + 23) = *((_QWORD *)v73 + 23);
  swift_retain();
  swift_release();
  v116 = *((_QWORD *)v73 + 24);
  v72[200] = v73[200];
  *((_QWORD *)v72 + 24) = v116;
  v72[201] = v73[201];
  *((_QWORD *)v72 + 26) = *((_QWORD *)v73 + 26);
  swift_retain();
  swift_release();
  *((_QWORD *)v72 + 27) = *((_QWORD *)v73 + 27);
  swift_retain();
  swift_release();
  *((_QWORD *)v72 + 28) = *((_QWORD *)v73 + 28);
  swift_retain();
  swift_release();
  *((_QWORD *)v72 + 29) = *((_QWORD *)v73 + 29);
  swift_retain();
  swift_release();
  *((_QWORD *)v72 + 30) = *((_QWORD *)v73 + 30);
  swift_retain();
  swift_release();
  v72[248] = v73[248];
  *((_QWORD *)v72 + 32) = *((_QWORD *)v73 + 32);
  swift_retain();
  swift_release();
  *((_QWORD *)v72 + 33) = *((_QWORD *)v73 + 33);
  swift_retain();
  swift_release();
  *((_QWORD *)v72 + 34) = *((_QWORD *)v73 + 34);
  return v5;
}

_QWORD *sub_23DD2B8D8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  unsigned int (*v10)(char *, uint64_t, int *);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  int *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v10 = *(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48);
  v61 = *((_QWORD *)v9 - 1);
  if (v10(v8, 1, v9))
  {
    sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = sub_23DDC512C();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
    v13(v7, v8, v12);
    v14 = v9[5];
    v59 = v4;
    v15 = &v7[v14];
    v16 = v3;
    v17 = &v8[v14];
    v13(&v7[v14], &v8[v14], v12);
    sub_23DCF9010();
    v13(&v15[*(int *)(v18 + 36)], &v17[*(int *)(v18 + 36)], v12);
    v19 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v15[v19[5]] = *(_QWORD *)&v17[v19[5]];
    *(_QWORD *)&v15[v19[6]] = *(_QWORD *)&v17[v19[6]];
    v20 = v19[7];
    v21 = *(_QWORD *)&v17[v20];
    v3 = v16;
    *(_QWORD *)&v15[v20] = v21;
    v4 = v59;
    v22 = v9[6];
    v23 = &v7[v22];
    v24 = &v8[v22];
    *(_OWORD *)v23 = *(_OWORD *)v24;
    v23[16] = v24[16];
    v7[v9[7]] = v8[v9[7]];
    v7[v9[8]] = v8[v9[8]];
    v7[v9[9]] = v8[v9[9]];
    *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
    *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v61 + 56))(v7, 0, 1, v9);
  }
  v25 = v3[7];
  *(_QWORD *)((char *)v5 + v3[6]) = *(_QWORD *)((char *)v4 + v3[6]);
  v26 = (char *)v5 + v25;
  v27 = (char *)v4 + v25;
  *(_QWORD *)((char *)v5 + v25) = *(_QWORD *)((char *)v4 + v25);
  v28 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v29 = v28[5];
  v30 = &v26[v29];
  v31 = &v27[v29];
  if (v10(&v27[v29], 1, v9))
  {
    sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v58 = v5;
    v60 = v4;
    v33 = sub_23DDC512C();
    v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
    v34(v30, v31, v33);
    v35 = v9[5];
    v57 = v3;
    v36 = &v30[v35];
    v37 = &v31[v35];
    v34(&v30[v35], &v31[v35], v33);
    sub_23DCF9010();
    v39 = v33;
    v4 = v60;
    v34(&v36[*(int *)(v38 + 36)], &v37[*(int *)(v38 + 36)], v39);
    v5 = v58;
    v40 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v36[v40[5]] = *(_QWORD *)&v37[v40[5]];
    *(_QWORD *)&v36[v40[6]] = *(_QWORD *)&v37[v40[6]];
    *(_QWORD *)&v36[v40[7]] = *(_QWORD *)&v37[v40[7]];
    v3 = v57;
    v41 = v9[6];
    v42 = &v30[v41];
    v43 = &v31[v41];
    *(_OWORD *)v42 = *(_OWORD *)v43;
    v42[16] = v43[16];
    v30[v9[7]] = v31[v9[7]];
    v30[v9[8]] = v31[v9[8]];
    v30[v9[9]] = v31[v9[9]];
    *(_OWORD *)&v30[v9[10]] = *(_OWORD *)&v31[v9[10]];
    *(_OWORD *)&v30[v9[11]] = *(_OWORD *)&v31[v9[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v61 + 56))(v30, 0, 1, v9);
  }
  *(_OWORD *)&v26[v28[6]] = *(_OWORD *)&v27[v28[6]];
  v44 = v28[7];
  v45 = &v26[v44];
  v46 = &v27[v44];
  v47 = *((_OWORD *)v46 + 1);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *((_OWORD *)v45 + 1) = v47;
  *((_QWORD *)v45 + 10) = *((_QWORD *)v46 + 10);
  v48 = *((_OWORD *)v46 + 4);
  v49 = *((_OWORD *)v46 + 2);
  *((_OWORD *)v45 + 3) = *((_OWORD *)v46 + 3);
  *((_OWORD *)v45 + 4) = v48;
  *((_OWORD *)v45 + 2) = v49;
  *(_QWORD *)&v26[v28[8]] = *(_QWORD *)&v27[v28[8]];
  *(_QWORD *)&v26[v28[9]] = *(_QWORD *)&v27[v28[9]];
  v50 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v51 = &v26[v50];
  v52 = &v27[v50];
  v53 = *((_OWORD *)v52 + 5);
  *((_OWORD *)v51 + 4) = *((_OWORD *)v52 + 4);
  *((_OWORD *)v51 + 5) = v53;
  *((_OWORD *)v51 + 6) = *((_OWORD *)v52 + 6);
  *((_QWORD *)v51 + 14) = *((_QWORD *)v52 + 14);
  v54 = *((_OWORD *)v52 + 1);
  *(_OWORD *)v51 = *(_OWORD *)v52;
  *((_OWORD *)v51 + 1) = v54;
  v55 = *((_OWORD *)v52 + 3);
  *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
  *((_OWORD *)v51 + 3) = v55;
  memcpy((char *)v5 + v3[8], (char *)v4 + v3[8], 0x118uLL);
  return v5;
}

_QWORD *sub_23DD2BCCC(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t (*v10)(char *, uint64_t, int *);
  int v11;
  int v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  int *v105;
  _QWORD *v106;

  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)v5 + v6;
  v8 = (char *)v4 + v6;
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v104 = *((_QWORD *)v9 - 1);
  v10 = *(uint64_t (**)(char *, uint64_t, int *))(v104 + 48);
  v11 = v10(v7, 1, v9);
  v12 = v10(v8, 1, v9);
  v106 = v4;
  if (v11)
  {
    if (!v12)
    {
      v13 = sub_23DDC512C();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
      v14(v7, v8, v13);
      v15 = v9[5];
      v16 = &v7[v15];
      v17 = v5;
      v18 = &v8[v15];
      v14(&v7[v15], &v8[v15], v13);
      sub_23DCF9010();
      v14(&v16[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v13);
      v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v16[v20[5]] = *(_QWORD *)&v18[v20[5]];
      *(_QWORD *)&v16[v20[6]] = *(_QWORD *)&v18[v20[6]];
      v21 = v20[7];
      v22 = *(_QWORD *)&v18[v21];
      v5 = v17;
      v4 = v106;
      *(_QWORD *)&v16[v21] = v22;
      v23 = v9[6];
      v24 = &v7[v23];
      v25 = &v8[v23];
      *(_OWORD *)v24 = *(_OWORD *)v25;
      v24[16] = v25[16];
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
      *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v104 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    sub_23DCF59A8((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  v59 = sub_23DDC512C();
  v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 40);
  v60(v7, v8, v59);
  v61 = v9[5];
  v62 = &v7[v61];
  v63 = v5;
  v64 = &v8[v61];
  v60(&v7[v61], &v8[v61], v59);
  sub_23DCF9010();
  v60(&v62[*(int *)(v65 + 36)], &v64[*(int *)(v65 + 36)], v59);
  v66 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v62[v66[5]] = *(_QWORD *)&v64[v66[5]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v62[v66[6]] = *(_QWORD *)&v64[v66[6]];
  swift_bridgeObjectRelease();
  v67 = v66[7];
  v68 = *(_QWORD *)&v64[v67];
  v5 = v63;
  v4 = v106;
  *(_QWORD *)&v62[v67] = v68;
  swift_bridgeObjectRelease();
  v69 = v9[6];
  v70 = &v7[v69];
  v71 = &v8[v69];
  *(_OWORD *)v70 = *(_OWORD *)v71;
  v70[16] = v71[16];
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v7[v9[9]] = v8[v9[9]];
  v72 = v9[10];
  v73 = &v7[v72];
  v74 = (uint64_t *)&v8[v72];
  v76 = *v74;
  v75 = v74[1];
  *(_QWORD *)v73 = v76;
  *((_QWORD *)v73 + 1) = v75;
  swift_bridgeObjectRelease();
  v77 = v9[11];
  v78 = &v7[v77];
  v79 = (uint64_t *)&v8[v77];
  v81 = *v79;
  v80 = v79[1];
  *(_QWORD *)v78 = v81;
  *((_QWORD *)v78 + 1) = v80;
  swift_bridgeObjectRelease();
LABEL_7:
  v27 = a3[7];
  v105 = a3;
  *(_QWORD *)((char *)v5 + a3[6]) = *(_QWORD *)((char *)v4 + a3[6]);
  v28 = (char *)v5 + v27;
  v29 = (char *)v4 + v27;
  *(_QWORD *)((char *)v5 + v27) = *(_QWORD *)((char *)v4 + v27);
  swift_bridgeObjectRelease();
  v30 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v31 = v30[5];
  v32 = &v28[v31];
  v33 = &v29[v31];
  v34 = v10(&v28[v31], 1, v9);
  v35 = v10(v33, 1, v9);
  if (v34)
  {
    if (!v35)
    {
      v36 = sub_23DDC512C();
      v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32);
      v37(v32, v33, v36);
      v38 = v9[5];
      v102 = v5;
      v39 = &v32[v38];
      v40 = &v33[v38];
      v37(&v32[v38], &v33[v38], v36);
      sub_23DCF9010();
      v37(&v39[*(int *)(v41 + 36)], &v40[*(int *)(v41 + 36)], v36);
      v42 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v39[v42[5]] = *(_QWORD *)&v40[v42[5]];
      *(_QWORD *)&v39[v42[6]] = *(_QWORD *)&v40[v42[6]];
      *(_QWORD *)&v39[v42[7]] = *(_QWORD *)&v40[v42[7]];
      v5 = v102;
      v43 = v9[6];
      v44 = &v32[v43];
      v45 = &v33[v43];
      *(_OWORD *)v44 = *(_OWORD *)v45;
      v44[16] = v45[16];
      v32[v9[7]] = v33[v9[7]];
      v32[v9[8]] = v33[v9[8]];
      v32[v9[9]] = v33[v9[9]];
      *(_OWORD *)&v32[v9[10]] = *(_OWORD *)&v33[v9[10]];
      *(_OWORD *)&v32[v9[11]] = *(_OWORD *)&v33[v9[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v104 + 56))(v32, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v35)
  {
    sub_23DCF59A8((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_12:
    sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_13;
  }
  v82 = sub_23DDC512C();
  v83 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 40);
  v83(v32, v33, v82);
  v84 = v9[5];
  v103 = v5;
  v85 = &v32[v84];
  v86 = &v33[v84];
  v83(&v32[v84], &v33[v84], v82);
  sub_23DCF9010();
  v83(&v85[*(int *)(v87 + 36)], &v86[*(int *)(v87 + 36)], v82);
  v88 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v85[v88[5]] = *(_QWORD *)&v86[v88[5]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v85[v88[6]] = *(_QWORD *)&v86[v88[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v85[v88[7]] = *(_QWORD *)&v86[v88[7]];
  v5 = v103;
  swift_bridgeObjectRelease();
  v89 = v9[6];
  v90 = &v32[v89];
  v91 = &v33[v89];
  *(_OWORD *)v90 = *(_OWORD *)v91;
  v90[16] = v91[16];
  v32[v9[7]] = v33[v9[7]];
  v32[v9[8]] = v33[v9[8]];
  v32[v9[9]] = v33[v9[9]];
  v92 = v9[10];
  v93 = &v32[v92];
  v94 = (uint64_t *)&v33[v92];
  v96 = *v94;
  v95 = v94[1];
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease();
  v97 = v9[11];
  v98 = &v32[v97];
  v99 = (uint64_t *)&v33[v97];
  v101 = *v99;
  v100 = v99[1];
  *(_QWORD *)v98 = v101;
  *((_QWORD *)v98 + 1) = v100;
  swift_bridgeObjectRelease();
LABEL_13:
  *(_OWORD *)&v28[v30[6]] = *(_OWORD *)&v29[v30[6]];
  v47 = v30[7];
  v48 = &v28[v47];
  v49 = &v29[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
  v48[16] = v49[16];
  *(_OWORD *)(v48 + 24) = *(_OWORD *)(v49 + 24);
  *(_OWORD *)(v48 + 40) = *(_OWORD *)(v49 + 40);
  *(_OWORD *)(v48 + 56) = *(_OWORD *)(v49 + 56);
  *(_OWORD *)(v48 + 72) = *(_OWORD *)(v49 + 72);
  *(_QWORD *)&v28[v30[8]] = *(_QWORD *)&v29[v30[8]];
  *(_QWORD *)&v28[v30[9]] = *(_QWORD *)&v29[v30[9]];
  v50 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v51 = &v28[v50];
  v52 = &v29[v50];
  *(_QWORD *)&v28[v50] = *(_QWORD *)v52;
  swift_bridgeObjectRelease();
  *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
  *((_QWORD *)v51 + 2) = *((_QWORD *)v52 + 2);
  swift_bridgeObjectRelease();
  *((_QWORD *)v51 + 3) = *((_QWORD *)v52 + 3);
  swift_bridgeObjectRelease();
  *((_QWORD *)v51 + 4) = *((_QWORD *)v52 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v51 + 40) = *(_OWORD *)(v52 + 40);
  *(_OWORD *)(v51 + 56) = *(_OWORD *)(v52 + 56);
  *(_OWORD *)(v51 + 72) = *(_OWORD *)(v52 + 72);
  *(_OWORD *)(v51 + 88) = *(_OWORD *)(v52 + 88);
  *(_OWORD *)(v51 + 104) = *(_OWORD *)(v52 + 104);
  v53 = v105[8];
  v54 = (uint64_t)v5 + v53;
  v55 = (uint64_t)v106 + v53;
  if (!*(_QWORD *)((char *)v5 + v53))
  {
LABEL_17:
    *(_OWORD *)v54 = *(_OWORD *)v55;
    *(_QWORD *)(v54 + 16) = *(_QWORD *)(v55 + 16);
    goto LABEL_18;
  }
  if (!*(_QWORD *)v55)
  {
    sub_23DCF9EB8(v54);
    goto LABEL_17;
  }
  *(_QWORD *)v54 = *(_QWORD *)v55;
  swift_release();
  *(_QWORD *)(v54 + 8) = *(_QWORD *)(v55 + 8);
  swift_release();
  *(_QWORD *)(v54 + 16) = *(_QWORD *)(v55 + 16);
  swift_release();
LABEL_18:
  *(_BYTE *)(v54 + 24) = *(_BYTE *)(v55 + 24);
  *(_BYTE *)(v54 + 32) = *(_BYTE *)(v55 + 32);
  *(_QWORD *)(v54 + 40) = *(_QWORD *)(v55 + 40);
  swift_release();
  *(_QWORD *)(v54 + 48) = *(_QWORD *)(v55 + 48);
  *(_BYTE *)(v54 + 56) = *(_BYTE *)(v55 + 56);
  *(_QWORD *)(v54 + 64) = *(_QWORD *)(v55 + 64);
  *(_QWORD *)(v54 + 72) = *(_QWORD *)(v55 + 72);
  swift_release();
  *(_QWORD *)(v54 + 80) = *(_QWORD *)(v55 + 80);
  swift_release();
  *(_QWORD *)(v54 + 88) = *(_QWORD *)(v55 + 88);
  *(_QWORD *)(v54 + 96) = *(_QWORD *)(v55 + 96);
  *(_BYTE *)(v54 + 104) = *(_BYTE *)(v55 + 104);
  v56 = *(_OWORD *)(v55 + 128);
  *(_OWORD *)(v54 + 112) = *(_OWORD *)(v55 + 112);
  *(_OWORD *)(v54 + 128) = v56;
  v57 = *(_OWORD *)(v55 + 160);
  *(_OWORD *)(v54 + 144) = *(_OWORD *)(v55 + 144);
  *(_OWORD *)(v54 + 160) = v57;
  *(_QWORD *)(v54 + 176) = *(_QWORD *)(v55 + 176);
  swift_release();
  *(_QWORD *)(v54 + 184) = *(_QWORD *)(v55 + 184);
  swift_release();
  *(_QWORD *)(v54 + 192) = *(_QWORD *)(v55 + 192);
  *(_BYTE *)(v54 + 200) = *(_BYTE *)(v55 + 200);
  *(_BYTE *)(v54 + 201) = *(_BYTE *)(v55 + 201);
  *(_QWORD *)(v54 + 208) = *(_QWORD *)(v55 + 208);
  swift_release();
  *(_QWORD *)(v54 + 216) = *(_QWORD *)(v55 + 216);
  swift_release();
  *(_QWORD *)(v54 + 224) = *(_QWORD *)(v55 + 224);
  swift_release();
  *(_QWORD *)(v54 + 232) = *(_QWORD *)(v55 + 232);
  swift_release();
  *(_QWORD *)(v54 + 240) = *(_QWORD *)(v55 + 240);
  swift_release();
  *(_BYTE *)(v54 + 248) = *(_BYTE *)(v55 + 248);
  *(_QWORD *)(v54 + 256) = *(_QWORD *)(v55 + 256);
  swift_release();
  *(_QWORD *)(v54 + 264) = *(_QWORD *)(v55 + 264);
  swift_release();
  *(_QWORD *)(v54 + 272) = *(_QWORD *)(v55 + 272);
  return v5;
}

uint64_t sub_23DD2C55C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD2C568(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for OvernightMetricsChartLayout(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_23DD2C618()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23DD2C624(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for OvernightMetricsChartLayout(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for GradientOverlaidPills()
{
  uint64_t result;

  result = qword_256CFD6A8;
  if (!qword_256CFD6A8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DD2C70C()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DD2DDB4(319, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for OvernightMetricsChartLayout(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_23DD2C7C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD2C7D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v63 = a2;
  v65 = type metadata accessor for GradientOverlaidPills();
  MEMORY[0x24BDAC7A8](v65);
  v58 = (uint64_t)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v52 - v7;
  sub_23DD2E080(0);
  v64 = v9;
  v61 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v60 = (uint64_t)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD2DF58(0);
  v66 = v11;
  v57 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v62 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD2DE0C(0);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v56 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v52 - v18;
  v20 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(int *)(type metadata accessor for OvernightMetricsChartPoint() + 20);
  v59 = a1;
  v25 = *(_QWORD *)(a1 + v24 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 20));
  v26 = *(_QWORD *)(v25 + 16);
  if (v26)
  {
    v52 = v19;
    v53 = v15;
    v54 = v14;
    v55 = a3;
    v27 = v25 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v28 = *(_QWORD *)(v21 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_23DCF58EC(v27, (uint64_t)v23, type metadata accessor for IndividualOvernightMetricChartPoint);
      v29 = v23[*(int *)(v20 + 32) + 8];
      sub_23DCF59A8((uint64_t)v23, type metadata accessor for IndividualOvernightMetricChartPoint);
      if ((v29 & 1) == 0)
        break;
      v27 += v28;
      if (!--v26)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    v31 = v60;
    v32 = v63;
    sub_23DD2CCE4(v59, v60);
    sub_23DCF58EC(v32, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for GradientOverlaidPills);
    sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for GradientOverlaidPills);
    sub_23DD2E17C(255);
    v34 = v33;
    sub_23DD2E254(255);
    v36 = v35;
    sub_23DD2E300(255);
    v38 = v37;
    v67 = sub_23DDC59CC();
    v68 = MEMORY[0x24BDB8168];
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v67 = v38;
    v68 = MEMORY[0x24BDEBF80];
    v69 = OpaqueTypeConformance2;
    v70 = MEMORY[0x24BDEBF68];
    v40 = swift_getOpaqueTypeConformance2();
    v67 = v36;
    v68 = v40;
    v41 = swift_getOpaqueTypeConformance2();
    v67 = v34;
    v68 = v41;
    v42 = swift_getOpaqueTypeConformance2();
    v43 = v62;
    v44 = v64;
    sub_23DDC587C();
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v31, v44);
    v46 = v53;
    v45 = v54;
    v47 = v52;
    v48 = v58;
    sub_23DCF58EC(v32, v58, (uint64_t (*)(_QWORD))type metadata accessor for GradientOverlaidPills);
    v50 = v56;
    v49 = v57;
    sub_23DCF59A8(v48, (uint64_t (*)(_QWORD))type metadata accessor for GradientOverlaidPills);
    v67 = v44;
    v68 = v42;
    swift_getOpaqueTypeConformance2();
    v51 = v66;
    sub_23DDC5858();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v43, v51);
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v47, v50, v45);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 16))(v55, v47, v45);
    sub_23DD1E37C(0, &qword_256CFD748, (uint64_t (*)(uint64_t))sub_23DD2DE0C, MEMORY[0x24BDB7B58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7F78]);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v47, v45);
  }
  else
  {
LABEL_6:
    sub_23DD1E37C(0, &qword_256CFD748, (uint64_t (*)(uint64_t))sub_23DD2DE0C, MEMORY[0x24BDB7B58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7F78]);
    return swift_storeEnumTagMultiPayload();
  }
}

unint64_t sub_23DD2CCE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  unint64_t result;
  double v34;
  double v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  double v45;
  char *v46;
  uint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char *v55;
  double v56;
  double v57;
  double *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  double v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v3 = v2;
  v78 = a2;
  v5 = sub_23DDC5DE0();
  v80 = *(_QWORD *)(v5 - 8);
  v81 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v79 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD25D8C();
  MEMORY[0x24BDAC7A8](v7);
  v74 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v72 = (char *)&v65 - v10;
  sub_23DD1E37C(0, (unint64_t *)&qword_256CFCF10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDB7A98], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7E88]);
  MEMORY[0x24BDAC7A8](v11);
  v71 = (char *)&v65 - v12;
  *(double *)&v75 = COERCE_DOUBLE(sub_23DDC59CC());
  v73 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD2E300(0);
  v82 = v15;
  v77 = *(_QWORD *)(*(_QWORD *)&v15 - 8);
  MEMORY[0x24BDAC7A8](*(_QWORD *)&v15);
  v76 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD2E254(0);
  v18 = v17;
  v84 = *(_QWORD *)(*(_QWORD *)&v17 - 8);
  MEMORY[0x24BDAC7A8](*(_QWORD *)&v17);
  v83 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD2E17C(0);
  v21 = v20;
  v22 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v2 + *(int *)(type metadata accessor for GradientOverlaidPills() + 28);
  v26 = type metadata accessor for OvernightMetricsChartPoint();
  v27 = a1 + *(int *)(v26 + 24);
  v28 = 0.0;
  v29 = 0.0;
  if ((*(_BYTE *)(v27 + 16) & 1) == 0)
  {
    v29 = *(double *)v27;
    v28 = *(double *)(v27 + 8);
  }
  v30 = *(double *)(v25 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20) + 8) * 0.5;
  sub_23DD75560(v29);
  v32 = v31 - v30;
  result = sub_23DD75560(v28);
  v35 = v30 + v34;
  if (v32 > v30 + v34)
  {
    __break(1u);
  }
  else
  {
    sub_23DDC5DC8();
    v68 = v18;
    v65 = v3;
    v67 = v24;
    v66 = v26;
    v85 = a1;
    v69 = v21;
    sub_23DDC512C();
    v70 = v22;
    sub_23DCF535C((unint64_t *)&qword_254326A30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    sub_23DDC58DC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DDC5DC8();
    v86 = v32;
    sub_23DDC58E8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DDC5DC8();
    v86 = v35;
    sub_23DDC58E8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    sub_23DDC59C0();
    v37 = v79;
    v36 = v80;
    v38 = v81;
    (*(void (**)(char *, _QWORD, unint64_t))(v80 + 104))(v79, *MEMORY[0x24BDEEB68], v81);
    v39 = MEMORY[0x24BDB8168];
    v40 = v76;
    v41 = v75;
    sub_23DDC581C();
    (*(void (**)(char *, unint64_t))(v36 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v14, v41);
    v42 = v85;
    sub_23DD2D408(v85, &v91);
    v90 = v91;
    v86 = *(double *)&v41;
    v87 = v39;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v44 = MEMORY[0x24BDEBF80];
    v45 = v82;
    v46 = v83;
    sub_23DDC5828();
    swift_release();
    (*(void (**)(char *, double))(v77 + 8))(v40, COERCE_DOUBLE(*(_QWORD *)&v45));
    v47 = v66;
    v48 = (double *)(v42 + *(int *)(v66 + 40));
    v49 = *((_QWORD *)v48 + 1);
    v86 = *v48;
    v87 = v49;
    v81 = sub_23DD0B190();
    swift_bridgeObjectRetain();
    v50 = sub_23DDC6098();
    v52 = v51;
    v86 = v45;
    v87 = v44;
    LOBYTE(v44) = v53 & 1;
    v88 = OpaqueTypeConformance2;
    v89 = MEMORY[0x24BDEBF68];
    v54 = swift_getOpaqueTypeConformance2();
    v55 = v67;
    v56 = v68;
    sub_23DDC5840();
    sub_23DD0B1D4(v50, v52, v44);
    swift_bridgeObjectRelease();
    v57 = v56;
    (*(void (**)(char *, double))(v84 + 8))(v46, COERCE_DOUBLE(*(_QWORD *)&v56));
    v58 = (double *)(v85 + *(int *)(v47 + 44));
    v59 = *((_QWORD *)v58 + 1);
    v86 = *v58;
    v87 = v59;
    swift_bridgeObjectRetain();
    v60 = sub_23DDC6098();
    v62 = v61;
    LOBYTE(v44) = v63 & 1;
    v86 = v57;
    v87 = v54;
    swift_getOpaqueTypeConformance2();
    v64 = v69;
    sub_23DDC584C();
    sub_23DD0B1D4(v60, v62, v44);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v55, v64);
  }
  return result;
}

uint64_t sub_23DD2D408@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;

  v42 = a1;
  v44 = a2;
  v3 = type metadata accessor for OvernightMetricsChartPoint();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v41 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD2E550();
  v7 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v40 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v40 - v17;
  v19 = type metadata accessor for GradientOverlaidPills();
  v20 = *(int *)(v19 + 32);
  v43 = v2;
  v21 = v2 + v20;
  v22 = *(_QWORD *)(v21 + 184);
  if (v22)
  {
    v40 = v21;
    sub_23DCF58EC(v42, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v18, 0, 1, v3);
    sub_23DD08000(v43 + *(int *)(v19 + 20), (uint64_t)v15);
    v23 = (uint64_t)&v9[*(int *)(v7 + 48)];
    sub_23DD08000((uint64_t)v18, (uint64_t)v9);
    sub_23DD08000((uint64_t)v15, v23);
    v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    if (v24((uint64_t)v9, 1, v3) == 1)
    {
      swift_retain();
      sub_23DD2E5C0((uint64_t)v15);
      sub_23DD2E5C0((uint64_t)v18);
      if (v24(v23, 1, v3) == 1)
      {
        result = sub_23DD2E5C0((uint64_t)v9);
LABEL_23:
        *v44 = v22;
        return result;
      }
    }
    else
    {
      sub_23DD08000((uint64_t)v9, (uint64_t)v12);
      if (v24(v23, 1, v3) != 1)
      {
        v38 = v41;
        sub_23DCFBB58(v23, v41, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
        swift_retain();
        v39 = _s15HealthBalanceUI26OvernightMetricsChartPointV2eeoiySbAC_ACtFZ_0((uint64_t)v12, v38);
        sub_23DCF59A8(v38, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
        sub_23DD2E5C0((uint64_t)v15);
        sub_23DD2E5C0((uint64_t)v18);
        sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
        result = sub_23DD2E5C0((uint64_t)v9);
        if ((v39 & 1) != 0)
          goto LABEL_23;
        goto LABEL_8;
      }
      swift_retain();
      sub_23DD2E5C0((uint64_t)v15);
      sub_23DD2E5C0((uint64_t)v18);
      sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    }
    sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DD2E550);
LABEL_8:
    swift_release();
    v21 = v40;
  }
  v26 = *(_QWORD *)(v21 + 176);
  if (v26)
  {
    *v44 = v26;
    return swift_retain();
  }
  else
  {
    v27 = sub_23DD75728(v42);
    v28 = *(_QWORD *)(v27 + 16);
    if (v28)
    {
      v45 = MEMORY[0x24BEE4AF8];
      sub_23DD92C0C(0, v28, 0);
      v43 = v27;
      v29 = (_BYTE *)(v27 + 40);
      v30 = v45;
      do
      {
        if (*v29 == 1)
        {
          v31 = &qword_256CFE668;
          if (qword_256CFC0A8 != -1)
          {
            swift_once();
            v31 = &qword_256CFE668;
          }
        }
        else
        {
          v31 = &qword_256CFE658;
          if (qword_256CFC098 != -1)
          {
            swift_once();
            v31 = &qword_256CFE658;
          }
        }
        MEMORY[0x242642C18]((id)*v31);
        v32 = sub_23DDC63A4();
        v34 = v33;
        v45 = v30;
        v36 = *(_QWORD *)(v30 + 16);
        v35 = *(_QWORD *)(v30 + 24);
        if (v36 >= v35 >> 1)
        {
          sub_23DD92C0C(v35 > 1, v36 + 1, 1);
          v30 = v45;
        }
        *(_QWORD *)(v30 + 16) = v36 + 1;
        v37 = v30 + 16 * v36;
        *(_QWORD *)(v37 + 32) = v32;
        *(_QWORD *)(v37 + 40) = v34;
        v29 += 16;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v30 = MEMORY[0x24BEE4AF8];
    }
    sub_23DDC6470();
    sub_23DDC6464();
    MEMORY[0x242642DEC](v30);
    sub_23DDC5BC4();
    result = sub_23DDC5B40();
    *v44 = result;
  }
  return result;
}

uint64_t sub_23DD2D8E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v8[1] = *v1;
  sub_23DCF58EC(v4, (uint64_t)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for GradientOverlaidPills);
  v5 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v6 = swift_allocObject();
  sub_23DCFBB58((uint64_t)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, (uint64_t (*)(_QWORD))type metadata accessor for GradientOverlaidPills);
  sub_23DD2DDB4(0, &qword_256CFD6F0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DDC512C();
  sub_23DD1E37C(0, &qword_256CFD6F8, (uint64_t (*)(uint64_t))sub_23DD2DE0C, MEMORY[0x24BDB7B58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7F90]);
  sub_23DD2E374();
  sub_23DD2E3CC();
  sub_23DCF535C(&qword_256CFD740, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t)&protocol conformance descriptor for OvernightMetricsChartPoint);
  swift_bridgeObjectRetain();
  return sub_23DDC635C();
}

uint64_t sub_23DD2DA6C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v1 = (int *)type metadata accessor for GradientOverlaidPills();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  v3 = v2 + v1[5];
  v4 = type metadata accessor for OvernightMetricsChartPoint();
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48);
  if (!v5(v3, 1, v4))
  {
    v6 = sub_23DDC512C();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v7(v3, v6);
    v8 = v3 + *(int *)(v4 + 20);
    v7(v8, v6);
    sub_23DCF9010();
    v7(v8 + *(int *)(v9 + 36), v6);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v10 = v2 + v1[7];
  swift_bridgeObjectRelease();
  v11 = v10 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  if (!v5(v11, 1, v4))
  {
    v12 = sub_23DDC512C();
    v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
    v13(v11, v12);
    v14 = v11 + *(int *)(v4 + 20);
    v13(v14, v12);
    sub_23DCF9010();
    v13(v14 + *(int *)(v15 + 36), v12);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + v1[8]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DD2DD68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GradientOverlaidPills() - 8) + 80);
  return sub_23DD2C7D4(a1, v2 + ((v5 + 16) & ~v5), a2);
}

void sub_23DD2DDB4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for OvernightMetricsChartPoint();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_23DD2DE0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_256CFD700)
  {
    sub_23DD2DF58(255);
    v3 = v2;
    sub_23DD2E080(255);
    sub_23DD2E17C(255);
    sub_23DD2E254(255);
    sub_23DD2E300(255);
    sub_23DDC59CC();
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[3] = MEMORY[0x24BDEBF68];
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x242643B9C](a1, v6, MEMORY[0x24BDB7C88], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_256CFD700);
  }
}

void sub_23DD2DF58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_256CFD708)
  {
    sub_23DD2E080(255);
    v3 = v2;
    sub_23DD2E17C(255);
    sub_23DD2E254(255);
    sub_23DD2E300(255);
    sub_23DDC59CC();
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[3] = MEMORY[0x24BDEBF68];
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x242643B9C](a1, v6, MEMORY[0x24BDB7D58], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_256CFD708);
  }
}

void sub_23DD2E080(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_256CFD710)
  {
    sub_23DD2E17C(255);
    v3 = v2;
    sub_23DD2E254(255);
    sub_23DD2E300(255);
    sub_23DDC59CC();
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[3] = MEMORY[0x24BDEBF68];
    swift_getOpaqueTypeConformance2();
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x242643B9C](a1, v6, MEMORY[0x24BDB7C68], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_256CFD710);
  }
}

void sub_23DD2E17C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_256CFD718)
  {
    sub_23DD2E254(255);
    v3 = v2;
    sub_23DD2E300(255);
    sub_23DDC59CC();
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[3] = MEMORY[0x24BDEBF68];
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x242643B9C](a1, v6, MEMORY[0x24BDB7C48], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_256CFD718);
  }
}

void sub_23DD2E254(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_256CFD720)
  {
    sub_23DD2E300(255);
    v3 = v2;
    sub_23DDC59CC();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = MEMORY[0x24BDEBF80];
    v7[2] = OpaqueTypeConformance2;
    v7[3] = MEMORY[0x24BDEBF68];
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDB7C28], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256CFD720);
  }
}

void sub_23DD2E300(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_256CFD728)
  {
    v4[0] = sub_23DDC59CC();
    v4[1] = MEMORY[0x24BDB8168];
    v2 = MEMORY[0x242643B9C](a1, v4, MEMORY[0x24BDB7C08], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_256CFD728);
  }
}

unint64_t sub_23DD2E374()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFD730;
  if (!qword_256CFD730)
  {
    sub_23DD2DDB4(255, &qword_256CFD6F0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE12D8], v1);
    atomic_store(result, (unint64_t *)&qword_256CFD730);
  }
  return result;
}

unint64_t sub_23DD2E3CC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];

  result = qword_256CFD738;
  if (!qword_256CFD738)
  {
    sub_23DD1E37C(255, &qword_256CFD6F8, (uint64_t (*)(uint64_t))sub_23DD2DE0C, MEMORY[0x24BDB7B58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7F90]);
    v2 = v1;
    sub_23DD2DF58(255);
    v4 = v3;
    sub_23DD2E080(255);
    sub_23DD2E17C(255);
    sub_23DD2E254(255);
    sub_23DD2E300(255);
    sub_23DDC59CC();
    v5[4] = swift_getOpaqueTypeConformance2();
    v5[5] = MEMORY[0x24BDEBF68];
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v5[2] = v4;
    v5[3] = swift_getOpaqueTypeConformance2();
    v5[0] = swift_getOpaqueTypeConformance2();
    v5[1] = MEMORY[0x24BDB7B48];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB7FA8], v2, v5);
    atomic_store(result, (unint64_t *)&qword_256CFD738);
  }
  return result;
}

void sub_23DD2E550()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFD750)
  {
    sub_23DD2DDB4(255, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFD750);
  }
}

uint64_t sub_23DD2E5C0(uint64_t a1)
{
  uint64_t v2;

  sub_23DD2DDB4(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23DD2E610()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_256CFD758;
  if (!qword_256CFD758)
  {
    sub_23DD2E670();
    v2 = v1;
    v3 = sub_23DD2E3CC();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDB8490], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CFD758);
  }
  return result;
}

void sub_23DD2E670()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_256CFD760)
  {
    sub_23DD2DDB4(255, &qword_256CFD6F0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DDC512C();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
    sub_23DD1E37C(255, &qword_256CFD6F8, (uint64_t (*)(uint64_t))sub_23DD2DE0C, MEMORY[0x24BDB7B58], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB7F90]);
    sub_23DD2E374();
    sub_23DCF535C((unint64_t *)&qword_256CFC1E8, v0, MEMORY[0x24BDCE930]);
    v1 = sub_23DDC6380();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_256CFD760);
  }
}

_QWORD *sub_23DD2E75C(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int *v59;
  unsigned int (*v60)(char *, uint64_t, int *);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  int *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t);
  void (*v109)(char *, _QWORD, uint64_t, int *);
  int *v110;
  _QWORD *v111;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v47 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v48 = (_QWORD *)(v47 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_23DDC53A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = sub_23DDC512C();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = v8[6];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v13(&a1[v14], &a2[v14], v12);
    sub_23DCF9010();
    v18 = v17;
    v13(&v15[*(int *)(v17 + 36)], &v16[*(int *)(v17 + 36)], v12);
    v19 = v8[7];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v13(&a1[v19], &a2[v19], v12);
    v107 = v18;
    v108 = v13;
    v13(&v20[*(int *)(v18 + 36)], &v21[*(int *)(v18 + 36)], v12);
    v22 = v8[8];
    v23 = &a1[v22];
    v24 = &a2[v22];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    v25 = v8[9];
    v26 = &a1[v25];
    v27 = &a2[v25];
    v28 = sub_23DDC54C8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    v29 = v8[10];
    v30 = &a1[v29];
    v31 = &a2[v29];
    v32 = *((_QWORD *)v31 + 1);
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = v8[11];
    v34 = &a1[v33];
    v35 = &a2[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = v8[12];
    v38 = &a1[v37];
    v39 = &a2[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v41 = a3[5];
    v42 = &a1[v41];
    v43 = &a2[v41];
    v44 = *(_QWORD *)&a2[v41];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v44)
    {
      v45 = *((_QWORD *)v43 + 1);
      *(_QWORD *)v42 = v44;
      *((_QWORD *)v42 + 1) = v45;
      v46 = *((_OWORD *)v43 + 2);
      *((_OWORD *)v42 + 1) = *((_OWORD *)v43 + 1);
      *((_OWORD *)v42 + 2) = v46;
      *((_OWORD *)v42 + 3) = *((_OWORD *)v43 + 3);
      *((_QWORD *)v42 + 8) = *((_QWORD *)v43 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v49 = *((_OWORD *)v43 + 3);
      *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
      *((_OWORD *)v42 + 3) = v49;
      *((_QWORD *)v42 + 8) = *((_QWORD *)v43 + 8);
      v50 = *((_OWORD *)v43 + 1);
      *(_OWORD *)v42 = *(_OWORD *)v43;
      *((_OWORD *)v42 + 1) = v50;
    }
    v51 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v51] = a2[v51];
    v110 = a3;
    v111 = a1;
    v52 = a3[8];
    v53 = &a1[v52];
    v54 = &a2[v52];
    *(_QWORD *)&a1[v52] = *(_QWORD *)&a2[v52];
    v55 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    v56 = v55[5];
    v57 = &v53[v56];
    v58 = &v54[v56];
    v59 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v106 = *((_QWORD *)v59 - 1);
    v60 = *(unsigned int (**)(char *, uint64_t, int *))(v106 + 48);
    swift_bridgeObjectRetain();
    if (v60(v58, 1, v59))
    {
      sub_23DD2ED80();
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      v108(v57, v58, v12);
      v62 = v59[5];
      v63 = &v57[v62];
      v64 = &v58[v62];
      v108(&v57[v62], &v58[v62], v12);
      v108(&v63[*(int *)(v107 + 36)], &v64[*(int *)(v107 + 36)], v12);
      v65 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v63[v65[5]] = *(_QWORD *)&v64[v65[5]];
      *(_QWORD *)&v63[v65[6]] = *(_QWORD *)&v64[v65[6]];
      *(_QWORD *)&v63[v65[7]] = *(_QWORD *)&v64[v65[7]];
      v66 = v59[6];
      v67 = &v57[v66];
      v68 = &v58[v66];
      *(_OWORD *)v67 = *(_OWORD *)v68;
      v67[16] = v68[16];
      v57[v59[7]] = v58[v59[7]];
      v57[v59[8]] = v58[v59[8]];
      v57[v59[9]] = v58[v59[9]];
      v69 = v59[10];
      v70 = &v57[v69];
      v71 = &v58[v69];
      v72 = *((_QWORD *)v71 + 1);
      *(_QWORD *)v70 = *(_QWORD *)v71;
      *((_QWORD *)v70 + 1) = v72;
      v73 = v59[11];
      v74 = &v57[v73];
      v75 = &v58[v73];
      v76 = *((_QWORD *)v75 + 1);
      *(_QWORD *)v74 = *(_QWORD *)v75;
      *((_QWORD *)v74 + 1) = v76;
      v109 = *(void (**)(char *, _QWORD, uint64_t, int *))(v106 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v109(v57, 0, 1, v59);
    }
    *(_OWORD *)&v53[v55[6]] = *(_OWORD *)&v54[v55[6]];
    v77 = v55[7];
    v78 = &v53[v77];
    v79 = &v54[v77];
    v80 = *((_OWORD *)v79 + 1);
    *(_OWORD *)v78 = *(_OWORD *)v79;
    *((_OWORD *)v78 + 1) = v80;
    *((_QWORD *)v78 + 10) = *((_QWORD *)v79 + 10);
    v81 = *((_OWORD *)v79 + 4);
    v82 = *((_OWORD *)v79 + 2);
    *((_OWORD *)v78 + 3) = *((_OWORD *)v79 + 3);
    *((_OWORD *)v78 + 4) = v81;
    *((_OWORD *)v78 + 2) = v82;
    *(_QWORD *)&v53[v55[8]] = *(_QWORD *)&v54[v55[8]];
    *(_QWORD *)&v53[v55[9]] = *(_QWORD *)&v54[v55[9]];
    v83 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    v84 = &v53[v83];
    v85 = &v54[v83];
    v86 = *((_QWORD *)v85 + 1);
    *(_QWORD *)v84 = *(_QWORD *)v85;
    *((_QWORD *)v84 + 1) = v86;
    v87 = *((_QWORD *)v85 + 3);
    *((_QWORD *)v84 + 2) = *((_QWORD *)v85 + 2);
    *((_QWORD *)v84 + 3) = v87;
    *((_QWORD *)v84 + 4) = *((_QWORD *)v85 + 4);
    *(_OWORD *)(v84 + 40) = *(_OWORD *)(v85 + 40);
    *(_OWORD *)(v84 + 56) = *(_OWORD *)(v85 + 56);
    *(_OWORD *)(v84 + 72) = *(_OWORD *)(v85 + 72);
    *(_OWORD *)(v84 + 88) = *(_OWORD *)(v85 + 88);
    *(_OWORD *)(v84 + 104) = *(_OWORD *)(v85 + 104);
    v88 = v110[9];
    v89 = (char *)v111 + v88;
    v90 = &a2[v88];
    v91 = *(_QWORD *)&a2[v88];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v91)
    {
      v92 = *((_QWORD *)v90 + 1);
      v93 = *((_QWORD *)v90 + 2);
      *(_QWORD *)v89 = v91;
      *((_QWORD *)v89 + 1) = v92;
      *((_QWORD *)v89 + 2) = v93;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v89 = *(_OWORD *)v90;
      *((_QWORD *)v89 + 2) = *((_QWORD *)v90 + 2);
    }
    v89[24] = v90[24];
    v89[32] = v90[32];
    v94 = *((_QWORD *)v90 + 6);
    *((_QWORD *)v89 + 5) = *((_QWORD *)v90 + 5);
    *((_QWORD *)v89 + 6) = v94;
    v89[56] = v90[56];
    v95 = *((_QWORD *)v90 + 9);
    *((_QWORD *)v89 + 8) = *((_QWORD *)v90 + 8);
    *((_QWORD *)v89 + 9) = v95;
    *((_QWORD *)v89 + 10) = *((_QWORD *)v90 + 10);
    v96 = *(_OWORD *)(v90 + 88);
    *(_OWORD *)(v89 + 104) = *(_OWORD *)(v90 + 104);
    *(_OWORD *)(v89 + 88) = v96;
    v97 = *(_OWORD *)(v90 + 120);
    v98 = *(_OWORD *)(v90 + 136);
    *(_OWORD *)(v89 + 152) = *(_OWORD *)(v90 + 152);
    *(_OWORD *)(v89 + 136) = v98;
    *(_OWORD *)(v89 + 120) = v97;
    v99 = *((_QWORD *)v90 + 22);
    *((_QWORD *)v89 + 21) = *((_QWORD *)v90 + 21);
    *((_QWORD *)v89 + 22) = v99;
    v101 = *((_QWORD *)v90 + 23);
    v100 = *((_QWORD *)v90 + 24);
    v89[200] = v90[200];
    *((_QWORD *)v89 + 23) = v101;
    *((_QWORD *)v89 + 24) = v100;
    v89[201] = v90[201];
    v102 = *((_QWORD *)v90 + 27);
    *((_QWORD *)v89 + 26) = *((_QWORD *)v90 + 26);
    *((_QWORD *)v89 + 27) = v102;
    v103 = *((_QWORD *)v90 + 29);
    *((_QWORD *)v89 + 28) = *((_QWORD *)v90 + 28);
    *((_QWORD *)v89 + 29) = v103;
    *((_QWORD *)v89 + 30) = *((_QWORD *)v90 + 30);
    v89[248] = v90[248];
    v104 = *((_QWORD *)v90 + 33);
    *((_QWORD *)v89 + 32) = *((_QWORD *)v90 + 32);
    *((_QWORD *)v89 + 33) = v104;
    *((_QWORD *)v89 + 34) = *((_QWORD *)v90 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v48 = v111;
  }
  swift_retain();
  return v48;
}

void sub_23DD2ED80()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254326A48)
  {
    type metadata accessor for OvernightMetricsChartPoint();
    v0 = sub_23DDC6980();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254326A48);
  }
}

uint64_t sub_23DD2EDD4(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v6 = a1 + v5[5];
  v7 = sub_23DDC512C();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = a1 + v5[6];
  v8(v9, v7);
  sub_23DCF9010();
  v11 = v10;
  v8(v9 + *(int *)(v10 + 36), v7);
  v12 = a1 + v5[7];
  v8(v12, v7);
  v8(v12 + *(int *)(v11 + 36), v7);
  v13 = a1 + v5[9];
  v14 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[5]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = a1 + a2[8];
  swift_bridgeObjectRelease();
  v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v17 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v8(v16, v7);
    v18 = v16 + *(int *)(v17 + 20);
    v8(v18, v7);
    v8(v18 + *(int *)(v11 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[9]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_23DD2F0A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int *v56;
  unsigned int (*v57)(char *, uint64_t, int *);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t);
  void (*v106)(char *, _QWORD, uint64_t, int *);
  int *v107;
  uint64_t v108;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC512C();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = v7[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_23DCF9010();
  v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  v18 = v7[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  v104 = v17;
  v105 = (void (*)(char *, char *, uint64_t))v12;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  v21 = v7[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = v7[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  v28 = v7[10];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = v7[11];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = v7[12];
  v37 = (_QWORD *)(a1 + v36);
  v38 = (_QWORD *)(a2 + v36);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = a3[5];
  v108 = a1;
  v41 = a1 + v40;
  v42 = a2 + v40;
  v43 = *(_QWORD *)(a2 + v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v43)
  {
    v44 = *(_QWORD *)(v42 + 8);
    *(_QWORD *)v41 = v43;
    *(_QWORD *)(v41 + 8) = v44;
    v45 = *(_OWORD *)(v42 + 32);
    *(_OWORD *)(v41 + 16) = *(_OWORD *)(v42 + 16);
    *(_OWORD *)(v41 + 32) = v45;
    *(_OWORD *)(v41 + 48) = *(_OWORD *)(v42 + 48);
    *(_QWORD *)(v41 + 64) = *(_QWORD *)(v42 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v46 = *(_OWORD *)(v42 + 48);
    *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
    *(_OWORD *)(v41 + 48) = v46;
    *(_QWORD *)(v41 + 64) = *(_QWORD *)(v42 + 64);
    v47 = *(_OWORD *)(v42 + 16);
    *(_OWORD *)v41 = *(_OWORD *)v42;
    *(_OWORD *)(v41 + 16) = v47;
  }
  v48 = a3[7];
  *(_BYTE *)(v108 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(v108 + v48) = *(_BYTE *)(a2 + v48);
  v107 = a3;
  v49 = a3[8];
  v50 = v108 + v49;
  v51 = a2 + v49;
  *(_QWORD *)(v108 + v49) = *(_QWORD *)(a2 + v49);
  v52 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v53 = v52[5];
  v54 = (char *)(v50 + v53);
  v55 = (char *)(v51 + v53);
  v56 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v103 = *((_QWORD *)v56 - 1);
  v57 = *(unsigned int (**)(char *, uint64_t, int *))(v103 + 48);
  swift_bridgeObjectRetain();
  if (v57(v55, 1, v56))
  {
    sub_23DD2ED80();
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v105(v54, v55, v11);
    v59 = v56[5];
    v60 = &v54[v59];
    v61 = &v55[v59];
    v105(&v54[v59], &v55[v59], v11);
    v105(&v60[*(int *)(v104 + 36)], &v61[*(int *)(v104 + 36)], v11);
    v62 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v60[v62[5]] = *(_QWORD *)&v61[v62[5]];
    *(_QWORD *)&v60[v62[6]] = *(_QWORD *)&v61[v62[6]];
    *(_QWORD *)&v60[v62[7]] = *(_QWORD *)&v61[v62[7]];
    v63 = v56[6];
    v64 = &v54[v63];
    v65 = &v55[v63];
    *(_OWORD *)v64 = *(_OWORD *)v65;
    v64[16] = v65[16];
    v54[v56[7]] = v55[v56[7]];
    v54[v56[8]] = v55[v56[8]];
    v54[v56[9]] = v55[v56[9]];
    v66 = v56[10];
    v67 = &v54[v66];
    v68 = &v55[v66];
    v69 = *((_QWORD *)v68 + 1);
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *((_QWORD *)v67 + 1) = v69;
    v70 = v56[11];
    v71 = &v54[v70];
    v72 = &v55[v70];
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v106 = *(void (**)(char *, _QWORD, uint64_t, int *))(v103 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v106(v54, 0, 1, v56);
  }
  *(_OWORD *)(v50 + v52[6]) = *(_OWORD *)(v51 + v52[6]);
  v74 = v52[7];
  v75 = v50 + v74;
  v76 = v51 + v74;
  v77 = *(_OWORD *)(v76 + 16);
  *(_OWORD *)v75 = *(_OWORD *)v76;
  *(_OWORD *)(v75 + 16) = v77;
  *(_QWORD *)(v75 + 80) = *(_QWORD *)(v76 + 80);
  v78 = *(_OWORD *)(v76 + 64);
  v79 = *(_OWORD *)(v76 + 32);
  *(_OWORD *)(v75 + 48) = *(_OWORD *)(v76 + 48);
  *(_OWORD *)(v75 + 64) = v78;
  *(_OWORD *)(v75 + 32) = v79;
  *(_QWORD *)(v50 + v52[8]) = *(_QWORD *)(v51 + v52[8]);
  *(_QWORD *)(v50 + v52[9]) = *(_QWORD *)(v51 + v52[9]);
  v80 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v81 = v50 + v80;
  v82 = v51 + v80;
  v83 = *(_QWORD *)(v82 + 8);
  *(_QWORD *)v81 = *(_QWORD *)v82;
  *(_QWORD *)(v81 + 8) = v83;
  v84 = *(_QWORD *)(v82 + 24);
  *(_QWORD *)(v81 + 16) = *(_QWORD *)(v82 + 16);
  *(_QWORD *)(v81 + 24) = v84;
  *(_QWORD *)(v81 + 32) = *(_QWORD *)(v82 + 32);
  *(_OWORD *)(v81 + 40) = *(_OWORD *)(v82 + 40);
  *(_OWORD *)(v81 + 56) = *(_OWORD *)(v82 + 56);
  *(_OWORD *)(v81 + 72) = *(_OWORD *)(v82 + 72);
  *(_OWORD *)(v81 + 88) = *(_OWORD *)(v82 + 88);
  *(_OWORD *)(v81 + 104) = *(_OWORD *)(v82 + 104);
  v85 = v107[9];
  v86 = v108 + v85;
  v87 = a2 + v85;
  v88 = *(_QWORD *)(a2 + v85);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v88)
  {
    v89 = *(_QWORD *)(v87 + 8);
    v90 = *(_QWORD *)(v87 + 16);
    *(_QWORD *)v86 = v88;
    *(_QWORD *)(v86 + 8) = v89;
    *(_QWORD *)(v86 + 16) = v90;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v86 = *(_OWORD *)v87;
    *(_QWORD *)(v86 + 16) = *(_QWORD *)(v87 + 16);
  }
  *(_BYTE *)(v86 + 24) = *(_BYTE *)(v87 + 24);
  *(_BYTE *)(v86 + 32) = *(_BYTE *)(v87 + 32);
  v91 = *(_QWORD *)(v87 + 48);
  *(_QWORD *)(v86 + 40) = *(_QWORD *)(v87 + 40);
  *(_QWORD *)(v86 + 48) = v91;
  *(_BYTE *)(v86 + 56) = *(_BYTE *)(v87 + 56);
  v92 = *(_QWORD *)(v87 + 72);
  *(_QWORD *)(v86 + 64) = *(_QWORD *)(v87 + 64);
  *(_QWORD *)(v86 + 72) = v92;
  *(_QWORD *)(v86 + 80) = *(_QWORD *)(v87 + 80);
  v93 = *(_OWORD *)(v87 + 88);
  *(_OWORD *)(v86 + 104) = *(_OWORD *)(v87 + 104);
  *(_OWORD *)(v86 + 88) = v93;
  v94 = *(_OWORD *)(v87 + 120);
  v95 = *(_OWORD *)(v87 + 136);
  *(_OWORD *)(v86 + 152) = *(_OWORD *)(v87 + 152);
  *(_OWORD *)(v86 + 136) = v95;
  *(_OWORD *)(v86 + 120) = v94;
  v96 = *(_QWORD *)(v87 + 176);
  *(_QWORD *)(v86 + 168) = *(_QWORD *)(v87 + 168);
  *(_QWORD *)(v86 + 176) = v96;
  v98 = *(_QWORD *)(v87 + 184);
  v97 = *(_QWORD *)(v87 + 192);
  *(_BYTE *)(v86 + 200) = *(_BYTE *)(v87 + 200);
  *(_QWORD *)(v86 + 184) = v98;
  *(_QWORD *)(v86 + 192) = v97;
  *(_BYTE *)(v86 + 201) = *(_BYTE *)(v87 + 201);
  v99 = *(_QWORD *)(v87 + 216);
  *(_QWORD *)(v86 + 208) = *(_QWORD *)(v87 + 208);
  *(_QWORD *)(v86 + 216) = v99;
  v100 = *(_QWORD *)(v87 + 232);
  *(_QWORD *)(v86 + 224) = *(_QWORD *)(v87 + 224);
  *(_QWORD *)(v86 + 232) = v100;
  *(_QWORD *)(v86 + 240) = *(_QWORD *)(v87 + 240);
  *(_BYTE *)(v86 + 248) = *(_BYTE *)(v87 + 248);
  v101 = *(_QWORD *)(v87 + 264);
  *(_QWORD *)(v86 + 256) = *(_QWORD *)(v87 + 256);
  *(_QWORD *)(v86 + 264) = v101;
  *(_QWORD *)(v86 + 272) = *(_QWORD *)(v87 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v108;
}

uint64_t sub_23DD2F6A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int *v54;
  uint64_t (*v55)(char *, uint64_t, int *);
  int v56;
  int v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v73)(char *, _QWORD, uint64_t, int *);
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  int *v113;
  uint64_t v114;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC512C();
  v110 = *(_QWORD *)(v11 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 24);
  v12(v9, v10, v11);
  v13 = v7[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_23DCF9010();
  v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  v18 = v7[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  v111 = v17;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  v21 = v7[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = v24;
  v25 = v7[9];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 24))(v26, v27, v28);
  v29 = v7[10];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = v7[11];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = v7[12];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)(a2 + v35);
  *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = a3[5];
  v39 = (_QWORD *)(a1 + v38);
  v40 = a2 + v38;
  v41 = *(_QWORD *)(a2 + v38);
  if (*(_QWORD *)(a1 + v38))
  {
    if (v41)
    {
      *v39 = v41;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v39[1] = *(_QWORD *)(v40 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v39[2] = *(_QWORD *)(v40 + 16);
      v39[3] = *(_QWORD *)(v40 + 24);
      v39[4] = *(_QWORD *)(v40 + 32);
      v39[5] = *(_QWORD *)(v40 + 40);
      v39[6] = *(_QWORD *)(v40 + 48);
      v39[7] = *(_QWORD *)(v40 + 56);
      v39[8] = *(_QWORD *)(v40 + 64);
    }
    else
    {
      sub_23DCF5648(a1 + v38);
      *(_OWORD *)v39 = *(_OWORD *)v40;
      v43 = *(_OWORD *)(v40 + 32);
      v42 = *(_OWORD *)(v40 + 48);
      v44 = *(_OWORD *)(v40 + 16);
      v39[8] = *(_QWORD *)(v40 + 64);
      *((_OWORD *)v39 + 2) = v43;
      *((_OWORD *)v39 + 3) = v42;
      *((_OWORD *)v39 + 1) = v44;
    }
  }
  else if (v41)
  {
    *v39 = v41;
    v39[1] = *(_QWORD *)(v40 + 8);
    v39[2] = *(_QWORD *)(v40 + 16);
    v39[3] = *(_QWORD *)(v40 + 24);
    v39[4] = *(_QWORD *)(v40 + 32);
    v39[5] = *(_QWORD *)(v40 + 40);
    v39[6] = *(_QWORD *)(v40 + 48);
    v39[7] = *(_QWORD *)(v40 + 56);
    v39[8] = *(_QWORD *)(v40 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v39 = *(_OWORD *)v40;
    v45 = *(_OWORD *)(v40 + 16);
    v46 = *(_OWORD *)(v40 + 32);
    v47 = *(_OWORD *)(v40 + 48);
    v39[8] = *(_QWORD *)(v40 + 64);
    *((_OWORD *)v39 + 2) = v46;
    *((_OWORD *)v39 + 3) = v47;
    *((_OWORD *)v39 + 1) = v45;
  }
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v113 = a3;
  v114 = a1;
  v48 = a3[8];
  v49 = a1 + v48;
  v50 = a2 + v48;
  *(_QWORD *)(a1 + v48) = *(_QWORD *)(a2 + v48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v112 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v51 = v112[5];
  v52 = (char *)(v49 + v51);
  v53 = (char *)(v50 + v51);
  v54 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v109 = *((_QWORD *)v54 - 1);
  v55 = *(uint64_t (**)(char *, uint64_t, int *))(v109 + 48);
  v56 = v55(v52, 1, v54);
  v57 = v55(v53, 1, v54);
  if (v56)
  {
    if (!v57)
    {
      v58 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
      v58(v52, v53, v11);
      v59 = v54[5];
      v60 = &v52[v59];
      v61 = &v53[v59];
      v58(&v52[v59], &v53[v59], v11);
      v58(&v60[*(int *)(v111 + 36)], &v61[*(int *)(v111 + 36)], v11);
      v62 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v60[v62[5]] = *(_QWORD *)&v61[v62[5]];
      *(_QWORD *)&v60[v62[6]] = *(_QWORD *)&v61[v62[6]];
      *(_QWORD *)&v60[v62[7]] = *(_QWORD *)&v61[v62[7]];
      v63 = v54[6];
      v64 = &v52[v63];
      v65 = &v53[v63];
      v66 = v65[16];
      *(_OWORD *)v64 = *(_OWORD *)v65;
      v64[16] = v66;
      v52[v54[7]] = v53[v54[7]];
      v52[v54[8]] = v53[v54[8]];
      v52[v54[9]] = v53[v54[9]];
      v67 = v54[10];
      v68 = &v52[v67];
      v69 = &v53[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      *((_QWORD *)v68 + 1) = *((_QWORD *)v69 + 1);
      v70 = v54[11];
      v71 = &v52[v70];
      v72 = &v53[v70];
      *(_QWORD *)v71 = *(_QWORD *)v72;
      *((_QWORD *)v71 + 1) = *((_QWORD *)v72 + 1);
      v73 = *(void (**)(char *, _QWORD, uint64_t, int *))(v109 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v73(v52, 0, 1, v54);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v57)
  {
    sub_23DCF59A8((uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_23DD2ED80();
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    goto LABEL_14;
  }
  v12((uint64_t)v52, (uint64_t)v53, v11);
  v90 = v54[5];
  v91 = &v52[v90];
  v92 = &v53[v90];
  v12((uint64_t)&v52[v90], (uint64_t)&v53[v90], v11);
  v12((uint64_t)&v91[*(int *)(v111 + 36)], (uint64_t)&v92[*(int *)(v111 + 36)], v11);
  v93 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v91[v93[5]] = *(_QWORD *)&v92[v93[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v91[v93[6]] = *(_QWORD *)&v92[v93[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v91[v93[7]] = *(_QWORD *)&v92[v93[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v94 = v54[6];
  v95 = &v52[v94];
  v96 = &v53[v94];
  v97 = *(_OWORD *)v96;
  v95[16] = v96[16];
  *(_OWORD *)v95 = v97;
  v52[v54[7]] = v53[v54[7]];
  v52[v54[8]] = v53[v54[8]];
  v52[v54[9]] = v53[v54[9]];
  v98 = v54[10];
  v99 = &v52[v98];
  v100 = &v53[v98];
  *(_QWORD *)v99 = *(_QWORD *)v100;
  *((_QWORD *)v99 + 1) = *((_QWORD *)v100 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v101 = v54[11];
  v102 = &v52[v101];
  v103 = &v53[v101];
  *(_QWORD *)v102 = *(_QWORD *)v103;
  *((_QWORD *)v102 + 1) = *((_QWORD *)v103 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  v75 = v112[6];
  v76 = (_QWORD *)(v49 + v75);
  v77 = (_QWORD *)(v50 + v75);
  *v76 = *v77;
  v76[1] = v77[1];
  v78 = v112[7];
  v79 = v49 + v78;
  v80 = v50 + v78;
  *(_QWORD *)v79 = *(_QWORD *)v80;
  v81 = *(_QWORD *)(v80 + 8);
  *(_BYTE *)(v79 + 16) = *(_BYTE *)(v80 + 16);
  *(_QWORD *)(v79 + 8) = v81;
  *(_QWORD *)(v79 + 24) = *(_QWORD *)(v80 + 24);
  *(_QWORD *)(v79 + 32) = *(_QWORD *)(v80 + 32);
  *(_QWORD *)(v79 + 40) = *(_QWORD *)(v80 + 40);
  *(_QWORD *)(v79 + 48) = *(_QWORD *)(v80 + 48);
  *(_QWORD *)(v79 + 56) = *(_QWORD *)(v80 + 56);
  *(_QWORD *)(v79 + 64) = *(_QWORD *)(v80 + 64);
  *(_QWORD *)(v79 + 72) = *(_QWORD *)(v80 + 72);
  *(_QWORD *)(v79 + 80) = *(_QWORD *)(v80 + 80);
  *(_QWORD *)(v49 + v112[8]) = *(_QWORD *)(v50 + v112[8]);
  *(_QWORD *)(v49 + v112[9]) = *(_QWORD *)(v50 + v112[9]);
  v82 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v83 = (_QWORD *)(v49 + v82);
  v84 = (_QWORD *)(v50 + v82);
  *(_QWORD *)(v49 + v82) = *v84;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[1] = v84[1];
  v83[2] = v84[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[3] = v84[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[4] = v84[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[5] = v84[5];
  v83[6] = v84[6];
  v83[7] = v84[7];
  v83[8] = v84[8];
  v83[9] = v84[9];
  v83[10] = v84[10];
  v83[11] = v84[11];
  v83[12] = v84[12];
  v83[13] = v84[13];
  v83[14] = v84[14];
  v85 = v113[9];
  v86 = v114 + v85;
  v87 = (__int128 *)(a2 + v85);
  v88 = *(_QWORD *)(a2 + v85);
  if (*(_QWORD *)(v114 + v85))
  {
    if (v88)
    {
      *(_QWORD *)v86 = v88;
      swift_retain();
      swift_release();
      *(_QWORD *)(v86 + 8) = *((_QWORD *)v87 + 1);
      swift_retain();
      swift_release();
      *(_QWORD *)(v86 + 16) = *((_QWORD *)v87 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_23DCF9EB8(v114 + v85);
      v89 = *((_QWORD *)v87 + 2);
      *(_OWORD *)v86 = *v87;
      *(_QWORD *)(v86 + 16) = v89;
    }
  }
  else if (v88)
  {
    *(_QWORD *)v86 = v88;
    *(_QWORD *)(v86 + 8) = *((_QWORD *)v87 + 1);
    *(_QWORD *)(v86 + 16) = *((_QWORD *)v87 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v104 = *v87;
    *(_QWORD *)(v86 + 16) = *((_QWORD *)v87 + 2);
    *(_OWORD *)v86 = v104;
  }
  *(_BYTE *)(v86 + 24) = *((_BYTE *)v87 + 24);
  *(_BYTE *)(v86 + 32) = *((_BYTE *)v87 + 32);
  *(_QWORD *)(v86 + 40) = *((_QWORD *)v87 + 5);
  swift_retain();
  swift_release();
  v105 = *((_QWORD *)v87 + 6);
  *(_BYTE *)(v86 + 56) = *((_BYTE *)v87 + 56);
  *(_QWORD *)(v86 + 48) = v105;
  *(_QWORD *)(v86 + 64) = *((_QWORD *)v87 + 8);
  *(_QWORD *)(v86 + 72) = *((_QWORD *)v87 + 9);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 80) = *((_QWORD *)v87 + 10);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 88) = *((_QWORD *)v87 + 11);
  v106 = *((_QWORD *)v87 + 12);
  *(_BYTE *)(v86 + 104) = *((_BYTE *)v87 + 104);
  *(_QWORD *)(v86 + 96) = v106;
  *(_QWORD *)(v86 + 112) = *((_QWORD *)v87 + 14);
  *(_QWORD *)(v86 + 120) = *((_QWORD *)v87 + 15);
  *(_QWORD *)(v86 + 128) = *((_QWORD *)v87 + 16);
  *(_QWORD *)(v86 + 136) = *((_QWORD *)v87 + 17);
  *(_QWORD *)(v86 + 144) = *((_QWORD *)v87 + 18);
  *(_QWORD *)(v86 + 152) = *((_QWORD *)v87 + 19);
  *(_QWORD *)(v86 + 160) = *((_QWORD *)v87 + 20);
  *(_QWORD *)(v86 + 168) = *((_QWORD *)v87 + 21);
  *(_QWORD *)(v86 + 176) = *((_QWORD *)v87 + 22);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 184) = *((_QWORD *)v87 + 23);
  swift_retain();
  swift_release();
  v107 = *((_QWORD *)v87 + 24);
  *(_BYTE *)(v86 + 200) = *((_BYTE *)v87 + 200);
  *(_QWORD *)(v86 + 192) = v107;
  *(_BYTE *)(v86 + 201) = *((_BYTE *)v87 + 201);
  *(_QWORD *)(v86 + 208) = *((_QWORD *)v87 + 26);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 216) = *((_QWORD *)v87 + 27);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 224) = *((_QWORD *)v87 + 28);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 232) = *((_QWORD *)v87 + 29);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 240) = *((_QWORD *)v87 + 30);
  swift_retain();
  swift_release();
  *(_BYTE *)(v86 + 248) = *((_BYTE *)v87 + 248);
  *(_QWORD *)(v86 + 256) = *((_QWORD *)v87 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 264) = *((_QWORD *)v87 + 33);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 272) = *((_QWORD *)v87 + 34);
  return v114;
}

uint64_t sub_23DD300E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int *v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  int *v68;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC512C();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = v7[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_23DCF9010();
  v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  v18 = v7[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  v67 = v17;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  v21 = v7[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = v7[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  *(_OWORD *)(a1 + v7[10]) = *(_OWORD *)(a2 + v7[10]);
  *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
  *(_OWORD *)(a1 + v7[12]) = *(_OWORD *)(a2 + v7[12]);
  v28 = a3[5];
  v29 = a3[6];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_QWORD *)(v30 + 64) = *(_QWORD *)(v31 + 64);
  v32 = *(_OWORD *)(v31 + 48);
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
  *(_OWORD *)(v30 + 48) = v32;
  v33 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v33;
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v34 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v35 = a1 + v34;
  v36 = a2 + v34;
  *(_QWORD *)(a1 + v34) = *(_QWORD *)(a2 + v34);
  v68 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v37 = v68[5];
  v38 = (char *)(v35 + v37);
  v39 = (char *)(v36 + v37);
  v40 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v66 = *((_QWORD *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v66 + 48))(v39, 1, v40))
  {
    sub_23DD2ED80();
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v38, (uint64_t)v39, v11);
    v42 = v40[5];
    v64 = a3;
    v65 = (void (*)(char *, char *, uint64_t))v12;
    v43 = &v38[v42];
    v44 = &v39[v42];
    v65(&v38[v42], &v39[v42], v11);
    v65(&v43[*(int *)(v67 + 36)], &v44[*(int *)(v67 + 36)], v11);
    v45 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v43[v45[5]] = *(_QWORD *)&v44[v45[5]];
    *(_QWORD *)&v43[v45[6]] = *(_QWORD *)&v44[v45[6]];
    v46 = v45[7];
    v47 = *(_QWORD *)&v44[v46];
    a3 = v64;
    *(_QWORD *)&v43[v46] = v47;
    v48 = v40[6];
    v49 = &v38[v48];
    v50 = &v39[v48];
    *(_OWORD *)v49 = *(_OWORD *)v50;
    v49[16] = v50[16];
    v38[v40[7]] = v39[v40[7]];
    v38[v40[8]] = v39[v40[8]];
    v38[v40[9]] = v39[v40[9]];
    *(_OWORD *)&v38[v40[10]] = *(_OWORD *)&v39[v40[10]];
    *(_OWORD *)&v38[v40[11]] = *(_OWORD *)&v39[v40[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v66 + 56))(v38, 0, 1, v40);
  }
  *(_OWORD *)(v35 + v68[6]) = *(_OWORD *)(v36 + v68[6]);
  v51 = v68[7];
  v52 = v35 + v51;
  v53 = v36 + v51;
  v54 = *(_OWORD *)(v53 + 16);
  *(_OWORD *)v52 = *(_OWORD *)v53;
  *(_OWORD *)(v52 + 16) = v54;
  *(_QWORD *)(v52 + 80) = *(_QWORD *)(v53 + 80);
  v55 = *(_OWORD *)(v53 + 64);
  v56 = *(_OWORD *)(v53 + 32);
  *(_OWORD *)(v52 + 48) = *(_OWORD *)(v53 + 48);
  *(_OWORD *)(v52 + 64) = v55;
  *(_OWORD *)(v52 + 32) = v56;
  *(_QWORD *)(v35 + v68[8]) = *(_QWORD *)(v36 + v68[8]);
  *(_QWORD *)(v35 + v68[9]) = *(_QWORD *)(v36 + v68[9]);
  v57 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v58 = v35 + v57;
  v59 = v36 + v57;
  v60 = *(_OWORD *)(v59 + 80);
  *(_OWORD *)(v58 + 64) = *(_OWORD *)(v59 + 64);
  *(_OWORD *)(v58 + 80) = v60;
  *(_OWORD *)(v58 + 96) = *(_OWORD *)(v59 + 96);
  *(_QWORD *)(v58 + 112) = *(_QWORD *)(v59 + 112);
  v61 = *(_OWORD *)(v59 + 16);
  *(_OWORD *)v58 = *(_OWORD *)v59;
  *(_OWORD *)(v58 + 16) = v61;
  v62 = *(_OWORD *)(v59 + 48);
  *(_OWORD *)(v58 + 32) = *(_OWORD *)(v59 + 32);
  *(_OWORD *)(v58 + 48) = v62;
  memcpy((void *)(a1 + a3[9]), (const void *)(a2 + a3[9]), 0x118uLL);
  return a1;
}

uint64_t sub_23DD304B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int *v56;
  uint64_t (*v57)(char *, uint64_t, int *);
  int v58;
  int v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v81;
  char *v82;
  char *v83;
  int *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int *v101;
  int *v102;
  uint64_t v103;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC512C();
  v99 = *(_QWORD *)(v11 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 40);
  v12(v9, v10, v11);
  v13 = v7[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_23DCF9010();
  v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  v18 = v7[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  v100 = v17;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  v21 = v7[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = v7[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  v28 = v7[10];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v32 = *v30;
  v31 = v30[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  v33 = v7[11];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (uint64_t *)(a2 + v33);
  v37 = *v35;
  v36 = v35[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  v38 = v7[12];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (uint64_t *)(a2 + v38);
  v42 = *v40;
  v41 = v40[1];
  *v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  v43 = a3[5];
  v44 = a1 + v43;
  v45 = a2 + v43;
  if (*(_QWORD *)(a1 + v43))
  {
    if (*(_QWORD *)v45)
    {
      *(_QWORD *)v44 = *(_QWORD *)v45;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v44 + 8) = *(_QWORD *)(v45 + 8);
      swift_bridgeObjectRelease();
      v46 = *(_OWORD *)(v45 + 32);
      *(_OWORD *)(v44 + 16) = *(_OWORD *)(v45 + 16);
      *(_OWORD *)(v44 + 32) = v46;
      *(_OWORD *)(v44 + 48) = *(_OWORD *)(v45 + 48);
      *(_QWORD *)(v44 + 64) = *(_QWORD *)(v45 + 64);
      goto LABEL_6;
    }
    sub_23DCF5648(v44);
  }
  v47 = *(_OWORD *)(v45 + 48);
  *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
  *(_OWORD *)(v44 + 48) = v47;
  *(_QWORD *)(v44 + 64) = *(_QWORD *)(v45 + 64);
  v48 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v48;
LABEL_6:
  v49 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v49) = *(_BYTE *)(a2 + v49);
  v102 = a3;
  v103 = a1;
  v50 = a3[8];
  v51 = a1 + v50;
  v52 = a2 + v50;
  *(_QWORD *)(a1 + v50) = *(_QWORD *)(a2 + v50);
  swift_bridgeObjectRelease();
  v101 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v53 = v101[5];
  v54 = (char *)(v51 + v53);
  v55 = (char *)(v52 + v53);
  v56 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v98 = *((_QWORD *)v56 - 1);
  v57 = *(uint64_t (**)(char *, uint64_t, int *))(v98 + 48);
  v58 = v57(v54, 1, v56);
  v59 = v57(v55, 1, v56);
  if (v58)
  {
    if (!v59)
    {
      v60 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
      v60(v54, v55, v11);
      v61 = v56[5];
      v62 = &v54[v61];
      v63 = &v55[v61];
      v60(&v54[v61], &v55[v61], v11);
      v60(&v62[*(int *)(v100 + 36)], &v63[*(int *)(v100 + 36)], v11);
      v64 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v62[v64[5]] = *(_QWORD *)&v63[v64[5]];
      *(_QWORD *)&v62[v64[6]] = *(_QWORD *)&v63[v64[6]];
      *(_QWORD *)&v62[v64[7]] = *(_QWORD *)&v63[v64[7]];
      v65 = v56[6];
      v66 = &v54[v65];
      v67 = &v55[v65];
      *(_OWORD *)v66 = *(_OWORD *)v67;
      v66[16] = v67[16];
      v54[v56[7]] = v55[v56[7]];
      v54[v56[8]] = v55[v56[8]];
      v54[v56[9]] = v55[v56[9]];
      *(_OWORD *)&v54[v56[10]] = *(_OWORD *)&v55[v56[10]];
      *(_OWORD *)&v54[v56[11]] = *(_OWORD *)&v55[v56[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v98 + 56))(v54, 0, 1, v56);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v59)
  {
    sub_23DCF59A8((uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_11:
    sub_23DD2ED80();
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_12;
  }
  v12((uint64_t)v54, (uint64_t)v55, v11);
  v81 = v56[5];
  v82 = &v54[v81];
  v83 = &v55[v81];
  v12((uint64_t)&v54[v81], (uint64_t)&v55[v81], v11);
  v12((uint64_t)&v82[*(int *)(v100 + 36)], (uint64_t)&v83[*(int *)(v100 + 36)], v11);
  v84 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v82[v84[5]] = *(_QWORD *)&v83[v84[5]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v82[v84[6]] = *(_QWORD *)&v83[v84[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v82[v84[7]] = *(_QWORD *)&v83[v84[7]];
  swift_bridgeObjectRelease();
  v85 = v56[6];
  v86 = &v54[v85];
  v87 = &v55[v85];
  *(_OWORD *)v86 = *(_OWORD *)v87;
  v86[16] = v87[16];
  v54[v56[7]] = v55[v56[7]];
  v54[v56[8]] = v55[v56[8]];
  v54[v56[9]] = v55[v56[9]];
  v88 = v56[10];
  v89 = &v54[v88];
  v90 = (uint64_t *)&v55[v88];
  v92 = *v90;
  v91 = v90[1];
  *(_QWORD *)v89 = v92;
  *((_QWORD *)v89 + 1) = v91;
  swift_bridgeObjectRelease();
  v93 = v56[11];
  v94 = &v54[v93];
  v95 = (uint64_t *)&v55[v93];
  v97 = *v95;
  v96 = v95[1];
  *(_QWORD *)v94 = v97;
  *((_QWORD *)v94 + 1) = v96;
  swift_bridgeObjectRelease();
LABEL_12:
  *(_OWORD *)(v51 + v101[6]) = *(_OWORD *)(v52 + v101[6]);
  v69 = v101[7];
  v70 = v51 + v69;
  v71 = v52 + v69;
  *(_QWORD *)v70 = *(_QWORD *)v71;
  *(_QWORD *)(v70 + 8) = *(_QWORD *)(v71 + 8);
  *(_BYTE *)(v70 + 16) = *(_BYTE *)(v71 + 16);
  *(_OWORD *)(v70 + 24) = *(_OWORD *)(v71 + 24);
  *(_OWORD *)(v70 + 40) = *(_OWORD *)(v71 + 40);
  *(_OWORD *)(v70 + 56) = *(_OWORD *)(v71 + 56);
  *(_OWORD *)(v70 + 72) = *(_OWORD *)(v71 + 72);
  *(_QWORD *)(v51 + v101[8]) = *(_QWORD *)(v52 + v101[8]);
  *(_QWORD *)(v51 + v101[9]) = *(_QWORD *)(v52 + v101[9]);
  v72 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v73 = v51 + v72;
  v74 = v52 + v72;
  *(_QWORD *)(v51 + v72) = *(_QWORD *)(v52 + v72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v73 + 8) = *(_QWORD *)(v74 + 8);
  *(_QWORD *)(v73 + 16) = *(_QWORD *)(v74 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v73 + 24) = *(_QWORD *)(v74 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v73 + 32) = *(_QWORD *)(v74 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v73 + 40) = *(_OWORD *)(v74 + 40);
  *(_OWORD *)(v73 + 56) = *(_OWORD *)(v74 + 56);
  *(_OWORD *)(v73 + 72) = *(_OWORD *)(v74 + 72);
  *(_OWORD *)(v73 + 88) = *(_OWORD *)(v74 + 88);
  *(_OWORD *)(v73 + 104) = *(_OWORD *)(v74 + 104);
  v75 = v102[9];
  v76 = v103 + v75;
  v77 = a2 + v75;
  if (!*(_QWORD *)(v103 + v75))
  {
LABEL_16:
    *(_OWORD *)v76 = *(_OWORD *)v77;
    *(_QWORD *)(v76 + 16) = *(_QWORD *)(v77 + 16);
    goto LABEL_17;
  }
  if (!*(_QWORD *)v77)
  {
    sub_23DCF9EB8(v76);
    goto LABEL_16;
  }
  *(_QWORD *)v76 = *(_QWORD *)v77;
  swift_release();
  *(_QWORD *)(v76 + 8) = *(_QWORD *)(v77 + 8);
  swift_release();
  *(_QWORD *)(v76 + 16) = *(_QWORD *)(v77 + 16);
  swift_release();
LABEL_17:
  *(_BYTE *)(v76 + 24) = *(_BYTE *)(v77 + 24);
  *(_BYTE *)(v76 + 32) = *(_BYTE *)(v77 + 32);
  *(_QWORD *)(v76 + 40) = *(_QWORD *)(v77 + 40);
  swift_release();
  *(_QWORD *)(v76 + 48) = *(_QWORD *)(v77 + 48);
  *(_BYTE *)(v76 + 56) = *(_BYTE *)(v77 + 56);
  *(_QWORD *)(v76 + 64) = *(_QWORD *)(v77 + 64);
  *(_QWORD *)(v76 + 72) = *(_QWORD *)(v77 + 72);
  swift_release();
  *(_QWORD *)(v76 + 80) = *(_QWORD *)(v77 + 80);
  swift_release();
  *(_QWORD *)(v76 + 88) = *(_QWORD *)(v77 + 88);
  *(_QWORD *)(v76 + 96) = *(_QWORD *)(v77 + 96);
  *(_BYTE *)(v76 + 104) = *(_BYTE *)(v77 + 104);
  v78 = *(_OWORD *)(v77 + 128);
  *(_OWORD *)(v76 + 112) = *(_OWORD *)(v77 + 112);
  *(_OWORD *)(v76 + 128) = v78;
  v79 = *(_OWORD *)(v77 + 160);
  *(_OWORD *)(v76 + 144) = *(_OWORD *)(v77 + 144);
  *(_OWORD *)(v76 + 160) = v79;
  *(_QWORD *)(v76 + 176) = *(_QWORD *)(v77 + 176);
  swift_release();
  *(_QWORD *)(v76 + 184) = *(_QWORD *)(v77 + 184);
  swift_release();
  *(_QWORD *)(v76 + 192) = *(_QWORD *)(v77 + 192);
  *(_BYTE *)(v76 + 200) = *(_BYTE *)(v77 + 200);
  *(_BYTE *)(v76 + 201) = *(_BYTE *)(v77 + 201);
  *(_QWORD *)(v76 + 208) = *(_QWORD *)(v77 + 208);
  swift_release();
  *(_QWORD *)(v76 + 216) = *(_QWORD *)(v77 + 216);
  swift_release();
  *(_QWORD *)(v76 + 224) = *(_QWORD *)(v77 + 224);
  swift_release();
  *(_QWORD *)(v76 + 232) = *(_QWORD *)(v77 + 232);
  swift_release();
  *(_QWORD *)(v76 + 240) = *(_QWORD *)(v77 + 240);
  swift_release();
  *(_BYTE *)(v76 + 248) = *(_BYTE *)(v77 + 248);
  *(_QWORD *)(v76 + 256) = *(_QWORD *)(v77 + 256);
  swift_release();
  *(_QWORD *)(v76 + 264) = *(_QWORD *)(v77 + 264);
  swift_release();
  *(_QWORD *)(v76 + 272) = *(_QWORD *)(v77 + 272);
  return v103;
}

uint64_t sub_23DD30C20()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD30C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for OvernightMetricsChartLayout(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 32);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 40);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_23DD30CD8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD30CE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for OvernightMetricsChartLayout(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 36) + 40) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for OvernightMetricsChartPointBackground()
{
  uint64_t result;

  result = qword_256CFD7C0;
  if (!qword_256CFD7C0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD30DC8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for IndividualOvernightMetricChartPoint(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for OvernightMetricsChartLayout(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_23DD30E68()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD30E78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t __dst[36];

  v3 = type metadata accessor for OvernightMetricsChartPointBackground();
  memcpy(__dst, (const void *)(v1 + *(int *)(v3 + 36)), 0x118uLL);
  if ((*(_BYTE *)(v1 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32) + 8) & 1) != 0)
  {
    v9 = sub_23DDC6200();
  }
  else
  {
    v5 = __dst[9];
    v4 = __dst[10];
    sub_23DCFBB9C(__dst);
    if ((sub_23DDC54B0() & 1) != 0)
    {
      v9 = v4;
      swift_retain();
      sub_23DCFE908(__dst);
    }
    else
    {
      swift_retain();
      sub_23DCFE908(__dst);
      v9 = v5;
    }
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  sub_23DDC63D4();
  sub_23DDC5B34();
  v6 = sub_23DD30FE4();
  result = sub_23DDC641C();
  v8 = *(_BYTE *)(v1 + *(int *)(v3 + 24));
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v15;
  *(double *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = result;
  *(_BYTE *)(a1 + 72) = v8;
  return result;
}

double sub_23DD30FE4()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  double v12;

  v1 = v0;
  v2 = 0.0;
  if (!sub_23DD311B0())
  {
    v3 = type metadata accessor for OvernightMetricsChartPointBackground();
    v4 = v0 + *(int *)(v3 + 20);
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v2 = *(double *)(v4 + 24);
      v6 = *(double *)(v4 + 40);
      v7 = *(_QWORD *)v4;
      v8 = *(_QWORD *)(v4 + 8);
    }
    else
    {
      if (qword_256CFC0B8 != -1)
        swift_once();
      v9 = qword_256D06578;
      swift_getKeyPath();
      sub_23DCF535C((unint64_t *)&qword_256CFC1C0, (uint64_t (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState, (uint64_t)&unk_23DDCAF88);
      sub_23DDC5210();
      swift_release();
      v7 = *(_QWORD *)(v9 + 16);
      v8 = *(_QWORD *)(v9 + 24);
      v2 = *(double *)(v9 + 40);
      v6 = *(double *)(v9 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v10 = *(unsigned __int8 *)(v1 + *(int *)(v3 + 24));
    sub_23DCF59EC(v5);
    if ((sub_23DD995CC(v1, v7) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = sub_23DD995CC(v1, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = 0.26;
      if (v10)
        v12 = 0.0;
      if ((v11 & 1) != 0)
        return v6;
      else
        return v12;
    }
  }
  return v2;
}

BOOL sub_23DD311B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  double v19;
  uint64_t v20;
  _QWORD v22[6];

  v1 = type metadata accessor for OvernightMetricsChartPointBackground();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(unsigned __int8 *)(v0 + *(int *)(v4 + 28));
  sub_23DD31430(v0, (uint64_t)v3);
  if (v5 == 1)
  {
    v6 = (uint64_t *)&v3[*(int *)(v1 + 20)];
    v8 = *v6;
    v7 = v6[1];
    v10 = *((double *)v6 + 4);
    v9 = v6[5];
    v22[2] = v6[3];
    v22[3] = v9;
    v11 = v6[7];
    v22[4] = v6[6];
    if (v8)
    {
      v12 = v10;
      v13 = v8;
      v14 = v7;
    }
    else
    {
      v22[1] = v11;
      if (qword_256CFC0B8 != -1)
        swift_once();
      v16 = qword_256D06578;
      swift_getKeyPath();
      v22[5] = v16;
      sub_23DCF535C((unint64_t *)&qword_256CFC1C0, (uint64_t (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState, (uint64_t)&unk_23DDCAF88);
      sub_23DDC5210();
      swift_release();
      v13 = *(_QWORD *)(v16 + 16);
      v14 = *(_QWORD *)(v16 + 24);
      v12 = *(double *)(v16 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v17 = *(int *)(v1 + 32);
    v18 = &v3[*(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32)];
    if ((v18[8] & 1) != 0)
    {
      sub_23DCF59EC(v8);
    }
    else
    {
      v19 = *(double *)v18;
      sub_23DCF59EC(v8);
      if ((sub_23DD995CC((uint64_t)v3, v13) & 1) == 0 || v12 >= 1.0)
      {
        v20 = type metadata accessor for OvernightMetricsChartLayout(0);
        if (*(_QWORD *)(v14 + 16) >= 2uLL)
        {
          v15 = sub_23DD99750(*(_QWORD *)&v3[v17 + 32 + *(int *)(v20 + 20)], v19);
          swift_bridgeObjectRelease();
LABEL_15:
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
      }
    }
    swift_bridgeObjectRelease();
    v15 = 0;
    goto LABEL_15;
  }
  v15 = 0;
LABEL_16:
  sub_23DCF59A8((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointBackground);
  return v15;
}

uint64_t sub_23DD31430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OvernightMetricsChartPointBackground();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD31474()
{
  return sub_23DCFB798(&qword_256CFD808, (uint64_t (*)(uint64_t))sub_23DD314A8, (uint64_t (*)(void))sub_23DD31624, (uint64_t (*)(void))sub_23DD317D8);
}

void sub_23DD314A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFD810)
  {
    sub_23DCF594C(255, &qword_256CFD818, sub_23DD31544);
    sub_23DD315DC(255, &qword_256CFD838, MEMORY[0x24BEE1328], MEMORY[0x24BEE1340], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEEBF0]);
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFD810);
  }
}

void sub_23DD31544(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFD820, (void (*)(uint64_t))sub_23DD31560);
}

void sub_23DD31560()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFD828)
  {
    sub_23DD315DC(255, (unint64_t *)&qword_256CFD830, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E18], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF06F8]);
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFD828);
  }
}

void sub_23DD315DC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v6 = a5(0, a3, a4);
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t sub_23DD31624()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFD840;
  if (!qword_256CFD840)
  {
    sub_23DCF594C(255, &qword_256CFD818, sub_23DD31544);
    v2 = v1;
    v3[0] = sub_23DD316A4();
    v3[1] = MEMORY[0x24BDECC38];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFD840);
  }
  return result;
}

unint64_t sub_23DD316A4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFD848;
  if (!qword_256CFD848)
  {
    sub_23DD31544(255);
    v2 = v1;
    v3[0] = sub_23DCFB798(&qword_256CFD850, (uint64_t (*)(uint64_t))sub_23DD31560, (uint64_t (*)(void))sub_23DD3172C, (uint64_t (*)(void))sub_23DD31770);
    v3[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFD848);
  }
  return result;
}

unint64_t sub_23DD3172C()
{
  unint64_t result;

  result = qword_256CFD858;
  if (!qword_256CFD858)
  {
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF4428], MEMORY[0x24BDF4458]);
    atomic_store(result, (unint64_t *)&qword_256CFD858);
  }
  return result;
}

unint64_t sub_23DD31770()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFD860;
  if (!qword_256CFD860)
  {
    sub_23DD315DC(255, (unint64_t *)&qword_256CFD830, MEMORY[0x24BDF3E48], MEMORY[0x24BDF3E18], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDF06F8]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF0710], v1);
    atomic_store(result, (unint64_t *)&qword_256CFD860);
  }
  return result;
}

unint64_t sub_23DD317D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFD868;
  if (!qword_256CFD868)
  {
    sub_23DD315DC(255, &qword_256CFD838, MEMORY[0x24BEE1328], MEMORY[0x24BEE1340], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDEEBF0]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEEC10], v1);
    atomic_store(result, (unint64_t *)&qword_256CFD868);
  }
  return result;
}

id sub_23DD31840()
{
  id result;
  void *v1;
  unsigned int v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  unsigned int v7;
  int v8;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, sel_isAppleInternalInstall);

    if (v2
      && (sub_23DDC6764(),
          v3 = objc_allocWithZone(MEMORY[0x24BDBCF50]),
          v4 = (void *)sub_23DDC6740(),
          swift_bridgeObjectRelease(),
          v5 = objc_msgSend(v3, sel_initWithSuiteName_, v4),
          v4,
          v5))
    {
      v6 = (void *)sub_23DDC6740();
      v7 = objc_msgSend(v5, sel_BOOLForKey_, v6);

      v8 = v7 ^ 1;
    }
    else
    {
      v8 = 1;
    }
    return (id)(v8 & ~sub_23DDC6614());
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for BalanceWidgetRelevanceProvider()
{
  return &type metadata for BalanceWidgetRelevanceProvider;
}

uint64_t sub_23DD31970()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  sub_23DCFB328(0, &qword_2543266F8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v10 - v1;
  v3 = type metadata accessor for OvernightMetricsWarmupProgress();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD728B4((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23DCFEA1C((uint64_t)v2, &qword_2543266F8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    goto LABEL_5;
  }
  sub_23DD325F8((uint64_t)v2, (uint64_t)v6);
  v7 = sub_23DDC52B8();
  result = sub_23DDC52D0();
  v9 = v7 - result;
  if (!__OFSUB__(v7, result))
  {
    sub_23DD3263C((uint64_t)v6);
    if (v9 >= 1)
      return sub_23DDC65FC();
LABEL_5:
    sub_23DD6F1CC();
    return sub_23DDC65FC();
  }
  __break(1u);
  return result;
}

uint64_t sub_23DD31AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(_BYTE *, uint64_t);
  uint64_t v40;
  _BYTE *v42;
  _BYTE *v43;
  void (*v44)(_BYTE *, uint64_t);
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE v53[12];
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v4 = sub_23DDC512C();
  v61 = *(_QWORD *)(v4 - 8);
  v62 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v60 = &v53[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v59 = &v53[-v7];
  v8 = sub_23DDC4E20();
  MEMORY[0x24BDAC7A8](v8);
  v58 = &v53[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23DD32160();
  v64 = *(_QWORD *)(v10 - 8);
  v65 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v63 = &v53[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_23DDC57A4();
  v66 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v53[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v53[-v16];
  sub_23DCFB328(0, &qword_254326640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v18);
  v20 = &v53[-v19];
  v21 = sub_23DDC4EE0();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v53[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v25);
  v27 = &v53[-v26];
  sub_23DD321B8(a1, (uint64_t)v20);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_23DCFEA1C((uint64_t)v20, &qword_254326640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
    sub_23DDC578C();
    v28 = sub_23DDC5798();
    v29 = sub_23DDC68F0();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v68 = v31;
      *(_DWORD *)v30 = 136446210;
      v67 = sub_23DD02158(0xD00000000000001ELL, 0x800000023DDC8BE0, &v68);
      sub_23DDC698C();
      _os_log_impl(&dword_23DCF2000, v28, v29, "[%{public}s] no widget relevance", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v31, -1, -1);
      MEMORY[0x242643C80](v30, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v14, v12);
    return sub_23DDC653C();
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 32))(v27, v20, v21);
    sub_23DDC578C();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 16))(v24, v27, v21);
    v32 = sub_23DDC5798();
    v33 = sub_23DDC68F0();
    v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      v35 = swift_slowAlloc();
      v57 = a2;
      v36 = v35;
      v55 = swift_slowAlloc();
      v68 = v55;
      *(_DWORD *)v36 = 136446466;
      v54 = v34;
      v67 = sub_23DD02158(0xD00000000000001ELL, 0x800000023DDC8BE0, &v68);
      v56 = v12;
      sub_23DDC698C();
      *(_WORD *)(v36 + 12) = 2082;
      sub_23DD325B0();
      v37 = sub_23DDC6BE4();
      v67 = sub_23DD02158(v37, v38, &v68);
      sub_23DDC698C();
      swift_bridgeObjectRelease();
      v39 = *(void (**)(_BYTE *, uint64_t))(v22 + 8);
      v39(v24, v21);
      _os_log_impl(&dword_23DCF2000, v32, (os_log_type_t)v54, "[%{public}s] relevant for dates %{public}s", (uint8_t *)v36, 0x16u);
      v40 = v55;
      swift_arrayDestroy();
      MEMORY[0x242643C80](v40, -1, -1);
      MEMORY[0x242643C80](v36, -1, -1);

      (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v17, v56);
    }
    else
    {
      v39 = *(void (**)(_BYTE *, uint64_t))(v22 + 8);
      v39(v24, v21);

      (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v17, v12);
    }
    v42 = v59;
    sub_23DDC4EC8();
    v43 = v60;
    sub_23DDC4EB0();
    sub_23DDC4E14();
    v44 = *(void (**)(_BYTE *, uint64_t))(v61 + 8);
    v45 = v43;
    v46 = v62;
    v44(v45, v62);
    v44(v42, v46);
    v47 = v63;
    sub_23DDC6578();
    sub_23DCFB328(0, &qword_2543264D0, (uint64_t (*)(uint64_t))sub_23DD32160, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v48 = v64;
    v49 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
    v50 = swift_allocObject();
    *(_OWORD *)(v50 + 16) = xmmword_23DDC7F50;
    v51 = v50 + v49;
    v52 = v65;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v48 + 16))(v51, v47, v65);
    sub_23DDC653C();
    (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v47, v52);
    return ((uint64_t (*)(_BYTE *, uint64_t))v39)(v27, v21);
  }
}

void sub_23DD32160()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2543264C8)
  {
    v0 = sub_23DDC6584();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2543264C8);
  }
}

uint64_t sub_23DD321B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  void (*v28)(char *, uint64_t);
  char *v29;
  char v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = a2;
  v3 = sub_23DDC5528();
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v38 - v10;
  sub_23DCFB328(0, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], v5);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v38 - v13;
  v15 = sub_23DDC512C();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v40 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v39 = (char *)&v38 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v38 = (char *)&v38 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v38 - v23;
  v44 = a1;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v11);
  v25 = sub_23DDC5420();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v27(v11, 1, v25) == 1)
  {
    sub_23DCFEA1C((uint64_t)v11, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
LABEL_4:
    sub_23DCFEA1C((uint64_t)v14, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    goto LABEL_10;
  }
  sub_23DDC56A8();
  v28 = *(void (**)(char *, uint64_t))(v26 + 8);
  v28(v11, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    goto LABEL_4;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v24, v14, v15);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v8);
  if (v27(v8, 1, v25) == 1)
  {
    sub_23DCFEA1C((uint64_t)v8, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
  }
  else
  {
    v29 = v41;
    sub_23DDC53D8();
    v28(v8, v25);
    v30 = sub_23DDC5468();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v43);
    if ((v30 & 1) != 0)
    {
      v31 = v38;
      sub_23DDC50FC();
      v32 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
      v32(v39, v24, v15);
      v32(v40, v31, v15);
      v33 = v45;
      sub_23DDC4EBC();
      v34 = *(void (**)(char *, uint64_t))(v16 + 8);
      v34(v31, v15);
      v34(v24, v15);
      v35 = sub_23DDC4EE0();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v33, 0, 1, v35);
    }
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v15);
LABEL_10:
  v37 = sub_23DDC4EE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v45, 1, 1, v37);
}

unint64_t sub_23DD325B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254326638;
  if (!qword_254326638)
  {
    v1 = sub_23DDC4EE0();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDCB8B8], v1);
    atomic_store(result, (unint64_t *)&qword_254326638);
  }
  return result;
}

uint64_t sub_23DD325F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OvernightMetricsWarmupProgress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD3263C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OvernightMetricsWarmupProgress();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DD32690()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD326A0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for BalanceWidgetSystemSmallView(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFD8D0);
}

uint64_t sub_23DD326C8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD326D8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  _OWORD *v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23DDC68E4();
    v23 = (void *)sub_23DDC5F18();
    sub_23DDC5780();

  }
  sub_23DDC5C78();
  v24 = v13[3];
  a9[2] = v13[2];
  a9[3] = v24;
  v25 = v13[4];
  v26 = v13[1];
  *a9 = *v13;
  a9[1] = v26;
  a9[8] = v31;
  a9[9] = v32;
  a9[10] = v33;
  a9[11] = v34;
  a9[4] = v25;
  a9[5] = v28;
  a9[6] = v29;
  a9[7] = v30;
  return sub_23DD39934((uint64_t)v13);
}

double sub_23DD32880@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_23DD32930(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t, uint64_t))sub_23DD367A0, (uint64_t (*)(_QWORD))sub_23DD073B0).n128_u64[0];
  return result;
}

double sub_23DD328D8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_23DD32930(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t, uint64_t))sub_23DD382FC, (uint64_t (*)(_QWORD))sub_23DD0A8E4).n128_u64[0];
  return result;
}

__n128 sub_23DD32930@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, void (*a16)(uint64_t, uint64_t), uint64_t (*a17)(_QWORD))
{
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v20)(_QWORD);
  void *v29;
  _OWORD *v30;
  __n128 result;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v18 = v17;
  v20 = a17;
  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23DDC68E4();
    v29 = (void *)sub_23DDC5F18();
    sub_23DDC5780();

    v20 = a17;
  }
  sub_23DDC5C78();
  a16(v18, a9);
  v30 = (_OWORD *)(a9 + *(int *)(v20(0) + 36));
  v30[4] = v36;
  v30[5] = v37;
  v30[6] = v38;
  *v30 = v32;
  v30[1] = v33;
  result = v35;
  v30[2] = v34;
  v30[3] = v35;
  return result;
}

uint64_t sub_23DD32AF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t KeyPath;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE v89[288];

  v2 = v1;
  v86 = a1;
  v3 = sub_23DDC5EF4();
  v84 = *(_QWORD *)(v3 - 8);
  v85 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v83 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_256CFC640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v82 = (uint64_t)&v69 - v6;
  v71 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  MEMORY[0x24BDAC7A8](v71);
  v73 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v69 - v9;
  sub_23DD33780();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD338B8(0);
  v69 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD338D4(0);
  v70 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD338F0(0);
  v72 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD33914(0);
  v76 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v74 = (uint64_t)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD33930(0);
  v80 = *(_QWORD *)(v25 - 8);
  v81 = v25;
  MEMORY[0x24BDAC7A8](v25);
  v78 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD33B94(0);
  v79 = v27;
  v77 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v75 = (char *)&v69 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v13 = sub_23DDC5E1C();
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 0;
  sub_23DD37FB4(0, &qword_256CFD988, sub_23DD337F8);
  v30 = v2;
  sub_23DD331A0(v2, (uint64_t)&v13[*(int *)(v29 + 44)]);
  v31 = sub_23DDC5F6C();
  v32 = sub_23DDC5F84();
  v33 = sub_23DDC5F78();
  sub_23DDC5F78();
  if (sub_23DDC5F78() != v31)
    v33 = sub_23DDC5F78();
  sub_23DDC5F78();
  if (sub_23DDC5F78() != v32)
    v33 = sub_23DDC5F78();
  sub_23DDC5A74();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v40;
  sub_23DCF58EC((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(_QWORD))sub_23DD33780);
  v42 = &v16[*(int *)(v69 + 36)];
  *v42 = v33;
  *((_QWORD *)v42 + 1) = v35;
  *((_QWORD *)v42 + 2) = v37;
  *((_QWORD *)v42 + 3) = v39;
  *((_QWORD *)v42 + 4) = v41;
  v42[40] = 0;
  sub_23DCF59A8((uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DD33780);
  v43 = sub_23DDC5F60();
  type metadata accessor for BalanceWidgetSystemSmallView(0);
  sub_23DD360D4((uint64_t)v10);
  sub_23DDC5BF4();
  sub_23DCF59A8((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  sub_23DDC5A74();
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v51 = v50;
  sub_23DCF58EC((uint64_t)v16, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_23DD338B8);
  v52 = &v19[*(int *)(v70 + 36)];
  *v52 = v43;
  *((_QWORD *)v52 + 1) = v45;
  *((_QWORD *)v52 + 2) = v47;
  *((_QWORD *)v52 + 3) = v49;
  *((_QWORD *)v52 + 4) = v51;
  v52[40] = 0;
  sub_23DCF59A8((uint64_t)v16, (uint64_t (*)(_QWORD))sub_23DD338B8);
  KeyPath = swift_getKeyPath();
  v54 = v73;
  sub_23DD360D4(v73);
  sub_23DD96B0C(v30, v89);
  sub_23DCF59A8(v54, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  sub_23DCF58EC((uint64_t)v19, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_23DD338D4);
  v55 = *(int *)(v72 + 36);
  *(_QWORD *)&v22[v55] = KeyPath;
  memcpy(&v22[v55 + 8], v89, 0x118uLL);
  sub_23DCF59A8((uint64_t)v19, (uint64_t (*)(_QWORD))sub_23DD338D4);
  v56 = sub_23DDC63BC();
  v57 = v74;
  sub_23DD32930(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v74, 0.0, 1, INFINITY, 0, v56, v58, (void (*)(uint64_t, uint64_t))sub_23DD3632C, (uint64_t (*)(_QWORD))sub_23DD33914);
  sub_23DCF59A8((uint64_t)v22, (uint64_t (*)(_QWORD))sub_23DD338F0);
  v59 = v82;
  sub_23DD6F8D0(0, v82);
  v60 = sub_23DDC5018();
  v61 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v59, 0, 1, v60);
  v62 = sub_23DD339A4();
  v63 = v78;
  v64 = v76;
  sub_23DDC6104();
  sub_23DD0B1E4(v59, &qword_256CFC640, v61, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  sub_23DCF59A8(v57, (uint64_t (*)(_QWORD))sub_23DD33914);
  v65 = v83;
  sub_23DDC5EE8();
  v87 = v64;
  v88 = v62;
  swift_getOpaqueTypeConformance2();
  v66 = v75;
  v67 = v81;
  sub_23DDC617C();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v65, v85);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v63, v67);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v77 + 32))(v86, v66, v79);
}

uint64_t sub_23DD331A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;

  v64 = a2;
  v3 = type metadata accessor for BalanceWidgetViewModel();
  MEMORY[0x24BDAC7A8](v3);
  v61 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for BalanceWidgetSystemSmallTitleView(0);
  MEMORY[0x24BDAC7A8](v62);
  v63 = (uint64_t)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v60 = (char *)&v56 - v7;
  v8 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  MEMORY[0x24BDAC7A8](v8);
  v59 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, qword_256CFC6B0, type metadata accessor for OvernightMetricsChart.Derivations, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v58 = (char *)&v56 - v12;
  sub_23DCFB328(0, &qword_2543266F8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, v10);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v56 - v14;
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v10);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v56 - v17;
  v19 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for OvernightMetricsChart(0);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD33888(0);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v56 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v56 = a1;
  v57 = (uint64_t)&v56 - v32;
  v33 = a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + *(int *)(v3 + 24));
  sub_23DCF58EC(v33, (uint64_t)v24, type metadata accessor for OvernightMetricsViewModel);
  v65 = a1;
  sub_23DCF58EC((uint64_t)&v24[v22[8]], (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
  sub_23DD36338((uint64_t)&v24[v22[7]], (uint64_t)v18, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v34 = *(_QWORD **)&v24[v22[14]];
  v35 = *(_QWORD *)&v24[v22[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OvernightMetricsViewModel.warmupProgress.getter((uint64_t)v15);
  v36 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v37 = (uint64_t)v58;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v58, 1, 1, v36);
  OvernightMetricsChart.init(timeScope:chartPointCollection:emphasizedChartPoint:tabProgress:shouldMergeOverlappingIndividualMetrics:visibleDataTypes:keyDates:warmupProgress:alignWarmupProgressCounterToChartPlotArea:precomputedDerivations:)(&v65, (uint64_t)v21, (uint64_t)v18, 0, 1, 1, v34, v35, v27, (uint64_t)v15, 1, v37);
  sub_23DCF59A8((uint64_t)v24, type metadata accessor for OvernightMetricsViewModel);
  type metadata accessor for BalanceWidgetSystemSmallView(0);
  v38 = v56;
  v39 = v59;
  sub_23DD360D4(v59);
  v40 = v39;
  v41 = sub_23DD969AC();
  LOBYTE(v24) = v42 & 1;
  sub_23DCF59A8(v40, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  v43 = sub_23DDC63D4();
  sub_23DD32930(0.0, 1, 0.0, 1, 0.0, 1, *(double *)&v41, (char)v24, (uint64_t)v30, 0.0, 1, 0.0, 1, v43, v44, (void (*)(uint64_t, uint64_t))sub_23DD36794, (uint64_t (*)(_QWORD))sub_23DD33888);
  sub_23DCF59A8((uint64_t)v27, type metadata accessor for OvernightMetricsChart);
  v45 = v57;
  sub_23DCFBB58((uint64_t)v30, v57, (uint64_t (*)(_QWORD))sub_23DD33888);
  v46 = v61;
  sub_23DCF58EC(v38, v61, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
  KeyPath = swift_getKeyPath();
  v48 = (uint64_t)v60;
  *(_QWORD *)&v60[*(int *)(v62 + 20)] = KeyPath;
  sub_23DCFB328(0, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  swift_storeEnumTagMultiPayload();
  sub_23DCFBB58(v46, v48, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
  sub_23DCF58EC(v45, (uint64_t)v30, (uint64_t (*)(_QWORD))sub_23DD33888);
  v49 = v48;
  v50 = v48;
  v51 = v63;
  sub_23DCF58EC(v49, v63, type metadata accessor for BalanceWidgetSystemSmallTitleView);
  v52 = v64;
  sub_23DCF58EC((uint64_t)v30, v64, (uint64_t (*)(_QWORD))sub_23DD33888);
  sub_23DD33814();
  v54 = v52 + *(int *)(v53 + 48);
  *(_QWORD *)v54 = 0x4010000000000000;
  *(_BYTE *)(v54 + 8) = 0;
  sub_23DCF58EC(v51, v52 + *(int *)(v53 + 64), type metadata accessor for BalanceWidgetSystemSmallTitleView);
  sub_23DCF59A8(v50, type metadata accessor for BalanceWidgetSystemSmallTitleView);
  sub_23DCF59A8(v45, (uint64_t (*)(_QWORD))sub_23DD33888);
  sub_23DCF59A8(v51, type metadata accessor for BalanceWidgetSystemSmallTitleView);
  return sub_23DCF59A8((uint64_t)v30, (uint64_t (*)(_QWORD))sub_23DD33888);
}

void sub_23DD33780()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFD908)
  {
    sub_23DD337F8(255);
    sub_23DCF535C(&qword_256CFD928, (uint64_t (*)(uint64_t))sub_23DD337F8, MEMORY[0x24BDF5428]);
    v0 = sub_23DDC6320();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFD908);
  }
}

void sub_23DD337F8(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFD910, (uint64_t (*)(uint64_t))sub_23DD33814, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_23DD33814()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_256CFD918)
  {
    sub_23DD33888(255);
    type metadata accessor for BalanceWidgetSystemSmallTitleView(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_256CFD918);
  }
}

void sub_23DD33888(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFD920, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChart);
}

uint64_t type metadata accessor for BalanceWidgetSystemSmallTitleView(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFD9F0);
}

void sub_23DD338B8(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFD930, (void (*)(uint64_t))sub_23DD33780);
}

void sub_23DD338D4(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFD938, sub_23DD338B8);
}

void sub_23DD338F0(uint64_t a1)
{
  sub_23DD0A9C8(a1, &qword_256CFD940, sub_23DD338D4, (unint64_t *)&qword_256CFC670, (uint64_t)&type metadata for OvernightMetricsChartSpec);
}

void sub_23DD33914(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFD948, sub_23DD338F0);
}

void sub_23DD33930(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_256CFD950)
  {
    sub_23DD33914(255);
    v5[0] = v2;
    v5[1] = sub_23DD339A4();
    v3 = MEMORY[0x242643B9C](a1, v5, MEMORY[0x24BDFAC50], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_256CFD950);
  }
}

unint64_t sub_23DD339A4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFD958;
  if (!qword_256CFD958)
  {
    sub_23DD33914(255);
    v2 = v1;
    v3[0] = sub_23DCFB798(&qword_256CFD960, (uint64_t (*)(uint64_t))sub_23DD338F0, (uint64_t (*)(void))sub_23DD33A2C, (uint64_t (*)(void))sub_23DD33B34);
    v3[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFD958);
  }
  return result;
}

unint64_t sub_23DD33A2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFD968;
  if (!qword_256CFD968)
  {
    sub_23DD338D4(255);
    v2 = v1;
    v3[0] = sub_23DD33AB4(&qword_256CFD970, (uint64_t (*)(uint64_t))sub_23DD338B8, &qword_256CFD978, (uint64_t (*)(uint64_t))sub_23DD33780);
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFD968);
  }
  return result;
}

uint64_t sub_23DD33AB4(unint64_t *a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = sub_23DCF535C(a3, a4, MEMORY[0x24BDF4700]);
    v9[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DD33B34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFC6A0;
  if (!qword_256CFC6A0)
  {
    sub_23DD0AA4C(255, (unint64_t *)&qword_256CFC670, (uint64_t)&type metadata for OvernightMetricsChartSpec, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF1028], v1);
    atomic_store(result, (unint64_t *)&qword_256CFC6A0);
  }
  return result;
}

void sub_23DD33B94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_256CFD980)
  {
    sub_23DD33930(255);
    v3 = v2;
    sub_23DD33914(255);
    sub_23DD339A4();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = MEMORY[0x24BDECD60];
    v7[2] = OpaqueTypeConformance2;
    v7[3] = MEMORY[0x24BDECD48];
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDF2DE8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256CFD980);
  }
}

uint64_t sub_23DD33C48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t KeyPath;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v67 = a1;
  sub_23DD37880();
  v66 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD378F8();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD37BEC(0);
  v68 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD37C08(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD37C24(0);
  v69 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD37C48(0);
  v70 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD37C6C(0);
  v64 = *(_QWORD *)(v23 - 8);
  v65 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v62 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD37EB4(0);
  v63 = v25;
  v61 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v60 = (char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_23DDC5E1C();
  type metadata accessor for BalanceWidgetSystemSmallTitleView(0);
  sub_23DD360D4((uint64_t)v7);
  sub_23DD972CC();
  v29 = v28;
  sub_23DCF59A8((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  *(_QWORD *)v10 = v27;
  *((_QWORD *)v10 + 1) = v29;
  v10[16] = 0;
  sub_23DD37FB4(0, &qword_256CFDAF8, sub_23DD37970);
  sub_23DD3423C(v1, (uint64_t)&v10[*(int *)(v30 + 44)]);
  v31 = sub_23DDC5F6C();
  v32 = sub_23DDC5F84();
  v33 = sub_23DDC5F78();
  sub_23DDC5F78();
  if (sub_23DDC5F78() != v31)
    v33 = sub_23DDC5F78();
  sub_23DDC5F78();
  if (sub_23DDC5F78() != v32)
    v33 = sub_23DDC5F78();
  sub_23DDC5A74();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v40;
  sub_23DCF58EC((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DD378F8);
  v42 = &v13[*(int *)(v68 + 36)];
  *v42 = v33;
  *((_QWORD *)v42 + 1) = v35;
  *((_QWORD *)v42 + 2) = v37;
  *((_QWORD *)v42 + 3) = v39;
  *((_QWORD *)v42 + 4) = v41;
  v42[40] = 0;
  sub_23DCF59A8((uint64_t)v10, (uint64_t (*)(_QWORD))sub_23DD378F8);
  v43 = sub_23DDC63E0();
  sub_23DD32930(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 0.0, 1, v43, v44, (void (*)(uint64_t, uint64_t))sub_23DD38160, (uint64_t (*)(_QWORD))sub_23DD37C08);
  sub_23DCF59A8((uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DD37BEC);
  KeyPath = swift_getKeyPath();
  sub_23DCF58EC((uint64_t)v16, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_23DD37C08);
  v46 = &v19[*(int *)(v69 + 36)];
  *(_QWORD *)v46 = KeyPath;
  v46[8] = 1;
  sub_23DCF59A8((uint64_t)v16, (uint64_t (*)(_QWORD))sub_23DD37C08);
  v47 = swift_getKeyPath();
  sub_23DCF58EC((uint64_t)v19, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_23DD37C24);
  v48 = v70;
  v49 = (uint64_t *)&v22[*(int *)(v70 + 36)];
  *v49 = v47;
  v49[1] = 0x3FE0000000000000;
  sub_23DCF59A8((uint64_t)v19, (uint64_t (*)(_QWORD))sub_23DD37C24);
  v50 = *MEMORY[0x24BDECF38];
  v51 = sub_23DDC5C00();
  v52 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v4, v50, v51);
  sub_23DCF535C(&qword_256CFDB00, v52, MEMORY[0x24BDECF78]);
  result = sub_23DDC66C8();
  if ((result & 1) != 0)
  {
    v54 = sub_23DCFB798(&qword_256CFDAB8, (uint64_t (*)(uint64_t))sub_23DD37C48, sub_23DD37D48, (uint64_t (*)(void))sub_23DD37E54);
    v55 = sub_23DCF535C(&qword_256CFDAE8, (uint64_t (*)(uint64_t))sub_23DD37880, MEMORY[0x24BEE30C8]);
    v56 = v62;
    v57 = v66;
    sub_23DDC614C();
    sub_23DCF59A8((uint64_t)v4, (uint64_t (*)(_QWORD))sub_23DD37880);
    sub_23DCF59A8((uint64_t)v22, (uint64_t (*)(_QWORD))sub_23DD37C48);
    v71 = v48;
    v72 = v57;
    v73 = v54;
    v74 = v55;
    swift_getOpaqueTypeConformance2();
    v58 = v60;
    v59 = v65;
    sub_23DDC6164();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v56, v59);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v61 + 32))(v67, v58, v63);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23DD3423C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjCClassFromMetadata;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t KeyPath;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t result;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;

  v154 = a1;
  v142 = a2;
  sub_23DD37AAC(0);
  v138 = v2;
  v134 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v132 = (char *)&v122 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v133 = (char *)&v122 - v5;
  sub_23DD3816C(0, &qword_256CFDB08, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView, (uint64_t (*)(uint64_t))sub_23DD37AAC, MEMORY[0x24BDEF380]);
  v140 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v137 = (uint64_t)&v122 - v7;
  v8 = type metadata accessor for BalanceWidgetViewModel();
  MEMORY[0x24BDAC7A8](v8);
  v131 = (uint64_t)&v122 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v123 = (uint64_t)&v122 - v11;
  v141 = type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView(0);
  MEMORY[0x24BDAC7A8](v141);
  v124 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_2543266F8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v13);
  v147 = (char *)&v122 - v14;
  v15 = type metadata accessor for OvernightMetricsWarmupProgress();
  v148 = *(_QWORD *)(v15 - 8);
  v149 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v125 = (uint64_t)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD3816C(0, &qword_256CFDA60, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView, (uint64_t (*)(uint64_t))sub_23DD37AAC, MEMORY[0x24BDEF3B8]);
  MEMORY[0x24BDAC7A8](v17);
  v136 = (char *)&v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v135 = (char *)&v122 - v20;
  v146 = sub_23DDC5FFC();
  v145 = *(_QWORD *)(v146 - 8);
  MEMORY[0x24BDAC7A8](v146);
  v22 = (char *)&v122 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  MEMORY[0x24BDAC7A8](v23);
  v130 = (uint64_t)&v122 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v122 - v26;
  v28 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v28);
  v29 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v29);
  sub_23DD37A18(0);
  v139 = v30;
  MEMORY[0x24BDAC7A8](v30);
  v151 = (char *)&v122 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v153 = (uint64_t)&v122 - v33;
  MEMORY[0x24BDAC7A8](v34);
  v152 = (uint64_t)&v122 - v35;
  sub_23DDC66D4();
  type metadata accessor for HealthBalanceUI();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v37 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23DDC5168();
  v156 = sub_23DDC6770();
  v157 = v38;
  v129 = sub_23DD0B190();
  v39 = sub_23DDC6098();
  v41 = v40;
  v144 = (char *)v42;
  v44 = v43 & 1;
  v45 = v154 + *(int *)(type metadata accessor for BalanceWidgetSystemSmallTitleView(0) + 20);
  sub_23DD360D4((uint64_t)v27);
  sub_23DDC602C();
  v46 = v145;
  v47 = v146;
  (*(void (**)(char *, _QWORD, uint64_t))(v145 + 104))(v22, *MEMORY[0x24BDF17C8], v146);
  sub_23DDC6020();
  swift_release();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v22, v47);
  sub_23DDC5FC0();
  sub_23DDC5FF0();
  swift_release();
  sub_23DCF59A8((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  v48 = sub_23DDC6074();
  v50 = v49;
  v143 = v51;
  LOBYTE(v46) = v52 & 1;
  sub_23DD0B1D4(v39, v41, v44);
  swift_release();
  swift_bridgeObjectRelease();
  v150 = v45;
  sub_23DD360D4((uint64_t)v27);
  v53 = sub_23DDC6260();
  v144 = v27;
  sub_23DCF59A8((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  v156 = v53;
  v54 = sub_23DDC6068();
  v56 = v55;
  v145 = v55;
  v58 = v57;
  v146 = v57;
  LOBYTE(v45) = v59 & 1;
  sub_23DD0B1D4(v48, v50, v46);
  swift_release();
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v156 = v54;
  v157 = v56;
  v158 = v45;
  v159 = v58;
  v160 = KeyPath;
  v161 = 1;
  v162 = 0;
  v155 = &unk_250E9BE08;
  sub_23DD95E24((uint64_t)&unk_250E9BE88);
  sub_23DD0AA4C(0, (unint64_t *)&qword_256CFC758, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  v62 = v61;
  v63 = sub_23DD0A770((unint64_t *)&qword_256CFC828, MEMORY[0x24BEE12B0]);
  v143 = v62;
  v128 = v63;
  sub_23DDC668C();
  v64 = v154;
  swift_bridgeObjectRelease();
  sub_23DD37A3C();
  v66 = v65;
  v67 = sub_23DD37B6C();
  v68 = v153;
  v127 = v66;
  v126 = v67;
  sub_23DDC6188();
  swift_bridgeObjectRelease();
  v69 = (uint64_t)v147;
  sub_23DD0B1D4(v54, v145, v45);
  swift_bridgeObjectRelease();
  swift_release();
  sub_23DCFBB58(v68, v152, (uint64_t (*)(_QWORD))sub_23DD37A18);
  sub_23DD728B4(v69);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v69, 1, v149) == 1)
  {
    sub_23DD0B1E4(v69, &qword_2543266F8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    goto LABEL_6;
  }
  v70 = v125;
  sub_23DCFBB58(v69, v125, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
  v71 = sub_23DDC52B8();
  result = sub_23DDC52D0();
  v73 = __OFSUB__(v71, result);
  v74 = v71 - result;
  if (!v73)
  {
    sub_23DCF59A8(v70, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
    if (v74 > 0)
    {
      v75 = v123;
      sub_23DCF58EC(v64, v123, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
      v76 = swift_getKeyPath();
      v77 = (uint64_t)v124;
      *(_QWORD *)&v124[*(int *)(v141 + 20)] = v76;
      sub_23DCFB328(0, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
      swift_storeEnumTagMultiPayload();
      sub_23DCFBB58(v75, v77, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
      sub_23DCF58EC(v77, v137, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView);
      swift_storeEnumTagMultiPayload();
      sub_23DCF535C(qword_256CFDB10, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView, (uint64_t)&unk_23DDC8E2C);
      v78 = sub_23DCFB798(&qword_256CFDA70, (uint64_t (*)(uint64_t))sub_23DD37A18, (uint64_t (*)(void))sub_23DD37B6C, sub_23DD0A754);
      v156 = v139;
      v157 = v78;
      swift_getOpaqueTypeConformance2();
      v79 = (uint64_t)v135;
      sub_23DDC5E58();
      sub_23DCF59A8(v77, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView);
      v80 = v142;
      v81 = (uint64_t)v136;
LABEL_12:
      v120 = v152;
      v119 = v153;
      sub_23DCF58EC(v152, v153, (uint64_t (*)(_QWORD))sub_23DD37A18);
      sub_23DD3823C(v79, v81);
      sub_23DCF58EC(v119, v80, (uint64_t (*)(_QWORD))sub_23DD37A18);
      sub_23DD3798C();
      sub_23DD3823C(v81, v80 + *(int *)(v121 + 48));
      sub_23DD382A0(v79);
      sub_23DCF59A8(v120, (uint64_t (*)(_QWORD))sub_23DD37A18);
      sub_23DD382A0(v81);
      return sub_23DCF59A8(v119, (uint64_t (*)(_QWORD))sub_23DD37A18);
    }
LABEL_6:
    v156 = sub_23DD6FFF0();
    v157 = v82;
    v83 = sub_23DDC6098();
    v85 = v84;
    v87 = v86 & 1;
    v88 = (uint64_t)v144;
    sub_23DD360D4((uint64_t)v144);
    sub_23DD97430();
    sub_23DCF59A8(v88, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
    v89 = sub_23DDC6074();
    v91 = v90;
    v93 = v92;
    v149 = v94;
    swift_release();
    sub_23DD0B1D4(v83, v85, v87);
    swift_bridgeObjectRelease();
    sub_23DD360D4(v88);
    v95 = sub_23DD97638();
    sub_23DCF59A8(v88, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
    v156 = v95;
    v96 = sub_23DDC6068();
    v98 = v97;
    v100 = v99;
    v102 = v101 & 1;
    sub_23DD0B1D4(v89, v91, v93 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    v103 = swift_getKeyPath();
    v156 = v96;
    v157 = v98;
    v158 = v102;
    v159 = v100;
    v160 = v103;
    v161 = 2;
    v162 = 0;
    v155 = &unk_250E9BE08;
    sub_23DD95E24((uint64_t)&unk_250E9BEC8);
    sub_23DDC668C();
    swift_bridgeObjectRelease();
    sub_23DDC6188();
    swift_bridgeObjectRelease();
    v104 = v96;
    v105 = v154;
    sub_23DD0B1D4(v104, v98, v102);
    swift_bridgeObjectRelease();
    swift_release();
    v106 = v130;
    sub_23DD360D4(v130);
    v107 = sub_23DD6F1CC();
    if ((v108 & 1) != 0)
    {
      v110 = v131;
      sub_23DCF58EC(v105, v131, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
    }
    else
    {
      v109 = v107;
      v110 = v131;
      sub_23DCF58EC(v105, v131, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
      if (!v109)
        goto LABEL_11;
    }
    sub_23DD6F1CC();
LABEL_11:
    v111 = v138;
    v112 = v137;
    v81 = (uint64_t)v136;
    v79 = (uint64_t)v135;
    sub_23DCF59A8(v110, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
    sub_23DCF59A8(v106, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
    v113 = sub_23DCFB798(&qword_256CFDA70, (uint64_t (*)(uint64_t))sub_23DD37A18, (uint64_t (*)(void))sub_23DD37B6C, sub_23DD0A754);
    v114 = v132;
    v115 = v139;
    v116 = (uint64_t)v151;
    sub_23DDC60F8();
    sub_23DCF59A8(v116, (uint64_t (*)(_QWORD))sub_23DD37A18);
    v117 = v134;
    v118 = v133;
    (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v133, v114, v111);
    (*(void (**)(uint64_t, char *, uint64_t))(v117 + 16))(v112, v118, v111);
    swift_storeEnumTagMultiPayload();
    sub_23DCF535C(qword_256CFDB10, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView, (uint64_t)&unk_23DDC8E2C);
    v156 = v115;
    v157 = v113;
    swift_getOpaqueTypeConformance2();
    sub_23DDC5E58();
    (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v111);
    v80 = v142;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_23DD35060@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;

  v97 = a2;
  v92 = sub_23DDC5FFC();
  v90 = *(_QWORD *)(v92 - 8);
  MEMORY[0x24BDAC7A8](v92);
  v91 = (char *)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, (unint64_t *)&qword_256CFC4A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v86 - v5;
  v7 = sub_23DDC6038();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD37A18(0);
  v104 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v99 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD37AAC(0);
  v17 = *(_QWORD *)(v16 - 8);
  v102 = v16;
  v103 = v17;
  MEMORY[0x24BDAC7A8](v16);
  v96 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v95 = (char *)&v86 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v100 = (char *)&v86 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v101 = (char *)&v86 - v24;
  v93 = a1;
  v106 = sub_23DD70510();
  v107 = v25;
  v94 = sub_23DD0B190();
  v26 = sub_23DDC6098();
  v88 = v27;
  v89 = v28;
  LODWORD(v87) = v29 & 1;
  v98 = a1 + *(int *)(type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView(0) + 20);
  sub_23DD360D4((uint64_t)v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BDF1848], v7);
  v30 = *MEMORY[0x24BDF1668];
  v31 = sub_23DDC5FA8();
  v32 = *(_QWORD *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 104))(v6, v30, v31);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v6, 0, 1, v31);
  sub_23DDC5FE4();
  sub_23DD0B1E4((uint64_t)v6, (unint64_t *)&qword_256CFC4A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1678], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v33 = v90;
  v34 = v91;
  v35 = v92;
  (*(void (**)(char *, _QWORD, uint64_t))(v90 + 104))(v91, *MEMORY[0x24BDF17C8], v92);
  sub_23DDC6020();
  swift_release();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
  v36 = (uint64_t)v13;
  sub_23DCF59A8((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  v37 = v88;
  LOBYTE(v34) = (_BYTE)v87;
  v38 = sub_23DDC6074();
  v40 = v39;
  LOBYTE(v13) = v41 & 1;
  sub_23DD0B1D4(v26, v37, (char)v34);
  swift_release();
  swift_bridgeObjectRelease();
  v42 = v36;
  v86 = v36;
  sub_23DD360D4(v36);
  v43 = sub_23DDC6248();
  sub_23DCF59A8(v42, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  v106 = v43;
  v44 = sub_23DDC6068();
  v46 = v45;
  v48 = v47;
  LOBYTE(v37) = v49 & 1;
  sub_23DD0B1D4(v38, v40, (char)v13);
  swift_release();
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v106 = v44;
  v107 = v46;
  v108 = v37;
  v109 = v48;
  v110 = KeyPath;
  v111 = 1;
  v112 = 0;
  v105 = &unk_250E9BE08;
  sub_23DD95E24((uint64_t)&unk_250E9BF08);
  sub_23DD0AA4C(0, (unint64_t *)&qword_256CFC758, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  v92 = v51;
  v91 = (char *)sub_23DD0A770((unint64_t *)&qword_256CFC828, MEMORY[0x24BEE12B0]);
  sub_23DDC668C();
  swift_bridgeObjectRelease();
  sub_23DD37A3C();
  v90 = v52;
  v89 = sub_23DD37B6C();
  v53 = (uint64_t)v99;
  sub_23DDC6188();
  swift_bridgeObjectRelease();
  sub_23DD0B1D4(v44, v46, v37);
  swift_bridgeObjectRelease();
  swift_release();
  v88 = sub_23DCFB798(&qword_256CFDA70, (uint64_t (*)(uint64_t))sub_23DD37A18, (uint64_t (*)(void))sub_23DD37B6C, sub_23DD0A754);
  v54 = v100;
  sub_23DDC60F8();
  sub_23DCF59A8(v53, (uint64_t (*)(_QWORD))sub_23DD37A18);
  v87 = *(void (**)(char *, char *, uint64_t))(v103 + 32);
  v87(v101, v54, v102);
  v106 = sub_23DD6FFF0();
  v107 = v55;
  v56 = sub_23DDC6098();
  v58 = v57;
  LOBYTE(v46) = v59 & 1;
  v60 = v86;
  sub_23DD360D4(v86);
  sub_23DD977EC();
  sub_23DCF59A8(v60, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  v61 = sub_23DDC6074();
  v63 = v62;
  v94 = v64;
  LOBYTE(v53) = v65 & 1;
  sub_23DD0B1D4(v56, v58, v46);
  swift_release();
  swift_bridgeObjectRelease();
  sub_23DD360D4(v60);
  v66 = sub_23DDC6248();
  sub_23DCF59A8(v60, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  v106 = v66;
  v67 = sub_23DDC6068();
  v69 = v68;
  v71 = v70;
  LOBYTE(v60) = v72 & 1;
  sub_23DD0B1D4(v61, v63, v53);
  swift_release();
  swift_bridgeObjectRelease();
  v73 = swift_getKeyPath();
  v106 = v67;
  v107 = v69;
  v108 = v60;
  v109 = v71;
  v110 = v73;
  v111 = 2;
  v112 = 0;
  v105 = &unk_250E9BE08;
  sub_23DD95E24((uint64_t)&unk_250E9BF48);
  sub_23DDC668C();
  swift_bridgeObjectRelease();
  v74 = (uint64_t)v99;
  sub_23DDC6188();
  swift_bridgeObjectRelease();
  sub_23DD0B1D4(v67, v69, v60);
  swift_bridgeObjectRelease();
  swift_release();
  v75 = v95;
  sub_23DDC60F8();
  sub_23DCF59A8(v74, (uint64_t (*)(_QWORD))sub_23DD37A18);
  v76 = v100;
  v77 = v102;
  v87(v100, v75, v102);
  v78 = v103;
  v79 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
  v80 = v101;
  v79(v75, v101, v77);
  v81 = v96;
  v79(v96, v76, v77);
  v82 = v97;
  v79(v97, v75, v77);
  sub_23DD39984();
  v79(&v82[*(int *)(v83 + 48)], v81, v77);
  v84 = *(void (**)(char *, uint64_t))(v78 + 8);
  v84(v76, v77);
  v84(v80, v77);
  v84(v81, v77);
  return ((uint64_t (*)(char *, uint64_t))v84)(v75, v77);
}

uint64_t sub_23DD35978@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = sub_23DDC5DA4();
  *(_QWORD *)(a1 + 8) = 0x4014000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  sub_23DD37FB4(0, &qword_256CFDBA8, sub_23DD39968);
  return sub_23DD35060(v1, (char *)(a1 + *(int *)(v3 + 44)));
}

uint64_t sub_23DD359DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  os_log_type_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;

  v2 = v1;
  v4 = sub_23DDC5D74();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10];
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
  sub_23DCFB328(0, &qword_2543263D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDFAF10], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v20 - v11;
  sub_23DD36338(v2, (uint64_t)v20 - v11, &qword_2543263D8, v8, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = sub_23DDC6590();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, v12, v13);
  }
  else
  {
    v15 = sub_23DDC68E4();
    v16 = sub_23DDC5F18();
    v17 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      v20[1] = a1;
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v21 = v19;
      *(_DWORD *)v18 = 136315138;
      v20[2] = sub_23DD02158(0x6146746567646957, 0xEC000000796C696DLL, &v21);
      sub_23DDC698C();
      _os_log_impl(&dword_23DCF2000, v16, v17, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v19, -1, -1);
      MEMORY[0x242643C80](v18, -1, -1);
    }

    sub_23DDC5D68();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_23DD35C3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;

  v2 = v1;
  v4 = sub_23DDC5D74();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
  sub_23DCFB328(0, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v18 - v10;
  sub_23DD36338(v2, (uint64_t)v18 - v10, &qword_256CFC580, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
    return sub_23DCFBB58((uint64_t)v11, a1, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryRectangularSpecs);
  v13 = sub_23DDC68E4();
  v14 = sub_23DDC5F18();
  v15 = v13;
  if (os_log_type_enabled(v14, v13))
  {
    v18[1] = a1;
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v19 = v17;
    *(_DWORD *)v16 = 136315138;
    v18[2] = sub_23DD02158(0xD000000000000026, 0x800000023DDCD010, &v19);
    sub_23DDC698C();
    _os_log_impl(&dword_23DCF2000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v17, -1, -1);
    MEMORY[0x242643C80](v16, -1, -1);
  }

  sub_23DDC5D68();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_23DD35E8C@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  const void *v7;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16[36];
  _BYTE v17[288];
  _BYTE v18[296];

  v3 = sub_23DDC5D74();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD36810(v1, (uint64_t)v17);
  sub_23DD36810((uint64_t)v17, (uint64_t)v18);
  if (sub_23DD3686C((uint64_t)v18) == 1)
  {
    sub_23DD36810((uint64_t)v17, (uint64_t)v16);
    v7 = (const void *)nullsub_1(v16);
    memcpy(a1, v7, 0x118uLL);
    return sub_23DD144A8(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
  }
  else
  {
    sub_23DD144A8(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
    v9 = sub_23DDC68E4();
    v10 = sub_23DDC5F18();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v15[1] = a1;
      v14 = v13;
      v16[0] = v13;
      v15[0] = v3;
      *(_DWORD *)v12 = 136315138;
      v15[2] = sub_23DD02158(0xD000000000000019, 0x800000023DDCD040, v16);
      v3 = v15[0];
      sub_23DDC698C();
      _os_log_impl(&dword_23DCF2000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v14, -1, -1);
      MEMORY[0x242643C80](v12, -1, -1);
    }

    sub_23DD36810((uint64_t)v17, (uint64_t)v16);
    nullsub_1(v16);
    sub_23DDC5D68();
    swift_getAtKeyPath();
    sub_23DD144A8(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CCE4);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_23DD360D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;

  v2 = v1;
  v4 = sub_23DDC5D74();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
  sub_23DCFB328(0, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v18 - v10;
  sub_23DD36338(v2, (uint64_t)v18 - v10, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
    return sub_23DCFBB58((uint64_t)v11, a1, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetSystemSmallSpecs);
  v13 = sub_23DDC68E4();
  v14 = sub_23DDC5F18();
  v15 = v13;
  if (os_log_type_enabled(v14, v13))
  {
    v18[1] = a1;
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v19 = v17;
    *(_DWORD *)v16 = 136315138;
    v18[2] = sub_23DD02158(0xD00000000000001DLL, 0x800000023DDCCFF0, &v19);
    sub_23DDC698C();
    _os_log_impl(&dword_23DCF2000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v17, -1, -1);
    MEMORY[0x242643C80](v16, -1, -1);
  }

  sub_23DDC5D68();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_23DD3632C(uint64_t a1, uint64_t a2)
{
  return sub_23DCF58EC(a1, a2, (uint64_t (*)(_QWORD))sub_23DD338F0);
}

uint64_t sub_23DD36338(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;

  sub_23DCFB328(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_23DD36388@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;

  v2 = v1;
  v4 = sub_23DDC5D74();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
  sub_23DCFB328(0, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v18 - v10;
  sub_23DD36338(v2, (uint64_t)v18 - v10, &qword_256CFC588, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetAccessoryCircularSpecs, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
    return sub_23DCFBB58((uint64_t)v11, a1, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetAccessoryCircularSpecs);
  v13 = sub_23DDC68E4();
  v14 = sub_23DDC5F18();
  v15 = v13;
  if (os_log_type_enabled(v14, v13))
  {
    v18[1] = a1;
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v19 = v17;
    *(_DWORD *)v16 = 136315138;
    v18[2] = sub_23DD02158(0xD000000000000023, 0x800000023DDCD060, &v19);
    sub_23DDC698C();
    _os_log_impl(&dword_23DCF2000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v17, -1, -1);
    MEMORY[0x242643C80](v16, -1, -1);
  }

  sub_23DDC5D68();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_23DD365D8(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_23DDC5D74();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  swift_retain();
  v8 = sub_23DDC68E4();
  v9 = sub_23DDC5F18();
  v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v15 = v12;
    *(_DWORD *)v11 = 136315138;
    v14 = sub_23DD02158(1819242306, 0xE400000000000000, &v15);
    sub_23DDC698C();
    _os_log_impl(&dword_23DCF2000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v12, -1, -1);
    MEMORY[0x242643C80](v11, -1, -1);
  }

  sub_23DDC5D68();
  swift_getAtKeyPath();
  sub_23DD36804(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

uint64_t sub_23DD36794(uint64_t a1, uint64_t a2)
{
  return sub_23DCF58EC(a1, a2, type metadata accessor for OvernightMetricsChart);
}

uint64_t sub_23DD367A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DD0A9C8(0, &qword_256CFC668, (void (*)(uint64_t))sub_23DD07224, (unint64_t *)&qword_256CFC670, (uint64_t)&type metadata for OvernightMetricsChartSpec);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD36804(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_release();
  return result;
}

uint64_t sub_23DD36810(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DD0AA4C(0, (unint64_t *)&qword_256CFD990, (uint64_t)&type metadata for OvernightMetricsChartSpec, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDEB560]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD3686C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 280);
}

uint64_t sub_23DD36874(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  v6 = a1 + v5[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = sub_23DDC55A0();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  v9 = a1 + v5[7];
  v10 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = sub_23DDC512C();
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v9, v11);
    v13 = v9 + *(int *)(v10 + 20);
    v12(v13, v11);
    sub_23DCF9010();
    v12(v13 + *(int *)(v14 + 36), v11);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = a1 + v5[8];
  swift_bridgeObjectRelease();
  v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v17 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = a1 + v5[11];
  v19 = sub_23DDC512C();
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v18, v19);
  sub_23DD13DC0(0);
  v22 = v21;
  v20(v18 + *(int *)(v21 + 36), v19);
  v23 = a1 + v5[12];
  v20(v23, v19);
  v20(v23 + *(int *)(v22 + 36), v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = a1 + *(int *)(type metadata accessor for BalanceWidgetViewModel() + 20);
  v25 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = a1 + *(int *)(a2 + 20);
  sub_23DCFB328(0, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v27 = sub_23DDC5A98();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
  v29 = v26 + *(int *)(v28 + 20);
  v30 = sub_23DDC5C00();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  v31 = v26 + *(int *)(v28 + 24);
  v32 = sub_23DDC656C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
}

uint64_t sub_23DD36BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  int *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, _QWORD, uint64_t, int *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v9 = *v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = sub_23DDC55A0();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  swift_storeEnumTagMultiPayload();
  v14 = v7[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  v86 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = sub_23DDC512C();
    v21 = v18;
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v22(v15, v16, v20);
    v23 = v17[5];
    v84 = a2;
    v24 = a1;
    v25 = v7;
    v26 = &v15[v23];
    v27 = &v16[v23];
    v22(&v15[v23], &v16[v23], v20);
    sub_23DCF9010();
    v22(&v26[*(int *)(v28 + 36)], &v27[*(int *)(v28 + 36)], v20);
    v29 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v26[v29[5]] = *(_QWORD *)&v27[v29[5]];
    *(_QWORD *)&v26[v29[6]] = *(_QWORD *)&v27[v29[6]];
    *(_QWORD *)&v26[v29[7]] = *(_QWORD *)&v27[v29[7]];
    v30 = v17[6];
    v31 = &v15[v30];
    v32 = &v16[v30];
    *(_OWORD *)v31 = *(_OWORD *)v32;
    v31[16] = v32[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v33 = v17[10];
    v34 = &v15[v33];
    v35 = &v16[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = v17[11];
    v38 = &v15[v37];
    v39 = &v16[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v41 = *(void (**)(char *, _QWORD, uint64_t, int *))(v21 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = v25;
    a1 = v24;
    a2 = v84;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41(v15, 0, 1, v17);
  }
  v42 = v7[8];
  v43 = a1 + v42;
  v44 = a2 + v42;
  *(_QWORD *)(a1 + v42) = *(_QWORD *)(a2 + v42);
  v45 = type metadata accessor for OvernightMetricsChartPointCollection();
  v46 = *(int *)(v45 + 20);
  v47 = v43 + v46;
  v85 = v44 + v46;
  v48 = a1;
  v49 = v7;
  v50 = sub_23DDC51E0();
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
  swift_bridgeObjectRetain();
  v51(v47, v85, v50);
  *(_QWORD *)(v43 + *(int *)(v45 + 24)) = *(_QWORD *)(v44 + *(int *)(v45 + 24));
  *(_QWORD *)(v48 + v49[9]) = *(_QWORD *)(a2 + v49[9]);
  *(_QWORD *)(v48 + v49[10]) = *(_QWORD *)(a2 + v49[10]);
  v52 = v49[11];
  v53 = v48 + v52;
  v54 = a2 + v52;
  v55 = sub_23DDC512C();
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v56(v53, v54, v55);
  sub_23DD13DC0(0);
  v58 = v57;
  v56(v53 + *(int *)(v57 + 36), v54 + *(int *)(v57 + 36), v55);
  v59 = v49[12];
  v60 = v48 + v59;
  v61 = a2 + v59;
  v56(v48 + v59, a2 + v59, v55);
  v56(v60 + *(int *)(v58 + 36), v61 + *(int *)(v58 + 36), v55);
  *(_QWORD *)(v48 + v49[13]) = *(_QWORD *)(a2 + v49[13]);
  v62 = v49[14];
  v63 = v48;
  *(_QWORD *)(v48 + v62) = *(_QWORD *)(a2 + v62);
  v64 = type metadata accessor for BalanceWidgetViewModel();
  v65 = *(int *)(v64 + 20);
  v66 = v48 + v65;
  v67 = a2 + v65;
  v68 = sub_23DDC527C();
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69(v66, v67, v68);
  *(_BYTE *)(v63 + *(int *)(v64 + 24)) = *(_BYTE *)(a2 + *(int *)(v64 + 24));
  v70 = *(int *)(v86 + 20);
  v71 = (_QWORD *)(v63 + v70);
  v72 = (_QWORD *)(a2 + v70);
  sub_23DCFB328(0, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v73 = sub_23DDC5A98();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
    v74 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
    v75 = *(int *)(v74 + 20);
    v76 = (char *)v71 + v75;
    v77 = (char *)v72 + v75;
    v78 = sub_23DDC5C00();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v76, v77, v78);
    v79 = *(int *)(v74 + 24);
    v80 = (char *)v71 + v79;
    v81 = (char *)v72 + v79;
    v82 = sub_23DDC656C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v80, v81, v82);
  }
  else
  {
    *v71 = *v72;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return v63;
}

uint64_t sub_23DD37194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = sub_23DDC55A0();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  v15 = v7[7];
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v19 = *((_QWORD *)v18 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = sub_23DDC512C();
    v70 = v19;
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
    v22(v16, v17, v21);
    v23 = v18[5];
    v71 = a3;
    v24 = &v16[v23];
    v25 = &v17[v23];
    v22(&v16[v23], &v17[v23], v21);
    sub_23DCF9010();
    v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v21);
    v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v24[v27[5]] = *(_QWORD *)&v25[v27[5]];
    *(_QWORD *)&v24[v27[6]] = *(_QWORD *)&v25[v27[6]];
    *(_QWORD *)&v24[v27[7]] = *(_QWORD *)&v25[v27[7]];
    a3 = v71;
    v28 = v18[6];
    v29 = &v16[v28];
    v30 = &v17[v28];
    *(_OWORD *)v29 = *(_OWORD *)v30;
    v29[16] = v30[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
    *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v70 + 56))(v16, 0, 1, v18);
  }
  v31 = v7[8];
  v32 = a1 + v31;
  v33 = a2 + v31;
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  v34 = type metadata accessor for OvernightMetricsChartPointCollection();
  v35 = *(int *)(v34 + 20);
  v36 = v32 + v35;
  v37 = v33 + v35;
  v38 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  *(_QWORD *)(v32 + *(int *)(v34 + 24)) = *(_QWORD *)(v33 + *(int *)(v34 + 24));
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  v39 = v7[11];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_23DDC512C();
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32);
  v43(v40, v41, v42);
  sub_23DD13DC0(0);
  v45 = v44;
  v43(v40 + *(int *)(v44 + 36), v41 + *(int *)(v44 + 36), v42);
  v46 = v7[12];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v43(a1 + v46, a2 + v46, v42);
  v43(v47 + *(int *)(v45 + 36), v48 + *(int *)(v45 + 36), v42);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v49 = type metadata accessor for BalanceWidgetViewModel();
  v50 = *(int *)(v49 + 20);
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  *(_BYTE *)(a1 + *(int *)(v49 + 24)) = *(_BYTE *)(a2 + *(int *)(v49 + 24));
  v54 = *(int *)(a3 + 20);
  v55 = (char *)(a1 + v54);
  v56 = (char *)(a2 + v54);
  sub_23DCFB328(0, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
  v58 = v57;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v59 = sub_23DDC5A98();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v55, v56, v59);
    v60 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
    v61 = *(int *)(v60 + 20);
    v62 = &v55[v61];
    v63 = &v56[v61];
    v64 = sub_23DDC5C00();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v62, v63, v64);
    v65 = *(int *)(v60 + 24);
    v66 = &v55[v65];
    v67 = &v56[v65];
    v68 = sub_23DDC656C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v66, v67, v68);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  return a1;
}

uint64_t sub_23DD376A8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for BalanceWidgetViewModel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    sub_23DCFB328(0, qword_256CFD870, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x24BDEB580]);
    v8 = v11;
    v12 = *(_QWORD *)(v11 - 8);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_23DD37744()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DD37754()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for BalanceWidgetViewModel();
  if (v0 <= 0x3F)
  {
    sub_23DCFB328(319, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_23DD377F0()
{
  sub_23DD33930(255);
  sub_23DD33914(255);
  sub_23DD339A4();
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD37870()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23DD37880()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFDA28)
  {
    sub_23DDC5C00();
    sub_23DCF535C(&qword_256CFDA30, (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50], MEMORY[0x24BDECF70]);
    v0 = sub_23DDC6B18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFDA28);
  }
}

void sub_23DD378F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFDA38)
  {
    sub_23DD37970(255);
    sub_23DCF535C(&qword_256CFDA80, (uint64_t (*)(uint64_t))sub_23DD37970, MEMORY[0x24BDF5428]);
    v0 = sub_23DDC6320();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFDA38);
  }
}

void sub_23DD37970(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFDA40, (uint64_t (*)(uint64_t))sub_23DD3798C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_23DD3798C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFDA48)
  {
    sub_23DD37A18(255);
    sub_23DD3816C(255, &qword_256CFDA60, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView, (uint64_t (*)(uint64_t))sub_23DD37AAC, MEMORY[0x24BDEF3B8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFDA48);
  }
}

void sub_23DD37A18(uint64_t a1)
{
  sub_23DD3816C(a1, &qword_256CFDA50, (uint64_t (*)(uint64_t))sub_23DD37A3C, (uint64_t (*)(uint64_t))MEMORY[0x24BDF1088], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDED2D0]);
}

void sub_23DD37A3C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFDA58)
  {
    sub_23DD0A95C();
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFDA58);
  }
}

uint64_t type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFDB70);
}

void sub_23DD37AAC(uint64_t a1)
{
  sub_23DD37AD0(a1, &qword_256CFDA68, (uint64_t (*)(uint64_t))sub_23DD37A18, &qword_256CFDA70, (uint64_t (*)(void))sub_23DD37B6C);
}

void sub_23DD37AD0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(void))
{
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  if (!*a2)
  {
    v12[0] = a3(255);
    v12[1] = sub_23DCFB798(a4, a3, a5, sub_23DD0A754);
    v10 = MEMORY[0x242643B9C](a1, v12, MEMORY[0x24BDFAC10], 0);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t sub_23DD37B6C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_256CFDA78;
  if (!qword_256CFDA78)
  {
    sub_23DD37A3C();
    v2 = v1;
    v3 = sub_23DCF535C(&qword_256CFC818, (uint64_t (*)(uint64_t))sub_23DD0A95C, MEMORY[0x24BDF1028]);
    v4[0] = MEMORY[0x24BDF1F80];
    v4[1] = v3;
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v4);
    atomic_store(result, (unint64_t *)&qword_256CFDA78);
  }
  return result;
}

void sub_23DD37BEC(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFDA88, (void (*)(uint64_t))sub_23DD378F8);
}

void sub_23DD37C08(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFDA90, sub_23DD37BEC);
}

void sub_23DD37C24(uint64_t a1)
{
  sub_23DD0A9C8(a1, &qword_256CFDA98, sub_23DD37C08, &qword_256CFC7D8, MEMORY[0x24BEE1328]);
}

void sub_23DD37C48(uint64_t a1)
{
  sub_23DD0A9C8(a1, &qword_256CFDAA0, sub_23DD37C24, &qword_256CFDAA8, MEMORY[0x24BEE50B0]);
}

void sub_23DD37C6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_256CFDAB0)
  {
    sub_23DD37C48(255);
    v3 = v2;
    sub_23DD37880();
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_23DCFB798(&qword_256CFDAB8, (uint64_t (*)(uint64_t))sub_23DD37C48, sub_23DD37D48, (uint64_t (*)(void))sub_23DD37E54);
    v7[3] = sub_23DCF535C(&qword_256CFDAE8, (uint64_t (*)(uint64_t))sub_23DD37880, MEMORY[0x24BEE30C8]);
    v5 = MEMORY[0x242643B9C](a1, v7, MEMORY[0x24BDF2800], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256CFDAB0);
  }
}

uint64_t sub_23DD37D48()
{
  return sub_23DCFB798(&qword_256CFDAC0, (uint64_t (*)(uint64_t))sub_23DD37C24, (uint64_t (*)(void))sub_23DD37D6C, (uint64_t (*)(void))sub_23DD37DF4);
}

unint64_t sub_23DD37D6C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFDAC8;
  if (!qword_256CFDAC8)
  {
    sub_23DD37C08(255);
    v2 = v1;
    v3[0] = sub_23DD33AB4(&qword_256CFDAD0, (uint64_t (*)(uint64_t))sub_23DD37BEC, &qword_256CFDAD8, (uint64_t (*)(uint64_t))sub_23DD378F8);
    v3[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFDAC8);
  }
  return result;
}

unint64_t sub_23DD37DF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFC820;
  if (!qword_256CFC820)
  {
    sub_23DD0AA4C(255, &qword_256CFC7D8, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF1028], v1);
    atomic_store(result, (unint64_t *)&qword_256CFC820);
  }
  return result;
}

unint64_t sub_23DD37E54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFDAE0;
  if (!qword_256CFDAE0)
  {
    sub_23DD0AA4C(255, &qword_256CFDAA8, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BDF1008]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF1028], v1);
    atomic_store(result, (unint64_t *)&qword_256CFDAE0);
  }
  return result;
}

void sub_23DD37EB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_256CFDAF0)
  {
    sub_23DD37C6C(255);
    v3 = v2;
    sub_23DD37C48(255);
    sub_23DD37880();
    v6[2] = sub_23DCFB798(&qword_256CFDAB8, (uint64_t (*)(uint64_t))sub_23DD37C48, sub_23DD37D48, (uint64_t (*)(void))sub_23DD37E54);
    v6[3] = sub_23DCF535C(&qword_256CFDAE8, (uint64_t (*)(uint64_t))sub_23DD37880, MEMORY[0x24BEE30C8]);
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x242643B9C](a1, v6, MEMORY[0x24BDF29E0], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_256CFDAF0);
  }
}

void sub_23DD37FB4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DDC5B94();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_23DD38018@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_23DDC5D50();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_23DD38048()
{
  return sub_23DDC5D5C();
}

uint64_t sub_23DD38074@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23DDC5CB4();
  *a1 = result & 1;
  return result;
}

uint64_t sub_23DD380A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23DDC5CB4();
  *a1 = result & 1;
  return result;
}

uint64_t sub_23DD380CC()
{
  return sub_23DDC5CC0();
}

uint64_t sub_23DD380F0()
{
  return sub_23DDC5CC0();
}

uint64_t sub_23DD38114@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23DDC5CCC();
  *a1 = v3;
  return result;
}

uint64_t sub_23DD3813C()
{
  return sub_23DDC5CD8();
}

uint64_t sub_23DD38160(uint64_t a1, uint64_t a2)
{
  return sub_23DCF58EC(a1, a2, (uint64_t (*)(_QWORD))sub_23DD37BEC);
}

void sub_23DD3816C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4(255);
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t sub_23DD381E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_23DDC5D50();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_23DD38210()
{
  return sub_23DDC5D5C();
}

uint64_t sub_23DD3823C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DD3816C(0, &qword_256CFDA60, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView, (uint64_t (*)(uint64_t))sub_23DD37AAC, MEMORY[0x24BDEF3B8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD382A0(uint64_t a1)
{
  uint64_t v2;

  sub_23DD3816C(0, &qword_256CFDA60, type metadata accessor for BalanceWidgetSystemSmallWarmupDetailsView, (uint64_t (*)(uint64_t))sub_23DD37AAC, MEMORY[0x24BDEF3B8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DD382FC(uint64_t a1, uint64_t a2)
{
  return sub_23DCF58EC(a1, a2, (uint64_t (*)(_QWORD))sub_23DD0A86C);
}

_QWORD *sub_23DD38308(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  int *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, int *);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  _QWORD *v86;
  char *v87;
  uint64_t v88;

  v3 = a2;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC5330();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v3, v7);
    v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(_QWORD *)((char *)a1 + v8[5]) = *(_QWORD *)((char *)v3 + v8[5]);
    v9 = v8[6];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)v3 + v9);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v10 = *v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = sub_23DDC55A0();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v15 + 16))(v10, v11, v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
    v17 = v8[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)v3 + v17;
    v20 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v21 = *((_QWORD *)v20 - 1);
    v88 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = sub_23DDC512C();
      v24 = v21;
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      v25(v18, v19, v23);
      v26 = v20[5];
      v86 = v3;
      v27 = a1;
      v28 = v8;
      v29 = &v18[v26];
      v30 = &v19[v26];
      v25(&v18[v26], &v19[v26], v23);
      sub_23DCF9010();
      v25(&v29[*(int *)(v31 + 36)], &v30[*(int *)(v31 + 36)], v23);
      v32 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v29[v32[5]] = *(_QWORD *)&v30[v32[5]];
      *(_QWORD *)&v29[v32[6]] = *(_QWORD *)&v30[v32[6]];
      *(_QWORD *)&v29[v32[7]] = *(_QWORD *)&v30[v32[7]];
      v33 = v20[6];
      v34 = &v18[v33];
      v35 = &v19[v33];
      *(_OWORD *)v34 = *(_OWORD *)v35;
      v34[16] = v35[16];
      v18[v20[7]] = v19[v20[7]];
      v18[v20[8]] = v19[v20[8]];
      v18[v20[9]] = v19[v20[9]];
      v36 = v20[10];
      v37 = &v18[v36];
      v38 = &v19[v36];
      v39 = *((_QWORD *)v38 + 1);
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = v39;
      v40 = v20[11];
      v41 = &v18[v40];
      v42 = &v19[v40];
      v43 = *((_QWORD *)v42 + 1);
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = v43;
      v44 = *(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8 = v28;
      a1 = v27;
      v3 = v86;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44(v18, 0, 1, v20);
    }
    v45 = v8[8];
    v46 = (char *)a1 + v45;
    v47 = (char *)v3 + v45;
    *(_QWORD *)((char *)a1 + v45) = *(_QWORD *)((char *)v3 + v45);
    v48 = type metadata accessor for OvernightMetricsChartPointCollection();
    v49 = *(int *)(v48 + 20);
    v50 = &v46[v49];
    v87 = &v47[v49];
    v51 = (char *)a1;
    v52 = v8;
    v53 = sub_23DDC51E0();
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
    swift_bridgeObjectRetain();
    v54(v50, v87, v53);
    *(_QWORD *)&v46[*(int *)(v48 + 24)] = *(_QWORD *)&v47[*(int *)(v48 + 24)];
    *(_QWORD *)&v51[v52[9]] = *(_QWORD *)((char *)v3 + v52[9]);
    *(_QWORD *)&v51[v52[10]] = *(_QWORD *)((char *)v3 + v52[10]);
    v55 = v52[11];
    v56 = &v51[v55];
    v57 = (char *)v3 + v55;
    v58 = sub_23DDC512C();
    v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59(v56, v57, v58);
    sub_23DD13DC0(0);
    v61 = v60;
    v59(&v56[*(int *)(v60 + 36)], &v57[*(int *)(v60 + 36)], v58);
    v62 = v52[12];
    v63 = &v51[v62];
    v64 = (char *)v3 + v62;
    v59(&v51[v62], (char *)v3 + v62, v58);
    v59(&v63[*(int *)(v61 + 36)], &v64[*(int *)(v61 + 36)], v58);
    *(_QWORD *)&v51[v52[13]] = *(_QWORD *)((char *)v3 + v52[13]);
    v65 = v52[14];
    v13 = v51;
    *(_QWORD *)&v51[v65] = *(_QWORD *)((char *)v3 + v65);
    v66 = type metadata accessor for BalanceWidgetViewModel();
    v67 = *(int *)(v66 + 20);
    v68 = &v51[v67];
    v69 = (char *)v3 + v67;
    v70 = sub_23DDC527C();
    v71 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v71(v68, v69, v70);
    *((_BYTE *)v13 + *(int *)(v66 + 24)) = *((_BYTE *)v3 + *(int *)(v66 + 24));
    v72 = *(int *)(v88 + 20);
    v73 = (_QWORD *)((char *)v13 + v72);
    v74 = (_QWORD *)((char *)v3 + v72);
    sub_23DCFB328(0, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v75 = sub_23DDC5A98();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
      v76 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
      v77 = *(int *)(v76 + 20);
      v78 = (char *)v73 + v77;
      v79 = (char *)v74 + v77;
      v80 = sub_23DDC5C00();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v78, v79, v80);
      v81 = *(int *)(v76 + 24);
      v82 = (char *)v73 + v81;
      v83 = (char *)v74 + v81;
      v84 = sub_23DDC656C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v82, v83, v84);
    }
    else
    {
      *v73 = *v74;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v13;
}

uint64_t sub_23DD388E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, int *);
  int v20;
  int v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, _QWORD, uint64_t, int *);
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v8 = v7[6];
    v9 = (_QWORD *)(a1 + v8);
    v10 = (_QWORD *)(a2 + v8);
    sub_23DCF59A8(a1 + v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v9 = *v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      v11 = sub_23DDC55A0();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  v14 = v7[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (v21)
    {
      v22 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_13:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v22);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      goto LABEL_16;
    }
    v24 = sub_23DDC512C();
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v25(v15, v16, v24);
    v98 = v18;
    v99 = a3;
    v26 = v25;
    v27 = v17[5];
    v28 = &v15[v27];
    v29 = &v16[v27];
    v26(&v15[v27], &v16[v27], v24);
    sub_23DCF9010();
    v26(&v28[*(int *)(v30 + 36)], &v29[*(int *)(v30 + 36)], v24);
    v31 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v28[v31[5]] = *(_QWORD *)&v29[v31[5]];
    *(_QWORD *)&v28[v31[6]] = *(_QWORD *)&v29[v31[6]];
    *(_QWORD *)&v28[v31[7]] = *(_QWORD *)&v29[v31[7]];
    v32 = v17[6];
    v33 = &v15[v32];
    v34 = &v16[v32];
    v35 = v34[16];
    *(_OWORD *)v33 = *(_OWORD *)v34;
    v33[16] = v35;
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v36 = v17[10];
    v37 = &v15[v36];
    v38 = &v16[v36];
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
    v39 = v17[11];
    v40 = &v15[v39];
    v41 = &v16[v39];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
    v42 = *(void (**)(char *, _QWORD, uint64_t, int *))(v98 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3 = v99;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42(v15, 0, 1, v17);
  }
  else
  {
    if (v21)
    {
      sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v22 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_13;
    }
    v43 = sub_23DDC512C();
    v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 24);
    v44(v15, v16, v43);
    v45 = v17[5];
    v100 = a3;
    v46 = &v15[v45];
    v47 = &v16[v45];
    v44(&v15[v45], &v16[v45], v43);
    sub_23DCF9010();
    v44(&v46[*(int *)(v48 + 36)], &v47[*(int *)(v48 + 36)], v43);
    v49 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v46[v49[5]] = *(_QWORD *)&v47[v49[5]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v46[v49[6]] = *(_QWORD *)&v47[v49[6]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v46[v49[7]] = *(_QWORD *)&v47[v49[7]];
    a3 = v100;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v50 = v17[6];
    v51 = &v15[v50];
    v52 = &v16[v50];
    v53 = *(_OWORD *)v52;
    v51[16] = v52[16];
    *(_OWORD *)v51 = v53;
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v54 = v17[10];
    v55 = &v15[v54];
    v56 = &v16[v54];
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *((_QWORD *)v55 + 1) = *((_QWORD *)v56 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v57 = v17[11];
    v58 = &v15[v57];
    v59 = &v16[v57];
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *((_QWORD *)v58 + 1) = *((_QWORD *)v59 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_16:
  v60 = v7[8];
  v61 = a1 + v60;
  v62 = a2 + v60;
  *(_QWORD *)(a1 + v60) = *(_QWORD *)(a2 + v60);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63 = type metadata accessor for OvernightMetricsChartPointCollection();
  v64 = *(int *)(v63 + 20);
  v65 = v61 + v64;
  v66 = v62 + v64;
  v67 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 24))(v65, v66, v67);
  *(_QWORD *)(v61 + *(int *)(v63 + 24)) = *(_QWORD *)(v62 + *(int *)(v63 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v68 = v7[11];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = sub_23DDC512C();
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 24);
  v72(v69, v70, v71);
  sub_23DD13DC0(0);
  v74 = v73;
  v72(v69 + *(int *)(v73 + 36), v70 + *(int *)(v73 + 36), v71);
  v75 = v7[12];
  v76 = a1 + v75;
  v77 = a2 + v75;
  v72(a1 + v75, a2 + v75, v71);
  v72(v76 + *(int *)(v74 + 36), v77 + *(int *)(v74 + 36), v71);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v78 = type metadata accessor for BalanceWidgetViewModel();
  v79 = *(int *)(v78 + 20);
  v80 = a1 + v79;
  v81 = a2 + v79;
  v82 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 24))(v80, v81, v82);
  *(_BYTE *)(a1 + *(int *)(v78 + 24)) = *(_BYTE *)(a2 + *(int *)(v78 + 24));
  if (a1 != a2)
  {
    v83 = *(int *)(a3 + 20);
    v84 = (_QWORD *)(a1 + v83);
    v85 = (_QWORD *)(a2 + v83);
    v86 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_23DD0B1E4(a1 + v83, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_23DCFB328(0, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, v86);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v87 = sub_23DDC5A98();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v84, v85, v87);
      v88 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
      v89 = *(int *)(v88 + 20);
      v90 = (char *)v84 + v89;
      v91 = (char *)v85 + v89;
      v92 = sub_23DDC5C00();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
      v93 = *(int *)(v88 + 24);
      v94 = (char *)v84 + v93;
      v95 = (char *)v85 + v93;
      v96 = sub_23DDC656C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v94, v95, v96);
    }
    else
    {
      *v84 = *v85;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23DD3909C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, int *);
  int v21;
  int v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v8 = v7[6];
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    sub_23DCF59A8(a1 + v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v12 = sub_23DDC55A0();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  v15 = v7[7];
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v19 = *((_QWORD *)v18 - 1);
  v20 = *(uint64_t (**)(char *, uint64_t, int *))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (v22)
    {
      v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_13:
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v23);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      goto LABEL_16;
    }
    v25 = sub_23DDC512C();
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
    v26(v16, v17, v25);
    v100 = v19;
    v101 = a3;
    v27 = v26;
    v28 = v18[5];
    v29 = &v16[v28];
    v30 = &v17[v28];
    v27(&v16[v28], &v17[v28], v25);
    sub_23DCF9010();
    v27(&v29[*(int *)(v31 + 36)], &v30[*(int *)(v31 + 36)], v25);
    v32 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v29[v32[5]] = *(_QWORD *)&v30[v32[5]];
    *(_QWORD *)&v29[v32[6]] = *(_QWORD *)&v30[v32[6]];
    v33 = v32[7];
    v34 = *(_QWORD *)&v30[v33];
    a3 = v101;
    *(_QWORD *)&v29[v33] = v34;
    v35 = v18[6];
    v36 = &v16[v35];
    v37 = &v17[v35];
    *(_OWORD *)v36 = *(_OWORD *)v37;
    v36[16] = v37[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
    *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v100 + 56))(v16, 0, 1, v18);
  }
  else
  {
    if (v22)
    {
      sub_23DCF59A8((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_13;
    }
    v38 = sub_23DDC512C();
    v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40);
    v39(v16, v17, v38);
    v40 = v18[5];
    v41 = &v16[v40];
    v102 = a3;
    v42 = &v17[v40];
    v39(&v16[v40], &v17[v40], v38);
    sub_23DCF9010();
    v39(&v41[*(int *)(v43 + 36)], &v42[*(int *)(v43 + 36)], v38);
    v44 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v41[v44[5]] = *(_QWORD *)&v42[v44[5]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v41[v44[6]] = *(_QWORD *)&v42[v44[6]];
    swift_bridgeObjectRelease();
    v45 = v44[7];
    v46 = *(_QWORD *)&v42[v45];
    a3 = v102;
    *(_QWORD *)&v41[v45] = v46;
    swift_bridgeObjectRelease();
    v47 = v18[6];
    v48 = &v16[v47];
    v49 = &v17[v47];
    *(_OWORD *)v48 = *(_OWORD *)v49;
    v48[16] = v49[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    v50 = v18[10];
    v51 = &v16[v50];
    v52 = &v17[v50];
    v54 = *(_QWORD *)v52;
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = v54;
    *((_QWORD *)v51 + 1) = v53;
    swift_bridgeObjectRelease();
    v55 = v18[11];
    v56 = &v16[v55];
    v57 = &v17[v55];
    v59 = *(_QWORD *)v57;
    v58 = *((_QWORD *)v57 + 1);
    *(_QWORD *)v56 = v59;
    *((_QWORD *)v56 + 1) = v58;
    swift_bridgeObjectRelease();
  }
LABEL_16:
  v60 = v7[8];
  v61 = a1 + v60;
  v62 = a2 + v60;
  *(_QWORD *)(a1 + v60) = *(_QWORD *)(a2 + v60);
  swift_bridgeObjectRelease();
  v63 = type metadata accessor for OvernightMetricsChartPointCollection();
  v64 = *(int *)(v63 + 20);
  v65 = v61 + v64;
  v66 = v62 + v64;
  v67 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 40))(v65, v66, v67);
  *(_QWORD *)(v61 + *(int *)(v63 + 24)) = *(_QWORD *)(v62 + *(int *)(v63 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  swift_bridgeObjectRelease();
  v68 = v7[11];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = sub_23DDC512C();
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 40);
  v72(v69, v70, v71);
  sub_23DD13DC0(0);
  v74 = v73;
  v72(v69 + *(int *)(v73 + 36), v70 + *(int *)(v73 + 36), v71);
  v75 = v7[12];
  v76 = a1 + v75;
  v77 = a2 + v75;
  v72(a1 + v75, a2 + v75, v71);
  v72(v76 + *(int *)(v74 + 36), v77 + *(int *)(v74 + 36), v71);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  swift_bridgeObjectRelease();
  v78 = type metadata accessor for BalanceWidgetViewModel();
  v79 = *(int *)(v78 + 20);
  v80 = a1 + v79;
  v81 = a2 + v79;
  v82 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 40))(v80, v81, v82);
  *(_BYTE *)(a1 + *(int *)(v78 + 24)) = *(_BYTE *)(a2 + *(int *)(v78 + 24));
  if (a1 != a2)
  {
    v83 = *(int *)(a3 + 20);
    v84 = (char *)(a1 + v83);
    v85 = (char *)(a2 + v83);
    v86 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560];
    sub_23DD0B1E4(a1 + v83, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
    sub_23DCFB328(0, &qword_256CFC578, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, v86);
    v88 = v87;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v89 = sub_23DDC5A98();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v84, v85, v89);
      v90 = type metadata accessor for BalanceWidgetSystemSmallSpecs();
      v91 = *(int *)(v90 + 20);
      v92 = &v84[v91];
      v93 = &v85[v91];
      v94 = sub_23DDC5C00();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 32))(v92, v93, v94);
      v95 = *(int *)(v90 + 24);
      v96 = &v84[v95];
      v97 = &v85[v95];
      v98 = sub_23DDC656C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 32))(v96, v97, v98);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_23DD3979C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD397AC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = type metadata accessor for BalanceWidgetViewModel();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_23DCFB328(0, qword_256CFD870, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetSystemSmallSpecs, MEMORY[0x24BDEB580]);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_23DD39850()
{
  sub_23DD37C6C(255);
  sub_23DD37C48(255);
  sub_23DD37880();
  sub_23DCFB798(&qword_256CFDAB8, (uint64_t (*)(uint64_t))sub_23DD37C48, sub_23DD37D48, (uint64_t (*)(void))sub_23DD37E54);
  sub_23DCF535C(&qword_256CFDAE8, (uint64_t (*)(uint64_t))sub_23DD37880, MEMORY[0x24BEE30C8]);
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD39924()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD39934(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

void sub_23DD39968(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFDBB0, (uint64_t (*)(uint64_t))sub_23DD39984, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDF53F0]);
}

void sub_23DD39984()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFDBB8)
  {
    sub_23DD37AAC(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFDBB8);
  }
}

uint64_t sub_23DD399E4()
{
  return sub_23DCF535C(&qword_256CFDBC0, (uint64_t (*)(uint64_t))sub_23DD39A10, MEMORY[0x24BDF4498]);
}

void sub_23DD39A10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFDBC8)
  {
    sub_23DD39968(255);
    sub_23DCF535C(&qword_256CFDBD0, (uint64_t (*)(uint64_t))sub_23DD39968, MEMORY[0x24BDF5428]);
    v0 = sub_23DDC6308();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFDBC8);
  }
}

uint64_t *sub_23DD39A88(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC512C();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_23DCF9010();
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    v10 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23DD39B60(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = sub_23DDC512C();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(a1, v2);
  sub_23DCF9010();
  v3(a1 + *(int *)(v4 + 36), v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DD39BE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_23DCF9010();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23DD39C8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_23DCF9010();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23DD39D58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_23DCF9010();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_23DD39DF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_23DCF9010();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23DD39EA4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD39EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_23DCF9010();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_23DD39F2C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DD39F38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_23DCF9010();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
}

uint64_t type metadata accessor for IndividualOvernightMetricChartPointCollection()
{
  uint64_t result;

  result = qword_254326A50;
  if (!qword_254326A50)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DD39FEC()
{
  unint64_t v0;

  sub_23DCF9010();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_23DD3A068(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23DD3A0A4 + 4 * byte_23DDC8E80[a1]))(0xD000000000000017, 0x800000023DDCD0B0);
}

uint64_t sub_23DD3A0A4()
{
  return 0x73746E696F70;
}

uint64_t sub_23DD3A0B8()
{
  uint64_t v0;

  return v0 + 2;
}

unint64_t sub_23DD3A0D0()
{
  return 0xD000000000000016;
}

uint64_t sub_23DD3A0EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  sub_23DD3AC80(0, &qword_256CFDBE0, MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DD3AAB4();
  sub_23DDC6C98();
  LOBYTE(v13) = 0;
  sub_23DCF9010();
  sub_23DD3ACDC(&qword_256CFDBF0, &qword_256CFDBF8, MEMORY[0x24BDCE920], MEMORY[0x24BEE1B98]);
  sub_23DDC6BCC();
  if (!v2)
  {
    v10 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    v13 = *(_QWORD *)(v3 + v10[5]);
    HIBYTE(v12) = 1;
    sub_23DD1CEC4(0);
    sub_23DD3ADA0(&qword_256CFD2F0, &qword_256CFD2F8, (uint64_t)&unk_23DDCB618, MEMORY[0x24BEE12A0]);
    sub_23DDC6BCC();
    v13 = *(_QWORD *)(v3 + v10[6]);
    HIBYTE(v12) = 2;
    sub_23DD3AAF8();
    sub_23DD3AE20(&qword_256CFDC08, MEMORY[0x24BEE13D8], MEMORY[0x24BEE12A0]);
    sub_23DDC6BCC();
    v13 = *(_QWORD *)(v3 + v10[7]);
    HIBYTE(v12) = 3;
    sub_23DD3AB4C();
    sub_23DD3ABE0();
    sub_23DDC6BCC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_23DD3A340@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v19 = a2;
  sub_23DCF9010();
  MEMORY[0x24BDAC7A8](v3);
  v20 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD3AC80(0, &qword_256CFDC28, MEMORY[0x24BEE33E0]);
  v22 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - v7;
  v9 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DD3AAB4();
  v21 = v8;
  v12 = v23;
  sub_23DDC6C8C();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v13 = v6;
  v14 = (uint64_t)v11;
  LOBYTE(v25) = 0;
  sub_23DD3ACDC(&qword_256CFDC30, &qword_256CFDC38, MEMORY[0x24BDCE960], MEMORY[0x24BEE1BC8]);
  v16 = (uint64_t)v20;
  v15 = v21;
  v17 = v22;
  sub_23DDC6B78();
  sub_23DD3AD5C(v16, v14);
  sub_23DD1CEC4(0);
  v24 = 1;
  sub_23DD3ADA0(&qword_256CFD308, &qword_256CFD310, (uint64_t)&unk_23DDCB5F0, MEMORY[0x24BEE12D0]);
  sub_23DDC6B78();
  *(_QWORD *)(v14 + v9[5]) = v25;
  sub_23DD3AAF8();
  v24 = 2;
  sub_23DD3AE20(&qword_256CFDC40, MEMORY[0x24BEE1400], MEMORY[0x24BEE12D0]);
  sub_23DDC6B78();
  *(_QWORD *)(v14 + v9[6]) = v25;
  sub_23DD3AB4C();
  v24 = 3;
  sub_23DD3AE7C();
  sub_23DDC6B78();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v17);
  *(_QWORD *)(v14 + v9[7]) = v25;
  sub_23DCF58EC(v14, v19, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricChartPointCollection);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return sub_23DCF59A8(v14, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricChartPointCollection);
}

uint64_t sub_23DD3A6F4()
{
  unsigned __int8 *v0;

  return sub_23DD3A068(*v0);
}

uint64_t sub_23DD3A6FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DD3B308(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DD3A720(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_23DD3A72C()
{
  sub_23DD3AAB4();
  return sub_23DDC6CEC();
}

uint64_t sub_23DD3A754()
{
  sub_23DD3AAB4();
  return sub_23DDC6CF8();
}

uint64_t sub_23DD3A77C(int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7[4];

  v3 = v1;
  sub_23DDC6C50();
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DDC6674();
  sub_23DCF9010();
  sub_23DDC6674();
  v4 = *(_QWORD *)(v1 + a1[5]);
  swift_bridgeObjectRetain();
  sub_23DD5E424((uint64_t)v7, v4);
  swift_bridgeObjectRelease();
  sub_23DD5E6FC((uint64_t)v7, *(_QWORD *)(v3 + a1[6]));
  v5 = *(_QWORD *)(v3 + a1[7]);
  swift_bridgeObjectRetain();
  sub_23DD5DDD0(v7, v5);
  swift_bridgeObjectRelease();
  return sub_23DDC6C80();
}

uint64_t sub_23DD3A87C(__int128 *a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = v2;
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DDC6674();
  sub_23DCF9010();
  sub_23DDC6674();
  v6 = *(_QWORD *)(v2 + a2[5]);
  swift_bridgeObjectRetain();
  sub_23DD5E424((uint64_t)a1, v6);
  swift_bridgeObjectRelease();
  sub_23DD5E6FC((uint64_t)a1, *(_QWORD *)(v4 + a2[6]));
  v7 = *(_QWORD *)(v4 + a2[7]);
  swift_bridgeObjectRetain();
  sub_23DD5DDD0(a1, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DD3A960(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8[4];

  v4 = v2;
  sub_23DDC6C50();
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DDC6674();
  sub_23DCF9010();
  sub_23DDC6674();
  v5 = *(_QWORD *)(v2 + a2[5]);
  swift_bridgeObjectRetain();
  sub_23DD5E424((uint64_t)v8, v5);
  swift_bridgeObjectRelease();
  sub_23DD5E6FC((uint64_t)v8, *(_QWORD *)(v4 + a2[6]));
  v6 = *(_QWORD *)(v4 + a2[7]);
  swift_bridgeObjectRetain();
  sub_23DD5DDD0(v8, v6);
  swift_bridgeObjectRelease();
  return sub_23DDC6C80();
}

uint64_t sub_23DD3AA5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DD3A340(a1, a2);
}

uint64_t sub_23DD3AA70(_QWORD *a1)
{
  return sub_23DD3A0EC(a1);
}

uint64_t sub_23DD3AA88()
{
  return sub_23DCF535C(&qword_256CFDBD8, (uint64_t (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPointCollection, (uint64_t)&unk_23DDC8EC0);
}

unint64_t sub_23DD3AAB4()
{
  unint64_t result;

  result = qword_256CFDBE8;
  if (!qword_256CFDBE8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC903C, &type metadata for IndividualOvernightMetricChartPointCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDBE8);
  }
  return result;
}

void sub_23DD3AAF8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFDC00)
  {
    v0 = sub_23DDC67E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFDC00);
  }
}

void sub_23DD3AB4C()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_256CFDC10)
  {
    sub_23DDC54C8();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0];
    sub_23DD1CEC4(255);
    sub_23DCF535C(&qword_2543266C0, v0, MEMORY[0x24BE401D8]);
    v1 = sub_23DDC665C();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_256CFDC10);
  }
}

unint64_t sub_23DD3ABE0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFDC18;
  if (!qword_256CFDC18)
  {
    sub_23DD3AB4C();
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFDC20, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], MEMORY[0x24BE401D0]);
    v3[1] = sub_23DD3ADA0(&qword_256CFD2F0, &qword_256CFD2F8, (uint64_t)&unk_23DDCB618, MEMORY[0x24BEE12A0]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE04C0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFDC18);
  }
  return result;
}

void sub_23DD3AC80(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DD3AAB4();
    v7 = a3(a1, &type metadata for IndividualOvernightMetricChartPointCollection.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DD3ACDC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_23DCF9010();
    v10 = v9;
    v11 = sub_23DCF535C(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], a3);
    result = MEMORY[0x242643BD8](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DD3AD5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DCF9010();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD3ADA0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_23DD1CEC4(255);
    v10 = v9;
    v11 = sub_23DCF535C(a2, type metadata accessor for IndividualOvernightMetricChartPoint, a3);
    result = MEMORY[0x242643BD8](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DD3AE20(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_23DD3AAF8();
    v8 = a2;
    result = MEMORY[0x242643BD8](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DD3AE7C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFDC48;
  if (!qword_256CFDC48)
  {
    sub_23DD3AB4C();
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFDC50, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], MEMORY[0x24BE401E8]);
    v3[1] = sub_23DD3ADA0(&qword_256CFD308, &qword_256CFD310, (uint64_t)&unk_23DDCB5F0, MEMORY[0x24BEE12D0]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE04E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFDC48);
  }
  return result;
}

uint64_t sub_23DD3AF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  int *v12;
  char v13;
  uint64_t v15;

  sub_23DCF9010();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - v8;
  sub_23DDC512C();
  sub_23DCF535C(&qword_256CFCC60, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  v10 = sub_23DDC66C8();
  sub_23DCF58EC(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DCF58EC(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DCF9010);
  if ((v10 & 1) == 0)
  {
    sub_23DCF59A8((uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DCF9010);
    sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DCF9010);
LABEL_7:
    v13 = 0;
    return v13 & 1;
  }
  v11 = sub_23DDC66C8();
  sub_23DCF59A8((uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DCF9010);
  sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DCF9010);
  if ((v11 & 1) == 0)
    goto LABEL_7;
  v12 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  if ((sub_23DD40A48(*(_QWORD *)(a1 + v12[5]), *(_QWORD *)(a2 + v12[5])) & 1) == 0
    || !sub_23DD41204(*(_QWORD *)(a1 + v12[6]), *(_QWORD *)(a2 + v12[6])))
  {
    goto LABEL_7;
  }
  sub_23DD6D7F8(*(_QWORD *)(a1 + v12[7]), *(_QWORD *)(a2 + v12[7]));
  return v13 & 1;
}

uint64_t getEnumTagSinglePayload for IndividualOvernightMetricChartPointCollection.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IndividualOvernightMetricChartPointCollection.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23DD3B1B0 + 4 * byte_23DDC8E89[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23DD3B1E4 + 4 * byte_23DDC8E84[v4]))();
}

uint64_t sub_23DD3B1E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD3B1EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DD3B1F4);
  return result;
}

uint64_t sub_23DD3B200(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DD3B208);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23DD3B20C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD3B214(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IndividualOvernightMetricChartPointCollection.CodingKeys()
{
  return &type metadata for IndividualOvernightMetricChartPointCollection.CodingKeys;
}

unint64_t sub_23DD3B234()
{
  unint64_t result;

  result = qword_256CFDC58;
  if (!qword_256CFDC58)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9014, &type metadata for IndividualOvernightMetricChartPointCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDC58);
  }
  return result;
}

unint64_t sub_23DD3B27C()
{
  unint64_t result;

  result = qword_256CFDC60;
  if (!qword_256CFDC60)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC8F84, &type metadata for IndividualOvernightMetricChartPointCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDC60);
  }
  return result;
}

unint64_t sub_23DD3B2C4()
{
  unint64_t result;

  result = qword_256CFDC68;
  if (!qword_256CFDC68)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC8FAC, &type metadata for IndividualOvernightMetricChartPointCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDC68);
  }
  return result;
}

uint64_t sub_23DD3B308(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000017 && a2 == 0x800000023DDCD0B0 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73746E696F70 && a2 == 0xE600000000000000 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023DDCD0D0 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023DDCD0F0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_23DDC6C08();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void sub_23DD3B4A4(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  sub_23DD3B4C8(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BE40238], (void (*)(BOOL, uint64_t, uint64_t))sub_23DD92AFC);
}

void sub_23DD3B4C8(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(BOOL, uint64_t, uint64_t);
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v22 = a5;
  v29 = a4(0);
  v9 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v28 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22 - v13;
  v30 = MEMORY[0x24BEE4AF8];
  v27 = *(_QWORD *)(a3 + 16);
  if (v27)
  {
    v15 = 0;
    v24 = a2;
    v25 = a3;
    v23 = a1;
    while (v15 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v17 = *(_QWORD *)(v9 + 72);
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16))(v14, a3 + v16 + v17 * v15, v29, v12);
      v18 = a1(v14);
      if (v5)
      {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v29);
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      if ((v18 & 1) != 0)
      {
        v26 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v26(v28, v14, v29);
        v19 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v22(0, *(_QWORD *)(v19 + 16) + 1, 1);
          v19 = v30;
        }
        v21 = *(_QWORD *)(v19 + 16);
        v20 = *(_QWORD *)(v19 + 24);
        if (v21 >= v20 >> 1)
        {
          v22(v20 > 1, v21 + 1, 1);
          v19 = v30;
        }
        *(_QWORD *)(v19 + 16) = v21 + 1;
        v26((char *)(v19 + v16 + v21 * v17), v28, v29);
        v30 = v19;
        a3 = v25;
        a1 = v23;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v29);
      }
      if (v27 == ++v15)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_23DD3B6E4(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  sub_23DD221EC(0, &qword_256CFDD90, (uint64_t (*)(void))sub_23DD4C32C, (uint64_t)&type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FixedCodingKeys, MEMORY[0x24BEE3520]);
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)&v24 - v4;
  sub_23DD221EC(0, &qword_256CFDDA0, (uint64_t (*)(void))sub_23DD4C370, (uint64_t)&type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FeatureStatusCodingKeys, v2);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v24 - v6;
  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - v9;
  v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t *)((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23DD221EC(0, &qword_256CFDDB0, (uint64_t (*)(void))sub_23DD4C3B4, (uint64_t)&type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys, v2);
  v30 = *(_QWORD *)(v14 - 8);
  v31 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v24 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DD4C3B4();
  sub_23DDC6C98();
  sub_23DCF58EC(v29, (uint64_t)v13, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = *v13;
    v34 = 1;
    sub_23DD4C32C();
    v18 = v26;
    v19 = v31;
    sub_23DDC6B90();
    v32 = v17;
    sub_23DCFB328(0, &qword_256CFCA08, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DD48E94();
    v20 = v28;
    sub_23DDC6BCC();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v20);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v19);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_23DD3CE14((uint64_t)v13, (uint64_t)v10);
    v33 = 0;
    sub_23DD4C370();
    v22 = v31;
    sub_23DDC6B90();
    sub_23DDC55A0();
    sub_23DCF535C(&qword_256CFDDC0, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], MEMORY[0x24BE40448]);
    v23 = v25;
    sub_23DDC6B9C();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v23);
    sub_23DCFEA1C((uint64_t)v10, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v16, v22);
  }
}

uint64_t sub_23DD3BA98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  char v56;

  v44 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_23DD221EC(0, &qword_256CFDDC8, (uint64_t (*)(void))sub_23DD4C32C, (uint64_t)&type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FixedCodingKeys, MEMORY[0x24BEE33E0]);
  v46 = v4;
  v48 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v50 = (char *)&v39 - v5;
  sub_23DD221EC(0, &qword_256CFDDD0, (uint64_t (*)(void))sub_23DD4C370, (uint64_t)&type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FeatureStatusCodingKeys, v3);
  v45 = v6;
  v47 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v49 = (char *)&v39 - v7;
  sub_23DD221EC(0, &qword_256CFDDD8, (uint64_t (*)(void))sub_23DD4C3B4, (uint64_t)&type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys, v3);
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v39 - v9;
  v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v39 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v39 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DD4C3B4();
  v20 = v53;
  sub_23DDC6C8C();
  if (v20)
    goto LABEL_7;
  v41 = v13;
  v42 = v16;
  v43 = v11;
  v53 = a1;
  v21 = v52;
  v22 = sub_23DDC6B84();
  v23 = v22;
  v24 = v10;
  if (*(_QWORD *)(v22 + 16) != 1)
  {
    v28 = sub_23DDC6A4C();
    swift_allocError();
    v30 = v29;
    sub_23DD1E808(0, (unint64_t *)&qword_256CFDDE0, (void (*)(uint64_t))sub_23DD4C3F8, (void (*)(uint64_t))MEMORY[0x24BEE2700]);
    *v30 = v43;
    sub_23DDC6B3C();
    sub_23DDC6A34();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x24BEE26D0], v28);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v24, v21);
    a1 = v53;
LABEL_7:
    v32 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0(v32);
  }
  if ((*(_BYTE *)(v22 + 32) & 1) != 0)
  {
    v56 = 1;
    sub_23DD4C32C();
    v25 = v50;
    sub_23DDC6B30();
    v40 = v23;
    sub_23DCFB328(0, &qword_256CFCA08, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DD49294();
    v26 = v46;
    sub_23DDC6B78();
    v27 = v51;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v25, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v21);
    v37 = v41;
    *v41 = v54;
    swift_storeEnumTagMultiPayload();
    v38 = (uint64_t)v37;
  }
  else
  {
    v55 = 0;
    sub_23DD4C370();
    v31 = v49;
    sub_23DDC6B30();
    v40 = v23;
    sub_23DDC55A0();
    sub_23DCF535C(&qword_256CFDDF0, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], MEMORY[0x24BE40458]);
    v34 = (uint64_t)v42;
    v35 = v45;
    sub_23DDC6B48();
    v36 = v51;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v35);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v21);
    swift_storeEnumTagMultiPayload();
    v38 = v34;
  }
  sub_23DCFBB58(v38, (uint64_t)v19, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  sub_23DCFBB58((uint64_t)v19, v44, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  v32 = (uint64_t)v53;
  return __swift_destroy_boxed_opaque_existential_0(v32);
}

uint64_t sub_23DD3BFFC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6465786966;
  else
    return 0x5365727574616566;
}

uint64_t sub_23DD3C040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DD48A88(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DD3C064(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23DD3C070()
{
  sub_23DD4C3B4();
  return sub_23DDC6CEC();
}

uint64_t sub_23DD3C098()
{
  sub_23DD4C3B4();
  return sub_23DDC6CF8();
}

uint64_t sub_23DD3C0C8()
{
  return 12383;
}

uint64_t sub_23DD3C0D8()
{
  sub_23DD4C370();
  return sub_23DDC6CEC();
}

uint64_t sub_23DD3C100()
{
  sub_23DD4C370();
  return sub_23DDC6CF8();
}

uint64_t sub_23DD3C128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23DDC6C08();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23DD3C1A4()
{
  sub_23DD4C32C();
  return sub_23DDC6CEC();
}

uint64_t sub_23DD3C1CC()
{
  sub_23DD4C32C();
  return sub_23DDC6CF8();
}

uint64_t sub_23DD3C1F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DD3BA98(a1, a2);
}

uint64_t sub_23DD3C20C(_QWORD *a1)
{
  return sub_23DD3B6E4(a1);
}

uint64_t OvernightMetricsViewModel.dayRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DDC5330();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t OvernightMetricsViewModel.chronologicalDaySummaries.getter()
{
  type metadata accessor for OvernightMetricsViewModel(0);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for OvernightMetricsViewModel(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_254326900);
}

uint64_t sub_23DD3C28C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(char *, unint64_t, uint64_t);
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  int v73;
  char *v74;
  void (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  uint64_t v87;
  char *v88;
  int *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t result;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t *v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  int *v120;
  uint64_t v121;

  v1 = v0;
  sub_23DD3DBE8();
  v104 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v105 = (char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v101 = (char *)&v98 - v5;
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v100 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v102 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v103 = (uint64_t)&v98 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v110 = (uint64_t)&v98 - v11;
  v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v13);
  v109 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v108 = (char *)&v98 - v16;
  v17 = sub_23DDC512C();
  v111 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v113 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v114 = (char *)&v98 - v20;
  sub_23DD020E0();
  MEMORY[0x24BDAC7A8](v21);
  v107 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x24BDAC7A8](v117);
  v106 = (unint64_t *)((char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v112 = sub_23DDC51E0();
  v116 = *(_QWORD *)(v112 - 8);
  MEMORY[0x24BDAC7A8](v112);
  v115 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v119 = (char *)&v98 - v26;
  v27 = sub_23DDC5420();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_2543266B8, v31, v12);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v98 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v98 - v36;
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v12);
  MEMORY[0x24BDAC7A8](v38);
  v40 = (char *)&v98 - v39;
  v41 = sub_23DD3DC4C();
  v120 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  v42 = v120[14];
  swift_bridgeObjectRelease();
  v99 = v42;
  *(_QWORD *)(v1 + v42) = v41;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v37);
  sub_23DD4C634((uint64_t)v37, (uint64_t)v34, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v34, 1, v27) == 1)
  {
    v43 = type metadata accessor for OvernightMetricsChartPoint();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v40, 1, 1, v43);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v30, v34, v27);
    sub_23DD3E02C((uint64_t)v30, (uint64_t)v40);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  }
  sub_23DCFEA1C((uint64_t)v37, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
  v44 = v120;
  sub_23DD48FF0((uint64_t)v40, v1 + v120[7]);
  v45 = swift_bridgeObjectRetain();
  v46 = sub_23DD3E648(v45, v1);
  swift_bridgeObjectRelease();
  v47 = v44[9];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v47) = v46;
  v48 = v119;
  v118 = v1;
  sub_23DDC530C();
  v49 = v115;
  v50 = *(void (**)(char *, char *, uint64_t))(v116 + 16);
  v51 = v112;
  v50(v115, v48, v112);
  v52 = (uint64_t)v106;
  *v106 = v46;
  v50((char *)(v52 + *(int *)(v117 + 20)), v49, v51);
  swift_bridgeObjectRetain_n();
  v53 = sub_23DDC536C();
  MEMORY[0x24BDAC7A8](v53);
  v96 = v46;
  v54 = swift_bridgeObjectRetain();
  v55 = sub_23DD47248(v54, (void (*)(uint64_t *__return_ptr, uint64_t))sub_23DD4CC98);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v55 + 16) >= *(_QWORD *)(v53 + 16))
    v56 = *(_QWORD *)(v53 + 16);
  else
    v56 = *(_QWORD *)(v55 + 16);
  if (v56)
  {
    sub_23DD47350();
    v57 = sub_23DDC6AF4();
  }
  else
  {
    v57 = MEMORY[0x24BEE4B00];
  }
  v58 = v111;
  v121 = v57;
  v59 = swift_bridgeObjectRetain();
  sub_23DD4813C(v59, v55, 1, &v121);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v60 = v121;
  v116 = *(_QWORD *)(v116 + 8);
  ((void (*)(char *, uint64_t))v116)(v115, v51);
  swift_bridgeObjectRelease();
  v61 = v118;
  *(_QWORD *)(v52 + *(int *)(v117 + 24)) = v60;
  v62 = v120;
  v63 = v61 + v120[8];
  sub_23DCF59A8(v63, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
  sub_23DCFBB58(v52, v63, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
  v64 = (uint64_t)v107;
  v65 = sub_23DDC52F4();
  MEMORY[0x24BDAC7A8](v65);
  v96 = v61;
  v66 = sub_23DD8EFCC((void (*)(char *))sub_23DD4C68C, (uint64_t)(&v98 - 4));
  sub_23DCF59A8(v64, (uint64_t (*)(_QWORD))sub_23DD020E0);
  v67 = v62[10];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v61 + v67) = v66;
  if (!*(_QWORD *)(v66 + 16))
  {
LABEL_17:
    v70 = (uint64_t)v108;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v108, 1, 1, v17);
    goto LABEL_18;
  }
  v68 = v66 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
  v69 = *(void (**)(char *, unint64_t, uint64_t))(v58 + 16);
  v70 = (uint64_t)v108;
  v69(v108, v68, v17);
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
  v71(v70, 0, 1, v17);
  v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  v73 = v72(v70, 1, v17);
  v74 = v114;
  if (v73 != 1)
  {
    v75 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 32);
    v75(v114, v70, v17);
    v76 = *(_QWORD *)(v66 + 16);
    if (v76)
    {
      v77 = (uint64_t)v109;
      v69(v109, v68 + *(_QWORD *)(v58 + 72) * (v76 - 1), v17);
      v71(v77, 0, 1, v17);
      if (v72(v77, 1, v17) != 1)
      {
        v78 = (uint64_t)v113;
        v75(v113, v77, v17);
        v58 = v110;
        sub_23DD6746C(v78, v110);
        sub_23DD49240(v58, v118 + v120[11]);
        sub_23DCF535C((unint64_t *)&qword_254326A30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
        if ((sub_23DDC66A4() & 1) != 0)
        {
          v79 = v104;
          v80 = v101;
          v81 = &v101[*(int *)(v104 + 48)];
          v69(v101, (unint64_t)v74, v17);
          v69(v81, v78, v17);
          v82 = v105;
          v83 = &v105[*(int *)(v79 + 48)];
          v69(v105, (unint64_t)v80, v17);
          v69(v83, (unint64_t)v81, v17);
          v84 = (uint64_t)v102;
          v75(v102, (uint64_t)v82, v17);
          v85 = *(void (**)(char *, uint64_t))(v111 + 8);
          v85(v83, v17);
          v86 = &v82[*(int *)(v79 + 48)];
          v75(v82, (uint64_t)v80, v17);
          v75(v86, (uint64_t)v81, v17);
          v75((char *)(v84 + *(int *)(v100 + 36)), (uint64_t)v86, v17);
          v85(v82, v17);
          v87 = v103;
          sub_23DD4845C(v84, v103);
          v88 = v119;
          sub_23DD6799C(v87, v58);
          sub_23DD48F24(v87, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
          v89 = v120;
          v90 = v118;
          sub_23DD49240(v58, v118 + v120[12]);
          v91 = v113;
          v92 = v88;
          v93 = sub_23DD67E40(*(_QWORD *)(*(_QWORD *)(v90 + v99) + 16));
          v85(v91, v17);
          v85(v114, v17);
          ((void (*)(char *, uint64_t))v116)(v92, v112);
          v94 = v89[13];
          result = swift_bridgeObjectRelease();
          *(_QWORD *)(v90 + v94) = v93;
          return result;
        }
        __break(1u);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      v71((uint64_t)v109, 1, 1, v17);
    }
    (*(void (**)(char *, uint64_t))(v111 + 8))(v74, v17);
    goto LABEL_21;
  }
LABEL_18:
  v109 = (char *)v70;
LABEL_21:
  sub_23DCFEA1C((uint64_t)v109, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v97 = 0;
  v96 = 87;
  result = sub_23DDC6AC4();
  __break(1u);
  return result;
}

uint64_t OvernightMetricsViewModel.featureStatus.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_23DCF58EC(v1 + *(int *)(v6 + 24), (uint64_t)v5, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() != 1)
    return sub_23DD3CE14((uint64_t)v5, a1);
  sub_23DCF59A8((uint64_t)v5, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  v7 = sub_23DDC55A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 1, 1, v7);
}

uint64_t type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_254326A78);
}

uint64_t sub_23DD3CE14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD3CE70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_23DCF58EC(a1 + *(int *)(v7 + 24), (uint64_t)v6, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() != 1)
    return sub_23DD3CE14((uint64_t)v6, a2);
  sub_23DCF59A8((uint64_t)v6, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  v8 = sub_23DDC55A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 1, 1, v8);
}

uint64_t sub_23DD3CF58(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BE40438];
  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v7 - v4;
  sub_23DD4C634(a1, (uint64_t)&v7 - v4, &qword_254326A70, v2);
  return sub_23DD3CFF8((uint64_t)v5);
}

uint64_t sub_23DD3CFF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v3 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - v10;
  sub_23DD4C634(a1, (uint64_t)&v14 - v10, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
  swift_storeEnumTagMultiPayload();
  v12 = v1 + *(int *)(type metadata accessor for OvernightMetricsViewModel(0) + 24);
  sub_23DCF58EC(v12, (uint64_t)v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  sub_23DD484B0((uint64_t)v11, v12);
  sub_23DCF58EC(v12, (uint64_t)v5, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  LOBYTE(v12) = sub_23DD47C7C((uint64_t)v5, (uint64_t)v8);
  sub_23DCF59A8((uint64_t)v5, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if ((v12 & 1) == 0)
    sub_23DD3C28C();
  sub_23DCF59A8((uint64_t)v11, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  sub_23DCF59A8((uint64_t)v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  return sub_23DCFEA1C(a1, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
}

uint64_t OvernightMetricsViewModel.emphasizedChartPoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for OvernightMetricsViewModel(0);
  return sub_23DD4C634(v1 + *(int *)(v3 + 28), a1, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
}

uint64_t OvernightMetricsViewModel.chartPointCollection.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for OvernightMetricsViewModel(0);
  return sub_23DCF58EC(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
}

uint64_t OvernightMetricsViewModel.chartPoints.getter()
{
  type metadata accessor for OvernightMetricsViewModel(0);
  return swift_bridgeObjectRetain();
}

uint64_t OvernightMetricsViewModel.keyDatesForTimeAxis.getter()
{
  type metadata accessor for OvernightMetricsViewModel(0);
  return swift_bridgeObjectRetain();
}

uint64_t OvernightMetricsViewModel.lastKeyDateRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for OvernightMetricsViewModel(0);
  return sub_23DD3D270(v1 + *(int *)(v3 + 44), a1, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
}

uint64_t sub_23DD3D270(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  sub_23DD04550(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t OvernightMetricsViewModel.keyDatesRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for OvernightMetricsViewModel(0);
  return sub_23DD3D270(v1 + *(int *)(v3 + 48), a1, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
}

uint64_t OvernightMetricsViewModel.oneDayChartIconPositions.getter()
{
  type metadata accessor for OvernightMetricsViewModel(0);
  return swift_bridgeObjectRetain();
}

uint64_t OvernightMetricsViewModel.visibleDataTypes.getter()
{
  type metadata accessor for OvernightMetricsViewModel(0);
  return swift_bridgeObjectRetain();
}

uint64_t OvernightMetricsViewModel.init(dayRange:chronologicalDaySummaries:featureStatus:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(_QWORD, _QWORD);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  void (*v75)(char *, uint64_t);
  char *v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t);
  uint64_t result;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  int *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;

  v99 = a3;
  v95 = a2;
  v100 = a1;
  v112 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v112);
  v98 = (uint64_t)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v97 = (uint64_t)&v90 - v7;
  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v96 = (uint64_t)&v90 - v9;
  sub_23DD3DBE8();
  v110 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v101 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v108 = (char *)&v90 - v13;
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v109 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v103 = (char *)&v90 - v15;
  v105 = sub_23DDC512C();
  v102 = *(_QWORD *)(v105 - 8);
  MEMORY[0x24BDAC7A8](v105);
  v111 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v113 = (char *)&v90 - v18;
  v19 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_23DDC5180();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = (_QWORD *)sub_23DDC51E0();
  v26 = *(v104 - 1);
  MEMORY[0x24BDAC7A8](v104);
  v28 = (char *)&v90 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for OvernightMetricsViewModel(0);
  v30 = a4 + *(int *)(v29 + 24);
  v31 = sub_23DDC55A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v94 = v30;
  v32 = (int *)v29;
  swift_storeEnumTagMultiPayload();
  v33 = a4 + *(int *)(v29 + 28);
  v34 = type metadata accessor for OvernightMetricsChartPoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v25, *MEMORY[0x24BDCEF70], v22);
  sub_23DDC518C();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  v35 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)v21 = MEMORY[0x24BEE4AF8];
  v106 = v28;
  v107 = (int *)v19;
  v36 = v28;
  v37 = (void (*)(_QWORD, _QWORD))v104;
  (*(void (**)(char *, char *))(v26 + 16))(&v21[*(int *)(v19 + 20)], v36);
  v38 = sub_23DDC536C();
  v114 = v35;
  v39 = swift_bridgeObjectRetain();
  v40 = sub_23DD47248(v39, (void (*)(uint64_t *__return_ptr, uint64_t))sub_23DD45158);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v40 + 16) >= *(_QWORD *)(v38 + 16))
    v41 = *(_QWORD *)(v38 + 16);
  else
    v41 = *(_QWORD *)(v40 + 16);
  if (v41)
  {
    sub_23DD47350();
    v42 = sub_23DDC6AF4();
  }
  else
  {
    v42 = MEMORY[0x24BEE4B00];
  }
  v115 = v42;
  v43 = swift_bridgeObjectRetain();
  sub_23DD4813C(v43, v40, 1, &v115);
  swift_bridgeObjectRelease();
  v44 = v32[8];
  swift_bridgeObjectRelease();
  v45 = v115;
  (*(void (**)(char *, _QWORD))(v26 + 8))(v106, v37);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v21[v107[6]] = v45;
  sub_23DCFBB58((uint64_t)v21, a4 + v44, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
  v46 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a4 + v32[9]) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a4 + v32[10]) = v46;
  v47 = v32[11];
  v48 = v113;
  sub_23DDC5114();
  v49 = v111;
  sub_23DDC5114();
  v50 = sub_23DCF535C((unint64_t *)&qword_254326A30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v51 = v105;
  v106 = (char *)v50;
  if ((sub_23DDC66A4() & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v104 = (_QWORD *)(a4 + v47);
  v52 = v51;
  v53 = v108;
  v54 = v101;
  v107 = v32;
  v55 = v110;
  v56 = &v108[*(int *)(v110 + 48)];
  v92 = a4;
  v57 = v102;
  v58 = *(void (**)(char *, char *, uint64_t))(v102 + 32);
  v58(v108, v48, v52);
  v93 = v56;
  v58(v56, v49, v52);
  v59 = &v54[*(int *)(v55 + 48)];
  v60 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  v60(v54, v53, v52);
  v91 = v60;
  v60(v59, v56, v52);
  v61 = (uint64_t)v103;
  v58(v103, v54, v52);
  v62 = *(void (**)(char *, uint64_t))(v57 + 8);
  v63 = v59;
  v64 = v113;
  v62(v63, v52);
  v65 = &v54[*(int *)(v55 + 48)];
  v58(v54, v53, v52);
  v58(v65, v93, v52);
  v58((char *)(v61 + *(int *)(v109 + 36)), v65, v52);
  v62(v54, v52);
  sub_23DD4845C(v61, (uint64_t)v104);
  v66 = v107[12];
  sub_23DDC5114();
  sub_23DDC5114();
  if ((sub_23DDC66A4() & 1) == 0)
  {
LABEL_13:
    __break(1u);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_release();
    __break(1u);
    return result;
  }
  v67 = v92;
  v106 = (char *)(v92 + v66);
  v68 = v110;
  v69 = *(int *)(v110 + 48);
  v104 = v62;
  v70 = v52;
  v71 = v108;
  v72 = &v108[v69];
  v58(v108, v64, v70);
  v58(v72, v111, v70);
  v73 = &v54[*(int *)(v68 + 48)];
  v74 = v91;
  v91(v54, v71, v70);
  v74(v73, v72, v70);
  v58((char *)v61, v54, v70);
  v75 = (void (*)(char *, uint64_t))v104;
  ((void (*)(char *, uint64_t))v104)(v73, v70);
  v76 = &v54[*(int *)(v68 + 48)];
  v58(v54, v71, v70);
  v58(v76, v72, v70);
  v58((char *)(v61 + *(int *)(v109 + 36)), v76, v70);
  v75(v54, v70);
  sub_23DD4845C(v61, (uint64_t)v106);
  v77 = v107;
  v78 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v67 + v107[13]) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v67 + v77[14]) = v78;
  v79 = sub_23DDC5330();
  v80 = *(_QWORD *)(v79 - 8);
  v81 = v100;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v67, v100, v79);
  *(_QWORD *)(v67 + v77[5]) = v95;
  v82 = (uint64_t (*)(uint64_t))MEMORY[0x24BE40438];
  v83 = v99;
  v84 = v96;
  sub_23DD4C634(v99, v96, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
  v85 = v97;
  sub_23DD4C634(v84, v97, &qword_254326A70, v82);
  swift_storeEnumTagMultiPayload();
  v86 = v94;
  v87 = v98;
  sub_23DCF58EC(v94, v98, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  sub_23DD484B0(v85, v86);
  if ((sub_23DD47C7C(v86, v87) & 1) == 0)
    sub_23DD3C28C();
  sub_23DCF59A8(v85, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  sub_23DCF59A8(v87, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  v88 = (uint64_t (*)(uint64_t))MEMORY[0x24BE40438];
  sub_23DCFEA1C(v84, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
  sub_23DD3C28C();
  sub_23DCFEA1C(v83, &qword_254326A70, v88);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 8))(v81, v79);
}

void sub_23DD3DBE8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_254326660)
  {
    sub_23DDC512C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_254326660);
  }
}

_QWORD *sub_23DD3DC4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v13[2];

  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (_QWORD **)((char *)v13 - v2);
  v4 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_23DCF58EC((uint64_t)v0 + *(int *)(v7 + 24), (uint64_t)v6, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() == 1)
    return *(_QWORD **)v6;
  sub_23DD3CE14((uint64_t)v6, (uint64_t)v3);
  v9 = sub_23DDC536C();
  MEMORY[0x24BDAC7A8](v9);
  v13[-2] = v3;
  v13[-1] = v0;
  sub_23DD3B4C8(sub_23DD4C740, (uint64_t)&v13[-4], v10, (uint64_t (*)(_QWORD))MEMORY[0x24BE3FE20], (void (*)(BOOL, uint64_t, uint64_t))sub_23DD92AA4);
  v13[0] = v11;
  swift_bridgeObjectRetain();
  sub_23DD45160(v13);
  swift_bridgeObjectRelease();
  v8 = v13[0];
  sub_23DCFEA1C((uint64_t)v3, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
  return v8;
}

uint64_t OvernightMetricsViewModel.daySummaryForToday.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_23DD020E0();
  v24 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DDC6530();
  v25 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - v10;
  v12 = sub_23DDC5420();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for OvernightMetricsViewModel(0) + 20));
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v23 = a1;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v15, v16+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * (v17 - 1), v12);
    sub_23DDC53E4();
    sub_23DDC52F4();
    v18 = v25;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v9, &v5[*(int *)(v24 + 36)], v6);
    sub_23DCF59A8((uint64_t)v5, (uint64_t (*)(_QWORD))sub_23DD020E0);
    sub_23DCF535C(&qword_254326730, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
    sub_23DDC69B0();
    v19 = v26;
    v20 = *(void (**)(char *, uint64_t))(v18 + 8);
    v20(v9, v6);
    v20(v11, v6);
    if (v19)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      v21 = 1;
      a1 = v23;
    }
    else
    {
      a1 = v23;
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v23, v15, v12);
      v21 = 0;
    }
  }
  else
  {
    v21 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, v21, 1, v12);
}

uint64_t sub_23DD3E02C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  int v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  int isUniquelyReferenced_nonNull_native;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t result;
  _QWORD v67[2];
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, unint64_t, uint64_t);
  uint64_t v88;
  _QWORD *v89;

  v3 = v2;
  v85 = a1;
  v80 = a2;
  v4 = sub_23DDC5528();
  v83 = *(_QWORD *)(v4 - 8);
  v84 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DDC53A8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23DDC6530();
  v70 = *(_QWORD *)(v11 - 8);
  v71 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v69 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23DDC512C();
  v78 = *(_QWORD *)(v13 - 8);
  v79 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v75 = (char *)v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v77 = (char *)v67 - v16;
  v76 = sub_23DDC51E0();
  v74 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v72 = (char *)v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v73 = (char *)v67 - v19;
  v20 = sub_23DDC536C();
  v21 = (_QWORD *)sub_23DCFFFA0(MEMORY[0x24BEE4AF8]);
  v22 = *(_QWORD *)(v20 + 16);
  if (!v22)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    v50 = v73;
    sub_23DDC530C();
    v51 = v69;
    sub_23DDC53E4();
    v52 = v77;
    sub_23DDC6524();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v51, v71);
    v53 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for OvernightMetricsViewModel(0) + 56));
    v54 = *(_QWORD *)(v53 + 16);
    v55 = sub_23DD67E40(v54);
    v56 = v55;
    if (*(_QWORD *)(v55 + 16) >= v54)
      v57 = v54;
    else
      v57 = *(_QWORD *)(v55 + 16);
    if (v57)
    {
      sub_23DD4C6A8(0, &qword_254326780, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
      v58 = sub_23DDC6AF4();
    }
    else
    {
      v58 = MEMORY[0x24BEE4B00];
    }
    v89 = (_QWORD *)v58;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_23DD46640(v53, v56, 1, &v89);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v59 = (uint64_t)v89;
    v61 = v78;
    v60 = v79;
    v62 = (uint64_t)v75;
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v75, v52, v79);
    v63 = v74;
    v64 = (uint64_t)v72;
    v65 = v76;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v72, v50, v76);
    sub_23DD597F4(v62, (uint64_t)v21, v59, v64, v80);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v52, v60);
    return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v50, v65);
  }
  v68 = v3;
  v23 = v20 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v24 = *(_QWORD *)(v8 + 72);
  v87 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  v88 = v24;
  v67[1] = v20;
  swift_bridgeObjectRetain();
  v81 = v8;
  v82 = v7;
  v86 = v10;
  while (1)
  {
    v87(v10, v23, v7);
    sub_23DDC53F0();
    v26 = sub_23DDC5474();
    v28 = v27;
    if ((v27 & 1) != 0)
    {
      v29 = sub_23DDC5480();
      v30 = *(void (**)(char *, uint64_t))(v83 + 8);
      if ((v29 & 1) == 0)
      {
        v30(v6, v84);
        swift_bridgeObjectRetain();
        v46 = sub_23DD768A4((uint64_t)v10);
        v48 = v47;
        swift_bridgeObjectRelease();
        if ((v48 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v89 = v21;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_23DD78D88();
            v21 = v89;
          }
          v7 = v82;
          (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v21[6] + v46 * v88, v82);
          v21 = v89;
          sub_23DD46FA0(v46, (uint64_t)v89);
          swift_bridgeObjectRelease();
        }
        else
        {
          v7 = v82;
        }
        v10 = v86;
        goto LABEL_5;
      }
      v31 = 0;
    }
    else
    {
      v31 = v26;
      v30 = *(void (**)(char *, uint64_t))(v83 + 8);
    }
    v32 = v6;
    v30(v6, v84);
    v33 = swift_isUniquelyReferenced_nonNull_native();
    v89 = v21;
    v35 = sub_23DD768A4((uint64_t)v10);
    v36 = v21[2];
    v37 = (v34 & 1) == 0;
    v38 = v36 + v37;
    if (__OFADD__(v36, v37))
      break;
    v39 = v34;
    if (v21[3] >= v38)
    {
      v7 = v82;
      if ((v33 & 1) != 0)
        goto LABEL_16;
      sub_23DD78D88();
    }
    else
    {
      sub_23DD77DF0(v38, v33);
      v40 = sub_23DD768A4((uint64_t)v86);
      if ((v39 & 1) != (v41 & 1))
        goto LABEL_36;
      v35 = v40;
    }
    v7 = v82;
LABEL_16:
    v21 = v89;
    if ((v39 & 1) != 0)
    {
      v25 = v89[7] + 16 * v35;
      *(_QWORD *)v25 = v31;
      *(_BYTE *)(v25 + 8) = v28 & 1;
      v10 = v86;
    }
    else
    {
      v89[(v35 >> 6) + 8] |= 1 << v35;
      v10 = v86;
      v87((char *)(v21[6] + v35 * v88), (unint64_t)v86, v7);
      v42 = v21[7] + 16 * v35;
      *(_QWORD *)v42 = v31;
      *(_BYTE *)(v42 + 8) = v28 & 1;
      v43 = v21[2];
      v44 = __OFADD__(v43, 1);
      v45 = v43 + 1;
      if (v44)
        goto LABEL_35;
      v21[2] = v45;
    }
    swift_bridgeObjectRelease();
    v6 = v32;
    v8 = v81;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v23 += v88;
    if (!--v22)
    {
      swift_bridgeObjectRelease();
      v3 = v68;
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  sub_23DDC6C20();
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

unint64_t sub_23DD3E648(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = type metadata accessor for OvernightMetricsViewModel(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v23 - v9;
  v28 = type metadata accessor for OvernightMetricsChartPoint();
  v11 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v27 = (uint64_t)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v25 = (uint64_t)v23 - v14;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    return MEMORY[0x24BEE4AF8];
  v23[1] = v2;
  v16 = *(_QWORD *)(sub_23DDC5420() - 8);
  v17 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v26 = *(_QWORD *)(v16 + 72);
  v23[0] = a1;
  swift_bridgeObjectRetain();
  v18 = MEMORY[0x24BEE4AF8];
  v24 = a2;
  do
  {
    sub_23DCF58EC(a2, (uint64_t)v7, type metadata accessor for OvernightMetricsViewModel);
    sub_23DD3E02C(v17, (uint64_t)v10);
    sub_23DCF59A8((uint64_t)v7, type metadata accessor for OvernightMetricsViewModel);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v28) == 1)
    {
      sub_23DCFEA1C((uint64_t)v10, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    }
    else
    {
      v19 = v25;
      sub_23DCFBB58((uint64_t)v10, v25, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      sub_23DCFBB58(v19, v27, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = sub_23DD5646C(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
      v21 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v18 + 24);
      if (v21 >= v20 >> 1)
        v18 = sub_23DD5646C(v20 > 1, v21 + 1, 1, v18);
      *(_QWORD *)(v18 + 16) = v21 + 1;
      sub_23DCFBB58(v27, v18+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v21, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      a2 = v24;
    }
    v17 += v26;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v18;
}

_QWORD *sub_23DD3E908(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v5 = *v2;
    if (*v2)
    {
      v6 = *(v2 - 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_23DD569F0(0, v3[2] + 1, 1, v3);
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
        v3 = sub_23DD569F0((_QWORD *)(v7 > 1), v8 + 1, 1, v3);
      v3[2] = v8 + 1;
      v4 = &v3[2 * v8];
      v4[4] = v6;
      v4[5] = v5;
    }
    v2 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t OvernightMetricsViewModel.filtered(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  double v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t result;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE v19[16];

  v3 = v2;
  v6 = type metadata accessor for OvernightMetricsViewModel(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_23DDC5330();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FCF0];
  v11 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v11 + 16))(v14, v3, v9, v12);
  sub_23DCF535C(&qword_256CFDC70, v10, MEMORY[0x24BE3FD10]);
  LOBYTE(v10) = sub_23DDC66C8();
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v14, v9);
  if ((v10 & 1) != 0)
    return sub_23DCF58EC(v3, a2, type metadata accessor for OvernightMetricsViewModel);
  v16 = sub_23DCF58EC(v3, (uint64_t)v8, type metadata accessor for OvernightMetricsViewModel);
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)&v19[-16] = a1;
  v17 = &v8[*(int *)(v6 + 20)];
  result = sub_23DD46C3C((uint64_t (*)(unint64_t))sub_23DD484F4, (uint64_t)&v19[-32], (uint64_t (*)(_QWORD))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t))sub_23DD451F4);
  v18 = *(_QWORD *)(*(_QWORD *)v17 + 16);
  if (v18 < result)
  {
    __break(1u);
  }
  else
  {
    sub_23DD4C448(result, v18, (uint64_t (*)(void))sub_23DD56C34, (uint64_t (*)(_QWORD))MEMORY[0x24BE3FFB0]);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 24))(v8, a1, v9);
    sub_23DD3C28C();
    return sub_23DCFBB58((uint64_t)v8, a2, type metadata accessor for OvernightMetricsViewModel);
  }
  return result;
}

uint64_t sub_23DD3EBF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v0 = sub_23DDC6530();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v17 - v5;
  sub_23DD020E0();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v17 - v11;
  sub_23DDC52F4();
  sub_23DDC53E4();
  sub_23DCF535C(&qword_254326720, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
  v13 = sub_23DDC6698();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
  sub_23DCF58EC((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DD020E0);
  if ((v13 & 1) != 0)
    v14 = sub_23DDC66A4() ^ 1;
  else
    v14 = 1;
  sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DD020E0);
  v15 = *(void (**)(char *, uint64_t))(v1 + 8);
  v15(v3, v0);
  v15(v6, v0);
  sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DD020E0);
  return v14 & 1;
}

uint64_t OvernightMetricsViewModel.withFallbackVisibleDataTypes(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v3 = v2;
  v6 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v21 - v10);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v21 - v13;
  v15 = type metadata accessor for OvernightMetricsViewModel(0);
  if ((sub_23DD4128C(a1, *(_QWORD *)(v3 + *(int *)(v15 + 56)), (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], &qword_254326688, MEMORY[0x24BE3FE40]) & 1) != 0)return sub_23DCF58EC(v3, a2, type metadata accessor for OvernightMetricsViewModel);
  v17 = v3 + *(int *)(v15 + 24);
  v18 = sub_23DDC55A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v14, 1, 1, v18);
  swift_storeEnumTagMultiPayload();
  LOBYTE(v17) = sub_23DD47C7C(v17, (uint64_t)v14);
  sub_23DCF59A8((uint64_t)v14, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  result = sub_23DCF58EC(v3, a2, type metadata accessor for OvernightMetricsViewModel);
  if ((v17 & 1) != 0)
  {
    *v11 = a1;
    swift_storeEnumTagMultiPayload();
    v19 = a2 + *(int *)(v15 + 24);
    sub_23DCF58EC(v19, (uint64_t)v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    swift_bridgeObjectRetain();
    sub_23DD484B0((uint64_t)v11, v19);
    sub_23DCF58EC(v19, (uint64_t)v14, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v20 = sub_23DD47C7C((uint64_t)v14, (uint64_t)v8);
    sub_23DCF59A8((uint64_t)v14, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    if ((v20 & 1) == 0)
      sub_23DD3C28C();
    sub_23DCF59A8((uint64_t)v11, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    return sub_23DCF59A8((uint64_t)v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  }
  return result;
}

uint64_t OvernightMetricsViewModel.localizedTitle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjCClassFromMetadata;
  id v3;

  v0 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v1);
  sub_23DDC66D4();
  type metadata accessor for HealthBalanceUI();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v3 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23DDC5168();
  return sub_23DDC6770();
}

uint64_t OvernightMetricsViewModel.primaryTintColor.getter()
{
  uint64_t v0;
  char v1;
  void *v2;
  id v4;

  v0 = OvernightMetricsViewModel.changeDetectedCountToday.getter();
  if ((v1 & 1) == 0)
  {
    if (v0 == 1)
    {
      if (qword_256CFC0A0 != -1)
        swift_once();
      v2 = (void *)qword_256CFE660;
    }
    else if (v0)
    {
      if (qword_256CFC0A8 != -1)
        swift_once();
      v2 = (void *)qword_256CFE668;
    }
    else
    {
      if (qword_256CFC098 != -1)
        swift_once();
      v2 = (void *)qword_256CFE658;
    }
    v4 = v2;
    JUMPOUT(0x242642C18);
  }
  return sub_23DDC6200();
}

uint64_t OvernightMetricsViewModel.changeDetectedCountToday.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v9 - v1;
  v3 = sub_23DDC5420();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23DCFEA1C((uint64_t)v2, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  if ((sub_23DDC5414() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return 0;
  }
  v7 = MEMORY[0x242641E44]();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t OvernightMetricsViewModel.backgroundColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;

  v0 = sub_23DDC5774();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = OvernightMetricsViewModel.changeDetectedCountToday.getter();
  if ((v5 & 1) != 0)
    return sub_23DDC6200();
  if (v4 == 1)
  {
    if (qword_256CFC0D0 != -1)
      swift_once();
    v6 = qword_256D065B0;
  }
  else if (v4)
  {
    if (qword_256CFC0C8 != -1)
      swift_once();
    v6 = qword_256D06598;
  }
  else
  {
    if (qword_256CFC0C0 != -1)
      swift_once();
    v6 = qword_256D06580;
  }
  v8 = __swift_project_value_buffer(v0, (uint64_t)v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v8, v0);
  return sub_23DDC626C();
}

uint64_t OvernightMetricsViewModel.learnMoreTitle.getter()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t ObjCClassFromMetadata;
  id v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v32 - v2;
  v4 = sub_23DDC5420();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DDC5630();
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v10);
  v36 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v12);
  v35 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_2543266F8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, v0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v32 - v15;
  v17 = type metadata accessor for OvernightMetricsWarmupProgress();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.warmupProgress.getter((uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_23DCFEA1C((uint64_t)v16, &qword_2543266F8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  else
  {
    sub_23DCFBB58((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
    if ((sub_23DDC52A0() & 1) == 0)
    {
      sub_23DDC66D4();
      type metadata accessor for HealthBalanceUI();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v30 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      sub_23DDC5168();
      v28 = sub_23DDC6770();
      sub_23DCF59A8((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
      return v28;
    }
    sub_23DCF59A8((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_23DCFEA1C((uint64_t)v3, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
LABEL_9:
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    v26 = swift_getObjCClassFromMetadata();
    v25 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v26);
    goto LABEL_10;
  }
  v21 = v32;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v32, v3, v4);
  sub_23DDC5600();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v21, v4);
  sub_23DDC560C();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
  if (!v23)
    goto LABEL_9;
  swift_bridgeObjectRelease();
  sub_23DDC66D4();
  type metadata accessor for HealthBalanceUI();
  v24 = swift_getObjCClassFromMetadata();
  v25 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v24);
LABEL_10:
  v27 = v25;
  sub_23DDC5168();
  return sub_23DDC6770();
}

uint64_t OvernightMetricsViewModel.warmupProgress.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v2 = sub_23DDC52DC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v24 - v7;
  v9 = sub_23DDC5420();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_23DCFEA1C((uint64_t)v8, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
    v13 = type metadata accessor for OvernightMetricsWarmupProgress();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    v25 = a1;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    sub_23DDC56C0();
    v15 = sub_23DDC536C();
    v24[1] = v24;
    MEMORY[0x24BDAC7A8](v15);
    v24[-2] = v12;
    v16 = swift_bridgeObjectRetain();
    v17 = sub_23DD48510(v16, (void (*)(uint64_t))sub_23DD48B94, (uint64_t)&v24[-4]);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v17 + 16) >= *(_QWORD *)(v15 + 16))
      v18 = *(_QWORD *)(v15 + 16);
    else
      v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      sub_23DD4C6A8(0, (unint64_t *)&qword_254326788, (void (*)(uint64_t))MEMORY[0x24BE3FC10]);
      v19 = sub_23DDC6AF4();
    }
    else
    {
      v19 = MEMORY[0x24BEE4B00];
    }
    v26 = v19;
    v20 = swift_bridgeObjectRetain();
    sub_23DD48670(v20, v17, 1, &v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v25;
    v21 = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v25, v5, v2);
    v23 = type metadata accessor for OvernightMetricsWarmupProgress();
    *(_QWORD *)(v22 + *(int *)(v23 + 20)) = v21;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 0, 1, v23);
  }
}

id sub_23DD3FBB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v13;
  id v14;
  unint64_t v15;
  char v16;
  id v17;
  id v18;
  uint64_t v19;

  v1 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - v5;
  v7 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_23DCF58EC(v0 + *(int *)(v7 + 24), (uint64_t)v3, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23DCF59A8((uint64_t)v3, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v8 = sub_23DDC55A0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
LABEL_4:
    sub_23DCFEA1C((uint64_t)v6, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
    return 0;
  }
  sub_23DD3CE14((uint64_t)v3, (uint64_t)v6);
  v9 = sub_23DDC55A0();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
    goto LABEL_4;
  v13 = sub_23DDC5588();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v9);
  if (*(_QWORD *)(v13 + 16))
  {
    v14 = (id)*MEMORY[0x24BDD2E80];
    v15 = sub_23DD76A08((uint64_t)v14);
    if ((v16 & 1) != 0)
    {
      v17 = *(id *)(*(_QWORD *)(v13 + 56) + 8 * v15);

      swift_bridgeObjectRelease();
      v18 = objc_msgSend(v17, sel_objectForKeyedSubscript_, *MEMORY[0x24BDD2CA8]);

      v11 = objc_msgSend(v18, sel_areAllRequirementsSatisfied);
      return v11;
    }

  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t OvernightMetricsViewModel.learnMoreDescription.getter()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  id v43;
  uint64_t ObjCClassFromMetadata;
  id v45;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  _QWORD *v54;

  v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v47 - v2;
  v4 = sub_23DDC5420();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_23DDC5630();
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v48 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v49 = (char *)&v47 - v10;
  v11 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)&v53 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v13);
  v52 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_2543266F8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress, v0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v47 - v16;
  v18 = type metadata accessor for OvernightMetricsWarmupProgress();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.warmupProgress.getter((uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_23DCFEA1C((uint64_t)v17, &qword_2543266F8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  else
  {
    sub_23DCFBB58((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
    if ((sub_23DDC52A0() & 1) == 0)
    {
      sub_23DD3FBB8();
      sub_23DDC66D4();
      type metadata accessor for HealthBalanceUI();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v45 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      sub_23DDC5168();
      v24 = sub_23DDC6770();
      sub_23DCF59A8((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
      return v24;
    }
    sub_23DCF59A8((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_23DCFEA1C((uint64_t)v3, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    v22 = swift_getObjCClassFromMetadata();
    v23 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v22);
    sub_23DDC5168();
    return sub_23DDC6770();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    v25 = v48;
    sub_23DDC5600();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v26 = v50;
    v27 = v49;
    v28 = v51;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v49, v25, v51);
    v30 = sub_23DDC560C();
    if (v29)
    {
      v31 = v29;
      sub_23DD48B9C();
      inited = swift_initStackObject();
      v53 = xmmword_23DDC7830;
      *(_OWORD *)(inited + 16) = xmmword_23DDC7830;
      *(_QWORD *)(inited + 32) = v30;
      *(_QWORD *)(inited + 40) = v31;
      *(_QWORD *)(inited + 48) = sub_23DDC5618();
      *(_QWORD *)(inited + 56) = v33;
      v34 = v27;
      v35 = sub_23DD3E908(inited);
      swift_bridgeObjectRelease();
      v54 = v35;
      sub_23DD48C00(0, (unint64_t *)&qword_256CFC758, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
      sub_23DD48C48();
      v36 = sub_23DDC668C();
      v38 = v37;
      swift_bridgeObjectRelease();
      v39 = swift_initStackObject();
      *(_OWORD *)(v39 + 16) = v53;
      *(_QWORD *)(v39 + 32) = v36;
      *(_QWORD *)(v39 + 40) = v38;
      *(_QWORD *)(v39 + 48) = sub_23DDC5624();
      *(_QWORD *)(v39 + 56) = v40;
      v41 = sub_23DD3E908(v39);
      swift_bridgeObjectRelease();
      v54 = v41;
      v24 = sub_23DDC668C();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v34, v28);
    }
    else
    {
      sub_23DDC66D4();
      type metadata accessor for HealthBalanceUI();
      v42 = swift_getObjCClassFromMetadata();
      v43 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v42);
      sub_23DDC5168();
      v24 = sub_23DDC6770();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
    }
  }
  return v24;
}

uint64_t OvernightMetricsViewModel.isLearnMoreDescriptionEligibleForAnnotations.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;

  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v7 - v1;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)&v7 - v1);
  v3 = sub_23DDC5420();
  v4 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23DCFEA1C((uint64_t)v2, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
    v5 = 0;
  }
  else
  {
    v5 = sub_23DDC5414();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  }
  return v5 & 1;
}

uint64_t sub_23DD405A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  double *v42;
  char v43;
  char *v44;
  double *v45;
  double *v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char v60;
  uint64_t result;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;

  sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v5 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v63 - v9;
  v11 = type metadata accessor for OvernightMetricsChartPoint();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v63 - v16;
  v18 = *(_QWORD *)(a1 + 16);
  if (v18 == *(_QWORD *)(a2 + 16))
  {
    if (!v18 || a1 == a2)
      return 1;
    v71 = v7;
    v68 = v5;
    v19 = 0;
    v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v21 = a1 + v20;
    v22 = a2 + v20;
    v23 = *(_QWORD *)(v15 + 72);
    v66 = v21;
    v67 = v18;
    v64 = v23;
    v65 = v22;
    v69 = v13;
    v70 = (char *)&v63 - v16;
    while (1)
    {
      v72 = v19;
      v24 = v23 * v19;
      sub_23DCF58EC(v21 + v23 * v19, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      sub_23DCF58EC(v22 + v24, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      if ((sub_23DDC5108() & 1) == 0)
        break;
      v25 = (int *)v11;
      v26 = *(int *)(v11 + 20);
      v27 = (uint64_t)&v17[v26];
      v28 = (uint64_t)&v13[v26];
      sub_23DDC512C();
      sub_23DCF535C(&qword_256CFCC60, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
      v29 = sub_23DDC66C8();
      v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68];
      sub_23DD3D270(v27, (uint64_t)v10, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v31 = (uint64_t)v10;
      v32 = (uint64_t)v71;
      sub_23DD3D270(v28, (uint64_t)v71, (unint64_t *)&qword_254326A68, v30);
      if ((v29 & 1) == 0)
      {
        v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68];
        sub_23DD48F24(v32, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
        sub_23DD48F24(v31, (unint64_t *)&qword_254326A68, v62);
        v13 = v69;
        v17 = v70;
        break;
      }
      v33 = sub_23DDC66C8();
      sub_23DD48F24(v32, (unint64_t *)&qword_254326A68, v30);
      sub_23DD48F24(v31, (unint64_t *)&qword_254326A68, v30);
      v13 = v69;
      v17 = v70;
      if ((v33 & 1) == 0)
        break;
      v10 = (char *)v31;
      v11 = (uint64_t)v25;
      v34 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      if ((sub_23DD40A48(*(_QWORD *)(v27 + v34[5]), *(_QWORD *)(v28 + v34[5])) & 1) == 0)
        break;
      v35 = v34[6];
      v36 = *(_QWORD *)(v27 + v35);
      v37 = *(_QWORD *)(v28 + v35);
      v38 = *(_QWORD *)(v36 + 16);
      if (v38 != *(_QWORD *)(v37 + 16))
        break;
      if (v38)
        v39 = v36 == v37;
      else
        v39 = 1;
      if (!v39)
      {
        if (*(double *)(v36 + 32) != *(double *)(v37 + 32))
          break;
        v45 = (double *)(v36 + 40);
        v46 = (double *)(v37 + 40);
        v47 = v38 - 1;
        while (v47)
        {
          v48 = *v45++;
          v49 = v48;
          v50 = *v46++;
          --v47;
          if (v49 != v50)
            goto LABEL_44;
        }
      }
      sub_23DD6D7F8(*(_QWORD *)(v27 + v34[7]), *(_QWORD *)(v28 + v34[7]));
      if ((v40 & 1) == 0)
        break;
      v41 = v25[6];
      v42 = (double *)&v17[v41];
      v43 = v17[v41 + 16];
      v44 = &v13[v41];
      if ((v43 & 1) != 0)
      {
        if (!v44[16])
          break;
      }
      else
      {
        if ((v44[16] & 1) != 0)
          break;
        if (*v42 != *(double *)v44 || v42[1] != *((double *)v44 + 1))
          break;
      }
      if (v17[v25[7]] != v13[v25[7]] || v17[v25[8]] != v13[v25[8]] || v17[v25[9]] != v13[v25[9]])
        break;
      v52 = v25[10];
      v53 = *(_QWORD *)&v17[v52];
      v54 = *(_QWORD *)&v17[v52 + 8];
      v55 = &v13[v52];
      if ((v53 != *(_QWORD *)v55 || v54 != *((_QWORD *)v55 + 1)) && (sub_23DDC6C08() & 1) == 0)
        break;
      v56 = v25[11];
      v57 = *(_QWORD *)&v17[v56];
      v58 = *(_QWORD *)&v17[v56 + 8];
      v59 = &v13[v56];
      if (v57 == *(_QWORD *)v59 && v58 == *((_QWORD *)v59 + 1))
      {
        sub_23DCF59A8((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
        sub_23DCF59A8((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      }
      else
      {
        v60 = sub_23DDC6C08();
        sub_23DCF59A8((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
        sub_23DCF59A8((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
        if ((v60 & 1) == 0)
          return 0;
      }
      v19 = v72 + 1;
      result = 1;
      v21 = v66;
      v23 = v64;
      v22 = v65;
      if (v72 + 1 == v67)
        return result;
    }
LABEL_44:
    sub_23DCF59A8((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    sub_23DCF59A8((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
  }
  return 0;
}

uint64_t sub_23DD40A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  double *v47;
  char v48;
  double *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;

  sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v5 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v64 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v64 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v64 - v15;
  v17 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v64 - v22;
  v24 = *(_QWORD *)(a1 + 16);
  if (v24 == *(_QWORD *)(a2 + 16))
  {
    v68 = v10;
    v69 = v16;
    v70 = v13;
    if (!v24 || a1 == a2)
      return 1;
    v73 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    v64 = *(_QWORD *)(v21 + 72);
    v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68];
    v65 = a1;
    v66 = a2;
    v67 = v7;
    v72 = v5;
    while (1)
    {
      v71 = v24;
      v28 = v73;
      sub_23DCF58EC(a1 + v73, (uint64_t)v23, type metadata accessor for IndividualOvernightMetricChartPoint);
      sub_23DCF58EC(a2 + v28, (uint64_t)v19, type metadata accessor for IndividualOvernightMetricChartPoint);
      sub_23DDC53A8();
      sub_23DCF535C(&qword_254326690, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE48]);
      sub_23DDC67C4();
      sub_23DDC67C4();
      if (v75 != v74 || (sub_23DDC5108() & 1) == 0)
        break;
      v29 = v17[6];
      v30 = &v23[v29];
      v31 = &v19[v29];
      sub_23DDC512C();
      sub_23DCF535C(&qword_256CFCC60, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
      v32 = sub_23DDC66C8();
      v33 = (uint64_t)v30;
      v34 = (uint64_t)v69;
      sub_23DD3D270(v33, (uint64_t)v69, (unint64_t *)&qword_254326A68, v25);
      v35 = (uint64_t)v31;
      v36 = (uint64_t)v70;
      sub_23DD3D270(v35, (uint64_t)v70, (unint64_t *)&qword_254326A68, v25);
      if ((v32 & 1) == 0)
        goto LABEL_31;
      v37 = v34;
      v38 = sub_23DDC66C8();
      sub_23DD48F24(v36, (unint64_t *)&qword_254326A68, v25);
      sub_23DD48F24(v37, (unint64_t *)&qword_254326A68, v25);
      if ((v38 & 1) == 0)
        break;
      v39 = v17[7];
      v40 = (uint64_t)&v23[v39];
      v41 = (uint64_t)&v19[v39];
      v42 = sub_23DDC66C8();
      v43 = (uint64_t)v68;
      sub_23DD3D270(v40, (uint64_t)v68, (unint64_t *)&qword_254326A68, v25);
      v44 = (uint64_t)v67;
      sub_23DD3D270(v41, (uint64_t)v67, (unint64_t *)&qword_254326A68, v25);
      if ((v42 & 1) == 0)
      {
        v36 = v44;
        v34 = v43;
LABEL_31:
        v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68];
        sub_23DD48F24(v36, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
        sub_23DD48F24(v34, (unint64_t *)&qword_254326A68, v63);
        break;
      }
      v45 = sub_23DDC66C8();
      sub_23DD48F24(v44, (unint64_t *)&qword_254326A68, v25);
      sub_23DD48F24(v43, (unint64_t *)&qword_254326A68, v25);
      if ((v45 & 1) == 0)
        break;
      v46 = v17[8];
      v47 = (double *)&v23[v46];
      v48 = v23[v46 + 8];
      v49 = (double *)&v19[v46];
      v50 = v19[v46 + 8];
      if ((v48 & 1) != 0)
      {
        if (!v50)
          break;
      }
      else
      {
        if (*v47 != *v49)
          LOBYTE(v50) = 1;
        if ((v50 & 1) != 0)
          break;
      }
      if ((sub_23DDC54BC() & 1) == 0)
        break;
      v51 = v17[10];
      v52 = *(_QWORD *)&v23[v51];
      v53 = *(_QWORD *)&v23[v51 + 8];
      v54 = &v19[v51];
      if ((v52 != *(_QWORD *)v54 || v53 != *((_QWORD *)v54 + 1)) && (sub_23DDC6C08() & 1) == 0)
        break;
      v55 = v17[11];
      v56 = *(_QWORD *)&v23[v55];
      v57 = *(_QWORD *)&v23[v55 + 8];
      v58 = &v19[v55];
      if ((v56 != *(_QWORD *)v58 || v57 != *((_QWORD *)v58 + 1)) && (sub_23DDC6C08() & 1) == 0)
        break;
      v59 = v17[12];
      v60 = *(_QWORD *)&v23[v59];
      v61 = *(_QWORD *)&v23[v59 + 8];
      v62 = &v19[v59];
      if (v60 == *(_QWORD *)v62 && v61 == *((_QWORD *)v62 + 1))
      {
        sub_23DCF59A8((uint64_t)v19, type metadata accessor for IndividualOvernightMetricChartPoint);
        sub_23DCF59A8((uint64_t)v23, type metadata accessor for IndividualOvernightMetricChartPoint);
      }
      else
      {
        v27 = sub_23DDC6C08();
        sub_23DCF59A8((uint64_t)v19, type metadata accessor for IndividualOvernightMetricChartPoint);
        sub_23DCF59A8((uint64_t)v23, type metadata accessor for IndividualOvernightMetricChartPoint);
        if ((v27 & 1) == 0)
          return 0;
      }
      a1 = v65;
      v73 += v64;
      result = 1;
      v24 = v71 - 1;
      a2 = v66;
      if (v71 == 1)
        return result;
    }
    sub_23DCF59A8((uint64_t)v19, type metadata accessor for IndividualOvernightMetricChartPoint);
    sub_23DCF59A8((uint64_t)v23, type metadata accessor for IndividualOvernightMetricChartPoint);
  }
  return 0;
}

uint64_t sub_23DD40FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v16 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v18 = *(_QWORD *)(v8 + 72);
      v13 = v11 - 1;
      v19 = a1;
      while (1)
      {
        v14 = v13;
        sub_23DCF58EC(a1 + v12, (uint64_t)v10, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
        sub_23DCF58EC(a2 + v12, (uint64_t)v6, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
        sub_23DDC53A8();
        sub_23DCF535C(&qword_254326690, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE48]);
        sub_23DDC67C4();
        sub_23DDC67C4();
        if (v21 != v20
          || v10[*(int *)(v4 + 20)] != v6[*(int *)(v4 + 20)]
          || (sub_23DDC5108() & 1) == 0
          || (sub_23DDC629C() & 1) == 0
          || (sub_23DDC61E8() & 1) == 0)
        {
          break;
        }
        v15 = v10[*(int *)(v4 + 36)] ^ v6[*(int *)(v4 + 36)];
        sub_23DCF59A8((uint64_t)v6, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
        sub_23DCF59A8((uint64_t)v10, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
        a1 = v19;
        if ((v15 & 1) == 0)
        {
          v13 = v14 - 1;
          v12 += v18;
          if (v14)
            continue;
        }
        v16 = v15 ^ 1;
        return v16 & 1;
      }
      sub_23DCF59A8((uint64_t)v6, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      sub_23DCF59A8((uint64_t)v10, type metadata accessor for OvernightMetricsAxisConfiguration.DayConfiguration.Label);
      v16 = 0;
    }
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_23DD411E8(uint64_t a1, uint64_t a2)
{
  return sub_23DD4128C(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], &qword_256CFCC60, MEMORY[0x24BDCE958]);
}

BOOL sub_23DD41204(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  _BOOL8 result;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a2 + 40);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_23DD41270(uint64_t a1, uint64_t a2)
{
  return sub_23DD4128C(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BE40238], &qword_256CFDDF8, MEMORY[0x24BE40248]);
}

uint64_t sub_23DD4128C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, unint64_t, uint64_t);
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t, uint64_t);
  BOOL v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);

  v10 = a3(0);
  MEMORY[0x24BDAC7A8](v10);
  v14.n128_f64[0] = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v31 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 == *(_QWORD *)(a2 + 16))
  {
    if (!v17 || a1 == a2)
    {
      v26 = 1;
    }
    else
    {
      v34 = v13;
      v35 = v12;
      v36 = a3;
      v18 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v31 = *(_QWORD *)(v12 + 72);
      v32 = a1;
      v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16);
      v19 = v17 - 1;
      v20 = v13;
      do
      {
        v21 = v33;
        ((void (*)(char *, unint64_t, uint64_t, __n128))v33)(v16, a1 + v18, v10, v14);
        v22 = a2;
        v21(v20, a2 + v18, v10);
        v23 = a4;
        v24 = a4;
        v25 = a5;
        sub_23DCF535C(v24, v36, a5);
        v26 = sub_23DDC66C8();
        v27 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
        v27(v20, v10);
        v27((uint64_t)v16, v10);
        v29 = v19-- != 0;
        if ((v26 & 1) == 0)
          break;
        v18 += v31;
        a5 = v25;
        a4 = v23;
        a2 = v22;
        a1 = v32;
      }
      while (v29);
    }
  }
  else
  {
    v26 = 0;
  }
  return v26 & 1;
}

uint64_t sub_23DD41430(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DD41464 + 4 * byte_23DDC9090[a1]))(0x65676E6152796164, 0xE800000000000000);
}

unint64_t sub_23DD41464()
{
  return 0xD000000000000019;
}

uint64_t sub_23DD41548()
{
  return 0x736574614479656BLL;
}

uint64_t sub_23DD41574()
{
  unsigned __int8 *v0;

  return sub_23DD41430(*v0);
}

uint64_t sub_23DD4157C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DD4BEDC(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DD415A0(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_23DD415AC()
{
  sub_23DD48CA0();
  return sub_23DDC6CEC();
}

uint64_t sub_23DD415D4()
{
  sub_23DD48CA0();
  return sub_23DDC6CF8();
}

uint64_t OvernightMetricsViewModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = v1;
  sub_23DD221EC(0, &qword_256CFDC88, (uint64_t (*)(void))sub_23DD48CA0, (uint64_t)&type metadata for OvernightMetricsViewModel.CodingKeys, MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v17 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DD48CA0();
  sub_23DDC6C98();
  LOBYTE(v20) = 0;
  sub_23DDC5330();
  sub_23DCF535C(&qword_256CFDC98, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FCF0], MEMORY[0x24BE3FD00]);
  sub_23DDC6BCC();
  if (!v2)
  {
    v10 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    v20 = *(_QWORD *)(v3 + v10[5]);
    v19 = 1;
    sub_23DCFB328(0, &qword_256CFDCA0, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DD48CE4();
    sub_23DDC6BCC();
    LOBYTE(v20) = 2;
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    sub_23DCF535C(&qword_256CFDCB8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod, (uint64_t)&unk_23DDC93BC);
    sub_23DDC6BCC();
    LOBYTE(v20) = 3;
    type metadata accessor for OvernightMetricsChartPoint();
    sub_23DCF535C(&qword_256CFDCC0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t)&protocol conformance descriptor for OvernightMetricsChartPoint);
    sub_23DDC6B9C();
    LOBYTE(v20) = 4;
    type metadata accessor for OvernightMetricsChartPointCollection();
    sub_23DCF535C(&qword_256CFDCC8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointCollection, (uint64_t)&protocol conformance descriptor for OvernightMetricsChartPointCollection);
    sub_23DDC6BCC();
    v20 = *(_QWORD *)(v3 + v10[9]);
    v19 = 5;
    sub_23DCFB328(0, &qword_256CFD6F0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DD48D74();
    sub_23DDC6BCC();
    v20 = *(_QWORD *)(v3 + v10[10]);
    v19 = 6;
    sub_23DCFB328(0, &qword_256CFDCD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v12 = v11;
    sub_23DD48E04();
    sub_23DDC6BCC();
    v13 = v3 + v10[11];
    v17[1] = v12;
    v18 = v13;
    LOBYTE(v20) = 7;
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v15 = v14;
    sub_23DD491B0(&qword_256CFDCE8, &qword_256CFDBF8, MEMORY[0x24BDCE920], MEMORY[0x24BEE08E0]);
    v18 = v15;
    sub_23DDC6BCC();
    LOBYTE(v20) = 8;
    sub_23DDC6BCC();
    v20 = *(_QWORD *)(v3 + v10[13]);
    v19 = 9;
    sub_23DDC6BCC();
    v20 = *(_QWORD *)(v3 + v10[14]);
    v19 = 10;
    sub_23DCFB328(0, &qword_256CFCA08, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DD48E94();
    sub_23DDC6BCC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t OvernightMetricsViewModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  void (*v73)(unint64_t, char *, uint64_t);
  void (*v74)(unint64_t, uint64_t);
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(unint64_t, char *, uint64_t);
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(unint64_t, char *, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  int *v149;
  uint64_t v150;
  char v151;
  uint64_t v152;

  v129 = a1;
  v113 = a2;
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v118 = (char *)&v112 - v3;
  v137 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v137);
  v119 = (char *)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_23DDC5330();
  v123 = *(_QWORD *)(v128 - 8);
  MEMORY[0x24BDAC7A8](v128);
  v121 = (char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD221EC(0, &qword_256CFDD00, (uint64_t (*)(void))sub_23DD48CA0, (uint64_t)&type metadata for OvernightMetricsViewModel.CodingKeys, MEMORY[0x24BEE33E0]);
  v122 = v6;
  v120 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v138 = (char *)&v112 - v7;
  sub_23DD3DBE8();
  v143 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v131 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v142 = (char *)&v112 - v11;
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v144 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v114 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v115 = (char *)&v112 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v141 = (char *)&v112 - v17;
  v133 = sub_23DDC512C();
  v130 = *(_QWORD *)(v133 - 8);
  MEMORY[0x24BDAC7A8](v133);
  v148 = (uint64_t)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v146 = (char *)&v112 - v20;
  v147 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x24BDAC7A8](v147);
  v116 = (char *)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v132 = (char *)&v112 - v23;
  v24 = sub_23DDC5180();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v112 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_23DDC51E0();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v112 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for OvernightMetricsViewModel(0);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v112 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = &v34[*(int *)(v35 + 24)];
  v37 = sub_23DDC55A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  v127 = (uint64_t)v36;
  swift_storeEnumTagMultiPayload();
  v149 = (int *)v32;
  v38 = *(int *)(v32 + 28);
  v145 = v34;
  v39 = (uint64_t)&v34[v38];
  v40 = type metadata accessor for OvernightMetricsChartPoint();
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56);
  v136 = v39;
  v117 = v40;
  v41(v39, 1, 1);
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v27, *MEMORY[0x24BDCEF70], v24);
  sub_23DDC518C();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  v42 = MEMORY[0x24BEE4AF8];
  v43 = (uint64_t)v132;
  *(_QWORD *)v132 = MEMORY[0x24BEE4AF8];
  v44 = v43 + *(int *)(v147 + 20);
  v134 = v31;
  v135 = v29;
  v45 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 16);
  v139 = (char *)v28;
  v45(v44, v31, v28);
  v46 = sub_23DDC536C();
  v47 = v42;
  v150 = v42;
  v48 = swift_bridgeObjectRetain();
  v49 = (uint64_t)v140;
  v50 = sub_23DD47248(v48, (void (*)(uint64_t *__return_ptr, uint64_t))sub_23DD4CC98);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v50 + 16) >= *(_QWORD *)(v46 + 16))
    v51 = *(_QWORD *)(v46 + 16);
  else
    v51 = *(_QWORD *)(v50 + 16);
  if (v51)
  {
    sub_23DD47350();
    v52 = sub_23DDC6AF4();
  }
  else
  {
    v52 = MEMORY[0x24BEE4B00];
  }
  v152 = v52;
  v53 = swift_bridgeObjectRetain();
  sub_23DD4813C(v53, v50, 1, &v152);
  v54 = (unint64_t)v146;
  v126 = v49;
  if (v49)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v55 = v149;
  v56 = v149[8];
  swift_bridgeObjectRelease();
  v57 = (uint64_t)v145;
  v58 = (uint64_t)&v145[v56];
  v59 = v152;
  (*(void (**)(char *, char *))(v135 + 8))(v134, v139);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v43 + *(int *)(v147 + 24)) = v59;
  v135 = v58;
  sub_23DCFBB58(v43, v58, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
  v134 = (char *)v55[9];
  v60 = v47;
  *(_QWORD *)&v134[v57] = v47;
  v61 = v55[10];
  *(_QWORD *)(v57 + v61) = v60;
  v62 = (char *)v55[11];
  sub_23DDC5114();
  v63 = v148;
  sub_23DDC5114();
  v64 = sub_23DCF535C((unint64_t *)&qword_254326A30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v65 = v133;
  if ((sub_23DDC66A4() & 1) != 0)
  {
    v125 = v61;
    v140 = &v62[v57];
    v66 = v54;
    v54 = (unint64_t)v131;
    v67 = v63;
    v63 = v65;
    v68 = v142;
    v69 = v143;
    v70 = &v142[*(int *)(v143 + 48)];
    v139 = (char *)v64;
    v71 = v130;
    v55 = *(int **)(v130 + 32);
    ((void (*)(char *, unint64_t, uint64_t))v55)(v142, v66, v63);
    v132 = v70;
    ((void (*)(char *, uint64_t, uint64_t))v55)(v70, v67, v63);
    v72 = v54 + *(int *)(v69 + 48);
    v73 = *(void (**)(unint64_t, char *, uint64_t))(v71 + 16);
    v73(v54, v68, v63);
    v124 = v73;
    v73(v72, v70, v63);
    v46 = v148;
    v57 = (uint64_t)v141;
    ((void (*)(char *, unint64_t, uint64_t))v55)(v141, v54, v63);
    v74 = *(void (**)(unint64_t, uint64_t))(v71 + 8);
    v74(v72, v63);
    v75 = *(int *)(v69 + 48);
    v61 = (uint64_t)v146;
    v62 = (char *)(v54 + v75);
    ((void (*)(unint64_t, char *, uint64_t))v55)(v54, v68, v63);
    ((void (*)(char *, char *, uint64_t))v55)(v62, v132, v63);
    ((void (*)(uint64_t, char *, uint64_t))v55)(v57 + *(int *)(v144 + 36), v62, v63);
    v132 = (char *)v74;
    v74(v54, v63);
    sub_23DD4845C(v57, (uint64_t)v140);
    v64 = v149[12];
    sub_23DDC5114();
    sub_23DDC5114();
    if ((sub_23DDC66A4() & 1) != 0)
    {
      v62 = v145;
      v139 = &v145[v64];
      v77 = v142;
      v76 = v143;
      v78 = &v142[*(int *)(v143 + 48)];
      ((void (*)(char *, uint64_t, uint64_t))v55)(v142, v61, v63);
      ((void (*)(char *, uint64_t, uint64_t))v55)(v78, v148, v63);
      v79 = v54 + *(int *)(v76 + 48);
      v80 = v63;
      v81 = v63;
      v82 = v124;
      v124(v54, v77, v80);
      v82(v79, v78, v81);
      v83 = (uint64_t)v141;
      ((void (*)(char *, unint64_t, uint64_t))v55)(v141, v54, v81);
      v84 = v79;
      v85 = v76;
      v86 = v132;
      ((void (*)(unint64_t, uint64_t))v132)(v84, v81);
      v87 = v54 + *(int *)(v85 + 48);
      ((void (*)(unint64_t, char *, uint64_t))v55)(v54, v77, v81);
      ((void (*)(unint64_t, char *, uint64_t))v55)(v87, v78, v81);
      ((void (*)(uint64_t, unint64_t, uint64_t))v55)(v83 + *(int *)(v144 + 36), v87, v81);
      ((void (*)(unint64_t, uint64_t))v86)(v54, v81);
      sub_23DD4845C(v83, (uint64_t)v139);
      v88 = v149;
      v55 = (int *)v149[13];
      v89 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)((char *)v55 + (_QWORD)v62) = MEMORY[0x24BEE4AF8];
      v148 = v88[14];
      *(_QWORD *)&v62[v148] = v89;
      v61 = (uint64_t)v129;
      __swift_project_boxed_opaque_existential_1(v129, v129[3]);
      sub_23DD48CA0();
      v90 = v126;
      sub_23DDC6C8C();
      v57 = v90;
      if (v90)
      {
        v63 = v127;
        __swift_destroy_boxed_opaque_existential_0(v61);
LABEL_13:
        sub_23DCF59A8(v63, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
        sub_23DCFEA1C(v136, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
        sub_23DCF59A8(v135, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8];
        sub_23DD48F24((uint64_t)v140, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
        sub_23DD48F24((uint64_t)v139, &qword_254326A60, v92);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      LOBYTE(v152) = 0;
      sub_23DCF535C(&qword_256CFDD08, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FCF0], MEMORY[0x24BE3FD18]);
      v91 = v121;
      v46 = v128;
      sub_23DDC6B78();
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v62, v91, v46);
      sub_23DCFB328(0, &qword_256CFDCA0, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
      v151 = 1;
      sub_23DD48F60();
      sub_23DDC6B78();
      v63 = v127;
      *(_QWORD *)&v62[v149[5]] = v152;
      LOBYTE(v152) = 2;
      sub_23DCF535C(&qword_256CFDD20, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod, (uint64_t)&unk_23DDC9394);
      v94 = (uint64_t)v119;
      sub_23DDC6B78();
      sub_23DD4904C(v94, v63, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
      LOBYTE(v152) = 3;
      sub_23DCF535C(&qword_256CFDD28, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t)&protocol conformance descriptor for OvernightMetricsChartPoint);
      v95 = (uint64_t)v118;
      sub_23DDC6B48();
      sub_23DD48FF0(v95, v136);
      LOBYTE(v152) = 4;
      sub_23DCF535C(&qword_256CFDD30, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPointCollection, (uint64_t)&protocol conformance descriptor for OvernightMetricsChartPointCollection);
      v96 = (uint64_t)v116;
      sub_23DDC6B78();
      sub_23DD4904C(v96, v135, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
      sub_23DCFB328(0, &qword_256CFD6F0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
      v151 = 5;
      sub_23DD49090();
      sub_23DDC6B78();
      v97 = v152;
      v98 = v134;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v98[(_QWORD)v62] = v97;
      sub_23DCFB328(0, &qword_256CFDCD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
      v64 = v99;
      v151 = 6;
      v54 = sub_23DD49120();
      sub_23DDC6B78();
      goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_16:
  v143 = v54;
  v146 = (char *)v64;
  v100 = v152;
  v101 = v125;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v62[v101] = v100;
  LOBYTE(v152) = 7;
  v102 = sub_23DD491B0(&qword_256CFDD48, &qword_256CFDC38, MEMORY[0x24BDCE960], MEMORY[0x24BEE0900]);
  v103 = (uint64_t)v115;
  v104 = v122;
  v147 = v102;
  sub_23DDC6B78();
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v120 + 8))(v138, v104);
    v106 = v145;
    __swift_destroy_boxed_opaque_existential_0(v61);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v106, v46);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  sub_23DD49240(v103, (uint64_t)v140);
  LOBYTE(v152) = 8;
  v105 = (uint64_t)v114;
  sub_23DDC6B78();
  sub_23DD49240(v105, (uint64_t)v139);
  v151 = 9;
  sub_23DDC6B78();
  v107 = v152;
  v108 = v145;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v55 + (_QWORD)v108) = v107;
  sub_23DCFB328(0, &qword_256CFCA08, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  v151 = 10;
  sub_23DD49294();
  sub_23DDC6B78();
  (*(void (**)(char *, uint64_t))(v120 + 8))(v138, v122);
  v109 = v152;
  v110 = (uint64_t)v145;
  v111 = v148;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v110 + v111) = v109;
  sub_23DCF58EC(v110, v113, type metadata accessor for OvernightMetricsViewModel);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v129);
  return sub_23DCF59A8(v110, type metadata accessor for OvernightMetricsViewModel);
}

uint64_t sub_23DD42B3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return OvernightMetricsViewModel.init(from:)(a1, a2);
}

uint64_t sub_23DD42B50(_QWORD *a1)
{
  return OvernightMetricsViewModel.encode(to:)(a1);
}

uint64_t OvernightMetricsViewModel.Summary.Variant.hash(into:)()
{
  return sub_23DDC6C5C();
}

BOOL static OvernightMetricsViewModel.Summary.Variant.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t OvernightMetricsViewModel.Summary.Variant.hashValue.getter()
{
  sub_23DDC6C50();
  sub_23DDC6C5C();
  return sub_23DDC6C80();
}

void OvernightMetricsViewModel.Summary.variant.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *OvernightMetricsViewModel.Summary.variant.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*OvernightMetricsViewModel.Summary.variant.modify())()
{
  return nullsub_1;
}

uint64_t OvernightMetricsViewModel.Summary.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OvernightMetricsViewModel.Summary.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*OvernightMetricsViewModel.Summary.value.modify())()
{
  return nullsub_1;
}

uint64_t OvernightMetricsViewModel.Summary.unit.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OvernightMetricsViewModel.Summary.unit.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*OvernightMetricsViewModel.Summary.unit.modify())()
{
  return nullsub_1;
}

uint64_t OvernightMetricsViewModel.Summary.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OvernightMetricsViewModel.Summary.description.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*OvernightMetricsViewModel.Summary.description.modify())()
{
  return nullsub_1;
}

uint64_t OvernightMetricsViewModel.Summary.shortenedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OvernightMetricsViewModel.Summary.shortenedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t (*OvernightMetricsViewModel.Summary.shortenedDescription.modify())()
{
  return nullsub_1;
}

uint64_t OvernightMetricsViewModel.summary.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjCClassFromMetadata;
  id v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v3);
  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v26 - v5;
  v7 = OvernightMetricsViewModel.changeCountDescription.getter();
  if (!v8)
  {
    OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v6);
    v19 = sub_23DDC5420();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v6, 1, v19) == 1)
    {
      sub_23DCFEA1C((uint64_t)v6, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
    }
    else
    {
      v21 = sub_23DDC56CC();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v19);
      if (v21 > 0)
      {
        v26 = v21;
        sub_23DD49324();
        v9 = sub_23DDC69C8();
        v10 = v22;
        result = 0;
        v18 = 0;
        v14 = 0;
        v16 = 0;
        v13 = 1;
        goto LABEL_14;
      }
    }
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v24 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    v9 = sub_23DDC6770();
    v10 = v25;
    result = 0;
    v18 = 0;
    v14 = 0;
    v16 = 0;
    v13 = 0;
    goto LABEL_14;
  }
  v9 = v7;
  v10 = v8;
  if (OvernightMetricsViewModel.changeDetectedCountToday.getter())
    v12 = 0;
  else
    v12 = (v11 & 1) == 0;
  if (v12)
    v13 = 2;
  else
    v13 = 3;
  v14 = OvernightMetricsViewModel.formattedDateRange.getter();
  v16 = v15;
  result = sub_23DD433E4();
LABEL_14:
  *(_BYTE *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 64) = v18;
  return result;
}

uint64_t OvernightMetricsViewModel.changeCountDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  uint64_t ObjCClassFromMetadata;
  id v7;

  v0 = sub_23DDC671C();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v2);
  v3 = OvernightMetricsViewModel.changeDetectedCountToday.getter();
  result = 0;
  if ((v5 & 1) == 0)
  {
    if (v3)
    {
      sub_23DDC6710();
      sub_23DDC6704();
      sub_23DDC66EC();
      sub_23DDC6704();
      sub_23DDC6728();
    }
    else
    {
      sub_23DDC66D4();
    }
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v7 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    return sub_23DDC6770();
  }
  return result;
}

uint64_t OvernightMetricsViewModel.formattedDateRange.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v10;

  sub_23DCFB328(0, &qword_254326640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v10 - v1;
  sub_23DD43C64((uint64_t)&v10 - v1);
  v3 = sub_23DDC4EE0();
  v4 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23DCFEA1C((uint64_t)v2, &qword_254326640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
    return 0;
  }
  else
  {
    if (qword_256CFC0B0 != -1)
      swift_once();
    v6 = (void *)qword_256CFF218;
    v7 = (void *)sub_23DDC4EA4();
    v8 = objc_msgSend(v6, sel_stringFromDateInterval_, v7);

    if (v8)
    {
      v5 = sub_23DDC6764();

    }
    else
    {
      v5 = 0;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  }
  return v5;
}

uint64_t sub_23DD433E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t ObjCClassFromMetadata;
  id v42;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;

  v0 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v0);
  v58 = (char *)&v44 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v2);
  v57 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23DDC50A8();
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v54 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DDC5084();
  v50 = *(_QWORD *)(v6 - 8);
  v51 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v47 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23DDC5090();
  v48 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v45 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_23DDC50F0();
  v44 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v46 = (char *)&v44 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v52 = (char *)&v44 - v15;
  v16 = sub_23DDC671C();
  MEMORY[0x24BDAC7A8](v16);
  v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_254326640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v44 - v19;
  sub_23DCFB328(0, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], v17);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v44 - v22;
  v24 = sub_23DDC512C();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD43C64((uint64_t)v20);
  v28 = sub_23DDC4EE0();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v20, 1, v28) == 1)
  {
    sub_23DCFEA1C((uint64_t)v20, &qword_254326640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v23, 1, 1, v24);
  }
  else
  {
    sub_23DDC4EB0();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v23, 0, 1, v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) != 1)
    {
      v31 = v27;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v23, v24);
      sub_23DDC6710();
      v32 = sub_23DDC6704();
      MEMORY[0x2426418B0](v32);
      v33 = v47;
      sub_23DDC5078();
      v34 = v45;
      sub_23DDC506C();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v33, v51);
      v35 = v46;
      sub_23DDC5060();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v34, v49);
      v36 = *(void (**)(char *, uint64_t))(v44 + 8);
      v37 = v11;
      v38 = v53;
      v36(v37, v53);
      v39 = v54;
      sub_23DDC509C();
      v40 = v52;
      sub_23DDC50D8();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v56);
      v36(v35, v38);
      sub_23DCF535C(&qword_254326658, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE2A0], MEMORY[0x24BDCE290]);
      sub_23DD0B190();
      sub_23DDC66E0();
      v36(v40, v38);
      sub_23DDC6704();
      sub_23DDC6728();
      type metadata accessor for HealthBalanceUI();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v42 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      sub_23DDC5168();
      v30 = sub_23DDC6770();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v31, v24);
      return v30;
    }
  }
  sub_23DCFEA1C((uint64_t)v23, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  return 0;
}

uint64_t OvernightMetricsViewModel.warmupDaysRemaining.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v7 - v1;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)&v7 - v1);
  v3 = sub_23DDC5420();
  v4 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23DCFEA1C((uint64_t)v2, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
    return 0;
  }
  else
  {
    v5 = sub_23DDC56CC();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  }
  return v5;
}

uint64_t OvernightMetricsViewModel.lastUpdatedDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v19 - v4;
  sub_23DCFB328(0, &qword_254326640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], v2);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - v7;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v5);
  v9 = sub_23DDC5420();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    v11 = &qword_2543266B8;
    v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0];
    v13 = (uint64_t)v5;
LABEL_5:
    sub_23DCFEA1C(v13, v11, v12);
    v16 = sub_23DDC512C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 1, 1, v16);
  }
  sub_23DDC56B4();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v5, v9);
  v14 = sub_23DDC4EE0();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v14) == 1)
  {
    v11 = &qword_254326640;
    v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878];
    v13 = (uint64_t)v8;
    goto LABEL_5;
  }
  sub_23DDC4EB0();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v14);
  v18 = sub_23DDC512C();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 0, 1, v18);
}

uint64_t sub_23DD43C64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a1;
  v2 = type metadata accessor for OvernightMetricsViewModel(0);
  MEMORY[0x24BDAC7A8](v2);
  v37 = (uint64_t)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23DDC53CC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_23DDC5528();
  v8 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v36 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v31 - v15;
  sub_23DCFB328(0, &qword_254326640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], v11);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v31 - v18;
  v35 = v1;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v16);
  v20 = sub_23DDC5420();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v16, 1, v20);
  v33 = v21;
  if (v23 == 1)
  {
    sub_23DCFEA1C((uint64_t)v16, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
    v24 = sub_23DDC4EE0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v19, 1, 1, v24);
  }
  else
  {
    v32 = v22;
    sub_23DDC53D8();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v20);
    sub_23DDC551C();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v34);
    sub_23DDC53B4();
    v22 = v32;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v26 = v37;
  v25 = v38;
  v27 = (uint64_t)v36;
  sub_23DCF58EC(v35, v37, type metadata accessor for OvernightMetricsViewModel);
  v28 = sub_23DDC4EE0();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v19, 1, v28) == 1)
  {
    OvernightMetricsViewModel.daySummaryForToday.getter(v27);
    if (v22((char *)v27, 1, v20) == 1)
    {
      sub_23DCF59A8(v26, type metadata accessor for OvernightMetricsViewModel);
      sub_23DCFEA1C(v27, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v25, 1, 1, v28);
    }
    else
    {
      sub_23DDC56B4();
      sub_23DCF59A8(v26, type metadata accessor for OvernightMetricsViewModel);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v27, v20);
    }
    return sub_23DCFEA1C((uint64_t)v19, &qword_254326640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
  }
  else
  {
    sub_23DCF59A8(v26, type metadata accessor for OvernightMetricsViewModel);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v25, v19, v28);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v25, 0, 1, v28);
  }
}

uint64_t sub_23DD44024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = sub_23DDC5528();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC53F0();
  sub_23DDC54F8();
  sub_23DDC54E0();
  sub_23DDC52AC();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t OvernightMetricsViewModel.configurationIssue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = a1;
  v2 = sub_23DDC53A8();
  v55 = *(_QWORD *)(v2 - 8);
  v56 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v54 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v57);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v49 - v8;
  sub_23DCFB328(0, &qword_2543266D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE404A8], v6);
  MEMORY[0x24BDAC7A8](v10);
  v53 = (char *)&v49 - v11;
  v12 = sub_23DDC55DC();
  v50 = *(_QWORD *)(v12 - 8);
  v51 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v52 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23DDC5528();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], v6);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v49 - v19;
  v21 = v1;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)&v49 - v19);
  v22 = sub_23DDC5420();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22) == 1)
  {
    sub_23DCFEA1C((uint64_t)v20, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
  }
  else
  {
    sub_23DDC53D8();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    v24 = sub_23DDC5504();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if ((v24 & 1) != 0)
    {
      v25 = sub_23DDC55C4();
      v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
      v27 = v58;
      return v26(v27, 1, 1, v25);
    }
  }
  v28 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_23DCF58EC(v21 + *(int *)(v28 + 24), (uint64_t)v5, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23DCF59A8((uint64_t)v5, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v29 = sub_23DDC55A0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v9, 1, 1, v29);
LABEL_8:
    v32 = &qword_254326A70;
    v33 = (uint64_t (*)(uint64_t))MEMORY[0x24BE40438];
    v34 = (uint64_t)v9;
LABEL_9:
    sub_23DCFEA1C(v34, v32, v33);
LABEL_10:
    v35 = v58;
    v25 = sub_23DDC55C4();
    v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
    v27 = v35;
    return v26(v27, 1, 1, v25);
  }
  sub_23DD3CE14((uint64_t)v5, (uint64_t)v9);
  v30 = sub_23DDC55A0();
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v9, 1, v30) == 1)
    goto LABEL_8;
  v38 = v54;
  v37 = v55;
  v39 = v56;
  (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v54, *MEMORY[0x24BE3FDC0], v56);
  v40 = v53;
  sub_23DDC5594();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v30);
  v41 = sub_23DDC55F4();
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41) == 1)
  {
    v32 = &qword_2543266D8;
    v33 = (uint64_t (*)(uint64_t))MEMORY[0x24BE404A8];
    v34 = (uint64_t)v40;
    goto LABEL_9;
  }
  v43 = v52;
  sub_23DDC55E8();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
  v45 = v50;
  v44 = v51;
  if ((*(unsigned int (**)(char *, uint64_t))(v50 + 88))(v43, v51) != *MEMORY[0x24BE40480])
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v44);
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t))(v45 + 96))(v43, v44);
  v46 = sub_23DDC55C4();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = v58;
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v58, v43, v46);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v48, 0, 1, v46);
}

BOOL OvernightMetricsViewModel.hasConfigurationIssue.getter()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;

  v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BE40470];
  sub_23DCFB328(0, &qword_256CFDD68, (uint64_t (*)(uint64_t))MEMORY[0x24BE40470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v7 - v2;
  OvernightMetricsViewModel.configurationIssue.getter((uint64_t)&v7 - v2);
  v4 = sub_23DDC55C4();
  v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4) != 1;
  sub_23DCFEA1C((uint64_t)v3, &qword_256CFDD68, v0);
  return v5;
}

uint64_t OvernightMetricsViewModel.isWatchExperienceAvailable.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v15;

  v0 = sub_23DDC5528();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - v5;
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)&v15 - v5);
  v7 = sub_23DDC5420();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_23DCFEA1C((uint64_t)v6, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
  }
  else
  {
    sub_23DDC53D8();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    v9 = sub_23DDC5504();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if ((v9 & 1) != 0)
      return 1;
  }
  v11 = (void *)sub_23DD4480C();
  if (!v11)
    return 2;
  v12 = v11;
  v13 = objc_msgSend(v11, sel_objectForKeyedSubscript_, *MEMORY[0x24BDD2CB8]);

  v10 = objc_msgSend(v13, sel_areAllRequirementsSatisfied);
  return (uint64_t)v10;
}

uint64_t sub_23DD4480C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - v5;
  v7 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_23DCF58EC(v0 + *(int *)(v7 + 24), (uint64_t)v3, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23DCF59A8((uint64_t)v3, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v8 = sub_23DDC55A0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
  }
  else
  {
    sub_23DD3CE14((uint64_t)v3, (uint64_t)v6);
    v9 = sub_23DDC55A0();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) != 1)
    {
      v11 = sub_23DDC55AC();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v9);
      return v11;
    }
  }
  sub_23DCFEA1C((uint64_t)v6, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
  return 0;
}

uint64_t OvernightMetricsViewModel.watchExperienceRequiresSetup.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v22;
  id v23;
  unsigned __int8 v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v1 = v0;
  v2 = sub_23DDC5528();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v29 - v8;
  v10 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], v6);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v29 - v14;
  v16 = type metadata accessor for OvernightMetricsViewModel(0);
  sub_23DCF58EC(v1 + *(int *)(v16 + 24), (uint64_t)v12, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23DCF59A8((uint64_t)v12, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v17 = sub_23DDC55A0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 1, 1, v17);
LABEL_4:
    sub_23DCFEA1C((uint64_t)v15, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
    return 2;
  }
  sub_23DD3CE14((uint64_t)v12, (uint64_t)v15);
  v18 = sub_23DDC55A0();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18) == 1)
    goto LABEL_4;
  v22 = (void *)sub_23DDC55AC();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v18);
  if (v22)
  {
    v23 = objc_msgSend(v22, sel_objectForKeyedSubscript_, *MEMORY[0x24BDD2CB8]);
    v24 = objc_msgSend(v23, sel_areAllRequirementsSatisfied);

    if ((v24 & 1) != 0)
    {
      v25 = objc_msgSend(v22, sel_objectForKeyedSubscript_, *MEMORY[0x24BDD2C50]);
      v20 = objc_msgSend(v25, sel_areAllRequirementsSatisfied);

      return (uint64_t)v20;
    }
    OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v9);
    v26 = sub_23DDC5420();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v9, 1, v26) != 1)
    {
      sub_23DDC53D8();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v26);
      v28 = sub_23DDC5504();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);

      return (v28 & 1) == 0;
    }
    sub_23DCFEA1C((uint64_t)v9, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);

  }
  return 2;
}

uint64_t sub_23DD44CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;

  v47 = a1;
  v45 = a3;
  v48 = (char *)a2;
  v3 = sub_23DDC53CC();
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v41 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v44 = (uint64_t)&v37 - v7;
  v8 = sub_23DDC5528();
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v38 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_23DDC55DC();
  v10 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x24BE40438];
  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], v5);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v37 - v15;
  sub_23DCFB328(0, &qword_2543266D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE404A8], v5);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v37 - v18;
  v20 = sub_23DDC55F4();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD4C634((uint64_t)v48, (uint64_t)v16, &qword_254326A70, v13);
  v24 = sub_23DDC55A0();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v16, 1, v24) == 1)
  {
    sub_23DCFEA1C((uint64_t)v16, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
LABEL_4:
    sub_23DCFEA1C((uint64_t)v19, &qword_2543266D8, (uint64_t (*)(uint64_t))MEMORY[0x24BE404A8]);
    return 1;
  }
  v48 = v23;
  sub_23DDC5594();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    goto LABEL_4;
  v27 = v20;
  v28 = (uint64_t)v48;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v48, v19, v20);
  sub_23DDC55E8();
  v29 = v46;
  if ((*(unsigned int (**)(char *, uint64_t))(v10 + 88))(v12, v46) != *MEMORY[0x24BE40488])
  {
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v28, v20);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v29);
    return 1;
  }
  v30 = v21;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v29);
  v31 = v44;
  OvernightMetricsViewModel.daySummaryForToday.getter(v44);
  v32 = sub_23DDC5420();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v48, v27);
    sub_23DCFEA1C(v31, &qword_2543266B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0]);
    return 0;
  }
  else
  {
    v34 = v38;
    sub_23DDC53F0();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    v35 = v41;
    sub_23DDC551C();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v40);
    v36 = (void *)sub_23DDC53C0();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v48, v27);
    if (v36)
    {

      return 1;
    }
    return 0;
  }
}

unint64_t sub_23DD45158@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_23DD6C74C(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_23DD45160(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(sub_23DDC53A8() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_23DDA9684(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_23DD4521C(v6);
  *a1 = v3;
  return result;
}

_QWORD *sub_23DD451E0(_QWORD *a1)
{
  return sub_23DD566B0(0, a1[2], 0, a1);
}

uint64_t sub_23DD451F4(unint64_t a1)
{
  return sub_23DD56C34(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_23DD45208(unint64_t a1)
{
  return sub_23DD56F40(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_23DD4521C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(void);
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  void (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  void (*v76)(char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  char v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  void (*v156)(char *, uint64_t);
  void (*v157)(char *, uint64_t, uint64_t);
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  void (*v168)(char *, uint64_t, uint64_t);
  uint64_t v169;

  v2 = v1;
  v161 = sub_23DDC5390();
  v154 = *(_QWORD *)(v161 - 8);
  v4 = MEMORY[0x24BDAC7A8](v161);
  v160 = (char *)&v144 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v159 = (char *)&v144 - v6;
  v7 = sub_23DDC53A8();
  v169 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v150 = (char *)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v166 = (char *)&v144 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v158 = (char *)&v144 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v162 = (char *)&v144 - v14;
  v15 = a1[1];
  result = sub_23DDC6BD8();
  if (result >= v15)
  {
    if (v15 < 0)
      goto LABEL_137;
    if (v15)
      return sub_23DD45D78(0, v15, 1, a1);
    return result;
  }
  if (v15 >= 0)
    v17 = v15;
  else
    v17 = v15 + 1;
  if (v15 < -1)
    goto LABEL_145;
  v145 = result;
  if (v15 < 2)
  {
    v21 = (char *)MEMORY[0x24BEE4AF8];
    v152 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80));
    v144 = MEMORY[0x24BEE4AF8];
    if (v15 != 1)
    {
      v23 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_103:
      if (v23 >= 2)
      {
        v136 = *a1;
        do
        {
          v137 = v23 - 2;
          if (v23 < 2)
            goto LABEL_132;
          if (!v136)
            goto LABEL_144;
          v138 = v21;
          v139 = v21 + 32;
          v140 = *(_QWORD *)&v21[16 * v137 + 32];
          v141 = *(_QWORD *)&v21[16 * v23 + 24];
          sub_23DD46074(v136 + *(_QWORD *)(v169 + 72) * v140, v136 + *(_QWORD *)(v169 + 72) * *(_QWORD *)&v139[16 * v23 - 16], v136 + *(_QWORD *)(v169 + 72) * v141, v152);
          if (v2)
            break;
          if (v141 < v140)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v138 = sub_23DDA9670((uint64_t)v138);
          if (v137 >= *((_QWORD *)v138 + 2))
            goto LABEL_134;
          v142 = &v138[16 * v137 + 32];
          *(_QWORD *)v142 = v140;
          *((_QWORD *)v142 + 1) = v141;
          v143 = *((_QWORD *)v138 + 2);
          if (v23 > v143)
            goto LABEL_135;
          v21 = v138;
          memmove(&v138[16 * v23 + 16], &v138[16 * v23 + 32], 16 * (v143 - v23));
          *((_QWORD *)v138 + 2) = v143 - 1;
          v23 = v143 - 1;
        }
        while (v143 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v144 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v18 = v17 >> 1;
    v19 = sub_23DDC67DC();
    *(_QWORD *)(v19 + 16) = v18;
    v20 = *(unsigned __int8 *)(v169 + 80);
    v144 = v19;
    v152 = v19 + ((v20 + 32) & ~v20);
  }
  v22 = 0;
  v21 = (char *)MEMORY[0x24BEE4AF8];
  v164 = a1;
  v165 = v7;
  while (1)
  {
    v146 = v21;
    v24 = (uint64_t)v22;
    v25 = v22 + 1;
    v151 = (uint64_t)v22;
    if ((uint64_t)(v22 + 1) >= v15)
    {
      v39 = (uint64_t)(v22 + 1);
      v21 = v146;
    }
    else
    {
      v26 = *a1;
      v147 = v26;
      v167 = *(char **)(v169 + 72);
      v27 = v167;
      v28 = *(void (**)(void))(v169 + 16);
      v28();
      v29 = v26 + (_QWORD)v27 * v24;
      v30 = v158;
      v157 = (void (*)(char *, uint64_t, uint64_t))v28;
      ((void (*)(char *, uint64_t, uint64_t))v28)(v158, v29, v7);
      v31 = v159;
      sub_23DDC539C();
      v32 = v160;
      v33 = v30;
      sub_23DDC539C();
      LODWORD(v163) = sub_23DDC5384();
      v34 = *(void (**)(char *, uint64_t))(v154 + 8);
      v35 = v161;
      v34(v32, v161);
      v36 = v31;
      v37 = v147;
      v156 = v34;
      v34(v36, v35);
      v38 = *(void (**)(char *, uint64_t))(v169 + 8);
      v38(v33, v7);
      v155 = (char *)v38;
      v38(v162, v7);
      v39 = v151 + 2;
      if (v151 + 2 < v15)
      {
        v153 = (_QWORD)v167 * (_QWORD)v25;
        v148 = (_QWORD)v167 * v39;
        v149 = v2;
        while (1)
        {
          v40 = v15;
          v41 = v39;
          v42 = v162;
          v43 = v165;
          v44 = v157;
          v157(v162, v37 + v148, v165);
          v45 = v158;
          v44(v158, v37 + v153, v43);
          v46 = v159;
          sub_23DDC539C();
          v47 = v160;
          sub_23DDC539C();
          LODWORD(v168) = sub_23DDC5384();
          v48 = v47;
          v49 = v161;
          v50 = v156;
          v156(v48, v161);
          v50(v46, v49);
          v51 = (void (*)(char *, uint64_t))v155;
          ((void (*)(char *, uint64_t))v155)(v45, v43);
          v51(v42, v43);
          if (((v163 ^ v168) & 1) != 0)
            break;
          v39 = v41 + 1;
          v37 += (uint64_t)v167;
          v15 = v40;
          if (v40 == v39)
          {
            v39 = v40;
            v7 = v165;
            v2 = v149;
            goto LABEL_23;
          }
        }
        v7 = v165;
        v2 = v149;
        v39 = v41;
        v15 = v40;
      }
LABEL_23:
      a1 = v164;
      v21 = v146;
      v24 = v151;
      if ((v163 & 1) != 0)
      {
        if (v39 < v151)
          goto LABEL_138;
        if (v151 < v39)
        {
          v163 = v15;
          v52 = 0;
          v53 = v167;
          v54 = (_QWORD)v167 * (v39 - 1);
          v55 = v39 * (_QWORD)v167;
          v56 = v151;
          v57 = v151 * (_QWORD)v167;
          do
          {
            if (v56 != v39 + v52 - 1)
            {
              if (!v147)
                goto LABEL_143;
              v149 = v2;
              v59 = v147 + v57;
              v60 = (char *)(v147 + v54);
              v61 = v147;
              v168 = *(void (**)(char *, uint64_t, uint64_t))(v169 + 32);
              v168(v150, v147 + v57, v165);
              if (v57 < v54 || v59 >= v61 + v55)
              {
                v58 = v165;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                v58 = v165;
                if (v57 != v54)
                  swift_arrayInitWithTakeBackToFront();
              }
              v168(v60, (uint64_t)v150, v58);
              v2 = v149;
              v53 = v167;
            }
            ++v56;
            --v52;
            v54 -= (uint64_t)v53;
            v55 -= (uint64_t)v53;
            v57 += (uint64_t)v53;
          }
          while (v56 < v39 + v52);
          a1 = v164;
          v7 = v165;
          v21 = v146;
          v24 = v151;
          v15 = v163;
        }
      }
    }
    if (v39 < v15)
    {
      if (__OFSUB__(v39, v24))
        goto LABEL_136;
      if (v39 - v24 < v145)
        break;
    }
LABEL_55:
    if (v39 < v24)
      goto LABEL_131;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v163 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v21 = sub_23DDA92F0(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
    v86 = *((_QWORD *)v21 + 2);
    v85 = *((_QWORD *)v21 + 3);
    v23 = v86 + 1;
    if (v86 >= v85 >> 1)
      v21 = sub_23DDA92F0((char *)(v85 > 1), v86 + 1, 1, v21);
    *((_QWORD *)v21 + 2) = v23;
    v87 = v21 + 32;
    v88 = &v21[16 * v86 + 32];
    v89 = v163;
    *(_QWORD *)v88 = v24;
    *((_QWORD *)v88 + 1) = v89;
    if (v86)
    {
      while (1)
      {
        v90 = v23 - 1;
        if (v23 >= 4)
        {
          v95 = &v87[16 * v23];
          v96 = *((_QWORD *)v95 - 8);
          v97 = *((_QWORD *)v95 - 7);
          v101 = __OFSUB__(v97, v96);
          v98 = v97 - v96;
          if (v101)
            goto LABEL_120;
          v100 = *((_QWORD *)v95 - 6);
          v99 = *((_QWORD *)v95 - 5);
          v101 = __OFSUB__(v99, v100);
          v93 = v99 - v100;
          v94 = v101;
          if (v101)
            goto LABEL_121;
          v102 = v23 - 2;
          v103 = &v87[16 * v23 - 32];
          v105 = *(_QWORD *)v103;
          v104 = *((_QWORD *)v103 + 1);
          v101 = __OFSUB__(v104, v105);
          v106 = v104 - v105;
          if (v101)
            goto LABEL_123;
          v101 = __OFADD__(v93, v106);
          v107 = v93 + v106;
          if (v101)
            goto LABEL_126;
          if (v107 >= v98)
          {
            v125 = &v87[16 * v90];
            v127 = *(_QWORD *)v125;
            v126 = *((_QWORD *)v125 + 1);
            v101 = __OFSUB__(v126, v127);
            v128 = v126 - v127;
            if (v101)
              goto LABEL_130;
            v118 = v93 < v128;
            goto LABEL_92;
          }
        }
        else
        {
          if (v23 != 3)
          {
            v119 = *((_QWORD *)v21 + 4);
            v120 = *((_QWORD *)v21 + 5);
            v101 = __OFSUB__(v120, v119);
            v112 = v120 - v119;
            v113 = v101;
            goto LABEL_86;
          }
          v92 = *((_QWORD *)v21 + 4);
          v91 = *((_QWORD *)v21 + 5);
          v101 = __OFSUB__(v91, v92);
          v93 = v91 - v92;
          v94 = v101;
        }
        if ((v94 & 1) != 0)
          goto LABEL_122;
        v102 = v23 - 2;
        v108 = &v87[16 * v23 - 32];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v111 = __OFSUB__(v109, v110);
        v112 = v109 - v110;
        v113 = v111;
        if (v111)
          goto LABEL_125;
        v114 = &v87[16 * v90];
        v116 = *(_QWORD *)v114;
        v115 = *((_QWORD *)v114 + 1);
        v101 = __OFSUB__(v115, v116);
        v117 = v115 - v116;
        if (v101)
          goto LABEL_128;
        if (__OFADD__(v112, v117))
          goto LABEL_129;
        if (v112 + v117 >= v93)
        {
          v118 = v93 < v117;
LABEL_92:
          if (v118)
            v90 = v102;
          goto LABEL_94;
        }
LABEL_86:
        if ((v113 & 1) != 0)
          goto LABEL_124;
        v121 = &v87[16 * v90];
        v123 = *(_QWORD *)v121;
        v122 = *((_QWORD *)v121 + 1);
        v101 = __OFSUB__(v122, v123);
        v124 = v122 - v123;
        if (v101)
          goto LABEL_127;
        if (v124 < v112)
          goto LABEL_14;
LABEL_94:
        v129 = v90 - 1;
        if (v90 - 1 >= v23)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!*v164)
          goto LABEL_142;
        v130 = v21;
        v131 = &v87[16 * v129];
        v132 = *(_QWORD *)v131;
        v133 = &v87[16 * v90];
        v134 = *((_QWORD *)v133 + 1);
        sub_23DD46074(*v164 + *(_QWORD *)(v169 + 72) * *(_QWORD *)v131, *v164 + *(_QWORD *)(v169 + 72) * *(_QWORD *)v133, *v164 + *(_QWORD *)(v169 + 72) * v134, v152);
        if (v2)
          goto LABEL_114;
        if (v134 < v132)
          goto LABEL_117;
        if (v90 > *((_QWORD *)v130 + 2))
          goto LABEL_118;
        *(_QWORD *)v131 = v132;
        *(_QWORD *)&v87[16 * v129 + 8] = v134;
        v135 = *((_QWORD *)v130 + 2);
        if (v90 >= v135)
          goto LABEL_119;
        v21 = v130;
        v23 = v135 - 1;
        memmove(&v87[16 * v90], v133 + 16, 16 * (v135 - 1 - v90));
        *((_QWORD *)v130 + 2) = v135 - 1;
        v7 = v165;
        if (v135 <= 2)
          goto LABEL_14;
      }
    }
    v23 = 1;
LABEL_14:
    v22 = (char *)v163;
    a1 = v164;
    v15 = v164[1];
    if (v163 >= v15)
      goto LABEL_103;
  }
  if (__OFADD__(v24, v145))
    goto LABEL_139;
  if (v24 + v145 >= v15)
    v62 = v15;
  else
    v62 = v24 + v145;
  if (v62 >= v24)
  {
    if (v39 != v62)
    {
      v148 = v62;
      v149 = v2;
      v63 = *(char **)(v169 + 72);
      v153 = *(_QWORD *)(v169 + 16);
      v64 = (_QWORD)v63 * (v39 - 1);
      v155 = v63;
      v65 = v39 * (_QWORD)v63;
      do
      {
        v67 = 0;
        v163 = v39;
        v156 = (void (*)(char *, uint64_t))v65;
        v157 = (void (*)(char *, uint64_t, uint64_t))v64;
        while (1)
        {
          v68 = *a1;
          v167 = (char *)(v65 + v67);
          v168 = (void (*)(char *, uint64_t, uint64_t))v24;
          v69 = (char *)(v65 + v67 + v68);
          v70 = v162;
          v71 = (void (*)(char *, uint64_t, uint64_t))v153;
          ((void (*)(char *, char *, uint64_t))v153)(v162, v69, v7);
          v72 = v64 + v67 + v68;
          v73 = v158;
          v71(v158, v72, v7);
          v74 = v159;
          sub_23DDC539C();
          v75 = v160;
          sub_23DDC539C();
          LOBYTE(v68) = sub_23DDC5384();
          v76 = *(void (**)(char *, uint64_t))(v154 + 8);
          v77 = v75;
          v78 = v161;
          v76(v77, v161);
          v79 = v78;
          v7 = v165;
          v76(v74, v79);
          v80 = *(void (**)(char *, uint64_t))(v169 + 8);
          v80(v73, v7);
          v80(v70, v7);
          if ((v68 & 1) == 0)
            break;
          v81 = *a1;
          if (!*a1)
            goto LABEL_141;
          v65 = (uint64_t)v156;
          v64 = (uint64_t)v157;
          v82 = (char *)v157 + v81 + v67;
          v83 = *(void (**)(char *, char *, uint64_t))(v169 + 32);
          v83(v166, (char *)v156 + v81 + v67, v7);
          swift_arrayInitWithTakeFrontToBack();
          v83(v82, v166, v7);
          v67 -= (uint64_t)v155;
          v24 = (uint64_t)v168 + 1;
          v66 = v163;
          a1 = v164;
          if ((void (*)(char *, uint64_t, uint64_t))v163 == (void (*)(char *, uint64_t, uint64_t))((char *)v168 + 1))
            goto LABEL_48;
        }
        v66 = v163;
        v65 = (uint64_t)v156;
        v64 = (uint64_t)v157;
LABEL_48:
        v39 = v66 + 1;
        v64 += (uint64_t)v155;
        v65 += (uint64_t)v155;
        v24 = v151;
      }
      while (v39 != v148);
      v39 = v148;
      v2 = v149;
      v21 = v146;
    }
    goto LABEL_55;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = sub_23DDC6AB8();
  __break(1u);
  return result;
}

uint64_t sub_23DD45D78(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;

  v43 = a1;
  v7 = sub_23DDC5390();
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v49 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v48 = (char *)&v41 - v10;
  v11 = sub_23DDC53A8();
  v58 = *(_QWORD **)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v56 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v47 = (char *)&v41 - v15;
  result = MEMORY[0x24BDAC7A8](v14);
  v46 = (char *)&v41 - v17;
  v55 = a3;
  v42 = a2;
  if (a3 != a2)
  {
    v18 = v58[9];
    v44 = (void (*)(char *, uint64_t, uint64_t))v58[2];
    v45 = v11;
    v19 = v18 * (v55 - 1);
    v52 = v18;
    v20 = v18 * v55;
LABEL_5:
    v21 = 0;
    v59 = v43;
    v53 = v20;
    v54 = v19;
    while (1)
    {
      v22 = *a4;
      v57 = v20 + v21;
      v23 = v20 + v21 + v22;
      v24 = v46;
      v25 = v44;
      v44(v46, v23, v11);
      v26 = v19 + v21 + v22;
      v27 = v47;
      v25(v47, v26, v11);
      v28 = v48;
      sub_23DDC539C();
      v29 = a4;
      v30 = v49;
      sub_23DDC539C();
      LOBYTE(v22) = sub_23DDC5384();
      v31 = *(void (**)(char *, uint64_t))(v50 + 8);
      v32 = v30;
      v33 = v51;
      v31(v32, v51);
      v34 = v33;
      a4 = v29;
      v11 = v45;
      v31(v28, v34);
      v35 = (void (*)(char *, uint64_t))v58[1];
      v36 = v27;
      v19 = v54;
      v35(v36, v11);
      v37 = v24;
      v20 = v53;
      result = ((uint64_t (*)(char *, uint64_t))v35)(v37, v11);
      if ((v22 & 1) == 0)
      {
LABEL_4:
        v19 += v52;
        v20 += v52;
        if (++v55 == v42)
          return result;
        goto LABEL_5;
      }
      v38 = *a4;
      if (!*a4)
        break;
      v39 = v38 + v19 + v21;
      v40 = (void (*)(char *, uint64_t, uint64_t))v58[4];
      v40(v56, v38 + v20 + v21, v11);
      swift_arrayInitWithTakeFrontToBack();
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v40)(v39, v56, v11);
      v21 -= v52;
      if (v55 == ++v59)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23DD46074(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  void (*v25)(char *, unint64_t, uint64_t);
  char *v26;
  char *v27;
  char v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, unint64_t, uint64_t);
  void (*v42)(_QWORD, _QWORD, _QWORD);
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t result;
  uint64_t v56;
  void (*v57)(char *, unint64_t, uint64_t);
  unint64_t v58;
  unint64_t v59;
  void (*v60)(_QWORD, _QWORD, _QWORD);
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD, _QWORD, _QWORD);
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;

  v67 = sub_23DDC5390();
  v64 = *(_QWORD *)(v67 - 8);
  v8 = MEMORY[0x24BDAC7A8](v67);
  v66 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v65 = (char *)&v56 - v10;
  v11 = sub_23DDC53A8();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v63 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v62 = (char *)&v56 - v14;
  v68 = v15;
  v16 = *(_QWORD *)(v15 + 72);
  if (!v16)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v16 == -1)
    goto LABEL_61;
  v17 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v16 == -1)
    goto LABEL_62;
  v18 = (uint64_t)(a2 - a1) / v16;
  v72 = a1;
  v71 = a4;
  v19 = v17 / v16;
  if (v18 >= v17 / v16)
  {
    if ((v19 & 0x8000000000000000) == 0)
    {
      v21 = v19 * v16;
      if (a4 < a2 || a2 + v21 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v37 = a4 + v21;
      v70 = a4 + v21;
      v72 = a2;
      if (v21 >= 1 && a1 < a2)
      {
        v39 = -v16;
        v57 = *(void (**)(char *, unint64_t, uint64_t))(v68 + 16);
        v58 = a1;
        v59 = a4;
        v40 = v62;
        do
        {
          v69 = (void (*)(_QWORD, _QWORD, _QWORD))a3;
          v60 = (void (*)(_QWORD, _QWORD, _QWORD))a2;
          v61 = a3 + v39;
          v41 = v57;
          v57(v40, v37 + v39, v11);
          v42 = (void (*)(_QWORD, _QWORD, _QWORD))(a2 + v39);
          v43 = v63;
          v41(v63, a2 + v39, v11);
          v44 = v11;
          v45 = v65;
          sub_23DDC539C();
          v46 = v66;
          sub_23DDC539C();
          LOBYTE(v41) = sub_23DDC5384();
          v47 = *(void (**)(char *, uint64_t))(v64 + 8);
          v48 = v46;
          v49 = v67;
          v47(v48, v67);
          v50 = v45;
          v11 = v44;
          v47(v50, v49);
          v51 = *(void (**)(char *, uint64_t))(v68 + 8);
          v51(v43, v44);
          v51(v40, v44);
          if ((v41 & 1) != 0)
          {
            a3 = v61;
            if ((unint64_t)v69 < (unint64_t)v60 || v61 >= (unint64_t)v60)
            {
              swift_arrayInitWithTakeFrontToBack();
              v52 = v58;
              v53 = v59;
            }
            else
            {
              v52 = v58;
              v53 = v59;
              if (v69 != v60)
                swift_arrayInitWithTakeBackToFront();
            }
            v72 += v39;
          }
          else
          {
            v42 = v60;
            a3 = v61;
            v54 = v70;
            v70 += v39;
            if ((unint64_t)v69 < v54 || v61 >= v54)
            {
              swift_arrayInitWithTakeFrontToBack();
              v52 = v58;
              v53 = v59;
            }
            else
            {
              v52 = v58;
              v53 = v59;
              if (v69 != (void (*)(_QWORD, _QWORD, _QWORD))v54)
                swift_arrayInitWithTakeBackToFront();
            }
          }
          v37 = v70;
          if (v70 <= v53)
            break;
          a2 = (unint64_t)v42;
        }
        while ((unint64_t)v42 > v52);
      }
      goto LABEL_59;
    }
  }
  else if ((v18 & 0x8000000000000000) == 0)
  {
    v20 = v18 * v16;
    if (a4 < a1 || a1 + v20 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v61 = a4 + v20;
    v70 = a4 + v20;
    if (v20 >= 1 && a2 < a3)
    {
      v60 = *(void (**)(_QWORD, _QWORD, _QWORD))(v68 + 16);
      v69 = (void (*)(_QWORD, _QWORD, _QWORD))a3;
      v24 = v62;
      v23 = v63;
      do
      {
        v25 = (void (*)(char *, unint64_t, uint64_t))v60;
        v60(v24, a2, v11);
        v25(v23, a4, v11);
        v26 = v65;
        sub_23DDC539C();
        v27 = v66;
        sub_23DDC539C();
        v28 = sub_23DDC5384();
        v29 = *(void (**)(char *, uint64_t))(v64 + 8);
        v30 = v27;
        v31 = v67;
        v29(v30, v67);
        v29(v26, v31);
        v32 = *(void (**)(char *, uint64_t))(v68 + 8);
        v32(v23, v11);
        v32(v24, v11);
        v33 = v72;
        if ((v28 & 1) != 0)
        {
          v34 = a2 + v16;
          if (v72 < a2 || v72 >= v34)
          {
            swift_arrayInitWithTakeFrontToBack();
            v35 = (unint64_t)v69;
          }
          else
          {
            v35 = (unint64_t)v69;
            if (v72 == a2)
              v33 = a2;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v36 = v71 + v16;
          if (v72 < v71 || v72 >= v36)
          {
            swift_arrayInitWithTakeFrontToBack();
            v35 = (unint64_t)v69;
          }
          else
          {
            v35 = (unint64_t)v69;
            if (v72 != v71)
              swift_arrayInitWithTakeBackToFront();
          }
          v71 = v36;
          v34 = a2;
        }
        v72 = v33 + v16;
        a4 = v71;
        if (v71 >= v61)
          break;
        a2 = v34;
      }
      while (v34 < v35);
    }
LABEL_59:
    sub_23DDA93FC(&v72, &v71, (uint64_t *)&v70);
    return 1;
  }
LABEL_63:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

void sub_23DD46640(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  id v71;

  v67 = a4;
  v7 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  sub_23DCFB328(0, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v61 = (char *)&v51 - v9;
  v10 = sub_23DDC512C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v64 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v60 = (char *)&v51 - v14;
  v15 = sub_23DDC53A8();
  v66 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v68 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v65 = (char *)&v51 - v18;
  sub_23DD1E808(0, (unint64_t *)&qword_2543266A8, v19, v7);
  v59 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v58 = (char *)&v51 - v21;
  v22 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = v22;
  if (v22)
  {
    v23 = 0;
    v53 = a2;
    v54 = a1;
    v55 = v10;
    v56 = v15;
    v52 = v11;
    while (v23 < *(_QWORD *)(a1 + 16))
    {
      v24 = *(_QWORD *)(v66 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v66 + 16))(v65, a1 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80)) + v24 * v23, v15);
      v25 = *(_QWORD *)(a2 + 16);
      if (v23 == v25)
      {
        v26 = (uint64_t)v61;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v61, 1, 1, v10);
LABEL_21:
        (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v15);
        sub_23DCFEA1C(v26, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
        goto LABEL_22;
      }
      v26 = (uint64_t)v61;
      if (v23 >= v25)
        goto LABEL_25;
      v63 = a3;
      v27 = *(_QWORD *)(v11 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v61, a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)) + v27 * v23, v10);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v26, 0, 1, v10);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v26, 1, v10) == 1)
        goto LABEL_21;
      v62 = v27;
      v28 = v24;
      v29 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
      v30 = v60;
      v29(v60, v26, v10);
      v31 = v58;
      v32 = &v58[*(int *)(v59 + 48)];
      v33 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
      v33(v58, v65, v15);
      v29(v32, (uint64_t)v30, v10);
      v34 = (uint64_t)v68;
      v33(v68, v31, v15);
      v29(v64, (uint64_t)v32, v10);
      v35 = (_QWORD *)*v67;
      v37 = sub_23DD768A4(v34);
      v38 = v35[2];
      v39 = (v36 & 1) == 0;
      v40 = v38 + v39;
      if (__OFADD__(v38, v39))
        goto LABEL_26;
      v41 = v36;
      if (v35[3] >= v40)
      {
        if ((v63 & 1) != 0)
        {
          if ((v36 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          sub_23DD78A8C();
          if ((v41 & 1) != 0)
            goto LABEL_18;
        }
      }
      else
      {
        sub_23DD779D0(v40, v63 & 1);
        v42 = sub_23DD768A4((uint64_t)v68);
        if ((v41 & 1) != (v43 & 1))
          goto LABEL_28;
        v37 = v42;
        if ((v41 & 1) != 0)
        {
LABEL_18:
          v49 = (void *)swift_allocError();
          swift_willThrow();
          v71 = v49;
          v50 = v49;
          sub_23DD02790();
          if ((swift_dynamicCast() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v52 + 8))(v64, v55);
            (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v56);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            return;
          }
          goto LABEL_29;
        }
      }
      v44 = (uint64_t)v68;
      v45 = (_QWORD *)*v67;
      *(_QWORD *)(*v67 + 8 * (v37 >> 6) + 64) |= 1 << v37;
      v15 = v56;
      v33((char *)(v45[6] + v37 * v28), (char *)v44, v56);
      v10 = v55;
      v29((char *)(v45[7] + v37 * v62), (uint64_t)v64, v55);
      v46 = v45[2];
      v47 = __OFADD__(v46, 1);
      v48 = v46 + 1;
      if (v47)
        goto LABEL_27;
      ++v23;
      v45[2] = v48;
      a3 = 1;
      a2 = v53;
      a1 = v54;
      v11 = v52;
      if (v57 == v23)
        goto LABEL_22;
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_23DDC6C20();
    __break(1u);
LABEL_29:
    v69 = 0;
    v70 = 0xE000000000000000;
    sub_23DDC6A10();
    sub_23DDC67A0();
    sub_23DDC6AA0();
    sub_23DDC67A0();
    sub_23DDC6AC4();
    __break(1u);
  }
  else
  {
LABEL_22:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_23DD46C18(uint64_t (*a1)(unint64_t), uint64_t a2)
{
  return sub_23DD46C3C(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BE40238], (uint64_t (*)(uint64_t))sub_23DD45208);
}

uint64_t sub_23DD46C3C(uint64_t (*a1)(unint64_t), uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *);
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t (*v38)(unint64_t, char *, uint64_t);
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  unint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(unint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;

  v7 = v4;
  v10 = a3(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v48 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v47 = (char *)&v42 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v52 = v7;
  v17 = *v7;
  v18 = *(_QWORD *)(*v7 + 16);
  if (!v18)
    return 0;
  v50 = (char *)&v42 - v16;
  v43 = a4;
  v19 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v54 = *(_QWORD *)(v11 + 72);
  swift_bridgeObjectRetain();
  v20 = 0;
  v44 = v19;
  while (1)
  {
    v21 = a1(v17 + v19);
    if (v5)
    {
      swift_bridgeObjectRelease();
      return v20;
    }
    if ((v21 & 1) != 0)
      break;
    ++v20;
    v19 += v54;
    if (v18 == v20)
    {
      swift_bridgeObjectRelease();
      return *(_QWORD *)(v17 + 16);
    }
  }
  result = swift_bridgeObjectRelease();
  if (!__OFADD__(v20, 1))
  {
    v23 = *(_QWORD *)(v17 + 16);
    if (v20 + 1 == v23)
      return v20;
    v24 = v54 + v19;
    v25 = v20 + 1;
    v51 = v10;
    v45 = a2;
    v46 = a1;
    v49 = v11;
    while (v25 < v23)
    {
      v53 = v25;
      v26 = v24;
      v27 = v17 + v24;
      v28 = (uint64_t (*)(char *))a1;
      v29 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
      v30 = v50;
      v29(v50, v27, v10);
      LOBYTE(v28) = v28(v30);
      result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v30, v10);
      if ((v28 & 1) != 0)
      {
        a1 = v46;
        v31 = v26;
        v32 = v53;
      }
      else
      {
        v32 = v53;
        v31 = v26;
        if (v53 != v20)
        {
          if ((v20 & 0x8000000000000000) != 0)
            goto LABEL_32;
          v33 = *v52;
          v34 = *(_QWORD *)(*v52 + 16);
          if (v20 >= v34)
            goto LABEL_33;
          v35 = v20 * v54;
          v36 = v51;
          result = ((uint64_t (*)(char *, unint64_t, uint64_t))v29)(v47, v33 + v44 + v20 * v54, v51);
          if (v53 >= v34)
            goto LABEL_34;
          v29(v48, v33 + v26, v36);
          result = swift_isUniquelyReferenced_nonNull_native();
          *v52 = v33;
          if ((result & 1) == 0)
          {
            result = v43(v33);
            v33 = result;
            *v52 = result;
          }
          if (v20 >= *(_QWORD *)(v33 + 16))
            goto LABEL_35;
          v37 = v33 + v44 + v35;
          v38 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v49 + 40);
          v39 = v51;
          result = v38(v37, v48, v51);
          if (v53 >= *(_QWORD *)(*v52 + 16))
            goto LABEL_36;
          result = v38(*v52 + v26, v47, v39);
          v32 = v53;
        }
        v40 = __OFADD__(v20++, 1);
        a1 = v46;
        if (v40)
          goto LABEL_31;
      }
      v41 = v32 + 1;
      v10 = v51;
      v11 = v49;
      if (__OFADD__(v32, 1))
        goto LABEL_30;
      v17 = *v52;
      v23 = *(_QWORD *)(*v52 + 16);
      v25 = v32 + 1;
      v24 = v31 + v54;
      if (v41 == v23)
        return v20;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_23DD46FA0(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  unint64_t v33;
  uint64_t v34;

  v4 = sub_23DDC53A8();
  v34 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 64;
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v11 = sub_23DDC69D4();
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v33 = (v11 + 1) & v10;
      v12 = *(_QWORD *)(v34 + 72);
      v32 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
      v13 = v10;
      do
      {
        v14 = v7;
        v15 = v12;
        v16 = v12 * v9;
        v17 = v13;
        v32(v6, *(_QWORD *)(a2 + 48) + v12 * v9, v4);
        sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
        v18 = sub_23DDC6668();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v33)
        {
          if (v19 >= v33 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v7 = v14;
            if (v15 * a1 < v16
              || (v12 = v15, *(_QWORD *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v15)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v22 = *(_QWORD *)(a2 + 56);
            v23 = (_OWORD *)(v22 + 16 * a1);
            v24 = (_OWORD *)(v22 + 16 * v9);
            if (16 * a1 != 16 * v9 || (a1 = v9, v23 >= v24 + 1))
            {
              *v23 = *v24;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v33 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v7 = v14;
        v12 = v15;
LABEL_5:
        v9 = (v9 + 1) & v13;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v25 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v26 = *v25;
    v27 = (-1 << a1) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v25;
    v26 = (-1 << a1) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t sub_23DD47248(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_23DD92A88(0, v2, 0);
    v3 = v14;
    v6 = *(_QWORD *)(sub_23DDC53A8() - 8);
    v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = *(_QWORD *)(v6 + 72);
    do
    {
      a2(&v13, v7);
      v9 = v13;
      v14 = v3;
      v11 = *(_QWORD *)(v3 + 16);
      v10 = *(_QWORD *)(v3 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_23DD92A88(v10 > 1, v11 + 1, 1);
        v3 = v14;
      }
      *(_QWORD *)(v3 + 16) = v11 + 1;
      *(_QWORD *)(v3 + 8 * v11 + 32) = v9;
      v7 += v8;
      --v2;
    }
    while (v2);
  }
  return v3;
}

void sub_23DD47350()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254326778)
  {
    sub_23DDC53A8();
    sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
    v0 = sub_23DDC6B00();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254326778);
  }
}

uint64_t _s15HealthBalanceUI25OvernightMetricsViewModelV7SummaryV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v2 = a1[3];
  v4 = a1[4];
  v3 = a1[5];
  v5 = a1[6];
  v6 = a1[8];
  v8 = a2[3];
  v7 = a2[4];
  v10 = a2[5];
  v9 = a2[6];
  v11 = a2[8];
  v16 = a2[7];
  v17 = a1[7];
  if (a1[1] == a2[1] && a1[2] == a2[2] || (v12 = sub_23DDC6C08(), result = 0, (v12 & 1) != 0))
  {
    if (v4)
    {
      if (!v7)
        return 0;
      if (v2 != v8 || v4 != v7)
      {
        v14 = sub_23DDC6C08();
        result = 0;
        if ((v14 & 1) == 0)
          return result;
      }
    }
    else if (v7)
    {
      return 0;
    }
    if (v5)
    {
      if (!v9)
        return 0;
      if (v3 != v10 || v5 != v9)
      {
        v15 = sub_23DDC6C08();
        result = 0;
        if ((v15 & 1) == 0)
          return result;
      }
    }
    else if (v9)
    {
      return 0;
    }
    if (v6)
    {
      if (v11 && (v17 == v16 && v6 == v11 || (sub_23DDC6C08() & 1) != 0))
        return 1;
    }
    else if (!v11)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s15HealthBalanceUI25OvernightMetricsViewModelV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  char v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  int *v63;
  uint64_t v64;
  char v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v76 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v74 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v75 = (uint64_t)&v69 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v77 = (uint64_t)&v69 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v78 = (uint64_t)&v69 - v11;
  v12 = type metadata accessor for OvernightMetricsChartPoint();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD4C75C(0, (unint64_t *)&qword_256CFD750, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  v17 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v69 - v18;
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v69 - v24;
  v27 = MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v69 - v28;
  if ((MEMORY[0x242641D54](a1, a2, v27) & 1) == 0)
    goto LABEL_24;
  v73 = v19;
  v30 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  if ((sub_23DD4128C(*(_QWORD *)(a1 + v30[5]), *(_QWORD *)(a2 + v30[5]), (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], &qword_256CFDE00, MEMORY[0x24BE3FFC8]) & 1) == 0|| (sub_23DD47C7C(a1 + v30[6], a2 + v30[6]) & 1) == 0)
  {
    goto LABEL_24;
  }
  v31 = v30[7];
  v71 = a1;
  sub_23DD4C634(a1 + v31, (uint64_t)v29, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  v70 = v30;
  v32 = v30[7];
  v72 = a2;
  sub_23DD4C634(a2 + v32, (uint64_t)v25, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  v33 = (uint64_t)v73;
  v34 = (uint64_t)&v73[*(int *)(v17 + 48)];
  sub_23DD4C634((uint64_t)v29, (uint64_t)v73, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  sub_23DD4C634((uint64_t)v25, v34, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v35(v33, 1, v12) == 1)
  {
    sub_23DCFEA1C((uint64_t)v25, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    sub_23DCFEA1C((uint64_t)v29, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    if (v35(v34, 1, v12) == 1)
    {
      sub_23DCFEA1C(v33, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
      goto LABEL_11;
    }
LABEL_9:
    sub_23DD4C5F8(v33, (unint64_t *)&qword_256CFD750, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_24;
  }
  sub_23DD4C634(v33, (uint64_t)v22, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  if (v35(v34, 1, v12) == 1)
  {
    sub_23DCFEA1C((uint64_t)v25, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    sub_23DCFEA1C((uint64_t)v29, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    sub_23DCF59A8((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_9;
  }
  sub_23DCFBB58(v34, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
  v36 = _s15HealthBalanceUI26OvernightMetricsChartPointV2eeoiySbAC_ACtFZ_0((uint64_t)v22, (uint64_t)v15);
  sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
  sub_23DCFEA1C((uint64_t)v25, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  sub_23DCFEA1C((uint64_t)v29, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  sub_23DCF59A8((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
  sub_23DCFEA1C(v33, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  if ((v36 & 1) == 0)
    goto LABEL_24;
LABEL_11:
  v38 = v70;
  v37 = v71;
  v39 = v70[8];
  v40 = v71 + v39;
  v41 = v72;
  v42 = v72 + v39;
  if ((sub_23DD405A4(*(_QWORD *)(v71 + v39), *(_QWORD *)(v72 + v39)) & 1) == 0)
    goto LABEL_24;
  v43 = type metadata accessor for OvernightMetricsChartPointCollection();
  if ((MEMORY[0x242641BF8](v40 + *(int *)(v43 + 20), v42 + *(int *)(v43 + 20)) & 1) == 0)
    goto LABEL_24;
  sub_23DD6C968(*(_QWORD *)(v40 + *(int *)(v43 + 24)), *(_QWORD *)(v42 + *(int *)(v43 + 24)));
  if ((v44 & 1) == 0
    || (sub_23DD405A4(*(_QWORD *)(v37 + v38[9]), *(_QWORD *)(v41 + v38[9])) & 1) == 0
    || (sub_23DD4128C(*(_QWORD *)(v37 + v38[10]), *(_QWORD *)(v41 + v38[10]), (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], &qword_256CFCC60, MEMORY[0x24BDCE958]) & 1) == 0)
  {
    goto LABEL_24;
  }
  v45 = v38[11];
  v46 = v37 + v45;
  v47 = v41 + v45;
  sub_23DDC512C();
  sub_23DCF535C(&qword_256CFCC60, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  v48 = sub_23DDC66C8();
  v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8];
  v50 = v78;
  sub_23DD3D270(v46, v78, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v51 = v77;
  sub_23DD3D270(v47, v77, &qword_254326A60, v49);
  if ((v48 & 1) == 0)
  {
    v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8];
    v67 = v51;
LABEL_23:
    sub_23DD48F24(v67, &qword_254326A60, v66);
    sub_23DD48F24(v50, &qword_254326A60, v66);
    goto LABEL_24;
  }
  v52 = sub_23DDC66C8();
  v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8];
  sub_23DD48F24(v51, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  sub_23DD48F24(v50, &qword_254326A60, v53);
  if ((v52 & 1) == 0)
  {
LABEL_24:
    v65 = 0;
    return v65 & 1;
  }
  v54 = v70[12];
  v55 = v71 + v54;
  v56 = v72 + v54;
  v57 = sub_23DDC66C8();
  v50 = v75;
  sub_23DD3D270(v55, v75, &qword_254326A60, v49);
  v58 = v56;
  v59 = v74;
  sub_23DD3D270(v58, v74, &qword_254326A60, v49);
  if ((v57 & 1) == 0)
  {
    v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8];
    v67 = v59;
    goto LABEL_23;
  }
  v60 = sub_23DDC66C8();
  v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8];
  sub_23DD48F24(v59, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  sub_23DD48F24(v50, &qword_254326A60, v61);
  if ((v60 & 1) == 0)
    goto LABEL_24;
  v63 = v70;
  v62 = v71;
  v64 = v72;
  if ((sub_23DD4128C(*(_QWORD *)(v71 + v70[13]), *(_QWORD *)(v72 + v70[13]), (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], &qword_256CFCC60, MEMORY[0x24BDCE958]) & 1) == 0)goto LABEL_24;
  v65 = sub_23DD4128C(*(_QWORD *)(v62 + v63[14]), *(_QWORD *)(v64 + v63[14]), (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], &qword_254326688, MEMORY[0x24BE3FE40]);
  return v65 & 1;
}

uint64_t sub_23DD47C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(uint64_t);
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = sub_23DDC55A0();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BE40438];
  v45 = v4;
  v43 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v41 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD4C75C(0, &qword_2543266D0, &qword_254326A70, v5);
  v8 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v44 = (uint64_t)&v40 - v9;
  sub_23DCFB328(0, &qword_254326A70, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v42 = (uint64_t)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v40 - v13;
  v15 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t *)((char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v40 - v19;
  sub_23DD4C7C8();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (uint64_t *)&v23[*(int *)(v24 + 48)];
  sub_23DCF58EC(a1, (uint64_t)v23, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  sub_23DCF58EC(a2, (uint64_t)v25, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_23DCF58EC((uint64_t)v23, (uint64_t)v20, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_23DCFEA1C((uint64_t)v20, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
      goto LABEL_7;
    }
    sub_23DD3CE14((uint64_t)v25, (uint64_t)v14);
    v29 = v44;
    v30 = v44 + *(int *)(v8 + 48);
    sub_23DD3CE14((uint64_t)v20, v44);
    sub_23DD4C634((uint64_t)v14, v30, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
    v31 = v43;
    v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
    v33 = v45;
    if (v32(v29, 1, v45) == 1)
    {
      sub_23DCFEA1C((uint64_t)v14, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
      if (v32(v30, 1, v33) == 1)
      {
        sub_23DCFEA1C(v29, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
LABEL_15:
        v27 = 1;
        goto LABEL_17;
      }
    }
    else
    {
      v34 = v42;
      sub_23DD4C634(v29, v42, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
      if (v32(v30, 1, v33) != 1)
      {
        v35 = v41;
        (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v41, v30, v33);
        v36 = (uint64_t (*)(uint64_t))MEMORY[0x24BE40438];
        sub_23DCF535C(&qword_256CFDE08, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], MEMORY[0x24BE40450]);
        v37 = sub_23DDC66C8();
        v38 = *(void (**)(char *, uint64_t))(v31 + 8);
        v38(v35, v33);
        sub_23DCFEA1C((uint64_t)v14, &qword_254326A70, v36);
        v38((char *)v34, v33);
        sub_23DCFEA1C(v29, &qword_254326A70, v36);
        if ((v37 & 1) != 0)
          goto LABEL_15;
LABEL_16:
        v27 = 0;
        goto LABEL_17;
      }
      sub_23DCFEA1C((uint64_t)v14, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v34, v33);
    }
    sub_23DD4C5F8(v29, &qword_2543266D0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438]);
    goto LABEL_16;
  }
  sub_23DCF58EC((uint64_t)v23, (uint64_t)v17, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
  v26 = *v17;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v27 = sub_23DD4128C(v26, *v25, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], &qword_254326688, MEMORY[0x24BE3FE40]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_17:
    v28 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
LABEL_7:
  v27 = 0;
  v28 = (uint64_t (*)(_QWORD))sub_23DD4C7C8;
LABEL_18:
  sub_23DCF59A8((uint64_t)v23, v28);
  return v27 & 1;
}

uint64_t sub_23DD4813C(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;

  v52 = a4;
  v7 = sub_23DDC53A8();
  v50 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v51 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v41 - v10;
  sub_23DD4C828();
  v48 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v47 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 16);
  v42 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46 = v14;
  if (!v14)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v15 = 0;
  v49 = *(_QWORD *)(v50 + 72);
  v16 = v42 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  v44 = a2;
  v45 = v17;
  v43 = v11;
  v17(v11, v16, v7);
  while (1)
  {
    v19 = *(_QWORD *)(a2 + 16);
    if (v15 == v19)
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v7);
      goto LABEL_20;
    }
    if (v15 >= v19)
      break;
    v20 = *(_QWORD *)(a2 + 8 * v15 + 32);
    v21 = v47;
    v22 = *(int *)(v48 + 48);
    v23 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
    v23(v47, v11, v7);
    *(_QWORD *)&v21[v22] = v20;
    v24 = (uint64_t)v51;
    v25 = v21;
    v26 = v7;
    v23(v51, v25, v7);
    v27 = *v52;
    swift_bridgeObjectRetain();
    v29 = sub_23DD768A4(v24);
    v30 = *(_QWORD *)(v27 + 16);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_22;
    v33 = v28;
    if (*(_QWORD *)(v27 + 24) >= v32)
    {
      if ((a3 & 1) != 0)
      {
        if ((v28 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_23DD78454();
        if ((v33 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_23DD76F6C(v32, a3 & 1);
      v34 = sub_23DD768A4((uint64_t)v51);
      if ((v33 & 1) != (v35 & 1))
        goto LABEL_24;
      v29 = v34;
      if ((v33 & 1) != 0)
      {
LABEL_3:
        (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v26);
        v18 = *(_QWORD *)(*v52 + 56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v18 + 8 * v29) = v20;
        v7 = v26;
        goto LABEL_4;
      }
    }
    v36 = (_QWORD *)*v52;
    *(_QWORD *)(*v52 + 8 * (v29 >> 6) + 64) |= 1 << v29;
    v7 = v26;
    v23((char *)(v36[6] + v29 * v49), v51, v26);
    *(_QWORD *)(v36[7] + 8 * v29) = v20;
    v37 = v36[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_23;
    v36[2] = v39;
LABEL_4:
    ++v15;
    v16 += v49;
    a3 = 1;
    v11 = v43;
    a2 = v44;
    if (v46 == v15)
      goto LABEL_20;
    v45(v43, v16, v7);
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23DDC6C20();
  __break(1u);
  return result;
}

uint64_t sub_23DD4845C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD484B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD484F4()
{
  return sub_23DD3EBF0() & 1;
}

uint64_t sub_23DD48510(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;

  v18 = a2;
  v19 = a3;
  v17 = sub_23DDC52DC();
  v5 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v16 = v3;
    v20 = MEMORY[0x24BEE4AF8];
    sub_23DD92B60(0, v8, 0);
    v9 = v20;
    v10 = *(_QWORD *)(sub_23DDC53A8() - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    do
    {
      v18(v11);
      v20 = v9;
      v14 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_23DD92B60(v13 > 1, v14 + 1, 1);
        v9 = v20;
      }
      *(_QWORD *)(v9 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v14, v7, v17);
      v11 += v12;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_23DD48670(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t *v68;

  v68 = a4;
  v7 = sub_23DDC52DC();
  v8 = (void (*)(uint64_t))MEMORY[0x24BE3FC10];
  v61 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v52 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v66 = (char *)&v50 - v11;
  v12 = sub_23DDC53A8();
  v62 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v67 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v50 - v15;
  sub_23DD1E808(0, &qword_2543266B0, v17, v8);
  v58 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v57 = (char *)&v50 - v19;
  v20 = *(_QWORD *)(a1 + 16);
  v51 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v56 = v20;
  if (!v20)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v21 = 0;
  v59 = *(_QWORD *)(v62 + 72);
  v60 = v12;
  v22 = v51 + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80));
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
  v54 = a2;
  v55 = v23;
  v53 = v16;
  v23(v16, v22, v12);
  while (1)
  {
    v25 = *(_QWORD *)(a2 + 16);
    if (v21 == v25)
    {
      (*(void (**)(char *, uint64_t))(v62 + 8))(v16, v12);
      goto LABEL_20;
    }
    if (v21 >= v25)
      break;
    v63 = v21;
    v64 = v22;
    v26 = a3;
    v27 = v61;
    v28 = a2 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    v65 = *(_QWORD *)(v61 + 72);
    v29 = v28 + v65 * v21;
    v30 = v57;
    v31 = &v57[*(int *)(v58 + 48)];
    v32 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
    v32(v57, v16, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v31, v29, v7);
    v33 = (uint64_t)v67;
    v32(v67, v30, v12);
    v34 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v34(v66, v31, v7);
    v35 = *v68;
    v37 = sub_23DD768A4(v33);
    v38 = *(_QWORD *)(v35 + 16);
    v39 = (v36 & 1) == 0;
    v40 = v38 + v39;
    if (__OFADD__(v38, v39))
      goto LABEL_22;
    v41 = v36;
    if (*(_QWORD *)(v35 + 24) >= v40)
    {
      if ((v26 & 1) != 0)
      {
        v44 = v65;
        if ((v36 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_23DD78690();
        v44 = v65;
        if ((v41 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_23DD7730C(v40, v26 & 1);
      v42 = sub_23DD768A4((uint64_t)v67);
      if ((v41 & 1) != (v43 & 1))
        goto LABEL_24;
      v37 = v42;
      v44 = v65;
      if ((v41 & 1) != 0)
      {
LABEL_3:
        v24 = v52;
        v34(v52, v66, v7);
        v12 = v60;
        (*(void (**)(char *, uint64_t))(v62 + 8))(v67, v60);
        (*(void (**)(unint64_t, char *, uint64_t))(v61 + 40))(*(_QWORD *)(*v68 + 56) + v37 * v44, v24, v7);
        goto LABEL_4;
      }
    }
    v45 = (_QWORD *)*v68;
    *(_QWORD *)(*v68 + 8 * (v37 >> 6) + 64) |= 1 << v37;
    v32((char *)(v45[6] + v37 * v59), v67, v60);
    v34((char *)(v45[7] + v37 * v44), v66, v7);
    v46 = v45[2];
    v47 = __OFADD__(v46, 1);
    v48 = v46 + 1;
    if (v47)
      goto LABEL_23;
    v45[2] = v48;
    v12 = v60;
LABEL_4:
    v21 = v63 + 1;
    v22 = v64 + v59;
    a3 = 1;
    v16 = v53;
    a2 = v54;
    if (v56 == v63 + 1)
      goto LABEL_20;
    v55(v53, v22, v12);
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23DDC6C20();
  __break(1u);
  return result;
}

uint64_t sub_23DD48A88(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x5365727574616566 && a2 == 0xED00007375746174;
  if (v2 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465786966 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DDC6C08();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23DD48B94()
{
  return sub_23DD44024();
}

void sub_23DD48B9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFDC78)
  {
    sub_23DD48C00(255, &qword_256CFDC80, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
    v0 = sub_23DDC6BF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFDC78);
  }
}

void sub_23DD48C00(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x24BEE0D00]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_23DD48C48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFC828;
  if (!qword_256CFC828)
  {
    sub_23DD48C00(255, (unint64_t *)&qword_256CFC758, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_256CFC828);
  }
  return result;
}

unint64_t sub_23DD48CA0()
{
  unint64_t result;

  result = qword_256CFDC90;
  if (!qword_256CFDC90)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC93E4, &type metadata for OvernightMetricsViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDC90);
  }
  return result;
}

unint64_t sub_23DD48CE4()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = qword_256CFDCA8;
  if (!qword_256CFDCA8)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0];
    sub_23DCFB328(255, &qword_256CFDCA0, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v3 = v2;
    v4 = sub_23DCF535C(&qword_256CFDCB0, v1, MEMORY[0x24BE3FFC0]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE12A0], v3, &v4);
    atomic_store(result, (unint64_t *)&qword_256CFDCA8);
  }
  return result;
}

unint64_t sub_23DD48D74()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256CFDCD0;
  if (!qword_256CFDCD0)
  {
    sub_23DCFB328(255, &qword_256CFD6F0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_23DCF535C(&qword_256CFDCC0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t)&protocol conformance descriptor for OvernightMetricsChartPoint);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CFDCD0);
  }
  return result;
}

unint64_t sub_23DD48E04()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = qword_256CFDCE0;
  if (!qword_256CFDCE0)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
    sub_23DCFB328(255, &qword_256CFDCD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v3 = v2;
    v4 = sub_23DCF535C(&qword_256CFDBF8, v1, MEMORY[0x24BDCE920]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE12A0], v3, &v4);
    atomic_store(result, (unint64_t *)&qword_256CFDCE0);
  }
  return result;
}

unint64_t sub_23DD48E94()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = qword_256CFDCF0;
  if (!qword_256CFDCF0)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20];
    sub_23DCFB328(255, &qword_256CFCA08, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v3 = v2;
    v4 = sub_23DCF535C(&qword_256CFDCF8, v1, MEMORY[0x24BE3FE30]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE12A0], v3, &v4);
    atomic_store(result, (unint64_t *)&qword_256CFDCF0);
  }
  return result;
}

uint64_t sub_23DD48F24(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;

  sub_23DD04550(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_23DD48F60()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = qword_256CFDD10;
  if (!qword_256CFDD10)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0];
    sub_23DCFB328(255, &qword_256CFDCA0, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FFB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v3 = v2;
    v4 = sub_23DCF535C(&qword_256CFDD18, v1, MEMORY[0x24BE3FFD0]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE12D0], v3, &v4);
    atomic_store(result, (unint64_t *)&qword_256CFDD10);
  }
  return result;
}

uint64_t sub_23DD48FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD4904C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_23DD49090()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256CFDD38;
  if (!qword_256CFDD38)
  {
    sub_23DCFB328(255, &qword_256CFD6F0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_23DCF535C(&qword_256CFDD28, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t)&protocol conformance descriptor for OvernightMetricsChartPoint);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CFDD38);
  }
  return result;
}

unint64_t sub_23DD49120()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = qword_256CFDD40;
  if (!qword_256CFDD40)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
    sub_23DCFB328(255, &qword_256CFDCD8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v3 = v2;
    v4 = sub_23DCF535C(&qword_256CFDC38, v1, MEMORY[0x24BDCE960]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE12D0], v3, &v4);
    atomic_store(result, (unint64_t *)&qword_256CFDD40);
  }
  return result;
}

uint64_t sub_23DD491B0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_23DD04550(255, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v10 = v9;
    v11 = sub_23DCF535C(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], a3);
    result = MEMORY[0x242643BD8](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DD49240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_23DD49294()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = qword_256CFDD50;
  if (!qword_256CFDD50)
  {
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20];
    sub_23DCFB328(255, &qword_256CFCA08, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v3 = v2;
    v4 = sub_23DCF535C(&qword_256CFDD58, v1, MEMORY[0x24BE3FE50]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE12D0], v3, &v4);
    atomic_store(result, (unint64_t *)&qword_256CFDD50);
  }
  return result;
}

unint64_t sub_23DD49324()
{
  unint64_t result;

  result = qword_256CFDD60;
  if (!qword_256CFDD60)
  {
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_256CFDD60);
  }
  return result;
}

unint64_t sub_23DD4936C()
{
  unint64_t result;

  result = qword_256CFDD70;
  if (!qword_256CFDD70)
  {
    result = MEMORY[0x242643BD8](&protocol conformance descriptor for OvernightMetricsViewModel.Summary.Variant, &type metadata for OvernightMetricsViewModel.Summary.Variant);
    atomic_store(result, (unint64_t *)&qword_256CFDD70);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for OvernightMetricsViewModel(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, _QWORD, uint64_t, int *);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v63;
  char *v64;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v12 = (char *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC5330();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
    v9 = &a1[v8];
    v10 = &a2[v8];
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = sub_23DDC55A0();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v9, v10, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v9, 0, 1, v13);
      }
    }
    swift_storeEnumTagMultiPayload();
    v16 = a3[7];
    v17 = &a1[v16];
    v18 = &a2[v16];
    v19 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v20 = *((_QWORD *)v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v63 = v20;
      v22 = sub_23DDC512C();
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
      v23(v17, v18, v22);
      v24 = v19[5];
      v25 = &v17[v24];
      v26 = &v18[v24];
      v23(&v17[v24], &v18[v24], v22);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v23(&v25[*(int *)(v27 + 36)], &v26[*(int *)(v27 + 36)], v22);
      v28 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v25[v28[5]] = *(_QWORD *)&v26[v28[5]];
      *(_QWORD *)&v25[v28[6]] = *(_QWORD *)&v26[v28[6]];
      *(_QWORD *)&v25[v28[7]] = *(_QWORD *)&v26[v28[7]];
      v29 = v19[6];
      v30 = &v17[v29];
      v31 = &v18[v29];
      *(_OWORD *)v30 = *(_OWORD *)v31;
      v30[16] = v31[16];
      v17[v19[7]] = v18[v19[7]];
      v17[v19[8]] = v18[v19[8]];
      v17[v19[9]] = v18[v19[9]];
      v32 = v19[10];
      v33 = &v17[v32];
      v34 = &v18[v32];
      v35 = *((_QWORD *)v34 + 1);
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *((_QWORD *)v33 + 1) = v35;
      v36 = v19[11];
      v37 = &v17[v36];
      v38 = &v18[v36];
      v39 = *((_QWORD *)v38 + 1);
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = v39;
      v40 = *(void (**)(char *, _QWORD, uint64_t, int *))(v63 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40(v17, 0, 1, v19);
    }
    v41 = a3[8];
    v42 = &a1[v41];
    v43 = &a2[v41];
    *(_QWORD *)&a1[v41] = *(_QWORD *)&a2[v41];
    v44 = type metadata accessor for OvernightMetricsChartPointCollection();
    v45 = *(int *)(v44 + 20);
    v46 = &v42[v45];
    v64 = &v43[v45];
    v47 = sub_23DDC51E0();
    v12 = a1;
    v48 = a2;
    v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
    swift_bridgeObjectRetain();
    v49(v46, v64, v47);
    *(_QWORD *)&v42[*(int *)(v44 + 24)] = *(_QWORD *)&v43[*(int *)(v44 + 24)];
    v50 = a3[10];
    *(_QWORD *)&v12[a3[9]] = *(_QWORD *)&v48[a3[9]];
    *(_QWORD *)&v12[v50] = *(_QWORD *)&v48[v50];
    v51 = a3[11];
    v52 = &v12[v51];
    v53 = &v48[v51];
    v54 = sub_23DDC512C();
    v55 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v55(v52, v53, v54);
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v57 = v56;
    v55(&v52[*(int *)(v56 + 36)], &v53[*(int *)(v56 + 36)], v54);
    v58 = a3[12];
    v59 = &v12[v58];
    v60 = &v48[v58];
    v55(&v12[v58], &v48[v58], v54);
    v55(&v59[*(int *)(v57 + 36)], &v60[*(int *)(v57 + 36)], v54);
    v61 = a3[14];
    *(_QWORD *)&v12[a3[13]] = *(_QWORD *)&v48[a3[13]];
    *(_QWORD *)&v12[v61] = *(_QWORD *)&v48[v61];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v12;
}

uint64_t destroy for OvernightMetricsViewModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v5 = a1 + a2[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = sub_23DDC55A0();
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  v8 = a1 + a2[7];
  v9 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = sub_23DDC512C();
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v11(v8, v10);
    v12 = v8 + *(int *)(v9 + 20);
    v11(v12, v10);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v11(v12 + *(int *)(v13 + 36), v10);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v14 = a1 + a2[8];
  swift_bridgeObjectRelease();
  v15 = v14 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v16 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = a1 + a2[11];
  v18 = sub_23DDC512C();
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v21 = v20;
  v19(v17 + *(int *)(v20 + 36), v18);
  v22 = a1 + a2[12];
  v19(v22, v18);
  v19(v22 + *(int *)(v21 + 36), v18);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, _QWORD, uint64_t, int *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v8 = *v9;
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = sub_23DDC55A0();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  swift_storeEnumTagMultiPayload();
  v13 = a3[7];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v17 = *((_QWORD *)v16 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v61 = v17;
    v19 = sub_23DDC512C();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    v20(v14, v15, v19);
    v21 = v16[5];
    v22 = &v14[v21];
    v23 = &v15[v21];
    v20(&v14[v21], &v15[v21], v19);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v20(&v22[*(int *)(v24 + 36)], &v23[*(int *)(v24 + 36)], v19);
    v25 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v22[v25[5]] = *(_QWORD *)&v23[v25[5]];
    *(_QWORD *)&v22[v25[6]] = *(_QWORD *)&v23[v25[6]];
    *(_QWORD *)&v22[v25[7]] = *(_QWORD *)&v23[v25[7]];
    v26 = v16[6];
    v27 = &v14[v26];
    v28 = &v15[v26];
    *(_OWORD *)v27 = *(_OWORD *)v28;
    v27[16] = v28[16];
    v14[v16[7]] = v15[v16[7]];
    v14[v16[8]] = v15[v16[8]];
    v14[v16[9]] = v15[v16[9]];
    v29 = v16[10];
    v30 = &v14[v29];
    v31 = &v15[v29];
    v32 = *((_QWORD *)v31 + 1);
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = v16[11];
    v34 = &v14[v33];
    v35 = &v15[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = *(void (**)(char *, _QWORD, uint64_t, int *))(v61 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37(v14, 0, 1, v16);
  }
  v38 = a3[8];
  v39 = a1 + v38;
  v40 = a2 + v38;
  *(_QWORD *)(a1 + v38) = *(_QWORD *)(a2 + v38);
  v41 = type metadata accessor for OvernightMetricsChartPointCollection();
  v42 = *(int *)(v41 + 20);
  v43 = v39 + v42;
  v62 = v40 + v42;
  v44 = sub_23DDC51E0();
  v45 = a2;
  v46 = a3;
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
  swift_bridgeObjectRetain();
  v47(v43, v62, v44);
  *(_QWORD *)(v39 + *(int *)(v41 + 24)) = *(_QWORD *)(v40 + *(int *)(v41 + 24));
  v48 = v46[10];
  *(_QWORD *)(a1 + v46[9]) = *(_QWORD *)(v45 + v46[9]);
  *(_QWORD *)(a1 + v48) = *(_QWORD *)(v45 + v48);
  v49 = v46[11];
  v50 = a1 + v49;
  v51 = v45 + v49;
  v52 = sub_23DDC512C();
  v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53(v50, v51, v52);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v55 = v54;
  v53(v50 + *(int *)(v54 + 36), v51 + *(int *)(v54 + 36), v52);
  v56 = v46[12];
  v57 = a1 + v56;
  v58 = v45 + v56;
  v53(a1 + v56, v45 + v56, v52);
  v53(v57 + *(int *)(v55 + 36), v58 + *(int *)(v55 + 36), v52);
  v59 = v46[14];
  *(_QWORD *)(a1 + v46[13]) = *(_QWORD *)(v45 + v46[13]);
  *(_QWORD *)(a1 + v59) = *(_QWORD *)(v45 + v59);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, int *);
  int v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  void (*v40)(char *, _QWORD, uint64_t, int *);
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = a3[6];
    v8 = (_QWORD *)(a1 + v7);
    v9 = (_QWORD *)(a2 + v7);
    sub_23DCF59A8(a1 + v7, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v8 = *v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      v10 = sub_23DDC55A0();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  v13 = a3[7];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      v23 = sub_23DDC512C();
      v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      v24(v14, v15, v23);
      v25 = v16[5];
      v26 = &v14[v25];
      v77 = v17;
      v27 = &v15[v25];
      v24(&v14[v25], &v15[v25], v23);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v24(&v26[*(int *)(v28 + 36)], &v27[*(int *)(v28 + 36)], v23);
      v29 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v26[v29[5]] = *(_QWORD *)&v27[v29[5]];
      *(_QWORD *)&v26[v29[6]] = *(_QWORD *)&v27[v29[6]];
      *(_QWORD *)&v26[v29[7]] = *(_QWORD *)&v27[v29[7]];
      v30 = v16[6];
      v31 = &v14[v30];
      v32 = &v15[v30];
      v33 = v32[16];
      *(_OWORD *)v31 = *(_OWORD *)v32;
      v31[16] = v33;
      v14[v16[7]] = v15[v16[7]];
      v14[v16[8]] = v15[v16[8]];
      v14[v16[9]] = v15[v16[9]];
      v34 = v16[10];
      v35 = &v14[v34];
      v36 = &v15[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
      v37 = v16[11];
      v38 = &v14[v37];
      v39 = &v15[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
      v40 = *(void (**)(char *, _QWORD, uint64_t, int *))(v77 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40(v14, 0, 1, v16);
      goto LABEL_16;
    }
    v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  else
  {
    if (!v20)
    {
      v41 = sub_23DDC512C();
      v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 24);
      v42(v14, v15, v41);
      v43 = v16[5];
      v44 = &v14[v43];
      v45 = &v15[v43];
      v42(&v14[v43], &v15[v43], v41);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v42(&v44[*(int *)(v46 + 36)], &v45[*(int *)(v46 + 36)], v41);
      v47 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v44[v47[5]] = *(_QWORD *)&v45[v47[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v44[v47[6]] = *(_QWORD *)&v45[v47[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v44[v47[7]] = *(_QWORD *)&v45[v47[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v48 = v16[6];
      v49 = &v14[v48];
      v50 = &v15[v48];
      v51 = *(_OWORD *)v50;
      v49[16] = v50[16];
      *(_OWORD *)v49 = v51;
      v14[v16[7]] = v15[v16[7]];
      v14[v16[8]] = v15[v16[8]];
      v14[v16[9]] = v15[v16[9]];
      v52 = v16[10];
      v53 = &v14[v52];
      v54 = &v15[v52];
      *(_QWORD *)v53 = *(_QWORD *)v54;
      *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v55 = v16[11];
      v56 = &v14[v55];
      v57 = &v15[v55];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      *((_QWORD *)v56 + 1) = *((_QWORD *)v57 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_23DCF59A8((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v21);
  memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
LABEL_16:
  v58 = a3[8];
  v59 = a1 + v58;
  v60 = a2 + v58;
  *(_QWORD *)(a1 + v58) = *(_QWORD *)(a2 + v58);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61 = type metadata accessor for OvernightMetricsChartPointCollection();
  v62 = *(int *)(v61 + 20);
  v63 = v59 + v62;
  v64 = v60 + v62;
  v65 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 24))(v63, v64, v65);
  *(_QWORD *)(v59 + *(int *)(v61 + 24)) = *(_QWORD *)(v60 + *(int *)(v61 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v66 = a3[11];
  v67 = a1 + v66;
  v68 = a2 + v66;
  v69 = sub_23DDC512C();
  v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 24);
  v70(v67, v68, v69);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v72 = v71;
  v70(v67 + *(int *)(v71 + 36), v68 + *(int *)(v71 + 36), v69);
  v73 = a3[12];
  v74 = a1 + v73;
  v75 = a2 + v73;
  v70(a1 + v73, a2 + v73, v69);
  v70(v74 + *(int *)(v72 + 36), v75 + *(int *)(v72 + 36), v69);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for OvernightMetricsViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = sub_23DDC55A0();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v8, v9, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  v14 = a3[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v51 = v18;
    v20 = sub_23DDC512C();
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
    v21(v15, v16, v20);
    v22 = v17[5];
    v23 = &v15[v22];
    v24 = &v16[v22];
    v21(&v15[v22], &v16[v22], v20);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v21(&v23[*(int *)(v25 + 36)], &v24[*(int *)(v25 + 36)], v20);
    v26 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v23[v26[5]] = *(_QWORD *)&v24[v26[5]];
    *(_QWORD *)&v23[v26[6]] = *(_QWORD *)&v24[v26[6]];
    *(_QWORD *)&v23[v26[7]] = *(_QWORD *)&v24[v26[7]];
    v27 = v17[6];
    v28 = &v15[v27];
    v29 = &v16[v27];
    *(_OWORD *)v28 = *(_OWORD *)v29;
    v28[16] = v29[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
    *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v51 + 56))(v15, 0, 1, v17);
  }
  v30 = a3[8];
  v31 = a1 + v30;
  v32 = a2 + v30;
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  v33 = type metadata accessor for OvernightMetricsChartPointCollection();
  v34 = *(int *)(v33 + 20);
  v35 = v31 + v34;
  v36 = v32 + v34;
  v37 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  *(_QWORD *)(v31 + *(int *)(v33 + 24)) = *(_QWORD *)(v32 + *(int *)(v33 + 24));
  v38 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v38) = *(_QWORD *)(a2 + v38);
  v39 = a3[11];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_23DDC512C();
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32);
  v43(v40, v41, v42);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v45 = v44;
  v43(v40 + *(int *)(v44 + 36), v41 + *(int *)(v44 + 36), v42);
  v46 = a3[12];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v43(a1 + v46, a2 + v46, v42);
  v43(v47 + *(int *)(v45 + 36), v48 + *(int *)(v45 + 36), v42);
  v49 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v49) = *(_QWORD *)(a2 + v49);
  return a1;
}

uint64_t assignWithTake for OvernightMetricsViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, int *);
  int v20;
  int v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = a3[6];
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_23DCF59A8(a1 + v7, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v10 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = sub_23DDC55A0();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v8, v9, v11);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  v14 = a3[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      v24 = sub_23DDC512C();
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
      v25(v15, v16, v24);
      v26 = v17[5];
      v27 = &v15[v26];
      v73 = v18;
      v28 = &v16[v26];
      v25(&v15[v26], &v16[v26], v24);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v25(&v27[*(int *)(v29 + 36)], &v28[*(int *)(v29 + 36)], v24);
      v30 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v27[v30[5]] = *(_QWORD *)&v28[v30[5]];
      *(_QWORD *)&v27[v30[6]] = *(_QWORD *)&v28[v30[6]];
      *(_QWORD *)&v27[v30[7]] = *(_QWORD *)&v28[v30[7]];
      v31 = v17[6];
      v32 = &v15[v31];
      v33 = &v16[v31];
      *(_OWORD *)v32 = *(_OWORD *)v33;
      v32[16] = v33[16];
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
      *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v73 + 56))(v15, 0, 1, v17);
      goto LABEL_16;
    }
    v22 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  else
  {
    if (!v21)
    {
      v34 = sub_23DDC512C();
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 40);
      v35(v15, v16, v34);
      v36 = v17[5];
      v37 = &v15[v36];
      v38 = &v16[v36];
      v35(&v15[v36], &v16[v36], v34);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v35(&v37[*(int *)(v39 + 36)], &v38[*(int *)(v39 + 36)], v34);
      v40 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v37[v40[5]] = *(_QWORD *)&v38[v40[5]];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v37[v40[6]] = *(_QWORD *)&v38[v40[6]];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v37[v40[7]] = *(_QWORD *)&v38[v40[7]];
      swift_bridgeObjectRelease();
      v41 = v17[6];
      v42 = &v15[v41];
      v43 = &v16[v41];
      *(_OWORD *)v42 = *(_OWORD *)v43;
      v42[16] = v43[16];
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      v44 = v17[10];
      v45 = &v15[v44];
      v46 = (uint64_t *)&v16[v44];
      v48 = *v46;
      v47 = v46[1];
      *(_QWORD *)v45 = v48;
      *((_QWORD *)v45 + 1) = v47;
      swift_bridgeObjectRelease();
      v49 = v17[11];
      v50 = &v15[v49];
      v51 = (uint64_t *)&v16[v49];
      v53 = *v51;
      v52 = v51[1];
      *(_QWORD *)v50 = v53;
      *((_QWORD *)v50 + 1) = v52;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    v22 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v22);
  memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
LABEL_16:
  v54 = a3[8];
  v55 = a1 + v54;
  v56 = a2 + v54;
  *(_QWORD *)(a1 + v54) = *(_QWORD *)(a2 + v54);
  swift_bridgeObjectRelease();
  v57 = type metadata accessor for OvernightMetricsChartPointCollection();
  v58 = *(int *)(v57 + 20);
  v59 = v55 + v58;
  v60 = v56 + v58;
  v61 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 40))(v59, v60, v61);
  *(_QWORD *)(v55 + *(int *)(v57 + 24)) = *(_QWORD *)(v56 + *(int *)(v57 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  v62 = a3[11];
  v63 = a1 + v62;
  v64 = a2 + v62;
  v65 = sub_23DDC512C();
  v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 40);
  v66(v63, v64, v65);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v68 = v67;
  v66(v63 + *(int *)(v67 + 36), v64 + *(int *)(v67 + 36), v65);
  v69 = a3[12];
  v70 = a1 + v69;
  v71 = a2 + v69;
  v66(a1 + v69, a2 + v69, v65);
  v66(v70 + *(int *)(v68 + 36), v71 + *(int *)(v68 + 36), v65);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD4AF44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_23DDC5330();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[6];
    }
    else
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
      {
        v8 = v16;
        v15 = a3[7];
      }
      else
      {
        v17 = type metadata accessor for OvernightMetricsChartPointCollection();
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
        {
          v8 = v17;
          v15 = a3[8];
        }
        else
        {
          sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
          v8 = v18;
          v14 = *(_QWORD *)(v18 - 8);
          v15 = a3[11];
        }
      }
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD4B08C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_23DDC5330();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5]) = (a2 - 1);
      return result;
    }
    v13 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        v17 = type metadata accessor for OvernightMetricsChartPointCollection();
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[8];
        }
        else
        {
          sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
          v10 = v18;
          v14 = *(_QWORD *)(v18 - 8);
          v15 = a4[11];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23DD4B1C4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_23DDC5330();
  if (v0 <= 0x3F)
  {
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(319);
    if (v1 <= 0x3F)
    {
      sub_23DCFB328(319, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for OvernightMetricsChartPointCollection();
        if (v3 <= 0x3F)
        {
          sub_23DD04550(319, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
          if (v4 <= 0x3F)
            swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t destroy for OvernightMetricsViewModel.Summary()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsViewModel.Summary(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsViewModel.Summary(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for OvernightMetricsViewModel.Summary(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsViewModel.Summary(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsViewModel.Summary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsViewModel.Summary()
{
  return &type metadata for OvernightMetricsViewModel.Summary;
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsViewModel.Summary.Variant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23DD4B5B8 + 4 * byte_23DDC90A0[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23DD4B5EC + 4 * byte_23DDC909B[v4]))();
}

uint64_t sub_23DD4B5EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD4B5F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DD4B5FCLL);
  return result;
}

uint64_t sub_23DD4B608(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DD4B610);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23DD4B614(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD4B61C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsViewModel.Summary.Variant()
{
  return &type metadata for OvernightMetricsViewModel.Summary.Variant;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_23DD4B714 + 4 * byte_23DDC90AA[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_23DD4B748 + 4 * byte_23DDC90A5[v4]))();
}

uint64_t sub_23DD4B748(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD4B750(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DD4B758);
  return result;
}

uint64_t sub_23DD4B764(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DD4B76CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_23DD4B770(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD4B778(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsViewModel.CodingKeys()
{
  return &type metadata for OvernightMetricsViewModel.CodingKeys;
}

uint64_t *sub_23DD4B794(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      v7 = sub_23DDC55A0();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23DD4B8C4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
    return swift_bridgeObjectRelease();
  v3 = sub_23DDC55A0();
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

_QWORD *sub_23DD4B94C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = sub_23DDC55A0();
    v5 = *(_QWORD *)(v4 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, v4);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *sub_23DD4BA50(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sub_23DCF59A8((uint64_t)a1, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      v4 = sub_23DDC55A0();
      v5 = *(_QWORD *)(v4 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, v4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_23DD4BB6C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23DDC55A0();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_23DD4BC68(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_23DCF59A8((uint64_t)a1, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23DDC55A0();
      v7 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void sub_23DD4BD7C()
{
  unint64_t v0;

  sub_23DCFB328(319, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initEnumMetadataMultiPayload();
}

unint64_t sub_23DD4BE08()
{
  unint64_t result;

  result = qword_256CFDD78;
  if (!qword_256CFDD78)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC936C, &type metadata for OvernightMetricsViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDD78);
  }
  return result;
}

unint64_t sub_23DD4BE50()
{
  unint64_t result;

  result = qword_256CFDD80;
  if (!qword_256CFDD80)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC92DC, &type metadata for OvernightMetricsViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDD80);
  }
  return result;
}

unint64_t sub_23DD4BE98()
{
  unint64_t result;

  result = qword_256CFDD88;
  if (!qword_256CFDD88)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9304, &type metadata for OvernightMetricsViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDD88);
  }
  return result;
}

uint64_t sub_23DD4BEDC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65676E6152796164 && a2 == 0xE800000000000000;
  if (v2 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000023DDCD270 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x800000023DDCD290 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023DDCD2C0 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023DDCD2E0 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x696F507472616863 && a2 == 0xEB0000000073746ELL || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023DDCD300 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023DDCD320 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x736574614479656BLL && a2 == 0xED000065676E6152 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023DDCD340 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023DDCD360)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = sub_23DDC6C08();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

unint64_t sub_23DD4C32C()
{
  unint64_t result;

  result = qword_256CFDD98;
  if (!qword_256CFDD98)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9730, &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FixedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDD98);
  }
  return result;
}

unint64_t sub_23DD4C370()
{
  unint64_t result;

  result = qword_256CFDDA8;
  if (!qword_256CFDDA8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC96E0, &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FeatureStatusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDDA8);
  }
  return result;
}

unint64_t sub_23DD4C3B4()
{
  unint64_t result;

  result = qword_256CFDDB8;
  if (!qword_256CFDDB8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9690, &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDDB8);
  }
  return result;
}

unint64_t sub_23DD4C3F8()
{
  unint64_t result;

  result = qword_256CFDDE8;
  if (!qword_256CFDDE8)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_256CFDDE8);
  }
  return result;
}

uint64_t sub_23DD4C434(uint64_t a1, uint64_t a2)
{
  return sub_23DD4C448(a1, a2, (uint64_t (*)(void))sub_23DD56F40, (uint64_t (*)(_QWORD))MEMORY[0x24BE40238]);
}

uint64_t sub_23DD4C448(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(_QWORD))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 - v9 > *(_QWORD *)(v6 + 24) >> 1)
    v6 = a3();
  v13 = *(_QWORD *)(a4(0) - 8);
  v14 = v6 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * a1;
  v17 = v14 + v15 * a1;
  result = swift_arrayDestroy();
  if (!v9)
    goto LABEL_22;
  v19 = *(_QWORD *)(v6 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_28;
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (v16 < v15 * a2 || v17 >= v14 + v15 * a2 + v20 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != v15 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v22 = *(_QWORD *)(v6 + 16);
    v23 = __OFADD__(v22, v10);
    v24 = v22 - v9;
    if (!v23)
    {
      *(_QWORD *)(v6 + 16) = v24;
LABEL_22:
      *v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD4C5F8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  sub_23DD4C75C(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_23DD4C634(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_23DCFB328(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_23DD4C68C@<X0>(uint64_t a1@<X8>)
{
  return sub_23DDC25AC(a1);
}

void sub_23DD4C6A8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t (*v5)(uint64_t);
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_23DDC53A8();
    v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20];
    a3(255);
    sub_23DCF535C(&qword_254326680, v5, MEMORY[0x24BE3FE38]);
    v6 = sub_23DDC6B00();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_23DD4C740(uint64_t a1)
{
  uint64_t v1;

  return sub_23DD44CF8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

void sub_23DD4C75C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_23DCFB328(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_23DD4C7C8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2543266E0)
  {
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2543266E0);
  }
}

void sub_23DD4C828()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2543266A0)
  {
    sub_23DDC53A8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2543266A0);
  }
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DD4C8D8 + 4 * byte_23DDC90B4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DD4C90C + 4 * byte_23DDC90AF[v4]))();
}

uint64_t sub_23DD4C90C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD4C914(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DD4C91CLL);
  return result;
}

uint64_t sub_23DD4C928(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DD4C930);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DD4C934(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD4C93C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys()
{
  return &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys;
}

ValueMetadata *type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FeatureStatusCodingKeys()
{
  return &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FeatureStatusCodingKeys;
}

uint64_t _s15HealthBalanceUI25OvernightMetricsViewModelV34DataTypeVisibilityDerivationMethodO23FeatureStatusCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DD4C9B0 + 4 * byte_23DDC90B9[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DD4C9D0 + 4 * byte_23DDC90BE[v4]))();
}

_BYTE *sub_23DD4C9B0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DD4C9D0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DD4C9D8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DD4C9E0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DD4C9E8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DD4C9F0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FixedCodingKeys()
{
  return &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FixedCodingKeys;
}

unint64_t sub_23DD4CA10()
{
  unint64_t result;

  result = qword_256CFDE10;
  if (!qword_256CFDE10)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC94F8, &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FixedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDE10);
  }
  return result;
}

unint64_t sub_23DD4CA58()
{
  unint64_t result;

  result = qword_256CFDE18;
  if (!qword_256CFDE18)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC95B0, &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FeatureStatusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDE18);
  }
  return result;
}

unint64_t sub_23DD4CAA0()
{
  unint64_t result;

  result = qword_256CFDE20;
  if (!qword_256CFDE20)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9668, &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDE20);
  }
  return result;
}

unint64_t sub_23DD4CAE8()
{
  unint64_t result;

  result = qword_256CFDE28;
  if (!qword_256CFDE28)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC95D8, &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDE28);
  }
  return result;
}

unint64_t sub_23DD4CB30()
{
  unint64_t result;

  result = qword_256CFDE30;
  if (!qword_256CFDE30)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9600, &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDE30);
  }
  return result;
}

unint64_t sub_23DD4CB78()
{
  unint64_t result;

  result = qword_256CFDE38;
  if (!qword_256CFDE38)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9520, &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FeatureStatusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDE38);
  }
  return result;
}

unint64_t sub_23DD4CBC0()
{
  unint64_t result;

  result = qword_256CFDE40;
  if (!qword_256CFDE40)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9548, &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FeatureStatusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDE40);
  }
  return result;
}

unint64_t sub_23DD4CC08()
{
  unint64_t result;

  result = qword_256CFDE48;
  if (!qword_256CFDE48)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9468, &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FixedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDE48);
  }
  return result;
}

unint64_t sub_23DD4CC50()
{
  unint64_t result;

  result = qword_256CFDE50;
  if (!qword_256CFDE50)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9490, &type metadata for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod.FixedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFDE50);
  }
  return result;
}

uint64_t dispatch thunk of SleepingSampleDataTypePreferredUnitProviding.preferredAggregateValueUnit(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of SleepingSampleDataTypePreferredUnitProviding.startObserving()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void *sub_23DD4CCB4(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  char v7;
  id v8;
  void *v10;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v6 = sub_23DD76AD4((uint64_t)a1);
      if ((v7 & 1) != 0)
      {
        v5 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v6);
        v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  v3 = a1;
  v4 = sub_23DDC6AAC();

  if (!v4)
    return 0;
  sub_23DD0C898(0, (unint64_t *)&qword_256CFE030);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

id sub_23DD4CD88()
{
  uint64_t v0;

  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  sub_23DDC5210();
  swift_release();
  return *(id *)(v0 + 16);
}

id sub_23DD4CE0C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  sub_23DDC5210();
  swift_release();
  v4 = *(void **)(v3 + 16);
  *a2 = v4;
  return v4;
}

uint64_t sub_23DD4CE98(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  v2 = v1;
  sub_23DDC5204();

  return swift_release();
}

uint64_t sub_23DD4CF4C()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  sub_23DDC5210();
  swift_release();
  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t sub_23DD4CFE0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  sub_23DDC5210();
  swift_release();
  v5 = *(_QWORD *)(v3 + 24);
  v4 = *(_QWORD *)(v3 + 32);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  *a2 = &unk_256CFE050;
  a2[1] = v6;
  return swift_retain();
}

uint64_t sub_23DD4D094(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_23DD4D0EC;
  return v5();
}

uint64_t sub_23DD4D0EC(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v5;

  v3 = *(_QWORD **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc();
  *v3 = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_23DD4D13C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  swift_retain();
  sub_23DDC5204();
  swift_release();
  return swift_release();
}

uint64_t sub_23DD4D228(int *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  v4 = (uint64_t (*)(uint64_t))((char *)a1 + *a1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_23DD4D290;
  return v4(v1 + 16);
}

uint64_t sub_23DD4D290()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v3 + 8))(*(_QWORD *)(v1 + 16));
}

uint64_t sub_23DD4D2D8()
{
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  sub_23DDC5210();
  swift_release();
  return swift_retain();
}

uint64_t sub_23DD4D360@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  sub_23DDC5210();
  swift_release();
  *a2 = *(_QWORD *)(v3 + 40);
  return swift_retain();
}

uint64_t sub_23DD4D3F0()
{
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  swift_retain();
  sub_23DDC5204();
  swift_release();
  return swift_release();
}

uint64_t sub_23DD4D4A8()
{
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  sub_23DDC5210();
  swift_release();
  return swift_retain();
}

uint64_t sub_23DD4D530@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  sub_23DDC5210();
  swift_release();
  *a2 = *(_QWORD *)(v3 + 48);
  return swift_retain();
}

uint64_t sub_23DD4D5C0()
{
  swift_getKeyPath();
  sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  swift_retain();
  sub_23DDC5204();
  swift_release();
  return swift_release();
}

_QWORD *sub_23DD4D678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *result;
  void *v10;
  id v11;
  _QWORD *v12;
  _QWORD *v13;

  v4 = v3;
  sub_23DD0C898(0, &qword_256CFE098);
  v8 = MEMORY[0x242643338]((id)*MEMORY[0x24BDD3360]);
  result = (id)_HKGenerateDefaultUnitForQuantityType();
  if (result)
  {
    v10 = result;
    v11 = objc_msgSend((id)objc_opt_self(), sel__changeInUnit_, result);

    v12 = (_QWORD *)swift_allocObject();
    v12[2] = a1;
    v12[3] = v8;
    v12[4] = a2;
    v12[5] = a3;
    v12[6] = v4;
    type metadata accessor for SleepingSampleDataTypePreferredUnitProvider();
    v13 = (_QWORD *)swift_allocObject();
    v13[5] = 0;
    v13[6] = 0;
    sub_23DDC5234();
    v13[2] = v11;
    v13[3] = &unk_256CFE0A8;
    v13[4] = v12;
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23DD4D794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[27] = a4;
  v5[28] = a5;
  v5[25] = a2;
  v5[26] = a3;
  v5[24] = a1;
  v6 = sub_23DDC57A4();
  v5[29] = v6;
  v5[30] = *(_QWORD *)(v6 - 8);
  v5[31] = swift_task_alloc();
  sub_23DDC6830();
  v5[32] = sub_23DDC6824();
  v5[33] = sub_23DDC67F4();
  v5[34] = v7;
  return swift_task_switch();
}

uint64_t sub_23DD4D830()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t inited;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;

  v1 = v0[25];
  sub_23DD4FF68();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DDC9780;
  *(_QWORD *)(inited + 32) = v1;
  v13 = inited;
  sub_23DDC67D0();
  v3 = (void *)v0[25];
  if (v13 >> 62)
  {
    v6 = v3;
    swift_bridgeObjectRetain();
    v7 = sub_23DDC6AD0();
    swift_bridgeObjectRelease();
    if (!v7)
      goto LABEL_5;
    goto LABEL_3;
  }
  v4 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = v3;
  if (v4)
LABEL_3:
    sub_23DD4FFC0(v13);
LABEL_5:
  v8 = (void *)v0[24];
  swift_bridgeObjectRelease();
  sub_23DD0C898(0, &qword_256CFE098);
  sub_23DD50318();
  v9 = sub_23DDC689C();
  v0[35] = v9;
  swift_bridgeObjectRelease();
  v0[7] = v0 + 20;
  v0[2] = v0;
  v0[3] = sub_23DD4D9BC;
  v10 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v11 = v0 + 10;
  v11[1] = 0x40000000;
  v11[2] = sub_23DD4DDC0;
  v11[3] = &block_descriptor;
  v11[4] = v10;
  objc_msgSend(v8, sel_preferredUnitsForQuantityTypes_completion_, v9, v11);
  return swift_continuation_await();
}

uint64_t sub_23DD4D9BC()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 288) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_23DD4DA18()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  void (*v6)(void);
  id v7;

  v1 = *(void **)(v0 + 280);
  v2 = *(void **)(v0 + 200);
  swift_release();
  v3 = *(_QWORD *)(v0 + 160);

  v4 = v2;
  v5 = sub_23DD4CCB4(v4, v3);
  swift_bridgeObjectRelease();

  if (!v5)
  {
    v5 = (id)_HKGenerateDefaultUnitForQuantityType();
    if (!v5)
      v5 = objc_msgSend((id)objc_opt_self(), sel_degreeCelsiusUnit);
  }
  v6 = *(void (**)(void))(v0 + 208);
  if (v6)
    v6();
  v7 = objc_msgSend((id)objc_opt_self(), sel__changeInUnit_, v5);

  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v7);
}

uint64_t sub_23DD4DB08()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  void (*v22)(void);
  id v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[2];

  v2 = *(void **)(v0 + 280);
  v1 = *(void **)(v0 + 288);
  swift_release();
  swift_willThrow();

  sub_23DDC578C();
  v3 = v1;
  v4 = v1;
  v5 = sub_23DDC5798();
  v6 = sub_23DDC68D8();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(void **)(v0 + 288);
    v8 = *(_QWORD *)(v0 + 240);
    v25 = *(_QWORD *)(v0 + 232);
    v26 = *(_QWORD *)(v0 + 248);
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v27[0] = v10;
    *(_DWORD *)v9 = 136446466;
    v11 = sub_23DDC6D04();
    *(_QWORD *)(v0 + 168) = sub_23DD02158(v11, v12, v27);
    sub_23DDC698C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    *(_QWORD *)(v0 + 176) = v7;
    v13 = v7;
    sub_23DD02790();
    v14 = sub_23DDC6788();
    *(_QWORD *)(v0 + 184) = sub_23DD02158(v14, v15, v27);
    sub_23DDC698C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_23DCF2000, v5, v6, "[%{public}s] Error retrieving unit preferences: %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v10, -1, -1);
    MEMORY[0x242643C80](v9, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v26, v25);
  }
  else
  {
    v16 = *(void **)(v0 + 288);
    v18 = *(_QWORD *)(v0 + 240);
    v17 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 232);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  v20 = (id)_HKGenerateDefaultUnitForQuantityType();
  v21 = *(void **)(v0 + 288);
  if (!v20)
    v20 = objc_msgSend((id)objc_opt_self(), sel_degreeCelsiusUnit);

  v22 = *(void (**)(void))(v0 + 208);
  if (v22)
    v22();
  v23 = objc_msgSend((id)objc_opt_self(), sel__changeInUnit_, v20);

  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v23);
}

uint64_t sub_23DD4DDC0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    sub_23DD02790();
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    sub_23DD0C898(0, &qword_256CFE098);
    sub_23DD0C898(0, (unint64_t *)&qword_256CFE030);
    sub_23DD50318();
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = sub_23DDC6650();
    return swift_continuation_throwingResume();
  }
}

id sub_23DD4DE90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  int v9;
  id v10;
  id result;
  _QWORD v12[2];

  v2 = v1;
  v4 = sub_23DDC53A8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if (v9 == *MEMORY[0x24BE3FE10] || v9 == *MEMORY[0x24BE3FDD0])
  {
    v10 = objc_msgSend((id)objc_opt_self(), sel__countPerMinuteUnit);
    return v10;
  }
  if (v9 == *MEMORY[0x24BE3FDC8])
  {
    v10 = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
    return v10;
  }
  if (v9 == *MEMORY[0x24BE3FDD8])
  {
    swift_getKeyPath();
    v12[1] = v2;
    sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
    sub_23DDC5210();
    swift_release();
    return *(id *)(v2 + 16);
  }
  if (v9 == *MEMORY[0x24BE3FDC0])
  {
    v10 = objc_msgSend((id)objc_opt_self(), sel_secondUnit);
    return v10;
  }
  result = (id)sub_23DDC6AC4();
  __break(1u);
  return result;
}

void sub_23DD4E0C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = (uint64_t)v0;
  v2 = *v0;
  sub_23DCF6898(0, &qword_254326768, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v37 - v4;
  v6 = sub_23DDC57A4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v10 = (char *)v0
      + OBJC_IVAR____TtC15HealthBalanceUI43SleepingSampleDataTypePreferredUnitProvider___observationRegistrar;
  v44 = v1;
  v11 = sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  sub_23DDC5210();
  swift_release();
  if (!*(_QWORD *)(v1 + 40))
  {
    v40 = v11;
    v41 = v10;
    sub_23DDC578C();
    v12 = sub_23DDC5798();
    v13 = sub_23DDC68F0();
    v14 = os_log_type_enabled(v12, v13);
    v42 = v2;
    if (v14)
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v44 = v39;
      *(_DWORD *)v15 = 136446210;
      v38 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v15 + 4);
      v16 = sub_23DDC6D04();
      v43 = sub_23DD02158(v16, v17, &v44);
      sub_23DDC698C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DCF2000, v12, v13, "[%{public}s] Beginning observation", v15, 0xCu);
      v18 = v39;
      swift_arrayDestroy();
      MEMORY[0x242643C80](v18, -1, -1);
      MEMORY[0x242643C80](v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v19 = sub_23DDC6854();
    v20 = (void (*)(uint64_t))MEMORY[0x24BEE6990];
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
    v39 = v19;
    v21(v5, 1, 1, v19);
    v22 = v21;
    v38 = v21;
    sub_23DDC6830();
    swift_retain();
    v23 = sub_23DDC6824();
    v24 = (_QWORD *)swift_allocObject();
    v25 = MEMORY[0x24BEE6930];
    v24[2] = v23;
    v24[3] = v25;
    v24[4] = v1;
    sub_23DD6436C((uint64_t)v5, (uint64_t)&unk_256CFE060, (uint64_t)v24);
    swift_release();
    v26 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    v22(v5, 1, 1, v19);
    v27 = swift_allocObject();
    swift_weakInit();
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = 0;
    v28[3] = 0;
    v28[4] = v26;
    v28[5] = v27;
    v28[6] = v42;
    v29 = v26;
    v30 = sub_23DDA3364((uint64_t)v5, (uint64_t)&unk_256CFE070, (uint64_t)v28);
    sub_23DD290A0((uint64_t)v5, &qword_254326768, v20);
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    v37[-2] = v1;
    v37[-1] = v30;
    v44 = v1;
    v37[1] = MEMORY[0x24BEE4AE0] + 8;
    sub_23DDC5204();
    swift_release();
    swift_release();
    v38(v5, 1, 1, v39);
    v32 = swift_allocObject();
    swift_weakInit();
    v33 = (_QWORD *)swift_allocObject();
    v33[2] = 0;
    v33[3] = 0;
    v33[4] = v29;
    v33[5] = v32;
    v33[6] = v42;
    v34 = v29;
    v35 = sub_23DDA3364((uint64_t)v5, (uint64_t)&unk_256CFE080, (uint64_t)v33);
    sub_23DD290A0((uint64_t)v5, &qword_254326768, (void (*)(uint64_t))MEMORY[0x24BEE6990]);
    v36 = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](v36);
    v37[-2] = v1;
    v37[-1] = v35;
    v44 = v1;
    sub_23DDC5204();
    swift_release();
    swift_release();

  }
}

uint64_t sub_23DD4E5E4()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[2] = sub_23DDC6830();
  v0[3] = sub_23DDC6824();
  v1 = (_QWORD *)swift_task_alloc();
  v0[4] = v1;
  *v1 = v0;
  v1[1] = sub_23DD4E648;
  return sub_23DD4F25C();
}

uint64_t sub_23DD4E648()
{
  swift_task_dealloc();
  sub_23DDC67F4();
  return swift_task_switch();
}

uint64_t sub_23DD4E6B8()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DD4E6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  v7 = sub_23DDC57A4();
  v6[9] = v7;
  v6[10] = *(_QWORD *)(v7 - 8);
  v6[11] = swift_task_alloc();
  sub_23DCF6898(0, &qword_256CFE088, (void (*)(uint64_t))MEMORY[0x24BDCB930]);
  v6[12] = swift_task_alloc();
  v8 = sub_23DDC6950();
  v6[13] = v8;
  v6[14] = *(_QWORD *)(v8 - 8);
  v6[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23DD4E7A4()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[16] = sub_23DDC695C();
  swift_retain();
  sub_23DDC6944();
  swift_beginAccess();
  v0[17] = sub_23DCF535C(&qword_256CFE090, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0028], MEMORY[0x24BDD0038]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[18] = v1;
  *v1 = v0;
  v1[1] = sub_23DD4E874;
  return sub_23DDC6818();
}

uint64_t sub_23DD4E874()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 152) = v0;
  return swift_task_switch();
}

uint64_t sub_23DD4E8D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t Strong;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = sub_23DDC4EEC();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_23DDC578C();
    v4 = sub_23DDC5798();
    v5 = sub_23DDC68F0();
    v6 = os_log_type_enabled(v4, v5);
    v8 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 88);
    v9 = *(_QWORD *)(v0 + 72);
    if (v6)
    {
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v17 = v11;
      *(_DWORD *)v10 = 136446210;
      v12 = sub_23DDC6D04();
      *(_QWORD *)(v10 + 4) = sub_23DD02158(v12, v13, &v17);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DCF2000, v4, v5, "[%{public}s] Received unit preferences did change notification", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v11, -1, -1);
      MEMORY[0x242643C80](v10, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    Strong = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 160) = Strong;
    if (Strong)
    {
      v15 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 168) = v15;
      *v15 = v0;
      v15[1] = sub_23DD4EBA0;
      return sub_23DD4F25C();
    }
    else
    {
      sub_23DD290A0(*(_QWORD *)(v0 + 96), &qword_256CFE088, (void (*)(uint64_t))MEMORY[0x24BDCB930]);
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 176) = v16;
      *v16 = v0;
      v16[1] = sub_23DD4EC6C;
      return sub_23DDC6818();
    }
  }
}

uint64_t sub_23DD4EB44()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 152);
  sub_23DD02790();
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t sub_23DD4EBA0()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23DD4EBFC()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23DD290A0(*(_QWORD *)(v0 + 96), &qword_256CFE088, (void (*)(uint64_t))MEMORY[0x24BDCB930]);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v1;
  *v1 = v0;
  v1[1] = sub_23DD4EC6C;
  return sub_23DDC6818();
}

uint64_t sub_23DD4EC6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 152) = v0;
  return swift_task_switch();
}

uint64_t sub_23DD4ECD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  v7 = sub_23DDC57A4();
  v6[9] = v7;
  v6[10] = *(_QWORD *)(v7 - 8);
  v6[11] = swift_task_alloc();
  sub_23DCF6898(0, &qword_256CFE088, (void (*)(uint64_t))MEMORY[0x24BDCB930]);
  v6[12] = swift_task_alloc();
  v8 = sub_23DDC6950();
  v6[13] = v8;
  v6[14] = *(_QWORD *)(v8 - 8);
  v6[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23DD4ED8C()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[16] = sub_23DDC695C();
  swift_retain();
  sub_23DDC6944();
  swift_beginAccess();
  v0[17] = sub_23DCF535C(&qword_256CFE090, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0028], MEMORY[0x24BDD0038]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[18] = v1;
  *v1 = v0;
  v1[1] = sub_23DD4EE5C;
  return sub_23DDC6818();
}

uint64_t sub_23DD4EE5C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 152) = v0;
  return swift_task_switch();
}

uint64_t sub_23DD4EEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t Strong;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = sub_23DDC4EEC();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_23DDC578C();
    v4 = sub_23DDC5798();
    v5 = sub_23DDC68F0();
    v6 = os_log_type_enabled(v4, v5);
    v8 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 88);
    v9 = *(_QWORD *)(v0 + 72);
    if (v6)
    {
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v17 = v11;
      *(_DWORD *)v10 = 136446210;
      v12 = sub_23DDC6D04();
      *(_QWORD *)(v10 + 4) = sub_23DD02158(v12, v13, &v17);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DCF2000, v4, v5, "[%{public}s] Received current locale did change notification", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v11, -1, -1);
      MEMORY[0x242643C80](v10, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    Strong = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 160) = Strong;
    if (Strong)
    {
      v15 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 168) = v15;
      *v15 = v0;
      v15[1] = sub_23DD4F12C;
      return sub_23DD4F25C();
    }
    else
    {
      sub_23DD290A0(*(_QWORD *)(v0 + 96), &qword_256CFE088, (void (*)(uint64_t))MEMORY[0x24BDCB930]);
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 176) = v16;
      *v16 = v0;
      v16[1] = sub_23DD4F1F8;
      return sub_23DDC6818();
    }
  }
}

uint64_t sub_23DD4F12C()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23DD4F188()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23DD290A0(*(_QWORD *)(v0 + 96), &qword_256CFE088, (void (*)(uint64_t))MEMORY[0x24BDCB930]);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v1;
  *v1 = v0;
  v1[1] = sub_23DD4F1F8;
  return sub_23DDC6818();
}

uint64_t sub_23DD4F1F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 152) = v0;
  return swift_task_switch();
}

uint64_t sub_23DD4F25C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[7] = v0;
  v1[8] = *v0;
  v2 = sub_23DDC57A4();
  v1[9] = v2;
  v1[10] = *(_QWORD *)(v2 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  sub_23DDC6830();
  v1[13] = sub_23DDC6824();
  v1[14] = sub_23DDC67F4();
  v1[15] = v3;
  return swift_task_switch();
}

uint64_t sub_23DD4F308()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v1 = v0[7];
  swift_getKeyPath();
  v0[16] = OBJC_IVAR____TtC15HealthBalanceUI43SleepingSampleDataTypePreferredUnitProvider___observationRegistrar;
  v0[2] = v1;
  v0[17] = sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  sub_23DDC5210();
  swift_release();
  v2 = *(int **)(v1 + 24);
  v0[18] = *(_QWORD *)(v1 + 32);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  v0[19] = v3;
  *v3 = v0;
  v3[1] = sub_23DD4F3DC;
  return v5();
}

uint64_t sub_23DD4F3DC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23DD4F43C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  char v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];

  v1 = *(_QWORD *)(v0 + 56);
  swift_release();
  swift_getKeyPath();
  *(_QWORD *)(v0 + 24) = v1;
  sub_23DDC5210();
  swift_release();
  v2 = *(void **)(v1 + 16);
  sub_23DD0C898(0, (unint64_t *)&qword_256CFE030);
  v3 = v2;
  v4 = sub_23DDC6974();

  if ((v4 & 1) != 0)
  {
    sub_23DDC578C();
    v5 = sub_23DDC5798();
    v6 = sub_23DDC68F0();
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(void **)(v0 + 160);
    v10 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 72);
    if (v7)
    {
      v35 = *(_QWORD *)(v0 + 72);
      v33 = *(void **)(v0 + 160);
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v36[0] = v13;
      *(_DWORD *)v12 = 136446210;
      v14 = sub_23DDC6D04();
      *(_QWORD *)(v0 + 48) = sub_23DD02158(v14, v15, v36);
      sub_23DDC698C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DCF2000, v5, v6, "[%{public}s] Fetched units (no changes)", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v13, -1, -1);
      MEMORY[0x242643C80](v12, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v35);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
  }
  else
  {
    v16 = *(void **)(v0 + 160);
    v17 = *(_QWORD *)(v0 + 56);
    swift_getKeyPath();
    v18 = swift_task_alloc();
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(v18 + 24) = v16;
    *(_QWORD *)(v0 + 32) = v17;
    v19 = v16;
    sub_23DDC5204();
    swift_release();

    swift_task_dealloc();
    sub_23DDC578C();
    v20 = sub_23DDC5798();
    v21 = sub_23DDC68F0();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(void **)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 96);
    v25 = *(_QWORD *)(v0 + 72);
    v26 = *(_QWORD *)(v0 + 80);
    if (v22)
    {
      v34 = *(_QWORD *)(v0 + 80);
      v32 = *(_QWORD *)(v0 + 96);
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v36[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = sub_23DDC6D04();
      *(_QWORD *)(v0 + 40) = sub_23DD02158(v29, v30, v36);
      sub_23DDC698C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DCF2000, v20, v21, "[%{public}s] Updated units", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v28, -1, -1);
      MEMORY[0x242643C80](v27, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v25);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DD4F844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC15HealthBalanceUI43SleepingSampleDataTypePreferredUnitProvider___observationRegistrar;
  v2 = sub_23DDC5240();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_23DD4F8B4()
{
  return type metadata accessor for SleepingSampleDataTypePreferredUnitProvider();
}

uint64_t type metadata accessor for SleepingSampleDataTypePreferredUnitProvider()
{
  uint64_t result;

  result = qword_256CFDE88;
  if (!qword_256CFDE88)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD4F8F8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC5240();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

id sub_23DD4F98C(uint64_t a1)
{
  return sub_23DD4DE90(a1);
}

void sub_23DD4F9AC()
{
  sub_23DD4E0C8();
}

uint64_t sub_23DD4F9CC(uint64_t a1)
{
  uint64_t result;

  result = sub_23DCF535C(&qword_256CFE028, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDataTypePreferredUnitProvider, (uint64_t)&unk_23DDC9838);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_23DD4FA18()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  v4 = v2;

}

uint64_t sub_23DD4FA4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DD4FA70()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;

  v2 = *(int **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23DD506BC;
  return ((uint64_t (*)(int *))((char *)&dword_256CFE038 + dword_256CFE038))(v2);
}

uint64_t sub_23DD4FAD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v2 = v0[4];
  *(_QWORD *)(v1 + 24) = v0[3];
  *(_QWORD *)(v1 + 32) = v2;
  swift_retain();
  return swift_release();
}

uint64_t sub_23DD4FB10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23DD506C0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_256CFE048 + dword_256CFE048))(a1, v4);
}

uint64_t sub_23DD4FB88()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DD4FBB4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23DD506C0;
  return sub_23DD4E5E4();
}

uint64_t sub_23DD4FC20()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DD4FC48(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_23DD4FCC8;
  return sub_23DD4E6E8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_23DD4FCC8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23DD4FD10()
{
  return sub_23DD4FE30();
}

uint64_t objectdestroy_26Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DD4FD5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_23DD506C0;
  return sub_23DD4ECD0(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_23DD4FDE4()
{
  return sub_23DD4FDF8();
}

uint64_t sub_23DD4FDF8()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 48) = *(_QWORD *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_23DD4FE30()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 40) = *(_QWORD *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_23DD4FE68()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DD4FEA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_23DD4FF18;
  return sub_23DD4D794(v2, v3, v4, v5, v6);
}

uint64_t sub_23DD4FF18(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

void sub_23DD4FF68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE0B0)
  {
    v0 = sub_23DDC6BF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE0B0);
  }
}

void sub_23DD4FFC0(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_23DDC6AD0();
    swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      sub_23DD50370();
      v3 = sub_23DDC69F8();
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = sub_23DDC6AD0();
      swift_bridgeObjectRelease();
      if (!v4)
        return;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x24BEE4B08];
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return;
LABEL_9:
  v6 = v3 + 56;
  v42 = v4;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v7 = 0;
    v40 = v1;
    while (1)
    {
      while (1)
      {
        v8 = MEMORY[0x242643464](v7, v1);
        v9 = __OFADD__(v7++, 1);
        if (v9)
        {
          __break(1u);
          goto LABEL_36;
        }
        v10 = v8;
        v11 = sub_23DDC6968();
        v12 = -1 << *(_BYTE *)(v3 + 32);
        v13 = v11 & ~v12;
        v14 = v13 >> 6;
        v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
        v16 = 1 << v13;
        if (((1 << v13) & v15) != 0)
          break;
LABEL_20:
        *(_QWORD *)(v6 + 8 * v14) = v16 | v15;
        *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v13) = v10;
        v22 = *(_QWORD *)(v3 + 16);
        v9 = __OFADD__(v22, 1);
        v23 = v22 + 1;
        if (v9)
          goto LABEL_37;
        *(_QWORD *)(v3 + 16) = v23;
        if (v7 == v4)
          return;
      }
      sub_23DD0C898(0, &qword_256CFE098);
      v17 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
      v18 = sub_23DDC6974();

      if ((v18 & 1) == 0)
      {
        v19 = ~v12;
        while (1)
        {
          v13 = (v13 + 1) & v19;
          v14 = v13 >> 6;
          v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
          v16 = 1 << v13;
          if ((v15 & (1 << v13)) == 0)
            break;
          v20 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
          v21 = sub_23DDC6974();

          if ((v21 & 1) != 0)
            goto LABEL_11;
        }
        v1 = v40;
        v4 = v42;
        goto LABEL_20;
      }
LABEL_11:
      swift_unknownObjectRelease();
      v1 = v40;
      v4 = v42;
      if (v7 == v42)
        return;
    }
  }
  v24 = 0;
  v39 = v1 + 32;
  v41 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v24 != v41)
  {
    v25 = *(id *)(v39 + 8 * v24);
    v26 = sub_23DDC6968();
    v27 = -1 << *(_BYTE *)(v3 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
    v31 = 1 << v28;
    if (((1 << v28) & v30) != 0)
    {
      sub_23DD0C898(0, &qword_256CFE098);
      v32 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v28);
      v33 = sub_23DDC6974();

      if ((v33 & 1) != 0)
      {
LABEL_24:

        goto LABEL_25;
      }
      v34 = ~v27;
      while (1)
      {
        v28 = (v28 + 1) & v34;
        v29 = v28 >> 6;
        v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
        v31 = 1 << v28;
        if ((v30 & (1 << v28)) == 0)
          break;
        v35 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v28);
        v36 = sub_23DDC6974();

        if ((v36 & 1) != 0)
          goto LABEL_24;
      }
    }
    *(_QWORD *)(v6 + 8 * v29) = v31 | v30;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v28) = v25;
    v37 = *(_QWORD *)(v3 + 16);
    v9 = __OFADD__(v37, 1);
    v38 = v37 + 1;
    if (v9)
      goto LABEL_38;
    *(_QWORD *)(v3 + 16) = v38;
LABEL_25:
    if (++v24 == v42)
      return;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

unint64_t sub_23DD50318()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFE0B8;
  if (!qword_256CFE0B8)
  {
    v1 = sub_23DD0C898(255, &qword_256CFE098);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_256CFE0B8);
  }
  return result;
}

void sub_23DD50370()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE0C0)
  {
    sub_23DD0C898(255, &qword_256CFE098);
    sub_23DD50318();
    v0 = sub_23DDC6A04();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE0C0);
  }
}

uint64_t sub_23DD503E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_23DDC53A8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_23DD50644();
    v10 = sub_23DDC69F8();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
      v14 = sub_23DDC6668();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v5, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_23DCF535C(&qword_254326688, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE40]);
          v20 = sub_23DDC66C8();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v5, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

void sub_23DD50644()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE0C8)
  {
    sub_23DDC53A8();
    sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
    v0 = sub_23DDC6A04();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE0C8);
  }
}

void sub_23DD506C8()
{
  sub_23DD4FA18();
}

_QWORD *sub_23DD506E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    v5 = *(int *)(a3 + 32);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = sub_23DDC52DC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_23DD50778(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 32);
  v3 = sub_23DDC52DC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_23DD507B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_23DD5081C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t sub_23DD50898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_23DD50904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_23DD50970()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD5097C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_23DDC52DC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v10);
  }
}

uint64_t sub_23DD509F8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD50A04(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 16) = a2 + 1;
  }
  else
  {
    v7 = sub_23DDC52DC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for OvernightMetricsChartWarmupProgressCounter()
{
  uint64_t result;

  result = qword_256CFE128;
  if (!qword_256CFE128)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD50AB0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC52DC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23DD50B3C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD50B4C@<X0>(uint64_t a1@<X8>)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  double v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[36];
  _BYTE v30[296];

  v25 = a1;
  v2 = sub_23DDC52DC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WarmupProgressCounter();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - v10;
  sub_23DD50D9C();
  v24 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OvernightMetricsChartWarmupProgressCounter();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, (char *)v1 + *(int *)(v15 + 32), v2);
  v16 = v1[3] * *v1;
  v17 = *v1 * v1[4];
  v18 = &v8[*(int *)(v6 + 24)];
  v29[0] = swift_getKeyPath();
  sub_23DD50E00((uint64_t)v29);
  sub_23DCFBB58((uint64_t)v29, (uint64_t)v30, (uint64_t (*)(_QWORD))sub_23DD50E08);
  memcpy(v18, v30, 0x119uLL);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
  v19 = &v8[*(int *)(v6 + 20)];
  *(double *)v19 = v16;
  *((double *)v19 + 1) = v17;
  *((_OWORD *)v19 + 1) = xmmword_23DDC9910;
  sub_23DCFBB58((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for WarmupProgressCounter);
  sub_23DDC63D4();
  sub_23DDC5B34();
  sub_23DD50E5C((uint64_t)v11, (uint64_t)v14);
  v20 = &v14[*(int *)(v24 + 36)];
  v21 = v27;
  *(_OWORD *)v20 = v26;
  *((_OWORD *)v20 + 1) = v21;
  *((_OWORD *)v20 + 2) = v28;
  sub_23DD50EA0((uint64_t)v11);
  return sub_23DCFBB58((uint64_t)v14, v25, (uint64_t (*)(_QWORD))sub_23DD50D9C);
}

void sub_23DD50D9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE170)
  {
    type metadata accessor for WarmupProgressCounter();
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE170);
  }
}

uint64_t sub_23DD50E00(uint64_t result)
{
  *(_BYTE *)(result + 280) = 0;
  return result;
}

void sub_23DD50E08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFD990)
  {
    v0 = sub_23DDC5AA4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFD990);
  }
}

uint64_t sub_23DD50E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WarmupProgressCounter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD50EA0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WarmupProgressCounter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23DD50EE0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFE178;
  if (!qword_256CFE178)
  {
    sub_23DD50D9C();
    v2 = v1;
    v3[0] = sub_23DD50F48();
    v3[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFE178);
  }
  return result;
}

unint64_t sub_23DD50F48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFE180;
  if (!qword_256CFE180)
  {
    v1 = type metadata accessor for WarmupProgressCounter();
    result = MEMORY[0x242643BD8](&protocol conformance descriptor for WarmupProgressCounter, v1);
    atomic_store(result, (unint64_t *)&qword_256CFE180);
  }
  return result;
}

_QWORD *sub_23DD50F90(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int *v58;
  unsigned int (*v59)(char *, uint64_t, int *);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  void (*v108)(char *, _QWORD, uint64_t, int *);
  int *v109;
  _QWORD *v110;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v47 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v48 = (_QWORD *)(v47 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_23DDC53A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = sub_23DDC512C();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = v8[6];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v13(&a1[v14], &a2[v14], v12);
    sub_23DCF9010();
    v18 = v17;
    v13(&v15[*(int *)(v17 + 36)], &v16[*(int *)(v17 + 36)], v12);
    v19 = v8[7];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v13(&a1[v19], &a2[v19], v12);
    v106 = v18;
    v107 = v13;
    v13(&v20[*(int *)(v18 + 36)], &v21[*(int *)(v18 + 36)], v12);
    v22 = v8[8];
    v23 = &a1[v22];
    v24 = &a2[v22];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    v25 = v8[9];
    v26 = &a1[v25];
    v27 = &a2[v25];
    v28 = sub_23DDC54C8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    v29 = v8[10];
    v30 = &a1[v29];
    v31 = &a2[v29];
    v32 = *((_QWORD *)v31 + 1);
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = v8[11];
    v34 = &a1[v33];
    v35 = &a2[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = v8[12];
    v38 = &a1[v37];
    v39 = &a2[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v41 = a3[5];
    v42 = &a1[v41];
    v43 = &a2[v41];
    v44 = *(_QWORD *)&a2[v41];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v44)
    {
      v45 = *((_QWORD *)v43 + 1);
      *(_QWORD *)v42 = v44;
      *((_QWORD *)v42 + 1) = v45;
      v46 = *((_OWORD *)v43 + 2);
      *((_OWORD *)v42 + 1) = *((_OWORD *)v43 + 1);
      *((_OWORD *)v42 + 2) = v46;
      *((_OWORD *)v42 + 3) = *((_OWORD *)v43 + 3);
      *((_QWORD *)v42 + 8) = *((_QWORD *)v43 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v49 = *((_OWORD *)v43 + 3);
      *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
      *((_OWORD *)v42 + 3) = v49;
      *((_QWORD *)v42 + 8) = *((_QWORD *)v43 + 8);
      v50 = *((_OWORD *)v43 + 1);
      *(_OWORD *)v42 = *(_OWORD *)v43;
      *((_OWORD *)v42 + 1) = v50;
    }
    v51 = a3[7];
    v109 = a3;
    v110 = a1;
    a1[a3[6]] = a2[a3[6]];
    v52 = &a1[v51];
    v53 = &a2[v51];
    *(_QWORD *)&a1[v51] = *(_QWORD *)&a2[v51];
    v54 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    v55 = v54[5];
    v56 = &v52[v55];
    v57 = &v53[v55];
    v58 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v105 = *((_QWORD *)v58 - 1);
    v59 = *(unsigned int (**)(char *, uint64_t, int *))(v105 + 48);
    swift_bridgeObjectRetain();
    if (v59(v57, 1, v58))
    {
      sub_23DD2ED80();
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v107(v56, v57, v12);
      v61 = v58[5];
      v62 = &v56[v61];
      v63 = &v57[v61];
      v107(&v56[v61], &v57[v61], v12);
      v107(&v62[*(int *)(v106 + 36)], &v63[*(int *)(v106 + 36)], v12);
      v64 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v62[v64[5]] = *(_QWORD *)&v63[v64[5]];
      *(_QWORD *)&v62[v64[6]] = *(_QWORD *)&v63[v64[6]];
      *(_QWORD *)&v62[v64[7]] = *(_QWORD *)&v63[v64[7]];
      v65 = v58[6];
      v66 = &v56[v65];
      v67 = &v57[v65];
      *(_OWORD *)v66 = *(_OWORD *)v67;
      v66[16] = v67[16];
      v56[v58[7]] = v57[v58[7]];
      v56[v58[8]] = v57[v58[8]];
      v56[v58[9]] = v57[v58[9]];
      v68 = v58[10];
      v69 = &v56[v68];
      v70 = &v57[v68];
      v71 = *((_QWORD *)v70 + 1);
      *(_QWORD *)v69 = *(_QWORD *)v70;
      *((_QWORD *)v69 + 1) = v71;
      v72 = v58[11];
      v73 = &v56[v72];
      v74 = &v57[v72];
      v75 = *((_QWORD *)v74 + 1);
      *(_QWORD *)v73 = *(_QWORD *)v74;
      *((_QWORD *)v73 + 1) = v75;
      v108 = *(void (**)(char *, _QWORD, uint64_t, int *))(v105 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v108(v56, 0, 1, v58);
    }
    *(_OWORD *)&v52[v54[6]] = *(_OWORD *)&v53[v54[6]];
    v76 = v54[7];
    v77 = &v52[v76];
    v78 = &v53[v76];
    v79 = *((_OWORD *)v78 + 1);
    *(_OWORD *)v77 = *(_OWORD *)v78;
    *((_OWORD *)v77 + 1) = v79;
    *((_QWORD *)v77 + 10) = *((_QWORD *)v78 + 10);
    v80 = *((_OWORD *)v78 + 4);
    v81 = *((_OWORD *)v78 + 2);
    *((_OWORD *)v77 + 3) = *((_OWORD *)v78 + 3);
    *((_OWORD *)v77 + 4) = v80;
    *((_OWORD *)v77 + 2) = v81;
    *(_QWORD *)&v52[v54[8]] = *(_QWORD *)&v53[v54[8]];
    *(_QWORD *)&v52[v54[9]] = *(_QWORD *)&v53[v54[9]];
    v82 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    v83 = &v52[v82];
    v84 = &v53[v82];
    v85 = *((_QWORD *)v84 + 1);
    *(_QWORD *)v83 = *(_QWORD *)v84;
    *((_QWORD *)v83 + 1) = v85;
    v86 = *((_QWORD *)v84 + 3);
    *((_QWORD *)v83 + 2) = *((_QWORD *)v84 + 2);
    *((_QWORD *)v83 + 3) = v86;
    *((_QWORD *)v83 + 4) = *((_QWORD *)v84 + 4);
    *(_OWORD *)(v83 + 40) = *(_OWORD *)(v84 + 40);
    *(_OWORD *)(v83 + 56) = *(_OWORD *)(v84 + 56);
    *(_OWORD *)(v83 + 72) = *(_OWORD *)(v84 + 72);
    *(_OWORD *)(v83 + 88) = *(_OWORD *)(v84 + 88);
    *(_OWORD *)(v83 + 104) = *(_OWORD *)(v84 + 104);
    v87 = v109[8];
    v88 = (char *)v110 + v87;
    v89 = &a2[v87];
    v90 = *(_QWORD *)&a2[v87];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v90)
    {
      v91 = *((_QWORD *)v89 + 1);
      v92 = *((_QWORD *)v89 + 2);
      *(_QWORD *)v88 = v90;
      *((_QWORD *)v88 + 1) = v91;
      *((_QWORD *)v88 + 2) = v92;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v88 = *(_OWORD *)v89;
      *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
    }
    v88[24] = v89[24];
    v88[32] = v89[32];
    v93 = *((_QWORD *)v89 + 6);
    *((_QWORD *)v88 + 5) = *((_QWORD *)v89 + 5);
    *((_QWORD *)v88 + 6) = v93;
    v88[56] = v89[56];
    v94 = *((_QWORD *)v89 + 9);
    *((_QWORD *)v88 + 8) = *((_QWORD *)v89 + 8);
    *((_QWORD *)v88 + 9) = v94;
    *((_QWORD *)v88 + 10) = *((_QWORD *)v89 + 10);
    v95 = *(_OWORD *)(v89 + 88);
    *(_OWORD *)(v88 + 104) = *(_OWORD *)(v89 + 104);
    *(_OWORD *)(v88 + 88) = v95;
    v96 = *(_OWORD *)(v89 + 120);
    v97 = *(_OWORD *)(v89 + 136);
    *(_OWORD *)(v88 + 152) = *(_OWORD *)(v89 + 152);
    *(_OWORD *)(v88 + 136) = v97;
    *(_OWORD *)(v88 + 120) = v96;
    v98 = *((_QWORD *)v89 + 22);
    *((_QWORD *)v88 + 21) = *((_QWORD *)v89 + 21);
    *((_QWORD *)v88 + 22) = v98;
    v100 = *((_QWORD *)v89 + 23);
    v99 = *((_QWORD *)v89 + 24);
    v88[200] = v89[200];
    *((_QWORD *)v88 + 23) = v100;
    *((_QWORD *)v88 + 24) = v99;
    v88[201] = v89[201];
    v101 = *((_QWORD *)v89 + 27);
    *((_QWORD *)v88 + 26) = *((_QWORD *)v89 + 26);
    *((_QWORD *)v88 + 27) = v101;
    v102 = *((_QWORD *)v89 + 29);
    *((_QWORD *)v88 + 28) = *((_QWORD *)v89 + 28);
    *((_QWORD *)v88 + 29) = v102;
    *((_QWORD *)v88 + 30) = *((_QWORD *)v89 + 30);
    v88[248] = v89[248];
    v103 = *((_QWORD *)v89 + 33);
    *((_QWORD *)v88 + 32) = *((_QWORD *)v89 + 32);
    *((_QWORD *)v88 + 33) = v103;
    *((_QWORD *)v88 + 34) = *((_QWORD *)v89 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v48 = v110;
  }
  swift_retain();
  return v48;
}

uint64_t sub_23DD515A8(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v6 = a1 + v5[5];
  v7 = sub_23DDC512C();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = a1 + v5[6];
  v8(v9, v7);
  sub_23DCF9010();
  v11 = v10;
  v8(v9 + *(int *)(v10 + 36), v7);
  v12 = a1 + v5[7];
  v8(v12, v7);
  v8(v12 + *(int *)(v11 + 36), v7);
  v13 = a1 + v5[9];
  v14 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[5]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = a1 + a2[7];
  swift_bridgeObjectRelease();
  v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v17 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v8(v16, v7);
    v18 = v16 + *(int *)(v17 + 20);
    v8(v18, v7);
    v8(v18 + *(int *)(v11 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[8]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_23DD51874(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  unsigned int (*v56)(char *, uint64_t, int *);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  void (*v105)(char *, _QWORD, uint64_t, int *);
  int *v106;
  uint64_t v107;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC512C();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = v7[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_23DCF9010();
  v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  v18 = v7[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  v103 = v17;
  v104 = (void (*)(char *, char *, uint64_t))v12;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  v21 = v7[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = v7[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  v28 = v7[10];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = v7[11];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = v7[12];
  v37 = (_QWORD *)(a1 + v36);
  v38 = (_QWORD *)(a2 + v36);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = a3[5];
  v107 = a1;
  v41 = a1 + v40;
  v42 = a2 + v40;
  v43 = *(_QWORD *)(a2 + v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v43)
  {
    v44 = *(_QWORD *)(v42 + 8);
    *(_QWORD *)v41 = v43;
    *(_QWORD *)(v41 + 8) = v44;
    v45 = *(_OWORD *)(v42 + 32);
    *(_OWORD *)(v41 + 16) = *(_OWORD *)(v42 + 16);
    *(_OWORD *)(v41 + 32) = v45;
    *(_OWORD *)(v41 + 48) = *(_OWORD *)(v42 + 48);
    *(_QWORD *)(v41 + 64) = *(_QWORD *)(v42 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v46 = *(_OWORD *)(v42 + 48);
    *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
    *(_OWORD *)(v41 + 48) = v46;
    *(_QWORD *)(v41 + 64) = *(_QWORD *)(v42 + 64);
    v47 = *(_OWORD *)(v42 + 16);
    *(_OWORD *)v41 = *(_OWORD *)v42;
    *(_OWORD *)(v41 + 16) = v47;
  }
  v48 = a3[7];
  v106 = a3;
  *(_BYTE *)(v107 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v49 = v107 + v48;
  v50 = a2 + v48;
  *(_QWORD *)(v107 + v48) = *(_QWORD *)(a2 + v48);
  v51 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v52 = v51[5];
  v53 = (char *)(v49 + v52);
  v54 = (char *)(v50 + v52);
  v55 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v102 = *((_QWORD *)v55 - 1);
  v56 = *(unsigned int (**)(char *, uint64_t, int *))(v102 + 48);
  swift_bridgeObjectRetain();
  if (v56(v54, 1, v55))
  {
    sub_23DD2ED80();
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    v104(v53, v54, v11);
    v58 = v55[5];
    v59 = &v53[v58];
    v60 = &v54[v58];
    v104(&v53[v58], &v54[v58], v11);
    v104(&v59[*(int *)(v103 + 36)], &v60[*(int *)(v103 + 36)], v11);
    v61 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v59[v61[5]] = *(_QWORD *)&v60[v61[5]];
    *(_QWORD *)&v59[v61[6]] = *(_QWORD *)&v60[v61[6]];
    *(_QWORD *)&v59[v61[7]] = *(_QWORD *)&v60[v61[7]];
    v62 = v55[6];
    v63 = &v53[v62];
    v64 = &v54[v62];
    *(_OWORD *)v63 = *(_OWORD *)v64;
    v63[16] = v64[16];
    v53[v55[7]] = v54[v55[7]];
    v53[v55[8]] = v54[v55[8]];
    v53[v55[9]] = v54[v55[9]];
    v65 = v55[10];
    v66 = &v53[v65];
    v67 = &v54[v65];
    v68 = *((_QWORD *)v67 + 1);
    *(_QWORD *)v66 = *(_QWORD *)v67;
    *((_QWORD *)v66 + 1) = v68;
    v69 = v55[11];
    v70 = &v53[v69];
    v71 = &v54[v69];
    v72 = *((_QWORD *)v71 + 1);
    *(_QWORD *)v70 = *(_QWORD *)v71;
    *((_QWORD *)v70 + 1) = v72;
    v105 = *(void (**)(char *, _QWORD, uint64_t, int *))(v102 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v105(v53, 0, 1, v55);
  }
  *(_OWORD *)(v49 + v51[6]) = *(_OWORD *)(v50 + v51[6]);
  v73 = v51[7];
  v74 = v49 + v73;
  v75 = v50 + v73;
  v76 = *(_OWORD *)(v75 + 16);
  *(_OWORD *)v74 = *(_OWORD *)v75;
  *(_OWORD *)(v74 + 16) = v76;
  *(_QWORD *)(v74 + 80) = *(_QWORD *)(v75 + 80);
  v77 = *(_OWORD *)(v75 + 64);
  v78 = *(_OWORD *)(v75 + 32);
  *(_OWORD *)(v74 + 48) = *(_OWORD *)(v75 + 48);
  *(_OWORD *)(v74 + 64) = v77;
  *(_OWORD *)(v74 + 32) = v78;
  *(_QWORD *)(v49 + v51[8]) = *(_QWORD *)(v50 + v51[8]);
  *(_QWORD *)(v49 + v51[9]) = *(_QWORD *)(v50 + v51[9]);
  v79 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v80 = v49 + v79;
  v81 = v50 + v79;
  v82 = *(_QWORD *)(v81 + 8);
  *(_QWORD *)v80 = *(_QWORD *)v81;
  *(_QWORD *)(v80 + 8) = v82;
  v83 = *(_QWORD *)(v81 + 24);
  *(_QWORD *)(v80 + 16) = *(_QWORD *)(v81 + 16);
  *(_QWORD *)(v80 + 24) = v83;
  *(_QWORD *)(v80 + 32) = *(_QWORD *)(v81 + 32);
  *(_OWORD *)(v80 + 40) = *(_OWORD *)(v81 + 40);
  *(_OWORD *)(v80 + 56) = *(_OWORD *)(v81 + 56);
  *(_OWORD *)(v80 + 72) = *(_OWORD *)(v81 + 72);
  *(_OWORD *)(v80 + 88) = *(_OWORD *)(v81 + 88);
  *(_OWORD *)(v80 + 104) = *(_OWORD *)(v81 + 104);
  v84 = v106[8];
  v85 = v107 + v84;
  v86 = a2 + v84;
  v87 = *(_QWORD *)(a2 + v84);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v87)
  {
    v88 = *(_QWORD *)(v86 + 8);
    v89 = *(_QWORD *)(v86 + 16);
    *(_QWORD *)v85 = v87;
    *(_QWORD *)(v85 + 8) = v88;
    *(_QWORD *)(v85 + 16) = v89;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v85 = *(_OWORD *)v86;
    *(_QWORD *)(v85 + 16) = *(_QWORD *)(v86 + 16);
  }
  *(_BYTE *)(v85 + 24) = *(_BYTE *)(v86 + 24);
  *(_BYTE *)(v85 + 32) = *(_BYTE *)(v86 + 32);
  v90 = *(_QWORD *)(v86 + 48);
  *(_QWORD *)(v85 + 40) = *(_QWORD *)(v86 + 40);
  *(_QWORD *)(v85 + 48) = v90;
  *(_BYTE *)(v85 + 56) = *(_BYTE *)(v86 + 56);
  v91 = *(_QWORD *)(v86 + 72);
  *(_QWORD *)(v85 + 64) = *(_QWORD *)(v86 + 64);
  *(_QWORD *)(v85 + 72) = v91;
  *(_QWORD *)(v85 + 80) = *(_QWORD *)(v86 + 80);
  v92 = *(_OWORD *)(v86 + 88);
  *(_OWORD *)(v85 + 104) = *(_OWORD *)(v86 + 104);
  *(_OWORD *)(v85 + 88) = v92;
  v93 = *(_OWORD *)(v86 + 120);
  v94 = *(_OWORD *)(v86 + 136);
  *(_OWORD *)(v85 + 152) = *(_OWORD *)(v86 + 152);
  *(_OWORD *)(v85 + 136) = v94;
  *(_OWORD *)(v85 + 120) = v93;
  v95 = *(_QWORD *)(v86 + 176);
  *(_QWORD *)(v85 + 168) = *(_QWORD *)(v86 + 168);
  *(_QWORD *)(v85 + 176) = v95;
  v97 = *(_QWORD *)(v86 + 184);
  v96 = *(_QWORD *)(v86 + 192);
  *(_BYTE *)(v85 + 200) = *(_BYTE *)(v86 + 200);
  *(_QWORD *)(v85 + 184) = v97;
  *(_QWORD *)(v85 + 192) = v96;
  *(_BYTE *)(v85 + 201) = *(_BYTE *)(v86 + 201);
  v98 = *(_QWORD *)(v86 + 216);
  *(_QWORD *)(v85 + 208) = *(_QWORD *)(v86 + 208);
  *(_QWORD *)(v85 + 216) = v98;
  v99 = *(_QWORD *)(v86 + 232);
  *(_QWORD *)(v85 + 224) = *(_QWORD *)(v86 + 224);
  *(_QWORD *)(v85 + 232) = v99;
  *(_QWORD *)(v85 + 240) = *(_QWORD *)(v86 + 240);
  *(_BYTE *)(v85 + 248) = *(_BYTE *)(v86 + 248);
  v100 = *(_QWORD *)(v86 + 264);
  *(_QWORD *)(v85 + 256) = *(_QWORD *)(v86 + 256);
  *(_QWORD *)(v85 + 264) = v100;
  *(_QWORD *)(v85 + 272) = *(_QWORD *)(v86 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v107;
}

uint64_t sub_23DD51E68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int *v54;
  uint64_t (*v55)(char *, uint64_t, int *);
  int v56;
  int v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v73)(char *, _QWORD, uint64_t, int *);
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  int *v113;
  uint64_t v114;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC512C();
  v110 = *(_QWORD *)(v11 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 24);
  v12(v9, v10, v11);
  v13 = v7[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_23DCF9010();
  v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  v18 = v7[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  v111 = v17;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  v21 = v7[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = v24;
  v25 = v7[9];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 24))(v26, v27, v28);
  v29 = v7[10];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = v7[11];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = v7[12];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)(a2 + v35);
  *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = a3[5];
  v39 = (_QWORD *)(a1 + v38);
  v40 = a2 + v38;
  v41 = *(_QWORD *)(a2 + v38);
  if (*(_QWORD *)(a1 + v38))
  {
    if (v41)
    {
      *v39 = v41;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v39[1] = *(_QWORD *)(v40 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v39[2] = *(_QWORD *)(v40 + 16);
      v39[3] = *(_QWORD *)(v40 + 24);
      v39[4] = *(_QWORD *)(v40 + 32);
      v39[5] = *(_QWORD *)(v40 + 40);
      v39[6] = *(_QWORD *)(v40 + 48);
      v39[7] = *(_QWORD *)(v40 + 56);
      v39[8] = *(_QWORD *)(v40 + 64);
    }
    else
    {
      sub_23DCF5648(a1 + v38);
      *(_OWORD *)v39 = *(_OWORD *)v40;
      v43 = *(_OWORD *)(v40 + 32);
      v42 = *(_OWORD *)(v40 + 48);
      v44 = *(_OWORD *)(v40 + 16);
      v39[8] = *(_QWORD *)(v40 + 64);
      *((_OWORD *)v39 + 2) = v43;
      *((_OWORD *)v39 + 3) = v42;
      *((_OWORD *)v39 + 1) = v44;
    }
  }
  else if (v41)
  {
    *v39 = v41;
    v39[1] = *(_QWORD *)(v40 + 8);
    v39[2] = *(_QWORD *)(v40 + 16);
    v39[3] = *(_QWORD *)(v40 + 24);
    v39[4] = *(_QWORD *)(v40 + 32);
    v39[5] = *(_QWORD *)(v40 + 40);
    v39[6] = *(_QWORD *)(v40 + 48);
    v39[7] = *(_QWORD *)(v40 + 56);
    v39[8] = *(_QWORD *)(v40 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v39 = *(_OWORD *)v40;
    v45 = *(_OWORD *)(v40 + 16);
    v46 = *(_OWORD *)(v40 + 32);
    v47 = *(_OWORD *)(v40 + 48);
    v39[8] = *(_QWORD *)(v40 + 64);
    *((_OWORD *)v39 + 2) = v46;
    *((_OWORD *)v39 + 3) = v47;
    *((_OWORD *)v39 + 1) = v45;
  }
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v113 = a3;
  v114 = a1;
  v48 = a3[7];
  v49 = a1 + v48;
  v50 = a2 + v48;
  *(_QWORD *)(a1 + v48) = *(_QWORD *)(a2 + v48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v112 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v51 = v112[5];
  v52 = (char *)(v49 + v51);
  v53 = (char *)(v50 + v51);
  v54 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v109 = *((_QWORD *)v54 - 1);
  v55 = *(uint64_t (**)(char *, uint64_t, int *))(v109 + 48);
  v56 = v55(v52, 1, v54);
  v57 = v55(v53, 1, v54);
  if (v56)
  {
    if (!v57)
    {
      v58 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
      v58(v52, v53, v11);
      v59 = v54[5];
      v60 = &v52[v59];
      v61 = &v53[v59];
      v58(&v52[v59], &v53[v59], v11);
      v58(&v60[*(int *)(v111 + 36)], &v61[*(int *)(v111 + 36)], v11);
      v62 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v60[v62[5]] = *(_QWORD *)&v61[v62[5]];
      *(_QWORD *)&v60[v62[6]] = *(_QWORD *)&v61[v62[6]];
      *(_QWORD *)&v60[v62[7]] = *(_QWORD *)&v61[v62[7]];
      v63 = v54[6];
      v64 = &v52[v63];
      v65 = &v53[v63];
      v66 = v65[16];
      *(_OWORD *)v64 = *(_OWORD *)v65;
      v64[16] = v66;
      v52[v54[7]] = v53[v54[7]];
      v52[v54[8]] = v53[v54[8]];
      v52[v54[9]] = v53[v54[9]];
      v67 = v54[10];
      v68 = &v52[v67];
      v69 = &v53[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      *((_QWORD *)v68 + 1) = *((_QWORD *)v69 + 1);
      v70 = v54[11];
      v71 = &v52[v70];
      v72 = &v53[v70];
      *(_QWORD *)v71 = *(_QWORD *)v72;
      *((_QWORD *)v71 + 1) = *((_QWORD *)v72 + 1);
      v73 = *(void (**)(char *, _QWORD, uint64_t, int *))(v109 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v73(v52, 0, 1, v54);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v57)
  {
    sub_23DCF59A8((uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_13:
    sub_23DD2ED80();
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    goto LABEL_14;
  }
  v12((uint64_t)v52, (uint64_t)v53, v11);
  v90 = v54[5];
  v91 = &v52[v90];
  v92 = &v53[v90];
  v12((uint64_t)&v52[v90], (uint64_t)&v53[v90], v11);
  v12((uint64_t)&v91[*(int *)(v111 + 36)], (uint64_t)&v92[*(int *)(v111 + 36)], v11);
  v93 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v91[v93[5]] = *(_QWORD *)&v92[v93[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v91[v93[6]] = *(_QWORD *)&v92[v93[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v91[v93[7]] = *(_QWORD *)&v92[v93[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v94 = v54[6];
  v95 = &v52[v94];
  v96 = &v53[v94];
  v97 = *(_OWORD *)v96;
  v95[16] = v96[16];
  *(_OWORD *)v95 = v97;
  v52[v54[7]] = v53[v54[7]];
  v52[v54[8]] = v53[v54[8]];
  v52[v54[9]] = v53[v54[9]];
  v98 = v54[10];
  v99 = &v52[v98];
  v100 = &v53[v98];
  *(_QWORD *)v99 = *(_QWORD *)v100;
  *((_QWORD *)v99 + 1) = *((_QWORD *)v100 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v101 = v54[11];
  v102 = &v52[v101];
  v103 = &v53[v101];
  *(_QWORD *)v102 = *(_QWORD *)v103;
  *((_QWORD *)v102 + 1) = *((_QWORD *)v103 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  v75 = v112[6];
  v76 = (_QWORD *)(v49 + v75);
  v77 = (_QWORD *)(v50 + v75);
  *v76 = *v77;
  v76[1] = v77[1];
  v78 = v112[7];
  v79 = v49 + v78;
  v80 = v50 + v78;
  *(_QWORD *)v79 = *(_QWORD *)v80;
  v81 = *(_QWORD *)(v80 + 8);
  *(_BYTE *)(v79 + 16) = *(_BYTE *)(v80 + 16);
  *(_QWORD *)(v79 + 8) = v81;
  *(_QWORD *)(v79 + 24) = *(_QWORD *)(v80 + 24);
  *(_QWORD *)(v79 + 32) = *(_QWORD *)(v80 + 32);
  *(_QWORD *)(v79 + 40) = *(_QWORD *)(v80 + 40);
  *(_QWORD *)(v79 + 48) = *(_QWORD *)(v80 + 48);
  *(_QWORD *)(v79 + 56) = *(_QWORD *)(v80 + 56);
  *(_QWORD *)(v79 + 64) = *(_QWORD *)(v80 + 64);
  *(_QWORD *)(v79 + 72) = *(_QWORD *)(v80 + 72);
  *(_QWORD *)(v79 + 80) = *(_QWORD *)(v80 + 80);
  *(_QWORD *)(v49 + v112[8]) = *(_QWORD *)(v50 + v112[8]);
  *(_QWORD *)(v49 + v112[9]) = *(_QWORD *)(v50 + v112[9]);
  v82 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v83 = (_QWORD *)(v49 + v82);
  v84 = (_QWORD *)(v50 + v82);
  *(_QWORD *)(v49 + v82) = *v84;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[1] = v84[1];
  v83[2] = v84[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[3] = v84[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[4] = v84[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[5] = v84[5];
  v83[6] = v84[6];
  v83[7] = v84[7];
  v83[8] = v84[8];
  v83[9] = v84[9];
  v83[10] = v84[10];
  v83[11] = v84[11];
  v83[12] = v84[12];
  v83[13] = v84[13];
  v83[14] = v84[14];
  v85 = v113[8];
  v86 = v114 + v85;
  v87 = (__int128 *)(a2 + v85);
  v88 = *(_QWORD *)(a2 + v85);
  if (*(_QWORD *)(v114 + v85))
  {
    if (v88)
    {
      *(_QWORD *)v86 = v88;
      swift_retain();
      swift_release();
      *(_QWORD *)(v86 + 8) = *((_QWORD *)v87 + 1);
      swift_retain();
      swift_release();
      *(_QWORD *)(v86 + 16) = *((_QWORD *)v87 + 2);
      swift_retain();
      swift_release();
    }
    else
    {
      sub_23DCF9EB8(v114 + v85);
      v89 = *((_QWORD *)v87 + 2);
      *(_OWORD *)v86 = *v87;
      *(_QWORD *)(v86 + 16) = v89;
    }
  }
  else if (v88)
  {
    *(_QWORD *)v86 = v88;
    *(_QWORD *)(v86 + 8) = *((_QWORD *)v87 + 1);
    *(_QWORD *)(v86 + 16) = *((_QWORD *)v87 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v104 = *v87;
    *(_QWORD *)(v86 + 16) = *((_QWORD *)v87 + 2);
    *(_OWORD *)v86 = v104;
  }
  *(_BYTE *)(v86 + 24) = *((_BYTE *)v87 + 24);
  *(_BYTE *)(v86 + 32) = *((_BYTE *)v87 + 32);
  *(_QWORD *)(v86 + 40) = *((_QWORD *)v87 + 5);
  swift_retain();
  swift_release();
  v105 = *((_QWORD *)v87 + 6);
  *(_BYTE *)(v86 + 56) = *((_BYTE *)v87 + 56);
  *(_QWORD *)(v86 + 48) = v105;
  *(_QWORD *)(v86 + 64) = *((_QWORD *)v87 + 8);
  *(_QWORD *)(v86 + 72) = *((_QWORD *)v87 + 9);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 80) = *((_QWORD *)v87 + 10);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 88) = *((_QWORD *)v87 + 11);
  v106 = *((_QWORD *)v87 + 12);
  *(_BYTE *)(v86 + 104) = *((_BYTE *)v87 + 104);
  *(_QWORD *)(v86 + 96) = v106;
  *(_QWORD *)(v86 + 112) = *((_QWORD *)v87 + 14);
  *(_QWORD *)(v86 + 120) = *((_QWORD *)v87 + 15);
  *(_QWORD *)(v86 + 128) = *((_QWORD *)v87 + 16);
  *(_QWORD *)(v86 + 136) = *((_QWORD *)v87 + 17);
  *(_QWORD *)(v86 + 144) = *((_QWORD *)v87 + 18);
  *(_QWORD *)(v86 + 152) = *((_QWORD *)v87 + 19);
  *(_QWORD *)(v86 + 160) = *((_QWORD *)v87 + 20);
  *(_QWORD *)(v86 + 168) = *((_QWORD *)v87 + 21);
  *(_QWORD *)(v86 + 176) = *((_QWORD *)v87 + 22);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 184) = *((_QWORD *)v87 + 23);
  swift_retain();
  swift_release();
  v107 = *((_QWORD *)v87 + 24);
  *(_BYTE *)(v86 + 200) = *((_BYTE *)v87 + 200);
  *(_QWORD *)(v86 + 192) = v107;
  *(_BYTE *)(v86 + 201) = *((_BYTE *)v87 + 201);
  *(_QWORD *)(v86 + 208) = *((_QWORD *)v87 + 26);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 216) = *((_QWORD *)v87 + 27);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 224) = *((_QWORD *)v87 + 28);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 232) = *((_QWORD *)v87 + 29);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 240) = *((_QWORD *)v87 + 30);
  swift_retain();
  swift_release();
  *(_BYTE *)(v86 + 248) = *((_BYTE *)v87 + 248);
  *(_QWORD *)(v86 + 256) = *((_QWORD *)v87 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 264) = *((_QWORD *)v87 + 33);
  swift_retain();
  swift_release();
  *(_QWORD *)(v86 + 272) = *((_QWORD *)v87 + 34);
  return v114;
}

uint64_t sub_23DD528A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int *v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  int *v68;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC512C();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = v7[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_23DCF9010();
  v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  v18 = v7[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  v67 = v17;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  v21 = v7[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = v7[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  *(_OWORD *)(a1 + v7[10]) = *(_OWORD *)(a2 + v7[10]);
  *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
  *(_OWORD *)(a1 + v7[12]) = *(_OWORD *)(a2 + v7[12]);
  v28 = a3[5];
  v29 = a3[6];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_QWORD *)(v30 + 64) = *(_QWORD *)(v31 + 64);
  v32 = *(_OWORD *)(v31 + 48);
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
  *(_OWORD *)(v30 + 48) = v32;
  v33 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v33;
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v34 = a3[7];
  v35 = a1 + v34;
  v36 = a2 + v34;
  *(_QWORD *)(a1 + v34) = *(_QWORD *)(a2 + v34);
  v68 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v37 = v68[5];
  v38 = (char *)(v35 + v37);
  v39 = (char *)(v36 + v37);
  v40 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v66 = *((_QWORD *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v66 + 48))(v39, 1, v40))
  {
    sub_23DD2ED80();
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v38, (uint64_t)v39, v11);
    v42 = v40[5];
    v64 = a3;
    v65 = (void (*)(char *, char *, uint64_t))v12;
    v43 = &v38[v42];
    v44 = &v39[v42];
    v65(&v38[v42], &v39[v42], v11);
    v65(&v43[*(int *)(v67 + 36)], &v44[*(int *)(v67 + 36)], v11);
    v45 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v43[v45[5]] = *(_QWORD *)&v44[v45[5]];
    *(_QWORD *)&v43[v45[6]] = *(_QWORD *)&v44[v45[6]];
    v46 = v45[7];
    v47 = *(_QWORD *)&v44[v46];
    a3 = v64;
    *(_QWORD *)&v43[v46] = v47;
    v48 = v40[6];
    v49 = &v38[v48];
    v50 = &v39[v48];
    *(_OWORD *)v49 = *(_OWORD *)v50;
    v49[16] = v50[16];
    v38[v40[7]] = v39[v40[7]];
    v38[v40[8]] = v39[v40[8]];
    v38[v40[9]] = v39[v40[9]];
    *(_OWORD *)&v38[v40[10]] = *(_OWORD *)&v39[v40[10]];
    *(_OWORD *)&v38[v40[11]] = *(_OWORD *)&v39[v40[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v66 + 56))(v38, 0, 1, v40);
  }
  *(_OWORD *)(v35 + v68[6]) = *(_OWORD *)(v36 + v68[6]);
  v51 = v68[7];
  v52 = v35 + v51;
  v53 = v36 + v51;
  v54 = *(_OWORD *)(v53 + 16);
  *(_OWORD *)v52 = *(_OWORD *)v53;
  *(_OWORD *)(v52 + 16) = v54;
  *(_QWORD *)(v52 + 80) = *(_QWORD *)(v53 + 80);
  v55 = *(_OWORD *)(v53 + 64);
  v56 = *(_OWORD *)(v53 + 32);
  *(_OWORD *)(v52 + 48) = *(_OWORD *)(v53 + 48);
  *(_OWORD *)(v52 + 64) = v55;
  *(_OWORD *)(v52 + 32) = v56;
  *(_QWORD *)(v35 + v68[8]) = *(_QWORD *)(v36 + v68[8]);
  *(_QWORD *)(v35 + v68[9]) = *(_QWORD *)(v36 + v68[9]);
  v57 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v58 = v35 + v57;
  v59 = v36 + v57;
  v60 = *(_OWORD *)(v59 + 80);
  *(_OWORD *)(v58 + 64) = *(_OWORD *)(v59 + 64);
  *(_OWORD *)(v58 + 80) = v60;
  *(_OWORD *)(v58 + 96) = *(_OWORD *)(v59 + 96);
  *(_QWORD *)(v58 + 112) = *(_QWORD *)(v59 + 112);
  v61 = *(_OWORD *)(v59 + 16);
  *(_OWORD *)v58 = *(_OWORD *)v59;
  *(_OWORD *)(v58 + 16) = v61;
  v62 = *(_OWORD *)(v59 + 48);
  *(_OWORD *)(v58 + 32) = *(_OWORD *)(v59 + 32);
  *(_OWORD *)(v58 + 48) = v62;
  memcpy((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), 0x118uLL);
  return a1;
}

uint64_t sub_23DD52C64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  uint64_t (*v56)(char *, uint64_t, int *);
  int v57;
  int v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  int *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v80;
  char *v81;
  char *v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  int *v101;
  uint64_t v102;

  v6 = sub_23DDC53A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC512C();
  v98 = *(_QWORD *)(v11 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 40);
  v12(v9, v10, v11);
  v13 = v7[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v12(a1 + v13, a2 + v13, v11);
  sub_23DCF9010();
  v17 = v16;
  v12(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v11);
  v18 = v7[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v12(a1 + v18, a2 + v18, v11);
  v99 = v17;
  v12(v19 + *(int *)(v17 + 36), v20 + *(int *)(v17 + 36), v11);
  v21 = v7[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = v7[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = sub_23DDC54C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  v28 = v7[10];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v32 = *v30;
  v31 = v30[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  v33 = v7[11];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (uint64_t *)(a2 + v33);
  v37 = *v35;
  v36 = v35[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  v38 = v7[12];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (uint64_t *)(a2 + v38);
  v42 = *v40;
  v41 = v40[1];
  *v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  v43 = a3[5];
  v44 = a1 + v43;
  v45 = a2 + v43;
  if (*(_QWORD *)(a1 + v43))
  {
    if (*(_QWORD *)v45)
    {
      *(_QWORD *)v44 = *(_QWORD *)v45;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v44 + 8) = *(_QWORD *)(v45 + 8);
      swift_bridgeObjectRelease();
      v46 = *(_OWORD *)(v45 + 32);
      *(_OWORD *)(v44 + 16) = *(_OWORD *)(v45 + 16);
      *(_OWORD *)(v44 + 32) = v46;
      *(_OWORD *)(v44 + 48) = *(_OWORD *)(v45 + 48);
      *(_QWORD *)(v44 + 64) = *(_QWORD *)(v45 + 64);
      goto LABEL_6;
    }
    sub_23DCF5648(v44);
  }
  v47 = *(_OWORD *)(v45 + 48);
  *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
  *(_OWORD *)(v44 + 48) = v47;
  *(_QWORD *)(v44 + 64) = *(_QWORD *)(v45 + 64);
  v48 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v48;
LABEL_6:
  v49 = a3[7];
  v101 = a3;
  v102 = a1;
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v50 = a1 + v49;
  v51 = a2 + v49;
  *(_QWORD *)(a1 + v49) = *(_QWORD *)(a2 + v49);
  swift_bridgeObjectRelease();
  v100 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v52 = v100[5];
  v53 = (char *)(v50 + v52);
  v54 = (char *)(v51 + v52);
  v55 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v97 = *((_QWORD *)v55 - 1);
  v56 = *(uint64_t (**)(char *, uint64_t, int *))(v97 + 48);
  v57 = v56(v53, 1, v55);
  v58 = v56(v54, 1, v55);
  if (v57)
  {
    if (!v58)
    {
      v59 = *(void (**)(char *, char *, uint64_t))(v98 + 32);
      v59(v53, v54, v11);
      v60 = v55[5];
      v61 = &v53[v60];
      v62 = &v54[v60];
      v59(&v53[v60], &v54[v60], v11);
      v59(&v61[*(int *)(v99 + 36)], &v62[*(int *)(v99 + 36)], v11);
      v63 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v61[v63[5]] = *(_QWORD *)&v62[v63[5]];
      *(_QWORD *)&v61[v63[6]] = *(_QWORD *)&v62[v63[6]];
      *(_QWORD *)&v61[v63[7]] = *(_QWORD *)&v62[v63[7]];
      v64 = v55[6];
      v65 = &v53[v64];
      v66 = &v54[v64];
      *(_OWORD *)v65 = *(_OWORD *)v66;
      v65[16] = v66[16];
      v53[v55[7]] = v54[v55[7]];
      v53[v55[8]] = v54[v55[8]];
      v53[v55[9]] = v54[v55[9]];
      *(_OWORD *)&v53[v55[10]] = *(_OWORD *)&v54[v55[10]];
      *(_OWORD *)&v53[v55[11]] = *(_OWORD *)&v54[v55[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v97 + 56))(v53, 0, 1, v55);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v58)
  {
    sub_23DCF59A8((uint64_t)v53, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_11:
    sub_23DD2ED80();
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_12;
  }
  v12((uint64_t)v53, (uint64_t)v54, v11);
  v80 = v55[5];
  v81 = &v53[v80];
  v82 = &v54[v80];
  v12((uint64_t)&v53[v80], (uint64_t)&v54[v80], v11);
  v12((uint64_t)&v81[*(int *)(v99 + 36)], (uint64_t)&v82[*(int *)(v99 + 36)], v11);
  v83 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v81[v83[5]] = *(_QWORD *)&v82[v83[5]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v81[v83[6]] = *(_QWORD *)&v82[v83[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v81[v83[7]] = *(_QWORD *)&v82[v83[7]];
  swift_bridgeObjectRelease();
  v84 = v55[6];
  v85 = &v53[v84];
  v86 = &v54[v84];
  *(_OWORD *)v85 = *(_OWORD *)v86;
  v85[16] = v86[16];
  v53[v55[7]] = v54[v55[7]];
  v53[v55[8]] = v54[v55[8]];
  v53[v55[9]] = v54[v55[9]];
  v87 = v55[10];
  v88 = &v53[v87];
  v89 = (uint64_t *)&v54[v87];
  v91 = *v89;
  v90 = v89[1];
  *(_QWORD *)v88 = v91;
  *((_QWORD *)v88 + 1) = v90;
  swift_bridgeObjectRelease();
  v92 = v55[11];
  v93 = &v53[v92];
  v94 = (uint64_t *)&v54[v92];
  v96 = *v94;
  v95 = v94[1];
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease();
LABEL_12:
  *(_OWORD *)(v50 + v100[6]) = *(_OWORD *)(v51 + v100[6]);
  v68 = v100[7];
  v69 = v50 + v68;
  v70 = v51 + v68;
  *(_QWORD *)v69 = *(_QWORD *)v70;
  *(_QWORD *)(v69 + 8) = *(_QWORD *)(v70 + 8);
  *(_BYTE *)(v69 + 16) = *(_BYTE *)(v70 + 16);
  *(_OWORD *)(v69 + 24) = *(_OWORD *)(v70 + 24);
  *(_OWORD *)(v69 + 40) = *(_OWORD *)(v70 + 40);
  *(_OWORD *)(v69 + 56) = *(_OWORD *)(v70 + 56);
  *(_OWORD *)(v69 + 72) = *(_OWORD *)(v70 + 72);
  *(_QWORD *)(v50 + v100[8]) = *(_QWORD *)(v51 + v100[8]);
  *(_QWORD *)(v50 + v100[9]) = *(_QWORD *)(v51 + v100[9]);
  v71 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v72 = v50 + v71;
  v73 = v51 + v71;
  *(_QWORD *)(v50 + v71) = *(_QWORD *)(v51 + v71);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v72 + 8) = *(_QWORD *)(v73 + 8);
  *(_QWORD *)(v72 + 16) = *(_QWORD *)(v73 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v72 + 24) = *(_QWORD *)(v73 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v72 + 32) = *(_QWORD *)(v73 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v72 + 40) = *(_OWORD *)(v73 + 40);
  *(_OWORD *)(v72 + 56) = *(_OWORD *)(v73 + 56);
  *(_OWORD *)(v72 + 72) = *(_OWORD *)(v73 + 72);
  *(_OWORD *)(v72 + 88) = *(_OWORD *)(v73 + 88);
  *(_OWORD *)(v72 + 104) = *(_OWORD *)(v73 + 104);
  v74 = v101[8];
  v75 = v102 + v74;
  v76 = a2 + v74;
  if (!*(_QWORD *)(v102 + v74))
  {
LABEL_16:
    *(_OWORD *)v75 = *(_OWORD *)v76;
    *(_QWORD *)(v75 + 16) = *(_QWORD *)(v76 + 16);
    goto LABEL_17;
  }
  if (!*(_QWORD *)v76)
  {
    sub_23DCF9EB8(v75);
    goto LABEL_16;
  }
  *(_QWORD *)v75 = *(_QWORD *)v76;
  swift_release();
  *(_QWORD *)(v75 + 8) = *(_QWORD *)(v76 + 8);
  swift_release();
  *(_QWORD *)(v75 + 16) = *(_QWORD *)(v76 + 16);
  swift_release();
LABEL_17:
  *(_BYTE *)(v75 + 24) = *(_BYTE *)(v76 + 24);
  *(_BYTE *)(v75 + 32) = *(_BYTE *)(v76 + 32);
  *(_QWORD *)(v75 + 40) = *(_QWORD *)(v76 + 40);
  swift_release();
  *(_QWORD *)(v75 + 48) = *(_QWORD *)(v76 + 48);
  *(_BYTE *)(v75 + 56) = *(_BYTE *)(v76 + 56);
  *(_QWORD *)(v75 + 64) = *(_QWORD *)(v76 + 64);
  *(_QWORD *)(v75 + 72) = *(_QWORD *)(v76 + 72);
  swift_release();
  *(_QWORD *)(v75 + 80) = *(_QWORD *)(v76 + 80);
  swift_release();
  *(_QWORD *)(v75 + 88) = *(_QWORD *)(v76 + 88);
  *(_QWORD *)(v75 + 96) = *(_QWORD *)(v76 + 96);
  *(_BYTE *)(v75 + 104) = *(_BYTE *)(v76 + 104);
  v77 = *(_OWORD *)(v76 + 128);
  *(_OWORD *)(v75 + 112) = *(_OWORD *)(v76 + 112);
  *(_OWORD *)(v75 + 128) = v77;
  v78 = *(_OWORD *)(v76 + 160);
  *(_OWORD *)(v75 + 144) = *(_OWORD *)(v76 + 144);
  *(_OWORD *)(v75 + 160) = v78;
  *(_QWORD *)(v75 + 176) = *(_QWORD *)(v76 + 176);
  swift_release();
  *(_QWORD *)(v75 + 184) = *(_QWORD *)(v76 + 184);
  swift_release();
  *(_QWORD *)(v75 + 192) = *(_QWORD *)(v76 + 192);
  *(_BYTE *)(v75 + 200) = *(_BYTE *)(v76 + 200);
  *(_BYTE *)(v75 + 201) = *(_BYTE *)(v76 + 201);
  *(_QWORD *)(v75 + 208) = *(_QWORD *)(v76 + 208);
  swift_release();
  *(_QWORD *)(v75 + 216) = *(_QWORD *)(v76 + 216);
  swift_release();
  *(_QWORD *)(v75 + 224) = *(_QWORD *)(v76 + 224);
  swift_release();
  *(_QWORD *)(v75 + 232) = *(_QWORD *)(v76 + 232);
  swift_release();
  *(_QWORD *)(v75 + 240) = *(_QWORD *)(v76 + 240);
  swift_release();
  *(_BYTE *)(v75 + 248) = *(_BYTE *)(v76 + 248);
  *(_QWORD *)(v75 + 256) = *(_QWORD *)(v76 + 256);
  swift_release();
  *(_QWORD *)(v75 + 264) = *(_QWORD *)(v76 + 264);
  swift_release();
  *(_QWORD *)(v75 + 272) = *(_QWORD *)(v76 + 272);
  return v102;
}

uint64_t sub_23DD533C8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD533D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for OvernightMetricsChartLayout(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 40);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_23DD53480()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD5348C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for OvernightMetricsChartLayout(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 40) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for OvernightMetricsChartPointForeground()
{
  uint64_t result;

  result = qword_256CFE1E0;
  if (!qword_256CFE1E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD53570()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for IndividualOvernightMetricChartPoint(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for OvernightMetricsChartLayout(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_23DD53610()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD53620@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for OvernightMetricsChartPointForeground();
  v5 = *(_QWORD *)(v1 + *(int *)(v4 + 32) + 40);
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_retain();
  sub_23DDC63D4();
  sub_23DDC5B34();
  v6 = v20;
  v7 = v21;
  v8 = v22;
  v9 = v23;
  v10 = v24;
  result = sub_23DD53884();
  v12 = 0.0;
  if ((result & 1) == 0)
  {
    v13 = v1 + *(int *)(v4 + 20);
    v14 = *(_QWORD *)v13;
    if (*(_QWORD *)v13)
    {
      v12 = *(double *)(v13 + 16);
      v15 = *(double *)(v13 + 32);
      v16 = *(_QWORD *)v13;
      v17 = *(_QWORD *)(v13 + 8);
    }
    else
    {
      if (qword_256CFC0B8 != -1)
        swift_once();
      v18 = qword_256D06578;
      swift_getKeyPath();
      sub_23DCF535C((unint64_t *)&qword_256CFC1C0, (uint64_t (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState, (uint64_t)&unk_23DDCAF88);
      sub_23DDC5210();
      swift_release();
      v16 = *(_QWORD *)(v18 + 16);
      v17 = *(_QWORD *)(v18 + 24);
      v12 = *(double *)(v18 + 32);
      v15 = *(double *)(v18 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v6 = v20;
    }
    sub_23DCF59EC(v14);
    if ((sub_23DD995CC(v2, v16) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v19 = sub_23DD995CC(v2, v17);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v19 & 1) != 0)
        v12 = v15;
      else
        v12 = 0.0;
    }
    v7 = v21;
    v8 = v22;
    v9 = v23;
    v10 = v24;
  }
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v25;
  *(double *)(a1 + 56) = v12;
  return result;
}

BOOL sub_23DD53884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  double v19;
  uint64_t v20;
  _QWORD v22[6];

  v1 = type metadata accessor for OvernightMetricsChartPointForeground();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(unsigned __int8 *)(v0 + *(int *)(v4 + 24));
  sub_23DD53B04(v0, (uint64_t)v3);
  if (v5 == 1)
  {
    v6 = (uint64_t *)&v3[*(int *)(v1 + 20)];
    v8 = *v6;
    v7 = v6[1];
    v10 = *((double *)v6 + 4);
    v9 = v6[5];
    v22[2] = v6[3];
    v22[3] = v9;
    v11 = v6[7];
    v22[4] = v6[6];
    if (v8)
    {
      v12 = v10;
      v13 = v8;
      v14 = v7;
    }
    else
    {
      v22[1] = v11;
      if (qword_256CFC0B8 != -1)
        swift_once();
      v16 = qword_256D06578;
      swift_getKeyPath();
      v22[5] = v16;
      sub_23DCF535C((unint64_t *)&qword_256CFC1C0, (uint64_t (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState, (uint64_t)&unk_23DDCAF88);
      sub_23DDC5210();
      swift_release();
      v13 = *(_QWORD *)(v16 + 16);
      v14 = *(_QWORD *)(v16 + 24);
      v12 = *(double *)(v16 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v17 = *(int *)(v1 + 28);
    v18 = &v3[*(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32)];
    if ((v18[8] & 1) != 0)
    {
      sub_23DCF59EC(v8);
    }
    else
    {
      v19 = *(double *)v18;
      sub_23DCF59EC(v8);
      if ((sub_23DD995CC((uint64_t)v3, v13) & 1) == 0 || v12 >= 1.0)
      {
        v20 = type metadata accessor for OvernightMetricsChartLayout(0);
        if (*(_QWORD *)(v14 + 16) >= 2uLL)
        {
          v15 = sub_23DD99750(*(_QWORD *)&v3[v17 + 32 + *(int *)(v20 + 20)], v19);
          swift_bridgeObjectRelease();
LABEL_15:
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
      }
    }
    swift_bridgeObjectRelease();
    v15 = 0;
    goto LABEL_15;
  }
  v15 = 0;
LABEL_16:
  sub_23DCF59A8((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointForeground);
  return v15;
}

uint64_t sub_23DD53B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OvernightMetricsChartPointForeground();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD53B48()
{
  return sub_23DCF5A70(&qword_256CFE228, (uint64_t (*)(uint64_t))sub_23DD53B7C, sub_23DD53C6C, MEMORY[0x24BDECC38]);
}

void sub_23DD53B7C(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFE230, sub_23DD53B98);
}

void sub_23DD53B98(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFE238, (void (*)(uint64_t))sub_23DD53BB4);
}

void sub_23DD53BB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE240)
  {
    sub_23DD53C10();
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE240);
  }
}

void sub_23DD53C10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE248)
  {
    v0 = sub_23DDC5EB8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE248);
  }
}

uint64_t sub_23DD53C6C()
{
  return sub_23DCF5A70(&qword_256CFE250, (uint64_t (*)(uint64_t))sub_23DD53B98, (uint64_t (*)(void))sub_23DD53C90, MEMORY[0x24BDEBEE0]);
}

unint64_t sub_23DD53C90()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFE258;
  if (!qword_256CFE258)
  {
    sub_23DD53BB4();
    v2 = v1;
    v3[0] = sub_23DD3172C();
    v3[1] = sub_23DCF535C(qword_256CFE260, (uint64_t (*)(uint64_t))sub_23DD53C10, MEMORY[0x24BDF0710]);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFE258);
  }
  return result;
}

uint64_t *sub_23DD53D10(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  sub_23DD13DC0(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = sub_23DDC512C();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(v6 + 36)), (uint64_t *)((char *)a2 + *(int *)(v6 + 36)), v7);
  }
  return a1;
}

uint64_t sub_23DD53DB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);

  v2 = sub_23DDC512C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v5(a1, v2);
  sub_23DD13DC0(0);
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + *(int *)(v3 + 36), v2);
}

uint64_t sub_23DD53E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  v4 = sub_23DDC512C();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  sub_23DD13DC0(0);
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  return a1;
}

uint64_t sub_23DD53E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  v4 = sub_23DDC512C();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24);
  v5(a1, a2, v4);
  sub_23DD13DC0(0);
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  return a1;
}

uint64_t sub_23DD53EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  v4 = sub_23DDC512C();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  sub_23DD13DC0(0);
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  return a1;
}

uint64_t sub_23DD53F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  v4 = sub_23DDC512C();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40);
  v5(a1, a2, v4);
  sub_23DD13DC0(0);
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  return a1;
}

uint64_t sub_23DD53FC8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD53FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DD13DC0(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_23DD54010()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD5401C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DD13DC0(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for OvernightMetricsChartSizingPlaceholder()
{
  uint64_t result;

  result = qword_256CFE2C0;
  if (!qword_256CFE2C0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DD54098()
{
  unint64_t v0;

  sub_23DD13DC0(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_23DD54100()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD54110@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int *v2;
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v23[36];
  _BYTE v24[288];
  _BYTE v25[281];
  _QWORD v26[36];
  _BYTE v27[296];

  v22 = a1;
  sub_23DD54394(0);
  v3 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v23[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD54430();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v23[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v23[-1] - v15;
  sub_23DD15EB4(v1, (uint64_t)&v23[-1] - v15);
  sub_23DDC59A8();
  v23[0] = swift_getKeyPath();
  sub_23DD50E00((uint64_t)v23);
  sub_23DCFBB58((uint64_t)v23, (uint64_t)v24, (uint64_t (*)(_QWORD))sub_23DD50E08);
  memcpy(v25, v24, sizeof(v25));
  sub_23DD54494((uint64_t)v16, (uint64_t)v13);
  v26[0] = swift_getKeyPath();
  sub_23DD50E00((uint64_t)v26);
  sub_23DCFBB58((uint64_t)v26, (uint64_t)v27, (uint64_t (*)(_QWORD))sub_23DD50E08);
  memcpy(&v5[v3[10]], v25, 0x119uLL);
  sub_23DCFBB58((uint64_t)v13, (uint64_t)v5, type metadata accessor for OvernightMetricsAxisConfiguration);
  v17 = &v5[v3[9]];
  *((_QWORD *)v17 + 8) = 0;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  memcpy(&v5[v3[11]], v27, 0x119uLL);
  v18 = (uint64_t *)&v5[v3[12]];
  *v18 = swift_getKeyPath();
  sub_23DD544E0();
  swift_storeEnumTagMultiPayload();
  v19 = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v22, v10, v7);
  sub_23DD54534();
  sub_23DCFBB58((uint64_t)v5, v19 + *(int *)(v20 + 36), (uint64_t (*)(_QWORD))sub_23DD54394);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return sub_23DD54598((uint64_t)v16);
}

void sub_23DD54394(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_256CFE2F8)
  {
    v2 = sub_23DD543EC();
    v4 = type metadata accessor for OvernightMetricsAxisStyle(a1, (uint64_t)&type metadata for OvernightMetricsXAxisSpaceReserver, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_256CFE2F8);
  }
}

unint64_t sub_23DD543EC()
{
  unint64_t result;

  result = qword_256CFE300;
  if (!qword_256CFE300)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC7EB0, &type metadata for OvernightMetricsXAxisSpaceReserver);
    atomic_store(result, (unint64_t *)&qword_256CFE300);
  }
  return result;
}

void sub_23DD54430()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE308)
  {
    v0 = sub_23DDC59B4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE308);
  }
}

uint64_t sub_23DD54494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_23DD544E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC9F0)
  {
    sub_23DDC51E0();
    v0 = sub_23DDC5AA4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC9F0);
  }
}

void sub_23DD54534()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE310)
  {
    sub_23DD54430();
    sub_23DD54394(255);
    v0 = sub_23DDC5C0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE310);
  }
}

uint64_t sub_23DD54598(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OvernightMetricsAxisConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23DD545D8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFE318;
  if (!qword_256CFE318)
  {
    sub_23DD54534();
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFE320, (uint64_t (*)(uint64_t))sub_23DD54430, MEMORY[0x24BDB8148]);
    v3[1] = sub_23DCF535C((unint64_t *)&qword_256CFE328, (uint64_t (*)(uint64_t))sub_23DD54394, (uint64_t)&unk_23DDC7E60);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFE318);
  }
  return result;
}

uint64_t SleepingSampleDataType.preferredImage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = sub_23DDC53A8();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, v1, v2, v4);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v7 != *MEMORY[0x24BE3FE10] && v7 != *MEMORY[0x24BE3FDD0])
  {
    if (v7 == *MEMORY[0x24BE3FDC8])
      return sub_23DDC6290();
    if (v7 != *MEMORY[0x24BE3FDD8] && v7 != *MEMORY[0x24BE3FDC0])
    {
      v9 = sub_23DDC6284();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      return v9;
    }
  }
  return sub_23DDC6284();
}

uint64_t SleepingSampleDataType.localizedName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t, double);
  uint64_t ObjCClassFromMetadata;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t result;
  _QWORD v18[4];

  v1 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23DDC53A8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v18 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16);
  v11((char *)v18 - v9, v0, v3, v8);
  if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v10, v3) == *MEMORY[0x24BE3FDC0])
  {
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v13 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    return sub_23DDC6770();
  }
  v15 = (void *)sub_23DDC5360();
  v16 = objc_msgSend(v15, sel_hk_localizedName);

  if (v16)
  {
    v14 = sub_23DDC6764();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
    return v14;
  }
  ((void (*)(char *, uint64_t, uint64_t))v11)(v6, v0, v3);
  v18[2] = 0;
  v18[3] = 0xE000000000000000;
  sub_23DDC6A10();
  sub_23DDC67A0();
  sub_23DDC6AA0();
  result = sub_23DDC6AC4();
  __break(1u);
  return result;
}

uint64_t SleepingSampleDataType.localizedShortenedName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t ObjCClassFromMetadata;
  id v10;
  uint64_t v12;

  v1 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23DDC53A8();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v0, v3, v5);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v8 == *MEMORY[0x24BE3FE10]
    || v8 == *MEMORY[0x24BE3FDD0]
    || v8 == *MEMORY[0x24BE3FDC8]
    || v8 == *MEMORY[0x24BE3FDD8]
    || v8 == *MEMORY[0x24BE3FDC0])
  {
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    return sub_23DDC6770();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
}

Swift::String_optional __swiftcall SleepingSampleDataType.localizedUnitString(for:)(HKUnit a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  int v9;
  id v10;
  char v11;
  uint64_t v12;
  void *v13;
  id v14;
  char v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  Swift::String_optional result;
  uint64_t v21;

  v2 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v3);
  v4 = sub_23DDC53A8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v1, v4, v6);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if (v9 == *MEMORY[0x24BE3FE10])
  {
    sub_23DD55134();
    v10 = objc_msgSend((id)objc_opt_self(), sel__countPerMinuteUnit);
    v11 = sub_23DDC6974();

    if ((v11 & 1) != 0)
      goto LABEL_6;
    __break(1u);
    goto LABEL_17;
  }
  if (v9 == *MEMORY[0x24BE3FDD0])
  {
    sub_23DD55134();
    v14 = objc_msgSend((id)objc_opt_self(), sel__countPerMinuteUnit);
    v15 = sub_23DDC6974();

    if ((v15 & 1) != 0)
    {
LABEL_6:
      sub_23DDC66D4();
      type metadata accessor for HealthBalanceUI();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v17 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      sub_23DDC5168();
      v12 = sub_23DDC6770();
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v9 != *MEMORY[0x24BE3FDC8] && v9 != *MEMORY[0x24BE3FDD8] && v9 != *MEMORY[0x24BE3FDC0])
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v12 = 0;
  v13 = 0;
LABEL_18:
  result.value._object = v13;
  result.value._countAndFlagsBits = v12;
  return result;
}

unint64_t sub_23DD55134()
{
  unint64_t result;

  result = qword_256CFE030;
  if (!qword_256CFE030)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256CFE030);
  }
  return result;
}

uint64_t (*SleepingSampleDataType.EducationalSummarySection.title.modify())()
{
  return nullsub_1;
}

uint64_t (*SleepingSampleDataType.EducationalSummarySection.description.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDataType.eductionalSummarySections.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjCClassFromMetadata;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;

  v0 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v1);
  sub_23DD57534(0, &qword_256CFE330);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_23DDC7F50;
  v3 = sub_23DD55438();
  v5 = v4;
  v6 = sub_23DD55794();
  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = v5;
  *(_QWORD *)(v2 + 48) = v6;
  *(_QWORD *)(v2 + 56) = v7;
  v8 = sub_23DD55AF0();
  if (v9)
  {
    v10 = v8;
    v11 = v9;
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v13 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    v14 = sub_23DDC6770();
    v16 = v15;
    v2 = (uint64_t)sub_23DD56C48((_QWORD *)1, 2, 1, (_QWORD *)v2);
    *(_QWORD *)(v2 + 16) = 2;
    *(_QWORD *)(v2 + 64) = v14;
    *(_QWORD *)(v2 + 72) = v16;
    *(_QWORD *)(v2 + 80) = v10;
    *(_QWORD *)(v2 + 88) = v11;
    v17 = sub_23DD55D74();
    if (!v18)
      return v2;
  }
  else
  {
    v17 = sub_23DD55D74();
    if (!v18)
      return v2;
  }
  v19 = v17;
  v20 = v18;
  sub_23DDC66D4();
  type metadata accessor for HealthBalanceUI();
  v21 = swift_getObjCClassFromMetadata();
  v22 = objc_msgSend((id)objc_opt_self(), (SEL)0x250EA0701, v21);
  sub_23DDC5168();
  v23 = sub_23DDC6770();
  v25 = v24;
  v27 = *(_QWORD *)(v2 + 16);
  v26 = *(_QWORD *)(v2 + 24);
  if (v27 >= v26 >> 1)
    v2 = (uint64_t)sub_23DD56C48((_QWORD *)(v26 > 1), v27 + 1, 1, (_QWORD *)v2);
  *(_QWORD *)(v2 + 16) = v27 + 1;
  v28 = (_QWORD *)(v2 + 32 * v27);
  v28[4] = v23;
  v28[5] = v25;
  v28[6] = v19;
  v28[7] = v20;
  return v2;
}

uint64_t sub_23DD55438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t ObjCClassFromMetadata;
  id v10;
  uint64_t v12;

  v1 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23DDC53A8();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v0, v3, v5);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v8 == *MEMORY[0x24BE3FE10]
    || v8 == *MEMORY[0x24BE3FDD0]
    || v8 == *MEMORY[0x24BE3FDC8]
    || v8 == *MEMORY[0x24BE3FDD8]
    || v8 == *MEMORY[0x24BE3FDC0])
  {
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    return sub_23DDC6770();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
}

uint64_t sub_23DD55794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t ObjCClassFromMetadata;
  id v10;
  uint64_t v12;

  v1 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23DDC53A8();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v0, v3, v5);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v8 == *MEMORY[0x24BE3FE10]
    || v8 == *MEMORY[0x24BE3FDD0]
    || v8 == *MEMORY[0x24BE3FDC8]
    || v8 == *MEMORY[0x24BE3FDD8]
    || v8 == *MEMORY[0x24BE3FDC0])
  {
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    return sub_23DDC6770();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
}

uint64_t sub_23DD55AF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t ObjCClassFromMetadata;
  id v10;
  uint64_t v12;

  v1 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23DDC53A8();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v0, v3, v5);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v8 == *MEMORY[0x24BE3FE10] || v8 == *MEMORY[0x24BE3FDD0] || v8 == *MEMORY[0x24BE3FDD8])
  {
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    return sub_23DDC6770();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
}

uint64_t sub_23DD55D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t ObjCClassFromMetadata;
  id v10;
  uint64_t v12;

  v1 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23DDC53A8();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v0, v3, v5);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v8 == *MEMORY[0x24BE3FE10] || v8 == *MEMORY[0x24BE3FDD0] || v8 == *MEMORY[0x24BE3FDC8])
  {
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    return sub_23DDC6770();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
}

uint64_t SleepingSampleDataType.WarmupSummarySection.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepingSampleDataType.WarmupSummarySection.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SleepingSampleDataType.WarmupSummarySection.title.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDataType.WarmupSummarySection.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepingSampleDataType.WarmupSummarySection.description.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*SleepingSampleDataType.WarmupSummarySection.description.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDataType.warmupSummarySection.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjCClassFromMetadata;
  id v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v3 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v3);
  v4 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_23DDC53A8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v1, v5, v7);
  if ((*(unsigned int (**)(char *, uint64_t))(v6 + 88))(v9, v5) == *MEMORY[0x24BE3FDD8])
  {
    v10 = SleepingSampleDataType.localizedName.getter();
    v12 = v11;
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v14 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    result = sub_23DDC6770();
    *a1 = v10;
    a1[1] = v12;
    a1[2] = result;
    a1[3] = v16;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t SleepingSampleDataType.accessibilityIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t result;
  int v8;
  uint64_t v9;

  v1 = sub_23DDC53A8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v2 + 16))(v5, v0, v1, v3);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v5, v1);
  if (v6 == *MEMORY[0x24BE3FE10])
    return 0x7461527472616548;
  v8 = v6;
  if (v6 == *MEMORY[0x24BE3FDD0])
    return 0x7461726970736552;
  if (v6 == *MEMORY[0x24BE3FDC8])
    return 0x79784F646F6F6C42;
  result = 0xD000000000000010;
  if (v8 != *MEMORY[0x24BE3FDD8])
  {
    if (v8 == *MEMORY[0x24BE3FDC0])
    {
      return 0x656C7341656D6954;
    }
    else
    {
      result = sub_23DDC6AC4();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_23DD5646C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23DD567DC(a1, a2, a3, a4, &qword_2543267B8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
}

_QWORD *sub_23DD56480(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DD57534(0, &qword_2543267D0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23DD56F7C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23DD56598(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DD57534(0, &qword_256CFE360);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23DD57064(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23DD566B0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DD57578(0, &qword_256CFE350, (void (*)(uint64_t))sub_23DCFF9E8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23DD57154(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23DD567C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23DD567DC(a1, a2, a3, a4, &qword_256CFC4B8, (void (*)(uint64_t))type metadata accessor for MultilayerCircularGaugeLayer);
}

uint64_t sub_23DD567DC(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_23DD57578(0, a5, a6);
  v13 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_23DDC6AB8();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23DD5741C(0, v11, v21, a4, (uint64_t (*)(_QWORD))a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *sub_23DD569F0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DD57534(0, (unint64_t *)&qword_256CFE338);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23DD5723C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23DD56B08(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DD57578(0, &qword_256CFE368, (void (*)(uint64_t))sub_23DD575C4);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23DD57154(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23DD56C20(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23DD567DC(a1, a2, a3, a4, &qword_2543267C8, (void (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPoint);
}

uint64_t sub_23DD56C34(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23DD567DC(a1, a2, a3, a4, &qword_256CFE358, (void (*)(uint64_t))MEMORY[0x24BE3FFB0]);
}

_QWORD *sub_23DD56C48(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DD57534(0, &qword_256CFE330);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23DD5732C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataType.EducationalSummarySection()
{
  return &type metadata for SleepingSampleDataType.EducationalSummarySection;
}

uint64_t _s25EducationalSummarySectionVwxx_0()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s25EducationalSummarySectionVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s25EducationalSummarySectionVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s25EducationalSummarySectionVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s25EducationalSummarySectionVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_23DD56EF0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataType.WarmupSummarySection()
{
  return &type metadata for SleepingSampleDataType.WarmupSummarySection;
}

uint64_t sub_23DD56F40(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23DD567DC(a1, a2, a3, a4, &qword_256CFE348, (void (*)(uint64_t))MEMORY[0x24BE40238]);
}

uint64_t sub_23DD56F54(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23DD567DC(a1, a2, a3, a4, &qword_256CFE340, (void (*)(uint64_t))type metadata accessor for BaselineRelativeChartPoint);
}

uint64_t sub_23DD56F68(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23DD567DC(a1, a2, a3, a4, &qword_2543264D8, (void (*)(uint64_t))MEMORY[0x24BDFAF10]);
}

char *sub_23DD56F7C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD57064(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

char *sub_23DD57154(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD5723C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD5732C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD5741C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

void sub_23DD57534(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_23DDC6BF0();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_23DD57578(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DDC6BF0();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_23DD575C4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFE370)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFE370);
  }
}

uint64_t sub_23DD57640@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  int v15;

  sub_23DD59764();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23DDC5F9C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23DDC5EA0();
  v9 = sub_23DDC5B40();
  v14 = sub_23DDC6230();
  v10 = sub_23DDC5B40();
  sub_23DDC5F90();
  v11 = sub_23DDC5FA8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v4, 1, 1, v11);
  sub_23DDC5FB4();
  v12 = sub_23DDC5FD8();
  sub_23DD597B8((uint64_t)v4);
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = 0x4010000000000000;
  return result;
}

uint64_t static OvernightMetricsChartSpec.accented(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v3 = *(_QWORD *)(a1 + 88);
  v19 = *(_BYTE *)(a1 + 104);
  v20 = *(_BYTE *)(a1 + 24);
  v22 = *(_OWORD *)(a1 + 128);
  v23 = *(_OWORD *)(a1 + 112);
  v21 = *(_OWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 160);
  v5 = *(_QWORD *)(a1 + 168);
  v27 = *(_BYTE *)(a1 + 248);
  v24 = *(_QWORD *)(a1 + 96);
  v25 = *(_QWORD *)(a1 + 256);
  v26 = *(_QWORD *)(a1 + 264);
  v6 = *(_QWORD *)(a1 + 272);
  sub_23DDC6230();
  v18 = sub_23DDC623C();
  swift_release();
  sub_23DDC6230();
  v17 = sub_23DDC623C();
  swift_release();
  sub_23DDC6230();
  v16 = sub_23DDC623C();
  swift_release();
  sub_23DDC6218();
  v15 = sub_23DDC5B40();
  sub_23DDC6230();
  v7 = sub_23DDC623C();
  swift_release();
  sub_23DDC6230();
  v8 = sub_23DDC623C();
  swift_release();
  sub_23DDC6230();
  sub_23DDC623C();
  swift_release();
  v9 = sub_23DDC5B40();
  sub_23DDC6230();
  sub_23DDC623C();
  swift_release();
  v10 = sub_23DDC5B40();
  sub_23DDC6224();
  v11 = sub_23DDC5B40();
  sub_23DDC6230();
  sub_23DDC623C();
  swift_release();
  v12 = sub_23DDC5B40();
  sub_23DDC6230();
  v13 = sub_23DDC5B40();
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v17;
  *(_QWORD *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 24) = v20;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v15;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  *(_QWORD *)(a2 + 64) = 0x4014000000000000;
  *(_QWORD *)(a2 + 72) = v7;
  *(_QWORD *)(a2 + 80) = v8;
  *(_QWORD *)(a2 + 88) = v3;
  *(_QWORD *)(a2 + 96) = v24;
  *(_BYTE *)(a2 + 104) = v19;
  *(_OWORD *)(a2 + 112) = v23;
  *(_OWORD *)(a2 + 128) = v22;
  *(_OWORD *)(a2 + 144) = v21;
  *(_QWORD *)(a2 + 160) = v4;
  *(_QWORD *)(a2 + 168) = v5;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_BYTE *)(a2 + 200) = 1;
  *(_BYTE *)(a2 + 201) = 1;
  *(_QWORD *)(a2 + 208) = v9;
  *(_QWORD *)(a2 + 216) = v10;
  *(_QWORD *)(a2 + 224) = v11;
  *(_QWORD *)(a2 + 232) = v12;
  *(_QWORD *)(a2 + 240) = v13;
  *(_BYTE *)(a2 + 248) = v27;
  *(_QWORD *)(a2 + 256) = v25;
  *(_QWORD *)(a2 + 264) = v26;
  *(_QWORD *)(a2 + 272) = v6;
  swift_retain();
  return swift_retain();
}

uint64_t static OvernightMetricsChartSpec.vibrant(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v3 = *(_QWORD *)(a1 + 88);
  v19 = *(_BYTE *)(a1 + 104);
  v20 = *(_BYTE *)(a1 + 24);
  v22 = *(_OWORD *)(a1 + 128);
  v23 = *(_OWORD *)(a1 + 112);
  v21 = *(_OWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 160);
  v5 = *(_QWORD *)(a1 + 168);
  v27 = *(_QWORD *)(a1 + 232);
  v28 = *(_QWORD *)(a1 + 240);
  v29 = *(_BYTE *)(a1 + 248);
  v24 = *(_QWORD *)(a1 + 96);
  v25 = *(_QWORD *)(a1 + 256);
  v26 = *(_QWORD *)(a1 + 264);
  v6 = *(_QWORD *)(a1 + 272);
  sub_23DDC6230();
  v18 = sub_23DDC623C();
  swift_release();
  sub_23DDC6230();
  v17 = sub_23DDC623C();
  swift_release();
  sub_23DDC6230();
  v16 = sub_23DDC623C();
  swift_release();
  sub_23DDC6218();
  v7 = sub_23DDC5B40();
  v15 = sub_23DDC6230();
  v8 = sub_23DDC6230();
  sub_23DDC6230();
  sub_23DDC623C();
  swift_release();
  v9 = sub_23DDC5B40();
  sub_23DDC6230();
  sub_23DDC623C();
  swift_release();
  v10 = sub_23DDC5B40();
  sub_23DDC6230();
  sub_23DDC623C();
  swift_release();
  v11 = sub_23DDC5B40();
  sub_23DDC6230();
  sub_23DDC623C();
  swift_release();
  v12 = sub_23DDC5B40();
  sub_23DDC6224();
  v13 = sub_23DDC5B40();
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v17;
  *(_QWORD *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 24) = v20;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  *(_QWORD *)(a2 + 64) = 0x4014000000000000;
  *(_QWORD *)(a2 + 72) = v15;
  *(_QWORD *)(a2 + 80) = v8;
  *(_QWORD *)(a2 + 88) = v3;
  *(_QWORD *)(a2 + 96) = v24;
  *(_BYTE *)(a2 + 104) = v19;
  *(_OWORD *)(a2 + 112) = v23;
  *(_OWORD *)(a2 + 128) = v22;
  *(_OWORD *)(a2 + 144) = v21;
  *(_QWORD *)(a2 + 160) = v4;
  *(_QWORD *)(a2 + 168) = v5;
  *(_QWORD *)(a2 + 176) = v9;
  *(_QWORD *)(a2 + 184) = v10;
  *(_QWORD *)(a2 + 192) = 0x3FF0000000000000;
  *(_BYTE *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 201) = 0;
  *(_QWORD *)(a2 + 208) = v11;
  *(_QWORD *)(a2 + 216) = v12;
  *(_QWORD *)(a2 + 224) = v13;
  *(_QWORD *)(a2 + 232) = v27;
  *(_QWORD *)(a2 + 240) = v28;
  *(_BYTE *)(a2 + 248) = v29;
  *(_QWORD *)(a2 + 256) = v25;
  *(_QWORD *)(a2 + 264) = v26;
  *(_QWORD *)(a2 + 272) = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t EnvironmentValues.overnightMetricsChartSpec.getter()
{
  sub_23DD29138();
  return sub_23DDC5D80();
}

uint64_t EnvironmentValues.overnightMetricsChartSpec.setter(void *__src)
{
  _BYTE __dst[280];

  memcpy(__dst, __src, sizeof(__dst));
  sub_23DD29138();
  return sub_23DDC5D8C();
}

double static OvernightMetricsChartSpec.watchApp.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  _BYTE v32[11];
  __int16 v33;
  char v34;
  _BYTE v35[7];
  char v36;
  _BYTE v37[7];
  char v38;
  _BYTE v39[7];
  _BYTE v40[7];

  v2 = sub_23DDC5774();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_256CFC0C0 != -1)
    swift_once();
  v6 = __swift_project_value_buffer(v2, (uint64_t)qword_256D06580);
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v7(v5, v6, v2);
  sub_23DDC626C();
  v26 = sub_23DDC623C();
  swift_release();
  if (qword_256CFC0C8 != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v2, (uint64_t)qword_256D06598);
  v7(v5, v8, v2);
  sub_23DDC626C();
  v25 = sub_23DDC623C();
  swift_release();
  sub_23DDC6230();
  v9 = sub_23DDC623C();
  swift_release();
  *(_QWORD *)&v27 = sub_23DDC6218();
  v10 = sub_23DDC5B40();
  if (qword_256CFC098 != -1)
    swift_once();
  v11 = MEMORY[0x242642C18]((id)qword_256CFE658);
  if (qword_256CFC0A8 != -1)
    swift_once();
  v12 = MEMORY[0x242642C18]((id)qword_256CFE668);
  *(_QWORD *)&v27 = sub_23DDC6200();
  v13 = sub_23DDC5B40();
  sub_23DDC6200();
  v14 = sub_23DDC623C();
  swift_release();
  *(_QWORD *)&v27 = v14;
  v15 = sub_23DDC5B40();
  LODWORD(v27) = sub_23DDC5E94();
  DWORD1(v27) = 1036831949;
  sub_23DD290DC();
  sub_23DD58788();
  v16 = sub_23DDC5B40();
  sub_23DD57640((uint64_t)&v27);
  v17 = v28;
  v18 = v29;
  v19 = v30;
  result = v31;
  v38 = 1;
  v36 = 0;
  v34 = 1;
  v21 = v25;
  *(_QWORD *)a1 = v26;
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 25) = *(_DWORD *)v40;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)&v40[3];
  *(_BYTE *)(a1 + 32) = 1;
  v22 = *(_DWORD *)v39;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v39[3];
  *(_DWORD *)(a1 + 33) = v22;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = v38;
  *(_DWORD *)(a1 + 57) = *(_DWORD *)v37;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)&v37[3];
  *(_QWORD *)(a1 + 64) = 0x4014000000000000;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 96) = 0x4028000000000000;
  *(_BYTE *)(a1 + 104) = v36;
  v23 = *(_DWORD *)v35;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)&v35[3];
  *(_DWORD *)(a1 + 105) = v23;
  *(_OWORD *)(a1 + 112) = xmmword_23DDC77E0;
  *(_OWORD *)(a1 + 128) = xmmword_23DDC77F0;
  *(_OWORD *)(a1 + 144) = xmmword_23DDC7800;
  *(_OWORD *)(a1 + 160) = xmmword_23DDC7810;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 200) = v34;
  *(_BYTE *)(a1 + 201) = 0;
  *(_DWORD *)(a1 + 202) = *(_DWORD *)&v32[7];
  *(_WORD *)(a1 + 206) = v33;
  *(_QWORD *)(a1 + 208) = v13;
  *(_QWORD *)(a1 + 216) = v15;
  *(_QWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 232) = v27;
  *(_BYTE *)(a1 + 248) = v17;
  v24 = *(_DWORD *)v32;
  *(_DWORD *)(a1 + 252) = *(_DWORD *)&v32[3];
  *(_DWORD *)(a1 + 249) = v24;
  *(_QWORD *)(a1 + 256) = v18;
  *(_QWORD *)(a1 + 264) = v19;
  *(double *)(a1 + 272) = result;
  return result;
}

void (*EnvironmentValues.overnightMetricsChartSpec.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x470uLL);
  *a1 = v3;
  v3[140] = v1;
  v3[141] = sub_23DD29138();
  sub_23DDC5D80();
  return sub_23DD58260;
}

void sub_23DD58260(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v3 = (void *)(*a1 + 280);
  if ((a2 & 1) != 0)
  {
    memcpy((void *)(v2 + 560), (const void *)v2, 0x118uLL);
    memcpy((void *)(v2 + 840), (const void *)v2, 0x118uLL);
    sub_23DCFBB9C((uint64_t *)(v2 + 560));
    sub_23DDC5D8C();
    memcpy(v3, (const void *)v2, 0x118uLL);
    sub_23DCFE908((uint64_t *)v3);
  }
  else
  {
    memcpy((void *)(*a1 + 280), (const void *)v2, 0x118uLL);
    sub_23DDC5D8C();
  }
  free((void *)v2);
}

double sub_23DD58334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void (*v5)(char *, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  _BYTE v24[11];
  __int16 v25;
  _BYTE v26[7];
  _BYTE v27[7];
  _BYTE v28[7];
  _BYTE v29[7];

  v0 = sub_23DDC5774();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_256CFC0C0 != -1)
    swift_once();
  v4 = __swift_project_value_buffer(v0, (uint64_t)qword_256D06580);
  v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v5(v3, v4, v0);
  sub_23DDC626C();
  v18 = sub_23DDC623C();
  swift_release();
  if (qword_256CFC0C8 != -1)
    swift_once();
  v6 = __swift_project_value_buffer(v0, (uint64_t)qword_256D06598);
  v5(v3, v6, v0);
  sub_23DDC626C();
  v7 = sub_23DDC623C();
  swift_release();
  sub_23DDC6230();
  v8 = sub_23DDC623C();
  swift_release();
  *(_QWORD *)&v19 = sub_23DDC6218();
  v9 = sub_23DDC5B40();
  if (qword_256CFC098 != -1)
    swift_once();
  v10 = MEMORY[0x242642C18]((id)qword_256CFE658);
  if (qword_256CFC0A8 != -1)
    swift_once();
  v11 = MEMORY[0x242642C18]((id)qword_256CFE668);
  *(_QWORD *)&v19 = sub_23DDC6200();
  v12 = sub_23DDC5B40();
  sub_23DDC6200();
  v13 = sub_23DDC623C();
  swift_release();
  *(_QWORD *)&v19 = v13;
  v14 = sub_23DDC5B40();
  LODWORD(v19) = sub_23DDC5E94();
  DWORD1(v19) = 1036831949;
  sub_23DD290DC();
  sub_23DD58788();
  v15 = sub_23DDC5B40();
  sub_23DD57640((uint64_t)&v19);
  result = v23;
  qword_256CFE378 = v18;
  unk_256CFE380 = v7;
  qword_256CFE388 = v8;
  byte_256CFE390 = 0;
  *(_DWORD *)algn_256CFE391 = *(_DWORD *)v29;
  dword_256CFE394 = *(_DWORD *)&v29[3];
  byte_256CFE398 = 1;
  dword_256CFE39C = *(_DWORD *)&v28[3];
  *(_DWORD *)algn_256CFE399 = *(_DWORD *)v28;
  qword_256CFE3A0 = v9;
  unk_256CFE3A8 = 0;
  byte_256CFE3B0 = 1;
  *(_DWORD *)algn_256CFE3B1 = *(_DWORD *)v27;
  dword_256CFE3B4 = *(_DWORD *)&v27[3];
  qword_256CFE3B8 = 0x4014000000000000;
  unk_256CFE3C0 = v10;
  qword_256CFE3C8 = v11;
  unk_256CFE3D0 = 0x3FE0000000000000;
  qword_256CFE3D8 = 0;
  byte_256CFE3E0 = 1;
  dword_256CFE3E4 = *(_DWORD *)&v26[3];
  *(_DWORD *)algn_256CFE3E1 = *(_DWORD *)v26;
  xmmword_256CFE3E8 = xmmword_23DDC77E0;
  unk_256CFE3F8 = xmmword_23DDC77F0;
  xmmword_256CFE408 = xmmword_23DDC7800;
  unk_256CFE418 = xmmword_23DDC7810;
  qword_256CFE430 = 0;
  unk_256CFE438 = 0;
  qword_256CFE428 = 0;
  byte_256CFE440 = 1;
  byte_256CFE441 = 0;
  unk_256CFE442 = *(_DWORD *)&v24[7];
  word_256CFE446 = v25;
  qword_256CFE448 = v12;
  unk_256CFE450 = v14;
  qword_256CFE458 = v15;
  unk_256CFE460 = v19;
  byte_256CFE470 = v20;
  dword_256CFE474 = *(_DWORD *)&v24[3];
  *(_DWORD *)algn_256CFE471 = *(_DWORD *)v24;
  qword_256CFE478 = v21;
  unk_256CFE480 = v22;
  qword_256CFE488 = *(_QWORD *)&v23;
  return result;
}

uint64_t *sub_23DD58700@<X0>(void *a1@<X8>)
{
  uint64_t __dst[35];

  if (qword_256CFC090 != -1)
    swift_once();
  memcpy(__dst, &qword_256CFE378, sizeof(__dst));
  memcpy(a1, &qword_256CFE378, 0x118uLL);
  return sub_23DCFBB9C(__dst);
}

unint64_t sub_23DD58788()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFD598;
  if (!qword_256CFD598)
  {
    sub_23DD290DC();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEECA0], v1);
    atomic_store(result, (unint64_t *)&qword_256CFD598);
  }
  return result;
}

uint64_t destroy for OvernightMetricsChartSpec(_QWORD *a1)
{
  if (*a1)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OvernightMetricsChartSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  v11 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v11;
  v13 = *(_QWORD *)(a2 + 184);
  v12 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 184) = v13;
  *(_QWORD *)(a1 + 192) = v12;
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  v14 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v14;
  v15 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v15;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  v16 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v16;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsChartSpec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if (v4)
  {
    if (v5)
    {
      *(_QWORD *)a1 = v5;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 8) = a2[1];
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 16) = a2[2];
      swift_retain();
      swift_release();
    }
    else
    {
      sub_23DCF9EB8(a1);
      v6 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v6;
    }
  }
  else if (v5)
  {
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = a2[2];
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v7;
  }
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_retain();
  swift_release();
  v8 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = a2[9];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 80) = a2[10];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 88) = a2[11];
  v9 = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_QWORD *)(a1 + 128) = a2[16];
  *(_QWORD *)(a1 + 136) = a2[17];
  *(_QWORD *)(a1 + 144) = a2[18];
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = a2[20];
  *(_QWORD *)(a1 + 168) = a2[21];
  *(_QWORD *)(a1 + 176) = a2[22];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 184) = a2[23];
  swift_retain();
  swift_release();
  v10 = a2[24];
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
  *(_QWORD *)(a1 + 192) = v10;
  *(_BYTE *)(a1 + 201) = *((_BYTE *)a2 + 201);
  *(_QWORD *)(a1 + 208) = a2[26];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 216) = a2[27];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 224) = a2[28];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 232) = a2[29];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 240) = a2[30];
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
  *(_QWORD *)(a1 + 256) = a2[32];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 264) = a2[33];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 272) = a2[34];
  return a1;
}

void *__swift_memcpy280_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for OvernightMetricsChartSpec(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (!*(_QWORD *)a1)
    goto LABEL_5;
  if (!*(_QWORD *)a2)
  {
    sub_23DCF9EB8(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
LABEL_6:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v4 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v4;
  v5 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v5;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_release();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_release();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_release();
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_release();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_release();
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_release();
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_release();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_release();
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartSpec(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 280))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 280) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 280) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpec()
{
  return &type metadata for OvernightMetricsChartSpec;
}

uint64_t destroy for OvernightMetricsChartSpec.XAxisSpec()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OvernightMetricsChartSpec.XAxisSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsChartSpec.XAxisSpec(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for OvernightMetricsChartSpec.XAxisSpec(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartSpec.XAxisSpec(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartSpec.XAxisSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpec.XAxisSpec()
{
  return &type metadata for OvernightMetricsChartSpec.XAxisSpec;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpec.WarmupProgressCounterSpec()
{
  return &type metadata for OvernightMetricsChartSpec.WarmupProgressCounterSpec;
}

uint64_t destroy for OvernightMetricsChartSpec.GradientPillSpec()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OvernightMetricsChartSpec.GradientPillSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsChartSpec.GradientPillSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for OvernightMetricsChartSpec.GradientPillSpec(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartSpec.GradientPillSpec(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartSpec.GradientPillSpec(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpec.GradientPillSpec()
{
  return &type metadata for OvernightMetricsChartSpec.GradientPillSpec;
}

uint64_t destroy for OvernightMetricsChartSpec.ChartPointSpec()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OvernightMetricsChartSpec.ChartPointSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsChartSpec.ChartPointSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for OvernightMetricsChartSpec.ChartPointSpec(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartSpec.ChartPointSpec(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartSpec.ChartPointSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpec.ChartPointSpec()
{
  return &type metadata for OvernightMetricsChartSpec.ChartPointSpec;
}

uint64_t _s15HealthBalanceUI25OvernightMetricsChartSpecV18BaselineBandColorsVwxx_0()
{
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *_s15HealthBalanceUI25OvernightMetricsChartSpecV18BaselineBandColorsVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *_s15HealthBalanceUI25OvernightMetricsChartSpecV18BaselineBandColorsVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s15HealthBalanceUI25OvernightMetricsChartSpecV18BaselineBandColorsVwta_0(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpec.BaselineBandColors()
{
  return &type metadata for OvernightMetricsChartSpec.BaselineBandColors;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartSpecKey()
{
  return &type metadata for OvernightMetricsChartSpecKey;
}

void sub_23DD59764()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC4A0)
  {
    sub_23DDC5FA8();
    v0 = sub_23DDC6980();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC4A0);
  }
}

uint64_t sub_23DD597B8(uint64_t a1)
{
  uint64_t v2;

  sub_23DD59764();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DD597F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  int64_t v54;
  double v55;
  _QWORD *v56;
  double v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v62;
  int64_t v63;
  double v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t ObjCClassFromMetadata;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t result;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  char *v124;
  int v125;
  int v126;
  int v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152[2];

  v148 = a5;
  v9 = sub_23DDC671C();
  MEMORY[0x24BDAC7A8](v9);
  v124 = (char *)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23DDC54C8();
  v150 = *(_QWORD *)(v14 - 8);
  v151 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v147 = (char *)&v113 - v18;
  v19 = sub_23DDC50CC();
  v142 = *(_QWORD *)(v19 - 8);
  v143 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v141 = (char *)&v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_23DDC500C();
  MEMORY[0x24BDAC7A8](v21);
  v140 = (char *)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_23DDC51F8();
  MEMORY[0x24BDAC7A8](v23);
  v139 = (char *)&v113 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_23DDC51E0();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v138 = (char *)&v113 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v28);
  v144 = (char *)&v113 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_254326648, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDEE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v31);
  v136 = (char *)&v113 - v32;
  sub_23DCFB328(0, &qword_254326650, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDF30], v30);
  MEMORY[0x24BDAC7A8](v33);
  v133 = (char *)&v113 - v34;
  v35 = sub_23DDC50F0();
  v135 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v134 = (char *)&v113 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v37);
  v137 = (char *)&v113 - v38;
  v132 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  MEMORY[0x24BDAC7A8](v132);
  v40 = (char *)&v113 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v41);
  v146 = (uint64_t)&v113 - v42;
  v130 = sub_23DDC51D4();
  v129 = *(_QWORD *)(v130 - 8);
  MEMORY[0x24BDAC7A8](v130);
  v128 = (char *)&v113 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF9010();
  MEMORY[0x24BDAC7A8](v44);
  v131 = (uint64_t)&v113 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v46);
  v149 = (char *)&v113 - v47;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a4, v25);
    v101 = sub_23DDC512C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 8))(a1, v101);
    v102 = type metadata accessor for OvernightMetricsChartPoint();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v148, 1, 1, v102);
  }
  v115 = a3;
  v116 = v35;
  v117 = v26;
  v118 = v25;
  v119 = v13;
  v145 = a4;
  v120 = a1;
  v48 = a2 + 64;
  v49 = 1;
  v50 = 1 << *(_BYTE *)(a2 + 32);
  v51 = -1;
  if (v50 < 64)
    v51 = ~(-1 << v50);
  v52 = v51 & *(_QWORD *)(a2 + 64);
  v53 = (unint64_t)(v50 + 63) >> 6;
  v127 = *MEMORY[0x24BE401B0];
  v126 = *MEMORY[0x24BE401A8];
  v125 = *MEMORY[0x24BE401B8];
  swift_bridgeObjectRetain();
  v122 = 0;
  v121 = 0;
  v123 = 0;
  v54 = 0;
  v114 = 0;
  v55 = 0.0;
  v56 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v57 = 0.0;
  while (v52)
  {
    v58 = __clz(__rbit64(v52));
    v52 &= v52 - 1;
    v59 = v58 | (v54 << 6);
LABEL_6:
    v60 = *(_QWORD *)(a2 + 56) + 16 * v59;
    if ((*(_BYTE *)(v60 + 8) & 1) == 0)
    {
      v64 = *(double *)v60;
      if ((v49 & 1) != 0)
      {
        v57 = *(double *)v60;
        v55 = *(double *)v60;
      }
      else if (v64 >= v55)
      {
        if (v57 < v64)
        {
          v57 = *(double *)v60;
          if (v55 > v64)
            goto LABEL_52;
        }
      }
      else
      {
        v55 = *(double *)v60;
        if (v64 > v57)
          goto LABEL_51;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v56 = sub_23DD56480(0, v56[2] + 1, 1, v56);
      v66 = v56[2];
      v65 = v56[3];
      if (v66 >= v65 >> 1)
        v56 = sub_23DD56480((_QWORD *)(v65 > 1), v66 + 1, 1, v56);
      v56[2] = v66 + 1;
      *(double *)&v56[v66 + 4] = v64;
      v67 = v147;
      sub_23DDC54A4();
      v68 = v150;
      v69 = v67;
      v70 = v151;
      (*(void (**)(char *, char *, uint64_t))(v150 + 32))(v16, v69, v151);
      v71 = (*(uint64_t (**)(char *, uint64_t))(v68 + 88))(v16, v70);
      if (v71 == v127)
      {
        v49 = 0;
        v123 = 1;
      }
      else if (v71 == v126)
      {
        v49 = 0;
        v122 = 1;
      }
      else if (v71 == v125)
      {
        v49 = 0;
        v121 = 1;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v150 + 8))(v16, v151);
        v49 = 0;
      }
    }
  }
  if (__OFADD__(v54++, 1))
  {
    __break(1u);
    goto LABEL_50;
  }
  if (v54 >= v53)
    goto LABEL_43;
  v62 = *(_QWORD *)(v48 + 8 * v54);
  if (v62)
  {
LABEL_20:
    v52 = (v62 - 1) & v62;
    v59 = __clz(__rbit64(v62)) + (v54 << 6);
    goto LABEL_6;
  }
  v63 = v54 + 1;
  if (v54 + 1 >= v53)
    goto LABEL_43;
  v62 = *(_QWORD *)(v48 + 8 * v63);
  if (v62)
    goto LABEL_19;
  v63 = v54 + 2;
  if (v54 + 2 >= v53)
    goto LABEL_43;
  v62 = *(_QWORD *)(v48 + 8 * v63);
  if (v62)
    goto LABEL_19;
  v63 = v54 + 3;
  if (v54 + 3 >= v53)
    goto LABEL_43;
  v62 = *(_QWORD *)(v48 + 8 * v63);
  if (v62)
  {
LABEL_19:
    v54 = v63;
    goto LABEL_20;
  }
  v63 = v54 + 4;
  if (v54 + 4 < v53)
  {
    v62 = *(_QWORD *)(v48 + 8 * v63);
    if (!v62)
    {
      while (1)
      {
        v54 = v63 + 1;
        if (__OFADD__(v63, 1))
          break;
        if (v54 >= v53)
          goto LABEL_43;
        v62 = *(_QWORD *)(v48 + 8 * v54);
        ++v63;
        if (v62)
          goto LABEL_20;
      }
LABEL_50:
      __break(1u);
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      swift_release();
      __break(1u);
      result = swift_release();
      __break(1u);
      return result;
    }
    goto LABEL_19;
  }
LABEL_43:
  v151 = v49;
  v72 = v120;
  swift_release();
  v73 = swift_bridgeObjectRetain();
  v74 = (_QWORD *)sub_23DD5BA64(v73);
  swift_bridgeObjectRelease();
  v152[0] = v74;
  v75 = v114;
  sub_23DD5BB90(v152);
  v77 = v152[0];
  v78 = v115;
  if (v75)
    goto LABEL_53;
  MEMORY[0x24BDAC7A8](v76);
  *(&v113 - 4) = v78;
  *(&v113 - 3) = v72;
  *(&v113 - 2) = v145;
  v79 = sub_23DD8FD28((void (*)(_QWORD))sub_23DD602A4, (uint64_t)(&v113 - 6), (uint64_t)v77);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v80 = v129;
  v81 = v128;
  v82 = v130;
  (*(void (**)(char *, _QWORD, uint64_t))(v129 + 104))(v128, *MEMORY[0x24BDCF220], v130);
  v83 = v149;
  sub_23DD5B210(v72, v149);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v82);
  v84 = v131;
  sub_23DCF58EC((uint64_t)v83, v131, (uint64_t (*)(_QWORD))sub_23DCF9010);
  v152[0] = v56;
  swift_bridgeObjectRetain();
  sub_23DD5BC10((uint64_t *)v152);
  swift_bridgeObjectRelease();
  v85 = v152[0];
  sub_23DCF58EC(v84, (uint64_t)v40, (uint64_t (*)(_QWORD))sub_23DCF9010);
  v86 = v132;
  *(_QWORD *)&v40[*(int *)(v132 + 20)] = v79;
  *(_QWORD *)&v40[*(int *)(v86 + 24)] = v85;
  v87 = swift_bridgeObjectRetain();
  v88 = sub_23DD5FB90(v87);
  swift_bridgeObjectRelease();
  sub_23DCF59A8(v84, (uint64_t (*)(_QWORD))sub_23DCF9010);
  *(_QWORD *)&v40[*(int *)(v86 + 28)] = v88;
  v89 = v146;
  sub_23DCFBB58((uint64_t)v40, v146, (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricChartPointCollection);
  v90 = sub_23DDC5048();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v133, 1, 1, v90);
  v91 = sub_23DDC503C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v136, 1, 1, v91);
  sub_23DDC515C();
  sub_23DDC51B0();
  sub_23DDC51EC();
  sub_23DDC5000();
  v92 = v134;
  sub_23DDC5054();
  v93 = v141;
  sub_23DDC50B4();
  v94 = v137;
  sub_23DDC50E4();
  (*(void (**)(char *, uint64_t))(v142 + 8))(v93, v143);
  v95 = *(void (**)(char *, uint64_t))(v135 + 8);
  v96 = v116;
  v95(v92, v116);
  sub_23DCF535C(&qword_254326658, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE2A0], MEMORY[0x24BDCE290]);
  sub_23DDC5120();
  v95(v94, v96);
  v97 = v152[0];
  v98 = v152[1];
  if ((v151 & 1) != 0)
  {
    sub_23DDC66D4();
  }
  else
  {
    sub_23DDBEECC(v55);
    sub_23DDBEECC(v57);
    sub_23DDC6710();
    sub_23DDC6704();
    sub_23DDC66F8();
    swift_bridgeObjectRelease();
    sub_23DDC6704();
    sub_23DDC66F8();
    v89 = v146;
    swift_bridgeObjectRelease();
    sub_23DDC6704();
    sub_23DDC6728();
  }
  type metadata accessor for HealthBalanceUI();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v100 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23DDC5168();
  v104 = sub_23DDC6770();
  v106 = v105;
  v107 = v148;
  (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v145, v118);
  sub_23DCF59A8((uint64_t)v149, (uint64_t (*)(_QWORD))sub_23DCF9010);
  v108 = sub_23DDC512C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 32))(v107, v72, v108);
  v109 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  sub_23DCFBB58(v89, v107 + v109[5], (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricChartPointCollection);
  v110 = v107 + v109[6];
  *(double *)v110 = v55;
  *(double *)(v110 + 8) = v57;
  *(_BYTE *)(v110 + 16) = v151 & 1;
  *(_BYTE *)(v107 + v109[7]) = v123 & 1;
  *(_BYTE *)(v107 + v109[8]) = v121 & 1;
  *(_BYTE *)(v107 + v109[9]) = v122 & 1;
  v111 = (_QWORD *)(v107 + v109[10]);
  *v111 = v97;
  v111[1] = v98;
  v112 = (uint64_t *)(v107 + v109[11]);
  *v112 = v104;
  v112[1] = v106;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v109 - 1) + 56))(v107, 0, 1, v109);
}

uint64_t OvernightMetricsChartPoint.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DDC512C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t OvernightMetricsChartPoint.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  sub_23DDC512C();
  sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DDC6674();
  v4 = type metadata accessor for OvernightMetricsChartPoint();
  v5 = v1 + *(int *)(v4 + 20);
  sub_23DDC6674();
  sub_23DCF9010();
  sub_23DDC6674();
  v6 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  v7 = *(_QWORD *)(v5 + v6[5]);
  swift_bridgeObjectRetain();
  sub_23DD5E424((uint64_t)a1, v7);
  swift_bridgeObjectRelease();
  sub_23DD5E6FC((uint64_t)a1, *(_QWORD *)(v5 + v6[6]));
  v8 = *(_QWORD *)(v5 + v6[7]);
  swift_bridgeObjectRetain();
  sub_23DD5DDD0(a1, v8);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v2 + *(int *)(v4 + 24) + 16) == 1)
  {
    sub_23DDC6C68();
  }
  else
  {
    sub_23DDC6C68();
    sub_23DDC6C74();
    sub_23DDC6C74();
  }
  sub_23DDC6C68();
  sub_23DDC6C68();
  sub_23DDC6C68();
  swift_bridgeObjectRetain();
  sub_23DDC6794();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23DDC6794();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for OvernightMetricsChartPoint()
{
  uint64_t result;

  result = qword_254326A38;
  if (!qword_254326A38)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD5A818(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DD5A844 + 4 * byte_23DDC9D20[a1]))(1702125924, 0xE400000000000000);
}

unint64_t sub_23DD5A844()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_23DD5A8BC()
{
  return 0xD000000000000012;
}

uint64_t sub_23DD5A8E4()
{
  unsigned __int8 *v0;

  return sub_23DD5A818(*v0);
}

uint64_t sub_23DD5A8EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DD5FEE8(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DD5A910(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_23DD5A91C()
{
  sub_23DD5EE6C();
  return sub_23DDC6CEC();
}

uint64_t sub_23DD5A944()
{
  sub_23DD5EE6C();
  return sub_23DDC6CF8();
}

uint64_t OvernightMetricsChartPoint.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  __int128 *v11;
  char v12;
  _BYTE v14[16];
  __int128 v15;
  char v16;

  v3 = v1;
  sub_23DD5EEB0(0, &qword_256CFE490, MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v14[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DD5EE6C();
  sub_23DDC6C98();
  LOBYTE(v15) = 0;
  sub_23DDC512C();
  sub_23DCF535C(&qword_256CFDBF8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
  sub_23DDC6BCC();
  if (!v2)
  {
    v10 = type metadata accessor for OvernightMetricsChartPoint();
    LOBYTE(v15) = 1;
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    sub_23DCF535C(&qword_256CFE4A0, (uint64_t (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPointCollection, (uint64_t)&unk_23DDC8F50);
    sub_23DDC6BCC();
    v11 = (__int128 *)(v3 + *(int *)(v10 + 24));
    v12 = *((_BYTE *)v11 + 16);
    v15 = *v11;
    v16 = v12;
    v14[15] = 2;
    sub_23DCFF9E8();
    sub_23DD5EF0C(&qword_256CFE4A8, MEMORY[0x24BEE13D8], MEMORY[0x24BEE08E0]);
    sub_23DDC6B9C();
    LOBYTE(v15) = 3;
    sub_23DDC6BB4();
    LOBYTE(v15) = 4;
    sub_23DDC6BB4();
    LOBYTE(v15) = 5;
    sub_23DDC6BB4();
    LOBYTE(v15) = 6;
    sub_23DDC6BA8();
    LOBYTE(v15) = 7;
    sub_23DDC6BA8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t OvernightMetricsChartPoint.hashValue.getter()
{
  __int128 v1[4];

  sub_23DDC6C50();
  OvernightMetricsChartPoint.hash(into:)(v1);
  return sub_23DDC6C80();
}

uint64_t OvernightMetricsChartPoint.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 v37;
  char v38;
  char v39;

  v28 = a2;
  v31 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  MEMORY[0x24BDAC7A8](v31);
  v30 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_23DDC512C();
  v29 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v33 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD5EEB0(0, &qword_256CFE4B0, MEMORY[0x24BEE33E0]);
  v35 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v27 - v7;
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = &v11[*(int *)(v12 + 24)];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DD5EE6C();
  v34 = v8;
  v14 = (uint64_t)v36;
  sub_23DDC6C8C();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v27 = v13;
  v15 = (uint64_t)v30;
  v36 = a1;
  LOBYTE(v37) = 0;
  sub_23DCF535C(&qword_256CFDC38, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  v16 = v32;
  sub_23DDC6B78();
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v11, v33, v16);
  LOBYTE(v37) = 1;
  sub_23DCF535C(&qword_256CFE4B8, (uint64_t (*)(uint64_t))type metadata accessor for IndividualOvernightMetricChartPointCollection, (uint64_t)&unk_23DDC8F28);
  sub_23DDC6B78();
  sub_23DCFBB58(v15, (uint64_t)&v11[v9[5]], (uint64_t (*)(_QWORD))type metadata accessor for IndividualOvernightMetricChartPointCollection);
  sub_23DCFF9E8();
  v39 = 2;
  sub_23DD5EF0C(&qword_256CFE4C0, MEMORY[0x24BEE1400], MEMORY[0x24BEE0900]);
  sub_23DDC6B48();
  v17 = v38;
  v18 = v27;
  *(_OWORD *)v27 = v37;
  v18[16] = v17;
  LOBYTE(v37) = 3;
  v11[v9[7]] = sub_23DDC6B60() & 1;
  LOBYTE(v37) = 4;
  v11[v9[8]] = sub_23DDC6B60() & 1;
  LOBYTE(v37) = 5;
  v11[v9[9]] = sub_23DDC6B60() & 1;
  LOBYTE(v37) = 6;
  v19 = sub_23DDC6B54();
  v20 = (uint64_t *)&v11[v9[10]];
  *v20 = v19;
  v20[1] = v21;
  LOBYTE(v37) = 7;
  v22 = sub_23DDC6B54();
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v34, v35);
  v25 = (uint64_t *)&v11[v9[11]];
  *v25 = v22;
  v25[1] = v24;
  sub_23DCF58EC((uint64_t)v11, v28, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
  return sub_23DCF59A8((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
}

uint64_t sub_23DD5B16C()
{
  __int128 v1[4];

  sub_23DDC6C50();
  OvernightMetricsChartPoint.hash(into:)(v1);
  return sub_23DDC6C80();
}

uint64_t sub_23DD5B1AC()
{
  __int128 v1[4];

  sub_23DDC6C50();
  OvernightMetricsChartPoint.hash(into:)(v1);
  return sub_23DDC6C80();
}

uint64_t sub_23DD5B1E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return OvernightMetricsChartPoint.init(from:)(a1, a2);
}

uint64_t sub_23DD5B1F8(_QWORD *a1)
{
  return OvernightMetricsChartPoint.encode(to:)(a1);
}

uint64_t sub_23DD5B210@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v37 = a1;
  v36 = a2;
  sub_23DD3DBE8();
  v35 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - v6;
  v8 = sub_23DDC512C();
  v34 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v33 - v12;
  sub_23DCFB328(0, &qword_254326640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v33 - v15;
  v17 = sub_23DDC4EE0();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC51A4();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
    sub_23DDC4EC8();
    sub_23DDC4EB0();
    sub_23DCF535C((unint64_t *)&qword_254326A30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    v22 = sub_23DDC66A4();
    result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    if ((v22 & 1) != 0)
    {
      v24 = v34;
      v23 = v35;
      v25 = &v7[*(int *)(v35 + 48)];
      v26 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      v26(v7, v13, v8);
      v26(v25, v10, v8);
      v27 = &v4[*(int *)(v23 + 48)];
      v28 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
      v28(v4, v7, v8);
      v28(v27, v25, v8);
      v29 = v36;
      v26(v36, v4, v8);
      v30 = *(void (**)(char *, uint64_t))(v24 + 8);
      v30(v27, v8);
      v31 = &v4[*(int *)(v23 + 48)];
      v26(v4, v7, v8);
      v26(v31, v25, v8);
      sub_23DCF9010();
      v26(&v29[*(int *)(v32 + 36)], v31, v8);
      return ((uint64_t (*)(char *, uint64_t))v30)(v4, v8);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23DD5B500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t *v35;
  void (*v36)(_BYTE *, uint64_t, uint64_t, double);
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(_BYTE *, unint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_BYTE *, _QWORD, uint64_t);
  _BYTE *v54;
  uint64_t v55;
  void (*v56)(_BYTE *, uint64_t);
  char *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[12];
  int v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;

  v81 = a2;
  v72 = a4;
  v68 = a3;
  v82 = a5;
  v71 = sub_23DDC51D4();
  v67 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v69 = &v63[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23DCF9010();
  MEMORY[0x24BDAC7A8](v7);
  v70 = &v63[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v79 = &v63[-v10];
  v11 = sub_23DDC54C8();
  v77 = *(_QWORD *)(v11 - 8);
  v78 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v66 = &v63[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v65 = &v63[-v14];
  MEMORY[0x24BDAC7A8](v15);
  v76 = &v63[-v16];
  sub_23DCFB328(0, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v17);
  v19 = &v63[-v18];
  v85 = sub_23DDC512C();
  v20 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85);
  v75 = &v63[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v22);
  v80 = &v63[-v23];
  sub_23DD602C0();
  v25 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v27 = &v63[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v28 = sub_23DDC53A8();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v74 = &v63[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = &v63[-v33];
  v35 = (uint64_t *)(a1 + *(int *)(v25 + 48));
  v36 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v29 + 16);
  v37 = a1;
  v38 = v81;
  v36(v27, v37, v28, v32);
  v73 = *v35;
  v39 = *((unsigned __int8 *)v35 + 8);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 32))(v34, v27, v28);
  if (!*(_QWORD *)(v38 + 16) || (v40 = sub_23DD768A4((uint64_t)v34), (v41 & 1) == 0))
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, v85);
    goto LABEL_7;
  }
  v64 = v39;
  v42 = v20;
  v43 = *(_QWORD *)(v38 + 56) + *(_QWORD *)(v20 + 72) * v40;
  v44 = *(void (**)(_BYTE *, unint64_t, uint64_t))(v20 + 16);
  v45 = v85;
  v44(v19, v43, v85);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, v45);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v45) == 1)
  {
LABEL_7:
    (*(void (**)(_BYTE *, uint64_t))(v29 + 8))(v34, v28);
    sub_23DD60328((uint64_t)v19);
    v49 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v82, 1, 1, v49);
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 32))(v80, v19, v45);
  if ((v64 & 1) != 0)
  {
    v47 = v77;
    v46 = v78;
    v48 = v65;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v77 + 104))(v65, *MEMORY[0x24BE40190], v78);
  }
  else
  {
    v48 = v65;
    sub_23DDC54A4();
    v47 = v77;
    v46 = v78;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v47 + 32))(v76, v48, v46);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v36)(v74, v34, v28);
  v51 = v68;
  v44(v75, v68, v85);
  v52 = v67;
  v53 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v67 + 104);
  v54 = v69;
  v55 = v71;
  v53(v69, *MEMORY[0x24BDCF220], v71);
  sub_23DD5B210(v51, v79);
  v56 = *(void (**)(_BYTE *, uint64_t))(v52 + 8);
  v56(v54, v55);
  v53(v54, *MEMORY[0x24BDCF260], v55);
  v57 = v70;
  sub_23DD5B210((uint64_t)v80, v70);
  v56(v54, v55);
  v83 = v73;
  v84 = v64;
  v59 = v76;
  v58 = v77;
  v60 = (uint64_t)v66;
  v61 = v78;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v77 + 16))(v66, v76, v78);
  sub_23DD9FDA4((uint64_t)v74, (uint64_t)v75, (uint64_t)v79, (uint64_t)v57, (uint64_t)&v83, v60, v82);
  (*(void (**)(_BYTE *, uint64_t))(v58 + 8))(v59, v61);
  (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v80, v85);
  (*(void (**)(_BYTE *, uint64_t))(v29 + 8))(v34, v28);
  v62 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v82, 0, 1, v62);
}

size_t sub_23DD5BA64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  size_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  sub_23DCFB328(0, &qword_2543267A8, (uint64_t (*)(uint64_t))sub_23DD602C0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_23DD602C0();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v7);
  if (v5)
  {
    if (result - v6 != 0x8000000000000000 || v5 != -1)
    {
      v7[2] = v1;
      v7[3] = 2 * ((uint64_t)(result - v6) / v5);
      sub_23DD5EA30(&v12, (uint64_t)v7 + v6, v1, a1);
      v11 = v10;
      swift_bridgeObjectRetain();
      sub_23DD6037C();
      if (v11 == v1)
        return (size_t)v7;
      __break(1u);
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_23DD5BB90(_QWORD **a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[2];

  sub_23DD602C0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = (_QWORD *)sub_23DDA96AC(v4);
  v5 = v4[2];
  v6[0] = (char *)v4 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v6[1] = v5;
  sub_23DD5BC78(v6);
  *a1 = v4;
}

uint64_t sub_23DD5BC10(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23DDA96C0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_23DD5C9D8(v5);
  *a1 = v2;
  return result;
}

void sub_23DD5BC78(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t);
  char v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t, uint64_t);
  char v107;
  char *v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  char *v116;
  void (*v117)(char *, uint64_t);
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  char v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  char *v198;
  void (*v199)(char *, uint64_t);
  void (*v200)(char *, uint64_t, uint64_t);
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;

  v204 = sub_23DDC5390();
  v196 = *(_QWORD *)(v204 - 8);
  MEMORY[0x24BDAC7A8](v204);
  v203 = (char *)&v184 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v205 = (char *)&v184 - v5;
  sub_23DD602C0();
  v207 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v191 = (uint64_t)&v184 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v208 = (uint64_t)&v184 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v202 = (char *)&v184 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v201 = (char *)&v184 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v212 = (uint64_t)&v184 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v213 = (uint64_t)&v184 - v18;
  v19 = a1[1];
  v20 = sub_23DDC6BD8();
  if (v20 >= v19)
  {
    if (v19 < 0)
      goto LABEL_136;
    if (v19)
      sub_23DD5D068(0, v19, 1, a1);
    return;
  }
  if (v19 >= 0)
    v21 = v19;
  else
    v21 = v19 + 1;
  if (v19 < -1)
    goto LABEL_144;
  v185 = v20;
  v194 = v7;
  v195 = v1;
  if (v19 < 2)
  {
    v25 = (char *)MEMORY[0x24BEE4AF8];
    v193 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v184 = MEMORY[0x24BEE4AF8];
    if (v19 != 1)
    {
      v27 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_102:
      v176 = v25;
      if (v27 >= 2)
      {
        v177 = *a1;
        do
        {
          v178 = v27 - 2;
          if (v27 < 2)
            goto LABEL_131;
          if (!v177)
            goto LABEL_143;
          v179 = *(_QWORD *)&v176[16 * v178 + 32];
          v180 = *(_QWORD *)&v176[16 * v27 + 24];
          v181 = v195;
          sub_23DD5D420(v177 + *(_QWORD *)(v194 + 72) * v179, v177 + *(_QWORD *)(v194 + 72) * *(_QWORD *)&v176[16 * v27 + 16], v177 + *(_QWORD *)(v194 + 72) * v180, v193);
          v195 = v181;
          if (v181)
            break;
          if (v180 < v179)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v176 = sub_23DDA9670((uint64_t)v176);
          if (v178 >= *((_QWORD *)v176 + 2))
            goto LABEL_133;
          v182 = &v176[16 * v178 + 32];
          *(_QWORD *)v182 = v179;
          *((_QWORD *)v182 + 1) = v180;
          v183 = *((_QWORD *)v176 + 2);
          if (v27 > v183)
            goto LABEL_134;
          memmove(&v176[16 * v27 + 16], &v176[16 * v27 + 32], 16 * (v183 - v27));
          *((_QWORD *)v176 + 2) = v183 - 1;
          v27 = v183 - 1;
        }
        while (v183 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v184 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v22 = v21 >> 1;
    v23 = sub_23DDC67DC();
    *(_QWORD *)(v23 + 16) = v22;
    v24 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v184 = v23;
    v193 = v23 + v24;
  }
  v26 = 0;
  v25 = (char *)MEMORY[0x24BEE4AF8];
  v197 = a1;
  while (1)
  {
    v28 = v26;
    v29 = v26 + 1;
    v192 = v26;
    if (v26 + 1 < v19)
    {
      v186 = v25;
      v30 = *v197;
      v187 = v30;
      v31 = *(_QWORD *)(v194 + 72);
      v211 = v31;
      v206 = v26 + 1;
      v32 = v213;
      sub_23DCF58EC(v30 + v31 * v29, v213, (uint64_t (*)(_QWORD))sub_23DD602C0);
      sub_23DCF58EC(v30 + v31 * v28, v212, (uint64_t (*)(_QWORD))sub_23DD602C0);
      v33 = v207;
      v34 = *(int *)(v207 + 48);
      v35 = v201;
      v36 = &v201[v34];
      v37 = v32 + v34;
      v38 = sub_23DDC53A8();
      v39 = *(_QWORD *)(v38 - 8);
      v40 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
      v40(v35, v32, v38);
      v41 = *(_BYTE *)(v37 + 8);
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v41;
      sub_23DDC539C();
      v42 = *(void (**)(char *, uint64_t))(v39 + 8);
      v42(v35, v38);
      v43 = *(int *)(v33 + 48);
      v44 = v202;
      v45 = &v202[v43];
      v46 = v212;
      v47 = v212 + v43;
      v200 = v40;
      v40(v202, v212, v38);
      v48 = *(_BYTE *)(v47 + 8);
      *(_QWORD *)v45 = *(_QWORD *)v47;
      v45[8] = v48;
      v28 = v192;
      v49 = v203;
      sub_23DDC539C();
      v50 = v44;
      v51 = v211;
      v209 = v38;
      v199 = v42;
      v42(v50, v38);
      v52 = v205;
      LODWORD(v210) = sub_23DDC5384();
      v53 = *(void (**)(char *, uint64_t))(v196 + 8);
      v54 = v49;
      v55 = v187;
      v56 = v204;
      v53(v54, v204);
      v198 = (char *)v53;
      v53(v52, v56);
      sub_23DCF59A8(v46, (uint64_t (*)(_QWORD))sub_23DD602C0);
      sub_23DCF59A8(v213, (uint64_t (*)(_QWORD))sub_23DD602C0);
      v29 = v28 + 2;
      if (v28 + 2 < v19)
      {
        v189 = v51 * v206;
        v188 = v51 * v29;
        v190 = v19;
        while (1)
        {
          v206 = v29;
          v57 = v213;
          sub_23DCF58EC(v55 + v188, v213, (uint64_t (*)(_QWORD))sub_23DD602C0);
          v58 = v212;
          sub_23DCF58EC(v55 + v189, v212, (uint64_t (*)(_QWORD))sub_23DD602C0);
          v59 = v207;
          v60 = *(int *)(v207 + 48);
          v61 = v201;
          v62 = &v201[v60];
          v63 = v57 + v60;
          v64 = v57;
          v65 = v209;
          v66 = v200;
          v200(v201, v64, v209);
          v67 = *(_BYTE *)(v63 + 8);
          *(_QWORD *)v62 = *(_QWORD *)v63;
          v62[8] = v67;
          v68 = v205;
          sub_23DDC539C();
          v69 = v199;
          v199(v61, v65);
          v70 = *(int *)(v59 + 48);
          v71 = v202;
          v72 = &v202[v70];
          v73 = v58 + v70;
          v66(v202, v58, v65);
          v74 = *(_BYTE *)(v73 + 8);
          *(_QWORD *)v72 = *(_QWORD *)v73;
          v72[8] = v74;
          v75 = v203;
          sub_23DDC539C();
          v69(v71, v65);
          LODWORD(v72) = sub_23DDC5384();
          v76 = v75;
          v77 = v204;
          v78 = (void (*)(char *, uint64_t))v198;
          ((void (*)(char *, uint64_t))v198)(v76, v204);
          v78(v68, v77);
          sub_23DCF59A8(v58, (uint64_t (*)(_QWORD))sub_23DD602C0);
          sub_23DCF59A8(v213, (uint64_t (*)(_QWORD))sub_23DD602C0);
          if (((v210 ^ v72) & 1) != 0)
            break;
          v29 = v206 + 1;
          v51 = v211;
          v55 += v211;
          v19 = v190;
          if (v190 == v206 + 1)
          {
            v29 = v190;
            v28 = v192;
            goto LABEL_22;
          }
        }
        v29 = v206;
        v28 = v192;
        v19 = v190;
        v51 = v211;
      }
LABEL_22:
      v25 = v186;
      if ((v210 & 1) != 0)
      {
        if (v29 < v28)
          goto LABEL_137;
        if (v28 < v29)
        {
          v190 = v19;
          v79 = v28;
          v80 = 0;
          v81 = v51 * (v29 - 1);
          v82 = v29 * v51;
          v83 = v79;
          v84 = v79 * v51;
          do
          {
            if (v83 != v29 + v80 - 1)
            {
              v85 = v187;
              if (!v187)
                goto LABEL_142;
              v86 = v29;
              v87 = v187 + v84;
              v88 = v187 + v81;
              sub_23DCFBB58(v187 + v84, v191, (uint64_t (*)(_QWORD))sub_23DD602C0);
              if (v84 < v81 || v87 >= v85 + v82)
              {
                swift_arrayInitWithTakeFrontToBack();
                v51 = v211;
              }
              else
              {
                v51 = v211;
                if (v84 != v81)
                  swift_arrayInitWithTakeBackToFront();
              }
              sub_23DCFBB58(v191, v88, (uint64_t (*)(_QWORD))sub_23DD602C0);
              v29 = v86;
            }
            ++v83;
            --v80;
            v81 -= v51;
            v82 -= v51;
            v84 += v51;
          }
          while (v83 < v29 + v80);
          v25 = v186;
          v28 = v192;
          v19 = v190;
        }
      }
    }
    a1 = v197;
    if (v29 < v19)
    {
      if (__OFSUB__(v29, v28))
        goto LABEL_135;
      if (v29 - v28 < v185)
        break;
    }
LABEL_54:
    if (v29 < v28)
      goto LABEL_130;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v206 = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v25 = sub_23DDA92F0(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
    v124 = *((_QWORD *)v25 + 2);
    v123 = *((_QWORD *)v25 + 3);
    v27 = v124 + 1;
    if (v124 >= v123 >> 1)
      v25 = sub_23DDA92F0((char *)(v123 > 1), v124 + 1, 1, v25);
    *((_QWORD *)v25 + 2) = v27;
    v125 = v25 + 32;
    v126 = &v25[16 * v124 + 32];
    v127 = v206;
    *(_QWORD *)v126 = v192;
    *((_QWORD *)v126 + 1) = v127;
    if (v124)
    {
      while (1)
      {
        v128 = v27 - 1;
        if (v27 >= 4)
        {
          v133 = &v125[16 * v27];
          v134 = *((_QWORD *)v133 - 8);
          v135 = *((_QWORD *)v133 - 7);
          v139 = __OFSUB__(v135, v134);
          v136 = v135 - v134;
          if (v139)
            goto LABEL_119;
          v138 = *((_QWORD *)v133 - 6);
          v137 = *((_QWORD *)v133 - 5);
          v139 = __OFSUB__(v137, v138);
          v131 = v137 - v138;
          v132 = v139;
          if (v139)
            goto LABEL_120;
          v140 = v27 - 2;
          v141 = &v125[16 * v27 - 32];
          v143 = *(_QWORD *)v141;
          v142 = *((_QWORD *)v141 + 1);
          v139 = __OFSUB__(v142, v143);
          v144 = v142 - v143;
          if (v139)
            goto LABEL_122;
          v139 = __OFADD__(v131, v144);
          v145 = v131 + v144;
          if (v139)
            goto LABEL_125;
          if (v145 >= v136)
          {
            v163 = &v125[16 * v128];
            v165 = *(_QWORD *)v163;
            v164 = *((_QWORD *)v163 + 1);
            v139 = __OFSUB__(v164, v165);
            v166 = v164 - v165;
            if (v139)
              goto LABEL_129;
            v156 = v131 < v166;
            goto LABEL_91;
          }
        }
        else
        {
          if (v27 != 3)
          {
            v157 = *((_QWORD *)v25 + 4);
            v158 = *((_QWORD *)v25 + 5);
            v139 = __OFSUB__(v158, v157);
            v150 = v158 - v157;
            v151 = v139;
            goto LABEL_85;
          }
          v130 = *((_QWORD *)v25 + 4);
          v129 = *((_QWORD *)v25 + 5);
          v139 = __OFSUB__(v129, v130);
          v131 = v129 - v130;
          v132 = v139;
        }
        if ((v132 & 1) != 0)
          goto LABEL_121;
        v140 = v27 - 2;
        v146 = &v125[16 * v27 - 32];
        v148 = *(_QWORD *)v146;
        v147 = *((_QWORD *)v146 + 1);
        v149 = __OFSUB__(v147, v148);
        v150 = v147 - v148;
        v151 = v149;
        if (v149)
          goto LABEL_124;
        v152 = &v125[16 * v128];
        v154 = *(_QWORD *)v152;
        v153 = *((_QWORD *)v152 + 1);
        v139 = __OFSUB__(v153, v154);
        v155 = v153 - v154;
        if (v139)
          goto LABEL_127;
        if (__OFADD__(v150, v155))
          goto LABEL_128;
        if (v150 + v155 >= v131)
        {
          v156 = v131 < v155;
LABEL_91:
          if (v156)
            v128 = v140;
          goto LABEL_93;
        }
LABEL_85:
        if ((v151 & 1) != 0)
          goto LABEL_123;
        v159 = &v125[16 * v128];
        v161 = *(_QWORD *)v159;
        v160 = *((_QWORD *)v159 + 1);
        v139 = __OFSUB__(v160, v161);
        v162 = v160 - v161;
        if (v139)
          goto LABEL_126;
        if (v162 < v150)
          goto LABEL_14;
LABEL_93:
        v167 = v128 - 1;
        if (v128 - 1 >= v27)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!*a1)
          goto LABEL_141;
        v168 = v25;
        v169 = &v125[16 * v167];
        v170 = *(_QWORD *)v169;
        v171 = v125;
        v172 = &v125[16 * v128];
        v173 = *((_QWORD *)v172 + 1);
        v174 = v195;
        sub_23DD5D420(*a1 + *(_QWORD *)(v194 + 72) * *(_QWORD *)v169, *a1 + *(_QWORD *)(v194 + 72) * *(_QWORD *)v172, *a1 + *(_QWORD *)(v194 + 72) * v173, v193);
        v195 = v174;
        if (v174)
          goto LABEL_113;
        if (v173 < v170)
          goto LABEL_116;
        if (v128 > *((_QWORD *)v168 + 2))
          goto LABEL_117;
        *(_QWORD *)v169 = v170;
        *(_QWORD *)&v171[16 * v167 + 8] = v173;
        v175 = *((_QWORD *)v168 + 2);
        if (v128 >= v175)
          goto LABEL_118;
        v25 = v168;
        v27 = v175 - 1;
        memmove(v172, v172 + 16, 16 * (v175 - 1 - v128));
        v125 = v171;
        *((_QWORD *)v168 + 2) = v175 - 1;
        if (v175 <= 2)
          goto LABEL_14;
      }
    }
    v27 = 1;
LABEL_14:
    v19 = a1[1];
    v26 = v206;
    if (v206 >= v19)
      goto LABEL_102;
  }
  if (__OFADD__(v28, v185))
    goto LABEL_138;
  if (v28 + v185 >= v19)
    v89 = v19;
  else
    v89 = v28 + v185;
  if (v89 >= v28)
  {
    if (v29 != v89)
    {
      v186 = v25;
      v90 = *(char **)(v194 + 72);
      v91 = (_QWORD)v90 * (v29 - 1);
      v198 = v90;
      v92 = v29 * (_QWORD)v90;
      v190 = v89;
      do
      {
        v94 = 0;
        v95 = v192;
        v206 = v29;
        v199 = (void (*)(char *, uint64_t))v92;
        v200 = (void (*)(char *, uint64_t, uint64_t))v91;
        while (1)
        {
          v211 = v95;
          v96 = *a1;
          v210 = (char *)(v92 + v94);
          v97 = v213;
          sub_23DCF58EC(v92 + v94 + v96, v213, (uint64_t (*)(_QWORD))sub_23DD602C0);
          v209 = v91 + v94;
          sub_23DCF58EC(v91 + v94 + v96, v212, (uint64_t (*)(_QWORD))sub_23DD602C0);
          v98 = v207;
          v99 = *(int *)(v207 + 48);
          v100 = v201;
          v101 = &v201[v99];
          v102 = v97 + v99;
          v103 = v97;
          v104 = sub_23DDC53A8();
          v105 = *(_QWORD *)(v104 - 8);
          v106 = *(void (**)(char *, uint64_t, uint64_t))(v105 + 16);
          v106(v100, v103, v104);
          v107 = *(_BYTE *)(v102 + 8);
          *(_QWORD *)v101 = *(_QWORD *)v102;
          v101[8] = v107;
          v108 = v205;
          sub_23DDC539C();
          v109 = *(void (**)(char *, uint64_t))(v105 + 8);
          v109(v100, v104);
          v110 = *(int *)(v98 + 48);
          v111 = v202;
          v112 = &v202[v110];
          v113 = v212;
          v114 = v212 + v110;
          v106(v202, v212, v104);
          v115 = *(_BYTE *)(v114 + 8);
          *(_QWORD *)v112 = *(_QWORD *)v114;
          v112[8] = v115;
          v116 = v203;
          sub_23DDC539C();
          v109(v111, v104);
          LOBYTE(v112) = sub_23DDC5384();
          v117 = *(void (**)(char *, uint64_t))(v196 + 8);
          v118 = v116;
          v119 = v204;
          v117(v118, v204);
          v117(v108, v119);
          sub_23DCF59A8(v113, (uint64_t (*)(_QWORD))sub_23DD602C0);
          sub_23DCF59A8(v213, (uint64_t (*)(_QWORD))sub_23DD602C0);
          if ((v112 & 1) == 0)
            break;
          a1 = v197;
          v120 = *v197;
          if (!*v197)
            goto LABEL_140;
          v92 = (uint64_t)v199;
          v91 = (uint64_t)v200;
          v121 = (uint64_t)v200 + v120 + v94;
          sub_23DCFBB58((uint64_t)v199 + v120 + v94, v208, (uint64_t (*)(_QWORD))sub_23DD602C0);
          swift_arrayInitWithTakeFrontToBack();
          sub_23DCFBB58(v208, v121, (uint64_t (*)(_QWORD))sub_23DD602C0);
          v94 -= (uint64_t)v198;
          v95 = v211 + 1;
          v93 = v206;
          if (v206 == v211 + 1)
            goto LABEL_47;
        }
        a1 = v197;
        v93 = v206;
        v92 = (uint64_t)v199;
        v91 = (uint64_t)v200;
LABEL_47:
        v29 = v93 + 1;
        v91 += (uint64_t)v198;
        v92 += (uint64_t)v198;
      }
      while (v29 != v190);
      v29 = v190;
      v25 = v186;
      v28 = v192;
    }
    goto LABEL_54;
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  sub_23DDC6AB8();
  __break(1u);
}

uint64_t sub_23DD5C9D8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_23DDC6BD8();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v80 = 0;
      v81 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v83 = *(double *)(v81 + 8 * i);
        v84 = v80;
        do
        {
          v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85)
            break;
          if (!v81)
            goto LABEL_140;
          *(_QWORD *)(v85 + 8) = *(_QWORD *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v97 = result;
  v98 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_102:
      v96 = v8;
      if (v12 >= 2)
      {
        v86 = *v2;
        do
        {
          v87 = v12 - 2;
          if (v12 < 2)
            goto LABEL_131;
          if (!v86)
            goto LABEL_144;
          v88 = v11;
          v89 = v11 + 32;
          v90 = *(_QWORD *)&v11[16 * v87 + 32];
          v91 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_23DD5DB64((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(_QWORD *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1)
            break;
          if (v91 < v90)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v88 = sub_23DDA9670((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_133;
          v92 = &v88[16 * v87 + 32];
          *(_QWORD *)v92 = v90;
          *((_QWORD *)v92 + 1) = v91;
          v93 = *((_QWORD *)v88 + 2);
          if (v12 > v93)
            goto LABEL_134;
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          v11 = v88;
          *((_QWORD *)v88 + 2) = v93 - 1;
          v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v96 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_23DDC67DC();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v98;
    v96 = v7;
    __dst = (double *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v94 = v2;
  v95 = *v2 - 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v99 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(double *)(v10 + 8 * v9);
      v15 = *(double *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = v16;
          v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17)
            break;
          if (v3 == ++v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_137;
        if (v13 < v9)
        {
          v18 = (uint64_t *)(v95 + 8 * v9);
          v19 = v9;
          v20 = v13;
          v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_143;
              v22 = *v21;
              *v21 = *v18;
              *v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v9, v13))
      goto LABEL_135;
    if (v9 - v13 >= v97)
      goto LABEL_46;
    v23 = v13 + v97;
    if (__OFADD__(v13, v97))
      goto LABEL_138;
    if (v23 >= v3)
      v23 = v3;
    if (v23 < v13)
      break;
    if (v9 != v23)
    {
      v24 = (double *)(v95 + 8 * v9);
      do
      {
        v25 = *(double *)(v10 + 8 * v9);
        v26 = v13;
        v27 = v24;
        do
        {
          v28 = *v27;
          if (v25 >= *v27)
            break;
          if (!v10)
            goto LABEL_141;
          *v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      v9 = v23;
    }
LABEL_46:
    if (v9 < v13)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_23DDA92F0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v12 = v30 + 1;
    v10 = v99;
    if (v30 >= v29 >> 1)
    {
      v79 = sub_23DDA92F0((char *)(v29 > 1), v30 + 1, 1, v11);
      v10 = v99;
      v11 = v79;
    }
    *((_QWORD *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(_QWORD *)v32 = v13;
    *((_QWORD *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        v33 = v12 - 1;
        if (v12 >= 4)
        {
          v38 = &v31[16 * v12];
          v39 = *((_QWORD *)v38 - 8);
          v40 = *((_QWORD *)v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44)
            goto LABEL_119;
          v43 = *((_QWORD *)v38 - 6);
          v42 = *((_QWORD *)v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44)
            goto LABEL_120;
          v45 = v12 - 2;
          v46 = &v31[16 * v12 - 32];
          v48 = *(_QWORD *)v46;
          v47 = *((_QWORD *)v46 + 1);
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44)
            goto LABEL_122;
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44)
            goto LABEL_125;
          if (v50 >= v41)
          {
            v68 = &v31[16 * v33];
            v70 = *(_QWORD *)v68;
            v69 = *((_QWORD *)v68 + 1);
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44)
              goto LABEL_129;
            v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v62 = *((_QWORD *)v11 + 4);
            v63 = *((_QWORD *)v11 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_77;
          }
          v35 = *((_QWORD *)v11 + 4);
          v34 = *((_QWORD *)v11 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }
        if ((v37 & 1) != 0)
          goto LABEL_121;
        v45 = v12 - 2;
        v51 = &v31[16 * v12 - 32];
        v53 = *(_QWORD *)v51;
        v52 = *((_QWORD *)v51 + 1);
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54)
          goto LABEL_124;
        v57 = &v31[16 * v33];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44)
          goto LABEL_127;
        if (__OFADD__(v55, v60))
          goto LABEL_128;
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_83:
          if (v61)
            v33 = v45;
          goto LABEL_85;
        }
LABEL_77:
        if ((v56 & 1) != 0)
          goto LABEL_123;
        v64 = &v31[16 * v33];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v44 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v44)
          goto LABEL_126;
        if (v67 < v55)
          goto LABEL_15;
LABEL_85:
        v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10)
          goto LABEL_142;
        v73 = &v31[16 * v72];
        v74 = *(_QWORD *)v73;
        v75 = v31;
        v76 = &v31[16 * v33];
        v77 = *((_QWORD *)v76 + 1);
        sub_23DD5DB64((double *)(v10 + 8 * *(_QWORD *)v73), (double *)(v10 + 8 * *(_QWORD *)v76), v10 + 8 * v77, __dst);
        if (v1)
          goto LABEL_113;
        if (v77 < v74)
          goto LABEL_116;
        if (v33 > *((_QWORD *)v11 + 2))
          goto LABEL_117;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v75[16 * v72 + 8] = v77;
        v78 = *((_QWORD *)v11 + 2);
        if (v33 >= v78)
          goto LABEL_118;
        v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        v31 = v75;
        *((_QWORD *)v11 + 2) = v78 - 1;
        v10 = v99;
        if (v78 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v98;
    if (v9 >= v98)
    {
      v8 = v96;
      v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = sub_23DDC6AB8();
  __break(1u);
  return result;
}

void sub_23DD5D068(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v55 = a1;
  v7 = sub_23DDC5390();
  v61 = *(_QWORD *)(v7 - 8);
  v62 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v60 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v59 = (char *)&v53 - v10;
  sub_23DD602C0();
  v67 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v68 = (uint64_t)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v58 = (char *)&v53 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v57 = (char *)&v53 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v73 = (uint64_t)&v53 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v72 = (uint64_t)&v53 - v21;
  v66 = a3;
  v54 = a2;
  if (a3 != a2)
  {
    v22 = *(_QWORD *)(v20 + 72);
    v23 = v22 * (v66 - 1);
    v63 = v22;
    v24 = v22 * v66;
    v56 = a4;
LABEL_5:
    v25 = 0;
    v71 = v55;
    v64 = v24;
    v65 = v23;
    while (1)
    {
      v26 = *a4;
      v70 = v24 + v25;
      v27 = v72;
      sub_23DCF58EC(v24 + v25 + v26, v72, (uint64_t (*)(_QWORD))sub_23DD602C0);
      v69 = v23 + v25;
      sub_23DCF58EC(v23 + v25 + v26, v73, (uint64_t (*)(_QWORD))sub_23DD602C0);
      v28 = v67;
      v29 = *(int *)(v67 + 48);
      v30 = v57;
      v31 = &v57[v29];
      v32 = v27 + v29;
      v33 = sub_23DDC53A8();
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
      v35(v30, v27, v33);
      v36 = *(_BYTE *)(v32 + 8);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v36;
      v37 = v59;
      sub_23DDC539C();
      v38 = *(void (**)(char *, uint64_t))(v34 + 8);
      v38(v30, v33);
      v39 = *(int *)(v28 + 48);
      v40 = v58;
      v41 = &v58[v39];
      v42 = v73;
      v43 = v73 + v39;
      v35(v58, v73, v33);
      v44 = *(_BYTE *)(v43 + 8);
      *(_QWORD *)v41 = *(_QWORD *)v43;
      v41[8] = v44;
      v45 = v60;
      sub_23DDC539C();
      v46 = v40;
      v24 = v64;
      v38(v46, v33);
      a4 = v56;
      LOBYTE(v33) = sub_23DDC5384();
      v47 = *(void (**)(char *, uint64_t))(v61 + 8);
      v48 = v45;
      v49 = v62;
      v47(v48, v62);
      v50 = v49;
      v23 = v65;
      v47(v37, v50);
      sub_23DCF59A8(v42, (uint64_t (*)(_QWORD))sub_23DD602C0);
      sub_23DCF59A8(v72, (uint64_t (*)(_QWORD))sub_23DD602C0);
      if ((v33 & 1) == 0)
      {
LABEL_4:
        v23 += v63;
        v24 += v63;
        if (++v66 == v54)
          return;
        goto LABEL_5;
      }
      v51 = *a4;
      if (!*a4)
        break;
      v52 = v51 + v23 + v25;
      sub_23DCFBB58(v51 + v24 + v25, v68, (uint64_t (*)(_QWORD))sub_23DD602C0);
      swift_arrayInitWithTakeFrontToBack();
      sub_23DCFBB58(v68, v52, (uint64_t (*)(_QWORD))sub_23DD602C0);
      v25 -= v63;
      if (v66 == ++v71)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_23DD5D420(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  char v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char *v78;
  void (*v79)(char *, uint64_t);
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t result;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;

  v93 = sub_23DDC5390();
  v97 = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93);
  v96 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v95 = (char *)&v85 - v10;
  sub_23DD602C0();
  v100 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v91 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v94 = (char *)&v85 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v92 = (uint64_t)&v85 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v99 = (uint64_t)&v85 - v18;
  v20 = *(_QWORD *)(v19 + 72);
  if (!v20)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v20 == -1)
    goto LABEL_61;
  v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v20 == -1)
    goto LABEL_62;
  v22 = (uint64_t)(a2 - a1) / v20;
  v104 = a1;
  v103 = a4;
  v23 = v21 / v20;
  if (v22 >= v21 / v20)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      v25 = v23 * v20;
      if (a4 < a2 || a2 + v25 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v56 = a4 + v25;
      v102 = a4 + v25;
      v104 = a2;
      if (v25 >= 1 && a1 < a2)
      {
        v58 = -v20;
        v87 = a1;
        v88 = a4;
        v86 = -v20;
        do
        {
          v98 = a3;
          v101 = a2;
          v90 = a3 + v58;
          v59 = v99;
          sub_23DCF58EC(v56 + v58, v99, (uint64_t (*)(_QWORD))sub_23DD602C0);
          v89 = a2 + v58;
          v60 = v92;
          sub_23DCF58EC(a2 + v58, v92, (uint64_t (*)(_QWORD))sub_23DD602C0);
          v61 = v100;
          v62 = *(int *)(v100 + 48);
          v63 = v94;
          v64 = &v94[v62];
          v65 = v59 + v62;
          v66 = sub_23DDC53A8();
          v67 = *(_QWORD *)(v66 - 8);
          v68 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
          v68(v63, v59, v66);
          v69 = *(_BYTE *)(v65 + 8);
          *(_QWORD *)v64 = *(_QWORD *)v65;
          v64[8] = v69;
          v70 = v95;
          sub_23DDC539C();
          v71 = *(void (**)(char *, uint64_t))(v67 + 8);
          v71(v63, v66);
          v72 = *(int *)(v61 + 48);
          v73 = v91;
          v74 = &v91[v72];
          v75 = v60 + v72;
          v68(v91, v60, v66);
          v76 = *(_BYTE *)(v75 + 8);
          v77 = v93;
          *(_QWORD *)v74 = *(_QWORD *)v75;
          v74[8] = v76;
          v78 = v96;
          sub_23DDC539C();
          v71(v73, v66);
          LOBYTE(v74) = sub_23DDC5384();
          v79 = *(void (**)(char *, uint64_t))(v97 + 8);
          v79(v78, v77);
          v79(v70, v77);
          sub_23DCF59A8(v60, (uint64_t (*)(_QWORD))sub_23DD602C0);
          sub_23DCF59A8(v99, (uint64_t (*)(_QWORD))sub_23DD602C0);
          if ((v74 & 1) != 0)
          {
            v58 = v86;
            a3 = v90;
            if (v98 < v101 || v90 >= v101)
            {
              v82 = v89;
              swift_arrayInitWithTakeFrontToBack();
              v80 = v87;
              v81 = v88;
            }
            else
            {
              v80 = v87;
              v81 = v88;
              v82 = v89;
              if (v98 != v101)
                swift_arrayInitWithTakeBackToFront();
            }
            v104 += v58;
          }
          else
          {
            v82 = v101;
            v83 = v102;
            v102 += v86;
            v58 = v86;
            a3 = v90;
            if (v98 < v83 || v90 >= v83)
            {
              swift_arrayInitWithTakeFrontToBack();
              v80 = v87;
              v81 = v88;
            }
            else
            {
              v80 = v87;
              v81 = v88;
              if (v98 != v83)
                swift_arrayInitWithTakeBackToFront();
            }
          }
          v56 = v102;
          if (v102 <= v81)
            break;
          a2 = v82;
        }
        while (v82 > v80);
      }
      goto LABEL_59;
    }
  }
  else if ((v22 & 0x8000000000000000) == 0)
  {
    v24 = v22 * v20;
    if (a4 < a1 || a1 + v24 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v90 = a4 + v24;
    v102 = a4 + v24;
    if (v24 >= 1 && a2 < a3)
    {
      v98 = a3;
      v89 = v20;
      v27 = v92;
      do
      {
        v101 = a2;
        v28 = a2;
        v29 = v99;
        sub_23DCF58EC(v28, v99, (uint64_t (*)(_QWORD))sub_23DD602C0);
        sub_23DCF58EC(a4, v27, (uint64_t (*)(_QWORD))sub_23DD602C0);
        v30 = v100;
        v31 = *(int *)(v100 + 48);
        v32 = v94;
        v33 = &v94[v31];
        v34 = v29 + v31;
        v35 = sub_23DDC53A8();
        v36 = *(_QWORD *)(v35 - 8);
        v37 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
        v37(v32, v29, v35);
        v38 = *(_BYTE *)(v34 + 8);
        *(_QWORD *)v33 = *(_QWORD *)v34;
        v33[8] = v38;
        v39 = v95;
        sub_23DDC539C();
        v40 = *(void (**)(char *, uint64_t))(v36 + 8);
        v40(v32, v35);
        v41 = *(int *)(v30 + 48);
        v42 = v91;
        v43 = &v91[v41];
        v44 = v27 + v41;
        v37(v91, v27, v35);
        v45 = *(_BYTE *)(v44 + 8);
        *(_QWORD *)v43 = *(_QWORD *)v44;
        v43[8] = v45;
        v46 = v96;
        sub_23DDC539C();
        v40(v42, v35);
        LOBYTE(v35) = sub_23DDC5384();
        v47 = *(void (**)(char *, uint64_t))(v97 + 8);
        v48 = v46;
        v49 = v93;
        v47(v48, v93);
        v47(v39, v49);
        sub_23DCF59A8(v27, (uint64_t (*)(_QWORD))sub_23DD602C0);
        sub_23DCF59A8(v29, (uint64_t (*)(_QWORD))sub_23DD602C0);
        v50 = v104;
        if ((v35 & 1) != 0)
        {
          v51 = v89;
          v52 = v101 + v89;
          if (v104 < v101 || v104 >= v52)
          {
            swift_arrayInitWithTakeFrontToBack();
            v53 = v98;
          }
          else
          {
            v53 = v98;
            if (v104 == v101)
              v50 = v101;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v54 = v101;
          v51 = v89;
          v55 = v103 + v89;
          if (v104 < v103 || v104 >= v55)
          {
            swift_arrayInitWithTakeFrontToBack();
            v53 = v98;
          }
          else
          {
            v53 = v98;
            if (v104 != v103)
              swift_arrayInitWithTakeBackToFront();
          }
          v103 = v55;
          v52 = v54;
        }
        v104 = v50 + v51;
        a4 = v103;
        if (v103 >= v90)
          break;
        a2 = v52;
      }
      while (v52 < v53);
    }
LABEL_59:
    sub_23DDA94B0(&v104, &v103, (uint64_t *)&v102);
    return 1;
  }
LABEL_63:
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD5DB64(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (double *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 1;
          v19 = v6 - 1;
          v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *v17 = *(v16 - 1);
            --v16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *v17 = v20;
            v24 = --v6;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *v7 = *v4;
          v23 = ++v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *v7 = *v6;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_23DDA94BC((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_23DDC6B0C();
  __break(1u);
  return result;
}

uint64_t sub_23DD5DDD0(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  __int128 *v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v53 = a1;
  v3 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v50 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_23DDC54C8();
  v6 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v52 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_256CFE4E8, (uint64_t (*)(uint64_t))sub_23DD601C0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v43 - v12;
  v14 = *(_QWORD *)(a2 + 64);
  v45 = a2 + 64;
  v15 = 1 << *(_BYTE *)(a2 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v46 = (unint64_t)(v15 + 63) >> 6;
  v44 = v46 - 1;
  v51 = a2;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  v55 = 0;
  v48 = v10;
  v49 = v6;
  v47 = v13;
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v21 = (v17 - 1) & v17;
      v22 = v20 | (v55 << 6);
      goto LABEL_8;
    }
    v27 = v55 + 1;
    if (__OFADD__(v55, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v27 < v46)
    {
      v28 = *(_QWORD *)(v45 + 8 * v27);
      if (v28)
        goto LABEL_12;
      v29 = v55 + 2;
      ++v55;
      if (v27 + 1 < v46)
      {
        v28 = *(_QWORD *)(v45 + 8 * v29);
        if (v28)
        {
          ++v27;
          goto LABEL_12;
        }
        v30 = v27 + 2;
        v55 = v27 + 1;
        if (v27 + 2 < v46)
          break;
      }
    }
LABEL_24:
    sub_23DD601C0();
    v26 = v31;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v10, 1, 1, v31);
    v21 = 0;
LABEL_25:
    sub_23DD60248((uint64_t)v10, (uint64_t)v13);
    sub_23DD601C0();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v13, 1, v26) == 1)
    {
      swift_release();
      return sub_23DDC6C5C();
    }
    v56 = v21;
    v57 = v19;
    v32 = *(int *)(v26 + 48);
    v33 = v52;
    v34 = v58;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v52, v13, v58);
    v35 = *(_QWORD *)&v13[v32];
    v36 = *((_QWORD *)v53 + 8);
    v37 = v53[1];
    v59 = *v53;
    v60 = v37;
    v38 = v53[3];
    v61 = v53[2];
    v62 = v38;
    v63 = v36;
    sub_23DCF535C(&qword_2543266C0, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], MEMORY[0x24BE401D8]);
    sub_23DDC6674();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v33, v34);
    v39 = *(_QWORD *)(v35 + 16);
    sub_23DDC6C5C();
    if (v39)
    {
      v40 = *(unsigned __int8 *)(v50 + 80);
      v54 = v35;
      v41 = v35 + ((v40 + 32) & ~v40);
      v42 = *(_QWORD *)(v50 + 72);
      do
      {
        sub_23DCF58EC(v41, (uint64_t)v5, type metadata accessor for IndividualOvernightMetricChartPoint);
        sub_23DDC53A8();
        sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
        sub_23DDC6674();
        sub_23DDC512C();
        sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
        sub_23DDC6674();
        sub_23DDC6674();
        sub_23DCF9010();
        sub_23DDC6674();
        sub_23DDC6674();
        sub_23DDC6674();
        if ((v5[*(int *)(v3 + 32) + 8] & 1) != 0)
        {
          sub_23DDC6C5C();
        }
        else
        {
          sub_23DDC6C5C();
          sub_23DDC6C74();
        }
        sub_23DDC6674();
        swift_bridgeObjectRetain();
        sub_23DDC6794();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_23DDC6794();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_23DDC6794();
        swift_bridgeObjectRelease();
        sub_23DCF59A8((uint64_t)v5, type metadata accessor for IndividualOvernightMetricChartPoint);
        v41 += v42;
        --v39;
      }
      while (v39);
      swift_bridgeObjectRelease();
      v10 = v48;
      v6 = v49;
      v13 = v47;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    result = sub_23DDC6C80();
    v17 = v56;
    v19 = result ^ v57;
  }
  v28 = *(_QWORD *)(v45 + 8 * v30);
  if (v28)
  {
    v27 += 2;
LABEL_12:
    v21 = (v28 - 1) & v28;
    v22 = __clz(__rbit64(v28)) + (v27 << 6);
    v55 = v27;
LABEL_8:
    v23 = v51;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v10, *(_QWORD *)(v51 + 48) + *(_QWORD *)(v6 + 72) * v22, v58);
    v24 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v22);
    sub_23DD601C0();
    v26 = v25;
    *(_QWORD *)&v10[*(int *)(v25 + 48)] = v24;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v10, 0, 1, v25);
    swift_bridgeObjectRetain();
    goto LABEL_25;
  }
  while (1)
  {
    v27 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v27 >= v46)
    {
      v55 = v44;
      goto LABEL_24;
    }
    v28 = *(_QWORD *)(v45 + 8 * v27);
    ++v30;
    if (v28)
      goto LABEL_12;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_23DD5E424(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a2 + 16);
  result = sub_23DDC6C5C();
  if (v7)
  {
    v9 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v11 = *(_QWORD *)(v4 + 72);
    do
    {
      sub_23DCF58EC(v9, (uint64_t)v6, type metadata accessor for IndividualOvernightMetricChartPoint);
      sub_23DDC53A8();
      sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
      sub_23DDC6674();
      sub_23DDC512C();
      sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
      sub_23DDC6674();
      sub_23DDC6674();
      sub_23DCF9010();
      sub_23DDC6674();
      sub_23DDC6674();
      sub_23DDC6674();
      if ((v6[*(int *)(v3 + 32) + 8] & 1) != 0)
      {
        sub_23DDC6C5C();
      }
      else
      {
        sub_23DDC6C5C();
        sub_23DDC6C74();
      }
      sub_23DDC54C8();
      sub_23DCF535C(&qword_2543266C0, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], MEMORY[0x24BE401D8]);
      sub_23DDC6674();
      swift_bridgeObjectRetain();
      sub_23DDC6794();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23DDC6794();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23DDC6794();
      swift_bridgeObjectRelease();
      result = sub_23DCF59A8((uint64_t)v6, type metadata accessor for IndividualOvernightMetricChartPoint);
      v9 += v11;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_23DD5E6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_23DDC6C5C();
  if (v3)
  {
    v5 = a2 + 32;
    do
    {
      v5 += 8;
      result = sub_23DDC6C74();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_23DD5E750(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for OvernightMetricsChartPoint();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  result = sub_23DDC6C5C();
  if (v8)
  {
    v10 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v16 = *(_QWORD *)(v5 + 72);
    do
    {
      sub_23DCF58EC(v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      sub_23DDC512C();
      sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
      sub_23DDC6674();
      v11 = &v7[*(int *)(v4 + 20)];
      sub_23DDC6674();
      sub_23DCF9010();
      sub_23DDC6674();
      v12 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      v13 = *(_QWORD *)&v11[v12[5]];
      swift_bridgeObjectRetain();
      sub_23DD5E424((uint64_t)a1, v13);
      swift_bridgeObjectRelease();
      sub_23DD5E6FC((uint64_t)a1, *(_QWORD *)&v11[v12[6]]);
      v14 = *(_QWORD *)&v11[v12[7]];
      swift_bridgeObjectRetain();
      sub_23DD5DDD0(a1, v14);
      swift_bridgeObjectRelease();
      if (v7[*(int *)(v4 + 24) + 16] == 1)
      {
        sub_23DDC6C68();
      }
      else
      {
        sub_23DDC6C68();
        sub_23DDC6C74();
        sub_23DDC6C74();
      }
      sub_23DDC6C68();
      sub_23DDC6C68();
      sub_23DDC6C68();
      swift_bridgeObjectRetain();
      sub_23DDC6794();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23DDC6794();
      swift_bridgeObjectRelease();
      result = sub_23DCF59A8((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      v10 += v16;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_23DD5E9E8()
{
  sub_23DDC6C74();
  return sub_23DDC6C74();
}

void sub_23DD5EA30(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_23DD602C0();
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v32 - v12;
  v14 = *(_QWORD *)(a4 + 64);
  v37 = a4 + 64;
  v15 = -1 << *(_BYTE *)(a4 + 32);
  if (-v15 < 64)
    v16 = ~(-1 << -(char)v15);
  else
    v16 = -1;
  v17 = v16 & v14;
  if (!a2)
  {
    v18 = 0;
LABEL_38:
    v31 = v37;
    *a1 = a4;
    a1[1] = v31;
    a1[2] = ~v15;
    a1[3] = v18;
    a1[4] = v17;
    return;
  }
  if (!a3)
  {
    v18 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v18 = 0;
  v19 = 0;
  v36 = (unint64_t)(63 - v15) >> 6;
  v33 = v36 - 1;
  v20 = a3;
  if (!v17)
    goto LABEL_9;
LABEL_8:
  v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v22 = v21 | (v18 << 6);
  while (1)
  {
    ++v19;
    v26 = *(_QWORD *)(a4 + 48);
    v27 = sub_23DDC53A8();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v10, v26 + *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72) * v22, v27);
    v28 = *(_QWORD *)(a4 + 56) + 16 * v22;
    v29 = *(_QWORD *)v28;
    LOBYTE(v28) = *(_BYTE *)(v28 + 8);
    v30 = &v10[*(int *)(v39 + 48)];
    *(_QWORD *)v30 = v29;
    v30[8] = v28;
    sub_23DCFBB58((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DD602C0);
    sub_23DCFBB58((uint64_t)v13, a2, (uint64_t (*)(_QWORD))sub_23DD602C0);
    if (v19 == v20)
      goto LABEL_37;
    a2 += *(_QWORD *)(v38 + 72);
    if (v17)
      goto LABEL_8;
LABEL_9:
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v23 >= v36)
      goto LABEL_33;
    v24 = *(_QWORD *)(v37 + 8 * v23);
    if (!v24)
      break;
LABEL_18:
    v17 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v18 = v23;
  }
  v18 += 2;
  if (v23 + 1 >= v36)
  {
    v17 = 0;
    v18 = v23;
    goto LABEL_37;
  }
  v24 = *(_QWORD *)(v37 + 8 * v18);
  if (v24)
    goto LABEL_14;
  v25 = v23 + 2;
  if (v23 + 2 >= v36)
    goto LABEL_33;
  v24 = *(_QWORD *)(v37 + 8 * v25);
  if (v24)
    goto LABEL_17;
  v18 = v23 + 3;
  if (v23 + 3 >= v36)
  {
    v17 = 0;
    v18 = v23 + 2;
    goto LABEL_37;
  }
  v24 = *(_QWORD *)(v37 + 8 * v18);
  if (v24)
  {
LABEL_14:
    v23 = v18;
    goto LABEL_18;
  }
  v25 = v23 + 4;
  if (v23 + 4 >= v36)
  {
LABEL_33:
    v17 = 0;
LABEL_37:
    v15 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v24 = *(_QWORD *)(v37 + 8 * v25);
  if (v24)
  {
LABEL_17:
    v23 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v23 >= v36)
    {
      v17 = 0;
      v18 = v33;
      goto LABEL_37;
    }
    v24 = *(_QWORD *)(v37 + 8 * v23);
    ++v25;
    if (v24)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
}

uint64_t _s15HealthBalanceUI26OvernightMetricsChartPointV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  double *v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  if ((sub_23DDC5108() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  if ((sub_23DD3AF1C(a1 + v4[5], a2 + v4[5]) & 1) == 0)
    return 0;
  v5 = v4[6];
  v6 = (double *)(a1 + v5);
  v7 = *(_BYTE *)(a1 + v5 + 16);
  v8 = a2 + v5;
  if ((v7 & 1) != 0)
  {
    if (!*(_BYTE *)(v8 + 16))
      return 0;
  }
  else
  {
    if ((*(_BYTE *)(v8 + 16) & 1) != 0)
      return 0;
    if (*v6 != *(double *)v8 || v6[1] != *(double *)(v8 + 8))
      return 0;
  }
  if (*(unsigned __int8 *)(a1 + v4[7]) != *(unsigned __int8 *)(a2 + v4[7])
    || *(unsigned __int8 *)(a1 + v4[8]) != *(unsigned __int8 *)(a2 + v4[8])
    || *(unsigned __int8 *)(a1 + v4[9]) != *(unsigned __int8 *)(a2 + v4[9]))
  {
    return 0;
  }
  v11 = v4[10];
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v12 == *v14 && v13 == v14[1];
  if (v15 || (v16 = sub_23DDC6C08(), result = 0, (v16 & 1) != 0))
  {
    v17 = v4[11];
    v18 = *(_QWORD *)(a1 + v17);
    v19 = *(_QWORD *)(a1 + v17 + 8);
    v20 = (_QWORD *)(a2 + v17);
    if (v18 == *v20 && v19 == v20[1])
      return 1;
    else
      return sub_23DDC6C08();
  }
  return result;
}

unint64_t sub_23DD5EE6C()
{
  unint64_t result;

  result = qword_256CFE498;
  if (!qword_256CFE498)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9F5C, &type metadata for OvernightMetricsChartPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFE498);
  }
  return result;
}

void sub_23DD5EEB0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DD5EE6C();
    v7 = a3(a1, &type metadata for OvernightMetricsChartPoint.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DD5EF0C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_23DCFF9E8();
    v8 = a2;
    result = MEMORY[0x242643BD8](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DD5EF68()
{
  return sub_23DCF535C(&qword_256CFE4C8, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t)&protocol conformance descriptor for OvernightMetricsChartPoint);
}

uint64_t sub_23DD5EF94()
{
  return sub_23DCF535C((unint64_t *)&qword_256CFC1E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
}

char *initializeBufferWithCopyOfBuffer for OvernightMetricsChartPoint(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC512C();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v8(&a1[v9], &a2[v9], v7);
    sub_23DCF9010();
    v8(&v10[*(int *)(v12 + 36)], &v11[*(int *)(v12 + 36)], v7);
    v13 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v10[v13[5]] = *(_QWORD *)&v11[v13[5]];
    *(_QWORD *)&v10[v13[6]] = *(_QWORD *)&v11[v13[6]];
    *(_QWORD *)&v10[v13[7]] = *(_QWORD *)&v11[v13[7]];
    v14 = a3[6];
    v15 = a3[7];
    v16 = &a1[v14];
    v17 = &a2[v14];
    *(_OWORD *)v16 = *(_OWORD *)v17;
    v16[16] = v17[16];
    a1[v15] = a2[v15];
    v18 = a3[9];
    a1[a3[8]] = a2[a3[8]];
    a1[v18] = a2[v18];
    v19 = a3[10];
    v20 = a3[11];
    v21 = &a1[v19];
    v22 = &a2[v19];
    v23 = *((_QWORD *)v22 + 1);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *((_QWORD *)v21 + 1) = v23;
    v24 = &a1[v20];
    v25 = &a2[v20];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for OvernightMetricsChartPoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v4 = sub_23DDC512C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v5(v6, v4);
  sub_23DCF9010();
  v5(v6 + *(int *)(v7 + 36), v4);
  type metadata accessor for IndividualOvernightMetricChartPointCollection();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsChartPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_23DCF9010();
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v12 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)(v9 + v12[5]) = *(_QWORD *)(v10 + v12[5]);
  *(_QWORD *)(v9 + v12[6]) = *(_QWORD *)(v10 + v12[6]);
  *(_QWORD *)(v9 + v12[7]) = *(_QWORD *)(v10 + v12[7]);
  v13 = a3[6];
  v14 = a3[7];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v17 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[10];
  v19 = a3[11];
  v20 = (_QWORD *)(a1 + v18);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = (_QWORD *)(a1 + v19);
  v24 = (_QWORD *)(a2 + v19);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OvernightMetricsChartPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_23DCF9010();
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v12 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)(v9 + v12[5]) = *(_QWORD *)(v10 + v12[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + v12[6]) = *(_QWORD *)(v10 + v12[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + v12[7]) = *(_QWORD *)(v10 + v12[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = (__int128 *)(a2 + v13);
  v16 = *v15;
  *(_BYTE *)(v14 + 16) = *((_BYTE *)v15 + 16);
  *(_OWORD *)v14 = v16;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v17 = a3[10];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[11];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for OvernightMetricsChartPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_23DCF9010();
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v12 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)(v9 + v12[5]) = *(_QWORD *)(v10 + v12[5]);
  *(_QWORD *)(v9 + v12[6]) = *(_QWORD *)(v10 + v12[6]);
  *(_QWORD *)(v9 + v12[7]) = *(_QWORD *)(v10 + v12[7]);
  v13 = a3[6];
  v14 = a3[7];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v17 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  return a1;
}

uint64_t assignWithTake for OvernightMetricsChartPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_23DDC512C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_23DCF9010();
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v12 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)(v9 + v12[5]) = *(_QWORD *)(v10 + v12[5]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + v12[6]) = *(_QWORD *)(v10 + v12[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + v12[7]) = *(_QWORD *)(v10 + v12[7]);
  swift_bridgeObjectRelease();
  v13 = a3[6];
  v14 = a3[7];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v17 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[10];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v23 = a3[11];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartPoint()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD5F754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_23DDC512C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 40) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartPoint()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD5F80C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_23DDC512C();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for IndividualOvernightMetricChartPointCollection();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 40) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_23DD5F8B4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23DDC512C();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for IndividualOvernightMetricChartPointCollection();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartPoint.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartPoint.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_23DD5FA38 + 4 * byte_23DDC9D2D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_23DD5FA6C + 4 * byte_23DDC9D28[v4]))();
}

uint64_t sub_23DD5FA6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD5FA74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DD5FA7CLL);
  return result;
}

uint64_t sub_23DD5FA88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DD5FA90);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_23DD5FA94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD5FA9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartPoint.CodingKeys()
{
  return &type metadata for OvernightMetricsChartPoint.CodingKeys;
}

unint64_t sub_23DD5FABC()
{
  unint64_t result;

  result = qword_256CFE4D0;
  if (!qword_256CFE4D0)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9F34, &type metadata for OvernightMetricsChartPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFE4D0);
  }
  return result;
}

unint64_t sub_23DD5FB04()
{
  unint64_t result;

  result = qword_256CFE4D8;
  if (!qword_256CFE4D8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9EA4, &type metadata for OvernightMetricsChartPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFE4D8);
  }
  return result;
}

unint64_t sub_23DD5FB4C()
{
  unint64_t result;

  result = qword_256CFE4E0;
  if (!qword_256CFE4E0)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC9ECC, &type metadata for OvernightMetricsChartPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFE4E0);
  }
  return result;
}

uint64_t sub_23DD5FB90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v2 = sub_23DDC54C8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v48 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  MEMORY[0x24BDAC7A8](v46);
  v45 = (uint64_t)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v47 = (uint64_t)&v37 - v8;
  v9 = (_QWORD *)MEMORY[0x24BEE4B00];
  v49 = (_QWORD *)MEMORY[0x24BEE4B00];
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    return (uint64_t)v9;
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v7 + 72);
  v44 = v12;
  v39 = v11 | 7;
  v40 = v14 + v12;
  v38 = xmmword_23DDC7F50;
  v41 = v3;
  v42 = v2;
  v43 = v14;
  while (1)
  {
    v16 = v47;
    sub_23DCF58EC(v13, v47, type metadata accessor for IndividualOvernightMetricChartPoint);
    v17 = v16 + *(int *)(v46 + 36);
    v18 = v48;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v48, v17, v2);
    v20 = sub_23DD76970(v18);
    v21 = v9[2];
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      break;
    v24 = v19;
    if (v9[3] < v23)
    {
      sub_23DD77608(v23, 1);
      v9 = v49;
      v25 = sub_23DD76970(v48);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_19;
      v20 = v25;
    }
    if ((v24 & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v48, v2);
      v9 = v49;
      v27 = v49[7];
      sub_23DCFBB58(v47, v45, type metadata accessor for IndividualOvernightMetricChartPoint);
      v28 = *(_QWORD *)(v27 + 8 * v20);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v27 + 8 * v20) = v28;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v28 = sub_23DD56C20(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
        *(_QWORD *)(v27 + 8 * v20) = v28;
      }
      v31 = *(_QWORD *)(v28 + 16);
      v30 = *(_QWORD *)(v28 + 24);
      if (v31 >= v30 >> 1)
      {
        v28 = sub_23DD56C20(v30 > 1, v31 + 1, 1, v28);
        *(_QWORD *)(v27 + 8 * v20) = v28;
      }
      *(_QWORD *)(v28 + 16) = v31 + 1;
      v15 = v43;
      sub_23DCFBB58(v45, v28 + v44 + v31 * v43, type metadata accessor for IndividualOvernightMetricChartPoint);
      v3 = v41;
      v2 = v42;
    }
    else
    {
      sub_23DCFB328(0, &qword_2543267C8, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = v38;
      sub_23DCFBB58(v47, v32 + v44, type metadata accessor for IndividualOvernightMetricChartPoint);
      v9[(v20 >> 6) + 8] |= 1 << v20;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v9[6] + *(_QWORD *)(v3 + 72) * v20, v48, v2);
      *(_QWORD *)(v9[7] + 8 * v20) = v32;
      v33 = v9[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
        goto LABEL_18;
      v9[2] = v35;
      v15 = v43;
    }
    v13 += v15;
    if (!--v10)
      return (uint64_t)v9;
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  result = sub_23DDC6C20();
  __break(1u);
  return result;
}

uint64_t sub_23DD5FEE8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000023DDCDB80 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023DDCDBA0 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023DDCDBC0 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023DDCDBE0 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023DDCDC00 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023DDCDC20 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023DDCDC40)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_23DDC6C08();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

void sub_23DD601C0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFE4F0)
  {
    sub_23DDC54C8();
    sub_23DCFB328(255, &qword_254326758, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFE4F0);
  }
}

uint64_t sub_23DD60248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DCFB328(0, &qword_256CFE4E8, (uint64_t (*)(uint64_t))sub_23DD601C0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD602A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23DD5B500(a1, v2[2], v2[3], v2[4], a2);
}

void sub_23DD602C0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_254326678)
  {
    sub_23DDC53A8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_254326678);
  }
}

uint64_t sub_23DD60328(uint64_t a1)
{
  uint64_t v2;

  sub_23DCFB328(0, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DD6037C()
{
  return swift_release();
}

uint64_t BalanceAccessibilityIdentifier.namespaced.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  sub_23DD95E24(v0);
  sub_23DD60410();
  sub_23DD48C48();
  v1 = sub_23DDC668C();
  swift_bridgeObjectRelease();
  return v1;
}

void sub_23DD60410()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFC758)
  {
    v0 = sub_23DDC67E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFC758);
  }
}

uint64_t BalanceAccessibilityIdentifier.init(trailingComponents:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for BalanceAccessibilityIdentifier()
{
  return &type metadata for BalanceAccessibilityIdentifier;
}

__n128 WarmupProgressCounter.init(progress:configuration:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __n128 *v10;
  __n128 result;
  __n128 v12;
  _QWORD v13[36];
  _BYTE __src[288];

  v12 = *a2;
  v5 = a2[1].n128_u64[0];
  v6 = a2[1].n128_u64[1];
  v7 = type metadata accessor for WarmupProgressCounter();
  v8 = (void *)(a3 + *(int *)(v7 + 24));
  v13[0] = swift_getKeyPath();
  sub_23DD50E00((uint64_t)v13);
  sub_23DD36810((uint64_t)v13, (uint64_t)__src);
  memcpy(v8, __src, 0x119uLL);
  v9 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a3, a1, v9);
  v10 = (__n128 *)(a3 + *(int *)(v7 + 20));
  result = v12;
  *v10 = v12;
  v10[1].n128_u64[0] = v5;
  v10[1].n128_u64[1] = v6;
  return result;
}

uint64_t type metadata accessor for WarmupProgressCounter()
{
  uint64_t result;

  result = qword_256CFE600;
  if (!qword_256CFE600)
    return swift_getSingletonMetadata();
  return result;
}

double WarmupProgressCounter.Configuration.fiveDayPillWidth.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void WarmupProgressCounter.Configuration.fiveDayPillWidth.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*WarmupProgressCounter.Configuration.fiveDayPillWidth.modify())()
{
  return nullsub_1;
}

double WarmupProgressCounter.Configuration.sevenDayPillWidth.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void WarmupProgressCounter.Configuration.sevenDayPillWidth.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*WarmupProgressCounter.Configuration.sevenDayPillWidth.modify())()
{
  return nullsub_1;
}

double WarmupProgressCounter.Configuration.strokeLineWidth.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void WarmupProgressCounter.Configuration.strokeLineWidth.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*WarmupProgressCounter.Configuration.strokeLineWidth.modify())()
{
  return nullsub_1;
}

double WarmupProgressCounter.Configuration.horizontalInset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void WarmupProgressCounter.Configuration.horizontalInset.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*WarmupProgressCounter.Configuration.horizontalInset.modify())()
{
  return nullsub_1;
}

uint64_t WarmupProgressCounter.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];

  v3 = type metadata accessor for WarmupProgressCounter();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  sub_23DD61280();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = sub_23DDC5DA4();
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  sub_23DD6191C();
  v10 = *(int *)(v9 + 44);
  result = sub_23DDC52B8();
  if (result < 1)
  {
    __break(1u);
  }
  else
  {
    v24[0] = &v8[v10];
    v24[2] = 1;
    v24[3] = result;
    swift_getKeyPath();
    v24[1] = v3;
    sub_23DCF58EC(v1, (uint64_t)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for WarmupProgressCounter);
    v12 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v13 = swift_allocObject();
    sub_23DCFBB58((uint64_t)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (uint64_t (*)(_QWORD))type metadata accessor for WarmupProgressCounter);
    sub_23DD61384();
    sub_23DD614F4(0, &qword_256CFE510, (void (*)(uint64_t))sub_23DD613E0);
    sub_23DD617B8();
    sub_23DD618DC(&qword_256CFE590, &qword_256CFE510, (void (*)(uint64_t))sub_23DD613E0);
    sub_23DDC6374();
    LOBYTE(v12) = sub_23DDC5F48();
    sub_23DDC5A74();
    v15 = v14;
    v17 = v16;
    v19 = v18;
    v21 = v20;
    sub_23DCF58EC((uint64_t)v8, a1, (uint64_t (*)(_QWORD))sub_23DD61280);
    sub_23DCF594C(0, &qword_256CFE5A0, (void (*)(uint64_t))sub_23DD61280);
    v23 = a1 + *(int *)(v22 + 36);
    *(_BYTE *)v23 = v12;
    *(_QWORD *)(v23 + 8) = v15;
    *(_QWORD *)(v23 + 16) = v17;
    *(_QWORD *)(v23 + 24) = v19;
    *(_QWORD *)(v23 + 32) = v21;
    *(_BYTE *)(v23 + 40) = 0;
    return sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DD61280);
  }
  return result;
}

uint64_t sub_23DD60874@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  sub_23DD61464();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v21 - v10);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v21 - v13;
  v15 = *a1;
  *v11 = sub_23DDC63D4();
  v11[1] = v16;
  sub_23DD627C4();
  sub_23DD609C0(v15, a2, (char *)v11 + *(int *)(v17 + 44));
  sub_23DCFBB58((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_23DD61464);
  LOBYTE(a2) = v15 == sub_23DDC52B8();
  sub_23DCF58EC((uint64_t)v14, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DD61464);
  sub_23DCF58EC((uint64_t)v8, a3, (uint64_t (*)(_QWORD))sub_23DD61464);
  sub_23DD613E0();
  v19 = a3 + *(int *)(v18 + 48);
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 0;
  *(_BYTE *)(v19 + 9) = a2;
  sub_23DCF59A8((uint64_t)v14, (uint64_t (*)(_QWORD))sub_23DD61464);
  return sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DD61464);
}

uint64_t sub_23DD609C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  unsigned int v36;
  void (*v37)(_QWORD, double);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  uint64_t v43;
  char *v44;
  __int128 v45;
  void (*v46)(char *, _QWORD, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  void (*v77)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  void (*v83)(char *, _QWORD, uint64_t);
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  _BYTE v103[280];
  uint64_t v104[35];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113[36];
  _BYTE v114[296];

  v80 = a2;
  v98 = a3;
  v99 = a1;
  v3 = sub_23DDC5DE0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v86 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD61678();
  v88 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v93 = (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF594C(0, &qword_256CFE548, (void (*)(uint64_t))sub_23DD61678);
  v92 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v91 = (uint64_t)&v79 - v9;
  sub_23DD615EC(0, &qword_256CFE540, &qword_256CFE548, (void (*)(uint64_t))sub_23DD61678, (uint64_t (*)(void))sub_23DD61720);
  v97 = v10;
  v95 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v96 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v90 = (char *)&v79 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v94 = (char *)&v79 - v15;
  v16 = sub_23DDC6350();
  MEMORY[0x24BDAC7A8](v16);
  v84 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v79 - v19;
  sub_23DCF5820();
  v22 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF594C(0, &qword_256CFC1A8, (void (*)(uint64_t))sub_23DCF5820);
  v82 = v25;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v79 - v26;
  sub_23DD615EC(0, &qword_256CFE538, &qword_256CFC1A8, (void (*)(uint64_t))sub_23DCF5820, (uint64_t (*)(void))sub_23DCF5AD8);
  v100 = v28;
  v102 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v85 = (char *)&v79 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v79 - v31;
  v34 = MEMORY[0x24BDAC7A8](v33);
  v101 = (char *)&v79 - v35;
  v36 = *MEMORY[0x24BDEEB68];
  v87 = v4;
  v37 = *(void (**)(_QWORD, double))(v4 + 104);
  v38 = v80;
  v81 = v36;
  v89 = v3;
  v83 = (void (*)(char *, _QWORD, uint64_t))v37;
  v37(v20, v34);
  if (sub_23DDC52D0() >= v99)
  {
    v41 = type metadata accessor for WarmupProgressCounter();
    memcpy(v114, (const void *)(v38 + *(int *)(v41 + 24)), 0x119uLL);
    sub_23DD144A8((uint64_t)v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
    sub_23DD35E8C(v104);
    sub_23DD144A8((uint64_t)v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CCE4);
    memcpy(v113, v104, 0x118uLL);
    v40 = v113[27];
    swift_retain();
    sub_23DCFE908(v113);
  }
  else
  {
    v39 = type metadata accessor for WarmupProgressCounter();
    memcpy(v114, (const void *)(v38 + *(int *)(v39 + 24)), 0x119uLL);
    sub_23DD144A8((uint64_t)v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
    sub_23DD35E8C(v104);
    sub_23DD144A8((uint64_t)v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CCE4);
    memcpy(v113, v104, 0x118uLL);
    v40 = v113[28];
    swift_retain();
    swift_retain();
    swift_retain();
    sub_23DCFE908(v113);
    swift_release();
    swift_release();
  }
  v42 = MEMORY[0x24BDF48E8];
  sub_23DCF58EC((uint64_t)v20, (uint64_t)v24, (uint64_t (*)(_QWORD))MEMORY[0x24BDF48E8]);
  *(_QWORD *)&v24[*(int *)(v22 + 52)] = v40;
  *(_WORD *)&v24[*(int *)(v22 + 56)] = 256;
  sub_23DCF59A8((uint64_t)v20, (uint64_t (*)(_QWORD))v42);
  sub_23DDC52B8();
  v43 = type metadata accessor for WarmupProgressCounter();
  sub_23DDC63D4();
  sub_23DDC5B34();
  sub_23DCF58EC((uint64_t)v24, (uint64_t)v27, (uint64_t (*)(_QWORD))sub_23DCF5820);
  v44 = &v27[*(int *)(v82 + 36)];
  v45 = v106;
  *(_OWORD *)v44 = v105;
  *((_OWORD *)v44 + 1) = v45;
  *((_OWORD *)v44 + 2) = v107;
  sub_23DCF59A8((uint64_t)v24, (uint64_t (*)(_QWORD))sub_23DCF5820);
  sub_23DDC52D0();
  sub_23DCF5AD8();
  sub_23DDC60F8();
  sub_23DD62838((uint64_t)v27, &qword_256CFC1A8, (void (*)(uint64_t))sub_23DCF5820);
  (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v101, v32, v100);
  v46 = v83;
  v47 = (uint64_t)v84;
  v48 = v89;
  v83(v84, v81, v89);
  memcpy(v113, (const void *)(v38 + *(int *)(v43 + 24)), 0x119uLL);
  sub_23DD144A8((uint64_t)v113, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CB9C);
  sub_23DD35E8C(v103);
  sub_23DD144A8((uint64_t)v113, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23DD0CCE4);
  memcpy(v104, v103, sizeof(v104));
  v49 = v104[26];
  swift_retain();
  sub_23DCFE908(v104);
  sub_23DDC5AB0();
  v50 = v108;
  v51 = v110;
  v52 = v111;
  v53 = v112;
  v54 = v93;
  sub_23DCF58EC(v47, v93, (uint64_t (*)(_QWORD))MEMORY[0x24BDF48E8]);
  v55 = v109;
  v56 = v86;
  v46(v86, *MEMORY[0x24BDEEB78], v48);
  LOBYTE(v46) = sub_23DDC5DD4();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v56, v48);
  v57 = COERCE_UNSIGNED_INT64(v108 * 0.5) & 0xFFFFFFFFFFFFFFFELL | ((v46 & 1) == 0);
  v58 = sub_23DDC63D4();
  v59 = v54 + *(int *)(v88 + 68);
  *(_QWORD *)v59 = v57;
  *(double *)(v59 + 8) = v50;
  *(_QWORD *)(v59 + 16) = v55;
  *(_QWORD *)(v59 + 24) = v51;
  *(_QWORD *)(v59 + 32) = v52;
  *(_QWORD *)(v59 + 40) = v53;
  *(_QWORD *)(v59 + 48) = v49;
  *(_WORD *)(v59 + 56) = 256;
  *(_QWORD *)(v59 + 64) = v58;
  *(_QWORD *)(v59 + 72) = v60;
  sub_23DCF59A8(v47, (uint64_t (*)(_QWORD))MEMORY[0x24BDF48E8]);
  sub_23DDC52B8();
  sub_23DDC63D4();
  sub_23DDC5B34();
  v61 = v91;
  sub_23DCF58EC(v54, v91, (uint64_t (*)(_QWORD))sub_23DD61678);
  v62 = (_OWORD *)(v61 + *(int *)(v92 + 36));
  v63 = *(_OWORD *)&v103[16];
  *v62 = *(_OWORD *)v103;
  v62[1] = v63;
  v62[2] = *(_OWORD *)&v103[32];
  sub_23DCF59A8(v54, (uint64_t (*)(_QWORD))sub_23DD61678);
  sub_23DD61720();
  v64 = v90;
  sub_23DDC60F8();
  sub_23DD62838(v61, &qword_256CFE548, (void (*)(uint64_t))sub_23DD61678);
  v66 = v94;
  v65 = v95;
  v67 = v64;
  v68 = v97;
  (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v94, v67, v97);
  v69 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
  v70 = v85;
  v71 = v100;
  v69(v85, v101, v100);
  v72 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  v73 = v96;
  v72(v96, v66, v68);
  v74 = v98;
  v69(v98, v70, v71);
  sub_23DD61540();
  v72(&v74[*(int *)(v75 + 48)], v73, v68);
  v76 = *(void (**)(char *, uint64_t))(v65 + 8);
  v76(v66, v68);
  v77 = *(void (**)(char *, uint64_t))(v102 + 8);
  v77(v101, v71);
  v76(v73, v68);
  return ((uint64_t (*)(char *, uint64_t))v77)(v70, v71);
}

BOOL _s15HealthBalanceUI21WarmupProgressCounterV13ConfigurationV2eeoiySbAE_AEtFZ_0(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

void sub_23DD61280()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE4F8)
  {
    sub_23DD612E0();
    sub_23DD61864();
    v0 = sub_23DDC6308();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE4F8);
  }
}

void sub_23DD612E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE500)
  {
    sub_23DD61384();
    sub_23DD614F4(255, &qword_256CFE510, (void (*)(uint64_t))sub_23DD613E0);
    sub_23DD617B8();
    v0 = sub_23DDC6380();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE500);
  }
}

void sub_23DD61384()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE508)
  {
    v0 = sub_23DDC66B0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE508);
  }
}

void sub_23DD613E0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFE518)
  {
    sub_23DD61464();
    sub_23DD0AA4C(255, &qword_256CFE578, MEMORY[0x24BDF4638], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFE518);
  }
}

void sub_23DD61464()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE520)
  {
    sub_23DD614F4(255, &qword_256CFE528, (void (*)(uint64_t))sub_23DD61540);
    sub_23DD618DC(&qword_256CFE570, &qword_256CFE528, (void (*)(uint64_t))sub_23DD61540);
    v0 = sub_23DDC6338();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE520);
  }
}

void sub_23DD614F4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DDC6434();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_23DD61540()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFE530)
  {
    sub_23DD615EC(255, &qword_256CFE538, &qword_256CFC1A8, (void (*)(uint64_t))sub_23DCF5820, (uint64_t (*)(void))sub_23DCF5AD8);
    sub_23DD615EC(255, &qword_256CFE540, &qword_256CFE548, (void (*)(uint64_t))sub_23DD61678, (uint64_t (*)(void))sub_23DD61720);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFE530);
  }
}

void sub_23DD615EC(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(void))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  if (!*a2)
  {
    sub_23DCF594C(255, a3, a4);
    v11[0] = v8;
    v11[1] = a5();
    v9 = MEMORY[0x242643B9C](a1, v11, MEMORY[0x24BDFAC10], 0);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_23DD61678()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE550)
  {
    sub_23DDC6350();
    sub_23DCF535C(&qword_256CFE558, (uint64_t (*)(uint64_t))MEMORY[0x24BDF48E8], MEMORY[0x24BDF48C8]);
    v0 = sub_23DDC5E70();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE550);
  }
}

unint64_t sub_23DD61720()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFE560;
  if (!qword_256CFE560)
  {
    sub_23DCF594C(255, &qword_256CFE548, (void (*)(uint64_t))sub_23DD61678);
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFE568, (uint64_t (*)(uint64_t))sub_23DD61678, MEMORY[0x24BDEFA70]);
    v3[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFE560);
  }
  return result;
}

unint64_t sub_23DD617B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_256CFE580;
  if (!qword_256CFE580)
  {
    sub_23DD61384();
    v2 = v1;
    v3 = sub_23DD61820();
    v4[0] = MEMORY[0x24BEE17A8];
    v4[1] = v3;
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE0908], v2, v4);
    atomic_store(result, (unint64_t *)&qword_256CFE580);
  }
  return result;
}

unint64_t sub_23DD61820()
{
  unint64_t result;

  result = qword_254326738;
  if (!qword_254326738)
  {
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_254326738);
  }
  return result;
}

unint64_t sub_23DD61864()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256CFE588;
  if (!qword_256CFE588)
  {
    sub_23DD612E0();
    v2 = v1;
    v3 = sub_23DD618DC(&qword_256CFE590, &qword_256CFE510, (void (*)(uint64_t))sub_23DD613E0);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF4A08], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CFE588);
  }
  return result;
}

uint64_t sub_23DD618DC(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_23DD614F4(255, a2, a3);
    result = MEMORY[0x242643BD8](MEMORY[0x24BDF5428], v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23DD6191C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE598)
  {
    sub_23DD612E0();
    v0 = sub_23DDC5B94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE598);
  }
}

uint64_t sub_23DD61980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v1 = type metadata accessor for WarmupProgressCounter();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v3 + *(int *)(v1 + 24);
  v8 = *(_OWORD *)(v5 + 240);
  v9 = *(_OWORD *)(v5 + 256);
  v7 = *(_OWORD *)(v5 + 208);
  sub_23DD0CCE4(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), *(_QWORD *)(v5 + 96), *(_QWORD *)(v5 + 104), *(_QWORD *)(v5 + 112), *(_QWORD *)(v5 + 120), *(_QWORD *)(v5 + 128), *(_QWORD *)(v5 + 136), *(_QWORD *)(v5 + 144),
    *(_QWORD *)(v5 + 152),
    *(_QWORD *)(v5 + 160),
    *(_QWORD *)(v5 + 168),
    *(_QWORD *)(v5 + 176),
    *(_QWORD *)(v5 + 184),
    *(_QWORD *)(v5 + 192),
    *(_QWORD *)(v5 + 200),
    v7,
    *((uint64_t *)&v7 + 1),
    *(_QWORD *)(v5 + 224),
    *(_QWORD *)(v5 + 232),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    *(_QWORD *)(v5 + 272),
    *(_BYTE *)(v5 + 280));
  return swift_deallocObject();
}

uint64_t sub_23DD61A68@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WarmupProgressCounter() - 8) + 80);
  return sub_23DD60874(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_23DD61AB4()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *initializeBufferWithCopyOfBuffer for WarmupProgressCounter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    v17 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC52DC();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (_OWORD *)((char *)a1 + v8);
    v11 = (_OWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v47 = *(_QWORD *)((char *)a2 + v9 + 24);
    v48 = *(_QWORD *)((char *)a2 + v9 + 16);
    v45 = *(_QWORD *)((char *)a2 + v9 + 40);
    v46 = *(_QWORD *)((char *)a2 + v9 + 32);
    v43 = *(_QWORD *)((char *)a2 + v9 + 56);
    v44 = *(_QWORD *)((char *)a2 + v9 + 48);
    v53 = *(_QWORD *)((char *)a2 + v9 + 64);
    v20 = *(_QWORD *)((char *)a2 + v9 + 80);
    v21 = *(_QWORD *)((char *)a2 + v9 + 88);
    v22 = *(_QWORD *)((char *)a2 + v9 + 96);
    v23 = *(_QWORD *)((char *)a2 + v9 + 104);
    v24 = *(_QWORD *)((char *)a2 + v9 + 112);
    v26 = *(_QWORD *)((char *)a2 + v9 + 120);
    v27 = *(_QWORD *)((char *)a2 + v9 + 128);
    v28 = *(_QWORD *)((char *)a2 + v9 + 136);
    v29 = *(_QWORD *)((char *)a2 + v9 + 144);
    v30 = *(_QWORD *)((char *)a2 + v9 + 152);
    v31 = *(_QWORD *)((char *)a2 + v9 + 160);
    v32 = *(_QWORD *)((char *)a2 + v9 + 168);
    v33 = *(_QWORD *)((char *)a2 + v9 + 176);
    v34 = *(_QWORD *)((char *)a2 + v9 + 184);
    v35 = *(_QWORD *)((char *)a2 + v9 + 192);
    v36 = *(_QWORD *)((char *)a2 + v9 + 200);
    v37 = *(_QWORD *)((char *)a2 + v9 + 208);
    v38 = *(_QWORD *)((char *)a2 + v9 + 216);
    v39 = *(_QWORD *)((char *)a2 + v9 + 224);
    v25 = a1;
    v40 = *(_QWORD *)((char *)a2 + v9 + 232);
    v41 = *(_QWORD *)((char *)a2 + v9 + 240);
    v42 = *(_QWORD *)((char *)a2 + v9 + 248);
    v49 = *(_QWORD *)((char *)a2 + v9 + 256);
    v50 = *(_QWORD *)((char *)a2 + v9 + 264);
    v51 = *(_QWORD *)((char *)a2 + v9 + 272);
    v52 = *((_BYTE *)a2 + v9 + 280);
    v14 = *(_QWORD *)((char *)a2 + v9 + 72);
    v15 = *(_QWORD *)((char *)a2 + v9);
    v16 = *(_QWORD *)((char *)a2 + v9 + 8);
    sub_23DD0CB9C(v15, v16, v48, v47, v46, v45, v44, v43, v53, v14, v20, v21, v22, v23, v24, v26, v27, v28, v29,
      v30,
      v31,
      v32,
      v33,
      v34,
      v35,
      v36,
      v37,
      v38,
      v39,
      v40,
      v41,
      v42,
      v49,
      v50,
      v51,
      v52);
    *(_QWORD *)v13 = v15;
    *((_QWORD *)v13 + 1) = v16;
    *((_QWORD *)v13 + 2) = v48;
    *((_QWORD *)v13 + 3) = v47;
    *((_QWORD *)v13 + 4) = v46;
    *((_QWORD *)v13 + 5) = v45;
    *((_QWORD *)v13 + 6) = v44;
    *((_QWORD *)v13 + 7) = v43;
    *((_QWORD *)v13 + 8) = v53;
    *((_QWORD *)v13 + 9) = v14;
    *((_QWORD *)v13 + 10) = v20;
    *((_QWORD *)v13 + 11) = v21;
    *((_QWORD *)v13 + 12) = v22;
    *((_QWORD *)v13 + 13) = v23;
    v17 = v25;
    *((_QWORD *)v13 + 14) = v24;
    *((_QWORD *)v13 + 15) = v26;
    *((_QWORD *)v13 + 16) = v27;
    *((_QWORD *)v13 + 17) = v28;
    *((_QWORD *)v13 + 18) = v29;
    *((_QWORD *)v13 + 19) = v30;
    *((_QWORD *)v13 + 20) = v31;
    *((_QWORD *)v13 + 21) = v32;
    *((_QWORD *)v13 + 22) = v33;
    *((_QWORD *)v13 + 23) = v34;
    *((_QWORD *)v13 + 24) = v35;
    *((_QWORD *)v13 + 25) = v36;
    *((_QWORD *)v13 + 26) = v37;
    *((_QWORD *)v13 + 27) = v38;
    *((_QWORD *)v13 + 28) = v39;
    *((_QWORD *)v13 + 29) = v40;
    *((_QWORD *)v13 + 30) = v41;
    *((_QWORD *)v13 + 31) = v42;
    *((_QWORD *)v13 + 32) = v49;
    *((_QWORD *)v13 + 33) = v50;
    *((_QWORD *)v13 + 34) = v51;
    v13[280] = v52;
  }
  return v17;
}

uint64_t destroy for WarmupProgressCounter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v8 = *(_OWORD *)(v5 + 240);
  v9 = *(_OWORD *)(v5 + 256);
  v7 = *(_OWORD *)(v5 + 208);
  return sub_23DD0CCE4(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), *(_QWORD *)(v5 + 96), *(_QWORD *)(v5 + 104), *(_QWORD *)(v5 + 112), *(_QWORD *)(v5 + 120), *(_QWORD *)(v5 + 128), *(_QWORD *)(v5 + 136), *(_QWORD *)(v5 + 144),
           *(_QWORD *)(v5 + 152),
           *(_QWORD *)(v5 + 160),
           *(_QWORD *)(v5 + 168),
           *(_QWORD *)(v5 + 176),
           *(_QWORD *)(v5 + 184),
           *(_QWORD *)(v5 + 192),
           *(_QWORD *)(v5 + 200),
           v7,
           *((uint64_t *)&v7 + 1),
           *(_QWORD *)(v5 + 224),
           *(_QWORD *)(v5 + 232),
           v8,
           *((uint64_t *)&v8 + 1),
           v9,
           *((uint64_t *)&v9 + 1),
           *(_QWORD *)(v5 + 272),
           *(_BYTE *)(v5 + 280));
}

uint64_t initializeWithCopy for WarmupProgressCounter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  v6 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v51 = a1;
  v9 = (_OWORD *)(a1 + v7);
  v10 = (_OWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  v42 = *(_QWORD *)(a2 + v8 + 24);
  v45 = *(_QWORD *)(a2 + v8 + 40);
  v46 = *(_QWORD *)(a2 + v8 + 32);
  v43 = *(_QWORD *)(a2 + v8 + 56);
  v44 = *(_QWORD *)(a2 + v8 + 48);
  v19 = *(_QWORD *)(a2 + v8 + 72);
  v20 = *(_QWORD *)(a2 + v8 + 80);
  v21 = *(_QWORD *)(a2 + v8 + 88);
  v22 = *(_QWORD *)(a2 + v8 + 96);
  v23 = *(_QWORD *)(a2 + v8 + 104);
  v24 = *(_QWORD *)(a2 + v8 + 112);
  v25 = *(_QWORD *)(a2 + v8 + 120);
  v26 = *(_QWORD *)(a2 + v8 + 128);
  v27 = *(_QWORD *)(a2 + v8 + 136);
  v28 = *(_QWORD *)(a2 + v8 + 144);
  v29 = *(_QWORD *)(a2 + v8 + 152);
  v30 = *(_QWORD *)(a2 + v8 + 160);
  v31 = *(_QWORD *)(a2 + v8 + 168);
  v32 = *(_QWORD *)(a2 + v8 + 176);
  v33 = *(_QWORD *)(a2 + v8 + 184);
  v34 = *(_QWORD *)(a2 + v8 + 192);
  v35 = *(_QWORD *)(a2 + v8 + 200);
  v36 = *(_QWORD *)(a2 + v8 + 208);
  v37 = *(_QWORD *)(a2 + v8 + 216);
  v38 = *(_QWORD *)(a2 + v8 + 224);
  v39 = *(_QWORD *)(a2 + v8 + 232);
  v40 = *(_QWORD *)(a2 + v8 + 240);
  v41 = *(_QWORD *)(a2 + v8 + 248);
  v47 = *(_QWORD *)(a2 + v8 + 256);
  v48 = *(_QWORD *)(a2 + v8 + 264);
  v49 = *(_QWORD *)(a2 + v8 + 272);
  v50 = *(_BYTE *)(a2 + v8 + 280);
  v14 = *(_QWORD *)(a2 + v8 + 64);
  v16 = *(_QWORD *)(a2 + v8);
  v15 = *(_QWORD *)(a2 + v8 + 8);
  v17 = *(_QWORD *)(a2 + v8 + 16);
  sub_23DD0CB9C(v16, v15, *(_QWORD *)(v13 + 16), v42, v46, v45, v44, v43, v14, v19, v20, v21, v22, v23, v24, *(_QWORD *)(v13 + 120), *(_QWORD *)(v13 + 128), *(_QWORD *)(v13 + 136), *(_QWORD *)(v13 + 144),
    *(_QWORD *)(v13 + 152),
    *(_QWORD *)(v13 + 160),
    *(_QWORD *)(v13 + 168),
    *(_QWORD *)(v13 + 176),
    *(_QWORD *)(v13 + 184),
    *(_QWORD *)(v13 + 192),
    *(_QWORD *)(v13 + 200),
    *(_QWORD *)(v13 + 208),
    *(_QWORD *)(v13 + 216),
    *(_QWORD *)(v13 + 224),
    *(_QWORD *)(v13 + 232),
    *(_QWORD *)(v13 + 240),
    *(_QWORD *)(v13 + 248),
    *(_QWORD *)(v13 + 256),
    *(_QWORD *)(v13 + 264),
    *(_QWORD *)(v13 + 272),
    *(_BYTE *)(v13 + 280));
  *(_QWORD *)v12 = v16;
  *(_QWORD *)(v12 + 8) = v15;
  *(_QWORD *)(v12 + 16) = v17;
  *(_QWORD *)(v12 + 24) = v42;
  *(_QWORD *)(v12 + 32) = v46;
  *(_QWORD *)(v12 + 40) = v45;
  *(_QWORD *)(v12 + 48) = v44;
  *(_QWORD *)(v12 + 56) = v43;
  *(_QWORD *)(v12 + 64) = v14;
  *(_QWORD *)(v12 + 72) = v19;
  *(_QWORD *)(v12 + 80) = v20;
  *(_QWORD *)(v12 + 88) = v21;
  *(_QWORD *)(v12 + 96) = v22;
  *(_QWORD *)(v12 + 104) = v23;
  *(_QWORD *)(v12 + 112) = v24;
  *(_QWORD *)(v12 + 120) = v25;
  *(_QWORD *)(v12 + 128) = v26;
  *(_QWORD *)(v12 + 136) = v27;
  *(_QWORD *)(v12 + 144) = v28;
  *(_QWORD *)(v12 + 152) = v29;
  *(_QWORD *)(v12 + 160) = v30;
  *(_QWORD *)(v12 + 168) = v31;
  *(_QWORD *)(v12 + 176) = v32;
  *(_QWORD *)(v12 + 184) = v33;
  *(_QWORD *)(v12 + 192) = v34;
  *(_QWORD *)(v12 + 200) = v35;
  *(_QWORD *)(v12 + 208) = v36;
  *(_QWORD *)(v12 + 216) = v37;
  *(_QWORD *)(v12 + 224) = v38;
  *(_QWORD *)(v12 + 232) = v39;
  *(_QWORD *)(v12 + 240) = v40;
  *(_QWORD *)(v12 + 248) = v41;
  *(_QWORD *)(v12 + 256) = v47;
  *(_QWORD *)(v12 + 264) = v48;
  *(_QWORD *)(v12 + 272) = v49;
  *(_BYTE *)(v12 + 280) = v50;
  return v51;
}

uint64_t assignWithCopy for WarmupProgressCounter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v6 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v65 = a1;
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v72 = *(_QWORD *)(v12 + 8);
  v73 = *(_QWORD *)v12;
  v70 = *(_QWORD *)(v12 + 24);
  v71 = *(_QWORD *)(v12 + 16);
  v68 = *(_QWORD *)(v12 + 40);
  v69 = *(_QWORD *)(v12 + 32);
  v66 = *(_QWORD *)(v12 + 56);
  v67 = *(_QWORD *)(v12 + 48);
  v46 = *(_QWORD *)(v12 + 72);
  v47 = *(_QWORD *)(v12 + 80);
  v48 = *(_QWORD *)(v12 + 88);
  v49 = *(_QWORD *)(v12 + 96);
  v50 = *(_QWORD *)(v12 + 104);
  v51 = *(_QWORD *)(v12 + 112);
  v52 = *(_QWORD *)(v12 + 120);
  v13 = *(_QWORD *)(v12 + 136);
  v53 = *(_QWORD *)(v12 + 128);
  v54 = *(_QWORD *)(v12 + 144);
  v14 = *(_QWORD *)(v12 + 152);
  v15 = *(_QWORD *)(v12 + 160);
  v16 = *(_QWORD *)(v12 + 168);
  v17 = *(_QWORD *)(v12 + 176);
  v18 = *(_QWORD *)(v12 + 184);
  v19 = *(_QWORD *)(v12 + 192);
  v20 = *(_QWORD *)(v12 + 200);
  v55 = *(_QWORD *)(v12 + 208);
  v56 = *(_QWORD *)(v12 + 216);
  v57 = *(_QWORD *)(v12 + 224);
  v58 = *(_QWORD *)(v12 + 232);
  v59 = *(_QWORD *)(v12 + 240);
  v60 = *(_QWORD *)(v12 + 248);
  v61 = *(_QWORD *)(v12 + 256);
  v62 = *(_QWORD *)(v12 + 264);
  v63 = *(_QWORD *)(v12 + 272);
  v64 = *(_BYTE *)(v12 + 280);
  v21 = *(_QWORD *)(v12 + 64);
  sub_23DD0CB9C(*(_QWORD *)v12, v72, v71, v70, v69, v68, v67, v66, v21, v46, v47, v48, v49, v50, v51, v52, v53, v13, v54,
    v14,
    v15,
    v16,
    v17,
    v18,
    v19,
    v20,
    v55,
    v56,
    v57,
    v58,
    v59,
    v60,
    v61,
    v62,
    v63,
    v64);
  v22 = *(_QWORD *)v11;
  v23 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)v11 = v73;
  *(_QWORD *)(v11 + 8) = v72;
  v24 = *(_QWORD *)(v11 + 16);
  v25 = *(_QWORD *)(v11 + 24);
  *(_QWORD *)(v11 + 16) = v71;
  *(_QWORD *)(v11 + 24) = v70;
  v26 = *(_QWORD *)(v11 + 32);
  v27 = *(_QWORD *)(v11 + 40);
  *(_QWORD *)(v11 + 32) = v69;
  *(_QWORD *)(v11 + 40) = v68;
  v28 = *(_QWORD *)(v11 + 48);
  v29 = *(_QWORD *)(v11 + 56);
  *(_QWORD *)(v11 + 48) = v67;
  v30 = *(_OWORD *)(v11 + 64);
  v31 = *(_OWORD *)(v11 + 80);
  *(_QWORD *)(v11 + 56) = v66;
  *(_QWORD *)(v11 + 64) = v21;
  *(_QWORD *)(v11 + 72) = v46;
  *(_QWORD *)(v11 + 80) = v47;
  *(_QWORD *)(v11 + 88) = v48;
  v32 = *(_OWORD *)(v11 + 96);
  v33 = *(_OWORD *)(v11 + 112);
  *(_QWORD *)(v11 + 96) = v49;
  *(_QWORD *)(v11 + 104) = v50;
  *(_QWORD *)(v11 + 112) = v51;
  *(_QWORD *)(v11 + 120) = v52;
  v34 = *(_OWORD *)(v11 + 128);
  v35 = *(_OWORD *)(v11 + 144);
  *(_QWORD *)(v11 + 128) = v53;
  *(_QWORD *)(v11 + 136) = v13;
  *(_QWORD *)(v11 + 144) = v54;
  *(_QWORD *)(v11 + 152) = v14;
  v36 = *(_OWORD *)(v11 + 160);
  v37 = *(_OWORD *)(v11 + 176);
  *(_QWORD *)(v11 + 160) = v15;
  *(_QWORD *)(v11 + 168) = v16;
  *(_QWORD *)(v11 + 176) = v17;
  *(_QWORD *)(v11 + 184) = v18;
  v38 = *(_OWORD *)(v11 + 192);
  v39 = *(_OWORD *)(v11 + 208);
  *(_QWORD *)(v11 + 192) = v19;
  *(_QWORD *)(v11 + 200) = v20;
  *(_QWORD *)(v11 + 208) = v55;
  *(_QWORD *)(v11 + 216) = v56;
  v40 = *(_OWORD *)(v11 + 224);
  v41 = *(_OWORD *)(v11 + 240);
  *(_QWORD *)(v11 + 224) = v57;
  *(_QWORD *)(v11 + 232) = v58;
  *(_QWORD *)(v11 + 240) = v59;
  *(_QWORD *)(v11 + 248) = v60;
  v42 = *(_OWORD *)(v11 + 256);
  *(_QWORD *)(v11 + 256) = v61;
  *(_QWORD *)(v11 + 264) = v62;
  v43 = *(_QWORD *)(v11 + 272);
  *(_QWORD *)(v11 + 272) = v63;
  v44 = *(_BYTE *)(v11 + 280);
  *(_BYTE *)(v11 + 280) = v64;
  sub_23DD0CCE4(v22, v23, v24, v25, v26, v27, v28, v29, v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35,
    *((uint64_t *)&v35 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v39,
    *((uint64_t *)&v39 + 1),
    v40,
    *((uint64_t *)&v40 + 1),
    v41,
    *((uint64_t *)&v41 + 1),
    v42,
    *((uint64_t *)&v42 + 1),
    v43,
    v44);
  return v65;
}

uint64_t initializeWithTake for WarmupProgressCounter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;

  v6 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_OWORD *)(a1 + v7);
  v10 = (_OWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  memcpy((void *)(a1 + v8), (const void *)(a2 + v8), 0x119uLL);
  return a1;
}

uint64_t assignWithTake for WarmupProgressCounter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v6 = sub_23DDC52DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_OWORD *)(a1 + v7);
  v10 = (_OWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  v14 = *(_QWORD *)(v13 + 272);
  v15 = *(_BYTE *)(v13 + 280);
  v16 = *(_QWORD *)v12;
  v17 = *(_QWORD *)(v12 + 8);
  v18 = *(_QWORD *)(v12 + 16);
  v19 = *(_QWORD *)(v12 + 24);
  v20 = *(_QWORD *)(v12 + 32);
  v21 = *(_QWORD *)(v12 + 40);
  v22 = *(_QWORD *)(v12 + 48);
  v23 = *(_QWORD *)(v12 + 56);
  v24 = *(_OWORD *)(v12 + 64);
  v25 = *(_OWORD *)(v12 + 80);
  v26 = *(_OWORD *)(v12 + 96);
  v27 = *(_OWORD *)(v12 + 112);
  v28 = *(_OWORD *)(v12 + 128);
  v29 = *(_OWORD *)(v12 + 144);
  v30 = *(_OWORD *)(v12 + 160);
  v31 = *(_OWORD *)(v12 + 176);
  v32 = *(_OWORD *)(v12 + 192);
  v33 = *(_OWORD *)(v12 + 208);
  v34 = *(_OWORD *)(v12 + 224);
  v35 = *(_OWORD *)(v12 + 240);
  v36 = *(_OWORD *)(v12 + 256);
  v37 = *(_QWORD *)(v12 + 272);
  v38 = *(_BYTE *)(v12 + 280);
  v39 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v39;
  v40 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(v12 + 48) = v40;
  v41 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(v12 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(v12 + 80) = v41;
  v42 = *(_OWORD *)(v13 + 112);
  *(_OWORD *)(v12 + 96) = *(_OWORD *)(v13 + 96);
  *(_OWORD *)(v12 + 112) = v42;
  v43 = *(_OWORD *)(v13 + 144);
  *(_OWORD *)(v12 + 128) = *(_OWORD *)(v13 + 128);
  *(_OWORD *)(v12 + 144) = v43;
  v44 = *(_OWORD *)(v13 + 176);
  *(_OWORD *)(v12 + 160) = *(_OWORD *)(v13 + 160);
  *(_OWORD *)(v12 + 176) = v44;
  v45 = *(_OWORD *)(v13 + 208);
  *(_OWORD *)(v12 + 192) = *(_OWORD *)(v13 + 192);
  *(_OWORD *)(v12 + 208) = v45;
  v46 = *(_OWORD *)(v13 + 240);
  *(_OWORD *)(v12 + 224) = *(_OWORD *)(v13 + 224);
  *(_OWORD *)(v12 + 240) = v46;
  *(_OWORD *)(v12 + 256) = *(_OWORD *)(v13 + 256);
  *(_QWORD *)(v12 + 272) = v14;
  *(_BYTE *)(v12 + 280) = v15;
  sub_23DD0CCE4(v16, v17, v18, v19, v20, v21, v22, v23, v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v37,
    v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for WarmupProgressCounter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD6254C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_23DDC52DC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 280);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WarmupProgressCounter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD625D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23DDC52DC();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24) + 280) = -(char)a2;
  return result;
}

uint64_t sub_23DD62650()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC52DC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WarmupProgressCounter.Configuration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WarmupProgressCounter.Configuration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for WarmupProgressCounter.Configuration()
{
  return &type metadata for WarmupProgressCounter.Configuration;
}

unint64_t sub_23DD6272C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFE640;
  if (!qword_256CFE640)
  {
    sub_23DCF594C(255, &qword_256CFE5A0, (void (*)(uint64_t))sub_23DD61280);
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFE648, (uint64_t (*)(uint64_t))sub_23DD61280, MEMORY[0x24BDF4498]);
    v3[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242643BD8](MEMORY[0x24BDED308], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFE640);
  }
  return result;
}

void sub_23DD627C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE650)
  {
    sub_23DD614F4(255, &qword_256CFE528, (void (*)(uint64_t))sub_23DD61540);
    v0 = sub_23DDC5B94();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE650);
  }
}

uint64_t sub_23DD62838(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_23DCF594C(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void static Color.balanceBlue.getter()
{
  sub_23DD628D0(&qword_256CFC098, (id *)&qword_256CFE658);
}

void static Color.balancePink.getter()
{
  sub_23DD628D0(&qword_256CFC0A8, (id *)&qword_256CFE668);
}

void static Color.balancePurple.getter()
{
  sub_23DD628D0(&qword_256CFC0A0, (id *)&qword_256CFE660);
}

void sub_23DD628D0(_QWORD *a1, id *a2)
{
  id v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  JUMPOUT(0x242642C18);
}

uint64_t static Color.balanceBackgroundBlue.getter()
{
  return sub_23DD62960(&qword_256CFC0C0, (uint64_t)qword_256D06580);
}

uint64_t static Color.balanceBackgroundPurple.getter()
{
  return sub_23DD62960(&qword_256CFC0D0, (uint64_t)qword_256D065B0);
}

uint64_t static Color.balanceBackgroundPink.getter()
{
  return sub_23DD62960(&qword_256CFC0C8, (uint64_t)qword_256D06598);
}

uint64_t sub_23DD62960(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = sub_23DDC5774();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v4, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  return sub_23DDC626C();
}

uint64_t sub_23DD62A14(uint64_t a1)
{
  return sub_23DD62B2C(a1, (uint64_t)sub_23DD62A30, (uint64_t)&block_descriptor_6, &qword_256CFE658);
}

id sub_23DD62A30(void *a1)
{
  id v2;
  double v3;
  double v4;
  double v5;
  id v6;

  if (objc_msgSend(a1, sel_accessibilityContrast) == (id)1)
  {
    v2 = objc_allocWithZone(MEMORY[0x24BEBD4B8]);
    v3 = 0.094;
    v4 = 0.427;
    v5 = 0.788;
  }
  else
  {
    v6 = objc_msgSend(a1, sel_userInterfaceStyle);
    v2 = objc_allocWithZone(MEMORY[0x24BEBD4B8]);
    if (v6 == (id)2)
    {
      v3 = 0.333;
      v4 = 0.682;
      v5 = 1.0;
    }
    else
    {
      v3 = 0.243;
      v4 = 0.592;
      v5 = 0.973;
    }
  }
  return objc_msgSend(v2, sel_initWithRed_green_blue_alpha_, v3, v4, v5, 1.0);
}

id static UIColor.balanceBlue.getter()
{
  return sub_23DD62D14(&qword_256CFC098, (id *)&qword_256CFE658);
}

uint64_t sub_23DD62B10(uint64_t a1)
{
  return sub_23DD62B2C(a1, (uint64_t)sub_23DD62BD0, (uint64_t)&block_descriptor_0, &qword_256CFE660);
}

uint64_t sub_23DD62B2C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  void *v8;
  id v9;
  uint64_t result;
  _QWORD v11[6];

  v7 = objc_allocWithZone(MEMORY[0x24BEBD4B8]);
  v11[4] = a2;
  v11[5] = 0;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = sub_23DD62D4C;
  v11[3] = a3;
  v8 = _Block_copy(v11);
  v9 = objc_msgSend(v7, sel_initWithDynamicProvider_, v8);
  _Block_release(v8);
  result = swift_release();
  *a4 = v9;
  return result;
}

id sub_23DD62BD0(void *a1)
{
  id v1;
  id v2;
  double v3;
  double v4;
  double v5;

  v1 = objc_msgSend(a1, sel_accessibilityContrast);
  v2 = objc_allocWithZone(MEMORY[0x24BEBD4B8]);
  if (v1 == (id)1)
  {
    v3 = 0.612;
    v4 = 0.349;
    v5 = 0.709;
  }
  else
  {
    v3 = 0.729;
    v4 = 0.443;
    v5 = 1.0;
  }
  return objc_msgSend(v2, sel_initWithRed_green_blue_alpha_, v3, v4, v5, 1.0);
}

id static UIColor.balancePurple.getter()
{
  return sub_23DD62D14(&qword_256CFC0A0, (id *)&qword_256CFE660);
}

uint64_t sub_23DD62C64(uint64_t a1)
{
  return sub_23DD62B2C(a1, (uint64_t)sub_23DD62C80, (uint64_t)&block_descriptor_3, &qword_256CFE668);
}

id sub_23DD62C80(void *a1)
{
  id v1;
  id v2;
  double v3;
  double v4;
  double v5;

  v1 = objc_msgSend(a1, sel_accessibilityContrast);
  v2 = objc_allocWithZone(MEMORY[0x24BEBD4B8]);
  if (v1 == (id)1)
  {
    v3 = 0.8;
    v4 = 0.129;
    v5 = 0.694;
  }
  else
  {
    v4 = 0.424;
    v5 = 0.898;
    v3 = 1.0;
  }
  return objc_msgSend(v2, sel_initWithRed_green_blue_alpha_, v3, v4, v5, 1.0);
}

id static UIColor.balancePink.getter()
{
  return sub_23DD62D14(&qword_256CFC0A8, (id *)&qword_256CFE668);
}

id sub_23DD62D14(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

id sub_23DD62D4C(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  void *v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for OpenRing(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OpenRing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenRing()
{
  return &type metadata for OpenRing;
}

uint64_t storeEnumTagSinglePayload for LineCapStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23DD62ED4 + 4 * byte_23DDCA1AD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23DD62F08 + 4 * byte_23DDCA1A8[v4]))();
}

uint64_t sub_23DD62F08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD62F10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DD62F18);
  return result;
}

uint64_t sub_23DD62F24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DD62F2CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23DD62F30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD62F38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LineCapStyle()
{
  return &type metadata for LineCapStyle;
}

unint64_t sub_23DD62F58()
{
  unint64_t result;

  result = qword_256CFE670;
  if (!qword_256CFE670)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCA208, &type metadata for LineCapStyle);
    atomic_store(result, (unint64_t *)&qword_256CFE670);
  }
  return result;
}

unint64_t sub_23DD62FA0()
{
  unint64_t result;

  result = qword_256CFE678;
  if (!qword_256CFE678)
  {
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEEF18], MEMORY[0x24BDEEF38]);
    atomic_store(result, (unint64_t *)&qword_256CFE678);
  }
  return result;
}

void sub_23DD62FE4(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  uint64_t v5;
  double v11;
  __int128 v12;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  CGRect v22;
  CGRect v23;

  v11 = *(double *)(v5 + 16);
  if ((sub_23DDC61D0() & 1) != 0)
  {
    sub_23DDC6050();
    v22.origin.x = a2;
    v22.origin.y = a3;
    v22.size.width = a4;
    v22.size.height = a5;
    CGRectGetMidX(v22);
    __sincos_stret(v11);
    v23.origin.x = a2;
    v23.origin.y = a3;
    v23.size.width = a4;
    v23.size.height = a5;
    CGRectGetMidY(v23);
    v18 = 0x3FF0000000000000uLL;
    *(_QWORD *)&v19 = 0;
    *((_QWORD *)&v19 + 1) = 0x3FF0000000000000;
    v20 = 0;
    v21 = 0;
    sub_23DDC6044();
    v12 = v15;
    v13 = v16;
    v14 = v17;
  }
  else
  {
    sub_23DD6310C((uint64_t)&v18, a2, a3, a4, a5);
    v12 = v18;
    v13 = v19;
    v14 = v20;
  }
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v13;
  *(_BYTE *)(a1 + 32) = v14;
}

__n128 sub_23DD6310C@<Q0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  uint64_t v5;
  double *v11;
  double v12;
  double v13;
  double MidX;
  double v15;
  CGPath *Mutable;
  __double2 v17;
  double v18;
  double v19;
  double v20;
  int v21;
  double v22;
  __double2 v23;
  double v24;
  double v25;
  double v26;
  char v27;
  __n128 result;
  __int128 v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  _BYTE v36[16];
  _BYTE v37[16];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double MidY;
  double v46;
  double v47;
  double v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  double v53;
  double v54;
  char v55;
  double v56;
  char v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;

  v60.origin.x = 0.0;
  v60.origin.y = 0.0;
  v60.size.width = 0.0;
  v60.size.height = 0.0;
  if (!CGRectEqualToRect(*(CGRect *)&a2, v60))
  {
    v12 = *(double *)(v5 + 8);
    v32 = *(double *)(v5 + 16);
    v30 = *(double *)(v5 + 24);
    v13 = *(double *)v5;
    v58.origin.x = a2;
    v58.origin.y = a3;
    v58.size.width = a4;
    v58.size.height = a5;
    MidX = CGRectGetMidX(v58);
    v59.origin.x = a2;
    v59.origin.y = a3;
    v59.size.width = a4;
    v59.size.height = a5;
    v44 = MidX;
    MidY = CGRectGetMidY(v59);
    v46 = v12 - v13 * 0.5;
    v47 = v13;
    v48 = v12 + v13 * 0.5;
    v49 = a2;
    v50 = a3;
    v51 = a4;
    v52 = a5;
    v53 = v12;
    v15 = v46;
    Mutable = CGPathCreateMutable();
    v38 = 0x3FF0000000000000;
    v39 = 0;
    v40 = 0;
    v41 = 0x3FF0000000000000;
    v42 = 0;
    v43 = 0;
    v31 = v48;
    sub_23DDC6908();
    v17 = __sincos_stret(v30);
    v18 = MidX + v17.__cosval * v46;
    v19 = MidY;
    v20 = v17.__sinval * v46 + MidY;
    v21 = *(unsigned __int8 *)(v5 + 32);
    if (v21 != 3 && *(_BYTE *)(v5 + 32))
    {
      sub_23DD63B08(v5 + 40, (uint64_t)v37);
      sub_23DD63B08((uint64_t)v37, (uint64_t)&v54);
      if ((v21 - 3) < 0xFFFFFFFE)
      {
        if (v21 == 2)
          goto LABEL_11;
        goto LABEL_13;
      }
      if ((v55 & 1) == 0)
      {
        v22 = v54;
        sub_23DD635A8(v30, v54);
        sub_23DDC6908();
        sub_23DD63668(1, (double *)&v33, v30, v22);
        v18 = v34;
        v20 = v35;
        sub_23DDC6908();
      }
    }
    else
    {
      atan2(v17.__sinval * v48 + MidY - (v17.__sinval * v48 + MidY + v20) * 0.5, MidX + v17.__cosval * v48 - (MidX + v17.__cosval * v48 + v18) * 0.5);
      sub_23DDC6908();
      if (!v21)
        goto LABEL_11;
    }
    if (v21 == 2)
    {
LABEL_11:
      atan2(v20 - v19, v18 - MidX);
      sub_23DDC6908();
      v23 = __sincos_stret(v32);
      atan2(v23.__sinval * v15 + v19 - (v23.__sinval * v15 + v19 + v23.__sinval * v31 + v19) * 0.5, MidX + v23.__cosval * v15 - (MidX + v23.__cosval * v15 + MidX + v23.__cosval * v31) * 0.5);
LABEL_17:
      sub_23DDC6908();
      CGPathCloseSubpath(Mutable);
      v11 = (double *)&v33;
      sub_23DDC605C();
      goto LABEL_18;
    }
LABEL_13:
    sub_23DD63B08(v5 + 40, (uint64_t)v36);
    sub_23DD63B08((uint64_t)v36, (uint64_t)&v56);
    if ((v57 & 1) != 0 || (v21 | 2) != 3)
    {
      atan2(v20 - v19, v18 - MidX);
    }
    else
    {
      v24 = v56;
      sub_23DD635A8(v32, v56);
      sub_23DD63668(0, (double *)&v33, v32, v24);
      v25 = v34;
      v26 = v35;
      atan2(v20 - v19, v18 - MidX);
      atan2(v26 - v19, v25 - MidX);
      sub_23DDC6908();
      sub_23DDC6908();
    }
    goto LABEL_17;
  }
  v11 = &v44;
  sub_23DDC6050();
LABEL_18:
  v27 = *((_BYTE *)v11 + 32);
  result = *(__n128 *)v11;
  v29 = *((_OWORD *)v11 + 1);
  *(_OWORD *)a1 = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 16) = v29;
  *(_BYTE *)(a1 + 32) = v27;
  return result;
}

double sub_23DD635A8(double a1, double a2)
{
  double *v2;
  double v4;
  __double2 v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  double v13;
  double v14;
  BOOL v15;
  double v16;
  double v17;

  v4 = v2[4];
  v5 = __sincos_stret(a1);
  v6 = *v2;
  v7 = v2[1];
  v8 = v5.__cosval * v4 + *v2;
  v9 = v5.__sinval * v4 + v7;
  v10 = a2 + a2;
  v11 = v8 - (a2 + a2);
  if (*v2 >= v8)
    v11 = a2 + a2 + v8;
  v12 = v7 < v9;
  v13 = v9 - v10;
  v14 = v10 + v9;
  if (!v12)
    v13 = v14;
  v15 = v8 == v6;
  if (v8 == v6)
    v16 = v5.__cosval * v4 + *v2;
  else
    v16 = v11;
  if (!v15)
    v13 = v9;
  v17 = (v8 + v16) * 0.5;
  atan2(v9 - (v9 + v13) * 0.5, v8 - v17);
  return v17;
}

void sub_23DD63668(char a1@<W0>, double *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double *v4;
  double v8;
  __double2 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;

  v8 = v4[4];
  v9 = __sincos_stret(a3);
  v10 = *v4;
  v11 = v4[1];
  v12 = v9.__cosval * v8 + *v4;
  v13 = v9.__sinval * v8 + v11;
  v14 = sub_23DD63BA0(v12, v13, v4[2]);
  v15 = v12 - v14;
  if (v10 >= v12)
    v15 = v12 + v14;
  v16 = v13 - v14;
  v17 = v13 + v14;
  if (v11 < v13)
    v17 = v16;
  if (v12 == v10)
    v13 = v17;
  else
    v12 = v15;
  v18 = a4 + a4;
  if (v12 == v10)
  {
    if (v11 >= v13)
      v19 = v13 - v18;
    else
      v19 = v18 + v13;
    v20 = v12;
  }
  else
  {
    v20 = v18 + v12;
    v21 = v12 - v18;
    if (v10 >= v12)
      v20 = v21;
    v19 = v13;
  }
  v22 = (v12 + v20) * 0.5;
  v23 = (v13 + v19) * 0.5;
  v24 = atan2(v13 - v23, v12 - v22);
  v25 = v24 + -1.57079633;
  if ((a1 & 1) == 0)
    v25 = v24;
  *a2 = v22;
  a2[1] = v23;
  if ((a1 & 1) == 0)
    v24 = v24 + 1.57079633;
  a2[2] = v25;
  a2[3] = v24;
  a2[4] = v12;
  a2[5] = v13;
}

double sub_23DD63790@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  __int128 *v5;
  __int128 v7;
  double result;
  __int128 v9;
  _OWORD v10[2];
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v7 = v5[1];
  v12 = *v5;
  v13 = v7;
  v14 = v5[2];
  v15 = *((_BYTE *)v5 + 48);
  sub_23DD62FE4((uint64_t)v10, a2, a3, a4, a5);
  result = *(double *)v10;
  v9 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v11;
  return result;
}

uint64_t sub_23DD637F4()
{
  return sub_23DDC62B4();
}

void (*sub_23DD6380C(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_23DDC5A5C();
  return sub_23DD63868;
}

void sub_23DD63868(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

unint64_t sub_23DD6389C()
{
  unint64_t result;

  result = qword_256CFE680;
  if (!qword_256CFE680)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCA230, &type metadata for OpenRing);
    atomic_store(result, (unint64_t *)&qword_256CFE680);
  }
  return result;
}

unint64_t sub_23DD638E4()
{
  unint64_t result;

  result = qword_256CFE688;
  if (!qword_256CFE688)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCA2D0, &type metadata for OpenRing);
    atomic_store(result, (unint64_t *)&qword_256CFE688);
  }
  return result;
}

unint64_t sub_23DD6392C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFE690;
  if (!qword_256CFE690)
  {
    sub_23DD63974();
    result = MEMORY[0x242643BD8](MEMORY[0x24BDEB358], v1);
    atomic_store(result, (unint64_t *)&qword_256CFE690);
  }
  return result;
}

void sub_23DD63974()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE698)
  {
    sub_23DD639EC();
    v0 = sub_23DDC5A80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE698);
  }
}

unint64_t sub_23DD639EC()
{
  unint64_t result;

  result = qword_256CFE6A0;
  if (!qword_256CFE6A0)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCA280, &type metadata for OpenRing);
    atomic_store(result, (unint64_t *)&qword_256CFE6A0);
  }
  return result;
}

uint64_t sub_23DD63A30()
{
  sub_23DD639EC();
  return sub_23DDC62F0();
}

uint64_t sub_23DD63A80()
{
  sub_23DD639EC();
  return sub_23DDC62C0();
}

uint64_t sub_23DD63AD0()
{
  sub_23DD639EC();
  return sub_23DDC62D8();
}

uint64_t sub_23DD63B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DD63B4C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23DD63B4C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE6A8)
  {
    v0 = sub_23DDC6980();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE6A8);
  }
}

double sub_23DD63BA0(double a1, double a2, double a3)
{
  double *v3;
  double v4;
  double v5;
  BOOL v6;
  double result;
  double v8;
  double v9;

  v4 = *v3;
  v5 = v3[1];
  if (*v3 == a1)
  {
    v6 = v5 <= a2;
    result = a2 - v5 - a3;
    v8 = v5 - a3 - a2;
    if (!v6)
      return v8;
  }
  else
  {
    v9 = sqrt(a3 * a3 - (a2 - v5) * (a2 - v5));
    if (v4 >= a1)
      return v4 - a1 - v9;
    else
      return a1 - v4 - v9;
  }
  return result;
}

uint64_t sub_23DD63BFC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = v20 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(_QWORD *)(v4 + 40) = a2[5];
    v8 = a3[6];
    v9 = v4 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = sub_23DDC51E0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[8];
    *(_BYTE *)(v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v13 = (_QWORD *)(v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[9];
    v17 = (_QWORD *)(v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_23DD63CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  return swift_release();
}

uint64_t sub_23DD63D58(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[9];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *sub_23DD63E18(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v10 = a3[8];
  v11 = (uint64_t *)((char *)a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  v14 = a3[9];
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t sub_23DD64044(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_23DD640D8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  __swift_destroy_boxed_opaque_existential_0(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  swift_release();
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  swift_release();
  return a1;
}

uint64_t sub_23DD64190()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD6419C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23DDC51E0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_23DD64218()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD64224(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_23DDC51E0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for BalanceWidgetTimelineProvider()
{
  uint64_t result;

  result = qword_2543263C8;
  if (!qword_2543263C8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD642D4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC51E0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23DD6436C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_23DDC6854();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_23DDC6848();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_23DCFEA1C(a1, &qword_254326768, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990]);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_23DDC67F4();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

id sub_23DD644C4()
{
  id result;
  void *v1;
  id v2;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, sel_isAppleWatch);

    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23DD64520@<X0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  char v15;
  uint64_t v16;
  uint64_t (**v17)();
  id (**v18)();
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = sub_23DDC57A4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BalanceWidgetTimelineProvider();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (double *)((char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *a2;
  v17 = (uint64_t (**)())((char *)v14 + *(int *)(v16 + 32));
  *v17 = sub_23DD644C0;
  v17[1] = 0;
  v18 = (id (**)())((char *)v14 + *(int *)(v16 + 36));
  *v18 = sub_23DD644C4;
  v18[1] = 0;
  sub_23DDC578C();
  v19 = sub_23DDC5798();
  v20 = sub_23DDC68F0();
  if (os_log_type_enabled(v19, v20))
  {
    v33 = a3;
    v21 = swift_slowAlloc();
    v31 = v8;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc();
    v30 = v9;
    v24 = v23;
    v35 = v23;
    v32 = a1;
    *(_DWORD *)v22 = 136446210;
    v34 = sub_23DD02158(0xD00000000000001DLL, 0x800000023DDCA320, &v35);
    a1 = v32;
    a3 = v33;
    sub_23DDC698C();
    _os_log_impl(&dword_23DCF2000, v19, v20, "[%{public}s] init", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v24, -1, -1);
    MEMORY[0x242643C80](v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  sub_23DD67424((uint64_t)a1, (uint64_t)v14);
  v25 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v26 = (char *)v14 + *(int *)(v12 + 24);
  v27 = (char *)v25 + *(int *)(type metadata accessor for BalanceWidgetDataProvider() + 24);
  v28 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
  v14[5] = a4;
  *((_BYTE *)v14 + *(int *)(v12 + 28)) = v15;
  sub_23DCFBB58((uint64_t)v14, a3, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetTimelineProvider);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_23DD647D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = v1;
  v4 = sub_23DDC512C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - v9;
  v11 = sub_23DDC57A4();
  v31 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC578C();
  v14 = sub_23DDC5798();
  v15 = sub_23DDC68F0();
  if (os_log_type_enabled(v14, v15))
  {
    v27 = v11;
    v16 = swift_slowAlloc();
    v29 = a1;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v30 = v4;
    v19 = v18;
    v33 = v18;
    v28 = v2;
    *(_DWORD *)v17 = 136446210;
    v32 = sub_23DD02158(0xD00000000000001DLL, 0x800000023DDCA320, &v33);
    v2 = v28;
    sub_23DDC698C();
    _os_log_impl(&dword_23DCF2000, v14, v15, "[%{public}s] returning placeholder", v17, 0xCu);
    swift_arrayDestroy();
    v20 = v19;
    v4 = v30;
    MEMORY[0x242643C80](v20, -1, -1);
    v21 = v17;
    a1 = v29;
    MEMORY[0x242643C80](v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v27);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
  }
  v22 = type metadata accessor for BalanceWidgetTimelineProvider();
  v23 = v2 + *(int *)(v22 + 24);
  LOBYTE(v33) = *(_BYTE *)(v2 + *(int *)(v22 + 28));
  sub_23DDC5114();
  sub_23DDC5114();
  sub_23DCF87C8(v23, (unsigned __int8 *)&v33, (uint64_t)v10, (uint64_t)v7, a1);
  v24 = *(void (**)(char *, uint64_t))(v5 + 8);
  v24(v7, v4);
  return ((uint64_t (*)(char *, uint64_t))v24)(v10, v4);
}

uint64_t sub_23DD64A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v7 = sub_23DDC57A4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC578C();
  v11 = sub_23DDC5798();
  v12 = sub_23DDC68F0();
  if (os_log_type_enabled(v11, v12))
  {
    v20 = a2;
    v13 = swift_slowAlloc();
    v21 = v4;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc();
    v23 = v15;
    v19 = v7;
    *(_DWORD *)v14 = 136446210;
    v22 = sub_23DD02158(0xD00000000000001DLL, 0x800000023DDCA320, &v23);
    a2 = v20;
    sub_23DDC698C();
    _os_log_impl(&dword_23DCF2000, v11, v12, "[%{public}s] fetching snapshot", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v15, -1, -1);
    MEMORY[0x242643C80](v14, -1, -1);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v19);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  v16 = sub_23DD31840();
  return sub_23DD64C40(v16 & 1, a2, a3);
}

uint64_t sub_23DD64C40(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, char *, uint64_t);
  _QWORD *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;

  v4 = v3;
  v83 = a2;
  v84 = a3;
  v82 = a1;
  v5 = (int *)type metadata accessor for BalanceWidgetTimelineProvider();
  v79 = *((_QWORD *)v5 - 1);
  MEMORY[0x24BDAC7A8](v5);
  v80 = v6;
  v81 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DCFB328(0, &qword_254326768, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v92 = (uint64_t)&v71 - v9;
  v10 = sub_23DDC51D4();
  v77 = *(_QWORD *)(v10 - 8);
  v78 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], v7);
  MEMORY[0x24BDAC7A8](v13);
  v75 = (char *)&v71 - v14;
  v85 = sub_23DDC5330();
  v90 = *(_QWORD *)(v85 - 8);
  v15 = *(_QWORD *)(v90 + 64);
  MEMORY[0x24BDAC7A8](v85);
  v89 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v71 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v71 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v93 = (char *)&v71 - v23;
  v24 = sub_23DDC512C();
  v91 = *(_QWORD *)(v24 - 8);
  v25 = *(_QWORD *)(v91 + 64);
  MEMORY[0x24BDAC7A8](v24);
  v87 = (char *)&v71 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v86 = (char *)&v71 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v72 = (char *)&v71 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v88 = (char *)&v71 - v31;
  v33 = MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v71 - v34;
  v36 = (*(uint64_t (**)(double))(v3 + v5[8]))(v33);
  if ((*(_BYTE *)(v3 + v5[7]) & 1) != 0)
  {
    sub_23DDC5300();
    v37 = v90;
    v38 = v85;
  }
  else
  {
    if (((*(uint64_t (**)(uint64_t))(v3 + v5[9]))(v36) & 1) != 0)
      sub_23DDC5300();
    else
      sub_23DDC5324();
    v37 = v90;
    v39 = v18;
    v38 = v85;
    (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v21, v39, v85);
  }
  sub_23DD65AA0((uint64_t)v21, (uint64_t)v93);
  v76 = *(void (**)(char *, uint64_t))(v37 + 8);
  v76(v21, v38);
  v74 = v4;
  v40 = v38;
  v42 = v77;
  v41 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v12, *MEMORY[0x24BDCF220], v78);
  v43 = v75;
  sub_23DDC51C8();
  v44 = v41;
  v45 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v44);
  v46 = v91;
  v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 48))(v43, 1, v24);
  v48 = v40;
  if (v47 == 1)
  {
    sub_23DCFEA1C(v45, &qword_254326668, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    v49 = v88;
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v88, v35, v24);
  }
  else
  {
    v50 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v72, v45, v24);
    v49 = v88;
    sub_23DDC5198();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v50, v24);
  }
  v51 = v35;
  v73 = v35;
  v52 = sub_23DDC6854();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v92, 1, 1, v52);
  v53 = v81;
  sub_23DCF58EC(v74, v81, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetTimelineProvider);
  v54 = v90;
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v89, v93, v48);
  v55 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v55(v86, v51, v24);
  v55(v87, v49, v24);
  v56 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
  v57 = (v80 + *(unsigned __int8 *)(v54 + 80) + v56) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
  v58 = v57 + v15;
  v59 = *(unsigned __int8 *)(v46 + 80);
  v60 = (v59 + v58 + 1) & ~v59;
  v61 = (v25 + v59 + v60) & ~v59;
  v62 = swift_allocObject();
  *(_QWORD *)(v62 + 16) = 0;
  *(_QWORD *)(v62 + 24) = 0;
  sub_23DCFBB58(v53, v62 + v56, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetTimelineProvider);
  v63 = v85;
  (*(void (**)(unint64_t, char *, uint64_t))(v54 + 32))(v62 + v57, v89, v85);
  *(_BYTE *)(v62 + v58) = v82 & 1;
  v64 = v62 + v60;
  v65 = v91;
  v66 = *(void (**)(uint64_t, char *, uint64_t))(v91 + 32);
  v66(v64, v86, v24);
  v66(v62 + v61, v87, v24);
  v67 = (_QWORD *)(v62 + ((v25 + v61 + 7) & 0xFFFFFFFFFFFFFFF8));
  v68 = v84;
  *v67 = v83;
  v67[1] = v68;
  swift_retain();
  sub_23DD6436C(v92, (uint64_t)&unk_256CFE6E0, v62);
  swift_release();
  v69 = *(void (**)(char *, uint64_t))(v65 + 8);
  v69(v88, v24);
  v76(v93, v63);
  return ((uint64_t (*)(char *, uint64_t))v69)(v73, v24);
}

uint64_t sub_23DD65238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v8 = sub_23DDC57A4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC578C();
  v12 = sub_23DDC5798();
  v13 = sub_23DDC68F0();
  if (os_log_type_enabled(v12, v13))
  {
    v22 = v4;
    v14 = swift_slowAlloc();
    v21 = v8;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc();
    v24 = v16;
    v20 = v9;
    *(_DWORD *)v15 = 136446210;
    v23 = sub_23DD02158(0xD00000000000001DLL, 0x800000023DDCA320, &v24);
    sub_23DDC698C();
    _os_log_impl(&dword_23DCF2000, v12, v13, "[%{public}s] fetching timeline", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v16, -1, -1);
    MEMORY[0x242643C80](v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v21);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  swift_retain();
  sub_23DD64A54(a1, (uint64_t)sub_23DD673A4, v17);
  return swift_release();
}

uint64_t sub_23DD65450(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v28 = a1;
  v3 = sub_23DDC65F0();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD673AC();
  v7 = v6;
  v29 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DDC57A4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC578C();
  v14 = sub_23DDC5798();
  v15 = sub_23DDC68F0();
  if (os_log_type_enabled(v14, v15))
  {
    v27 = a2;
    v16 = swift_slowAlloc();
    v25 = v11;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v24 = v10;
    v19 = v18;
    v31 = v18;
    v26 = v5;
    *(_DWORD *)v17 = 136446210;
    v30 = sub_23DD02158(0xD00000000000001DLL, 0x800000023DDCA320, &v31);
    a2 = v27;
    sub_23DDC698C();
    _os_log_impl(&dword_23DCF2000, v14, v15, "[%{public}s] returning timeline", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v19, -1, -1);
    MEMORY[0x242643C80](v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v24);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  sub_23DCFB328(0, &qword_256CFE700, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetTimelineEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v20 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BalanceWidgetTimelineEntry() - 8) + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_23DDC7F50;
  sub_23DCF58EC(v28, v22 + v21, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetTimelineEntry);
  sub_23DDC65E4();
  sub_23DCF535C(qword_256CFE6B8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetTimelineEntry, (uint64_t)&unk_23DDC76AC);
  sub_23DDC6620();
  a2(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v9, v7);
}

uint64_t sub_23DD65768(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v2[5] = type metadata accessor for BalanceWidgetTimelineEntry();
  v2[6] = swift_task_alloc();
  v3 = sub_23DDC57A4();
  v2[7] = v3;
  v2[8] = *(_QWORD *)(v3 - 8);
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23DD657EC()
{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  sub_23DDC578C();
  v1 = sub_23DDC5798();
  v2 = sub_23DDC68F0();
  if (os_log_type_enabled(v1, v2))
  {
    v4 = v0[8];
    v3 = v0[9];
    v5 = v0[7];
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v15 = v7;
    *(_DWORD *)v6 = 136446210;
    v0[2] = sub_23DD02158(0xD00000000000001DLL, 0x800000023DDCA320, &v15);
    sub_23DDC698C();
    _os_log_impl(&dword_23DCF2000, v1, v2, "[%{public}s] returning widget relevance", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v7, -1, -1);
    MEMORY[0x242643C80](v6, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    v9 = v0[8];
    v8 = v0[9];
    v10 = v0[7];

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  v11 = v0[4];
  v12 = swift_task_alloc();
  v0[10] = v12;
  *(_QWORD *)(v12 + 16) = v11;
  *(_BYTE *)(v12 + 24) = 1;
  v13 = (_QWORD *)swift_task_alloc();
  v0[11] = v13;
  *v13 = v0;
  v13[1] = sub_23DD659E4;
  return sub_23DDC6BFC();
}

uint64_t sub_23DD659E4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DD65A40()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_23DD31AE0(v1, *(_QWORD *)(v0 + 24));
  sub_23DCF59A8(v1, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetTimelineEntry);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DD65AA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t result;
  void *v29;
  unsigned int v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v64 = a2;
  v65 = a1;
  v2 = sub_23DDC51E0();
  MEMORY[0x24BDAC7A8](v2);
  v58 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD6731C();
  v56 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v57 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v54 = (char *)&v52 - v7;
  sub_23DD020E0();
  v63 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v55 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v52 - v11;
  v13 = sub_23DDC6530();
  v60 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v59 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v62 = (char *)&v52 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v61 = (char *)&v52 - v18;
  v19 = sub_23DDC57A4();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC6764();
  v23 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v24 = (void *)sub_23DDC6740();
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v23, sel_initWithSuiteName_, v24);

  if (!v25)
    goto LABEL_8;
  v26 = (void *)sub_23DDC6740();
  v27 = objc_msgSend(v25, sel_integerForKey_, v26);

  result = (uint64_t)objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v29 = (void *)result;
    v30 = objc_msgSend((id)result, sel_isAppleInternalInstall);

    if (v30)
    {
      sub_23DDC578C();
      v31 = sub_23DDC5798();
      v32 = sub_23DDC68F0();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc();
        v53 = swift_slowAlloc();
        v67 = v53;
        *(_DWORD *)v33 = 136446466;
        v52 = v33 + 4;
        v66 = sub_23DD02158(0xD00000000000001DLL, 0x800000023DDCA320, &v67);
        sub_23DDC698C();
        *(_WORD *)(v33 + 12) = 2048;
        v66 = (uint64_t)v27;
        sub_23DDC698C();
        _os_log_impl(&dword_23DCF2000, v31, v32, "[%{public}s] applying days offset: %ld", (uint8_t *)v33, 0x16u);
        v34 = v53;
        swift_arrayDestroy();
        MEMORY[0x242643C80](v34, -1, -1);
        MEMORY[0x242643C80](v33, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
      sub_23DDC52F4();
      v35 = v60;
      v36 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
      v37 = v62;
      v36(v62, v12, v13);
      sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DD020E0);
      v38 = v61;
      sub_23DDC6518();
      v39 = *(void (**)(char *, uint64_t))(v35 + 8);
      v39(v37, v13);
      sub_23DDC52F4();
      v40 = v59;
      v36(v59, &v12[*(int *)(v63 + 36)], v13);
      sub_23DCF59A8((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DD020E0);
      sub_23DDC6518();
      v59 = (char *)v39;
      v39(v40, v13);
      sub_23DCF535C(&qword_254326720, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
      result = sub_23DDC66A4();
      if ((result & 1) != 0)
      {
        v41 = v35;
        v42 = v56;
        v43 = v54;
        v44 = &v54[*(int *)(v56 + 48)];
        v36(v54, v38, v13);
        v36(v44, v37, v13);
        v45 = v57;
        v46 = &v57[*(int *)(v42 + 48)];
        v36(v57, v43, v13);
        v36(v46, v44, v13);
        v47 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
        v48 = (uint64_t)v55;
        v47(v55, v45, v13);
        v49 = (void (*)(char *, uint64_t))v59;
        ((void (*)(char *, uint64_t))v59)(v46, v13);
        v50 = &v45[*(int *)(v42 + 48)];
        v47(v45, v43, v13);
        v47(v50, v44, v13);
        v47((char *)(v48 + *(int *)(v63 + 36)), v50, v13);
        v49(v45, v13);
        sub_23DCFBB58(v48, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DD020E0);
        sub_23DDC530C();
        sub_23DDC52E8();
        v49(v62, v13);
        return ((uint64_t (*)(char *, uint64_t))v49)(v61, v13);
      }
      __break(1u);
      goto LABEL_10;
    }
LABEL_8:
    v51 = sub_23DDC5330();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v64, v65, v51);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_23DD660EC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  sub_23DD66F04();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v9);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  sub_23DD64C40(a3, (uint64_t)sub_23DD66FC8, v11);
  return swift_release();
}

uint64_t sub_23DD661CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v6;

  v2 = type metadata accessor for BalanceWidgetTimelineEntry();
  MEMORY[0x24BDAC7A8](v2);
  sub_23DCF58EC(a1, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  sub_23DD66F04();
  return sub_23DDC6800();
}

uint64_t sub_23DD66254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 72) = v15;
  *(_QWORD *)(v8 + 80) = v16;
  *(_QWORD *)(v8 + 56) = a7;
  *(_QWORD *)(v8 + 64) = a8;
  *(_BYTE *)(v8 + 288) = a6;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a5;
  v9 = sub_23DDC57A4();
  *(_QWORD *)(v8 + 88) = v9;
  *(_QWORD *)(v8 + 96) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 104) = swift_task_alloc();
  *(_QWORD *)(v8 + 112) = type metadata accessor for BalanceWidgetTimelineEntry();
  *(_QWORD *)(v8 + 120) = swift_task_alloc();
  v10 = sub_23DDC527C();
  *(_QWORD *)(v8 + 128) = v10;
  *(_QWORD *)(v8 + 136) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 144) = swift_task_alloc();
  sub_23DCFB328(0, &qword_254326A70, (uint64_t (*)(uint64_t))MEMORY[0x24BE40438], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  *(_QWORD *)(v8 + 152) = swift_task_alloc();
  v11 = sub_23DDC5330();
  *(_QWORD *)(v8 + 160) = v11;
  *(_QWORD *)(v8 + 168) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 176) = swift_task_alloc();
  *(_QWORD *)(v8 + 184) = swift_task_alloc();
  *(_QWORD *)(v8 + 192) = type metadata accessor for BalanceWidgetViewModel();
  *(_QWORD *)(v8 + 200) = swift_task_alloc();
  *(_QWORD *)(v8 + 208) = swift_task_alloc();
  v12 = sub_23DDC55A0();
  *(_QWORD *)(v8 + 216) = v12;
  *(_QWORD *)(v8 + 224) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 232) = swift_task_alloc();
  *(_QWORD *)(v8 + 240) = swift_task_alloc();
  v13 = sub_23DDC5570();
  *(_QWORD *)(v8 + 248) = v13;
  *(_QWORD *)(v8 + 256) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 264) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23DD66414()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 40), *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 272) = v1;
  *v1 = v0;
  v1[1] = sub_23DD66480;
  return BalanceWidgetDataProvider.loadSummaries(for:isLiveContent:isRetrying:)(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 288), 0);
}

uint64_t sub_23DD66480()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DD664E4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  void (*v25)(uint64_t, uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[3];

  v1 = *(void **)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 240);
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 40), *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24));
  sub_23DD01AC0(v2);
  v3 = *(_QWORD *)(v0 + 264);
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 248));
    sub_23DDC578C();
    v4 = v1;
    v5 = v1;
    v6 = sub_23DDC5798();
    v7 = sub_23DDC68D8();
    v8 = os_log_type_enabled(v6, v7);
    v10 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 88);
    if (v8)
    {
      v57 = *(_QWORD *)(v0 + 96);
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v61[0] = v13;
      *(_DWORD *)v12 = 136446466;
      *(_QWORD *)(v0 + 16) = sub_23DD02158(0xD00000000000001DLL, 0x800000023DDCA320, v61);
      sub_23DDC698C();
      *(_WORD *)(v12 + 12) = 2082;
      *(_QWORD *)(v0 + 24) = v1;
      v14 = v1;
      sub_23DD02790();
      v15 = sub_23DDC677C();
      *(_QWORD *)(v0 + 32) = sub_23DD02158(v15, v16, v61);
      sub_23DDC698C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_23DCF2000, v6, v7, "[%{public}s] error while fetching day summaries: %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v13, -1, -1);
      MEMORY[0x242643C80](v12, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v9, v11);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
    v32 = *(_QWORD *)(v0 + 120);
    v33 = *(void (**)(uint64_t))(v0 + 72);
    v35 = *(_QWORD *)(v0 + 56);
    v34 = *(_QWORD *)(v0 + 64);
    v36 = *(_QWORD *)(v0 + 40);
    v37 = type metadata accessor for BalanceWidgetTimelineProvider();
    v38 = *(int *)(v37 + 28);
    v39 = v36 + *(int *)(v37 + 24);
    LOBYTE(v61[0]) = *(_BYTE *)(v36 + v38);
    sub_23DCF87C8(v39, (unsigned __int8 *)v61, v35, v34, v32);
    v33(v32);

    sub_23DCF59A8(v32, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetTimelineEntry);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 240);
    v18 = *(_QWORD *)(v0 + 224);
    v42 = *(_QWORD *)(v0 + 232);
    v43 = *(_QWORD *)(v0 + 216);
    v44 = *(_QWORD *)(v0 + 200);
    v19 = *(_QWORD *)(v0 + 184);
    v51 = *(_QWORD *)(v0 + 192);
    v20 = *(_QWORD *)(v0 + 176);
    v21 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 160);
    v47 = *(_QWORD *)(v0 + 168);
    v48 = *(_QWORD *)(v0 + 144);
    v49 = *(_QWORD *)(v0 + 136);
    v50 = *(_QWORD *)(v0 + 128);
    v46 = *(_QWORD *)(v0 + 120);
    v52 = *(int **)(v0 + 112);
    v53 = *(_QWORD *)(v0 + 208);
    v55 = *(_QWORD *)(v0 + 64);
    v56 = *(void (**)(uint64_t))(v0 + 72);
    v54 = *(_QWORD *)(v0 + 56);
    v60 = *(_QWORD *)(v0 + 248);
    v23 = *(_QWORD *)(v0 + 40);
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16);
    v59 = *(_QWORD *)(v0 + 256);
    v24(v19, *(_QWORD *)(v0 + 48), v22);
    v58 = v3;
    v41 = sub_23DDC554C();
    v45 = *(_BYTE *)(v23 + *(int *)(type metadata accessor for BalanceWidgetTimelineProvider() + 28));
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    v25(v42, v17, v43);
    v24(v20, v19, v22);
    v25(v21, v42, v43);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v43);
    OvernightMetricsViewModel.init(dayRange:chronologicalDaySummaries:featureStatus:)(v20, v41, v21, v44);
    sub_23DDC5270();
    v26 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v26(v42, v43);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v19, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v44 + *(int *)(v51 + 20), v48, v50);
    *(_BYTE *)(v44 + *(int *)(v51 + 24)) = v45;
    sub_23DCFBB58(v44, v53, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
    sub_23DCF58EC(v53, v46, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
    v27 = v46 + v52[5];
    v28 = sub_23DDC512C();
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
    v29(v27, v54, v28);
    v30 = v46 + v52[6];
    sub_23DD31970();
    v31 = sub_23DDC6608();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
    v29(v46 + v52[7], v55, v28);
    v56(v46);
    sub_23DCF59A8(v46, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetTimelineEntry);
    sub_23DCF59A8(v53, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetViewModel);
    v26(v17, v43);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DD66A78()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;

  v1 = *(void **)(v0 + 280);
  sub_23DDC578C();
  v2 = v1;
  v3 = v1;
  v4 = sub_23DDC5798();
  v5 = sub_23DDC68D8();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 96);
    v25 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 88);
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v27 = v9;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_23DD02158(0xD00000000000001DLL, 0x800000023DDCA320, &v27);
    sub_23DDC698C();
    *(_WORD *)(v8 + 12) = 2082;
    *(_QWORD *)(v0 + 24) = v1;
    v10 = v1;
    sub_23DD02790();
    v11 = sub_23DDC677C();
    *(_QWORD *)(v0 + 32) = sub_23DD02158(v11, v12, &v27);
    sub_23DDC698C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_23DCF2000, v4, v5, "[%{public}s] error while fetching day summaries: %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242643C80](v9, -1, -1);
    MEMORY[0x242643C80](v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v25, v7);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(void (**)(uint64_t))(v0 + 72);
  v19 = *(_QWORD *)(v0 + 56);
  v18 = *(_QWORD *)(v0 + 64);
  v20 = *(_QWORD *)(v0 + 40);
  v21 = type metadata accessor for BalanceWidgetTimelineProvider();
  v22 = *(int *)(v21 + 28);
  v23 = v20 + *(int *)(v21 + 24);
  v26 = *(_BYTE *)(v20 + v22);
  sub_23DCF87C8(v23, &v26, v19, v18, v16);
  v17(v16);

  sub_23DCF59A8(v16, (uint64_t (*)(_QWORD))type metadata accessor for BalanceWidgetTimelineEntry);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DD66D60(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23DD506C0;
  return sub_23DD65768(a1);
}

uint64_t sub_23DD66DB0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23DD506C0;
  return sub_23DDC65C0();
}

uint64_t sub_23DD66E1C()
{
  return sub_23DCF535C(qword_256CFE6B8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetTimelineEntry, (uint64_t)&unk_23DDC76AC);
}

uint64_t sub_23DD66E48(uint64_t a1)
{
  uint64_t v1;

  return sub_23DD660EC(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_23DD66E54(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23DD66EB8;
  return v6(a1);
}

uint64_t sub_23DD66EB8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_23DD66F04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254326760)
  {
    type metadata accessor for BalanceWidgetTimelineEntry();
    v0 = sub_23DDC680C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254326760);
  }
}

uint64_t sub_23DD66F68()
{
  uint64_t v0;
  uint64_t v1;

  sub_23DD66F04();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_23DD66FC8(uint64_t a1)
{
  sub_23DD66F04();
  return sub_23DD661CC(a1);
}

uint64_t sub_23DD67004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  unint64_t v17;
  uint64_t v18;

  v1 = type metadata accessor for BalanceWidgetTimelineProvider();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v18 = sub_23DDC5330();
  v5 = *(_QWORD *)(v18 - 8);
  v17 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_23DDC512C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v9 + v17 + 1) & ~v9;
  v11 = (*(_QWORD *)(v8 + 64) + v9 + v10) & ~v9;
  swift_unknownObjectRelease();
  v12 = v0 + v3;
  __swift_destroy_boxed_opaque_existential_0(v12);
  v13 = v12 + *(int *)(v1 + 24);
  v14 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v17, v18);
  v15 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v15(v0 + v10, v7);
  v15(v0 + v11, v7);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DD67184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v3 = *(_QWORD *)(type metadata accessor for BalanceWidgetTimelineProvider() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(sub_23DDC5330() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(sub_23DDC512C() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v8 + v10 + 1) & ~v10;
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v1 + 24);
  LOBYTE(v8) = *(_BYTE *)(v1 + v8);
  v14 = v1 + v11;
  v15 = v1 + ((*(_QWORD *)(v9 + 64) + v10 + v11) & ~v10);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_23DD4FCC8;
  return sub_23DD66254(a1, v12, v13, v1 + v4, v1 + v7, v8, v14, v15);
}

uint64_t sub_23DD672AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23DD4FCC8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_256CFE6E8 + dword_256CFE6E8))(a1, v4);
}

void sub_23DD6731C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_254326718)
  {
    sub_23DDC6530();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_254326718);
  }
}

uint64_t sub_23DD67380()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DD673A4(uint64_t a1)
{
  uint64_t v1;

  return sub_23DD65450(a1, *(void (**)(_QWORD))(v1 + 16));
}

void sub_23DD673AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE6F8)
  {
    type metadata accessor for BalanceWidgetTimelineEntry();
    sub_23DCF535C(qword_256CFE6B8, (uint64_t (*)(uint64_t))type metadata accessor for BalanceWidgetTimelineEntry, (uint64_t)&unk_23DDC76AC);
    v0 = sub_23DDC662C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE6F8);
  }
}

uint64_t sub_23DD67424(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23DD6746C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, _QWORD, uint64_t);
  void (*v27)(char *, uint64_t);
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;

  v65 = a2;
  sub_23DD3DBE8();
  v61 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v64 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v60 = (char *)&v55 - v6;
  sub_23DD13DC0(0);
  v62 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v63 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23DDC51D4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, &qword_254326668, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v58 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v55 - v16;
  v18 = sub_23DDC512C();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v57 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v66 = (char *)&v55 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v55 - v24;
  v59 = a1;
  sub_23DDC5198();
  v26 = *(void (**)(char *, _QWORD, uint64_t))(v10 + 104);
  v26(v12, *MEMORY[0x24BDCF220], v9);
  sub_23DDC51C8();
  v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v27(v12, v9);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v28(v17, 1, v18) == 1)
  {
    v29 = v19;
LABEL_5:
    sub_23DD290A0((uint64_t)v17, &qword_254326668, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    sub_23DCF67EC();
    v30 = v59;
    result = sub_23DDC66A4();
    if ((result & 1) != 0)
    {
      v33 = v60;
      v32 = v61;
      v34 = &v60[*(int *)(v61 + 48)];
      v35 = v25;
      v36 = v29;
      v37 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
      v37(v60, v35, v18);
      v38 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
      v38(v34, v30, v18);
      v39 = v64;
      v40 = &v64[*(int *)(v32 + 48)];
      v38(v64, (uint64_t)v33, v18);
      v38(v40, (uint64_t)v34, v18);
      v41 = (uint64_t)v63;
      v37(v63, v39, v18);
      v42 = *(void (**)(char *, uint64_t))(v36 + 8);
      v42(v40, v18);
      v43 = &v39[*(int *)(v32 + 48)];
      v37(v39, v33, v18);
      v37(v43, v34, v18);
      v37((char *)(v41 + *(int *)(v62 + 36)), v43, v18);
LABEL_9:
      v42(v39, v18);
      return sub_23DD4845C(v41, v65);
    }
    __break(1u);
    goto LABEL_11;
  }
  v56 = v19;
  v55 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v55(v66, v17, v18);
  v26(v12, *MEMORY[0x24BDCF260], v9);
  v17 = v58;
  sub_23DDC51C8();
  v27(v12, v9);
  if (v28(v17, 1, v18) == 1)
  {
    v29 = v56;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v66, v18);
    goto LABEL_5;
  }
  v44 = v57;
  v55(v57, v17, v18);
  sub_23DCF67EC();
  v45 = sub_23DDC66A4();
  v46 = v56;
  v42 = *(void (**)(char *, uint64_t))(v56 + 8);
  result = ((uint64_t (*)(char *, uint64_t))v42)(v66, v18);
  if ((v45 & 1) != 0)
  {
    v48 = v60;
    v47 = v61;
    v49 = &v60[*(int *)(v61 + 48)];
    v50 = v25;
    v51 = v55;
    v55(v60, v50, v18);
    v51(v49, v44, v18);
    v39 = v64;
    v52 = &v64[*(int *)(v47 + 48)];
    v53 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
    v53(v64, v48, v18);
    v53(v52, v49, v18);
    v41 = (uint64_t)v63;
    v51(v63, v39, v18);
    v42(v52, v18);
    v54 = &v39[*(int *)(v47 + 48)];
    v51(v39, v48, v18);
    v51(v54, v49, v18);
    v51((char *)(v41 + *(int *)(v62 + 36)), v54, v18);
    goto LABEL_9;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_23DD6799C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t);
  void (*v30)(char *, uint64_t);
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t result;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char v38;
  _QWORD *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;

  v60 = a2;
  sub_23DD3DBE8();
  v55 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v56 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v52 = (char *)&v49 - v6;
  sub_23DD13DC0(0);
  v8 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v54 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DDC51D4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, &qword_254326668, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v58 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v49 - v17;
  v19 = sub_23DDC512C();
  v20 = *(_QWORD **)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v57 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v61 = (char *)&v49 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v49 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v62 = (char *)&v49 - v28;
  sub_23DDC5198();
  v53 = v8;
  v59 = a1;
  sub_23DDC5198();
  v29 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 104);
  v29(v13, *MEMORY[0x24BDCF220], v10);
  sub_23DDC51C8();
  v30 = *(void (**)(char *, uint64_t))(v11 + 8);
  v30(v13, v10);
  v31 = (unsigned int (*)(char *, uint64_t, uint64_t))v20[6];
  if (v31(v18, 1, v19) == 1)
  {
    v32 = (void (*)(char *, uint64_t))v20[1];
LABEL_5:
    v33 = v62;
    v32(v27, v19);
    v32(v33, v19);
    sub_23DD290A0((uint64_t)v18, &qword_254326668, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    return sub_23DD254A0(v59, v60);
  }
  v51 = v20;
  v50 = (void (*)(char *, char *, uint64_t))v20[4];
  v50(v61, v18, v19);
  v29(v13, *MEMORY[0x24BDCF260], v10);
  v18 = v58;
  sub_23DDC51C8();
  v30(v13, v10);
  if (v31(v18, 1, v19) == 1)
  {
    v32 = (void (*)(char *, uint64_t))v51[1];
    v32(v61, v19);
    goto LABEL_5;
  }
  v35 = v57;
  v36 = v50;
  v50(v57, v18, v19);
  sub_23DCF67EC();
  v37 = v62;
  v38 = sub_23DDC66A4();
  v39 = v51;
  v40 = (void (*)(char *, uint64_t))v51[1];
  v40(v61, v19);
  result = ((uint64_t (*)(char *, uint64_t))v40)(v27, v19);
  if ((v38 & 1) != 0)
  {
    v41 = v55;
    v42 = v52;
    v43 = &v52[*(int *)(v55 + 48)];
    v36(v52, v37, v19);
    v36(v43, v35, v19);
    v44 = v56;
    v45 = &v56[*(int *)(v41 + 48)];
    v46 = (void (*)(char *, char *, uint64_t))v39[2];
    v46(v56, v42, v19);
    v46(v45, v43, v19);
    v47 = (uint64_t)v54;
    v36(v54, v44, v19);
    v40(v45, v19);
    v48 = &v44[*(int *)(v41 + 48)];
    v36(v44, v42, v19);
    v36(v48, v43, v19);
    v36((char *)(v47 + *(int *)(v53 + 36)), v48, v19);
    v40(v44, v19);
    return sub_23DD4845C(v47, v60);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23DD67E40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v2 = sub_23DDC57A4();
  v37 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v39 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23DDC51D4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, &qword_254326640, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v34 - v9;
  v11 = sub_23DDC4EE0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23DDC512C();
  v16 = ((uint64_t (*)(uint64_t))MEMORY[0x24BDAC7A8])(v15);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a1;
  if (a1 < 1)
    return MEMORY[0x24BEE4AF8];
  v34 = v17;
  v35 = v16;
  v20 = v19;
  sub_23DDC5198();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDCF220], v4);
  sub_23DDC51A4();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_23DD290A0((uint64_t)v10, &qword_254326640, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
    v21 = v39;
    sub_23DDC578C();
    v22 = sub_23DDC5798();
    v23 = sub_23DDC68D8();
    v24 = os_log_type_enabled(v22, v23);
    v26 = v37;
    v25 = v38;
    if (v24)
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v41 = v28;
      *(_DWORD *)v27 = 136315138;
      v40 = sub_23DD02158(0x7261646E656C6143, 0xE800000000000000, &v41);
      sub_23DDC698C();
      _os_log_impl(&dword_23DCF2000, v22, v23, "[%s] Unable to compute day date interval; returning no dates",
        v27,
        0xCu);
      swift_arrayDestroy();
      MEMORY[0x242643C80](v28, -1, -1);
      MEMORY[0x242643C80](v27, -1, -1);

      (*(void (**)(char *, uint64_t))(v26 + 8))(v39, v25);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v25);
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v35);
    return MEMORY[0x24BEE4AF8];
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  v29 = sub_23DDC4ED4();
  v30 = MEMORY[0x24BDAC7A8](v29);
  *(&v34 - 2) = (uint64_t)v20;
  *((double *)&v34 - 1) = v30;
  v32 = sub_23DD8F548((void (*)(uint64_t *))sub_23DD68208, (uint64_t)(&v34 - 4), 0, v31);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v35);
  return v32;
}

uint64_t sub_23DD68208()
{
  return sub_23DDC50FC();
}

unint64_t sub_23DD6824C(long double a1)
{
  char *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char *v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  uint64_t v62;

  v2 = v1;
  sub_23DCF6834(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE08B8]);
  MEMORY[0x24BDAC7A8](v4);
  v59 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v58 = (uint64_t)&v51 - v7;
  v8 = sub_23DDC6398();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v52 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v51 - v15;
  v17 = *((_QWORD *)v1 + 1);
  v61 = *v1;
  v62 = v17;
  sub_23DD98D84((uint64_t)&v51 - v15, (uint64_t)v13, a1);
  v18 = fmod(a1, 1.0);
  v19 = sub_23DD68754((uint64_t)v16);
  v20 = type metadata accessor for OvernightMetricsChartBaselineBandColorValues();
  if ((v19 & 1) != 0)
    v21 = 8;
  else
    v21 = 16;
  v22 = *(_QWORD *)&v1[*(int *)(v20 + 32) + v21];
  swift_retain();
  v60 = v13;
  if ((sub_23DD68754((uint64_t)v13) & 1) != 0)
    v23 = 8;
  else
    v23 = 16;
  v24 = *(_QWORD *)&v1[*(int *)(v20 + 32) + v23];
  swift_retain();
  v25 = sub_23DDC61E8();
  v56 = v24;
  if ((v25 & 1) != 0 || v18 == 0.0)
  {
    swift_retain();
    v55 = v22;
  }
  else if (v18 == 1.0)
  {
    swift_retain();
    v55 = v24;
  }
  else
  {
    v26 = v52;
    sub_23DDC638C();
    v55 = sub_23DDC61F4();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v26, v8);
  }
  v27 = sub_23DD68B84((uint64_t)v16);
  v28 = (uint64_t *)&v2[*(int *)(v20 + 32)];
  if ((v27 & 1) == 0)
    v28 += 2;
  v29 = *v28;
  swift_retain();
  v30 = sub_23DD68B84((uint64_t)v60);
  v31 = (uint64_t *)&v2[*(int *)(v20 + 32)];
  if ((v30 & 1) == 0)
    v31 += 2;
  v32 = *v31;
  swift_retain();
  v33 = sub_23DDC61E8();
  v51 = v9;
  v57 = v22;
  if ((v33 & 1) != 0 || v18 == 0.0)
  {
    v34 = v8;
    swift_retain();
    v54 = v29;
  }
  else if (v18 == 1.0)
  {
    v34 = v8;
    swift_retain();
    v54 = v32;
  }
  else
  {
    v35 = v52;
    sub_23DDC638C();
    v54 = sub_23DDC61F4();
    v36 = *(void (**)(char *, uint64_t))(v9 + 8);
    v34 = v8;
    v36(v35, v8);
  }
  if ((sub_23DD68F78((uint64_t)v16) & 1) != 0)
    v37 = 8;
  else
    v37 = 16;
  v38 = *(_QWORD *)&v2[*(int *)(v20 + 32) + v37];
  swift_retain();
  if ((sub_23DD68F78((uint64_t)v60) & 1) != 0)
    v39 = 8;
  else
    v39 = 16;
  v40 = *(_QWORD *)&v2[*(int *)(v20 + 32) + v39];
  swift_retain();
  v41 = sub_23DDC61E8();
  v53 = v29;
  if ((v41 & 1) != 0 || v18 == 0.0)
  {
    swift_retain();
    v42 = v38;
  }
  else if (v18 == 1.0)
  {
    swift_retain();
    v42 = v40;
  }
  else
  {
    v43 = v52;
    sub_23DDC638C();
    v42 = sub_23DDC61F4();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v43, v34);
  }
  v44 = &v2[*(int *)(v20 + 36)];
  if ((*v2 & 1) != 0)
    v44 += *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
  v45 = (uint64_t)v44;
  v46 = v59;
  sub_23DD254A0(v45, v59);
  v47 = v58;
  sub_23DD4845C(v46, v58);
  v48 = sub_23DD68B84((uint64_t)v16);
  v49 = sub_23DD75EF4(v47, v55, v54, v42, v48 & 1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_23DD254E4(v47);
  sub_23DCF59A8((uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  sub_23DCF59A8((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  return v49;
}

uint64_t sub_23DD68754(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v47 = a1;
  v2 = sub_23DDC54C8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v45 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23DDC53A8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v46 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD2ED80();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD6936C();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v1;
  v19 = (uint64_t)&v16[*(int *)(v18 + 48)];
  *v16 = *v1;
  sub_23DCF58EC(v47, v19, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  if ((v17 & 1) != 0)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v19, 1, v8) == 1)
    {
      v20 = *(_QWORD *)&v1[*(int *)(type metadata accessor for OvernightMetricsChartBaselineBandColorValues() + 28)];
      v21 = *(_QWORD *)(v20 + 16);
      if (!v21)
        return 0;
      v22 = type metadata accessor for OvernightMetricsChartPoint();
      v23 = *(_QWORD *)(v22 - 8);
      v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      v25 = *(_QWORD *)(v23 + 72);
      v26 = (unsigned __int8 *)(v20 + *(int *)(v22 + 28) + v24);
      v27 = v21 - 1;
      do
      {
        v28 = *v26;
        if ((v28 & 1) != 0)
          break;
        v29 = v27--;
        v26 += v25;
      }
      while (v29);
      return v28;
    }
    v33 = (uint64_t)v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v46, v19, v8);
    v34 = &v1[*(int *)(type metadata accessor for OvernightMetricsChartBaselineBandColorValues() + 28)];
    if (*(_QWORD *)(*(_QWORD *)&v34[*(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 24)]
                   + 16)
      && (sub_23DD768A4(v33), (v35 & 1) != 0))
    {
      v36 = swift_bridgeObjectRetain();
      v37 = *(_QWORD *)(v36 + 16);
      if (!v37)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        v28 = 0;
LABEL_24:
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v33, v8);
        return v28;
      }
    }
    else
    {
      v36 = MEMORY[0x24BEE4AF8];
      v37 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (!v37)
        goto LABEL_13;
    }
    v44 = v9;
    v47 = v8;
    v38 = v36 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    v39 = *MEMORY[0x24BE401B0];
    v40 = *(_QWORD *)(v45 + 72);
    v45 = v36;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_23DCF58EC(v38, (uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 104))(v5, v39, v2);
      v41 = sub_23DDC54BC();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_23DCF59A8((uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      if ((v41 & 1) != 0)
        break;
      v38 += v40;
      if (!--v37)
      {
        swift_bridgeObjectRelease_n();
        v28 = 0;
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease_n();
    v28 = 1;
LABEL_23:
    v33 = (uint64_t)v46;
    v8 = v47;
    v9 = v44;
    goto LABEL_24;
  }
  v30 = type metadata accessor for OvernightMetricsChartBaselineBandColorValues();
  v31 = (uint64_t (*)(_QWORD))sub_23DD2ED80;
  sub_23DCF58EC((uint64_t)&v1[*(int *)(v30 + 24)], (uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DD2ED80);
  v32 = type metadata accessor for OvernightMetricsChartPoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v13, 1, v32) == 1)
  {
    v28 = 0;
  }
  else
  {
    v28 = v13[*(int *)(v32 + 28)];
    v31 = (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint;
  }
  sub_23DCF59A8((uint64_t)v13, v31);
  sub_23DCF59A8(v19, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  return v28;
}

uint64_t type metadata accessor for OvernightMetricsChartBaselineBandColorValues()
{
  uint64_t result;

  result = qword_256CFE768;
  if (!qword_256CFE768)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD68B84(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v47 = a1;
  v2 = sub_23DDC54C8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v45 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23DDC53A8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v46 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD2ED80();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD6936C();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v1;
  v19 = (uint64_t)&v16[*(int *)(v18 + 48)];
  *v16 = *v1;
  sub_23DCF58EC(v47, v19, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  if ((v17 & 1) != 0)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v19, 1, v8) == 1)
    {
      v20 = *(_QWORD *)&v1[*(int *)(type metadata accessor for OvernightMetricsChartBaselineBandColorValues() + 28)];
      v21 = *(_QWORD *)(v20 + 16);
      if (!v21)
        return 0;
      v22 = type metadata accessor for OvernightMetricsChartPoint();
      v23 = *(_QWORD *)(v22 - 8);
      v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      v25 = *(_QWORD *)(v23 + 72);
      v26 = (unsigned __int8 *)(v20 + *(int *)(v22 + 32) + v24);
      v27 = v21 - 1;
      do
      {
        v28 = *v26;
        if ((v28 & 1) != 0)
          break;
        v29 = v27--;
        v26 += v25;
      }
      while (v29);
      return v28;
    }
    v33 = (uint64_t)v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v46, v19, v8);
    v34 = &v1[*(int *)(type metadata accessor for OvernightMetricsChartBaselineBandColorValues() + 28)];
    if (*(_QWORD *)(*(_QWORD *)&v34[*(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 24)]
                   + 16)
      && (sub_23DD768A4(v33), (v35 & 1) != 0))
    {
      v36 = swift_bridgeObjectRetain();
      v37 = *(_QWORD *)(v36 + 16);
      if (!v37)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        v28 = 0;
LABEL_24:
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v33, v8);
        return v28;
      }
    }
    else
    {
      v36 = MEMORY[0x24BEE4AF8];
      v37 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (!v37)
        goto LABEL_13;
    }
    v44 = v9;
    v47 = v8;
    v38 = v36 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    v39 = *MEMORY[0x24BE401B8];
    v40 = *(_QWORD *)(v45 + 72);
    v45 = v36;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_23DCF58EC(v38, (uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 104))(v5, v39, v2);
      v41 = sub_23DDC54BC();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_23DCF59A8((uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      if ((v41 & 1) != 0)
        break;
      v38 += v40;
      if (!--v37)
      {
        swift_bridgeObjectRelease_n();
        v28 = 0;
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease_n();
    v28 = 1;
LABEL_23:
    v33 = (uint64_t)v46;
    v8 = v47;
    v9 = v44;
    goto LABEL_24;
  }
  v30 = type metadata accessor for OvernightMetricsChartBaselineBandColorValues();
  v31 = (uint64_t (*)(_QWORD))sub_23DD2ED80;
  sub_23DCF58EC((uint64_t)&v1[*(int *)(v30 + 24)], (uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DD2ED80);
  v32 = type metadata accessor for OvernightMetricsChartPoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v13, 1, v32) == 1)
  {
    v28 = 0;
  }
  else
  {
    v28 = v13[*(int *)(v32 + 32)];
    v31 = (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint;
  }
  sub_23DCF59A8((uint64_t)v13, v31);
  sub_23DCF59A8(v19, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  return v28;
}

uint64_t sub_23DD68F78(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v47 = a1;
  v2 = sub_23DDC54C8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v45 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23DDC53A8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v46 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD2ED80();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD6936C();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v1;
  v19 = (uint64_t)&v16[*(int *)(v18 + 48)];
  *v16 = *v1;
  sub_23DCF58EC(v47, v19, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  if ((v17 & 1) != 0)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v19, 1, v8) == 1)
    {
      v20 = *(_QWORD *)&v1[*(int *)(type metadata accessor for OvernightMetricsChartBaselineBandColorValues() + 28)];
      v21 = *(_QWORD *)(v20 + 16);
      if (!v21)
        return 0;
      v22 = type metadata accessor for OvernightMetricsChartPoint();
      v23 = *(_QWORD *)(v22 - 8);
      v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      v25 = *(_QWORD *)(v23 + 72);
      v26 = (unsigned __int8 *)(v20 + *(int *)(v22 + 36) + v24);
      v27 = v21 - 1;
      do
      {
        v28 = *v26;
        if ((v28 & 1) != 0)
          break;
        v29 = v27--;
        v26 += v25;
      }
      while (v29);
      return v28;
    }
    v33 = (uint64_t)v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v46, v19, v8);
    v34 = &v1[*(int *)(type metadata accessor for OvernightMetricsChartBaselineBandColorValues() + 28)];
    if (*(_QWORD *)(*(_QWORD *)&v34[*(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 24)]
                   + 16)
      && (sub_23DD768A4(v33), (v35 & 1) != 0))
    {
      v36 = swift_bridgeObjectRetain();
      v37 = *(_QWORD *)(v36 + 16);
      if (!v37)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        v28 = 0;
LABEL_24:
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v33, v8);
        return v28;
      }
    }
    else
    {
      v36 = MEMORY[0x24BEE4AF8];
      v37 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (!v37)
        goto LABEL_13;
    }
    v44 = v9;
    v47 = v8;
    v38 = v36 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    v39 = *MEMORY[0x24BE401A8];
    v40 = *(_QWORD *)(v45 + 72);
    v45 = v36;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_23DCF58EC(v38, (uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 104))(v5, v39, v2);
      v41 = sub_23DDC54BC();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_23DCF59A8((uint64_t)v7, type metadata accessor for IndividualOvernightMetricChartPoint);
      if ((v41 & 1) != 0)
        break;
      v38 += v40;
      if (!--v37)
      {
        swift_bridgeObjectRelease_n();
        v28 = 0;
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease_n();
    v28 = 1;
LABEL_23:
    v33 = (uint64_t)v46;
    v8 = v47;
    v9 = v44;
    goto LABEL_24;
  }
  v30 = type metadata accessor for OvernightMetricsChartBaselineBandColorValues();
  v31 = (uint64_t (*)(_QWORD))sub_23DD2ED80;
  sub_23DCF58EC((uint64_t)&v1[*(int *)(v30 + 24)], (uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DD2ED80);
  v32 = type metadata accessor for OvernightMetricsChartPoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v13, 1, v32) == 1)
  {
    v28 = 0;
  }
  else
  {
    v28 = v13[*(int *)(v32 + 36)];
    v31 = (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint;
  }
  sub_23DCF59A8((uint64_t)v13, v31);
  sub_23DCF59A8(v19, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartAnimationValues.Selection);
  return v28;
}

void sub_23DD6936C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFE708)
  {
    type metadata accessor for OvernightMetricsChartAnimationValues.Selection();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFE708);
  }
}

_QWORD *sub_23DD693D0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, int *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, _QWORD, uint64_t, int *);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  int *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, _QWORD, uint64_t, int *);
  uint64_t v86;
  char *v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  int *v99;
  unsigned int (*v100)(char *, uint64_t, int *);
  int *v101;
  _QWORD *v102;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    v15 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    a1[1] = a2[1];
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v11 = *((_QWORD *)v10 - 1);
    v12 = *(unsigned int (**)(char *, uint64_t, int *))(v11 + 48);
    swift_bridgeObjectRetain();
    v100 = v12;
    v98 = v11;
    v99 = v10;
    if (v12(v9, 1, v10))
    {
      sub_23DD2ED80();
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v16 = sub_23DDC512C();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(v8, v9, v16);
      v18 = v10[5];
      v101 = v6;
      v19 = &v8[v18];
      v20 = &v9[v18];
      v17(&v8[v18], &v9[v18], v16);
      sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
      v17(&v19[*(int *)(v21 + 36)], &v20[*(int *)(v21 + 36)], v16);
      v22 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v19[v22[5]] = *(_QWORD *)&v20[v22[5]];
      *(_QWORD *)&v19[v22[6]] = *(_QWORD *)&v20[v22[6]];
      *(_QWORD *)&v19[v22[7]] = *(_QWORD *)&v20[v22[7]];
      v23 = v10[6];
      v24 = &v8[v23];
      v25 = &v9[v23];
      *(_OWORD *)v24 = *(_OWORD *)v25;
      v24[16] = v25[16];
      v8[v10[7]] = v9[v10[7]];
      v8[v10[8]] = v9[v10[8]];
      v8[v10[9]] = v9[v10[9]];
      v26 = v10[10];
      v27 = &v8[v26];
      v28 = &v9[v26];
      v29 = *((_QWORD *)v28 + 1);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *((_QWORD *)v27 + 1) = v29;
      v30 = v10[11];
      v31 = &v8[v30];
      v32 = &v9[v30];
      v33 = *((_QWORD *)v32 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v33;
      v34 = *(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v6 = v101;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34(v8, 0, 1, v10);
    }
    v35 = v6[7];
    v36 = (char *)a1 + v35;
    v37 = (char *)a2 + v35;
    *(_QWORD *)((char *)a1 + v35) = *(_QWORD *)((char *)a2 + v35);
    v38 = type metadata accessor for OvernightMetricsChartPointCollection();
    v39 = *(int *)(v38 + 20);
    v40 = &v36[v39];
    v41 = a2;
    v42 = v6;
    v43 = &v37[v39];
    v44 = sub_23DDC51E0();
    v102 = a1;
    v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
    swift_bridgeObjectRetain();
    v45(v40, v43, v44);
    *(_QWORD *)&v36[*(int *)(v38 + 24)] = *(_QWORD *)&v37[*(int *)(v38 + 24)];
    v46 = v42[8];
    v47 = v42[9];
    v48 = (_QWORD *)((char *)v102 + v46);
    v49 = (_QWORD *)((char *)v41 + v46);
    v50 = v49[1];
    *v48 = *v49;
    v48[1] = v50;
    v48[2] = v49[2];
    v51 = (char *)v102 + v47;
    v52 = (char *)v41 + v47;
    v53 = sub_23DDC512C();
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    v54(v51, v52, v53);
    sub_23DCF6834(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE08B8]);
    v56 = v55;
    v54(&v51[*(int *)(v55 + 36)], &v52[*(int *)(v55 + 36)], v53);
    v57 = type metadata accessor for OvernightMetricsChart.Derivations(0);
    v58 = *(int *)(v57 + 20);
    v59 = &v51[v58];
    v60 = &v52[v58];
    v54(&v51[v58], &v52[v58], v53);
    v54(&v59[*(int *)(v56 + 36)], &v60[*(int *)(v56 + 36)], v53);
    *(_QWORD *)&v51[*(int *)(v57 + 24)] = *(_QWORD *)&v52[*(int *)(v57 + 24)];
    v61 = v42[10];
    v62 = (char *)v102 + v61;
    v63 = (char *)v41 + v61;
    *(_QWORD *)((char *)v102 + v61) = *(_QWORD *)((char *)v41 + v61);
    v64 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    v65 = v64[5];
    v66 = &v62[v65];
    v67 = &v63[v65];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v100(v67, 1, v99))
    {
      sub_23DD2ED80();
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v54(v66, v67, v53);
      v69 = v99[5];
      v70 = &v66[v69];
      v71 = &v67[v69];
      v54(&v66[v69], &v67[v69], v53);
      sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
      v54(&v70[*(int *)(v72 + 36)], &v71[*(int *)(v72 + 36)], v53);
      v73 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v70[v73[5]] = *(_QWORD *)&v71[v73[5]];
      *(_QWORD *)&v70[v73[6]] = *(_QWORD *)&v71[v73[6]];
      *(_QWORD *)&v70[v73[7]] = *(_QWORD *)&v71[v73[7]];
      v74 = v99[6];
      v75 = &v66[v74];
      v76 = &v67[v74];
      *(_OWORD *)v75 = *(_OWORD *)v76;
      v75[16] = v76[16];
      v66[v99[7]] = v67[v99[7]];
      v66[v99[8]] = v67[v99[8]];
      v66[v99[9]] = v67[v99[9]];
      v77 = v99[10];
      v78 = &v66[v77];
      v79 = &v67[v77];
      v80 = *((_QWORD *)v79 + 1);
      *(_QWORD *)v78 = *(_QWORD *)v79;
      *((_QWORD *)v78 + 1) = v80;
      v81 = v99[11];
      v82 = &v66[v81];
      v83 = &v67[v81];
      v84 = *((_QWORD *)v83 + 1);
      *(_QWORD *)v82 = *(_QWORD *)v83;
      *((_QWORD *)v82 + 1) = v84;
      v85 = *(void (**)(char *, _QWORD, uint64_t, int *))(v98 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v85(v66, 0, 1, v99);
    }
    *(_OWORD *)&v62[v64[6]] = *(_OWORD *)&v63[v64[6]];
    v86 = v64[7];
    v87 = &v62[v86];
    v88 = &v63[v86];
    v89 = *((_OWORD *)v88 + 1);
    *(_OWORD *)v87 = *(_OWORD *)v88;
    *((_OWORD *)v87 + 1) = v89;
    *((_QWORD *)v87 + 10) = *((_QWORD *)v88 + 10);
    v90 = *((_OWORD *)v88 + 4);
    v91 = *((_OWORD *)v88 + 2);
    *((_OWORD *)v87 + 3) = *((_OWORD *)v88 + 3);
    *((_OWORD *)v87 + 4) = v90;
    *((_OWORD *)v87 + 2) = v91;
    *(_QWORD *)&v62[v64[8]] = *(_QWORD *)&v63[v64[8]];
    *(_QWORD *)&v62[v64[9]] = *(_QWORD *)&v63[v64[9]];
    v92 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    v93 = &v62[v92];
    v94 = &v63[v92];
    v95 = *((_QWORD *)v94 + 1);
    *(_QWORD *)v93 = *(_QWORD *)v94;
    *((_QWORD *)v93 + 1) = v95;
    v96 = *((_QWORD *)v94 + 3);
    *((_QWORD *)v93 + 2) = *((_QWORD *)v94 + 2);
    *((_QWORD *)v93 + 3) = v96;
    *((_QWORD *)v93 + 4) = *((_QWORD *)v94 + 4);
    *(_OWORD *)(v93 + 40) = *(_OWORD *)(v94 + 40);
    *(_OWORD *)(v93 + 56) = *(_OWORD *)(v94 + 56);
    *(_OWORD *)(v93 + 72) = *(_OWORD *)(v94 + 72);
    *(_OWORD *)(v93 + 88) = *(_OWORD *)(v94 + 88);
    *(_OWORD *)(v93 + 104) = *(_OWORD *)(v94 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v102;
  }
  return (_QWORD *)v15;
}

uint64_t sub_23DD699CC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for OvernightMetricsChartPoint();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    v7 = sub_23DDC512C();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v4, v7);
    v9 = v4 + *(int *)(v5 + 20);
    v8(v9, v7);
    sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
    v8(v9 + *(int *)(v10 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v11 = a1 + a2[7];
  swift_bridgeObjectRelease();
  v12 = v11 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v13 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v14 = a1 + a2[9];
  v15 = sub_23DDC512C();
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
  v16(v14, v15);
  sub_23DCF6834(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE08B8]);
  v18 = v17;
  v16(v14 + *(int *)(v17 + 36), v15);
  v19 = v14 + *(int *)(type metadata accessor for OvernightMetricsChart.Derivations(0) + 20);
  v16(v19, v15);
  v16(v19 + *(int *)(v18 + 36), v15);
  swift_bridgeObjectRelease();
  v20 = a1 + a2[10];
  swift_bridgeObjectRelease();
  v21 = v20 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  if (!v6(v21, 1, v5))
  {
    v16(v21, v15);
    v22 = v21 + *(int *)(v5 + 20);
    v16(v22, v15);
    sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
    v16(v22 + *(int *)(v23 + 36), v15);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DD69CE4(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, int *);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  int *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, _QWORD, uint64_t, int *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, _QWORD, uint64_t, int *);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  int *v96;
  unsigned int (*v97)(char *, uint64_t, int *);
  uint64_t v98;
  uint64_t v99;

  v3 = a3;
  v4 = a2;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned int (**)(char *, uint64_t, int *))(v10 + 48);
  swift_bridgeObjectRetain();
  v97 = v11;
  v95 = v10;
  v96 = v9;
  if (v11(v8, 1, v9))
  {
    sub_23DD2ED80();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = sub_23DDC512C();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v7, v8, v13);
    v15 = v9[5];
    v98 = v4;
    v16 = v3;
    v17 = &v7[v15];
    v18 = &v8[v15];
    v14(&v7[v15], &v8[v15], v13);
    sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
    v14(&v17[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v13);
    v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v17[v20[5]] = *(_QWORD *)&v18[v20[5]];
    *(_QWORD *)&v17[v20[6]] = *(_QWORD *)&v18[v20[6]];
    *(_QWORD *)&v17[v20[7]] = *(_QWORD *)&v18[v20[7]];
    v21 = v9[6];
    v22 = &v7[v21];
    v23 = &v8[v21];
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[16] = v23[16];
    v7[v9[7]] = v8[v9[7]];
    v7[v9[8]] = v8[v9[8]];
    v7[v9[9]] = v8[v9[9]];
    v24 = v9[10];
    v25 = &v7[v24];
    v26 = &v8[v24];
    v27 = *((_QWORD *)v26 + 1);
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *((_QWORD *)v25 + 1) = v27;
    v28 = v9[11];
    v29 = &v7[v28];
    v30 = &v8[v28];
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    v32 = *(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v3 = v16;
    v4 = v98;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32(v7, 0, 1, v9);
  }
  v33 = v3[7];
  v34 = a1 + v33;
  v35 = v4 + v33;
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(v4 + v33);
  v36 = type metadata accessor for OvernightMetricsChartPointCollection();
  v37 = *(int *)(v36 + 20);
  v38 = v34 + v37;
  v39 = v3;
  v40 = v35 + v37;
  v41 = sub_23DDC51E0();
  v99 = a1;
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
  swift_bridgeObjectRetain();
  v42(v38, v40, v41);
  *(_QWORD *)(v34 + *(int *)(v36 + 24)) = *(_QWORD *)(v35 + *(int *)(v36 + 24));
  v43 = v39[8];
  v44 = v39[9];
  v45 = (_QWORD *)(v99 + v43);
  v46 = (_QWORD *)(v4 + v43);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  v45[2] = v46[2];
  v48 = v99 + v44;
  v49 = v4 + v44;
  v50 = sub_23DDC512C();
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  v51(v48, v49, v50);
  sub_23DCF6834(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE08B8]);
  v53 = v52;
  v51(v48 + *(int *)(v52 + 36), v49 + *(int *)(v52 + 36), v50);
  v54 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v55 = *(int *)(v54 + 20);
  v56 = v48 + v55;
  v57 = v49 + v55;
  v51(v48 + v55, v49 + v55, v50);
  v51(v56 + *(int *)(v53 + 36), v57 + *(int *)(v53 + 36), v50);
  *(_QWORD *)(v48 + *(int *)(v54 + 24)) = *(_QWORD *)(v49 + *(int *)(v54 + 24));
  v58 = v39[10];
  v59 = v99 + v58;
  v60 = v4 + v58;
  *(_QWORD *)(v99 + v58) = *(_QWORD *)(v4 + v58);
  v61 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v62 = v61[5];
  v63 = (char *)(v59 + v62);
  v64 = (char *)(v60 + v62);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v97(v64, 1, v96))
  {
    sub_23DD2ED80();
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    v51((uint64_t)v63, (uint64_t)v64, v50);
    v66 = v96[5];
    v67 = &v63[v66];
    v68 = &v64[v66];
    v51((uint64_t)&v63[v66], (uint64_t)&v64[v66], v50);
    sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
    v51((uint64_t)&v67[*(int *)(v69 + 36)], (uint64_t)&v68[*(int *)(v69 + 36)], v50);
    v70 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v67[v70[5]] = *(_QWORD *)&v68[v70[5]];
    *(_QWORD *)&v67[v70[6]] = *(_QWORD *)&v68[v70[6]];
    *(_QWORD *)&v67[v70[7]] = *(_QWORD *)&v68[v70[7]];
    v71 = v96[6];
    v72 = &v63[v71];
    v73 = &v64[v71];
    *(_OWORD *)v72 = *(_OWORD *)v73;
    v72[16] = v73[16];
    v63[v96[7]] = v64[v96[7]];
    v63[v96[8]] = v64[v96[8]];
    v63[v96[9]] = v64[v96[9]];
    v74 = v96[10];
    v75 = &v63[v74];
    v76 = &v64[v74];
    v77 = *((_QWORD *)v76 + 1);
    *(_QWORD *)v75 = *(_QWORD *)v76;
    *((_QWORD *)v75 + 1) = v77;
    v78 = v96[11];
    v79 = &v63[v78];
    v80 = &v64[v78];
    v81 = *((_QWORD *)v80 + 1);
    *(_QWORD *)v79 = *(_QWORD *)v80;
    *((_QWORD *)v79 + 1) = v81;
    v82 = *(void (**)(char *, _QWORD, uint64_t, int *))(v95 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v82(v63, 0, 1, v96);
  }
  *(_OWORD *)(v59 + v61[6]) = *(_OWORD *)(v60 + v61[6]);
  v83 = v61[7];
  v84 = v59 + v83;
  v85 = v60 + v83;
  v86 = *(_OWORD *)(v85 + 16);
  *(_OWORD *)v84 = *(_OWORD *)v85;
  *(_OWORD *)(v84 + 16) = v86;
  *(_QWORD *)(v84 + 80) = *(_QWORD *)(v85 + 80);
  v87 = *(_OWORD *)(v85 + 64);
  v88 = *(_OWORD *)(v85 + 32);
  *(_OWORD *)(v84 + 48) = *(_OWORD *)(v85 + 48);
  *(_OWORD *)(v84 + 64) = v87;
  *(_OWORD *)(v84 + 32) = v88;
  *(_QWORD *)(v59 + v61[8]) = *(_QWORD *)(v60 + v61[8]);
  *(_QWORD *)(v59 + v61[9]) = *(_QWORD *)(v60 + v61[9]);
  v89 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v90 = v59 + v89;
  v91 = v60 + v89;
  v92 = *(_QWORD *)(v91 + 8);
  *(_QWORD *)v90 = *(_QWORD *)v91;
  *(_QWORD *)(v90 + 8) = v92;
  v93 = *(_QWORD *)(v91 + 24);
  *(_QWORD *)(v90 + 16) = *(_QWORD *)(v91 + 16);
  *(_QWORD *)(v90 + 24) = v93;
  *(_QWORD *)(v90 + 32) = *(_QWORD *)(v91 + 32);
  *(_OWORD *)(v90 + 40) = *(_OWORD *)(v91 + 40);
  *(_OWORD *)(v90 + 56) = *(_OWORD *)(v91 + 56);
  *(_OWORD *)(v90 + 72) = *(_OWORD *)(v91 + 72);
  *(_OWORD *)(v90 + 88) = *(_OWORD *)(v91 + 88);
  *(_OWORD *)(v90 + 104) = *(_OWORD *)(v91 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v99;
}

uint64_t sub_23DD6A2B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, _QWORD, uint64_t, int *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  int v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  void (*v81)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  int *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  __int128 v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  int *v128;
  uint64_t (*v129)(uint64_t, uint64_t, int *);
  uint64_t v130;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v130 = a1;
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  v12 = v11((uint64_t)v7, 1, v9);
  v129 = v11;
  v13 = v11((uint64_t)v8, 1, v9);
  v127 = v10;
  v128 = v9;
  if (v12)
  {
    if (!v13)
    {
      v14 = sub_23DDC512C();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      v15(v7, v8, v14);
      v16 = v9[5];
      v17 = &v7[v16];
      v18 = &v8[v16];
      v15(&v7[v16], &v8[v16], v14);
      sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
      v15(&v17[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v14);
      v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v17[v20[5]] = *(_QWORD *)&v18[v20[5]];
      *(_QWORD *)&v17[v20[6]] = *(_QWORD *)&v18[v20[6]];
      *(_QWORD *)&v17[v20[7]] = *(_QWORD *)&v18[v20[7]];
      v21 = v9[6];
      v22 = &v7[v21];
      v23 = &v8[v21];
      v24 = v23[16];
      *(_OWORD *)v22 = *(_OWORD *)v23;
      v22[16] = v24;
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      v25 = v9[10];
      v26 = &v7[v25];
      v27 = &v8[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
      v28 = v9[11];
      v29 = &v7[v28];
      v30 = &v8[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
      v31 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v10 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_23DCF59A8((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_23DD2ED80();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  v94 = sub_23DDC512C();
  v95 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 24);
  v95(v7, v8, v94);
  v96 = v9[5];
  v97 = &v7[v96];
  v98 = &v8[v96];
  v95(&v7[v96], &v8[v96], v94);
  sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
  v95(&v97[*(int *)(v99 + 36)], &v98[*(int *)(v99 + 36)], v94);
  v100 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v97[v100[5]] = *(_QWORD *)&v98[v100[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v97[v100[6]] = *(_QWORD *)&v98[v100[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v97[v100[7]] = *(_QWORD *)&v98[v100[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v101 = v9[6];
  v102 = &v7[v101];
  v103 = &v8[v101];
  v104 = *(_OWORD *)v103;
  v102[16] = v103[16];
  *(_OWORD *)v102 = v104;
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v7[v9[9]] = v8[v9[9]];
  v105 = v9[10];
  v106 = &v7[v105];
  v107 = &v8[v105];
  *(_QWORD *)v106 = *(_QWORD *)v107;
  *((_QWORD *)v106 + 1) = *((_QWORD *)v107 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v108 = v9[11];
  v109 = &v7[v108];
  v110 = &v8[v108];
  *(_QWORD *)v109 = *(_QWORD *)v110;
  *((_QWORD *)v109 + 1) = *((_QWORD *)v110 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  v33 = a3[7];
  v34 = v130 + v33;
  v35 = a2 + v33;
  *(_QWORD *)(v130 + v33) = *(_QWORD *)(a2 + v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36 = type metadata accessor for OvernightMetricsChartPointCollection();
  v37 = *(int *)(v36 + 20);
  v38 = v34 + v37;
  v39 = v35 + v37;
  v40 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 24))(v38, v39, v40);
  *(_QWORD *)(v34 + *(int *)(v36 + 24)) = *(_QWORD *)(v35 + *(int *)(v36 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = a3[8];
  v42 = v130 + v41;
  v43 = a2 + v41;
  *(_QWORD *)(v130 + v41) = *(_QWORD *)(a2 + v41);
  swift_retain();
  swift_release();
  *(_QWORD *)(v42 + 8) = *(_QWORD *)(v43 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(v42 + 16) = *(_QWORD *)(v43 + 16);
  swift_retain();
  swift_release();
  v44 = a3[9];
  v45 = v130 + v44;
  v46 = a2 + v44;
  v47 = sub_23DDC512C();
  v126 = *(_QWORD *)(v47 - 8);
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 24);
  v48(v45, v46, v47);
  sub_23DCF6834(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE08B8]);
  v50 = v49;
  v48(v45 + *(int *)(v49 + 36), v46 + *(int *)(v49 + 36), v47);
  v51 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v52 = *(int *)(v51 + 20);
  v53 = a2;
  v54 = a3;
  v55 = v45 + v52;
  v56 = v46 + v52;
  v48(v45 + v52, v46 + v52, v47);
  v48(v55 + *(int *)(v50 + 36), v56 + *(int *)(v50 + 36), v47);
  *(_QWORD *)(v45 + *(int *)(v51 + 24)) = *(_QWORD *)(v46 + *(int *)(v51 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v57 = v54[10];
  v58 = v130 + v57;
  v59 = v53 + v57;
  *(_QWORD *)(v130 + v57) = *(_QWORD *)(v53 + v57);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v60 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v61 = v60[5];
  v62 = (_BYTE *)(v58 + v61);
  v63 = (_BYTE *)(v59 + v61);
  LODWORD(v56) = v129(v58 + v61, 1, v128);
  v64 = v129((uint64_t)v63, 1, v128);
  if (!(_DWORD)v56)
  {
    if (!v64)
    {
      v48((uint64_t)v62, (uint64_t)v63, v47);
      v111 = v128[5];
      v112 = &v62[v111];
      v113 = &v63[v111];
      v48((uint64_t)&v62[v111], (uint64_t)&v63[v111], v47);
      sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
      v48((uint64_t)&v112[*(int *)(v114 + 36)], (uint64_t)&v113[*(int *)(v114 + 36)], v47);
      v115 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v112[v115[5]] = *(_QWORD *)&v113[v115[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v112[v115[6]] = *(_QWORD *)&v113[v115[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v112[v115[7]] = *(_QWORD *)&v113[v115[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v116 = v128[6];
      v117 = &v62[v116];
      v118 = &v63[v116];
      v119 = *(_OWORD *)v118;
      v117[16] = v118[16];
      *(_OWORD *)v117 = v119;
      v62[v128[7]] = v63[v128[7]];
      v62[v128[8]] = v63[v128[8]];
      v62[v128[9]] = v63[v128[9]];
      v120 = v128[10];
      v121 = &v62[v120];
      v122 = &v63[v120];
      *v121 = *v122;
      v121[1] = v122[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v123 = v128[11];
      v124 = &v62[v123];
      v125 = &v63[v123];
      *v124 = *v125;
      v124[1] = v125[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_23DCF59A8((uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_12;
  }
  if (v64)
  {
LABEL_12:
    sub_23DD2ED80();
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_13;
  }
  v65 = *(void (**)(char *, char *, uint64_t))(v126 + 16);
  v65(v62, v63, v47);
  v66 = v128[5];
  v67 = &v62[v66];
  v68 = &v63[v66];
  v65(&v62[v66], &v63[v66], v47);
  sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
  v65(&v67[*(int *)(v69 + 36)], &v68[*(int *)(v69 + 36)], v47);
  v70 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v67[v70[5]] = *(_QWORD *)&v68[v70[5]];
  *(_QWORD *)&v67[v70[6]] = *(_QWORD *)&v68[v70[6]];
  *(_QWORD *)&v67[v70[7]] = *(_QWORD *)&v68[v70[7]];
  v71 = v128[6];
  v72 = &v62[v71];
  v73 = &v63[v71];
  v74 = v73[16];
  *(_OWORD *)v72 = *(_OWORD *)v73;
  v72[16] = v74;
  v62[v128[7]] = v63[v128[7]];
  v62[v128[8]] = v63[v128[8]];
  v62[v128[9]] = v63[v128[9]];
  v75 = v128[10];
  v76 = &v62[v75];
  v77 = &v63[v75];
  *v76 = *v77;
  v76[1] = v77[1];
  v78 = v128[11];
  v79 = &v62[v78];
  v80 = &v63[v78];
  *v79 = *v80;
  v79[1] = v80[1];
  v81 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v127 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v81(v62, 0, 1, v128);
LABEL_13:
  v83 = v60[6];
  v84 = (_QWORD *)(v58 + v83);
  v85 = (_QWORD *)(v59 + v83);
  *v84 = *v85;
  v84[1] = v85[1];
  v86 = v60[7];
  v87 = v58 + v86;
  v88 = v59 + v86;
  *(_QWORD *)v87 = *(_QWORD *)v88;
  v89 = *(_QWORD *)(v88 + 8);
  *(_BYTE *)(v87 + 16) = *(_BYTE *)(v88 + 16);
  *(_QWORD *)(v87 + 8) = v89;
  *(_QWORD *)(v87 + 24) = *(_QWORD *)(v88 + 24);
  *(_QWORD *)(v87 + 32) = *(_QWORD *)(v88 + 32);
  *(_QWORD *)(v87 + 40) = *(_QWORD *)(v88 + 40);
  *(_QWORD *)(v87 + 48) = *(_QWORD *)(v88 + 48);
  *(_QWORD *)(v87 + 56) = *(_QWORD *)(v88 + 56);
  *(_QWORD *)(v87 + 64) = *(_QWORD *)(v88 + 64);
  *(_QWORD *)(v87 + 72) = *(_QWORD *)(v88 + 72);
  *(_QWORD *)(v87 + 80) = *(_QWORD *)(v88 + 80);
  *(_QWORD *)(v58 + v60[8]) = *(_QWORD *)(v59 + v60[8]);
  *(_QWORD *)(v58 + v60[9]) = *(_QWORD *)(v59 + v60[9]);
  v90 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v91 = (_QWORD *)(v58 + v90);
  v92 = (_QWORD *)(v59 + v90);
  *(_QWORD *)(v58 + v90) = *(_QWORD *)(v59 + v90);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v91[1] = v92[1];
  v91[2] = v92[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v91[3] = v92[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v91[4] = v92[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v91[5] = v92[5];
  v91[6] = v92[6];
  v91[7] = v92[7];
  v91[8] = v92[8];
  v91[9] = v92[9];
  v91[10] = v92[10];
  v91[11] = v92[11];
  v91[12] = v92[12];
  v91[13] = v92[13];
  v91[14] = v92[14];
  return v130;
}

uint64_t sub_23DD6ACB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int (*v84)(char *, uint64_t, int *);
  int *v85;

  v3 = a3;
  v4 = a2;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v10 = *((_QWORD *)v9 - 1);
  v84 = *(unsigned int (**)(char *, uint64_t, int *))(v10 + 48);
  v82 = v10;
  v85 = v9;
  if (v84(v8, 1, v9))
  {
    sub_23DD2ED80();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v81 = v4;
    v12 = sub_23DDC512C();
    v13 = v3;
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
    v14(v7, v8, v12);
    v15 = v9[5];
    v16 = &v7[v15];
    v17 = &v8[v15];
    v14(&v7[v15], &v8[v15], v12);
    sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
    v19 = v12;
    v4 = v81;
    v14(&v16[*(int *)(v18 + 36)], &v17[*(int *)(v18 + 36)], v19);
    v3 = v13;
    v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v16[v20[5]] = *(_QWORD *)&v17[v20[5]];
    *(_QWORD *)&v16[v20[6]] = *(_QWORD *)&v17[v20[6]];
    *(_QWORD *)&v16[v20[7]] = *(_QWORD *)&v17[v20[7]];
    v21 = v9[6];
    v22 = &v7[v21];
    v23 = &v8[v21];
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[16] = v23[16];
    v7[v9[7]] = v8[v9[7]];
    v7[v9[8]] = v8[v9[8]];
    v7[v9[9]] = v8[v9[9]];
    *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
    *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v24 = *(int *)(v3 + 28);
  v25 = v3;
  v26 = a1 + v24;
  v27 = v4 + v24;
  *(_QWORD *)(a1 + v24) = *(_QWORD *)(v4 + v24);
  v28 = type metadata accessor for OvernightMetricsChartPointCollection();
  v29 = *(int *)(v28 + 20);
  v30 = v26 + v29;
  v31 = v4;
  v32 = v27 + v29;
  v33 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v30, v32, v33);
  *(_QWORD *)(v26 + *(int *)(v28 + 24)) = *(_QWORD *)(v27 + *(int *)(v28 + 24));
  v83 = v25;
  v34 = *(int *)(v25 + 32);
  v35 = *(int *)(v25 + 36);
  v36 = a1 + v34;
  v37 = v31 + v34;
  *(_QWORD *)(v36 + 16) = *(_QWORD *)(v37 + 16);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  v38 = a1 + v35;
  v39 = v31 + v35;
  v40 = sub_23DDC512C();
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 32);
  v41(v38, v39, v40);
  sub_23DCF6834(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE08B8]);
  v43 = v42;
  v41(v38 + *(int *)(v42 + 36), v39 + *(int *)(v42 + 36), v40);
  v44 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v45 = *(int *)(v44 + 20);
  v46 = a1;
  v47 = v38 + v45;
  v48 = v39 + v45;
  v41(v38 + v45, v39 + v45, v40);
  v49 = *(int *)(v43 + 36);
  v50 = v47 + v49;
  v51 = v46;
  v41(v50, v48 + v49, v40);
  *(_QWORD *)(v38 + *(int *)(v44 + 24)) = *(_QWORD *)(v39 + *(int *)(v44 + 24));
  v52 = *(int *)(v83 + 40);
  v53 = v46 + v52;
  v54 = v31 + v52;
  *(_QWORD *)(v46 + v52) = *(_QWORD *)(v31 + v52);
  v55 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v56 = v55[5];
  v57 = (char *)(v53 + v56);
  v58 = (char *)(v54 + v56);
  if (v84((char *)(v54 + v56), 1, v85))
  {
    sub_23DD2ED80();
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    v41((uint64_t)v57, (uint64_t)v58, v40);
    v60 = v85[5];
    v61 = &v57[v60];
    v62 = &v58[v60];
    v41((uint64_t)&v57[v60], (uint64_t)&v58[v60], v40);
    sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
    v41((uint64_t)&v61[*(int *)(v63 + 36)], (uint64_t)&v62[*(int *)(v63 + 36)], v40);
    v64 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v61[v64[5]] = *(_QWORD *)&v62[v64[5]];
    *(_QWORD *)&v61[v64[6]] = *(_QWORD *)&v62[v64[6]];
    *(_QWORD *)&v61[v64[7]] = *(_QWORD *)&v62[v64[7]];
    v65 = v85[6];
    v66 = &v57[v65];
    v67 = &v58[v65];
    *(_OWORD *)v66 = *(_OWORD *)v67;
    v66[16] = v67[16];
    v57[v85[7]] = v58[v85[7]];
    v57[v85[8]] = v58[v85[8]];
    v57[v85[9]] = v58[v85[9]];
    *(_OWORD *)&v57[v85[10]] = *(_OWORD *)&v58[v85[10]];
    *(_OWORD *)&v57[v85[11]] = *(_OWORD *)&v58[v85[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v82 + 56))(v57, 0, 1, v85);
  }
  *(_OWORD *)(v53 + v55[6]) = *(_OWORD *)(v54 + v55[6]);
  v68 = v55[7];
  v69 = v53 + v68;
  v70 = v54 + v68;
  v71 = *(_OWORD *)(v70 + 16);
  *(_OWORD *)v69 = *(_OWORD *)v70;
  *(_OWORD *)(v69 + 16) = v71;
  *(_QWORD *)(v69 + 80) = *(_QWORD *)(v70 + 80);
  v72 = *(_OWORD *)(v70 + 64);
  v73 = *(_OWORD *)(v70 + 32);
  *(_OWORD *)(v69 + 48) = *(_OWORD *)(v70 + 48);
  *(_OWORD *)(v69 + 64) = v72;
  *(_OWORD *)(v69 + 32) = v73;
  *(_QWORD *)(v53 + v55[8]) = *(_QWORD *)(v54 + v55[8]);
  *(_QWORD *)(v53 + v55[9]) = *(_QWORD *)(v54 + v55[9]);
  v74 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v75 = v53 + v74;
  v76 = v54 + v74;
  v77 = *(_OWORD *)(v76 + 80);
  *(_OWORD *)(v75 + 64) = *(_OWORD *)(v76 + 64);
  *(_OWORD *)(v75 + 80) = v77;
  *(_OWORD *)(v75 + 96) = *(_OWORD *)(v76 + 96);
  *(_QWORD *)(v75 + 112) = *(_QWORD *)(v76 + 112);
  v78 = *(_OWORD *)(v76 + 16);
  *(_OWORD *)v75 = *(_OWORD *)v76;
  *(_OWORD *)(v75 + 16) = v78;
  v79 = *(_OWORD *)(v76 + 48);
  *(_OWORD *)(v75 + 32) = *(_OWORD *)(v76 + 32);
  *(_OWORD *)(v75 + 48) = v79;
  return v51;
}

uint64_t sub_23DD6B1A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  int v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  int *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  int *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  uint64_t (*v117)(uint64_t, uint64_t, int *);
  int *v118;
  uint64_t v119;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  v12 = v11((uint64_t)v7, 1, v9);
  v117 = v11;
  v13 = v11((uint64_t)v8, 1, v9);
  v114 = v10;
  v118 = a3;
  v116 = v9;
  if (v12)
  {
    if (!v13)
    {
      v14 = sub_23DDC512C();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
      v15(v7, v8, v14);
      v16 = v9[5];
      v17 = &v7[v16];
      v18 = &v8[v16];
      v15(&v7[v16], &v8[v16], v14);
      sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
      v15(&v17[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v14);
      v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v17[v20[5]] = *(_QWORD *)&v18[v20[5]];
      *(_QWORD *)&v17[v20[6]] = *(_QWORD *)&v18[v20[6]];
      *(_QWORD *)&v17[v20[7]] = *(_QWORD *)&v18[v20[7]];
      a3 = v118;
      v21 = v9[6];
      v22 = &v7[v21];
      v23 = &v8[v21];
      *(_OWORD *)v22 = *(_OWORD *)v23;
      v22[16] = v23[16];
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
      *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_23DCF59A8((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_6:
    sub_23DD2ED80();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v74 = sub_23DDC512C();
  v75 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 40);
  v75(v7, v8, v74);
  v76 = v9[5];
  v77 = a3;
  v78 = &v7[v76];
  v79 = &v8[v76];
  v75(&v7[v76], &v8[v76], v74);
  sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
  v75(&v78[*(int *)(v80 + 36)], &v79[*(int *)(v80 + 36)], v74);
  v81 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v78[v81[5]] = *(_QWORD *)&v79[v81[5]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v78[v81[6]] = *(_QWORD *)&v79[v81[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v78[v81[7]] = *(_QWORD *)&v79[v81[7]];
  a3 = v77;
  swift_bridgeObjectRelease();
  v82 = v9[6];
  v83 = &v7[v82];
  v84 = &v8[v82];
  *(_OWORD *)v83 = *(_OWORD *)v84;
  v83[16] = v84[16];
  v7[v9[7]] = v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  v7[v9[9]] = v8[v9[9]];
  v85 = v9[10];
  v86 = &v7[v85];
  v87 = (uint64_t *)&v8[v85];
  v89 = *v87;
  v88 = v87[1];
  *(_QWORD *)v86 = v89;
  *((_QWORD *)v86 + 1) = v88;
  swift_bridgeObjectRelease();
  v90 = v9[11];
  v91 = &v7[v90];
  v92 = (uint64_t *)&v8[v90];
  v94 = *v92;
  v93 = v92[1];
  *(_QWORD *)v91 = v94;
  *((_QWORD *)v91 + 1) = v93;
  swift_bridgeObjectRelease();
LABEL_7:
  v25 = a3[7];
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  swift_bridgeObjectRelease();
  v28 = type metadata accessor for OvernightMetricsChartPointCollection();
  v29 = *(int *)(v28 + 20);
  v30 = v26 + v29;
  v31 = v27 + v29;
  v32 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 40))(v30, v31, v32);
  *(_QWORD *)(v26 + *(int *)(v28 + 24)) = *(_QWORD *)(v27 + *(int *)(v28 + 24));
  swift_bridgeObjectRelease();
  v33 = a3[8];
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  swift_release();
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
  swift_release();
  *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
  swift_release();
  v36 = a3[9];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = sub_23DDC512C();
  v113 = *(_QWORD *)(v39 - 8);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 40);
  v40(v37, v38, v39);
  sub_23DCF6834(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE08B8]);
  v42 = v41;
  v40(v37 + *(int *)(v41 + 36), v38 + *(int *)(v41 + 36), v39);
  v43 = type metadata accessor for OvernightMetricsChart.Derivations(0);
  v44 = *(int *)(v43 + 20);
  v45 = a2;
  v46 = a1;
  v47 = v37 + v44;
  v48 = v38 + v44;
  v40(v37 + v44, v38 + v44, v39);
  v40(v47 + *(int *)(v42 + 36), v48 + *(int *)(v42 + 36), v39);
  *(_QWORD *)(v37 + *(int *)(v43 + 24)) = *(_QWORD *)(v38 + *(int *)(v43 + 24));
  swift_bridgeObjectRelease();
  v49 = v118[10];
  v119 = v46;
  v50 = v46 + v49;
  v51 = v45 + v49;
  *(_QWORD *)(v46 + v49) = *(_QWORD *)(v45 + v49);
  swift_bridgeObjectRelease();
  v52 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v53 = v52[5];
  v54 = (_BYTE *)(v50 + v53);
  v115 = v51;
  v55 = (_BYTE *)(v51 + v53);
  LODWORD(v51) = v117(v50 + v53, 1, v116);
  v56 = v117((uint64_t)v55, 1, v116);
  if (!(_DWORD)v51)
  {
    if (!v56)
    {
      v40((uint64_t)v54, (uint64_t)v55, v39);
      v95 = v116[5];
      v96 = &v54[v95];
      v97 = &v55[v95];
      v40((uint64_t)&v54[v95], (uint64_t)&v55[v95], v39);
      sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
      v40((uint64_t)&v96[*(int *)(v98 + 36)], (uint64_t)&v97[*(int *)(v98 + 36)], v39);
      v99 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v96[v99[5]] = *(_QWORD *)&v97[v99[5]];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v96[v99[6]] = *(_QWORD *)&v97[v99[6]];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v96[v99[7]] = *(_QWORD *)&v97[v99[7]];
      swift_bridgeObjectRelease();
      v100 = v116[6];
      v101 = &v54[v100];
      v102 = &v55[v100];
      *(_OWORD *)v101 = *(_OWORD *)v102;
      v101[16] = v102[16];
      v54[v116[7]] = v55[v116[7]];
      v54[v116[8]] = v55[v116[8]];
      v54[v116[9]] = v55[v116[9]];
      v103 = v116[10];
      v104 = &v54[v103];
      v105 = (uint64_t *)&v55[v103];
      v107 = *v105;
      v106 = v105[1];
      *v104 = v107;
      v104[1] = v106;
      swift_bridgeObjectRelease();
      v108 = v116[11];
      v109 = &v54[v108];
      v110 = (uint64_t *)&v55[v108];
      v112 = *v110;
      v111 = v110[1];
      *v109 = v112;
      v109[1] = v111;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_23DCF59A8((uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    goto LABEL_12;
  }
  if (v56)
  {
LABEL_12:
    sub_23DD2ED80();
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_13;
  }
  v57 = *(void (**)(char *, char *, uint64_t))(v113 + 32);
  v57(v54, v55, v39);
  v58 = v116[5];
  v59 = &v54[v58];
  v60 = &v55[v58];
  v57(&v54[v58], &v55[v58], v39);
  sub_23DCF6834(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x24BEE1B68]);
  v57(&v59[*(int *)(v61 + 36)], &v60[*(int *)(v61 + 36)], v39);
  v62 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
  *(_QWORD *)&v59[v62[5]] = *(_QWORD *)&v60[v62[5]];
  *(_QWORD *)&v59[v62[6]] = *(_QWORD *)&v60[v62[6]];
  *(_QWORD *)&v59[v62[7]] = *(_QWORD *)&v60[v62[7]];
  v63 = v116[6];
  v64 = &v54[v63];
  v65 = &v55[v63];
  *(_OWORD *)v64 = *(_OWORD *)v65;
  v64[16] = v65[16];
  v54[v116[7]] = v55[v116[7]];
  v54[v116[8]] = v55[v116[8]];
  v54[v116[9]] = v55[v116[9]];
  *(_OWORD *)&v54[v116[10]] = *(_OWORD *)&v55[v116[10]];
  *(_OWORD *)&v54[v116[11]] = *(_OWORD *)&v55[v116[11]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v114 + 56))(v54, 0, 1, v116);
LABEL_13:
  *(_OWORD *)(v50 + v52[6]) = *(_OWORD *)(v115 + v52[6]);
  v67 = v52[7];
  v68 = v50 + v67;
  v69 = v115 + v67;
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *(_QWORD *)(v68 + 8) = *(_QWORD *)(v69 + 8);
  *(_BYTE *)(v68 + 16) = *(_BYTE *)(v69 + 16);
  *(_OWORD *)(v68 + 24) = *(_OWORD *)(v69 + 24);
  *(_OWORD *)(v68 + 40) = *(_OWORD *)(v69 + 40);
  *(_OWORD *)(v68 + 56) = *(_OWORD *)(v69 + 56);
  *(_OWORD *)(v68 + 72) = *(_OWORD *)(v69 + 72);
  *(_QWORD *)(v50 + v52[8]) = *(_QWORD *)(v115 + v52[8]);
  *(_QWORD *)(v50 + v52[9]) = *(_QWORD *)(v115 + v52[9]);
  v70 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v71 = v50 + v70;
  v72 = v115 + v70;
  *(_QWORD *)(v50 + v70) = *(_QWORD *)(v115 + v70);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v71 + 8) = *(_QWORD *)(v72 + 8);
  *(_QWORD *)(v71 + 16) = *(_QWORD *)(v72 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v71 + 24) = *(_QWORD *)(v72 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v71 + 32) = *(_QWORD *)(v72 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v71 + 40) = *(_OWORD *)(v72 + 40);
  *(_OWORD *)(v71 + 56) = *(_OWORD *)(v72 + 56);
  *(_OWORD *)(v71 + 72) = *(_OWORD *)(v72 + 72);
  *(_OWORD *)(v71 + 88) = *(_OWORD *)(v72 + 88);
  *(_OWORD *)(v71 + 104) = *(_OWORD *)(v72 + 104);
  return v119;
}

uint64_t sub_23DD6BA0C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD6BA18(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_23DD2ED80();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = type metadata accessor for OvernightMetricsChartPointCollection();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v13 = type metadata accessor for OvernightMetricsChart.Derivations(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[9];
        }
        else
        {
          v10 = type metadata accessor for OvernightMetricsChartLayout(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[10];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_23DD6BB00()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD6BB0C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_23DD2ED80();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = type metadata accessor for OvernightMetricsChartPointCollection();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v13 = type metadata accessor for OvernightMetricsChart.Derivations(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[9];
        }
        else
        {
          v10 = type metadata accessor for OvernightMetricsChartLayout(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[10];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_23DD6BBF0()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_23DD2ED80();
  if (v0 <= 0x3F)
  {
    type metadata accessor for OvernightMetricsChartPointCollection();
    if (v1 <= 0x3F)
    {
      type metadata accessor for OvernightMetricsChart.Derivations(319);
      if (v2 <= 0x3F)
      {
        type metadata accessor for OvernightMetricsChartLayout(319);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_23DD6BCCC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD6BCD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for OvernightMetricsChartLayout(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 40);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_23DD6BD84()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD6BD90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for OvernightMetricsChartLayout(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 40) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for OvernightMetricsChartPointShadow()
{
  uint64_t result;

  result = qword_256CFE810;
  if (!qword_256CFE810)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DD6BE74()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for IndividualOvernightMetricChartPoint(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for OvernightMetricsChartLayout(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_23DD6BF14()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23DD6BF24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  char v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t __dst[36];

  v2 = v1;
  v4 = (int *)type metadata accessor for OvernightMetricsChartPointShadow();
  memcpy(__dst, (const void *)(v1 + v4[8]), 0x118uLL);
  v5 = __dst[8];
  v6 = __dst[9];
  v7 = __dst[10];
  if ((*(_BYTE *)(v1 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPoint(0) + 32) + 8) & 1) != 0)
  {
    v7 = sub_23DDC6200();
  }
  else
  {
    sub_23DCFBB9C(__dst);
    if ((sub_23DDC54B0() & 1) != 0)
    {
      swift_retain();
      sub_23DCFE908(__dst);
    }
    else
    {
      swift_retain();
      sub_23DCFE908(__dst);
      v7 = v6;
    }
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  sub_23DDC63D4();
  sub_23DDC5B34();
  v20 = sub_23DD6C22C();
  v8 = v1 + v4[5];
  v9 = *(_QWORD *)v8;
  if (*(_QWORD *)v8)
  {
    v10 = *(double *)(v8 + 24);
    v11 = *(double *)(v8 + 40);
    v12 = *(_QWORD *)v8;
    v13 = *(_QWORD *)(v8 + 8);
  }
  else
  {
    v19 = v7;
    if (qword_256CFC0B8 != -1)
      swift_once();
    v14 = qword_256D06578;
    swift_getKeyPath();
    sub_23DCF535C((unint64_t *)&qword_256CFC1C0, (uint64_t (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState, (uint64_t)&unk_23DDCAF88);
    sub_23DDC5210();
    swift_release();
    v12 = *(_QWORD *)(v14 + 16);
    v13 = *(_QWORD *)(v14 + 24);
    v10 = *(double *)(v14 + 40);
    v11 = *(double *)(v14 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = v19;
  }
  v15 = *(unsigned __int8 *)(v2 + v4[6]);
  sub_23DCF59EC(v9);
  if ((sub_23DD995CC(v2, v12) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v17 = sub_23DD995CC(v2, v13);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v18 = 0.26;
    if (v15)
      v18 = 0.0;
    if ((v17 & 1) != 0)
      v10 = v11;
    else
      v10 = v18;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v21;
  *(_BYTE *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v23;
  *(_BYTE *)(a1 + 32) = v24;
  *(_QWORD *)(a1 + 40) = v25;
  *(_QWORD *)(a1 + 48) = v26;
  *(_QWORD *)(a1 + 56) = v20;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(double *)(a1 + 88) = v10;
  return result;
}

uint64_t sub_23DD6C22C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[6];

  v1 = v0;
  v2 = type metadata accessor for OvernightMetricsChartPointShadow();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23DDC54C8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndividualOvernightMetricChartPoint(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BE401B8], v5);
  v9 = sub_23DDC54BC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    if (qword_256CFC098 != -1)
      swift_once();
    v10 = &qword_256CFE658;
  }
  else
  {
    if (qword_256CFC0A8 != -1)
      swift_once();
    v10 = &qword_256CFE668;
  }
  MEMORY[0x242642C18]((id)*v10);
  v11 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 32) + 56);
  sub_23DD6C568(v1, (uint64_t)v4);
  if (v11 == 1)
  {
    v12 = (uint64_t *)&v4[*(int *)(v2 + 20)];
    v13 = *v12;
    v14 = v12[3];
    v15 = v12[5];
    v16 = v12[6];
    if (*v12)
    {
      v17 = *v12;
      v18 = v12[1];
    }
    else
    {
      v22[1] = v12[7];
      v22[2] = v16;
      v22[3] = v15;
      v22[4] = v14;
      if (qword_256CFC0B8 != -1)
        swift_once();
      v19 = qword_256D06578;
      swift_getKeyPath();
      v22[5] = v19;
      sub_23DCF535C((unint64_t *)&qword_256CFC1C0, (uint64_t (*)(uint64_t))type metadata accessor for GlobalOvernightMetricsChartAnimationState, (uint64_t)&unk_23DDCAF88);
      sub_23DDC5210();
      swift_release();
      v17 = *(_QWORD *)(v19 + 16);
      v18 = *(_QWORD *)(v19 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_23DCF59EC(v13);
    if ((sub_23DD995CC((uint64_t)v4, v17) & 1) == 0)
      sub_23DD995CC((uint64_t)v4, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_23DCF59A8((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointShadow);
  v20 = sub_23DDC623C();
  swift_release();
  return v20;
}

uint64_t sub_23DD6C568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OvernightMetricsChartPointShadow();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DD6C5AC()
{
  return sub_23DCF5A70(&qword_256CFE858, (uint64_t (*)(uint64_t))sub_23DD6C5E0, sub_23DD6C674, MEMORY[0x24BDECC38]);
}

void sub_23DD6C5E0(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFE860, sub_23DD6C5FC);
}

void sub_23DD6C5FC(uint64_t a1)
{
  sub_23DCF594C(a1, &qword_256CFE868, sub_23DD31544);
}

void sub_23DD6C618()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFD830)
  {
    v0 = sub_23DDC5EB8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFD830);
  }
}

uint64_t sub_23DD6C674()
{
  return sub_23DCF5A70(&qword_256CFE870, (uint64_t (*)(uint64_t))sub_23DD6C5FC, (uint64_t (*)(void))sub_23DD316A4, MEMORY[0x24BDEC468]);
}

void static OvernightMetricsChartPointCollection.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  if ((sub_23DD405A4(*a1, *a2) & 1) != 0)
  {
    v4 = type metadata accessor for OvernightMetricsChartPointCollection();
    if ((MEMORY[0x242641BF8]((char *)a1 + *(int *)(v4 + 20), (char *)a2 + *(int *)(v4 + 20)) & 1) != 0)
      sub_23DD6C968(*(uint64_t *)((char *)a1 + *(int *)(v4 + 24)), *(uint64_t *)((char *)a2 + *(int *)(v4 + 24)));
  }
}

uint64_t type metadata accessor for OvernightMetricsChartPointCollection()
{
  uint64_t result;

  result = qword_254326BA8;
  if (!qword_254326BA8)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23DD6C74C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result;
  _QWORD v5[4];

  v5[2] = a1;
  result = sub_23DD8FD44((void (*)(_QWORD))sub_23DD6EF74, (uint64_t)v5, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DD6C798@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1 + *(int *)(type metadata accessor for OvernightMetricsChartPoint() + 20);
  v10 = *(_QWORD *)(v9 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 20));
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v18 = v5;
    v19 = a2;
    v20 = v2;
    v12 = v10 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v16 = v10;
    v17 = v6;
    v13 = *(_QWORD *)(v6 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_23DCF58EC(v12, (uint64_t)v8, type metadata accessor for IndividualOvernightMetricChartPoint);
      sub_23DDC53A8();
      sub_23DCF535C(&qword_254326690, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE48]);
      sub_23DDC67C4();
      sub_23DDC67C4();
      if (v22 == v21)
        break;
      sub_23DCF59A8((uint64_t)v8, type metadata accessor for IndividualOvernightMetricChartPoint);
      v12 += v13;
      if (!--v11)
      {
        v14 = 1;
        a2 = v19;
        goto LABEL_8;
      }
    }
    a2 = v19;
    sub_23DCFBB58((uint64_t)v8, v19, type metadata accessor for IndividualOvernightMetricChartPoint);
    v14 = 0;
LABEL_8:
    v6 = v17;
    v5 = v18;
  }
  else
  {
    swift_bridgeObjectRetain();
    v14 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v14, 1, v5);
  return swift_bridgeObjectRelease();
}

void sub_23DD6C968(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = sub_23DDC53A8();
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD6EEF0(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = MEMORY[0x24BDAC7A8](v9);
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v39 = a1;
  v40 = (char *)&v35 - v10;
  v42 = 0;
  v12 = *(_QWORD *)(a1 + 64);
  v37 = a1 + 64;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v38 = (unint64_t)(v13 + 63) >> 6;
  v36 = v38 - 1;
  v17 = v43;
  v16 = v44;
  v18 = (uint64_t)v41;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v42 << 6);
      v21 = (uint64_t)v40;
LABEL_8:
      v22 = v39;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v43 + 16))(v8, *(_QWORD *)(v39 + 48) + *(_QWORD *)(v43 + 72) * v20, v44, v11);
      v23 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v20);
      sub_23DD6EF0C();
      v25 = v24;
      *(_QWORD *)&v8[*(int *)(v24 + 48)] = v23;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 0, 1, v24);
      swift_bridgeObjectRetain();
      goto LABEL_27;
    }
    v26 = v42 + 1;
    v21 = (uint64_t)v40;
    if (__OFADD__(v42, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v26 < v38)
    {
      v27 = *(_QWORD *)(v37 + 8 * v26);
      if (v27)
        goto LABEL_12;
      v28 = v42 + 2;
      ++v42;
      if (v26 + 1 < v38)
      {
        v27 = *(_QWORD *)(v37 + 8 * v28);
        if (v27)
          goto LABEL_15;
        v42 = v26 + 1;
        if (v26 + 2 < v38)
        {
          v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
          if (v27)
          {
            v26 += 2;
            goto LABEL_12;
          }
          v28 = v26 + 3;
          v42 = v26 + 2;
          if (v26 + 3 < v38)
            break;
        }
      }
    }
LABEL_26:
    sub_23DD6EF0C();
    v25 = v29;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v8, 1, 1, v29);
    v15 = 0;
LABEL_27:
    sub_23DCFBB58((uint64_t)v8, v21, (uint64_t (*)(_QWORD))sub_23DD6EEF0);
    sub_23DD6EF0C();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v21, 1, v25) == 1)
      return;
    v30 = *(int *)(v25 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v18, v21, v16);
    v31 = *(_QWORD *)(v21 + v30);
    sub_23DD768A4(v18);
    LOBYTE(v30) = v32;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v16);
    if ((v30 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v33 = swift_bridgeObjectRetain();
    v34 = sub_23DD40A48(v33, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v34 & 1) == 0)
      return;
  }
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_15:
    v26 = v28;
LABEL_12:
    v15 = (v27 - 1) & v27;
    v20 = __clz(__rbit64(v27)) + (v26 << 6);
    v42 = v26;
    goto LABEL_8;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v38)
    {
      v42 = v36;
      goto LABEL_26;
    }
    v27 = *(_QWORD *)(v37 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_12;
  }
LABEL_35:
  __break(1u);
}

void sub_23DD6CD08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t);
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char v46;
  char v47;
  unint64_t v48;
  char *v49;
  char v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = sub_23DDC52DC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v59 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v52 - v8;
  v10 = sub_23DDC53A8();
  v64 = *(_QWORD *)(v10 - 8);
  v65 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v60 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD6EE58(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16.n128_f64[0] = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v52 - v17;
  if (a1 == a2)
  {
    v62 = 1;
    return;
  }
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
  {
LABEL_33:
    v62 = 0;
    return;
  }
  v58 = a2;
  v61 = 0;
  v56 = a1;
  v21 = *(_QWORD *)(a1 + 64);
  v20 = a1 + 64;
  v19 = v21;
  v22 = 1 << *(_BYTE *)(v20 - 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v19;
  v54 = v20;
  v55 = (unint64_t)(v22 + 63) >> 6;
  v53 = v55 - 1;
  v25 = (void (*)(uint64_t))MEMORY[0x24BE3FE20];
  v57 = v14;
  while (1)
  {
    if (v24)
    {
      v63 = (v24 - 1) & v24;
      v26 = __clz(__rbit64(v24)) | (v61 << 6);
LABEL_8:
      v27 = v56;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v64 + 16))(v14, *(_QWORD *)(v56 + 48) + *(_QWORD *)(v64 + 72) * v26, v65, v16);
      v28 = *(_QWORD *)(v27 + 56) + *(_QWORD *)(v5 + 72) * v26;
      v29 = (void (*)(uint64_t))MEMORY[0x24BE3FC10];
      sub_23DD6EE7C(0, &qword_256CFE8F8, v25, (void (*)(uint64_t))MEMORY[0x24BE3FC10]);
      v31 = v30;
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v14[*(int *)(v30 + 48)], v28, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v14, 0, 1, v31);
      goto LABEL_27;
    }
    v32 = v61 + 1;
    if (__OFADD__(v61, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    v29 = (void (*)(uint64_t))MEMORY[0x24BE3FC10];
    if (v32 < v55)
    {
      v33 = *(_QWORD *)(v54 + 8 * v32);
      if (v33)
        goto LABEL_12;
      v34 = v61 + 2;
      ++v61;
      if (v32 + 1 < v55)
      {
        v33 = *(_QWORD *)(v54 + 8 * v34);
        if (v33)
          goto LABEL_15;
        v61 = v32 + 1;
        if (v32 + 2 < v55)
        {
          v33 = *(_QWORD *)(v54 + 8 * (v32 + 2));
          if (v33)
          {
            v32 += 2;
            goto LABEL_12;
          }
          v34 = v32 + 3;
          v61 = v32 + 2;
          if (v32 + 3 < v55)
            break;
        }
      }
    }
LABEL_26:
    sub_23DD6EE7C(0, &qword_256CFE8F8, v25, (void (*)(uint64_t))MEMORY[0x24BE3FC10]);
    v31 = v35;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v14, 1, 1, v35);
    v63 = 0;
LABEL_27:
    sub_23DCFBB58((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(_QWORD))sub_23DD6EE58);
    sub_23DD6EE7C(0, &qword_256CFE8F8, v25, v29);
    v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v18, 1, v31);
    v62 = v36 == 1;
    if (v36 == 1)
      return;
    v37 = &v18[*(int *)(v31 + 48)];
    v39 = v64;
    v38 = v65;
    v40 = v5;
    v41 = (uint64_t)v60;
    v42 = v18;
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v60, v18, v65);
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v9, v37, v4);
    v43 = v58;
    v44 = v9;
    v45 = sub_23DD768A4(v41);
    v47 = v46;
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v38);
    if ((v47 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v4);
      goto LABEL_33;
    }
    v48 = *(_QWORD *)(v43 + 56) + *(_QWORD *)(v40 + 72) * v45;
    v49 = v59;
    (*(void (**)(char *, unint64_t, uint64_t))(v40 + 16))(v59, v48, v4);
    sub_23DCF535C(&qword_256CFE900, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FC10], MEMORY[0x24BE3FC28]);
    v50 = sub_23DDC66C8();
    v51 = *(void (**)(char *, uint64_t))(v40 + 8);
    v51(v49, v4);
    v51(v44, v4);
    v9 = v44;
    v5 = v40;
    v14 = v57;
    v18 = v42;
    v25 = (void (*)(uint64_t))MEMORY[0x24BE3FE20];
    v24 = v63;
    if ((v50 & 1) == 0)
      return;
  }
  v33 = *(_QWORD *)(v54 + 8 * v34);
  if (v33)
  {
LABEL_15:
    v32 = v34;
LABEL_12:
    v63 = (v33 - 1) & v33;
    v26 = __clz(__rbit64(v33)) + (v32 << 6);
    v61 = v32;
    goto LABEL_8;
  }
  while (1)
  {
    v32 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v32 >= v55)
    {
      v61 = v53;
      goto LABEL_26;
    }
    v33 = *(_QWORD *)(v54 + 8 * v32);
    ++v34;
    if (v33)
      goto LABEL_12;
  }
LABEL_36:
  __break(1u);
}

unint64_t sub_23DD6D1F4(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  double v16;
  char v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = 8 * v11;
    v16 = *(double *)(*(_QWORD *)(v3 + 56) + v15);
    result = sub_23DD7693C(*(double *)(*(_QWORD *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(double *)(*(_QWORD *)(a2 + 56) + 8 * result) != v16)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_23DD6D360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  v4 = sub_23DDC54C8();
  v57 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v55 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD6EDB8(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = MEMORY[0x24BDAC7A8](v9);
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v53 = (uint64_t)&v48 - v10;
  v54 = 0;
  v51 = a1;
  v14 = *(_QWORD *)(a1 + 64);
  v13 = a1 + 64;
  v12 = v14;
  v15 = 1 << *(_BYTE *)(v13 - 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v12;
  v49 = v13;
  v50 = (unint64_t)(v15 + 63) >> 6;
  v48 = v50 - 1;
  v18 = (void (*)(uint64_t))MEMORY[0x24BE401C0];
  v52 = v4;
  v19 = v57;
  v20 = (uint64_t)v55;
  while (1)
  {
    if (v17)
    {
      v56 = (v17 - 1) & v17;
      v21 = __clz(__rbit64(v17)) | (v54 << 6);
LABEL_9:
      v22 = v51;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v57 + 16))(v8, *(_QWORD *)(v51 + 48) + *(_QWORD *)(v57 + 72) * v21, v4, v11);
      v23 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v21);
      sub_23DD6EE7C(0, &qword_256CFE8E8, v18, (void (*)(uint64_t))sub_23DD02DA8);
      v24 = v18;
      v26 = v25;
      *(_QWORD *)&v8[*(int *)(v25 + 48)] = v23;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v8, 0, 1, v25);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    v27 = v54 + 1;
    if (__OFADD__(v54, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v27 < v50)
    {
      v28 = *(_QWORD *)(v49 + 8 * v27);
      if (v28)
        goto LABEL_13;
      v29 = v54 + 2;
      ++v54;
      if (v27 + 1 < v50)
      {
        v28 = *(_QWORD *)(v49 + 8 * v29);
        if (v28)
          goto LABEL_16;
        v54 = v27 + 1;
        if (v27 + 2 < v50)
        {
          v28 = *(_QWORD *)(v49 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2;
            goto LABEL_13;
          }
          v29 = v27 + 3;
          v54 = v27 + 2;
          if (v27 + 3 < v50)
            break;
        }
      }
    }
LABEL_27:
    sub_23DD6EE7C(0, &qword_256CFE8E8, v18, (void (*)(uint64_t))sub_23DD02DA8);
    v24 = v18;
    v26 = v30;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v8, 1, 1, v30);
    v56 = 0;
LABEL_28:
    v31 = v8;
    v32 = (uint64_t)v8;
    v33 = v53;
    sub_23DCFBB58(v32, v53, (uint64_t (*)(_QWORD))sub_23DD6EDB8);
    v34 = v33;
    v35 = v24;
    sub_23DD6EE7C(0, &qword_256CFE8E8, v24, (void (*)(uint64_t))sub_23DD02DA8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v34, 1, v26) == 1)
      return;
    v36 = *(int *)(v26 + 48);
    v4 = v52;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v20, v34, v52);
    v37 = *(_QWORD *)(v34 + v36);
    v38 = sub_23DD76970(v20);
    v40 = v39;
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v4);
    if ((v40 & 1) == 0
      || (v41 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v38), v42 = *(_QWORD *)(v41 + 16), v42 != *(_QWORD *)(v37 + 16)))
    {
LABEL_44:
      swift_bridgeObjectRelease();
      return;
    }
    if (v42)
      v43 = v41 == v37;
    else
      v43 = 1;
    if (!v43)
    {
      if (*(double *)(v41 + 32) != *(double *)(v37 + 32) || *(double *)(v41 + 40) != *(double *)(v37 + 40))
        goto LABEL_44;
      v44 = v42 - 1;
      if (v44)
      {
        if (*(double *)(v41 + 48) != *(double *)(v37 + 48) || *(double *)(v41 + 56) != *(double *)(v37 + 56))
          goto LABEL_44;
        v45 = 0;
        while (--v44)
        {
          v46 = v41 + v45;
          v47 = v37 + v45;
          if (*(double *)(v41 + v45 + 64) == *(double *)(v37 + v45 + 64))
          {
            v45 += 16;
            if (*(double *)(v46 + 72) == *(double *)(v47 + 72))
              continue;
          }
          goto LABEL_44;
        }
      }
    }
    swift_bridgeObjectRelease();
    v18 = v35;
    v8 = v31;
    v17 = v56;
  }
  v28 = *(_QWORD *)(v49 + 8 * v29);
  if (v28)
  {
LABEL_16:
    v27 = v29;
LABEL_13:
    v56 = (v28 - 1) & v28;
    v21 = __clz(__rbit64(v28)) + (v27 << 6);
    v54 = v27;
    goto LABEL_9;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v50)
    {
      v54 = v48;
      goto LABEL_27;
    }
    v28 = *(_QWORD *)(v49 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_13;
  }
LABEL_48:
  __break(1u);
}

void sub_23DD6D7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  void (*v19)(uint64_t);
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  int v32;
  void (*v33)(uint64_t);
  unint64_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int64_t v52;
  _BOOL4 v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = sub_23DDC54C8();
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v51 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD6EDDC(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = MEMORY[0x24BDAC7A8](v9);
  if (a1 == a2)
  {
    v53 = 1;
    return;
  }
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
  {
LABEL_33:
    v53 = 0;
    return;
  }
  v49 = a1;
  v50 = (char *)&v45 - v10;
  v52 = 0;
  v14 = *(_QWORD *)(a1 + 64);
  v13 = a1 + 64;
  v12 = v14;
  v15 = 1 << *(_BYTE *)(v13 - 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v12;
  v47 = v13;
  v48 = (unint64_t)(v15 + 63) >> 6;
  v46 = v48 - 1;
  v18 = (unint64_t *)&qword_256CFE4F0;
  v19 = (void (*)(uint64_t))MEMORY[0x24BE401C0];
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v21 = (v17 - 1) & v17;
      v22 = v20 | (v52 << 6);
      v23 = (uint64_t)v50;
LABEL_8:
      v24 = v49;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v55 + 16))(v8, *(_QWORD *)(v49 + 48) + *(_QWORD *)(v55 + 72) * v22, v56, v11);
      v25 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v22);
      sub_23DD6EE7C(0, v18, v19, sub_23DD1CEC4);
      v27 = v26;
      *(_QWORD *)&v8[*(int *)(v26 + 48)] = v25;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v8, 0, 1, v26);
      swift_bridgeObjectRetain();
      goto LABEL_27;
    }
    v28 = v52 + 1;
    v23 = (uint64_t)v50;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v28 < v48)
    {
      v29 = *(_QWORD *)(v47 + 8 * v28);
      if (v29)
        goto LABEL_12;
      v30 = v52 + 2;
      ++v52;
      if (v28 + 1 < v48)
      {
        v29 = *(_QWORD *)(v47 + 8 * v30);
        if (v29)
          goto LABEL_15;
        v52 = v28 + 1;
        if (v28 + 2 < v48)
        {
          v29 = *(_QWORD *)(v47 + 8 * (v28 + 2));
          if (v29)
          {
            v28 += 2;
            goto LABEL_12;
          }
          v30 = v28 + 3;
          v52 = v28 + 2;
          if (v28 + 3 < v48)
            break;
        }
      }
    }
LABEL_26:
    sub_23DD6EE7C(0, v18, v19, sub_23DD1CEC4);
    v27 = v31;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v8, 1, 1, v31);
    v21 = 0;
LABEL_27:
    sub_23DCFBB58((uint64_t)v8, v23, (uint64_t (*)(_QWORD))sub_23DD6EDDC);
    sub_23DD6EE7C(0, v18, v19, sub_23DD1CEC4);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v23, 1, v27);
    v53 = v32 == 1;
    if (v32 == 1)
      return;
    v54 = v21;
    v33 = v19;
    v34 = v18;
    v35 = v8;
    v36 = *(int *)(v27 + 48);
    v38 = v55;
    v37 = v56;
    v39 = (uint64_t)v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v51, v23, v56);
    v40 = *(_QWORD *)(v23 + v36);
    sub_23DD76970(v39);
    v42 = v41;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v37);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
    v43 = swift_bridgeObjectRetain();
    v44 = sub_23DD40A48(v43, v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = v35;
    v18 = v34;
    v19 = v33;
    v17 = v54;
    if ((v44 & 1) == 0)
      return;
  }
  v29 = *(_QWORD *)(v47 + 8 * v30);
  if (v29)
  {
LABEL_15:
    v28 = v30;
LABEL_12:
    v21 = (v29 - 1) & v29;
    v22 = __clz(__rbit64(v29)) + (v28 << 6);
    v52 = v28;
    goto LABEL_8;
  }
  while (1)
  {
    v28 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v28 >= v48)
    {
      v52 = v46;
      goto LABEL_26;
    }
    v29 = *(_QWORD *)(v47 + 8 * v28);
    ++v30;
    if (v29)
      goto LABEL_12;
  }
LABEL_36:
  __break(1u);
}

uint64_t sub_23DD6DC00()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 != 1)
    v1 = 0xD000000000000014;
  if (*v0)
    return v1;
  else
    return 0x73746E696F70;
}

uint64_t sub_23DD6DC5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DD6EC78(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DD6DC80(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_23DD6DC8C()
{
  sub_23DD6DEE0();
  return sub_23DDC6CEC();
}

uint64_t sub_23DD6DCB4()
{
  sub_23DD6DEE0();
  return sub_23DDC6CF8();
}

uint64_t OvernightMetricsChartPointCollection.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  sub_23DD6E3C8(0, &qword_256CFE878, MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DD6DEE0();
  sub_23DDC6C98();
  v13 = *v3;
  HIBYTE(v12) = 0;
  sub_23DCFB328(0, &qword_256CFD6F0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DD6E424((unint64_t *)&qword_256CFDCD0, &qword_256CFDCC0, (uint64_t)&protocol conformance descriptor for OvernightMetricsChartPoint, MEMORY[0x24BEE12A0]);
  sub_23DDC6BCC();
  if (!v2)
  {
    v10 = type metadata accessor for OvernightMetricsChartPointCollection();
    LOBYTE(v13) = 1;
    sub_23DDC51E0();
    sub_23DCF535C(&qword_256CFE888, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF2F8]);
    sub_23DDC6BCC();
    v13 = *(uint64_t *)((char *)v3 + *(int *)(v10 + 24));
    HIBYTE(v12) = 2;
    sub_23DD6DF24();
    sub_23DD6DFA4();
    sub_23DDC6BCC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_23DD6DEE0()
{
  unint64_t result;

  result = qword_256CFE880;
  if (!qword_256CFE880)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCA6E8, &type metadata for OvernightMetricsChartPointCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFE880);
  }
  return result;
}

void sub_23DD6DF24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE890)
  {
    sub_23DDC53A8();
    sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
    v0 = sub_23DDC665C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE890);
  }
}

unint64_t sub_23DD6DFA4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFE898;
  if (!qword_256CFE898)
  {
    sub_23DD6DF24();
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFDCF8, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE30]);
    v3[1] = sub_23DD6E024();
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE04C0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFE898);
  }
  return result;
}

unint64_t sub_23DD6E024()
{
  unint64_t result;

  result = qword_256CFE8A0;
  if (!qword_256CFE8A0)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC8694, &type metadata for SingleMetricChartPointCollection);
    atomic_store(result, (unint64_t *)&qword_256CFE8A0);
  }
  return result;
}

uint64_t OvernightMetricsChartPointCollection.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;

  v23 = a2;
  v3 = sub_23DDC51E0();
  v24 = *(_QWORD *)(v3 - 8);
  v25 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD6E3C8(0, &qword_256CFE8A8, MEMORY[0x24BEE33E0]);
  v26 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v22 - v8;
  v10 = type metadata accessor for OvernightMetricsChartPointCollection();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DD6DEE0();
  v27 = v9;
  v13 = v28;
  sub_23DDC6C8C();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v28 = v5;
  v14 = v12;
  v15 = v25;
  sub_23DCFB328(0, &qword_256CFD6F0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  v29 = 0;
  sub_23DD6E424((unint64_t *)&qword_256CFDD38, &qword_256CFDD28, (uint64_t)&protocol conformance descriptor for OvernightMetricsChartPoint, MEMORY[0x24BEE12D0]);
  v16 = v26;
  sub_23DDC6B78();
  v22 = v14;
  *(_QWORD *)v14 = v30;
  LOBYTE(v30) = 1;
  sub_23DCF535C(&qword_256CFE8B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF310]);
  v17 = v28;
  sub_23DDC6B78();
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v22[*(int *)(v10 + 20)], v17, v15);
  sub_23DD6DF24();
  v29 = 2;
  sub_23DD6E4BC();
  sub_23DDC6B78();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v16);
  v18 = *(int *)(v10 + 24);
  v20 = (uint64_t)v22;
  v19 = v23;
  *(_QWORD *)&v22[v18] = v30;
  sub_23DCF58EC(v20, v19, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return sub_23DCF59A8(v20, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPointCollection);
}

void sub_23DD6E3C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DD6DEE0();
    v7 = a3(a1, &type metadata for OvernightMetricsChartPointCollection.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DD6E424(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_23DCFB328(255, &qword_256CFD6F0, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v10 = v9;
    v11 = sub_23DCF535C(a2, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, a3);
    result = MEMORY[0x242643BD8](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DD6E4BC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CFE8B8;
  if (!qword_256CFE8B8)
  {
    sub_23DD6DF24();
    v2 = v1;
    v3[0] = sub_23DCF535C(&qword_256CFDD58, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE50]);
    v3[1] = sub_23DD6E53C();
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE04E0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CFE8B8);
  }
  return result;
}

unint64_t sub_23DD6E53C()
{
  unint64_t result;

  result = qword_256CFE8C0;
  if (!qword_256CFE8C0)
  {
    result = MEMORY[0x242643BD8](&unk_23DDC866C, &type metadata for SingleMetricChartPointCollection);
    atomic_store(result, (unint64_t *)&qword_256CFE8C0);
  }
  return result;
}

void sub_23DD6E580(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if ((sub_23DD405A4(*a1, *a2) & 1) != 0
    && (MEMORY[0x242641BF8]((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20)) & 1) != 0)
  {
    sub_23DD6C968(*(uint64_t *)((char *)a1 + *(int *)(a3 + 24)), *(uint64_t *)((char *)a2 + *(int *)(a3 + 24)));
  }
}

uint64_t sub_23DD6E5F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return OvernightMetricsChartPointCollection.init(from:)(a1, a2);
}

uint64_t sub_23DD6E604(_QWORD *a1)
{
  return OvernightMetricsChartPointCollection.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for OvernightMetricsChartPointCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23DDC51E0();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    *(uint64_t *)((char *)v7 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for OvernightMetricsChartPointCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for OvernightMetricsChartPointCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC51E0();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for OvernightMetricsChartPointCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for OvernightMetricsChartPointCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for OvernightMetricsChartPointCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DDC51E0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartPointCollection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD6E960(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23DDC51E0();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartPointCollection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23DD6E9E8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23DDC51E0();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23DD6EA5C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DDC51E0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartPointCollection.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DD6EB20 + 4 * byte_23DDCA575[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DD6EB54 + 4 * byte_23DDCA570[v4]))();
}

uint64_t sub_23DD6EB54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD6EB5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DD6EB64);
  return result;
}

uint64_t sub_23DD6EB70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DD6EB78);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DD6EB7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DD6EB84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartPointCollection.CodingKeys()
{
  return &type metadata for OvernightMetricsChartPointCollection.CodingKeys;
}

unint64_t sub_23DD6EBA4()
{
  unint64_t result;

  result = qword_256CFE8C8;
  if (!qword_256CFE8C8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCA6C0, &type metadata for OvernightMetricsChartPointCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFE8C8);
  }
  return result;
}

unint64_t sub_23DD6EBEC()
{
  unint64_t result;

  result = qword_256CFE8D0;
  if (!qword_256CFE8D0)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCA630, &type metadata for OvernightMetricsChartPointCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFE8D0);
  }
  return result;
}

unint64_t sub_23DD6EC34()
{
  unint64_t result;

  result = qword_256CFE8D8;
  if (!qword_256CFE8D8)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCA658, &type metadata for OvernightMetricsChartPointCollection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CFE8D8);
  }
  return result;
}

uint64_t sub_23DD6EC78(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73746E696F70 && a2 == 0xE600000000000000;
  if (v2 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023DDCDD00 || (sub_23DDC6C08() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023DDCDD20)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23DDC6C08();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_23DD6EDB8(uint64_t a1)
{
  sub_23DD6EE00(a1, &qword_256CFE8E0, &qword_256CFE8E8, (void (*)(uint64_t))MEMORY[0x24BE401C0], (void (*)(uint64_t))sub_23DD02DA8);
}

void sub_23DD6EDDC(uint64_t a1)
{
  sub_23DD6EE00(a1, &qword_256CFE4E8, (unint64_t *)&qword_256CFE4F0, (void (*)(uint64_t))MEMORY[0x24BE401C0], sub_23DD1CEC4);
}

void sub_23DD6EE00(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_23DD6EE7C(255, a3, a4, a5);
    v6 = sub_23DDC6980();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_23DD6EE58(uint64_t a1)
{
  sub_23DD6EE00(a1, &qword_256CFE8F0, &qword_256CFE8F8, (void (*)(uint64_t))MEMORY[0x24BE3FE20], (void (*)(uint64_t))MEMORY[0x24BE3FC10]);
}

void sub_23DD6EE7C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_23DD6EEF0(uint64_t a1)
{
  sub_23DCFB328(a1, &qword_256CFE908, (uint64_t (*)(uint64_t))sub_23DD6EF0C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_23DD6EF0C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CFE910)
  {
    sub_23DDC53A8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CFE910);
  }
}

uint64_t sub_23DD6EF74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DD6C798(a1, a2);
}

id static NSBundle.healthBalanceUI.getter()
{
  uint64_t ObjCClassFromMetadata;

  type metadata accessor for HealthBalanceUI();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  return objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
}

uint64_t type metadata accessor for HealthBalanceUI()
{
  return objc_opt_self();
}

uint64_t sub_23DD6EFF4()
{
  return swift_deallocClassInstance();
}

uint64_t BalanceWidgetViewModel.init(dayRange:chronologicalDaySummaries:timeScope:featureStatus:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _BYTE v24[4];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = a2;
  v9 = sub_23DDC527C();
  v27 = *(_QWORD *)(v9 - 8);
  v28 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23DCF6898(0, &qword_254326A70, (void (*)(uint64_t))MEMORY[0x24BE40438]);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v24[-v13];
  v15 = sub_23DDC5330();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = &v24[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = *a3;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, v15, v17);
  v20 = sub_23DDC55A0();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v21 + 16))(v14, a4, v20);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v14, 0, 1, v20);
  OvernightMetricsViewModel.init(dayRange:chronologicalDaySummaries:featureStatus:)((uint64_t)v19, v26, (uint64_t)v14, a5);
  sub_23DDC5270();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a4, v20);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
  v22 = type metadata accessor for BalanceWidgetViewModel();
  result = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v27 + 32))(a5 + *(int *)(v22 + 20), v11, v28);
  *(_BYTE *)(a5 + *(int *)(v22 + 24)) = v25;
  return result;
}

uint64_t sub_23DD6F1CC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  sub_23DCF6898(0, &qword_2543266B8, (void (*)(uint64_t))MEMORY[0x24BE3FFB0]);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v9 - v1;
  v3 = sub_23DDC5420();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23DD290A0((uint64_t)v2, &qword_2543266B8, (void (*)(uint64_t))MEMORY[0x24BE3FFB0]);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  if ((sub_23DDC5414() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return 0;
  }
  v7 = MEMORY[0x242641E44]();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t sub_23DD6F310()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  double *v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t result;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double *v32;
  double v33;
  double v34;
  _QWORD v35[2];
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v0 = sub_23DDC5528();
  v39 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, &qword_2543266B8, (void (*)(uint64_t))MEMORY[0x24BE3FFB0]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v35 - v4;
  v6 = sub_23DDC5420();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_23DD290A0((uint64_t)v5, &qword_2543266B8, (void (*)(uint64_t))MEMORY[0x24BE3FFB0]);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  v10 = sub_23DDC53FC();
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v36 = v9;
    v37 = v7;
    v38 = v6;
    v12 = v39;
    v13 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    v35[1] = v10;
    v14 = v10 + v13;
    v15 = *(_QWORD *)(v39 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
    v17 = (double *)MEMORY[0x24BEE4AF8];
    v16(v2, v10 + v13, v0);
    while (1)
    {
      v18 = sub_23DDC5474();
      v20 = v19;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v2, v0);
      if ((v20 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = (double *)sub_23DD56480(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
        v22 = *((_QWORD *)v17 + 2);
        v21 = *((_QWORD *)v17 + 3);
        if (v22 >= v21 >> 1)
          v17 = (double *)sub_23DD56480((_QWORD *)(v21 > 1), v22 + 1, 1, v17);
        *((_QWORD *)v17 + 2) = v22 + 1;
        *(_QWORD *)&v17[v22 + 4] = v18;
        v12 = v39;
      }
      v14 += v15;
      if (!--v11)
        break;
      v16(v2, v14, v0);
    }
    swift_bridgeObjectRelease();
    v7 = v37;
    v6 = v38;
    v9 = v36;
    v23 = *((_QWORD *)v17 + 2);
    if (v23)
      goto LABEL_14;
LABEL_17:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRelease();
  v17 = (double *)MEMORY[0x24BEE4AF8];
  v23 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  if (!v23)
    goto LABEL_17;
LABEL_14:
  v24 = v17[4];
  v25 = v23 - 1;
  if (v25)
  {
    v28 = v17 + 5;
    v29 = v25;
    v26 = v17[4];
    do
    {
      v30 = *v28++;
      v31 = v30;
      if (v30 < v26)
        v26 = v31;
      --v29;
    }
    while (v29);
    v32 = v17 + 5;
    do
    {
      v33 = *v32++;
      v34 = v33;
      if (v24 < v33)
        v24 = v34;
      --v25;
    }
    while (v25);
  }
  else
  {
    v26 = v17[4];
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  result = swift_bridgeObjectRelease();
  if (v26 <= v24)
    return *(_QWORD *)&v26;
  __break(1u);
  return result;
}

_QWORD *sub_23DD6F620(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = sub_23DDC5528();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, &qword_2543266B8, (void (*)(uint64_t))MEMORY[0x24BE3FFB0]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  v9 = sub_23DDC5420();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_23DD290A0((uint64_t)v8, &qword_2543266B8, (void (*)(uint64_t))MEMORY[0x24BE3FFB0]);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v14 = sub_23DDC53FC();
    MEMORY[0x24BDAC7A8](v14);
    *(&v28 - 2) = a1;
    sub_23DD3B4A4((uint64_t (*)(_QWORD))sub_23DD72D28, (uint64_t)(&v28 - 4), v15);
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v29 = v12;
      v30 = v10;
      v31 = v9;
      v18 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      v28 = v16;
      v19 = v16 + v18;
      v20 = *(_QWORD *)(v3 + 72);
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v32 = v3;
      v21(v5, v16 + v18, v2);
      while (1)
      {
        v22 = sub_23DDC5474();
        v24 = v23;
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        if ((v24 & 1) == 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v13 = sub_23DD56480(0, v13[2] + 1, 1, v13);
          v26 = v13[2];
          v25 = v13[3];
          if (v26 >= v25 >> 1)
            v13 = sub_23DD56480((_QWORD *)(v25 > 1), v26 + 1, 1, v13);
          v13[2] = v26 + 1;
          v13[v26 + 4] = v22;
          v3 = v32;
        }
        v19 += v20;
        if (!--v17)
          break;
        v21(v5, v19, v2);
      }
      swift_bridgeObjectRelease();
      v10 = v30;
      v9 = v31;
      v12 = v29;
    }
    else
    {
      swift_bridgeObjectRelease();
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v13;
}

uint64_t sub_23DD6F8D0@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  void (*v26)(_BYTE *, uint64_t, uint64_t);
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v38[12];
  int v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v2;
  v39 = a1;
  v40 = a2;
  v41 = sub_23DDC5264();
  v4 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v6 = &v38[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v38[-v8];
  sub_23DCF6898(0, qword_256CFE918, (void (*)(uint64_t))MEMORY[0x24BE3FAA0]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v38[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v15 = &v38[-v14];
  v16 = sub_23DDC527C();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = &v38[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v20);
  v22 = &v38[-v21];
  v23 = type metadata accessor for BalanceWidgetViewModel();
  v24 = *(_BYTE *)(v3 + *(int *)(v23 + 24));
  v25 = v3 + *(int *)(v23 + 20);
  v26 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v17 + 16);
  if ((v39 & 1) != 0)
    v27 = (unsigned int *)MEMORY[0x24BE3FAC0];
  else
    v27 = (unsigned int *)MEMORY[0x24BE3FAD0];
  if ((v24 & 1) != 0)
  {
    v26(v19, v25, v16);
    v28 = *MEMORY[0x24BE3FA90];
    v29 = sub_23DDC5258();
    v30 = *(_QWORD *)(v29 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v30 + 104))(v12, v28, v29);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v12, 0, 1, v29);
    v31 = *v27;
    v32 = v41;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 104))(v6, v31, v41);
    sub_23DDC524C();
    v9 = v6;
    v15 = v12;
    v22 = v19;
  }
  else
  {
    v26(v22, v25, v16);
    v33 = *MEMORY[0x24BE3FA88];
    v34 = sub_23DDC5258();
    v35 = *(_QWORD *)(v34 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v35 + 104))(v15, v33, v34);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v15, 0, 1, v34);
    v36 = *v27;
    v32 = v41;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 104))(v9, v36, v41);
    sub_23DDC524C();
  }
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v32);
  sub_23DD290A0((uint64_t)v15, qword_256CFE918, (void (*)(uint64_t))MEMORY[0x24BE3FAA0]);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v17 + 8))(v22, v16);
}

uint64_t sub_23DD6FBA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t ObjCClassFromMetadata;
  id v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD v25[2];

  v0 = sub_23DDC671C();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v2);
  sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v25 - v4;
  v6 = type metadata accessor for OvernightMetricsWarmupProgress();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DD6F1CC();
  if ((v11 & 1) == 0)
  {
    v12 = v10;
    sub_23DD72D44();
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_23DDC7F50;
    if (v12)
    {
      sub_23DDC6710();
      sub_23DDC6704();
      v14 = sub_23DD6F1CC();
      if ((v15 & 1) != 0)
        v16 = 0;
      else
        v16 = v14;
      v25[1] = v16;
      sub_23DDC66EC();
      sub_23DDC6704();
      sub_23DDC6728();
      type metadata accessor for HealthBalanceUI();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v18 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    }
    else
    {
      sub_23DDC66D4();
      type metadata accessor for HealthBalanceUI();
      v22 = swift_getObjCClassFromMetadata();
      v18 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v22);
    }
    goto LABEL_13;
  }
  sub_23DD728B4((uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_23DD290A0((uint64_t)v5, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
LABEL_11:
    sub_23DD72D44();
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_23DDC7F50;
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    v21 = swift_getObjCClassFromMetadata();
    v18 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v21);
LABEL_13:
    v23 = v18;
    sub_23DDC5168();
    *(_QWORD *)(v13 + 32) = sub_23DDC6770();
    *(_QWORD *)(v13 + 40) = v24;
    return v13;
  }
  sub_23DD325F8((uint64_t)v5, (uint64_t)v9);
  v19 = sub_23DDC52B8();
  result = sub_23DDC52D0();
  if (!__OFSUB__(v19, result))
  {
    sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_23DD6FFF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t ObjCClassFromMetadata;
  id v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD v35[3];
  uint64_t v36;

  v0 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v0);
  v35[1] = (char *)v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v2);
  v35[0] = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23DDC671C();
  MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v35 - v10;
  v12 = type metadata accessor for OvernightMetricsWarmupProgress();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v35 - v17;
  v19 = sub_23DD6F1CC();
  if ((v20 & 1) == 0)
  {
    if (v19)
    {
      sub_23DDC6710();
      sub_23DDC6704();
      v21 = sub_23DD6F1CC();
      if ((v22 & 1) != 0)
        v23 = 0;
      else
        v23 = v21;
      v36 = v23;
      sub_23DDC66EC();
      sub_23DDC6704();
      sub_23DDC6728();
      type metadata accessor for HealthBalanceUI();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v25 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  sub_23DD728B4((uint64_t)v11);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v26(v11, 1, v12) == 1)
  {
    sub_23DD290A0((uint64_t)v11, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
LABEL_13:
    sub_23DDC66D4();
    type metadata accessor for HealthBalanceUI();
    v31 = swift_getObjCClassFromMetadata();
    v25 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v31);
LABEL_17:
    v34 = v25;
    sub_23DDC5168();
    return sub_23DDC6770();
  }
  sub_23DD325F8((uint64_t)v11, (uint64_t)v18);
  v27 = sub_23DDC52B8();
  result = sub_23DDC52D0();
  v29 = v27 - result;
  if (__OFSUB__(v27, result))
  {
    __break(1u);
  }
  else
  {
    sub_23DCF59A8((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
    if (v29 <= 0)
      goto LABEL_13;
    sub_23DDC6710();
    sub_23DDC6704();
    sub_23DD728B4((uint64_t)v8);
    if (v26(v8, 1, v12) == 1)
    {
      sub_23DD290A0((uint64_t)v8, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
      v30 = 0;
LABEL_16:
      v36 = v30;
      sub_23DDC66EC();
      sub_23DDC6704();
      sub_23DDC6728();
      type metadata accessor for HealthBalanceUI();
      v33 = swift_getObjCClassFromMetadata();
      v25 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v33);
      goto LABEL_17;
    }
    sub_23DD325F8((uint64_t)v8, (uint64_t)v15);
    v32 = sub_23DDC52B8();
    result = sub_23DDC52D0();
    if (!__OFSUB__(v32, result))
    {
      v30 = (v32 - result) & ~((v32 - result) >> 63);
      sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_23DD70510()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v10 - v1;
  v3 = type metadata accessor for OvernightMetricsWarmupProgress();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD728B4((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23DD290A0((uint64_t)v2, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    v7 = 0;
LABEL_5:
    v10[1] = v7;
    sub_23DD49324();
    return sub_23DDC69C8();
  }
  sub_23DD325F8((uint64_t)v2, (uint64_t)v6);
  v8 = sub_23DDC52B8();
  result = sub_23DDC52D0();
  if (!__OFSUB__(v8, result))
  {
    v7 = (v8 - result) & ~((v8 - result) >> 63);
    sub_23DCF59A8((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for BalanceWidgetViewModel()
{
  uint64_t result;

  result = qword_2543263A0;
  if (!qword_2543263A0)
    return swift_getSingletonMetadata();
  return result;
}

char *initializeBufferWithCopyOfBuffer for BalanceWidgetViewModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  int *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, int *);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  _QWORD *v72;
  char *v73;
  uint64_t v74;

  v3 = a2;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DDC5330();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v3, v7);
    v8 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
    *(_QWORD *)((char *)a1 + v8[5]) = *(_QWORD *)((char *)v3 + v8[5]);
    v9 = v8[6];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)v3 + v9);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v10 = *v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = sub_23DDC55A0();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14))
      {
        sub_23DCF6898(0, &qword_254326A70, (void (*)(uint64_t))MEMORY[0x24BE40438]);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v15 + 16))(v10, v11, v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
    v17 = v8[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)v3 + v17;
    v20 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v21 = *((_QWORD *)v20 - 1);
    v74 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = sub_23DDC512C();
      v24 = v21;
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      v25(v18, v19, v23);
      v26 = v20[5];
      v72 = a1;
      v27 = v3;
      v28 = v8;
      v29 = &v18[v26];
      v30 = &v19[v26];
      v25(&v18[v26], &v19[v26], v23);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v25(&v29[*(int *)(v31 + 36)], &v30[*(int *)(v31 + 36)], v23);
      v32 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v29[v32[5]] = *(_QWORD *)&v30[v32[5]];
      *(_QWORD *)&v29[v32[6]] = *(_QWORD *)&v30[v32[6]];
      *(_QWORD *)&v29[v32[7]] = *(_QWORD *)&v30[v32[7]];
      v33 = v20[6];
      v34 = &v18[v33];
      v35 = &v19[v33];
      *(_OWORD *)v34 = *(_OWORD *)v35;
      v34[16] = v35[16];
      v18[v20[7]] = v19[v20[7]];
      v18[v20[8]] = v19[v20[8]];
      v18[v20[9]] = v19[v20[9]];
      v36 = v20[10];
      v37 = &v18[v36];
      v38 = &v19[v36];
      v39 = *((_QWORD *)v38 + 1);
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = v39;
      v40 = v20[11];
      v41 = &v18[v40];
      v42 = &v19[v40];
      v43 = *((_QWORD *)v42 + 1);
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = v43;
      v44 = *(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8 = v28;
      v3 = v27;
      a1 = v72;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44(v18, 0, 1, v20);
    }
    v45 = v8[8];
    v46 = (char *)a1 + v45;
    v47 = (char *)v3 + v45;
    *(_QWORD *)((char *)a1 + v45) = *(_QWORD *)((char *)v3 + v45);
    v48 = type metadata accessor for OvernightMetricsChartPointCollection();
    v49 = *(int *)(v48 + 20);
    v50 = &v46[v49];
    v73 = &v47[v49];
    v51 = (char *)a1;
    v52 = v8;
    v53 = sub_23DDC51E0();
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
    swift_bridgeObjectRetain();
    v54(v50, v73, v53);
    *(_QWORD *)&v46[*(int *)(v48 + 24)] = *(_QWORD *)&v47[*(int *)(v48 + 24)];
    *(_QWORD *)&v51[v52[9]] = *(_QWORD *)((char *)v3 + v52[9]);
    *(_QWORD *)&v51[v52[10]] = *(_QWORD *)((char *)v3 + v52[10]);
    v55 = v52[11];
    v56 = &v51[v55];
    v57 = (char *)v3 + v55;
    v58 = sub_23DDC512C();
    v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59(v56, v57, v58);
    sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v61 = v60;
    v59(&v56[*(int *)(v60 + 36)], &v57[*(int *)(v60 + 36)], v58);
    v62 = v52[12];
    v63 = &v51[v62];
    v64 = (char *)v3 + v62;
    v59(&v51[v62], (char *)v3 + v62, v58);
    v59(&v63[*(int *)(v61 + 36)], &v64[*(int *)(v61 + 36)], v58);
    *(_QWORD *)&v51[v52[13]] = *(_QWORD *)((char *)v3 + v52[13]);
    v65 = v52[14];
    v13 = v51;
    *(_QWORD *)&v51[v65] = *(_QWORD *)((char *)v3 + v65);
    v66 = *(int *)(v74 + 20);
    v67 = &v51[v66];
    v68 = (char *)v3 + v66;
    v69 = sub_23DDC527C();
    v70 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v70(v67, v68, v69);
    v13[*(int *)(v74 + 24)] = *((_BYTE *)v3 + *(int *)(v74 + 24));
  }
  return v13;
}

uint64_t destroy for BalanceWidgetViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  swift_bridgeObjectRelease();
  v6 = a1 + v5[6];
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = sub_23DDC55A0();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  v9 = a1 + v5[7];
  v10 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = sub_23DDC512C();
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v9, v11);
    v13 = v9 + *(int *)(v10 + 20);
    v12(v13, v11);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v12(v13 + *(int *)(v14 + 36), v11);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = a1 + v5[8];
  swift_bridgeObjectRelease();
  v16 = v15 + *(int *)(type metadata accessor for OvernightMetricsChartPointCollection() + 20);
  v17 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = a1 + v5[11];
  v19 = sub_23DDC512C();
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v18, v19);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v22 = v21;
  v20(v18 + *(int *)(v21 + 36), v19);
  v23 = a1 + v5[12];
  v20(v23, v19);
  v20(v23 + *(int *)(v22 + 36), v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = a1 + *(int *)(a2 + 20);
  v25 = sub_23DDC527C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
}

uint64_t initializeWithCopy for BalanceWidgetViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  int *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, _QWORD, uint64_t, int *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v9 = *v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = sub_23DDC55A0();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_23DCF6898(0, &qword_254326A70, (void (*)(uint64_t))MEMORY[0x24BE40438]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  swift_storeEnumTagMultiPayload();
  v14 = v7[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  v69 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = sub_23DDC512C();
    v21 = v18;
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v22(v15, v16, v20);
    v23 = v17[5];
    v67 = a1;
    v24 = a2;
    v25 = v7;
    v26 = &v15[v23];
    v27 = &v16[v23];
    v22(&v15[v23], &v16[v23], v20);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v22(&v26[*(int *)(v28 + 36)], &v27[*(int *)(v28 + 36)], v20);
    v29 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v26[v29[5]] = *(_QWORD *)&v27[v29[5]];
    *(_QWORD *)&v26[v29[6]] = *(_QWORD *)&v27[v29[6]];
    *(_QWORD *)&v26[v29[7]] = *(_QWORD *)&v27[v29[7]];
    v30 = v17[6];
    v31 = &v15[v30];
    v32 = &v16[v30];
    *(_OWORD *)v31 = *(_OWORD *)v32;
    v31[16] = v32[16];
    v15[v17[7]] = v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    v15[v17[9]] = v16[v17[9]];
    v33 = v17[10];
    v34 = &v15[v33];
    v35 = &v16[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = v17[11];
    v38 = &v15[v37];
    v39 = &v16[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v41 = *(void (**)(char *, _QWORD, uint64_t, int *))(v21 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = v25;
    a2 = v24;
    a1 = v67;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41(v15, 0, 1, v17);
  }
  v42 = v7[8];
  v43 = a1 + v42;
  v44 = a2 + v42;
  *(_QWORD *)(a1 + v42) = *(_QWORD *)(a2 + v42);
  v45 = type metadata accessor for OvernightMetricsChartPointCollection();
  v46 = *(int *)(v45 + 20);
  v47 = v43 + v46;
  v68 = v44 + v46;
  v48 = v7;
  v49 = sub_23DDC51E0();
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain();
  v50(v47, v68, v49);
  *(_QWORD *)(v43 + *(int *)(v45 + 24)) = *(_QWORD *)(v44 + *(int *)(v45 + 24));
  *(_QWORD *)(a1 + v48[9]) = *(_QWORD *)(a2 + v48[9]);
  *(_QWORD *)(a1 + v48[10]) = *(_QWORD *)(a2 + v48[10]);
  v51 = v48[11];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = sub_23DDC512C();
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55(v52, v53, v54);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v57 = v56;
  v55(v52 + *(int *)(v56 + 36), v53 + *(int *)(v56 + 36), v54);
  v58 = v48[12];
  v59 = a1 + v58;
  v60 = a2 + v58;
  v55(a1 + v58, a2 + v58, v54);
  v55(v59 + *(int *)(v57 + 36), v60 + *(int *)(v57 + 36), v54);
  *(_QWORD *)(a1 + v48[13]) = *(_QWORD *)(a2 + v48[13]);
  *(_QWORD *)(a1 + v48[14]) = *(_QWORD *)(a2 + v48[14]);
  v61 = *(int *)(v69 + 20);
  v62 = a1 + v61;
  v63 = a2 + v61;
  v64 = sub_23DDC527C();
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v65(v62, v63, v64);
  *(_BYTE *)(a1 + *(int *)(v69 + 24)) = *(_BYTE *)(a2 + *(int *)(v69 + 24));
  return a1;
}

uint64_t assignWithCopy for BalanceWidgetViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, int *);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *, _QWORD, uint64_t, int *);
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v8 = v7[6];
    v9 = (_QWORD *)(a1 + v8);
    v10 = (_QWORD *)(a2 + v8);
    sub_23DCF59A8(a1 + v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v9 = *v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      v11 = sub_23DDC55A0();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        sub_23DCF6898(0, &qword_254326A70, (void (*)(uint64_t))MEMORY[0x24BE40438]);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  v14 = v7[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      v23 = sub_23DDC512C();
      v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      v24(v15, v16, v23);
      v82 = v18;
      v83 = a3;
      v25 = v24;
      v26 = v17[5];
      v27 = &v15[v26];
      v28 = &v16[v26];
      v25(&v15[v26], &v16[v26], v23);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v25(&v27[*(int *)(v29 + 36)], &v28[*(int *)(v29 + 36)], v23);
      v30 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v27[v30[5]] = *(_QWORD *)&v28[v30[5]];
      *(_QWORD *)&v27[v30[6]] = *(_QWORD *)&v28[v30[6]];
      *(_QWORD *)&v27[v30[7]] = *(_QWORD *)&v28[v30[7]];
      v31 = v17[6];
      v32 = &v15[v31];
      v33 = &v16[v31];
      v34 = v33[16];
      *(_OWORD *)v32 = *(_OWORD *)v33;
      v32[16] = v34;
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      v35 = v17[10];
      v36 = &v15[v35];
      v37 = &v16[v35];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
      v38 = v17[11];
      v39 = &v15[v38];
      v40 = &v16[v38];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      *((_QWORD *)v39 + 1) = *((_QWORD *)v40 + 1);
      v41 = *(void (**)(char *, _QWORD, uint64_t, int *))(v82 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a3 = v83;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v41(v15, 0, 1, v17);
      goto LABEL_16;
    }
  }
  else
  {
    if (!v21)
    {
      v42 = sub_23DDC512C();
      v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 24);
      v43(v15, v16, v42);
      v44 = v17[5];
      v84 = a3;
      v45 = &v15[v44];
      v46 = &v16[v44];
      v43(&v15[v44], &v16[v44], v42);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v43(&v45[*(int *)(v47 + 36)], &v46[*(int *)(v47 + 36)], v42);
      v48 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v45[v48[5]] = *(_QWORD *)&v46[v48[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v45[v48[6]] = *(_QWORD *)&v46[v48[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v45[v48[7]] = *(_QWORD *)&v46[v48[7]];
      a3 = v84;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v49 = v17[6];
      v50 = &v15[v49];
      v51 = &v16[v49];
      v52 = *(_OWORD *)v51;
      v50[16] = v51[16];
      *(_OWORD *)v50 = v52;
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      v15[v17[9]] = v16[v17[9]];
      v53 = v17[10];
      v54 = &v15[v53];
      v55 = &v16[v53];
      *(_QWORD *)v54 = *(_QWORD *)v55;
      *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v56 = v17[11];
      v57 = &v15[v56];
      v58 = &v16[v56];
      *(_QWORD *)v57 = *(_QWORD *)v58;
      *((_QWORD *)v57 + 1) = *((_QWORD *)v58 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_23DCF59A8((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
  }
  sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
LABEL_16:
  v59 = v7[8];
  v60 = a1 + v59;
  v61 = a2 + v59;
  *(_QWORD *)(a1 + v59) = *(_QWORD *)(a2 + v59);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v62 = type metadata accessor for OvernightMetricsChartPointCollection();
  v63 = *(int *)(v62 + 20);
  v64 = v60 + v63;
  v65 = v61 + v63;
  v66 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 24))(v64, v65, v66);
  *(_QWORD *)(v60 + *(int *)(v62 + 24)) = *(_QWORD *)(v61 + *(int *)(v62 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v67 = v7[11];
  v68 = a1 + v67;
  v69 = a2 + v67;
  v70 = sub_23DDC512C();
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 24);
  v71(v68, v69, v70);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v73 = v72;
  v71(v68 + *(int *)(v72 + 36), v69 + *(int *)(v72 + 36), v70);
  v74 = v7[12];
  v75 = a1 + v74;
  v76 = a2 + v74;
  v71(a1 + v74, a2 + v74, v70);
  v71(v75 + *(int *)(v73 + 36), v76 + *(int *)(v73 + 36), v70);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v77 = *(int *)(a3 + 20);
  v78 = a1 + v77;
  v79 = a2 + v77;
  v80 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 24))(v78, v79, v80);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for BalanceWidgetViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  v8 = v7[6];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = sub_23DDC55A0();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      sub_23DCF6898(0, &qword_254326A70, (void (*)(uint64_t))MEMORY[0x24BE40438]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  v15 = v7[7];
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v19 = *((_QWORD *)v18 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = sub_23DDC512C();
    v54 = v19;
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
    v22(v16, v17, v21);
    v23 = v18[5];
    v55 = a3;
    v24 = &v16[v23];
    v25 = &v17[v23];
    v22(&v16[v23], &v17[v23], v21);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v22(&v24[*(int *)(v26 + 36)], &v25[*(int *)(v26 + 36)], v21);
    v27 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v24[v27[5]] = *(_QWORD *)&v25[v27[5]];
    *(_QWORD *)&v24[v27[6]] = *(_QWORD *)&v25[v27[6]];
    *(_QWORD *)&v24[v27[7]] = *(_QWORD *)&v25[v27[7]];
    a3 = v55;
    v28 = v18[6];
    v29 = &v16[v28];
    v30 = &v17[v28];
    *(_OWORD *)v29 = *(_OWORD *)v30;
    v29[16] = v30[16];
    v16[v18[7]] = v17[v18[7]];
    v16[v18[8]] = v17[v18[8]];
    v16[v18[9]] = v17[v18[9]];
    *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
    *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v16, 0, 1, v18);
  }
  v31 = v7[8];
  v32 = a1 + v31;
  v33 = a2 + v31;
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  v34 = type metadata accessor for OvernightMetricsChartPointCollection();
  v35 = *(int *)(v34 + 20);
  v36 = v32 + v35;
  v37 = v33 + v35;
  v38 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  *(_QWORD *)(v32 + *(int *)(v34 + 24)) = *(_QWORD *)(v33 + *(int *)(v34 + 24));
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  v39 = v7[11];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = sub_23DDC512C();
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32);
  v43(v40, v41, v42);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v45 = v44;
  v43(v40 + *(int *)(v44 + 36), v41 + *(int *)(v44 + 36), v42);
  v46 = v7[12];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v43(a1 + v46, a2 + v46, v42);
  v43(v47 + *(int *)(v45 + 36), v48 + *(int *)(v45 + 36), v42);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  v49 = *(int *)(a3 + 20);
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for BalanceWidgetViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, int *);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v6 = sub_23DDC5330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for OvernightMetricsViewModel(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v8 = v7[6];
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    sub_23DCF59A8(a1 + v8, type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod);
    v11 = type metadata accessor for OvernightMetricsViewModel.DataTypeVisibilityDerivationMethod(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v12 = sub_23DDC55A0();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        sub_23DCF6898(0, &qword_254326A70, (void (*)(uint64_t))MEMORY[0x24BE40438]);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  v15 = v7[7];
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v19 = *((_QWORD *)v18 - 1);
  v20 = *(uint64_t (**)(char *, uint64_t, int *))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      v24 = sub_23DDC512C();
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
      v25(v16, v17, v24);
      v82 = v19;
      v83 = a3;
      v26 = v25;
      v27 = v18[5];
      v28 = &v16[v27];
      v29 = &v17[v27];
      v26(&v16[v27], &v17[v27], v24);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v26(&v28[*(int *)(v30 + 36)], &v29[*(int *)(v30 + 36)], v24);
      v31 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v28[v31[5]] = *(_QWORD *)&v29[v31[5]];
      *(_QWORD *)&v28[v31[6]] = *(_QWORD *)&v29[v31[6]];
      v32 = v31[7];
      v33 = *(_QWORD *)&v29[v32];
      a3 = v83;
      *(_QWORD *)&v28[v32] = v33;
      v34 = v18[6];
      v35 = &v16[v34];
      v36 = &v17[v34];
      *(_OWORD *)v35 = *(_OWORD *)v36;
      v35[16] = v36[16];
      v16[v18[7]] = v17[v18[7]];
      v16[v18[8]] = v17[v18[8]];
      v16[v18[9]] = v17[v18[9]];
      *(_OWORD *)&v16[v18[10]] = *(_OWORD *)&v17[v18[10]];
      *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v82 + 56))(v16, 0, 1, v18);
      goto LABEL_16;
    }
  }
  else
  {
    if (!v22)
    {
      v37 = sub_23DDC512C();
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 40);
      v38(v16, v17, v37);
      v39 = v18[5];
      v40 = &v16[v39];
      v84 = a3;
      v41 = &v17[v39];
      v38(&v16[v39], &v17[v39], v37);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v38(&v40[*(int *)(v42 + 36)], &v41[*(int *)(v42 + 36)], v37);
      v43 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v40[v43[5]] = *(_QWORD *)&v41[v43[5]];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v40[v43[6]] = *(_QWORD *)&v41[v43[6]];
      swift_bridgeObjectRelease();
      v44 = v43[7];
      v45 = *(_QWORD *)&v41[v44];
      a3 = v84;
      *(_QWORD *)&v40[v44] = v45;
      swift_bridgeObjectRelease();
      v46 = v18[6];
      v47 = &v16[v46];
      v48 = &v17[v46];
      *(_OWORD *)v47 = *(_OWORD *)v48;
      v47[16] = v48[16];
      v16[v18[7]] = v17[v18[7]];
      v16[v18[8]] = v17[v18[8]];
      v16[v18[9]] = v17[v18[9]];
      v49 = v18[10];
      v50 = &v16[v49];
      v51 = (uint64_t *)&v17[v49];
      v53 = *v51;
      v52 = v51[1];
      *(_QWORD *)v50 = v53;
      *((_QWORD *)v50 + 1) = v52;
      swift_bridgeObjectRelease();
      v54 = v18[11];
      v55 = &v16[v54];
      v56 = (uint64_t *)&v17[v54];
      v58 = *v56;
      v57 = v56[1];
      *(_QWORD *)v55 = v58;
      *((_QWORD *)v55 + 1) = v57;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_23DCF59A8((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
  }
  sub_23DCF6898(0, (unint64_t *)&qword_254326A48, (void (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint);
  memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
LABEL_16:
  v59 = v7[8];
  v60 = a1 + v59;
  v61 = a2 + v59;
  *(_QWORD *)(a1 + v59) = *(_QWORD *)(a2 + v59);
  swift_bridgeObjectRelease();
  v62 = type metadata accessor for OvernightMetricsChartPointCollection();
  v63 = *(int *)(v62 + 20);
  v64 = v60 + v63;
  v65 = v61 + v63;
  v66 = sub_23DDC51E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  *(_QWORD *)(v60 + *(int *)(v62 + 24)) = *(_QWORD *)(v61 + *(int *)(v62 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  swift_bridgeObjectRelease();
  v67 = v7[11];
  v68 = a1 + v67;
  v69 = a2 + v67;
  v70 = sub_23DDC512C();
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 40);
  v71(v68, v69, v70);
  sub_23DD04550(0, &qword_254326A60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v73 = v72;
  v71(v68 + *(int *)(v72 + 36), v69 + *(int *)(v72 + 36), v70);
  v74 = v7[12];
  v75 = a1 + v74;
  v76 = a2 + v74;
  v71(a1 + v74, a2 + v74, v70);
  v71(v75 + *(int *)(v73 + 36), v76 + *(int *)(v73 + 36), v70);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v7[14]) = *(_QWORD *)(a2 + v7[14]);
  swift_bridgeObjectRelease();
  v77 = *(int *)(a3 + 20);
  v78 = a1 + v77;
  v79 = a2 + v77;
  v80 = sub_23DDC527C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 40))(v78, v79, v80);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for BalanceWidgetViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD723D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = type metadata accessor for OvernightMetricsViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_23DDC527C();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BalanceWidgetViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD72484(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for OvernightMetricsViewModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_23DDC527C();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t sub_23DD72528()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for OvernightMetricsViewModel(319);
  if (v1 <= 0x3F)
  {
    result = sub_23DDC527C();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_23DD725B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t ObjCClassFromMetadata;
  id v12;
  uint64_t v14;
  uint64_t v15;

  v0 = sub_23DDC5174();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_23DDC6734();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DDC671C();
  MEMORY[0x24BDAC7A8](v2);
  sub_23DCF6898(0, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - v4;
  v6 = type metadata accessor for OvernightMetricsWarmupProgress();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD728B4((uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_23DD290A0((uint64_t)v5, &qword_2543266F8, (void (*)(uint64_t))type metadata accessor for OvernightMetricsWarmupProgress);
    return 0;
  }
  else
  {
    sub_23DD325F8((uint64_t)v5, (uint64_t)v9);
    v15 = sub_23DDC52B8();
    sub_23DD49324();
    sub_23DDC69C8();
    v15 = sub_23DDC52D0();
    sub_23DDC69C8();
    sub_23DDC6710();
    sub_23DDC6704();
    sub_23DDC66F8();
    swift_bridgeObjectRelease();
    sub_23DDC6704();
    sub_23DDC66F8();
    swift_bridgeObjectRelease();
    sub_23DDC6704();
    sub_23DDC6728();
    type metadata accessor for HealthBalanceUI();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v12 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    sub_23DDC5168();
    v10 = sub_23DDC6770();
    sub_23DCF59A8((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsWarmupProgress);
  }
  return v10;
}

uint64_t sub_23DD728B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v2 = sub_23DDC52DC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCF6898(0, &qword_2543266B8, (void (*)(uint64_t))MEMORY[0x24BE3FFB0]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v24 - v7;
  v9 = sub_23DDC5420();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  OvernightMetricsViewModel.daySummaryForToday.getter((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_23DD290A0((uint64_t)v8, &qword_2543266B8, (void (*)(uint64_t))MEMORY[0x24BE3FFB0]);
    v13 = type metadata accessor for OvernightMetricsWarmupProgress();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    v25 = a1;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    sub_23DDC56C0();
    v15 = sub_23DDC536C();
    v24[1] = v24;
    MEMORY[0x24BDAC7A8](v15);
    v24[-2] = v12;
    v16 = swift_bridgeObjectRetain();
    v17 = sub_23DD48510(v16, (void (*)(uint64_t))sub_23DD48B94, (uint64_t)&v24[-4]);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v17 + 16) >= *(_QWORD *)(v15 + 16))
      v18 = *(_QWORD *)(v15 + 16);
    else
      v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      sub_23DD72C94();
      v19 = sub_23DDC6AF4();
    }
    else
    {
      v19 = MEMORY[0x24BEE4B00];
    }
    v26 = v19;
    v20 = swift_bridgeObjectRetain();
    sub_23DD48670(v20, v17, 1, &v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v25;
    v21 = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v25, v5, v2);
    v23 = type metadata accessor for OvernightMetricsWarmupProgress();
    *(_QWORD *)(v22 + *(int *)(v23 + 20)) = v21;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 0, 1, v23);
  }
}

uint64_t sub_23DD72B6C(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v5 < v2)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

uint64_t sub_23DD72BB0(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v2 < v5)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

uint64_t sub_23DD72BF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v6;

  v0 = sub_23DDC54C8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDC54D4();
  v4 = sub_23DDC54BC();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

void sub_23DD72C94()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_254326788)
  {
    sub_23DDC53A8();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20];
    sub_23DDC52DC();
    sub_23DCF535C(&qword_254326680, v0, MEMORY[0x24BE3FE38]);
    v1 = sub_23DDC6B00();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_254326788);
  }
}

uint64_t sub_23DD72D28()
{
  return sub_23DD72BF4() & 1;
}

void sub_23DD72D44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFE338)
  {
    v0 = sub_23DDC6BF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFE338);
  }
}

uint64_t *sub_23DD72D98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, int *);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, _QWORD, uint64_t, int *);
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a3;
    v7 = a1;
    v8 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    v9 = v8[5];
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v13 = *((_QWORD *)v12 - 1);
    v14 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v16 = sub_23DDC512C();
      v48 = v5;
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(v10, v11, v16);
      v18 = v12[5];
      v19 = &v10[v18];
      v47 = v13;
      v20 = &v11[v18];
      v17(&v10[v18], &v11[v18], v16);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v17(&v19[*(int *)(v21 + 36)], &v20[*(int *)(v21 + 36)], v16);
      v22 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v19[v22[5]] = *(_QWORD *)&v20[v22[5]];
      *(_QWORD *)&v19[v22[6]] = *(_QWORD *)&v20[v22[6]];
      *(_QWORD *)&v19[v22[7]] = *(_QWORD *)&v20[v22[7]];
      v23 = v12[6];
      v24 = &v10[v23];
      v25 = &v11[v23];
      *(_OWORD *)v24 = *(_OWORD *)v25;
      v24[16] = v25[16];
      v10[v12[7]] = v11[v12[7]];
      v10[v12[8]] = v11[v12[8]];
      v10[v12[9]] = v11[v12[9]];
      v26 = v12[10];
      v27 = &v10[v26];
      v28 = &v11[v26];
      v29 = *((_QWORD *)v28 + 1);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *((_QWORD *)v27 + 1) = v29;
      v30 = v12[11];
      v31 = &v10[v30];
      v32 = &v11[v30];
      v33 = *((_QWORD *)v32 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v33;
      v34 = *(void (**)(char *, _QWORD, uint64_t, int *))(v47 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34(v10, 0, 1, v12);
      v5 = v48;
    }
    *(_OWORD *)((char *)v7 + v8[6]) = *(_OWORD *)((char *)a2 + v8[6]);
    v35 = v8[7];
    v36 = (char *)v7 + v35;
    v37 = (char *)a2 + v35;
    v38 = *((_OWORD *)v37 + 1);
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v38;
    *((_QWORD *)v36 + 10) = *((_QWORD *)v37 + 10);
    v39 = *((_OWORD *)v37 + 4);
    v40 = *((_OWORD *)v37 + 2);
    *((_OWORD *)v36 + 3) = *((_OWORD *)v37 + 3);
    *((_OWORD *)v36 + 4) = v39;
    *((_OWORD *)v36 + 2) = v40;
    *(uint64_t *)((char *)v7 + v8[8]) = *(uint64_t *)((char *)a2 + v8[8]);
    *(uint64_t *)((char *)v7 + v8[9]) = *(uint64_t *)((char *)a2 + v8[9]);
    v41 = *(int *)(v5 + 20);
    v42 = (char *)v7 + v41;
    v43 = (char *)a2 + v41;
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = *((_QWORD *)v43 + 3);
    *((_QWORD *)v42 + 2) = *((_QWORD *)v43 + 2);
    *((_QWORD *)v42 + 3) = v45;
    *((_QWORD *)v42 + 4) = *((_QWORD *)v43 + 4);
    *(_OWORD *)(v42 + 40) = *(_OWORD *)(v43 + 40);
    *(_OWORD *)(v42 + 56) = *(_OWORD *)(v43 + 56);
    *(_OWORD *)(v42 + 72) = *(_OWORD *)(v43 + 72);
    *(_OWORD *)(v42 + 88) = *(_OWORD *)(v43 + 88);
    *(_OWORD *)(v42 + 104) = *(_OWORD *)(v43 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t type metadata accessor for OvernightMetricsChartLayout.Configuration(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFEA08);
}

uint64_t sub_23DD730B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v3 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3))
  {
    v4 = sub_23DDC512C();
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v5(v2, v4);
    v6 = v2 + *(int *)(v3 + 20);
    v5(v6, v4);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v5(v6 + *(int *)(v7 + 36), v4);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_23DD731FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, int *);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, _QWORD, uint64_t, int *);
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(unsigned int (**)(char *, uint64_t, int *))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = sub_23DDC512C();
    v46 = a3;
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v15(v8, v9, v14);
    v16 = v10[5];
    v17 = &v8[v16];
    v45 = v11;
    v18 = &v9[v16];
    v15(&v8[v16], &v9[v16], v14);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v15(&v17[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v14);
    v20 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v17[v20[5]] = *(_QWORD *)&v18[v20[5]];
    *(_QWORD *)&v17[v20[6]] = *(_QWORD *)&v18[v20[6]];
    *(_QWORD *)&v17[v20[7]] = *(_QWORD *)&v18[v20[7]];
    v21 = v10[6];
    v22 = &v8[v21];
    v23 = &v9[v21];
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[16] = v23[16];
    v8[v10[7]] = v9[v10[7]];
    v8[v10[8]] = v9[v10[8]];
    v8[v10[9]] = v9[v10[9]];
    v24 = v10[10];
    v25 = &v8[v24];
    v26 = &v9[v24];
    v27 = *((_QWORD *)v26 + 1);
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *((_QWORD *)v25 + 1) = v27;
    v28 = v10[11];
    v29 = &v8[v28];
    v30 = &v9[v28];
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    v32 = *(void (**)(char *, _QWORD, uint64_t, int *))(v45 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32(v8, 0, 1, v10);
    a3 = v46;
  }
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
  v33 = v6[7];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = *((_OWORD *)v35 + 1);
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *((_OWORD *)v34 + 1) = v36;
  *((_QWORD *)v34 + 10) = *((_QWORD *)v35 + 10);
  v37 = *((_OWORD *)v35 + 4);
  v38 = *((_OWORD *)v35 + 2);
  *((_OWORD *)v34 + 3) = *((_OWORD *)v35 + 3);
  *((_OWORD *)v34 + 4) = v37;
  *((_OWORD *)v34 + 2) = v38;
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
  v39 = *(int *)(a3 + 20);
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = v42;
  v43 = *((_QWORD *)v41 + 3);
  *((_QWORD *)v40 + 2) = *((_QWORD *)v41 + 2);
  *((_QWORD *)v40 + 3) = v43;
  *((_QWORD *)v40 + 4) = *((_QWORD *)v41 + 4);
  *(_OWORD *)(v40 + 40) = *(_OWORD *)(v41 + 40);
  *(_OWORD *)(v40 + 56) = *(_OWORD *)(v41 + 56);
  *(_OWORD *)(v40 + 72) = *(_OWORD *)(v41 + 72);
  *(_OWORD *)(v40 + 88) = *(_OWORD *)(v41 + 88);
  *(_OWORD *)(v40 + 104) = *(_OWORD *)(v41 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_23DD734DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void (*v34)(char *, _QWORD, uint64_t, int *);
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v64;
  int *v65;
  int *v66;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v17 = sub_23DDC512C();
      v65 = v6;
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      v18(v8, v9, v17);
      v19 = v10[5];
      v20 = &v8[v19];
      v64 = a3;
      v21 = &v9[v19];
      v18(&v8[v19], &v9[v19], v17);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v18(&v20[*(int *)(v22 + 36)], &v21[*(int *)(v22 + 36)], v17);
      v23 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v20[v23[5]] = *(_QWORD *)&v21[v23[5]];
      *(_QWORD *)&v20[v23[6]] = *(_QWORD *)&v21[v23[6]];
      *(_QWORD *)&v20[v23[7]] = *(_QWORD *)&v21[v23[7]];
      v24 = v10[6];
      v25 = &v8[v24];
      v26 = &v9[v24];
      v27 = v26[16];
      *(_OWORD *)v25 = *(_OWORD *)v26;
      v25[16] = v27;
      v8[v10[7]] = v9[v10[7]];
      v8[v10[8]] = v9[v10[8]];
      v8[v10[9]] = v9[v10[9]];
      v28 = v10[10];
      v29 = &v8[v28];
      v30 = &v9[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
      v31 = v10[11];
      v32 = &v8[v31];
      v33 = &v9[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
      v34 = *(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a3 = v64;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34(v8, 0, 1, v10);
      v6 = v65;
      goto LABEL_9;
    }
    v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  else
  {
    if (!v14)
    {
      v35 = sub_23DDC512C();
      v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 24);
      v36(v8, v9, v35);
      v37 = v10[5];
      v66 = v6;
      v38 = a3;
      v39 = &v8[v37];
      v40 = &v9[v37];
      v36(&v8[v37], &v9[v37], v35);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v36(&v39[*(int *)(v41 + 36)], &v40[*(int *)(v41 + 36)], v35);
      v42 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v39[v42[5]] = *(_QWORD *)&v40[v42[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v39[v42[6]] = *(_QWORD *)&v40[v42[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v39[v42[7]] = *(_QWORD *)&v40[v42[7]];
      a3 = v38;
      v6 = v66;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v43 = v10[6];
      v44 = &v8[v43];
      v45 = &v9[v43];
      v46 = *(_OWORD *)v45;
      v44[16] = v45[16];
      *(_OWORD *)v44 = v46;
      v8[v10[7]] = v9[v10[7]];
      v8[v10[8]] = v9[v10[8]];
      v8[v10[9]] = v9[v10[9]];
      v47 = v10[10];
      v48 = &v8[v47];
      v49 = &v9[v47];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v50 = v10[11];
      v51 = &v8[v50];
      v52 = &v9[v50];
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v15);
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
LABEL_9:
  v53 = v6[6];
  v54 = (_QWORD *)((char *)a1 + v53);
  v55 = (_QWORD *)((char *)a2 + v53);
  *v54 = *v55;
  v54[1] = v55[1];
  v56 = v6[7];
  v57 = (char *)a1 + v56;
  v58 = (char *)a2 + v56;
  *(_QWORD *)v57 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  v57[16] = v58[16];
  *((_QWORD *)v57 + 1) = v59;
  *((_QWORD *)v57 + 3) = *((_QWORD *)v58 + 3);
  *((_QWORD *)v57 + 4) = *((_QWORD *)v58 + 4);
  *((_QWORD *)v57 + 5) = *((_QWORD *)v58 + 5);
  *((_QWORD *)v57 + 6) = *((_QWORD *)v58 + 6);
  *((_QWORD *)v57 + 7) = *((_QWORD *)v58 + 7);
  *((_QWORD *)v57 + 8) = *((_QWORD *)v58 + 8);
  *((_QWORD *)v57 + 9) = *((_QWORD *)v58 + 9);
  *((_QWORD *)v57 + 10) = *((_QWORD *)v58 + 10);
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
  v60 = *(int *)(a3 + 20);
  v61 = (_QWORD *)((char *)a1 + v60);
  v62 = (_QWORD *)((char *)a2 + v60);
  *(_QWORD *)((char *)a1 + v60) = *(_QWORD *)((char *)a2 + v60);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61[1] = v62[1];
  v61[2] = v62[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61[3] = v62[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61[4] = v62[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61[5] = v62[5];
  v61[6] = v62[6];
  v61[7] = v62[7];
  v61[8] = v62[8];
  v61[9] = v62[9];
  v61[10] = v62[10];
  v61[11] = v62[11];
  v61[12] = v62[12];
  v61[13] = v62[13];
  v61[14] = v62[14];
  return a1;
}

_QWORD *sub_23DD73A3C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v36;
  uint64_t v37;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v11 = *((_QWORD *)v10 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v36 = v11;
    v37 = a3;
    v13 = sub_23DDC512C();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
    v14(v8, v9, v13);
    v15 = v10[5];
    v16 = &v8[v15];
    v17 = &v9[v15];
    v14(&v8[v15], &v9[v15], v13);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v14(&v16[*(int *)(v18 + 36)], &v17[*(int *)(v18 + 36)], v13);
    a3 = v37;
    v19 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v16[v19[5]] = *(_QWORD *)&v17[v19[5]];
    *(_QWORD *)&v16[v19[6]] = *(_QWORD *)&v17[v19[6]];
    *(_QWORD *)&v16[v19[7]] = *(_QWORD *)&v17[v19[7]];
    v20 = v10[6];
    v21 = &v8[v20];
    v22 = &v9[v20];
    *(_OWORD *)v21 = *(_OWORD *)v22;
    v21[16] = v22[16];
    v8[v10[7]] = v9[v10[7]];
    v8[v10[8]] = v9[v10[8]];
    v8[v10[9]] = v9[v10[9]];
    *(_OWORD *)&v8[v10[10]] = *(_OWORD *)&v9[v10[10]];
    *(_OWORD *)&v8[v10[11]] = *(_OWORD *)&v9[v10[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v36 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
  v23 = v6[7];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  *((_QWORD *)v24 + 10) = *((_QWORD *)v25 + 10);
  v27 = *((_OWORD *)v25 + 4);
  v28 = *((_OWORD *)v25 + 2);
  *((_OWORD *)v24 + 3) = *((_OWORD *)v25 + 3);
  *((_OWORD *)v24 + 4) = v27;
  *((_OWORD *)v24 + 2) = v28;
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
  v29 = *(int *)(a3 + 20);
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = *((_OWORD *)v31 + 5);
  *((_OWORD *)v30 + 4) = *((_OWORD *)v31 + 4);
  *((_OWORD *)v30 + 5) = v32;
  *((_OWORD *)v30 + 6) = *((_OWORD *)v31 + 6);
  *((_QWORD *)v30 + 14) = *((_QWORD *)v31 + 14);
  v33 = *((_OWORD *)v31 + 1);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = v33;
  v34 = *((_OWORD *)v31 + 3);
  *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
  *((_OWORD *)v30 + 3) = v34;
  return a1;
}

_QWORD *sub_23DD73CA4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v17 = sub_23DDC512C();
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
      v18(v8, v9, v17);
      v59 = v11;
      v60 = a3;
      v19 = v18;
      v20 = v10[5];
      v21 = &v8[v20];
      v22 = &v9[v20];
      v19(&v8[v20], &v9[v20], v17);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v19(&v21[*(int *)(v23 + 36)], &v22[*(int *)(v23 + 36)], v17);
      v24 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v21[v24[5]] = *(_QWORD *)&v22[v24[5]];
      *(_QWORD *)&v21[v24[6]] = *(_QWORD *)&v22[v24[6]];
      v25 = v24[7];
      v26 = *(_QWORD *)&v22[v25];
      a3 = v60;
      *(_QWORD *)&v21[v25] = v26;
      v27 = v10[6];
      v28 = &v8[v27];
      v29 = &v9[v27];
      *(_OWORD *)v28 = *(_OWORD *)v29;
      v28[16] = v29[16];
      v8[v10[7]] = v9[v10[7]];
      v8[v10[8]] = v9[v10[8]];
      v8[v10[9]] = v9[v10[9]];
      *(_OWORD *)&v8[v10[10]] = *(_OWORD *)&v9[v10[10]];
      *(_OWORD *)&v8[v10[11]] = *(_OWORD *)&v9[v10[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v59 + 56))(v8, 0, 1, v10);
      goto LABEL_9;
    }
    v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  else
  {
    if (!v14)
    {
      v30 = sub_23DDC512C();
      v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 40);
      v31(v8, v9, v30);
      v32 = v10[5];
      v33 = &v8[v32];
      v61 = a3;
      v34 = &v9[v32];
      v31(&v8[v32], &v9[v32], v30);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v31(&v33[*(int *)(v35 + 36)], &v34[*(int *)(v35 + 36)], v30);
      v36 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v33[v36[5]] = *(_QWORD *)&v34[v36[5]];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v33[v36[6]] = *(_QWORD *)&v34[v36[6]];
      swift_bridgeObjectRelease();
      v37 = v36[7];
      v38 = *(_QWORD *)&v34[v37];
      a3 = v61;
      *(_QWORD *)&v33[v37] = v38;
      swift_bridgeObjectRelease();
      v39 = v10[6];
      v40 = &v8[v39];
      v41 = &v9[v39];
      *(_OWORD *)v40 = *(_OWORD *)v41;
      v40[16] = v41[16];
      v8[v10[7]] = v9[v10[7]];
      v8[v10[8]] = v9[v10[8]];
      v8[v10[9]] = v9[v10[9]];
      v42 = v10[10];
      v43 = &v8[v42];
      v44 = (uint64_t *)&v9[v42];
      v46 = *v44;
      v45 = v44[1];
      *(_QWORD *)v43 = v46;
      *((_QWORD *)v43 + 1) = v45;
      swift_bridgeObjectRelease();
      v47 = v10[11];
      v48 = &v8[v47];
      v49 = (uint64_t *)&v9[v47];
      v51 = *v49;
      v50 = v49[1];
      *(_QWORD *)v48 = v51;
      *((_QWORD *)v48 + 1) = v50;
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v15);
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
LABEL_9:
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
  v52 = v6[7];
  v53 = (char *)a1 + v52;
  v54 = (char *)a2 + v52;
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
  v53[16] = v54[16];
  *(_OWORD *)(v53 + 24) = *(_OWORD *)(v54 + 24);
  *(_OWORD *)(v53 + 40) = *(_OWORD *)(v54 + 40);
  *(_OWORD *)(v53 + 56) = *(_OWORD *)(v54 + 56);
  *(_OWORD *)(v53 + 72) = *(_OWORD *)(v54 + 72);
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
  v55 = *(int *)(a3 + 20);
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  *(_QWORD *)((char *)a1 + v55) = *(_QWORD *)v57;
  swift_bridgeObjectRelease();
  *((_QWORD *)v56 + 1) = *((_QWORD *)v57 + 1);
  *((_QWORD *)v56 + 2) = *((_QWORD *)v57 + 2);
  swift_bridgeObjectRelease();
  *((_QWORD *)v56 + 3) = *((_QWORD *)v57 + 3);
  swift_bridgeObjectRelease();
  *((_QWORD *)v56 + 4) = *((_QWORD *)v57 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v56 + 40) = *(_OWORD *)(v57 + 40);
  *(_OWORD *)(v56 + 56) = *(_OWORD *)(v57 + 56);
  *(_OWORD *)(v56 + 72) = *(_OWORD *)(v57 + 72);
  *(_OWORD *)(v56 + 88) = *(_OWORD *)(v57 + 88);
  *(_OWORD *)(v56 + 104) = *(_OWORD *)(v57 + 104);
  return a1;
}

uint64_t sub_23DD740FC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD74108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_23DD74184()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD74190(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for OvernightMetricsChartLayout(uint64_t a1)
{
  return sub_23DD0731C(a1, qword_256CFE978);
}

uint64_t sub_23DD7421C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for OvernightMetricsChartLayout.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23DD7428C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, _QWORD, uint64_t, int *);
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v42;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v12 = *((_QWORD *)v11 - 1);
    v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v15 = sub_23DDC512C();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      v16(v9, v10, v15);
      v17 = v11[5];
      v18 = &v9[v17];
      v42 = v12;
      v19 = &v10[v17];
      v16(&v9[v17], &v10[v17], v15);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v16(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v15);
      v21 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v18[v21[5]] = *(_QWORD *)&v19[v21[5]];
      *(_QWORD *)&v18[v21[6]] = *(_QWORD *)&v19[v21[6]];
      *(_QWORD *)&v18[v21[7]] = *(_QWORD *)&v19[v21[7]];
      v22 = v11[6];
      v23 = &v9[v22];
      v24 = &v10[v22];
      *(_OWORD *)v23 = *(_OWORD *)v24;
      v23[16] = v24[16];
      v9[v11[7]] = v10[v11[7]];
      v9[v11[8]] = v10[v11[8]];
      v9[v11[9]] = v10[v11[9]];
      v25 = v11[10];
      v26 = &v9[v25];
      v27 = &v10[v25];
      v28 = *((_QWORD *)v27 + 1);
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_QWORD *)v26 + 1) = v28;
      v29 = v11[11];
      v30 = &v9[v29];
      v31 = &v10[v29];
      v32 = *((_QWORD *)v31 + 1);
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *((_QWORD *)v30 + 1) = v32;
      v33 = *(void (**)(char *, _QWORD, uint64_t, int *))(v42 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33(v9, 0, 1, v11);
    }
    v34 = a3[7];
    *(_OWORD *)((char *)v7 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
    v35 = (char *)v7 + v34;
    v36 = (char *)a2 + v34;
    v37 = *((_OWORD *)v36 + 1);
    *(_OWORD *)v35 = *(_OWORD *)v36;
    *((_OWORD *)v35 + 1) = v37;
    *((_QWORD *)v35 + 10) = *((_QWORD *)v36 + 10);
    v38 = *((_OWORD *)v36 + 4);
    v39 = *((_OWORD *)v36 + 2);
    *((_OWORD *)v35 + 3) = *((_OWORD *)v36 + 3);
    *((_OWORD *)v35 + 4) = v38;
    *((_OWORD *)v35 + 2) = v39;
    v40 = a3[9];
    *(uint64_t *)((char *)v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v7 + v40) = *(uint64_t *)((char *)a2 + v40);
  }
  return v7;
}

uint64_t sub_23DD74510(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for OvernightMetricsChartPoint();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = sub_23DDC512C();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v4, v7);
    v9 = v4 + *(int *)(v5 + 20);
    v8(v9, v7);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v8(v9 + *(int *)(v10 + 36), v7);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *sub_23DD74634(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, int *);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t, int *);
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v40;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned int (**)(char *, uint64_t, int *))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = sub_23DDC512C();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v7, v8, v13);
    v15 = v9[5];
    v16 = &v7[v15];
    v40 = v10;
    v17 = &v8[v15];
    v14(&v7[v15], &v8[v15], v13);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v14(&v16[*(int *)(v18 + 36)], &v17[*(int *)(v18 + 36)], v13);
    v19 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v16[v19[5]] = *(_QWORD *)&v17[v19[5]];
    *(_QWORD *)&v16[v19[6]] = *(_QWORD *)&v17[v19[6]];
    *(_QWORD *)&v16[v19[7]] = *(_QWORD *)&v17[v19[7]];
    v20 = v9[6];
    v21 = &v7[v20];
    v22 = &v8[v20];
    *(_OWORD *)v21 = *(_OWORD *)v22;
    v21[16] = v22[16];
    v7[v9[7]] = v8[v9[7]];
    v7[v9[8]] = v8[v9[8]];
    v7[v9[9]] = v8[v9[9]];
    v23 = v9[10];
    v24 = &v7[v23];
    v25 = &v8[v23];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    v27 = v9[11];
    v28 = &v7[v27];
    v29 = &v8[v27];
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    v31 = *(void (**)(char *, _QWORD, uint64_t, int *))(v40 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(v7, 0, 1, v9);
  }
  v32 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *((_OWORD *)v34 + 1);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *((_OWORD *)v33 + 1) = v35;
  *((_QWORD *)v33 + 10) = *((_QWORD *)v34 + 10);
  v36 = *((_OWORD *)v34 + 4);
  v37 = *((_OWORD *)v34 + 2);
  *((_OWORD *)v33 + 3) = *((_OWORD *)v34 + 3);
  *((_OWORD *)v33 + 4) = v36;
  *((_OWORD *)v33 + 2) = v37;
  v38 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v38) = *(_QWORD *)((char *)a2 + v38);
  return a1;
}

_QWORD *sub_23DD74890(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, _QWORD, uint64_t, int *);
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int *v59;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(char *, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v16 = sub_23DDC512C();
      v59 = a3;
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(v7, v8, v16);
      v18 = v9[5];
      v19 = &v7[v18];
      v20 = &v8[v18];
      v17(&v7[v18], &v8[v18], v16);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v17(&v19[*(int *)(v21 + 36)], &v20[*(int *)(v21 + 36)], v16);
      v22 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v19[v22[5]] = *(_QWORD *)&v20[v22[5]];
      *(_QWORD *)&v19[v22[6]] = *(_QWORD *)&v20[v22[6]];
      *(_QWORD *)&v19[v22[7]] = *(_QWORD *)&v20[v22[7]];
      v23 = v9[6];
      v24 = &v7[v23];
      v25 = &v8[v23];
      v26 = v25[16];
      *(_OWORD *)v24 = *(_OWORD *)v25;
      v24[16] = v26;
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      v27 = v9[10];
      v28 = &v7[v27];
      v29 = &v8[v27];
      *(_QWORD *)v28 = *(_QWORD *)v29;
      *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
      v30 = v9[11];
      v31 = &v7[v30];
      v32 = &v8[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
      v33 = *(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33(v7, 0, 1, v9);
      a3 = v59;
      goto LABEL_9;
    }
    v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  else
  {
    if (!v13)
    {
      v34 = sub_23DDC512C();
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24);
      v35(v7, v8, v34);
      v36 = v9[5];
      v37 = &v7[v36];
      v38 = &v8[v36];
      v35(&v7[v36], &v8[v36], v34);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v35(&v37[*(int *)(v39 + 36)], &v38[*(int *)(v39 + 36)], v34);
      v40 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v37[v40[5]] = *(_QWORD *)&v38[v40[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v37[v40[6]] = *(_QWORD *)&v38[v40[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v37[v40[7]] = *(_QWORD *)&v38[v40[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v41 = v9[6];
      v42 = &v7[v41];
      v43 = &v8[v41];
      v44 = *(_OWORD *)v43;
      v42[16] = v43[16];
      *(_OWORD *)v42 = v44;
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      v45 = v9[10];
      v46 = &v7[v45];
      v47 = &v8[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v48 = v9[11];
      v49 = &v7[v48];
      v50 = &v8[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      *((_QWORD *)v49 + 1) = *((_QWORD *)v50 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    sub_23DCF59A8((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v14);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_9:
  v51 = a3[6];
  v52 = (_QWORD *)((char *)a1 + v51);
  v53 = (_QWORD *)((char *)a2 + v51);
  *v52 = *v53;
  v52[1] = v53[1];
  v54 = a3[7];
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  *(_QWORD *)v55 = *(_QWORD *)v56;
  v57 = *((_QWORD *)v56 + 1);
  v55[16] = v56[16];
  *((_QWORD *)v55 + 1) = v57;
  *((_QWORD *)v55 + 3) = *((_QWORD *)v56 + 3);
  *((_QWORD *)v55 + 4) = *((_QWORD *)v56 + 4);
  *((_QWORD *)v55 + 5) = *((_QWORD *)v56 + 5);
  *((_QWORD *)v55 + 6) = *((_QWORD *)v56 + 6);
  *((_QWORD *)v55 + 7) = *((_QWORD *)v56 + 7);
  *((_QWORD *)v55 + 8) = *((_QWORD *)v56 + 8);
  *((_QWORD *)v55 + 9) = *((_QWORD *)v56 + 9);
  *((_QWORD *)v55 + 10) = *((_QWORD *)v56 + 10);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_23DD74D08(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v30;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v30 = v10;
    v12 = sub_23DDC512C();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
    v13(v7, v8, v12);
    v14 = v9[5];
    v15 = &v7[v14];
    v16 = &v8[v14];
    v13(&v7[v14], &v8[v14], v12);
    sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v13(&v15[*(int *)(v17 + 36)], &v16[*(int *)(v17 + 36)], v12);
    v18 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v15[v18[5]] = *(_QWORD *)&v16[v18[5]];
    *(_QWORD *)&v15[v18[6]] = *(_QWORD *)&v16[v18[6]];
    *(_QWORD *)&v15[v18[7]] = *(_QWORD *)&v16[v18[7]];
    v19 = v9[6];
    v20 = &v7[v19];
    v21 = &v8[v19];
    *(_OWORD *)v20 = *(_OWORD *)v21;
    v20[16] = v21[16];
    v7[v9[7]] = v8[v9[7]];
    v7[v9[8]] = v8[v9[8]];
    v7[v9[9]] = v8[v9[9]];
    *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
    *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56))(v7, 0, 1, v9);
  }
  v22 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_QWORD *)v23 + 10) = *((_QWORD *)v24 + 10);
  v26 = *((_OWORD *)v24 + 4);
  v27 = *((_OWORD *)v24 + 2);
  *((_OWORD *)v23 + 3) = *((_OWORD *)v24 + 3);
  *((_OWORD *)v23 + 4) = v26;
  *((_OWORD *)v23 + 2) = v27;
  v28 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v28) = *(_QWORD *)((char *)a2 + v28);
  return a1;
}

_QWORD *sub_23DD74F24(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int *v52;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(char *, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v16 = sub_23DDC512C();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
      v17(v7, v8, v16);
      v52 = a3;
      v18 = v17;
      v19 = v9[5];
      v20 = &v7[v19];
      v21 = &v8[v19];
      v18(&v7[v19], &v8[v19], v16);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v18(&v20[*(int *)(v22 + 36)], &v21[*(int *)(v22 + 36)], v16);
      a3 = v52;
      v23 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v20[v23[5]] = *(_QWORD *)&v21[v23[5]];
      *(_QWORD *)&v20[v23[6]] = *(_QWORD *)&v21[v23[6]];
      *(_QWORD *)&v20[v23[7]] = *(_QWORD *)&v21[v23[7]];
      v24 = v9[6];
      v25 = &v7[v24];
      v26 = &v8[v24];
      *(_OWORD *)v25 = *(_OWORD *)v26;
      v25[16] = v26[16];
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
      *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_9;
    }
    v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  else
  {
    if (!v13)
    {
      v27 = sub_23DDC512C();
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 40);
      v28(v7, v8, v27);
      v29 = v9[5];
      v30 = &v7[v29];
      v31 = &v8[v29];
      v28(&v7[v29], &v8[v29], v27);
      sub_23DD04550(0, (unint64_t *)&qword_254326A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v28(&v30[*(int *)(v32 + 36)], &v31[*(int *)(v32 + 36)], v27);
      v33 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v30[v33[5]] = *(_QWORD *)&v31[v33[5]];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v30[v33[6]] = *(_QWORD *)&v31[v33[6]];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v30[v33[7]] = *(_QWORD *)&v31[v33[7]];
      swift_bridgeObjectRelease();
      v34 = v9[6];
      v35 = &v7[v34];
      v36 = &v8[v34];
      *(_OWORD *)v35 = *(_OWORD *)v36;
      v35[16] = v36[16];
      v7[v9[7]] = v8[v9[7]];
      v7[v9[8]] = v8[v9[8]];
      v7[v9[9]] = v8[v9[9]];
      v37 = v9[10];
      v38 = &v7[v37];
      v39 = (uint64_t *)&v8[v37];
      v41 = *v39;
      v40 = v39[1];
      *(_QWORD *)v38 = v41;
      *((_QWORD *)v38 + 1) = v40;
      swift_bridgeObjectRelease();
      v42 = v9[11];
      v43 = &v7[v42];
      v44 = (uint64_t *)&v8[v42];
      v46 = *v44;
      v45 = v44[1];
      *(_QWORD *)v43 = v46;
      *((_QWORD *)v43 + 1) = v45;
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    sub_23DCF59A8((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
    v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, v14);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_9:
  v47 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
  v48[16] = v49[16];
  *(_OWORD *)(v48 + 24) = *(_OWORD *)(v49 + 24);
  *(_OWORD *)(v48 + 40) = *(_OWORD *)(v49 + 40);
  *(_OWORD *)(v48 + 56) = *(_OWORD *)(v49 + 56);
  *(_OWORD *)(v48 + 72) = *(_OWORD *)(v49 + 72);
  v50 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v50) = *(_QWORD *)((char *)a2 + v50);
  return a1;
}

uint64_t sub_23DD752E0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DD752EC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_23DD75380()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23DD7538C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_23DD75418()
{
  unint64_t v0;

  sub_23DCFB328(319, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartLayout.DrawingProportions(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 88))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartLayout.DrawingProportions(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 88) = v3;
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartLayout.DrawingProportions()
{
  return &type metadata for OvernightMetricsChartLayout.DrawingProportions;
}

unint64_t sub_23DD75560(double a1)
{
  uint64_t v1;
  unint64_t result;
  char v4;

  if (!*(_QWORD *)(*(_QWORD *)(v1 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20)) + 16)
    || (result = sub_23DD7693C(a1), (v4 & 1) == 0))
  {
    sub_23DDC6A10();
    sub_23DDC67A0();
    sub_23DDC6890();
    result = sub_23DDC6AC4();
    __break(1u);
  }
  return result;
}

uint64_t sub_23DD75648(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  double v5;
  double v6;
  double *i;
  double v8;
  double v9;
  BOOL v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = *(_QWORD *)(a1 + 32);
  v4 = v1 - 1;
  if (v1 != 1)
  {
    v5 = *(double *)&result;
    v6 = *(double *)(a1 + 40);
    for (i = (double *)(a1 + 56); ; i += 2)
    {
      v9 = *(i - 1);
      v8 = *i;
      if (v9 < v5)
        break;
      if (v9 > v6)
      {
        v10 = v9 < v5;
        v6 = *(i - 1);
        v9 = v5;
        if (v10)
          goto LABEL_23;
        goto LABEL_11;
      }
      v9 = v5;
      if (v8 >= v5)
      {
LABEL_14:
        if (v6 >= v8)
        {
          v5 = v9;
        }
        else
        {
          v6 = *i;
          v5 = v9;
          if (v9 > v8)
            goto LABEL_24;
        }
        goto LABEL_5;
      }
LABEL_4:
      v5 = *i;
      if (v8 > v6)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        return result;
      }
LABEL_5:
      if (!--v4)
        return *(_QWORD *)&v5;
    }
    if (v9 > v6)
      goto LABEL_22;
LABEL_11:
    if (v8 >= v9)
      goto LABEL_14;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_23DD75728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  uint64_t v64;
  uint64_t inited;
  double v66;
  double v67;
  double v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  double v73;
  double v74;
  double v75;

  v2 = v1;
  v4 = type metadata accessor for OvernightMetricsChartPoint();
  v5 = a1 + *(int *)(v4 + 24);
  if ((*(_BYTE *)(v5 + 16) & 1) != 0)
    return MEMORY[0x24BEE4AF8];
  v7 = v4;
  v8 = *(double *)v5;
  v9 = *(double *)(v5 + 8);
  v10 = type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v11 = (double *)(v2 + *(int *)(v10 + 24));
  v13 = *v11;
  v12 = v11[1];
  v14 = *(double *)(v2 + *(int *)(v10 + 28) + 64);
  v15 = a1 + *(int *)(v7 + 20);
  v16 = *(_QWORD *)(v15 + *(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 24));
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    swift_bridgeObjectRetain();
    v18 = 0;
    v19 = MEMORY[0x24BEE4AF8];
    do
    {
      v22 = *(double *)(v16 + 8 * v18 + 32);
      if (v22 < v13)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_23DD92BF0(0, *(_QWORD *)(v19 + 16) + 1, 1);
        v21 = *(_QWORD *)(v19 + 16);
        v20 = *(_QWORD *)(v19 + 24);
        if (v21 >= v20 >> 1)
          sub_23DD92BF0(v20 > 1, v21 + 1, 1);
        *(_QWORD *)(v19 + 16) = v21 + 1;
        *(double *)(v19 + 8 * v21 + 32) = v22;
      }
      ++v18;
    }
    while (v17 != v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = MEMORY[0x24BEE4AF8];
  }
  v23 = sub_23DD72BB0(v19);
  v6 = v24;
  swift_release();
  v25 = *(_QWORD *)(v16 + 16);
  if (v25)
  {
    swift_bridgeObjectRetain();
    v26 = 0;
    v27 = MEMORY[0x24BEE4AF8];
    do
    {
      v30 = *(double *)(v16 + 8 * v26 + 32);
      if (v12 < v30)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_23DD92BF0(0, *(_QWORD *)(v27 + 16) + 1, 1);
        v29 = *(_QWORD *)(v27 + 16);
        v28 = *(_QWORD *)(v27 + 24);
        if (v29 >= v28 >> 1)
          sub_23DD92BF0(v28 > 1, v29 + 1, 1);
        *(_QWORD *)(v27 + 16) = v29 + 1;
        *(double *)(v27 + 8 * v29 + 32) = v30;
      }
      ++v26;
    }
    while (v25 != v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = MEMORY[0x24BEE4AF8];
  }
  v31 = sub_23DD72B6C(v27);
  v33 = v32;
  swift_release();
  if (v12 >= v9 && v8 >= v13)
  {
    sub_23DCFB328(0, &qword_256CFE368, (uint64_t (*)(uint64_t))sub_23DD575C4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_23DDC7830;
    sub_23DD75560(v8);
    *(_QWORD *)(v6 + 32) = v34;
    *(_BYTE *)(v6 + 40) = 0;
    sub_23DD75560(v9);
    *(_QWORD *)(v6 + 48) = v35;
    *(_BYTE *)(v6 + 56) = 0;
    return v6;
  }
  v36 = v2 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v74 = *(double *)(v36 + 80);
  sub_23DCFB328(0, &qword_256CFE368, (uint64_t (*)(uint64_t))sub_23DD575C4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_23DDC7F50;
  v38 = v37;
  v39 = *(double *)(v36 + 8) * 0.5;
  sub_23DD75560(v8);
  v41 = v40 - v39;
  sub_23DD75560(v8);
  if (v41 > v39 + v42)
  {
    __break(1u);
    __break(1u);
    goto LABEL_57;
  }
  *(double *)(v38 + 32) = v41;
  *(_BYTE *)(v38 + 40) = v8 < v13;
  v75 = v14;
  if ((v6 & 1) != 0)
  {
    v51 = 0.0;
    v49 = 0.0;
    if ((v33 & 1) != 0)
      goto LABEL_50;
    goto LABEL_37;
  }
  sub_23DD75560(*(double *)&v23);
  v44 = v43;
  sub_23DD75560(*(double *)&v23);
  v45 = v44 - v39;
  v47 = v39 + v46;
  if (v44 - v39 > v39 + v46)
  {
    __break(1u);
    goto LABEL_60;
  }
  sub_23DD75560(v13);
  v49 = v48 - v39;
  sub_23DD75560(v13);
  v51 = v39 + v50;
  if (v49 > v39 + v50)
  {
LABEL_60:
    __break(1u);
    __break(1u);
    goto LABEL_61;
  }
  v52 = v45 + v75 * (v47 - v45);
  if (v49 < v52)
  {
    v51 = v74 + v52;
    v49 = v45 + v75 * (v47 - v45);
    if (v52 > v74 + v52)
      goto LABEL_63;
  }
  v53 = 0.0;
  v54 = 0.0;
  if ((v33 & 1) != 0)
    goto LABEL_47;
LABEL_37:
  v73 = v9;
  sub_23DD75560(*(double *)&v31);
  v56 = v55;
  sub_23DD75560(*(double *)&v31);
  v57 = v56 - v39;
  v59 = v39 + v58;
  if (v56 - v39 > v39 + v58)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  sub_23DD75560(v12);
  v53 = v60 - v39;
  sub_23DD75560(v12);
  v54 = v39 + v61;
  if (v53 > v39 + v61)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v62 = v57 + (1.0 - v75) * (v59 - v57);
  if (v62 < v54)
  {
    v53 = v62 - v74;
    v54 = v57 + (1.0 - v75) * (v59 - v57);
    if (v62 - v74 > v62)
LABEL_64:
      __break(1u);
  }
  v9 = v73;
  if ((v6 & 1) != 0)
  {
LABEL_48:
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23DDC7830;
    *(double *)(inited + 32) = v53;
    *(_BYTE *)(inited + 40) = 0;
    *(double *)(inited + 48) = v54;
    *(_BYTE *)(inited + 56) = 1;
    goto LABEL_49;
  }
  if (v54 < v49 || v51 < v53)
  {
LABEL_47:
    v64 = swift_initStackObject();
    *(_OWORD *)(v64 + 16) = xmmword_23DDC7830;
    *(double *)(v64 + 32) = v49;
    *(_BYTE *)(v64 + 40) = 1;
    *(double *)(v64 + 48) = v51;
    *(_BYTE *)(v64 + 56) = 0;
    sub_23DD95F78(v64);
    if ((v33 & 1) != 0)
      goto LABEL_50;
    goto LABEL_48;
  }
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DDC7820;
  *(double *)(inited + 32) = v49;
  *(_BYTE *)(inited + 40) = 1;
  *(double *)(inited + 48) = (v49 + v54) * 0.5;
  *(_BYTE *)(inited + 56) = 0;
  *(double *)(inited + 64) = v54;
  *(_BYTE *)(inited + 72) = 1;
LABEL_49:
  sub_23DD95F78(inited);
LABEL_50:
  sub_23DD75560(v9);
  v67 = v66 - v39;
  sub_23DD75560(v9);
  v13 = v39 + v68;
  if (v67 > v39 + v68)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v6 = v38;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_58:
    v6 = (uint64_t)sub_23DD56B08(0, *(_QWORD *)(v6 + 16) + 1, 1, (_QWORD *)v6);
  v70 = *(_QWORD *)(v6 + 16);
  v69 = *(_QWORD *)(v6 + 24);
  if (v70 >= v69 >> 1)
    v6 = (uint64_t)sub_23DD56B08((_QWORD *)(v69 > 1), v70 + 1, 1, (_QWORD *)v6);
  *(_QWORD *)(v6 + 16) = v70 + 1;
  v71 = v6 + 16 * v70;
  *(double *)(v71 + 32) = v13;
  *(_BYTE *)(v71 + 40) = v12 < v9;
  return v6;
}

_QWORD *sub_23DD75DC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = type metadata accessor for OvernightMetricsChartPoint();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v6 = *(_QWORD *)(v4 + 72);
  swift_bridgeObjectRetain();
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v8 = (__int128 *)(v5 + *(int *)(v3 + 24));
    if ((v8[1] & 1) == 0)
    {
      v12 = *v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = sub_23DD566B0(0, v7[2] + 1, 1, v7);
      v10 = v7[2];
      v9 = v7[3];
      if (v10 >= v9 >> 1)
        v7 = sub_23DD566B0((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
      v7[2] = v10 + 1;
      *(_OWORD *)&v7[2 * v10 + 4] = v12;
    }
    v5 += v6;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v7;
}

unint64_t sub_23DD75EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  double *v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  unint64_t result;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  double *v49;
  uint64_t v50;
  double v51;
  char v52;
  double *v53;
  double v54;
  double *v55;
  double v56;
  double v57;
  double v58;
  double v59;

  v10 = (double *)(v5 + *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20));
  v11 = v10[6];
  v59 = v10[5];
  v13 = v10[7];
  v12 = v10[8];
  v14 = type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v58 = *(double *)(v5 + *(int *)(v14 + 28) + 48);
  v15 = v10[1];
  v16 = (double *)(v5 + *(int *)(v14 + 24));
  v17 = *v16;
  sub_23DD75560(*v16);
  v19 = v18;
  v20 = v16[1];
  result = sub_23DD75560(v20);
  if (v19 > v22)
    v23 = v19;
  else
    v23 = v22;
  if (v19 > v23)
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  sub_23DD75560(v11);
  v25 = v24;
  sub_23DD75560(v17);
  v27 = v26;
  result = sub_23DD75560(v20);
  if (v27 > v28)
    v28 = v27;
  if (v27 > v28)
    goto LABEL_25;
  v56 = v25;
  v57 = v15;
  v29 = v12;
  v30 = v13;
  sub_23DD75560(v17);
  v32 = v31;
  result = sub_23DD75560(v20);
  if (v32 > v33)
    v34 = v32;
  else
    v34 = v33;
  if (v32 > v34)
    goto LABEL_26;
  sub_23DD75560(v59);
  v36 = v35;
  sub_23DD75560(v17);
  v38 = v37;
  result = sub_23DD75560(v20);
  if (v38 > v39)
    v39 = v38;
  if (v38 > v39)
    goto LABEL_27;
  v40 = (v29 - v30) * v58 * 0.5;
  v41 = v40 + v23;
  v42 = v57 * 0.25 + v56;
  sub_23DCFB328(0, &qword_256CFEA60, type metadata accessor for BaselineBand.Configuration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v43 = (int *)type metadata accessor for BaselineBand.Configuration(0);
  v44 = *((_QWORD *)v43 - 1);
  v45 = *(_QWORD *)(v44 + 72);
  v46 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_23DDC7820;
  if (v41 > v42)
    v42 = v41;
  if (v41 > v42)
    goto LABEL_28;
  v47 = result;
  v48 = v40 + v27;
  v49 = (double *)(result + v46);
  result = sub_23DD254A0(a1, (uint64_t)v49 + v43[5]);
  *v49 = v41;
  v49[1] = v42;
  *(double *)((char *)v49 + v43[6]) = 6.0;
  *(_QWORD *)((char *)v49 + v43[7]) = a2;
  *((_BYTE *)v49 + v43[8]) = 0;
  if (v48 > v34 - v40)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v50 = a4;
  v51 = v38 - v40;
  v52 = a5;
  v53 = (double *)((char *)v49 + v45);
  result = sub_23DD254A0(a1, (uint64_t)v49 + v45 + v43[5]);
  *v53 = v48;
  v53[1] = v34 - v40;
  *(double *)((char *)v53 + v43[6]) = 6.0;
  *(_QWORD *)((char *)v53 + v43[7]) = a3;
  *((_BYTE *)v53 + v43[8]) = v52 & 1;
  if (v38 - v40 >= v36 - v57 * 0.25)
    v54 = v36 - v57 * 0.25;
  else
    v54 = v38 - v40;
  if (v54 <= v51)
  {
    v55 = (double *)((char *)v49 + 2 * v45);
    sub_23DD254A0(a1, (uint64_t)v55 + v43[5]);
    *v55 = v54;
    v55[1] = v51;
    *(double *)((char *)v55 + v43[6]) = 6.0;
    *(_QWORD *)((char *)v55 + v43[7]) = v50;
    *((_BYTE *)v55 + v43[8]) = 0;
    swift_retain();
    swift_retain();
    swift_retain();
    return v47;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23DD76214()
{
  uint64_t v0;

  sub_23DDC6C74();
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_23DDC6C68();
  }
  else
  {
    sub_23DDC6C68();
    sub_23DDC6C74();
  }
  sub_23DDC6C74();
  sub_23DDC6C74();
  sub_23DDC6C74();
  sub_23DDC6C74();
  sub_23DDC6C74();
  sub_23DDC6C74();
  sub_23DDC6C74();
  return sub_23DDC6C74();
}

uint64_t sub_23DD762FC()
{
  sub_23DDC6C50();
  sub_23DD76214();
  return sub_23DDC6C80();
}

uint64_t sub_23DD7633C()
{
  sub_23DDC6C50();
  sub_23DD76214();
  return sub_23DDC6C80();
}

BOOL sub_23DD76374(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  uint64_t v8;
  _OWORD v9[5];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v7[4] = *(_OWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_23DD7917C((uint64_t)v7, (uint64_t)v9);
}

unint64_t sub_23DD763E0()
{
  unint64_t result;

  result = qword_256CFEA50;
  if (!qword_256CFEA50)
  {
    result = MEMORY[0x242643BD8](&unk_23DDCA814, &type metadata for OvernightMetricsChartLayout.DrawingProportions);
    atomic_store(result, (unint64_t *)&qword_256CFEA50);
  }
  return result;
}

uint64_t sub_23DD76424(__int128 *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[5];
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for OvernightMetricsChartPoint();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v18 - v10;
  v12 = *v2;
  swift_bridgeObjectRetain();
  sub_23DD5E750(a1, v12);
  swift_bridgeObjectRelease();
  v13 = type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  sub_23DD08000((uint64_t)v2 + *(int *)(v13 + 20), (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
  {
    sub_23DDC6C68();
  }
  else
  {
    sub_23DD79704((uint64_t)v11, (uint64_t)v7);
    sub_23DDC6C68();
    OvernightMetricsChartPoint.hash(into:)(a1);
    sub_23DCF59A8((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
  }
  sub_23DD5E9E8();
  v14 = (char *)v2 + *(int *)(v13 + 28);
  v15 = *((_OWORD *)v14 + 3);
  v18[2] = *((_OWORD *)v14 + 2);
  v18[3] = v15;
  v18[4] = *((_OWORD *)v14 + 4);
  v19 = *((_QWORD *)v14 + 10);
  v16 = *((_OWORD *)v14 + 1);
  v18[0] = *(_OWORD *)v14;
  v18[1] = v16;
  sub_23DD76214();
  sub_23DDC6C74();
  return sub_23DDC6C74();
}

uint64_t sub_23DD765FC()
{
  __int128 v1[4];

  sub_23DDC6C50();
  sub_23DD76424(v1);
  return sub_23DDC6C80();
}

uint64_t sub_23DD7663C()
{
  __int128 v1[4];

  sub_23DDC6C50();
  sub_23DD76424(v1);
  return sub_23DDC6C80();
}

uint64_t sub_23DD76674()
{
  return sub_23DCF535C(&qword_256CFEA58, type metadata accessor for OvernightMetricsChartLayout.Configuration, (uint64_t)&unk_23DDCA87C);
}

BOOL sub_23DD766A0(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[7];
  uint64_t v13;
  _OWORD v14[7];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v2;
  v12[6] = *(_OWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 112);
  v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v4;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  v14[2] = a2[2];
  v14[3] = v7;
  v14[0] = v5;
  v14[1] = v6;
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v15 = *((_QWORD *)a2 + 14);
  v14[5] = v9;
  v14[6] = v10;
  v14[4] = v8;
  return sub_23DD795D4((uint64_t)v12, (uint64_t)v14);
}

uint64_t sub_23DD76720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  _OWORD v17[7];
  uint64_t v18;
  _OWORD v19[7];
  uint64_t v20;

  if ((sub_23DD765F4() & 1) != 0)
  {
    v6 = *(int *)(a3 + 20);
    v7 = *(_OWORD *)(a1 + v6 + 80);
    v17[4] = *(_OWORD *)(a1 + v6 + 64);
    v17[5] = v7;
    v17[6] = *(_OWORD *)(a1 + v6 + 96);
    v18 = *(_QWORD *)(a1 + v6 + 112);
    v8 = *(_OWORD *)(a1 + v6 + 16);
    v17[0] = *(_OWORD *)(a1 + v6);
    v17[1] = v8;
    v9 = *(_OWORD *)(a1 + v6 + 48);
    v17[2] = *(_OWORD *)(a1 + v6 + 32);
    v17[3] = v9;
    v10 = a2 + v6;
    v11 = *(_OWORD *)(v10 + 48);
    v19[2] = *(_OWORD *)(v10 + 32);
    v19[3] = v11;
    v12 = *(_OWORD *)(v10 + 16);
    v19[0] = *(_OWORD *)v10;
    v19[1] = v12;
    v20 = *(_QWORD *)(v10 + 112);
    v13 = *(_OWORD *)(v10 + 96);
    v14 = *(_OWORD *)(v10 + 64);
    v19[5] = *(_OWORD *)(v10 + 80);
    v19[6] = v13;
    v19[4] = v14;
    v15 = sub_23DD765F8(v17, v19);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_23DD767D0(uint64_t result, double a2, double a3, double a4)
{
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t inited;
  _QWORD *v9;
  char v10;
  char v11;

  v4 = (a3 - a2) * a4;
  v5 = a2 - v4;
  v6 = v4 + a3;
  if (a2 - v4 > v4 + a3)
  {
    __break(1u);
    goto LABEL_5;
  }
  v7 = result;
  sub_23DCFB328(0, &qword_256CFE350, (uint64_t (*)(uint64_t))sub_23DCFF9E8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DDC7F50;
  *(double *)(inited + 32) = v5;
  *(double *)(inited + 40) = v6;
  v9 = sub_23DD75DC0(v7);
  sub_23DD960BC((uint64_t)v9);
  sub_23DD75648(inited);
  v11 = v10;
  result = swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
LABEL_5:
    __break(1u);
  return result;
}

unint64_t sub_23DD768A4(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  sub_23DDC53A8();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20];
  sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
  v3 = sub_23DDC6668();
  return sub_23DD76BB8(a1, v3, v2, &qword_254326688, MEMORY[0x24BE3FE40]);
}

unint64_t sub_23DD7693C(double a1)
{
  uint64_t v2;

  v2 = sub_23DDC6C44();
  return sub_23DD76B20(v2, a1);
}

unint64_t sub_23DD76970(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  sub_23DDC54C8();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0];
  sub_23DCF535C(&qword_2543266C0, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], MEMORY[0x24BE401D8]);
  v3 = sub_23DDC6668();
  return sub_23DD76BB8(a1, v3, v2, &qword_2543266C8, MEMORY[0x24BE401E0]);
}

unint64_t sub_23DD76A08(uint64_t a1)
{
  uint64_t v2;

  sub_23DDC6764();
  sub_23DDC6C50();
  sub_23DDC6794();
  v2 = sub_23DDC6C80();
  swift_bridgeObjectRelease();
  return sub_23DD76CE8(a1, v2);
}

unint64_t sub_23DD76A88(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23DDC6968();
  return sub_23DD76E5C(a1, v2, (unint64_t *)&qword_256CFEA70);
}

unint64_t sub_23DD76AD4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23DDC6968();
  return sub_23DD76E5C(a1, v2, &qword_256CFE098);
}

unint64_t sub_23DD76B20(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_23DD76BB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  char v17;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  unint64_t *v21;
  uint64_t v22;

  v21 = a4;
  v22 = a5;
  v6 = v5;
  v19 = a1;
  v20 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      sub_23DCF535C(v21, v20, v22);
      v17 = sub_23DDC66C8();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v17 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_23DD76CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_23DDC6764();
    v8 = v7;
    if (v6 == sub_23DDC6764() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_23DDC6C08();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_23DDC6764();
          v15 = v14;
          if (v13 == sub_23DDC6764() && v15 == v16)
            break;
          v18 = sub_23DDC6C08();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_23DD76E5C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a2 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_23DD0C898(0, a3);
    v7 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
    v8 = sub_23DDC6974();

    if ((v8 & 1) == 0)
    {
      v9 = ~v5;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
        v11 = sub_23DDC6974();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

uint64_t sub_23DD76F6C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = sub_23DDC53A8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  sub_23DD79E70(0, (unint64_t *)&qword_254326778);
  v42 = a2;
  v10 = sub_23DDC6AE8();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_bridgeObjectRetain();
    }
    sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
    result = sub_23DDC6668();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_23DD7730C(uint64_t a1, int a2)
{
  return sub_23DD779E4(a1, a2, (void (*)(uint64_t))MEMORY[0x24BE3FC10], (unint64_t *)&qword_254326788);
}

uint64_t sub_23DD77320(uint64_t a1, int a2)
{
  return sub_23DD77624(a1, a2, (unint64_t *)&qword_256CFC508, (unint64_t *)&qword_256CFC500, (uint64_t (*)(uint64_t))sub_23DCFF9E8);
}

uint64_t sub_23DD7733C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  sub_23DD79EF0();
  v6 = sub_23DDC6AE8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      v33 = v31;
      v34 = v32;
    }
    result = sub_23DDC6968();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23DD77608(uint64_t a1, int a2)
{
  return sub_23DD77624(a1, a2, &qword_254326790, &qword_254326758, type metadata accessor for IndividualOvernightMetricChartPoint);
}

uint64_t sub_23DD77624(uint64_t a1, int a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t *v5;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t i;
  int v48;

  v9 = v5;
  v11 = sub_23DDC54C8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v5;
  sub_23DD79DC4(0, a3, a4, a5);
  v48 = a2;
  v16 = sub_23DDC6AE8();
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_41;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v46 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v44 = v5;
  v45 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  result = swift_retain();
  v24 = 0;
  for (i = v15; ; v15 = i)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v24 << 6);
      goto LABEL_22;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v45)
      break;
    v29 = v46;
    v30 = v46[v28];
    ++v24;
    if (!v30)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v45)
        goto LABEL_34;
      v30 = v46[v24];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v45)
        {
LABEL_34:
          swift_release();
          v9 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v30 = v46[v31];
        if (!v30)
        {
          while (1)
          {
            v24 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_43;
            if (v24 >= v45)
              goto LABEL_34;
            v30 = v46[v24];
            ++v31;
            if (v30)
              goto LABEL_21;
          }
        }
        v24 = v31;
      }
    }
LABEL_21:
    v21 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_22:
    v32 = *(_QWORD *)(v12 + 72);
    v33 = *(_QWORD *)(v15 + 48) + v32 * v27;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 32))(v14, v33, v11);
      v34 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v27);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v14, v33, v11);
      v34 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v27);
      swift_bridgeObjectRetain();
    }
    sub_23DCF535C(&qword_2543266C0, (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0], MEMORY[0x24BE401D8]);
    result = sub_23DDC6668();
    v35 = -1 << *(_BYTE *)(v17 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v22 + 8 * (v36 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v22 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v22 + 8 * v37);
      }
      while (v41 == -1);
      v25 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v17 + 48) + v32 * v25, v14, v11);
    *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v25) = v34;
    ++*(_QWORD *)(v17 + 16);
  }
  swift_release();
  v9 = v44;
  v29 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v42 = 1 << *(_BYTE *)(v15 + 32);
  if (v42 >= 64)
    bzero(v29, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v42;
  *(_QWORD *)(v15 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v9 = v17;
  return result;
}

uint64_t sub_23DD779D0(uint64_t a1, int a2)
{
  return sub_23DD779E4(a1, a2, (void (*)(uint64_t))MEMORY[0x24BDCE900], &qword_254326780);
}

uint64_t sub_23DD779E4(uint64_t a1, int a2, void (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[4];
  int v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;

  v8 = ((uint64_t (*)(_QWORD))a3)(0);
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v54 = &v46[-v9];
  v10 = sub_23DDC53A8();
  v53 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v46[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = v4;
  v13 = *v4;
  sub_23DD4C6A8(0, a4, a3);
  v14 = sub_23DDC6AE8();
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    result = swift_release();
    v43 = v48;
LABEL_42:
    *v43 = v15;
    return result;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v50 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v49 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  v52 = v13;
  result = swift_retain();
  v22 = 0;
  v47 = a2;
  v23 = 16;
  if ((a2 & 1) != 0)
    v23 = 32;
  v51 = v23;
  v24 = v23;
  while (1)
  {
    if (v19)
    {
      v26 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v27 = v26 | (v22 << 6);
      goto LABEL_24;
    }
    v28 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v28 >= v49)
    {
      v44 = v52;
      swift_release();
      v43 = v48;
      v29 = v50;
      if ((v47 & 1) != 0)
      {
LABEL_37:
        v45 = 1 << *(_BYTE *)(v44 + 32);
        if (v45 >= 64)
          bzero(v29, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v29 = -1 << v45;
        *(_QWORD *)(v44 + 16) = 0;
      }
LABEL_41:
      result = swift_release();
      goto LABEL_42;
    }
    v29 = v50;
    v30 = v50[v28];
    ++v22;
    if (!v30)
    {
      v22 = v28 + 1;
      if (v28 + 1 >= v49)
        goto LABEL_34;
      v30 = v50[v22];
      if (!v30)
        break;
    }
LABEL_23:
    v19 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v22 << 6);
LABEL_24:
    v32 = v52;
    v33 = *(_QWORD *)(v53 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v53 + v24))(v12, *(_QWORD *)(v52 + 48) + v33 * v27, v10);
    v34 = *(_QWORD *)(v32 + 56);
    v35 = *(_QWORD *)(v55 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v55 + v24))(v54, v34 + v35 * v27, v56);
    sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
    result = sub_23DDC6668();
    v36 = -1 << *(_BYTE *)(v15 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v20 + 8 * (v37 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v20 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v20 + 8 * v38);
      }
      while (v42 == -1);
      v25 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v20 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v53 + 32))(*(_QWORD *)(v15 + 48) + v33 * v25, v12, v10);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v55 + 32))(*(_QWORD *)(v15 + 56) + v35 * v25, v54, v56);
    ++*(_QWORD *)(v15 + 16);
  }
  v31 = v28 + 2;
  if (v31 >= v49)
  {
LABEL_34:
    v44 = v52;
    swift_release();
    v43 = v48;
    if ((v47 & 1) != 0)
      goto LABEL_37;
    goto LABEL_41;
  }
  v30 = v50[v31];
  if (v30)
  {
    v22 = v31;
    goto LABEL_23;
  }
  while (1)
  {
    v22 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v22 >= v49)
      goto LABEL_34;
    v30 = v50[v22];
    ++v31;
    if (v30)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_23DD77DF0(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;

  v46 = sub_23DDC53A8();
  v4 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v45 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = v2;
  v6 = *v2;
  sub_23DD79E70(0, (unint64_t *)&qword_254326770);
  v7 = sub_23DDC6AE8();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
    v35 = v39;
LABEL_42:
    *v35 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 64);
  v41 = (_QWORD *)(v6 + 64);
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v40 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  v38 = a2;
  v16 = 16;
  if ((a2 & 1) != 0)
    v16 = 32;
  v42 = v6;
  v43 = v16;
  while (1)
  {
    if (v12)
    {
      v19 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v20 = v19 | (v15 << 6);
      goto LABEL_24;
    }
    v21 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v21 >= v40)
    {
      swift_release();
      v35 = v39;
      v22 = v41;
      if ((v38 & 1) != 0)
      {
LABEL_37:
        v36 = 1 << *(_BYTE *)(v6 + 32);
        if (v36 >= 64)
          bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v22 = -1 << v36;
        *(_QWORD *)(v6 + 16) = 0;
      }
LABEL_41:
      result = swift_release();
      goto LABEL_42;
    }
    v22 = v41;
    v23 = v41[v21];
    ++v15;
    if (!v23)
    {
      v15 = v21 + 1;
      if (v21 + 1 >= v40)
        goto LABEL_34;
      v23 = v41[v15];
      if (!v23)
        break;
    }
LABEL_23:
    v12 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v4 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + v43))(v45, *(_QWORD *)(v6 + 48) + v25 * v20, v46);
    v26 = *(_QWORD *)(v6 + 56) + 16 * v20;
    v44 = *(unsigned __int8 *)(v26 + 8);
    v27 = *(_QWORD *)v26;
    sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
    result = sub_23DDC6668();
    v28 = -1 << *(_BYTE *)(v8 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v13 + 8 * v30);
      }
      while (v34 == -1);
      v17 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v8 + 48) + v25 * v17, v45, v46);
    v18 = *(_QWORD *)(v8 + 56) + 16 * v17;
    *(_QWORD *)v18 = v27;
    *(_BYTE *)(v18 + 8) = v44;
    ++*(_QWORD *)(v8 + 16);
    v6 = v42;
  }
  v24 = v21 + 2;
  if (v24 >= v40)
  {
LABEL_34:
    swift_release();
    v35 = v39;
    if ((v38 & 1) != 0)
      goto LABEL_37;
    goto LABEL_41;
  }
  v23 = v41[v24];
  if (v23)
  {
    v15 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v15 >= v40)
      goto LABEL_34;
    v23 = v41[v15];
    ++v24;
    if (v23)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_23DD781AC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  sub_23DD02F60();
  result = sub_23DDC6AE8();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = sub_23DDC6C44();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

void *sub_23DD78454()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_23DDC53A8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD79E70(0, (unint64_t *)&qword_254326778);
  v24 = v0;
  v5 = *v0;
  v6 = sub_23DDC6ADC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_23DD78690()
{
  return sub_23DD78AA0((void (*)(uint64_t))MEMORY[0x24BE3FC10], (unint64_t *)&qword_254326788);
}

void *sub_23DD786A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = sub_23DDC54C8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD79DC4(0, (unint64_t *)&qword_256CFC508, (unint64_t *)&qword_256CFC500, (uint64_t (*)(uint64_t))sub_23DCFF9E8);
  v23 = v0;
  v5 = *v0;
  v6 = sub_23DDC6ADC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_23:
    result = (void *)swift_release();
    *v23 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v24 = v5 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v25 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25)
      goto LABEL_23;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_23;
      v20 = *(_QWORD *)(v24 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_22:
    v13 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    v16 = *(_QWORD *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v16, v1);
    v17 = 8 * v15;
    v18 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v16, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_23;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v25)
      goto LABEL_23;
    v20 = *(_QWORD *)(v24 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_23DD788EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_23DD79EF0();
  v2 = *v0;
  v3 = sub_23DDC6ADC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_23DD78A8C()
{
  return sub_23DD78AA0((void (*)(uint64_t))MEMORY[0x24BDCE900], &qword_254326780);
}

char *sub_23DD78AA0(void (*a1)(uint64_t), unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *result;
  char *v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;

  v45 = ((uint64_t (*)(_QWORD))a1)(0);
  v41 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)&v37 - v5;
  v43 = sub_23DDC53A8();
  v40 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD4C6A8(0, a2, a1);
  v37 = v2;
  v7 = *v2;
  v8 = sub_23DDC6ADC();
  v9 = *(_QWORD *)(v7 + 16);
  v47 = v8;
  if (!v9)
  {
    result = (char *)swift_release();
    v36 = v47;
    v35 = v37;
LABEL_25:
    *v35 = v36;
    return result;
  }
  v10 = v8;
  result = (char *)(v8 + 64);
  v12 = (char *)(v7 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  v38 = v7 + 64;
  if (v10 != v7 || result >= &v12[8 * v13])
  {
    result = (char *)memmove(result, v12, 8 * v13);
    v10 = v47;
  }
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v46 = v7;
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v39 = (unint64_t)(v15 + 63) >> 6;
  v18 = v40;
  v19 = v41;
  v21 = v42;
  v20 = v43;
  v22 = v45;
  v23 = v47;
  while (1)
  {
    if (v17)
    {
      v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v48 = v14;
      v25 = v24 | (v14 << 6);
      v26 = v46;
      goto LABEL_9;
    }
    v31 = v14 + 1;
    v26 = v46;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v31 >= v39)
      goto LABEL_23;
    v32 = *(_QWORD *)(v38 + 8 * v31);
    v33 = v14 + 1;
    if (!v32)
    {
      v33 = v31 + 1;
      if (v31 + 1 >= v39)
        goto LABEL_23;
      v32 = *(_QWORD *)(v38 + 8 * v33);
      if (!v32)
        break;
    }
LABEL_22:
    v17 = (v32 - 1) & v32;
    v48 = v33;
    v25 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_9:
    v27 = *(_QWORD *)(v18 + 72) * v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v21, *(_QWORD *)(v26 + 48) + v27, v20);
    v28 = *(_QWORD *)(v19 + 72) * v25;
    v29 = *(_QWORD *)(v26 + 56) + v28;
    v30 = v44;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v44, v29, v22);
    (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(_QWORD *)(v23 + 48) + v27, v21, v20);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(_QWORD *)(v23 + 56) + v28, v30, v22);
    v14 = v48;
  }
  v34 = v31 + 2;
  if (v34 >= v39)
  {
LABEL_23:
    result = (char *)swift_release();
    v35 = v37;
    v36 = v47;
    goto LABEL_25;
  }
  v32 = *(_QWORD *)(v38 + 8 * v34);
  if (v32)
  {
    v33 = v34;
    goto LABEL_22;
  }
  while (1)
  {
    v33 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v33 >= v39)
      goto LABEL_23;
    v32 = *(_QWORD *)(v38 + 8 * v33);
    ++v34;
    if (v32)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_23DD78D88()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = sub_23DDC53A8();
  v1 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v34 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD79E70(0, (unint64_t *)&qword_254326770);
  v31 = v0;
  v3 = *v0;
  v4 = sub_23DDC6ADC();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = (void *)swift_release();
    v29 = v31;
LABEL_28:
    *v29 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v3 + 64), 8 * v7);
  v9 = 0;
  v10 = *(_QWORD *)(v3 + 16);
  v36 = v5;
  v37 = v3;
  *(_QWORD *)(v5 + 16) = v10;
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v32 = v3 + 64;
  v33 = (unint64_t)(v11 + 63) >> 6;
  v14 = v34;
  v15 = v35;
  v16 = v5;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v9 << 6);
      v19 = v37;
      goto LABEL_12;
    }
    v26 = v9 + 1;
    v19 = v37;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v33)
      goto LABEL_26;
    v27 = *(_QWORD *)(v32 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v33)
        goto LABEL_26;
      v27 = *(_QWORD *)(v32 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(_QWORD *)(v19 + 48) + v20, v15);
    v21 = 16 * v18;
    v22 = *(_QWORD *)(v19 + 56) + v21;
    v23 = *(_QWORD *)v22;
    v24 = *(_BYTE *)(v22 + 8);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v16 + 48) + v20, v14, v15);
    v25 = *(_QWORD *)(v16 + 56) + v21;
    *(_QWORD *)v25 = v23;
    *(_BYTE *)(v25 + 8) = v24;
  }
  v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    result = (void *)swift_release();
    v29 = v31;
    v5 = v36;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v32 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v33)
      goto LABEL_26;
    v27 = *(_QWORD *)(v32 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23DD78FF4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_23DD02F60();
  v2 = *v0;
  v3 = sub_23DDC6ADC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

BOOL sub_23DD7917C(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  v2 = *(_BYTE *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 16))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if (*(double *)(a1 + 24) == *(double *)(a2 + 24)
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48)
    && *(double *)(a1 + 56) == *(double *)(a2 + 56)
    && *(double *)(a1 + 64) == *(double *)(a2 + 64)
    && *(double *)(a1 + 72) == *(double *)(a2 + 72))
  {
    return *(double *)(a1 + 80) == *(double *)(a2 + 80);
  }
  return 0;
}

BOOL sub_23DD79240(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  char v27;
  _BOOL8 result;
  uint64_t v29;
  uint64_t *v30;
  double *v31;
  double v32;
  uint64_t *v33;
  double *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t *v44;
  _OWORD v45[5];
  uint64_t v46;
  _OWORD v47[5];
  uint64_t v48;

  v4 = type metadata accessor for OvernightMetricsChartPoint();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DD2E550();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v41 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v41 - v19;
  if ((sub_23DD405A4(*a1, *a2) & 1) == 0)
    return 0;
  v42 = v7;
  v21 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v22 = v21[5];
  v43 = a1;
  sub_23DD08000((uint64_t)a1 + v22, (uint64_t)v20);
  v23 = v21[5];
  v44 = a2;
  sub_23DD08000((uint64_t)a2 + v23, (uint64_t)v17);
  v24 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_23DD08000((uint64_t)v20, (uint64_t)v11);
  sub_23DD08000((uint64_t)v17, v24);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v25((uint64_t)v11, 1, v4) != 1)
  {
    sub_23DD08000((uint64_t)v11, (uint64_t)v14);
    if (v25(v24, 1, v4) != 1)
    {
      v26 = (uint64_t)v42;
      sub_23DD79704(v24, (uint64_t)v42);
      v27 = static OvernightMetricsChartPoint.== infix(_:_:)((uint64_t)v14, v26);
      sub_23DCF59A8(v26, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      sub_23DD2E5C0((uint64_t)v17);
      sub_23DD2E5C0((uint64_t)v20);
      sub_23DCF59A8((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      sub_23DD2E5C0((uint64_t)v11);
      if ((v27 & 1) != 0)
        goto LABEL_9;
      return 0;
    }
    sub_23DD2E5C0((uint64_t)v17);
    sub_23DD2E5C0((uint64_t)v20);
    sub_23DCF59A8((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
LABEL_7:
    sub_23DCF59A8((uint64_t)v11, (uint64_t (*)(_QWORD))sub_23DD2E550);
    return 0;
  }
  sub_23DD2E5C0((uint64_t)v17);
  sub_23DD2E5C0((uint64_t)v20);
  if (v25(v24, 1, v4) != 1)
    goto LABEL_7;
  sub_23DD2E5C0((uint64_t)v11);
LABEL_9:
  result = 0;
  v29 = v21[6];
  v30 = v43;
  v31 = (double *)((char *)v43 + v29);
  v32 = *(double *)((char *)v43 + v29);
  v33 = v44;
  v34 = (double *)((char *)v44 + v29);
  if (v32 == *v34 && v31[1] == v34[1])
  {
    v35 = (char *)v43 + v21[7];
    v36 = *((_OWORD *)v35 + 3);
    v45[2] = *((_OWORD *)v35 + 2);
    v45[3] = v36;
    v45[4] = *((_OWORD *)v35 + 4);
    v46 = *((_QWORD *)v35 + 10);
    v37 = *(_OWORD *)v35;
    v45[1] = *((_OWORD *)v35 + 1);
    v45[0] = v37;
    v38 = (char *)v44 + v21[7];
    v39 = *((_OWORD *)v38 + 3);
    v47[2] = *((_OWORD *)v38 + 2);
    v47[3] = v39;
    v47[4] = *((_OWORD *)v38 + 4);
    v48 = *((_QWORD *)v38 + 10);
    v40 = *((_OWORD *)v38 + 1);
    v47[0] = *(_OWORD *)v38;
    v47[1] = v40;
    if (sub_23DD7917C((uint64_t)v45, (uint64_t)v47)
      && *(double *)((char *)v30 + v21[8]) == *(double *)((char *)v33 + v21[8]))
    {
      return *(double *)((char *)v30 + v21[9]) == *(double *)((char *)v33 + v21[9]);
    }
    return 0;
  }
  return result;
}

BOOL sub_23DD795D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  if ((sub_23DD6D1F4(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && (v4 = *(_QWORD *)(a1 + 24),
        v5 = *(_QWORD *)(a1 + 32),
        v6 = *(_QWORD *)(a2 + 24),
        v7 = *(_QWORD *)(a2 + 32),
        sub_23DD6D360(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)),
        (v8 & 1) != 0)
    && (sub_23DD6D360(v4, v6), (v9 & 1) != 0)
    && (sub_23DD9B944(v5, v7) & 1) != 0
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48)
    && *(double *)(a1 + 56) == *(double *)(a2 + 56)
    && *(double *)(a1 + 64) == *(double *)(a2 + 64)
    && *(double *)(a1 + 72) == *(double *)(a2 + 72)
    && *(double *)(a1 + 80) == *(double *)(a2 + 80)
    && *(double *)(a1 + 88) == *(double *)(a2 + 88)
    && *(double *)(a1 + 96) == *(double *)(a2 + 96)
    && *(double *)(a1 + 104) == *(double *)(a2 + 104))
  {
    return *(double *)(a1 + 112) == *(double *)(a2 + 112);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_23DD79704(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OvernightMetricsChartPoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_23DD79748(uint64_t a1, double a2, double a3, double a4, double a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  _QWORD *v32;

  v10 = type metadata accessor for OvernightMetricsChartPoint();
  MEMORY[0x24BDAC7A8](v10);
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = (char *)&v31 - v13;
  v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v17 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v18 = *(_QWORD *)(v11 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_23DD79D80(v17, (uint64_t)v14);
      v19 = &v14[*(int *)(v10 + 20)];
      v20 = *(_QWORD *)&v19[*(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 24)];
      swift_bridgeObjectRetain();
      sub_23DCF59A8((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      sub_23DD95B6C(v20);
      v17 += v18;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    v15 = v32;
  }
  v21 = v15[2];
  v22 = v21 + 4;
  if (__OFADD__(v21, 4))
  {
    __break(1u);
LABEL_21:
    v15 = sub_23DD56480((_QWORD *)(v13 > 1), v21, 1, v15);
    v13 = v15[3];
    v24 = v13 >> 1;
    goto LABEL_13;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v13 = v15[3], v24 = v13 >> 1, (uint64_t)(v13 >> 1) < v22))
  {
    if (v21 <= v22)
      v25 = v21 + 4;
    else
      v25 = v21;
    v15 = sub_23DD56480(isUniquelyReferenced_nonNull_native, v25, 1, v15);
    v13 = v15[3];
    v24 = v13 >> 1;
  }
  v10 = v15[2];
  v21 = v10 + 1;
  if (v24 <= v10)
    goto LABEL_21;
LABEL_13:
  v15[2] = v21;
  *(double *)&v15[v10 + 4] = a3;
  v26 = v10 + 2;
  if ((uint64_t)v24 < (uint64_t)(v10 + 2))
    v15 = sub_23DD56480((_QWORD *)(v13 > 1), v10 + 2, 1, v15);
  v15[2] = v26;
  *(double *)&v15[v21 + 4] = a2;
  v27 = v15[3];
  v28 = v10 + 3;
  if ((uint64_t)(v10 + 3) > (uint64_t)(v27 >> 1))
    v15 = sub_23DD56480((_QWORD *)(v27 > 1), v10 + 3, 1, v15);
  v15[2] = v28;
  *(double *)&v15[v26 + 4] = a4;
  v29 = v15[3];
  if ((uint64_t)(v10 + 4) > (uint64_t)(v29 >> 1))
    v15 = sub_23DD56480((_QWORD *)(v29 > 1), v10 + 4, 1, v15);
  v15[2] = v10 + 4;
  *(double *)&v15[v28 + 4] = a5;
  return v15;
}

uint64_t sub_23DD799BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  int *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  char isUniquelyReferenced_nonNull_native;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  double v56;
  double v57;
  char *v58;
  uint64_t *v59;
  double v60;
  _QWORD *v61;

  sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v56 - v7;
  v9 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v10 = v9;
  v11 = (double *)((char *)a1 + v9[7]);
  v12 = *(double *)((char *)a1 + v9[8]) / (double)a2;
  if (((_BYTE)v11[2] & 1) != 0)
    v13 = v12 * *v11;
  else
    v13 = v11[1];
  if (*(double *)((char *)a1 + v9[9]) > v12)
    v14 = *(double *)((char *)a1 + v9[9]);
  else
    v14 = *(double *)((char *)a1 + v9[8]) / (double)a2;
  if (v14 >= 0.0)
  {
    v16 = v11[3];
    v15 = v11[4];
    v60 = v11[5];
    v17 = v11[7];
    v18 = *a1;
    v19 = (double *)((char *)a1 + v9[6]);
    v20 = *v19;
    v21 = v19[1];
    sub_23DD767D0(*a1, *v19, v21, v17);
    v23 = v22;
    v25 = v24;
    v26 = sub_23DD79748(v18, v20, v21, v22, v24);
    v27 = (_QWORD *)sub_23DD02E90(MEMORY[0x24BEE4AF8]);
    v28 = v26[2];
    if (!v28)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      sub_23DD08000((uint64_t)a1 + v10[5], (uint64_t)v8);
      v45 = type metadata accessor for OvernightMetricsChartPoint();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v8, 1, v45) == 1)
      {
        sub_23DD2E5C0((uint64_t)v8);
        v46 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        v47 = &v8[*(int *)(v45 + 20)];
        v46 = *(_QWORD *)&v47[*(int *)(type metadata accessor for IndividualOvernightMetricChartPointCollection() + 24)];
        swift_bridgeObjectRetain();
        sub_23DCF59A8((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for OvernightMetricsChartPoint);
      }
      v48 = v15 * v13;
      v49 = v60 * (v15 * v13);
      swift_bridgeObjectRetain();
      v50 = sub_23DD23704(v46, (uint64_t)v27, v16 * v13, v13);
      v52 = v51;
      v54 = v53;
      result = sub_23DCF59A8((uint64_t)a1, type metadata accessor for OvernightMetricsChartLayout.Configuration);
      *(_QWORD *)a3 = v27;
      *(double *)(a3 + 8) = v13;
      *(_QWORD *)(a3 + 16) = v50;
      *(_QWORD *)(a3 + 24) = v52;
      *(_QWORD *)(a3 + 32) = v54;
      *(double *)(a3 + 40) = v23;
      *(double *)(a3 + 48) = v25;
      *(_QWORD *)(a3 + 56) = 0;
      *(double *)(a3 + 64) = v14;
      *(double *)(a3 + 72) = v13;
      *(double *)(a3 + 80) = v13;
      *(double *)(a3 + 88) = v16 * v13;
      *(double *)(a3 + 96) = v16 * v13;
      *(double *)(a3 + 104) = v49;
      *(double *)(a3 + 112) = v48;
      return result;
    }
    v56 = v15;
    v57 = v16;
    v58 = v8;
    v59 = a1;
    swift_bridgeObjectRetain();
    v29 = 0;
    while (1)
    {
      v30 = *(double *)&v26[v29 + 4];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v61 = v27;
      v33 = sub_23DD7693C(v30);
      v34 = v27[2];
      v35 = (v32 & 1) == 0;
      v36 = v34 + v35;
      if (__OFADD__(v34, v35))
        break;
      v37 = v32;
      if (v27[3] >= v36)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_23DD78FF4();
      }
      else
      {
        sub_23DD781AC(v36, isUniquelyReferenced_nonNull_native);
        v38 = sub_23DD7693C(v30);
        if ((v37 & 1) != (v39 & 1))
          goto LABEL_29;
        v33 = v38;
      }
      v40 = v13 * 0.25 + (v14 + v13 * -0.5) * ((v30 - v23) / (v25 - v23));
      v27 = v61;
      if ((v37 & 1) != 0)
      {
        *(double *)(v61[7] + 8 * v33) = v40;
      }
      else
      {
        v61[(v33 >> 6) + 8] |= 1 << v33;
        v41 = 8 * v33;
        *(double *)(v27[6] + v41) = v30;
        *(double *)(v27[7] + v41) = v40;
        v42 = v27[2];
        v43 = __OFADD__(v42, 1);
        v44 = v42 + 1;
        if (v43)
          goto LABEL_27;
        v27[2] = v44;
      }
      ++v29;
      swift_bridgeObjectRelease();
      if (v28 == v29)
      {
        swift_bridgeObjectRelease();
        v8 = v58;
        a1 = v59;
        v15 = v56;
        v16 = v57;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
  }
  __break(1u);
LABEL_29:
  result = sub_23DDC6C20();
  __break(1u);
  return result;
}

uint64_t sub_23DD79D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OvernightMetricsChartPoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_23DD79DC4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t (*v7)(uint64_t);
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    sub_23DDC54C8();
    v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BE401C0];
    sub_23DCFB328(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DCF535C(&qword_2543266C0, v7, MEMORY[0x24BE401D8]);
    v8 = sub_23DDC6B00();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_23DD79E70(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    sub_23DDC53A8();
    sub_23DCF535C(&qword_254326680, (uint64_t (*)(uint64_t))MEMORY[0x24BE3FE20], MEMORY[0x24BE3FE38]);
    v3 = sub_23DDC6B00();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_23DD79EF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CFEA68)
  {
    sub_23DD0C898(255, (unint64_t *)&qword_256CFEA70);
    sub_23DD79F64();
    v0 = sub_23DDC6B00();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CFEA68);
  }
}

unint64_t sub_23DD79F64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CFEA78;
  if (!qword_256CFEA78)
  {
    v1 = sub_23DD0C898(255, (unint64_t *)&qword_256CFEA70);
    result = MEMORY[0x242643BD8](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_256CFEA78);
  }
  return result;
}

uint64_t destroy for OvernightMetricsChartLayout.Derivations()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OvernightMetricsChartLayout.Derivations(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for OvernightMetricsChartLayout.Derivations(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for OvernightMetricsChartLayout.Derivations(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for OvernightMetricsChartLayout.Derivations(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OvernightMetricsChartLayout.Derivations(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OvernightMetricsChartLayout.Derivations()
{
  return &type metadata for OvernightMetricsChartLayout.Derivations;
}

_QWORD *sub_23DD7A2C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, int *);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, _QWORD, uint64_t, int *);
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int *v59;
  unsigned int (*v60)(char *, uint64_t, int *);
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, _QWORD, uint64_t, int *);
  uint64_t v81;
  char *v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v15 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v5 = a3;
    v6 = a2;
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
    v12 = *((_QWORD *)v11 - 1);
    v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
    swift_bridgeObjectRetain();
    v113 = v5;
    if (v13(v10, 1, v11))
    {
      sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = sub_23DDC53A8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v9, v10, v16);
      v17 = v11[5];
      v18 = &v9[v17];
      v111 = v12;
      v19 = &v10[v17];
      v20 = sub_23DDC512C();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      v21(v18, v19, v20);
      v22 = v11[6];
      v23 = &v9[v22];
      v24 = &v10[v22];
      v21(&v9[v22], &v10[v22], v20);
      sub_23DCF9010();
      v25 = v6;
      v27 = v26;
      v21(&v23[*(int *)(v26 + 36)], &v24[*(int *)(v26 + 36)], v20);
      v28 = v11[7];
      v29 = &v9[v28];
      v30 = &v10[v28];
      v21(&v9[v28], &v10[v28], v20);
      v31 = *(int *)(v27 + 36);
      v6 = v25;
      v21(&v29[v31], &v30[v31], v20);
      v32 = v11[8];
      v33 = &v9[v32];
      v34 = &v10[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      v33[8] = v34[8];
      v35 = v11[9];
      v36 = &v9[v35];
      v37 = &v10[v35];
      v38 = sub_23DDC54C8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
      v39 = v11[10];
      v40 = &v9[v39];
      v41 = &v10[v39];
      v42 = *((_QWORD *)v41 + 1);
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_QWORD *)v40 + 1) = v42;
      v43 = v11[11];
      v44 = &v9[v43];
      v45 = &v10[v43];
      v46 = *((_QWORD *)v45 + 1);
      *(_QWORD *)v44 = *(_QWORD *)v45;
      *((_QWORD *)v44 + 1) = v46;
      v47 = v11[12];
      v48 = &v9[v47];
      v49 = &v10[v47];
      v50 = *((_QWORD *)v49 + 1);
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *((_QWORD *)v48 + 1) = v50;
      v51 = *(void (**)(char *, _QWORD, uint64_t, int *))(v111 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v51(v9, 0, 1, v11);
      v5 = v113;
    }
    v52 = *(int *)(v5 + 28);
    *(_QWORD *)((char *)v7 + *(int *)(v5 + 24)) = *(_QWORD *)((char *)v6 + *(int *)(v5 + 24));
    v53 = (char *)v7 + v52;
    v54 = (char *)v6 + v52;
    *(_QWORD *)((char *)v7 + v52) = *(_QWORD *)((char *)v6 + v52);
    v55 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
    v56 = v55[5];
    v57 = &v53[v56];
    v58 = &v54[v56];
    v59 = (int *)type metadata accessor for OvernightMetricsChartPoint();
    v112 = *((_QWORD *)v59 - 1);
    v60 = *(unsigned int (**)(char *, uint64_t, int *))(v112 + 48);
    swift_bridgeObjectRetain();
    v114 = v7;
    if (v60(v58, 1, v59))
    {
      sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      v62 = sub_23DDC512C();
      v63 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
      v63(v57, v58, v62);
      v64 = v59[5];
      v65 = &v57[v64];
      v110 = v6;
      v66 = &v58[v64];
      v63(&v57[v64], &v58[v64], v62);
      sub_23DCF9010();
      v63(&v65[*(int *)(v67 + 36)], &v66[*(int *)(v67 + 36)], v62);
      v68 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
      *(_QWORD *)&v65[v68[5]] = *(_QWORD *)&v66[v68[5]];
      *(_QWORD *)&v65[v68[6]] = *(_QWORD *)&v66[v68[6]];
      *(_QWORD *)&v65[v68[7]] = *(_QWORD *)&v66[v68[7]];
      v69 = v59[6];
      v70 = &v57[v69];
      v71 = &v58[v69];
      *(_OWORD *)v70 = *(_OWORD *)v71;
      v70[16] = v71[16];
      v57[v59[7]] = v58[v59[7]];
      v57[v59[8]] = v58[v59[8]];
      v57[v59[9]] = v58[v59[9]];
      v72 = v59[10];
      v73 = &v57[v72];
      v74 = &v58[v72];
      v75 = *((_QWORD *)v74 + 1);
      *(_QWORD *)v73 = *(_QWORD *)v74;
      *((_QWORD *)v73 + 1) = v75;
      v76 = v59[11];
      v77 = &v57[v76];
      v78 = &v58[v76];
      v79 = *((_QWORD *)v78 + 1);
      *(_QWORD *)v77 = *(_QWORD *)v78;
      *((_QWORD *)v77 + 1) = v79;
      v80 = *(void (**)(char *, _QWORD, uint64_t, int *))(v112 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v6 = v110;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v80(v57, 0, 1, v59);
      v7 = v114;
    }
    *(_OWORD *)&v53[v55[6]] = *(_OWORD *)&v54[v55[6]];
    v81 = v55[7];
    v82 = &v53[v81];
    v83 = &v54[v81];
    v84 = *((_OWORD *)v83 + 1);
    *(_OWORD *)v82 = *(_OWORD *)v83;
    *((_OWORD *)v82 + 1) = v84;
    *((_QWORD *)v82 + 10) = *((_QWORD *)v83 + 10);
    v85 = *((_OWORD *)v83 + 4);
    v86 = *((_OWORD *)v83 + 2);
    *((_OWORD *)v82 + 3) = *((_OWORD *)v83 + 3);
    *((_OWORD *)v82 + 4) = v85;
    *((_OWORD *)v82 + 2) = v86;
    *(_QWORD *)&v53[v55[8]] = *(_QWORD *)&v54[v55[8]];
    *(_QWORD *)&v53[v55[9]] = *(_QWORD *)&v54[v55[9]];
    v87 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
    v88 = &v53[v87];
    v89 = &v54[v87];
    v90 = *((_QWORD *)v89 + 1);
    *(_QWORD *)v88 = *(_QWORD *)v89;
    *((_QWORD *)v88 + 1) = v90;
    v91 = *((_QWORD *)v89 + 3);
    *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
    *((_QWORD *)v88 + 3) = v91;
    *((_QWORD *)v88 + 4) = *((_QWORD *)v89 + 4);
    *(_OWORD *)(v88 + 40) = *(_OWORD *)(v89 + 40);
    *(_OWORD *)(v88 + 56) = *(_OWORD *)(v89 + 56);
    *(_OWORD *)(v88 + 72) = *(_OWORD *)(v89 + 72);
    *(_OWORD *)(v88 + 88) = *(_OWORD *)(v89 + 88);
    *(_OWORD *)(v88 + 104) = *(_OWORD *)(v89 + 104);
    v92 = *(int *)(v113 + 32);
    v93 = (char *)v7 + v92;
    v94 = (char *)v6 + v92;
    v95 = *(_QWORD *)v94;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v95)
    {
      v96 = *((_QWORD *)v94 + 1);
      v97 = *((_QWORD *)v94 + 2);
      *(_QWORD *)v93 = v95;
      *((_QWORD *)v93 + 1) = v96;
      *((_QWORD *)v93 + 2) = v97;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v93 = *(_OWORD *)v94;
      *((_QWORD *)v93 + 2) = *((_QWORD *)v94 + 2);
    }
    v93[24] = v94[24];
    v93[32] = v94[32];
    v98 = *((_QWORD *)v94 + 6);
    *((_QWORD *)v93 + 5) = *((_QWORD *)v94 + 5);
    *((_QWORD *)v93 + 6) = v98;
    v93[56] = v94[56];
    v99 = *((_QWORD *)v94 + 9);
    *((_QWORD *)v93 + 8) = *((_QWORD *)v94 + 8);
    *((_QWORD *)v93 + 9) = v99;
    *((_QWORD *)v93 + 10) = *((_QWORD *)v94 + 10);
    v100 = *(_OWORD *)(v94 + 88);
    *(_OWORD *)(v93 + 104) = *(_OWORD *)(v94 + 104);
    *(_OWORD *)(v93 + 88) = v100;
    v101 = *(_OWORD *)(v94 + 120);
    v102 = *(_OWORD *)(v94 + 136);
    *(_OWORD *)(v93 + 152) = *(_OWORD *)(v94 + 152);
    *(_OWORD *)(v93 + 136) = v102;
    *(_OWORD *)(v93 + 120) = v101;
    v103 = *((_QWORD *)v94 + 22);
    *((_QWORD *)v93 + 21) = *((_QWORD *)v94 + 21);
    *((_QWORD *)v93 + 22) = v103;
    v105 = *((_QWORD *)v94 + 23);
    v104 = *((_QWORD *)v94 + 24);
    v93[200] = v94[200];
    *((_QWORD *)v93 + 23) = v105;
    *((_QWORD *)v93 + 24) = v104;
    v93[201] = v94[201];
    v106 = *((_QWORD *)v94 + 27);
    *((_QWORD *)v93 + 26) = *((_QWORD *)v94 + 26);
    *((_QWORD *)v93 + 27) = v106;
    v107 = *((_QWORD *)v94 + 29);
    *((_QWORD *)v93 + 28) = *((_QWORD *)v94 + 28);
    *((_QWORD *)v93 + 29) = v107;
    *((_QWORD *)v93 + 30) = *((_QWORD *)v94 + 30);
    v93[248] = v94[248];
    v108 = *((_QWORD *)v94 + 33);
    *((_QWORD *)v93 + 32) = *((_QWORD *)v94 + 32);
    *((_QWORD *)v93 + 33) = v108;
    *((_QWORD *)v93 + 34) = *((_QWORD *)v94 + 34);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v15 = v114;
  }
  swift_retain();
  return v15;
}

uint64_t sub_23DD7A93C(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5))
  {
    v6 = sub_23DDC53A8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    v7 = v4 + v5[5];
    v8 = sub_23DDC512C();
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v7, v8);
    v10 = v4 + v5[6];
    v9(v10, v8);
    sub_23DCF9010();
    v12 = v11;
    v9(v10 + *(int *)(v11 + 36), v8);
    v13 = v4 + v5[7];
    v9(v13, v8);
    v9(v13 + *(int *)(v12 + 36), v8);
    v14 = v4 + v5[9];
    v15 = sub_23DDC54C8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v16 = a1 + a2[7];
  swift_bridgeObjectRelease();
  v17 = v16 + *(int *)(type metadata accessor for OvernightMetricsChartLayout.Configuration(0) + 20);
  v18 = type metadata accessor for OvernightMetricsChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18))
  {
    v19 = sub_23DDC512C();
    v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
    v20(v17, v19);
    v21 = v17 + *(int *)(v18 + 20);
    v20(v21, v19);
    sub_23DCF9010();
    v20(v21 + *(int *)(v22 + 36), v19);
    type metadata accessor for IndividualOvernightMetricChartPointCollection();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OvernightMetricsChartLayout(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[8]))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *sub_23DD7AC2C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, int *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, _QWORD, uint64_t, int *);
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int *v57;
  unsigned int (*v58)(char *, uint64_t, int *);
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, _QWORD, uint64_t, int *);
  uint64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v112;

  v3 = a3;
  v4 = a1;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = (int *)type metadata accessor for IndividualOvernightMetricChartPoint(0);
  v9 = *((_QWORD *)v8 - 1);
  v10 = *(unsigned int (**)(char *, uint64_t, int *))(v9 + 48);
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    sub_23DCFB328(0, &qword_254326710, type metadata accessor for IndividualOvernightMetricChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = sub_23DDC53A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v6, v7, v12);
    v13 = v8[5];
    v14 = &v6[v13];
    v15 = &v7[v13];
    v16 = sub_23DDC512C();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v18 = v8[6];
    v19 = &v6[v18];
    v20 = &v7[v18];
    v17(&v6[v18], &v7[v18], v16);
    sub_23DCF9010();
    v109 = v9;
    v21 = v3;
    v22 = v4;
    v24 = v23;
    v17(&v19[*(int *)(v23 + 36)], &v20[*(int *)(v23 + 36)], v16);
    v25 = v8[7];
    v26 = &v6[v25];
    v27 = &v7[v25];
    v17(&v6[v25], &v7[v25], v16);
    v28 = *(int *)(v24 + 36);
    v4 = v22;
    v3 = v21;
    v17(&v26[v28], &v27[v28], v16);
    v29 = v8[8];
    v30 = &v6[v29];
    v31 = &v7[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v8[9];
    v33 = &v6[v32];
    v34 = &v7[v32];
    v35 = sub_23DDC54C8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = v8[10];
    v37 = &v6[v36];
    v38 = &v7[v36];
    v39 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = v39;
    v40 = v8[11];
    v41 = &v6[v40];
    v42 = &v7[v40];
    v43 = *((_QWORD *)v42 + 1);
    *(_QWORD *)v41 = *(_QWORD *)v42;
    *((_QWORD *)v41 + 1) = v43;
    v44 = v8[12];
    v45 = &v6[v44];
    v46 = &v7[v44];
    v47 = *((_QWORD *)v46 + 1);
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *((_QWORD *)v45 + 1) = v47;
    v48 = *(void (**)(char *, _QWORD, uint64_t, int *))(v109 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v6, 0, 1, v8);
  }
  v49 = *(int *)(v3 + 28);
  v110 = v3;
  v50 = a2;
  *(_QWORD *)((char *)v4 + *(int *)(v3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v3 + 24));
  v51 = (char *)v4 + v49;
  v52 = (char *)a2 + v49;
  *(_QWORD *)((char *)v4 + v49) = *(_QWORD *)((char *)a2 + v49);
  v53 = (int *)type metadata accessor for OvernightMetricsChartLayout.Configuration(0);
  v54 = v53[5];
  v55 = &v51[v54];
  v56 = &v52[v54];
  v57 = (int *)type metadata accessor for OvernightMetricsChartPoint();
  v108 = *((_QWORD *)v57 - 1);
  v58 = *(unsigned int (**)(char *, uint64_t, int *))(v108 + 48);
  swift_bridgeObjectRetain();
  v112 = v4;
  if (v58(v56, 1, v57))
  {
    sub_23DCFB328(0, (unint64_t *)&qword_254326A48, (uint64_t (*)(uint64_t))type metadata accessor for OvernightMetricsChartPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    v60 = sub_23DDC512C();
    v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
    v61(v55, v56, v60);
    v62 = v57[5];
    v63 = &v55[v62];
    v64 = &v56[v62];
    v61(&v55[v62], &v56[v62], v60);
    sub_23DCF9010();
    v61(&v63[*(int *)(v65 + 36)], &v64[*(int *)(v65 + 36)], v60);
    v66 = (int *)type metadata accessor for IndividualOvernightMetricChartPointCollection();
    *(_QWORD *)&v63[v66[5]] = *(_QWORD *)&v64[v66[5]];
    *(_QWORD *)&v63[v66[6]] = *(_QWORD *)&v64[v66[6]];
    *(_QWORD *)&v63[v66[7]] = *(_QWORD *)&v64[v66[7]];
    v67 = v57[6];
    v68 = &v55[v67];
    v69 = &v56[v67];
    *(_OWORD *)v68 = *(_OWORD *)v69;
    v68[16] = v69[16];
    v55[v57[7]] = v56[v57[7]];
    v55[v57[8]] = v56[v57[8]];
    v55[v57[9]] = v56[v57[9]];
    v70 = v57[10];
    v71 = &v55[v70];
    v72 = &v56[v70];
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = v57[11];
    v75 = &v55[v74];
    v76 = &v56[v74];
    v77 = *((_QWORD *)v76 + 1);
    *(_QWORD *)v75 = *(_QWORD *)v76;
    *((_QWORD *)v75 + 1) = v77;
    v78 = *(void (**)(char *, _QWORD, uint64_t, int *))(v108 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v4 = v112;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v78(v55, 0, 1, v57);
    v50 = a2;
  }
  *(_OWORD *)&v51[v53[6]] = *(_OWORD *)&v52[v53[6]];
  v79 = v53[7];
  v80 = &v51[v79];
  v81 = &v52[v79];
  v82 = *((_OWORD *)v81 + 1);
  *(_OWORD *)v80 = *(_OWORD *)v81;
  *((_OWORD *)v80 + 1) = v82;
  *((_QWORD *)v80 + 10) = *((_QWORD *)v81 + 10);
  v83 = *((_OWORD *)v81 + 4);
  v84 = *((_OWORD *)v81 + 2);
  *((_OWORD *)v80 + 3) = *((_OWORD *)v81 + 3);
  *((_OWORD *)v80 + 4) = v83;
  *((_OWORD *)v80 + 2) = v84;
  *(_QWORD *)&v51[v53[8]] = *(_QWORD *)&v52[v53[8]];
  *(_QWORD *)&v51[v53[9]] = *(_QWORD *)&v52[v53[9]];
  v85 = *(int *)(type metadata accessor for OvernightMetricsChartLayout(0) + 20);
  v86 = &v51[v85];
  v87 = &v52[v85];
  v88 = *((_QWORD *)v87 + 1);
  *(_QWORD *)v86 = *(_QWORD *)v87;
  *((_QWORD *)v86 + 1) = v88;
  v89 = *((_QWORD *)v87 + 3);
  *((_QWORD *)v86 + 2) = *((_QWORD *)v87 + 2);
  *((_QWORD *)v86 + 3) = v89;
  *((_QWORD *)v86 + 4) = *((_QWORD *)v87 + 4);
  *(_OWORD *)(v86 + 40) = *(_OWORD *)(v87 + 40);
  *(_OWORD *)(v86 + 56) = *(_OWORD *)(v87 + 56);
  *(_OWORD *)(v86 + 72) = *(_OWORD *)(v87 + 72);
  *(_OWORD *)(v86 + 88) = *(_OWORD *)(v87 + 88);
  *(_OWORD *)(v86 + 104) = *(_OWORD *)(v87 + 104);
  v90 = *(int *)(v110 + 32);
  v91 = (char *)v4 + v90;
  v92 = (char *)v50 + v90;
  v93 = *(_QWORD *)((char *)v50 + v90);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v93)
  {
    v94 = *((_QWORD *)v92 + 1);
    v95 = *((_QWORD *)v92 + 2);
    *(_QWORD *)v91 = v93;
    *((_QWORD *)v91 + 1) = v94;
    *((_QWORD *)v91 + 2) = v95;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v91 = *(_OWORD *)v92;
    *((_QWORD *)v91 + 2) = *((_QWORD *)v92 + 2);
  }
  v91[24] = v92[24];
  v91[32] = v92[32];
  v96 = *((_QWORD *)v92 + 6);
  *((_QWORD *)v91 + 5) = *((_QWORD *)v92 + 5);
  *((_QWORD *)v91 + 6) = v96;
  v91[56] = v92[56];
  v97 = *((_QWORD *)v92 + 9);
  *((_QWORD *)v91 + 8) = *((_QWORD *)v92 + 8);
  *((_QWORD *)v91 + 9) = v97;
  *((_QWORD *)v91 + 10) = *((_QWORD *)v92 + 10);
  v98 = *(_OWORD *)(v92 + 88);
  *(_OWORD *)(v91 + 104) = *(_OWORD *)(v92 + 104);
  *(_OWORD *)(v91 + 88) = v98;
  v99 = *(_OWORD *)(v92 + 120);
  v100 = *(_OWORD *)(v92 + 136);
  *(_OWORD *)(v91 + 152) = *(_OWORD *)(v92 + 152);
  *(_OWORD *)(v91 + 136) = v100;
  *(_OWORD *)(v91 + 120) = v99;
  v101 = *((_QWORD *)v92 + 22);
  *((_QWORD *)v91 + 21) = *((_QWORD *)v92 + 21);
  *((_QWORD *)v91 + 22) = v101;
  v103 = *((_QWORD *)v92 + 23);
  v102 = *((_QWORD *)v92 + 24);
  v91[200] = v92[200];
  *((_QWORD *)v91 + 23) = v103;
  *((_QWORD *)v91 + 24) = v102;
  v91[201] = v92[201];
  v104 = *((_QWORD *)v92 + 27);
  *((_QWORD *)v91 + 26) = *((_QWORD *)v92 + 26);
  *((_QWORD *)v91 + 27) = v104;
  v105 = *((_QWORD *)v92 + 29);
  *((_QWORD *)v91 + 28) = *((_QWORD *)v92 + 28);
  *((_QWORD *)v91 + 29) = v105;
  *((_QWORD *)v91 + 30) = *((_QWORD *)v92 + 30);
  v91[248] = v92[248];
  v106 = *((_QWORD *)v92 + 33);
  *((_QWORD *)v91 + 32) = *((_QWORD *)v92 + 32);
  *((_QWORD *)v91 + 33) = v106;
  *((_QWORD *)v91 + 34) = *((_QWORD *)v92 + 34);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v112;
}

